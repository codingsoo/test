[
  {
    "number": 15200,
    "title": "Order in included model",
    "created_at": "2022-10-28T19:48:29Z",
    "closed_at": "2022-11-04T06:52:03Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/sequelize/sequelize/issues/15200",
    "body": "Hello,\r\nI don't know how to order an include models.\r\nHere's my code :\r\n```\r\nlet category = await Category.findOne({\r\n    where: {\r\n      slug: req.params.slug,\r\n    },\r\n    include: [\r\n      {\r\n        model: Category,\r\n        as: \"subcategories\",\r\n      },\r\n      {\r\n        model: Product,\r\n        as: \"products\",\r\n        include: [\r\n          {\r\n            model: File,\r\n            as: \"files\",\r\n          },\r\n          {\r\n            model: Product,\r\n            as: \"variations\",\r\n          },\r\n        ],\r\n      },\r\n    ],\r\n    order: [{ model: Product, as: \"variations\" }, \"price\", \"DESC\"]\r\n  });\r\n```\r\nHere's the error : Unable to find a valid association for model, 'Product'\r\nI have tried many solutions but don't find one working.",
    "comments_url": "https://api.github.com/repos/sequelize/sequelize/issues/15200/comments",
    "author": "Lukkyz",
    "comments": [
      {
        "user": "fzn0x",
        "created_at": "2022-11-04T02:50:00Z",
        "body": "Hi, what the result do you expect and what do you get from the query above?"
      }
    ]
  },
  {
    "number": 13535,
    "title": "JSON foreignKey",
    "created_at": "2021-10-06T10:51:48Z",
    "closed_at": "2021-11-19T00:06:12Z",
    "labels": [
      "question",
      "stale"
    ],
    "url": "https://github.com/sequelize/sequelize/issues/13535",
    "body": "How can I set a json field as the foreignKey?\r\n\r\n```js\r\napp.model.Foo.belongsTo(app.model.Bar, {\r\n  foreignKey: json('myJson.myField'),\r\n});\r\n```",
    "comments_url": "https://api.github.com/repos/sequelize/sequelize/issues/13535/comments",
    "author": "sm2017",
    "comments": [
      {
        "user": "sm2017",
        "created_at": "2021-10-06T10:54:52Z",
        "body": "I also need cast `myField` to `UUID`"
      },
      {
        "user": "soryy708",
        "created_at": "2021-10-17T08:00:40Z",
        "body": "Is the JSON column a primary key of the table?\r\nIt doesn't make sense to me to relate on a non-key column."
      },
      {
        "user": "sm2017",
        "created_at": "2021-10-17T08:50:20Z",
        "body": "@soryy708 It is not the primary key, it has a field like `myField` or `id` , `ON((my_table.my_json->>'myField')::UUID = another_table.id)`"
      },
      {
        "user": "sm2017",
        "created_at": "2021-10-17T08:50:55Z",
        "body": "> It doesn't make sense to me to relate on a non-key column.\r\n\r\nIt's possible in PostgreSQL\r\n\r\n"
      },
      {
        "user": "github-actions[bot]",
        "created_at": "2021-10-27T17:36:44Z",
        "body": "This issue has been automatically marked as stale because it has been open for 7 days without activity. It will be closed if no further activity occurs. If this is still an issue, just leave a comment or remove the \"stale\" label. 🙂"
      },
      {
        "user": "github-actions[bot]",
        "created_at": "2021-11-04T00:06:54Z",
        "body": "This issue has been automatically marked as stale because it has been open for 7 days without activity. It will be closed if no further activity occurs. If this is still an issue, just leave a comment or remove the \"stale\" label. 🙂"
      }
    ]
  },
  {
    "number": 13404,
    "title": "Include/Exclude for nested models (for scopes for example) ",
    "created_at": "2021-07-27T14:08:31Z",
    "closed_at": "2021-11-20T00:05:43Z",
    "labels": [
      "question",
      "stale"
    ],
    "url": "https://github.com/sequelize/sequelize/issues/13404",
    "body": "I have a question: How I can exclude some attributes from nested models? I know that i can just add : \r\n```  include: [\r\n    {\r\n      association: ModelName.associations.user,\r\n       attributes: {\r\n         exclude: ['id']\r\n       }\r\n    }\r\n```\r\n**but in some cases, it's not possible to use this syntax**. \r\nfor example, if i use` default scope`, \r\nin some specific cases, i want to hide some attributes from the nested included table. \r\nfor where clause I can use syntax `'$user.id$` . \r\ndo we have something similar for attributes? if no, then it would be nice to have it.\r\n\r\nof course i can just create scope and pass some args to the scope and then add this exclude/include list, but it looks not so nice ",
    "comments_url": "https://api.github.com/repos/sequelize/sequelize/issues/13404/comments",
    "author": "SiarheiBokuts",
    "comments": [
      {
        "user": "github-actions[bot]",
        "created_at": "2021-10-27T18:50:11Z",
        "body": "This issue has been automatically marked as stale because it has been open for 7 days without activity. It will be closed if no further activity occurs. If this is still an issue, just leave a comment or remove the \"stale\" label. 🙂"
      },
      {
        "user": "SiarheiBokuts",
        "created_at": "2021-10-28T14:18:11Z",
        "body": "No answer? 😥"
      },
      {
        "user": "github-actions[bot]",
        "created_at": "2021-11-05T00:06:14Z",
        "body": "This issue has been automatically marked as stale because it has been open for 7 days without activity. It will be closed if no further activity occurs. If this is still an issue, just leave a comment or remove the \"stale\" label. 🙂"
      },
      {
        "user": "dimd13",
        "created_at": "2023-07-08T07:52:50Z",
        "body": "+1\r\n"
      }
    ]
  },
  {
    "number": 13328,
    "title": "How to find records where relation is null",
    "created_at": "2021-06-18T13:58:04Z",
    "closed_at": "2021-10-24T15:21:30Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/sequelize/sequelize/issues/13328",
    "body": "I am trying to get all records where item doesn't have any assotiations\r\n\r\n `Lead.findAll({\r\n        include: [\r\n{\r\n        model: Assignment,\r\n        as: 'assignment',\r\n        attributes: {\r\n            exclude: ['created_at', 'updated_at']\r\n        },\r\n        include: ['team']\r\n    }],\r\n        order: [\r\n            ['created_at', 'DESC'],\r\n        ],\r\n    })`\r\n\r\nSo i want to get all leads where Assignment Assotiation is null",
    "comments_url": "https://api.github.com/repos/sequelize/sequelize/issues/13328/comments",
    "author": "tobelyan",
    "comments": [
      {
        "user": "fzn0x",
        "created_at": "2021-10-24T15:21:30Z",
        "body": "You can use `$eq`\r\n\r\n```js\r\nLead.findAll({\r\n    include:[{\r\n        model: Assignment,\r\n        as: 'assignment',\r\n        attributes: { exclude: ['created_at', 'updated_at'] },\r\n        where: {\r\n            YOUR_ASSIGNMENT_PK_COLUMN_NAME: {\r\n              $eq: null\r\n            }\r\n        }\r\n    }]\r\n});\r\n```"
      }
    ]
  },
  {
    "number": 13287,
    "title": "Sequelize not doing rollback on destroy ",
    "created_at": "2021-05-26T12:13:37Z",
    "closed_at": "2021-11-02T00:06:55Z",
    "labels": [
      "question",
      "stale"
    ],
    "url": "https://github.com/sequelize/sequelize/issues/13287",
    "body": "What i'm doing wrong here ??\r\n\r\n```\r\ntry {\r\n    const result = await sequelize.transaction(async (t) => {\r\n      t.afterCommit(() => {\r\n        console.log(\"commit done\");\r\n      });\r\n      var photos = await vault.findAll(\r\n        {\r\n          where: { post_id: post_id },\r\n          attributes: [\"user_picture\", \"user_thumbnail\"],\r\n        },\r\n        { transaction: t }\r\n      );\r\n      await vault.destroy({ where: { post_id: post_id }, transaction: t });\r\n      throw new Error();\r\n  } catch (error) {\r\n    console.log(error.message);\r\n  }",
    "comments_url": "https://api.github.com/repos/sequelize/sequelize/issues/13287/comments",
    "author": "Spidy-crypto",
    "comments": [
      {
        "user": "github-actions[bot]",
        "created_at": "2021-10-27T19:00:20Z",
        "body": "This issue has been automatically marked as stale because it has been open for 7 days without activity. It will be closed if no further activity occurs. If this is still an issue, just leave a comment or remove the \"stale\" label. 🙂"
      }
    ]
  },
  {
    "number": 12319,
    "title": "OR block with nested AND not generated to SQL",
    "created_at": "2020-05-27T18:23:29Z",
    "closed_at": "2020-05-29T20:04:06Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/sequelize/sequelize/issues/12319",
    "body": "## Issue Description\r\n\r\nAn OR block is ignored in a query when generating SQL. Changing the order of the OR blocks causes always only the last one to be generated. The nested AND is generated correctly when moving the first OR block after the last one.\r\n\r\n### What are you doing?\r\n\r\n```js\r\nawait MyTable.findAll({\r\nwhere: {\r\n  checkedAt: null,\r\n  abcId: {[Op.not]: null},\r\n  [Op.or]: [\r\n    {cancelledAt: {[Op.lt]: moment().subtract(3, 'minutes')}},\r\n    {[Op.and]: [\r\n      {orderId: null},\r\n      {orderDate: {[Op.lt]: moment().subtract(2, 'hours')}}\r\n    ]}\r\n  ],\r\n  [Op.or]: [\r\n    {something: {[Op.not]: 'qwerty'}},\r\n    {fooBar: {[Op.not]: null}}\r\n  ]\r\n}\r\n});\r\n```\r\n\r\n### What do you expect to happen?\r\n\r\n```\r\nWHERE (deleted_at IS NULL \r\nAND (\r\n(something != 'qwerty' OR foo_bar IS NOT NULL) \r\nAND (cancelled_at < '...' OR (order_id IS NULL AND order_date < '...')) \r\nAND (something != 'qwerty' OR foo_bar IS NOT NULL) \r\nAND checked_at IS NULL AND abc_id IS NOT NULL)\r\n);\r\n```\r\n\r\n### What is actually happening?\r\n\r\n```\r\nWHERE (deleted_at IS NULL \r\nAND (\r\n(something != 'qwerty' OR foo_bar IS NOT NULL) \r\nAND checked_at IS NULL AND abc_id IS NOT NULL)\r\n);\r\n```\r\n\r\n### Environment\r\n\r\n- Sequelize version: 5.21.10\r\n- Node.js version: 12.16.3\r\n- Operating System: MacOS Catalina 10.15.4 (19E287)\r\n\r\n## Issue Template Checklist\r\n\r\n### How does this problem relate to dialects?\r\n\r\n- [ ] I think this problem happens regardless of the dialect.\r\n- [ ] I think this problem happens only for the following dialect(s): <!-- Put dialect(s) here -->\r\n- [X] I don't know, I was using PostgreSql, with connector library version 8.2.1 and database version 9.6.17\r\n\r\n### Would you be willing to resolve this issue by submitting a Pull Request?\r\n\r\n- [ ] Yes, I have the time and I know how to start.\r\n- [ ] Yes, I have the time but I don't know how to start, I would need guidance.\r\n- [ ] No, I don't have the time, although I believe I could do it if I had the time...\r\n- [X] No, I don't have the time and I wouldn't even know how to start.\r\n",
    "comments_url": "https://api.github.com/repos/sequelize/sequelize/issues/12319/comments",
    "author": "tapz",
    "comments": [
      {
        "user": "sushantdhiman",
        "created_at": "2020-05-28T04:34:01Z",
        "body": ":) Yeah it wont work, object key is `Op.or` so last one will always override. For example\r\n\r\n```js\r\n{\r\n  a: 1,\r\n  a: 2\r\n}\r\n```\r\n will always give you\r\n\r\n```js\r\n{\r\n  a: 2\r\n}\r\n```\r\n\r\nFor your usecase, perhaps wrap both `Op.or` blocks under `Op.and`\r\n\r\n```js\r\n{\r\n  where: {\r\n    checkedAt: null,\r\n    abcId: {\r\n      [Op.not]: null\r\n    },\r\n    [Op.and]: [{\r\n        [Op.or]: [{\r\n          cancelledAt: {\r\n            [Op.lt]: moment().subtract(3, 'minutes')\r\n          }\r\n        }, {\r\n          [Op.and]: [{\r\n            orderId: null\r\n          }, {\r\n            orderDate: {\r\n              [Op.lt]: moment().subtract(2, 'hours')\r\n            }\r\n          }]\r\n        }]\r\n      }, {\r\n        [Op.or]: [{\r\n          something: {\r\n            [Op.not]: 'qwerty'\r\n          }\r\n        }, {\r\n          fooBar: {\r\n            [Op.not]: null\r\n          }\r\n        }]\r\n      }\r\n    }\r\n  }\r\n}\r\n```\r\n"
      },
      {
        "user": "tapz",
        "created_at": "2020-05-28T07:39:19Z",
        "body": "Didn't realize they actually are keys :-) Sequelize should provide something like Op.or2, Op.or3 etc. so that I would not need to add more nesting."
      }
    ]
  },
  {
    "number": 12288,
    "title": "`id` column is autogenerated despite having a primaryKey defined in an association",
    "created_at": "2020-05-21T12:35:56Z",
    "closed_at": "2020-05-24T09:56:48Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/sequelize/sequelize/issues/12288",
    "body": "## Issue Description\r\n\r\n### What are you doing?\r\n\r\n```js\r\nconst Sequelize = require('sequelize');\r\nconst Model = Sequelize.Model;\r\n\r\nconst sequelize = new Sequelize({\r\n    dialect: 'sqlite',\r\n    logging: message => console.log(message),\r\n});\r\n\r\nconst weakEntity = (sequelize, dataTypes) => {\r\n    const model = sequelize.define('weak', {});\r\n\r\n    model.associate = (models) => {\r\n        model.belongsTo(models.parent, {foreignKey: {primaryKey: true}});\r\n    };\r\n\r\n    return model;\r\n};\r\n\r\nconst parentEntity = (sequelize, dataTypes) => {\r\n    const model = sequelize.define('parent', {});\r\n\r\n    model.associate = (models) => {\r\n        model.hasOne(models.weak);\r\n    };\r\n\r\n    return model;\r\n};\r\n\r\nconst models = {\r\n    weak: weakEntity,\r\n    parent: parentEntity,\r\n};\r\n\r\n(async () => {\r\n    Object.keys(models).forEach(modelName => {\r\n        const modelDef = models[modelName];\r\n        const model = modelDef(sequelize, Sequelize);\r\n        models[modelName] = model;\r\n    });\r\n    Object.keys(models).forEach(modelName => {\r\n        const model = models[modelName];\r\n        if (model.associate) {\r\n            model.associate(models);\r\n        }\r\n    });\r\n\r\n    await sequelize.authenticate();\r\n    await sequelize.sync();\r\n})();\r\n```\r\n\r\n### What do you expect to happen?\r\n\r\n`weak` table to have only 1 column: `parentId`\r\n\r\n### What is actually happening?\r\n\r\n`weak` table has 2 columns: `parentId` and `id`\r\n\r\n### Environment\r\n\r\n- Sequelize version: 5.21.8\r\n- Node.js version: 12.16.2\r\n- Operating System: Windows 10 Home x64\r\n\r\n## Issue Template Checklist\r\n\r\n<!-- Please answer the questions below. If you don't, your issue may be closed. -->\r\n\r\n### How does this problem relate to dialects?\r\n\r\n<!-- Choose one. -->\r\n\r\n- [X] I think this problem happens regardless of the dialect.\r\n- [ ] I think this problem happens only for the following dialect(s): <!-- Put dialect(s) here -->\r\n- [ ] I don't know, I was using PUT-YOUR-DIALECT-HERE, with connector library version XXX and database version XXX\r\n\r\n### Would you be willing to resolve this issue by submitting a Pull Request?\r\n\r\n<!-- Remember that first contributors are welcome! -->\r\n\r\n- [X] Yes, I have the time and I know how to start.\r\n- [ ] Yes, I have the time but I don't know how to start, I would need guidance.\r\n- [ ] No, I don't have the time, although I believe I could do it if I had the time...\r\n- [ ] No, I don't have the time and I wouldn't even know how to start.\r\n",
    "comments_url": "https://api.github.com/repos/sequelize/sequelize/issues/12288/comments",
    "author": "soryy708",
    "comments": [
      {
        "user": "sushantdhiman",
        "created_at": "2020-05-24T09:56:48Z",
        "body": "Yes, because `model` was created before relationship was invoked. Thus it created a default `id` primary key.\r\n\r\nYou can either predefine your `primaryKey` attribute in model, so `id` is not created. Or call `removeAttribute('id')`"
      }
    ]
  },
  {
    "number": 12079,
    "title": "How to run non-blocking queries with millions of records?",
    "created_at": "2020-04-06T09:19:30Z",
    "closed_at": "2020-04-18T07:02:28Z",
    "labels": [
      "question",
      "type: performance"
    ],
    "url": "https://github.com/sequelize/sequelize/issues/12079",
    "body": "<!--\r\nIf you don't follow the issue template, your issue may be closed.\r\nPlease note this is an issue tracker, not a support forum.\r\nFor general questions, please use StackOverflow or Slack.\r\n-->\r\n\r\n## Issue Description\r\n\r\nDear Sequelize experts,\r\n\r\nThe title already says it all.\r\n\r\nWe sometimes come across huge results in our queries that can take minutes to process.\r\nI believe it's the parsing of the result that is blocking the whole process.\r\nIf other users run queries during that time, they have to wait until the other query is completed.\r\n\r\nIs there any kind of best practice how to run those big queries?\r\nFor instance, is it possible to run Sequelize queries in a worker thread or do the parsing of the result in a worker thread?\r\nOr is there any other kind of way to fix this blocking process that is pretty obvious but I just haven't thought about yet?\r\n\r\nUsed versions are Node v12.16.1 and Sequelize v5.\r\n\r\nAny idea is highly appreciated!\r\nThanks a lot in advance!\r\n\r\nTake care & stay healthy,\r\nPatrick\r\n\r\n### Is this issue dialect-specific?\r\n\r\n- [x] No. This issue is relevant to Sequelize as a whole.\r\n- [ ] Yes. This issue only applies to the following dialect(s): XXX, YYY, ZZZ\r\n- [ ] I don't know.\r\n\r\n### Would you be willing to resolve this issue by submitting a Pull Request?\r\n\r\n<!-- Remember that first contributors are welcome! -->\r\n\r\n- [ ] Yes, I have the time and I know how to start.\r\n- [ ] Yes, I have the time but I don't know how to start, I would need guidance.\r\n- [ ] No, I don't have the time, although I believe I could do it if I had the time...\r\n- [x] No, I don't have the time and I wouldn't even know how to start.\r\n",
    "comments_url": "https://api.github.com/repos/sequelize/sequelize/issues/12079/comments",
    "author": "patrickgod",
    "comments": [
      {
        "user": "sushantdhiman",
        "created_at": "2020-04-18T07:02:28Z",
        "body": "Please ask questions on Stackoverflow, here you only report bugs or request features.\r\n\r\nIf you find there is any code section which prevents you from working with large number of records, I will be open to improve that."
      },
      {
        "user": "papb",
        "created_at": "2020-04-19T19:32:59Z",
        "body": "Hi @patrickgod, this is a good question to which I don't know the answer; I agree with Sushant that this would be better asked in Stack Overflow. Please do, and add a link to it here, thank you!\r\n\r\n> Take care & stay healthy,\r\n\r\nYou too, thanks!"
      }
    ]
  },
  {
    "number": 12075,
    "title": "Setting a failover portal",
    "created_at": "2020-04-05T19:59:23Z",
    "closed_at": "2020-04-18T07:05:34Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/sequelize/sequelize/issues/12075",
    "body": "## Issue Description\r\n\r\nOne deployment in which my database is hosted is going under maintenance and I want to set a failover URL. I can't find a way to do it.\r\n \r\n### Describe the solution you'd like\r\nI would like to have the ability to set a failover URL in case the connection is stopped and can't be restarted.\r\n\r\n\r\n```js\r\nconst db = new Sequelize(DATABASE_URL, {\r\n  logging: false,\r\n  pool: {\r\n    max: 15,\r\n    min: 1,\r\n    idle: 10000,\r\n    acquire: 10000,\r\n  },\r\n});\r\n\r\n// URL should be set to either:\r\npostgres://[username]:[password]@gcp-us-east1-cpu.2.dblayer.com:16070/compose\r\npostgres://[username]:[password]@gcp-us-east1-cpu.0.dblayer.com:16070/compose\r\n\r\n```\r\n\r\n### Why should this be in Sequelize\r\n\r\n\r\n### Describe alternatives/workarounds you've considered\r\nAny alternatives?\r\n\r\n\r\n## Issue Template Checklist\r\n\r\n<!-- Please answer the questions below. If you don't, your issue may be closed. -->\r\n\r\n### Is this issue dialect-specific?\r\n\r\n- [x ] No. This issue is relevant to Sequelize as a whole.\r\n- [ ] Yes. This issue only applies to the following dialect(s): XXX, YYY, ZZZ\r\n\r\n### Would you be willing to resolve this issue by submitting a Pull Request?\r\n\r\n<!-- Remember that first contributors are welcome! -->\r\n\r\n- [ ] Yes, I have the time and I know how to start.\r\n- [ ] Yes, I have the time but I don't know how to start, I would need guidance.\r\n- [ ] No, I don't have the time, although I believe I could do it if I had the time...\r\n- [ x] No, I don't have the time and I wouldn't even know how to start.\r\n",
    "comments_url": "https://api.github.com/repos/sequelize/sequelize/issues/12075/comments",
    "author": "perrosnk",
    "comments": [
      {
        "user": "sushantdhiman",
        "created_at": "2020-04-18T07:05:34Z",
        "body": "I think this should be handled by your database provider, which could proxy multiple servers behind same postgres address.\r\n\r\nAlternatively you can modify connection config with `beforeConnect` hook. Whenever you detect failover in `beforeConnect` use alternative config"
      }
    ]
  },
  {
    "number": 12029,
    "title": "Eager loading not loading all associated record for tables without primary key",
    "created_at": "2020-03-25T02:41:07Z",
    "closed_at": "2020-04-04T09:30:13Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/sequelize/sequelize/issues/12029",
    "body": "## Issue Description\r\n\r\nIf you create two tables TableA and TableB where TableA hasMany TableB records but TableB does not contain a primary key (on purpose) you are unable to return more than a single TableB record when performing an eager query of TableA even though the logging shows a SELECT/JOIN that returns many records.\r\n\r\n### What are you doing?\r\n\r\nHere is an example model setup:\r\n```js\r\nclass Person extends Sequelize.Model {}\r\nPerson.init({\r\n    PersonID: {\r\n        type: Sequelize.INTEGER,\r\n        autoIncrement: true,\r\n        primaryKey: true\r\n    },\r\n    Name: {\r\n        type: Sequelize.STRING(255),\r\n        allowNull: false\r\n    }\r\n},{\r\n    sequelize\r\n})\r\n\r\nclass Task extends Sequelize.Model {}\r\nTask.init({\r\n    TaskID: {\r\n        type: Sequelize.INTEGER,\r\n        allowNull: false\r\n    },\r\n    Description: {\r\n        type: Sequelize.STRING(255),\r\n        allowNull: false\r\n    },\r\n    PersonID: {\r\n        type: Sequelize.INTEGER,\r\n        allowNull: false\r\n    }\r\n}, { \r\n    sequelize,\r\n})\r\nTask.removeAttribute('id')  // Purposefully remove the primary key\r\n```\r\n\r\nThe following is the association setup:\r\n```js\r\nPerson.hasMany(Task, {\r\n    foreignKey: \"PersonID\",\r\n    sourceKey: \"PersonID\"\r\n})\r\n\r\nTask.belongsTo(Person, {\r\n    foreignKey: \"PersonID\",\r\n    targetKey: \"PersonID\"\r\n})\r\n```\r\n\r\nThe Person table contains 1 record and the Task table contains three records with the PersonID set to the ID of the only Person in the Person table. \r\n\r\nIf the following eager query is perform only one result is returned for the task even though there are three possible entries:\r\n```js\r\nPerson.findOne({\r\n    where: {\r\n        Name: \"Jim Brown\"\r\n    },\r\n    include: [Task]\r\n}).then(person => {\r\n    console.log(JSON.stringify(person, null, 4))\r\n}) \r\n```\r\n\r\nResult: \r\n```js\r\n{\r\n    \"PersonID\": 1,\r\n    \"Name\": \"Jim Brown\",\r\n    \"createdAt\": \"2020-03-25T02:29:00.971Z\",\r\n    \"updatedAt\": \"2020-03-25T02:29:00.971Z\",\r\n    \"Tasks\": [  // << SHOULD BE MORE\r\n        {\r\n            \"TaskID\": 1,\r\n            \"Description\": \"Task 1\",\r\n            \"PersonID\": 1,\r\n            \"createdAt\": \"2020-03-25T02:29:00.985Z\",\r\n            \"updatedAt\": \"2020-03-25T02:29:00.985Z\"\r\n        }\r\n```\r\n\r\nIf I add `raw: true` to query and change the query to `findAll`, I get three records back as if there were three Person records (which is expected):\r\n```js\r\nPerson.findAll({\r\n    where: {\r\n        Name: \"Jim Brown\"\r\n    },\r\n    include: [Task],\r\n    raw: true\r\n}).then(person => {\r\n    console.log(JSON.stringify(person, null, 4))\r\n}) \r\n```\r\n\r\nResult: \r\n```js\r\n[\r\n    {\r\n        \"PersonID\": 1,\r\n        \"Name\": \"Jim Brown\",\r\n        \"createdAt\": \"2020-03-25 02:32:59.378 +00:00\",\r\n        \"updatedAt\": \"2020-03-25 02:32:59.378 +00:00\",\r\n        \"Tasks.TaskID\": 1,\r\n        \"Tasks.Description\": \"Task 1\",\r\n        \"Tasks.PersonID\": 1,\r\n        \"Tasks.createdAt\": \"2020-03-25 02:32:59.385 +00:00\",\r\n        \"Tasks.updatedAt\": \"2020-03-25 02:32:59.385 +00:00\"\r\n    },\r\n    {\r\n        \"PersonID\": 1,\r\n        \"Name\": \"Jim Brown\",\r\n        \"createdAt\": \"2020-03-25 02:32:59.378 +00:00\",\r\n        \"updatedAt\": \"2020-03-25 02:32:59.378 +00:00\",\r\n        \"Tasks.TaskID\": 2,\r\n        \"Tasks.Description\": \"Task 2\",\r\n        \"Tasks.PersonID\": 1,\r\n        \"Tasks.createdAt\": \"2020-03-25 02:32:59.385 +00:00\",\r\n        \"Tasks.updatedAt\": \"2020-03-25 02:32:59.385 +00:00\"\r\n    },\r\n    {\r\n        \"PersonID\": 1,\r\n        \"Name\": \"Jim Brown\",\r\n        \"createdAt\": \"2020-03-25 02:32:59.378 +00:00\",\r\n        \"updatedAt\": \"2020-03-25 02:32:59.378 +00:00\",\r\n        \"Tasks.TaskID\": 3,\r\n        \"Tasks.Description\": \"Task 3\",\r\n        \"Tasks.PersonID\": 1,\r\n        \"Tasks.createdAt\": \"2020-03-25 02:32:59.385 +00:00\",\r\n        \"Tasks.updatedAt\": \"2020-03-25 02:32:59.385 +00:00\"\r\n    }\r\n]\r\n```\r\n\r\nUsing `findAll` doesn't make a difference in the result set if raw is set to false or omitted. \r\n\r\n### What do you expect to happen?\r\n\r\nWhen using an eager query I am assuming the Task array should contain all three results regardless if the foreign key table has a primary key. \r\n\r\n### What is actually happening?\r\n\r\nMany association is not being fully populated.\r\n\r\n### Additional context\r\n\r\nI have tried this with SQLite and MS SQL and get the same results on both. \r\n\r\n### Environment\r\n\r\n- Sequelize version: 5.21.5\r\n- Node.js version: 13..10.1\r\n- Operating System: Mac OS X & RedHat Linux 7.7\r\n\r\n## Issue Template Checklist\r\n\r\n<!-- Please answer the questions below. If you don't, your issue may be closed. -->\r\n\r\n### How does this problem relate to dialects?\r\n\r\n<!-- Choose one. -->\r\n\r\n- [X] I think this problem happens regardless of the dialect.\r\n- [ ] I think this problem happens only for the following dialect(s): <!-- Put dialect(s) here -->\r\n- [ ] I don't know, I was using PUT-YOUR-DIALECT-HERE, with connector library version XXX and database version XXX\r\n\r\n### Would you be willing to resolve this issue by submitting a Pull Request?\r\n\r\n<!-- Remember that first contributors are welcome! -->\r\n\r\n- [ ] Yes, I have the time and I know how to start.\r\n- [X] Yes, I have the time but I don't know how to start, I would need guidance.\r\n- [ ] No, I don't have the time, although I believe I could do it if I had the time...\r\n- [ ] No, I don't have the time and I wouldn't even know how to start.\r\n",
    "comments_url": "https://api.github.com/repos/sequelize/sequelize/issues/12029/comments",
    "author": "rydevops",
    "comments": [
      {
        "user": "sushantdhiman",
        "created_at": "2020-04-04T09:30:13Z",
        "body": "Sequelize has poor support for tables without primary key. We may fix this issue if you submit a PR but you will generally get better results if you add a primary key."
      }
    ]
  },
  {
    "number": 11823,
    "title": "Don't select all fields by default",
    "created_at": "2020-01-13T21:41:42Z",
    "closed_at": "2020-01-14T23:15:09Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/sequelize/sequelize/issues/11823",
    "body": "## Issue Description\r\n\r\n### Is your feature request related to a problem? Please describe.\r\nCurrently, for example, when include a model and if don't set \"attributes\" property, the query retrieve all model fields.\r\n\r\n### Describe the solution you'd like\r\nAdd a configuration (or set by default), to disable select all attributes by default.\r\n\r\n### Why should this be in Sequelize\r\nFor now, isn't a viable security strategy.\r\n\r\n### Describe alternatives/workarounds you've considered\r\n= N.A. =\r\n\r\n### Additional context\r\n= N.A. =\r\n\r\n## Issue Template Checklist\r\n\r\n### Is this issue dialect-specific?\r\n\r\n- [X] No. This issue is relevant to Sequelize as a whole.\r\n- [ ] Yes. This issue only applies to the following dialect(s): XXX, YYY, ZZZ\r\n\r\n### Would you be willing to resolve this issue by submitting a Pull Request?\r\n\r\n- [ ] Yes, I have the time and I know how to start.\r\n- [ ] Yes, I have the time but I don't know how to start, I would need guidance.\r\n- [ ] No, I don't have the time, although I believe I could do it if I had the time...\r\n- [X] No, I don't have the time and I wouldn't even know how to start.",
    "comments_url": "https://api.github.com/repos/sequelize/sequelize/issues/11823/comments",
    "author": "Nomanoclass",
    "comments": [
      {
        "user": "papb",
        "created_at": "2020-01-14T23:15:09Z",
        "body": "This is already possible:\r\n\r\n```js\r\n(async () => {\r\n    const sequelize = new Sequelize('sqlite::memory:', {\r\n        define: {\r\n            defaultScope: {\r\n                // Assuming all your models have an `id`\r\n                attributes: ['id']\r\n            }\r\n        }\r\n    });\r\n    const Foo = sequelize.define('foo', { bar: DataTypes.INTEGER });\r\n    await sequelize.sync();\r\n    await Foo.findAll(); // Will fetch only `id`\r\n})();\r\n```"
      }
    ]
  },
  {
    "number": 11679,
    "title": "Perform db password change on production",
    "created_at": "2019-11-14T10:09:52Z",
    "closed_at": "2019-11-21T14:44:57Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/sequelize/sequelize/issues/11679",
    "body": "\r\n## Issue Description\r\n\r\nHi guys, I'm having a problem with sequelize, well not exactly a problem but an issue.\r\n\r\nI would like to change my DB password in production.\r\nWhile my app is running, are there any options or would I need to make bash script that updated in the database and changes in migration.config.json or is there some other solution??\r\nAlso how would I prevent it from being overridden next time I deploy new version of app\r\n\r\n### Additional context\r\nAdd any other context or screenshots about the issue here.\r\n\r\n## Issue Template Checklist\r\nHere is my sample migration.config\r\n```\r\n{\r\n  \"development\": {\r\n    \"username\": \"postgres\",\r\n    \"password\": \"postgres\",\r\n    \"database\": \"db\",\r\n    \"host\": \"localhost\",\r\n    \"dialect\": \"postgres\",\r\n    \"logging\": false,\r\n    \"seederStorage\": \"sequelize\",\r\n    \"operatorsAliases\": false\r\n  },\r\n  \"test\": {\r\n    \"username\": \"test\",\r\n    \"password\": \"stest\",\r\n    \"database\": \"test_db\",\r\n    \"host\": \"127.0.0.1\",\r\n    \"dialect\": \"postgres\",\r\n    \"logging\": false,\r\n    \"seederStorage\": \"sequelize\",\r\n    \"operatorsAliases\": false\r\n  },\r\n  \"production\": {\r\n    \"username\": \"prod\",\r\n    \"password\": \"prod\",\r\n    \"database\": \"db_prod\",\r\n    \"host\": \"127.0.0.1\",\r\n    \"dialect\": \"postgres\",\r\n    \"seederStorage\": \"sequelize\",\r\n    \"operatorsAliases\": false\r\n  }\r\n}\r\n```\r\n\r\n\r\n### Is this issue dialect-specific?\r\n4.42.0\r\n\r\n",
    "comments_url": "https://api.github.com/repos/sequelize/sequelize/issues/11679/comments",
    "author": "HunterJS-bit",
    "comments": [
      {
        "user": "papb",
        "created_at": "2019-11-15T17:42:26Z",
        "body": "You shouldn't have the database connection password in plaintext in your config file, you should actually read the password from an environment variable for example `process.env.DB_PASSWORD`"
      },
      {
        "user": "HunterJS-bit",
        "created_at": "2019-11-18T08:18:27Z",
        "body": "@papb Ok I will move it to env variables, so you suggest I should just alter password with psql and then change env variable that would be enough ?"
      },
      {
        "user": "HunterJS-bit",
        "created_at": "2019-11-21T14:44:57Z",
        "body": "anyway managed to solve the problem, switched variables from migarations.config to env variables, and will just change env variable and restart server"
      }
    ]
  },
  {
    "number": 11630,
    "title": "How to make custom query method?",
    "created_at": "2019-11-01T07:46:25Z",
    "closed_at": "2019-11-01T12:10:33Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/sequelize/sequelize/issues/11630",
    "body": "## I need to create a method inside Sequelize model class to filter my collection.\r\n\r\n### Is your feature request related to a problem? Please describe.\r\nI want to create predefined requests inside models like I do them in Mongoose (example below), but I can't find this ability in manuals\r\n\r\n### Describe the solution you'd like\r\nIn Mongoose i can do something like this:\r\n\r\n```js\r\nUserSchema.query.byAgeAndGender = function(age, gender) {\r\n    return this.find({\r\n        age,\r\n        gender,\r\n    });\r\n};\r\n\r\n// and then use it\r\n\r\nUserModel.find().byAgeAndGender({\r\n    age: 20,\r\n    gender: 'm',\r\n});\r\n```\r\n\r\n### Why should this be in Sequelize\r\nThis will prevent copy-pasting of code for queries\r\n\r\n### Describe alternatives/workarounds you've considered\r\nA clear and concise description of any alternative solutions or features you've considered. If any workaround exists to the best of your knowledge, include it here.\r\n\r\n### Is this issue dialect-specific?\r\n\r\n- [x] No. This issue is relevant to Sequelize as a whole.\r\n- [ ] Yes. This issue only applies to the following dialect(s): XXX, YYY, ZZZ\r\n\r\n### Would you be willing to resolve this issue by submitting a Pull Request?\r\n\r\n<!-- Remember that first contributors are welcome! -->\r\n\r\n- [ ] Yes, I have the time and I know how to start.\r\n- [ ] Yes, I have the time but I don't know how to start, I would need guidance.\r\n- [ ] No, I don't have the time, although I believe I could do it if I had the time...\r\n- [x] No, I don't have the time and I wouldn't even know how to start.\r\n",
    "comments_url": "https://api.github.com/repos/sequelize/sequelize/issues/11630/comments",
    "author": "dimaninc",
    "comments": [
      {
        "user": "papb",
        "created_at": "2019-11-01T12:10:33Z",
        "body": "You can simply do the following:\r\n\r\n```js\r\n// Definition\r\nUserModel.findAllByAgeAndGender = function(age, gender) {\r\n  return UserModel.findAll({\r\n    where: {\r\n      age,\r\n      gender\r\n    }\r\n  });\r\n};\r\n\r\n// Usage\r\nUserModel.findAllByAgeAndGender(20, 'm').then(users => {\r\n  console.log(users.length);\r\n});\r\n```\r\n\r\nFor more flexibility, allowing extra options, such passing a transaction and other things, you can do:\r\n\r\n```js\r\n// Definition\r\nUserModel.findAllByAgeAndGender = function(age, gender, options) {\r\n  const options = Object.assign({}, options);\r\n  options.where = { age, gender };\r\n  return UserModel.findAll(options);\r\n};\r\n\r\n// Usage\r\nUserModel.findAllByAgeAndGender(20, 'm', { transaction: t }).then(users => {\r\n  console.log(users.length);\r\n});\r\n```"
      }
    ]
  },
  {
    "number": 11296,
    "title": "Force bind",
    "created_at": "2019-08-08T08:24:54Z",
    "closed_at": "2021-12-15T00:07:55Z",
    "labels": [
      "question",
      "stale"
    ],
    "url": "https://github.com/sequelize/sequelize/issues/11296",
    "body": "How can I force sequelize to always **Bind Parameter** not **Replacements**\r\n\r\nSometimes findAll , findByPk replaces parameters",
    "comments_url": "https://api.github.com/repos/sequelize/sequelize/issues/11296/comments",
    "author": "sm2017",
    "comments": [
      {
        "user": "papb",
        "created_at": "2019-08-24T22:48:54Z",
        "body": "Oops! For some reason I missed your issue among the others. I usually look at issues much faster than these 17 days... Sorry!\r\n\r\nNow, as for the issue, we really need more info. You were too succinct. Please elaborate on what you mean, showing examples of situations in which you didn't get what you wanted, and so on."
      },
      {
        "user": "sm2017",
        "created_at": "2019-08-25T15:31:48Z",
        "body": "Currently I cannot provide you code to reproduce issue ( if you need let me know)\r\n\r\nIn sequelize we have 2 way to set parameters , binding and replacement\r\n\r\nI see that , when I use sequelize models to generate query, sometimes it generate queries with replacement method , like\r\n\r\n```sql\r\nSELECT name from user WHERE id=123\r\n```\r\n\r\nI want force sequelize always bind parameters, like\r\n\r\n```sql\r\nSELECT name from user WHERE id=:id\r\n```\r\n\r\nOr\r\n\r\n```sql\r\nSELECT name from user WHERE id=$1\r\n```"
      },
      {
        "user": "papb",
        "created_at": "2019-08-25T15:38:43Z",
        "body": "Thanks. I would like to see an example that generates each case please!"
      },
      {
        "user": "sm2017",
        "created_at": "2019-08-27T04:52:49Z",
        "body": "@papb , for simplicity I reproduce it using sqlite dialectic (I am using postgres)\r\n\r\n\r\n```js\r\nconst Sequelize = require('sequelize');\r\nconst Model = Sequelize.Model;\r\n\r\n\r\n(async function(){\r\n\t\r\n\tconst sequelize = new Sequelize('database', 'username', 'password', {\r\n\t  // sqlite! now!\r\n\t  dialect: 'sqlite',\r\n\r\n\t  // the storage engine for sqlite\r\n\t  // - default ':memory:'\r\n\t  storage: './database.sqlite'\r\n\t})\r\n\r\n\r\n\r\n\tclass Project extends Model {}\r\n\tProject.init({\r\n\t  id: {\r\n\t  type: Sequelize.INTEGER,\r\n\t  primaryKey: true,\r\n\t  autoIncrement: true,\r\n        },\r\n\t  title: Sequelize.STRING,\r\n\t  description: Sequelize.TEXT\r\n\t}, { sequelize, modelName: 'project' });\r\n\r\n\tawait Project.sync();\r\n\r\n\t//INSERT INTO `projects` (`id`,`title`,`description`,`createdAt`,`updatedAt`) VALUES (NULL,$1,$2,$3,$4);\r\n\tawait Project.create({\r\n\t\ttitle: 'foo',\r\n\t\tdescription: 'bar',\r\n\t})\r\n\r\n\t//SELECT `id`, `title`, `description`, `createdAt`, `updatedAt` FROM `projects` AS `project` WHERE `project`.`id` = 1;\r\n\tconst project = await Project.findByPk(1);\r\n\tproject.title='foobar';\r\n\t\r\n\t// UPDATE `projects` SET `title`=$1,`updatedAt`=$2 WHERE `id` = $3\r\n\tawait project.save();\r\n\t\r\n\t// DELETE FROM `projects` WHERE `id` = 1\r\n\tawait project.destroy();\r\n})()\r\n```\r\n\r\n\r\nIn the above mentioned code ,  **findByPk** and **destroy** generate replacement parameter"
      },
      {
        "user": "papb",
        "created_at": "2019-08-27T12:49:45Z",
        "body": "> @papb , for simplicity I reproduce it using sqlite dialectic (I am using postgres)\r\n\r\nThank you so much. I wish everyone did this... Thanks!!\r\n\r\n> In the above mentioned code , **findByPk** and **destroy** generate replacement parameter\r\n\r\nI see! Thank you. I will look into it later.\r\n\r\n"
      },
      {
        "user": "sm2017",
        "created_at": "2019-09-26T17:52:02Z",
        "body": "@papb I want to know when you can fix it?"
      },
      {
        "user": "papb",
        "created_at": "2019-10-02T18:03:56Z",
        "body": "Hello, I am very busy these days, unfortunately... Sorry :( I can't give an estimate. Certainly not this month though :("
      },
      {
        "user": "github-actions[bot]",
        "created_at": "2021-11-08T00:10:08Z",
        "body": "This issue has been automatically marked as stale because it has been open for 7 days without activity. It will be closed if no further activity occurs. If this is still an issue, just leave a comment or remove the \"stale\" label. 🙂"
      },
      {
        "user": "github-actions[bot]",
        "created_at": "2021-11-30T00:10:04Z",
        "body": "This issue has been automatically marked as stale because it has been open for 14 days without activity. It will be closed if no further activity occurs within the next 14 days. If this is still an issue, just leave a comment or remove the \"stale\" label. 🙂"
      }
    ]
  },
  {
    "number": 11217,
    "title": "model include add order",
    "created_at": "2019-07-24T03:04:39Z",
    "closed_at": "2019-07-25T16:29:17Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/sequelize/sequelize/issues/11217",
    "body": "",
    "comments_url": "https://api.github.com/repos/sequelize/sequelize/issues/11217/comments",
    "author": "leowutao",
    "comments": [
      {
        "user": "papb",
        "created_at": "2019-07-24T15:46:40Z",
        "body": "Please add some explanation."
      },
      {
        "user": "leowutao",
        "created_at": "2019-07-25T05:41:44Z",
        "body": "Include defined by model does not support sorting.\r\n\r\nI want to add the order parameter to the model in include.\r\n\r\nExample Code:\r\n\r\n```js\r\nUser.associate = function(){\r\n   app.model.User.hasMany(app.model.UserLog, {\r\n       foreignKey:'userId',sourceKey:'id', as: 'userLogs'\r\n   });\r\n}\r\n```\r\n\r\n```js\r\nthis.ctx.model.User.findByPk(id,{\r\n   include: {\r\n       model: this.ctx.model.UserLog.\r\n       as: 'userLogs',\r\n       order: [['updatedAt','Desc']]\r\n   }\r\n});\r\n```\r\n\r\nI need to sort 'UserLog' by 'updatedAt' settings.\r\n\r\n"
      },
      {
        "user": "papb",
        "created_at": "2019-07-25T16:29:17Z",
        "body": "Actually, I realize now that this is a duplicate of #11222"
      }
    ]
  },
  {
    "number": 11164,
    "title": "any way to define custom error message for composite unique?",
    "created_at": "2019-07-08T10:59:26Z",
    "closed_at": "2019-08-22T00:23:02Z",
    "labels": [
      "question",
      "type: docs"
    ],
    "url": "https://github.com/sequelize/sequelize/issues/11164",
    "body": "**Is your feature request related to a problem? Please describe.**\r\n\r\n```javascript\r\nclass FolderFilesModel extends Sequelize.Model{}\r\nFolderFilesModel.init(\r\n  {\r\n    folderName: {\r\n      type: Sequelize.STRING,\r\n      allowNull: false\r\n    },\r\n    fileName: {\r\n      type: Sequelize.INTEGER.UNSINGED,\r\n      allowNull: false\r\n    },\r\n    testUniqueKey: {\r\n      type: Sequelize.STRING,\r\n      allowNull: false,\r\n      unique: {\r\n        name: 'u_uk',\r\n        msg: 'custom error message works fine here, but i want the composite one'\r\n      }\r\n    },\r\n    // ...other fields\r\n  },\r\n  {\r\n    sequelize: instance,\r\n    modelName: \"folder_file\",\r\n    indexes: [\r\n      {\r\n        name: 'u_folder_file',\r\n        unique: true,\r\n        fields: ['folderName', 'fileName'],\r\n        msg: 'can i define custom error message here or somewhere'\r\n      }\r\n    ]\r\n  }\r\n);\r\n```\r\n\r\nany way to define custom error message for composite unique?\r\n",
    "comments_url": "https://api.github.com/repos/sequelize/sequelize/issues/11164/comments",
    "author": "guoerwei",
    "comments": [
      {
        "user": "papb",
        "created_at": "2019-08-22T00:23:01Z",
        "body": "Duplicate of #7395"
      }
    ]
  },
  {
    "number": 11148,
    "title": "Obtaining data from associated tables as an array",
    "created_at": "2019-07-04T05:03:52Z",
    "closed_at": "2019-07-24T20:21:45Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/sequelize/sequelize/issues/11148",
    "body": "## Obtaining data from associated tables without duplication of main table data\r\n\r\nI am trying to query data from two associated tables for which i have set associations as follows.\r\n> AUTHORS.hasMany(BOOKS);\r\n> BOOKS.belongsTo(AUTHORS);\r\n\r\nMy query is as follows.\r\n\r\n```\r\n await AUTHORS.findAll({\r\n  include: [\r\n    {model:BOOKS}\r\n  ]\r\n})\r\n```\r\n\r\nCurrently i am getting values as follows.\r\n\r\n```\r\n[\r\n    {\r\n      id: 1,\r\n      name: 'tom',\r\n      books: {\r\n        id: 1,\r\n        name: 'book1',\r\n      },\r\n    },\r\n    {\r\n      id: 1,\r\n      name: 'tom',\r\n      books: {\r\n        id: 2,\r\n        name: 'book2',\r\n      },\r\n    },\r\n  ];\r\n```\r\n\r\nI am unable to find a way to get the above output in the following way.\r\n```\r\n\r\n[\r\n  {\r\n    id: 1,\r\n    name: 'tom',\r\n    books: [\r\n      {\r\n        id: 1,\r\n        name: 'book1',\r\n      },\r\n      {\r\n        id: 2,\r\n        name: 'book2',\r\n      },\r\n    ],\r\n  },\r\n];\r\n```\r\n\r\nI have searched through the docs and even on stack overflow but I am unable to find a way to do this.\r\n\r\n> I am aware that this can be done using loops and reshaping the data but I am curious to know if this is possible to do only using sequelize. If it is possible i think it would be good to include it to documentation",
    "comments_url": "https://api.github.com/repos/sequelize/sequelize/issues/11148/comments",
    "author": "Muljayan",
    "comments": [
      {
        "user": "papb",
        "created_at": "2019-07-24T20:21:45Z",
        "body": "How did you do this? The behavior you are looking for is actually the default behavior.\r\n\r\nMinimal test:\r\n\r\n```js\r\nconst Author = sequelize.define('author', { name: Sequelize.TEXT });\r\nconst Book = sequelize.define('book', { name: Sequelize.TEXT });\r\nAuthor.hasMany(Book);\r\nBook.belongsTo(Author);\r\n\r\nawait Author.create({ name: \"Author 1\" });\r\nawait Author.create({ name: \"Author 2\" });\r\nawait Book.create({ name: \"Book 1\", authorId: 1 });\r\nawait Book.create({ name: \"Book 2\", authorId: 1 });\r\nlog(await Author.findAll({ include: Book }));\r\n```\r\n\r\nOutput:\r\n\r\n```\r\n[\r\n    {\r\n        \"id\": 1,\r\n        \"name\": \"Author 1\",\r\n        \"createdAt\": \"2019-07-24T20:19:56.794Z\",\r\n        \"updatedAt\": \"2019-07-24T20:19:56.794Z\",\r\n        \"books\": [\r\n            {\r\n                \"id\": 1,\r\n                \"name\": \"Book 1\",\r\n                \"createdAt\": \"2019-07-24T20:19:56.805Z\",\r\n                \"updatedAt\": \"2019-07-24T20:19:56.805Z\",\r\n                \"authorId\": 1\r\n            },\r\n            {\r\n                \"id\": 2,\r\n                \"name\": \"Book 2\",\r\n                \"createdAt\": \"2019-07-24T20:19:56.808Z\",\r\n                \"updatedAt\": \"2019-07-24T20:19:56.808Z\",\r\n                \"authorId\": 1\r\n            }\r\n        ]\r\n    }\r\n]\r\n```\r\n\r\nSurely you did something wrong. Let me know if you need further assistance."
      },
      {
        "user": "papb",
        "created_at": "2019-07-24T20:39:15Z",
        "body": "This seems very similar to #11127, perhaps you forgot to mention that you were using `raw: true`?"
      }
    ]
  },
  {
    "number": 11119,
    "title": "Fetch elements filtering by association but include all associations for matched elements",
    "created_at": "2019-06-27T11:38:22Z",
    "closed_at": "2019-08-01T01:22:43Z",
    "labels": [
      "question",
      "type: docs"
    ],
    "url": "https://github.com/sequelize/sequelize/issues/11119",
    "body": "models associations:\r\n```js\r\nPicture.belongsToMany(Tag, { through: 'fee_picture_tag' });\r\nTag.belongsToMany(Picture, { through: 'fee_picture_tag' });\r\n```\r\nquery:\r\n\r\n```js\r\nconst pictures = Picture.findAll({\r\n  distinct: true,\r\n  include: [\r\n    {\r\n      model: Tag,\r\n      attributes: ['id', 'name'],\r\n    },\r\n  ],\r\n});\r\n```\r\n\r\nresult:\r\n\r\n```json\r\n[\r\n    {\r\n        \"id\": 1,\r\n        \"tags\": [\r\n            {\r\n                \"id\": 1,\r\n                \"name\": \"烹饪\",\r\n            },\r\n            {\r\n                \"id\": 6,\r\n                \"name\": \"书籍\",\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"id\": 2,\r\n        \"tags\": [\r\n            {\r\n                \"id\": 3,\r\n                \"name\": \"烘焙\",\r\n            },\r\n            {\r\n                \"id\": 6,\r\n                \"name\": \"书籍\",\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"id\": 3,\r\n        \"tags\": [\r\n            {\r\n                \"id\": 2,\r\n                \"name\": \"花艺\",\r\n            },\r\n            {\r\n                \"id\": 6,\r\n                \"name\": \"书籍\",\r\n            }\r\n        ]\r\n    }\r\n]\r\n```\r\nI need to filter out the pictures with the tag by id = 3, the query is \r\n\r\n```js\r\nconst pictures = Picture.findAll({\r\n  include: [\r\n    {\r\n      model: Tag,\r\n      attributes: ['id', 'name'],\r\n      through: {\r\n        where: {\r\n          tagId: 3,\r\n        },\r\n      },\r\n    },\r\n  ],\r\n});\r\n```\r\n## actual\r\n```json\r\n[\r\n    {\r\n        \"id\": 1,\r\n        \"tags\": []\r\n    },\r\n    {\r\n        \"id\": 2,\r\n        \"tags\": [\r\n            {\r\n                \"id\": 3,\r\n                \"name\": \"烘焙\",\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"id\": 3,\r\n        \"tags\": []\r\n    }\r\n]\r\n```\r\n\r\n## expect\r\n\r\n```json\r\n[\r\n    {\r\n        \"id\": 2,\r\n        \"tags\": [\r\n            {\r\n                \"id\": 3,\r\n                \"name\": \"烘焙\",\r\n            },\r\n            {\r\n                \"id\": 6,\r\n                \"name\": \"书籍\",\r\n            }\r\n        ]\r\n    },\r\n]\r\n```\r\n\r\nHow to implement this query?  thank you!\r\n",
    "comments_url": "https://api.github.com/repos/sequelize/sequelize/issues/11119/comments",
    "author": "noyobo",
    "comments": [
      {
        "user": "lrbmike",
        "created_at": "2019-07-31T08:24:31Z",
        "body": "I have the same problem, how did you solve it?"
      },
      {
        "user": "papb",
        "created_at": "2019-08-01T01:22:43Z",
        "body": "This is currently not doable. The feature request #10943 would solve this, so I will close this one to keep track of all this in one single place."
      },
      {
        "user": "noyobo",
        "created_at": "2019-08-17T16:29:17Z",
        "body": "step1\r\n\r\n```js\r\n//Associative table\r\nconst pids = await Table<'fee_picture_tag'>.findAll({\r\n  attributes: [[Sequelize.fn('DISTINCT', Sequelize.col('picture_id')), 'id']],\r\n  where: { tagId:  3 }\r\n})\r\n```\r\n\r\nstep2\r\n\r\n```js\r\nconst pictures = Picture.findAndCountAll({\r\n  where: { id: { [ Op.in]: pids } },\r\n  distinct: true,\r\n  include: [{ model: Tag, attributes: ['id', 'name'] }],\r\n});\r\n```\r\n\r\nI solved this now. Do you have any other plans? @lrbmike "
      },
      {
        "user": "papb",
        "created_at": "2019-08-18T01:36:43Z",
        "body": "@noyobo I thought you wanted to do this with only one query... It is not hard to do it with two queries."
      },
      {
        "user": "noyobo",
        "created_at": "2019-08-18T04:55:14Z",
        "body": "I have to do this, is there any other way? @papb \r\n\r\nPlan B:\r\n\r\n```js\r\nPicture.findAndCountAll({\r\n  where: {\r\n    id: {\r\n      [Op.in]: Sequelize.literal(\r\n        `( SELECT picture_id as id FROM ${PictureTag.tableName} WHERE tag_id = 3 )`\r\n      )\r\n    }\r\n  },\r\n  distinct: true,\r\n  include: [{ model: Tag, attributes: ['id', 'name'] }],\r\n});\r\n```"
      },
      {
        "user": "papb",
        "created_at": "2019-08-18T23:23:36Z",
        "body": "@noyobo Currently there is no way to do it with only one query. Once #10943 is solved, then it will be possible!"
      },
      {
        "user": "noyobo",
        "created_at": "2019-08-19T14:30:19Z",
        "body": "I see, thank you. @papb "
      }
    ]
  },
  {
    "number": 11023,
    "title": "Transaction LOCK.UPDATE and associations",
    "created_at": "2019-06-02T05:42:39Z",
    "closed_at": "2021-12-15T00:08:00Z",
    "labels": [
      "question",
      "stale",
      "status: awaiting response"
    ],
    "url": "https://github.com/sequelize/sequelize/issues/11023",
    "body": "If you use LOCK.UPDATE on the top query are the associations also locked?\r\n\r\nie:\r\n\r\n```\r\nconst query = {\r\n  where: {\r\n    id: user_id\r\n  },\r\n  include: [\r\n    { model: Account }\r\n  ],\r\n  lock: t.LOCK.UPDATE,\r\n  transaction: t\r\n};\r\n\r\nUser.findOne(query)\r\n```\r\n\r\nIs User and associated Account row locked? If not, how can this be achieved with Sequelize?",
    "comments_url": "https://api.github.com/repos/sequelize/sequelize/issues/11023/comments",
    "author": "aaronovz1",
    "comments": [
      {
        "user": "aaronovz1",
        "created_at": "2019-06-18T03:59:52Z",
        "body": "Anyone got some insight here?"
      },
      {
        "user": "papb",
        "created_at": "2019-07-25T01:55:13Z",
        "body": "Hello! Can you test it and post your findings? Thanks!!"
      },
      {
        "user": "aaronovz1",
        "created_at": "2019-07-25T18:50:23Z",
        "body": "I was hoping to reduce time on my side by asking the developers directly if this is supported. Looks like I will have to manually test this to confirm if no one knows. Is there not a unit test for this?"
      },
      {
        "user": "papb",
        "created_at": "2019-07-25T19:21:11Z",
        "body": "Not that I know of, please test it and let us know, thanks!"
      },
      {
        "user": "github-actions[bot]",
        "created_at": "2021-11-09T00:09:10Z",
        "body": "This issue has been automatically marked as stale because it has been open for 14 days without activity. It will be closed if no further activity occurs within the next 14 days. If this is still an issue, just leave a comment or remove the \"stale\" label. 🙂"
      },
      {
        "user": "github-actions[bot]",
        "created_at": "2021-11-30T00:10:18Z",
        "body": "This issue has been automatically marked as stale because it has been open for 14 days without activity. It will be closed if no further activity occurs within the next 14 days. If this is still an issue, just leave a comment or remove the \"stale\" label. 🙂"
      }
    ]
  },
  {
    "number": 11018,
    "title": "findOne adds \"ORDER BY\" internally breaking MSSQL",
    "created_at": "2019-05-30T09:05:25Z",
    "closed_at": "2020-06-08T09:06:41Z",
    "labels": [
      "question",
      "dialect: mssql"
    ],
    "url": "https://github.com/sequelize/sequelize/issues/11018",
    "body": "## What are you doing?\r\nTrying to get count of the whole table records while executing some other aggregate functions like \"max\", while there is no `group by` specified. \r\n\r\n**To Reproduce**\r\nSteps to reproduce the behavior:\r\n1. Define model:\r\n```js\r\nsequelize.define('item', {\r\n    id: {\r\n         type: DataTypes.STRING,\r\n         allowNull: false,\r\n         primaryKey: true\r\n    },\r\n    column_1: {\r\n        type: DataTypes.DATE,\r\n\tallowNull: true,\r\n    }\r\n});\r\n```\r\n2. Run the following\r\n```js\r\nconst result = await model.Item.findOne({\r\n    attributes: [\r\n        [db.sequelize.fn('max', db.sequelize.col('column_1')), 'max_column_1'],\r\n        [db.sequelize.fn('count', '1'), 'count']\r\n    ],\r\n});\r\n```\r\n\r\n3. See error\r\n```\r\nSequelizeDatabaseError: Column \"item.id\" is invalid in the ORDER BY clause because it is not contained in either an aggregate function or the GROUP BY clause.\r\n    at Query.formatError (/project-path/node_modules/sequelize/lib/dialects/mssql/query.js:309:12)\r\n    at Request.connection.lib.Request [as userCallback] (/project-path/node_modules/sequelize/lib/dialects/mssql/query.js:69:23)\r\n    at Request.callback (/project-path/node_modules/tedious/lib/request.js:37:27)\r\n    at Connection.endOfMessageMarkerReceived (/project-path/node_modules/tedious/lib/connection.js:2149:20)\r\n    at Connection.dispatchEvent (/project-path/node_modules/tedious/lib/connection.js:1172:36)\r\n    at Parser.tokenStreamParser.on (/project-path/node_modules/tedious/lib/connection.js:975:14)\r\n    at Parser.emit (events.js:193:13)\r\n    at Parser.parser.on.token (/project-path/node_modules/tedious/lib/token/token-stream-parser.js:27:14)\r\n    at Parser.emit (events.js:193:13)\r\n    at addChunk (/project-path/node_modules/tedious/node_modules/readable-stream/lib/_stream_readable.js:297:12)\r\n    at readableAddChunk (/project-path/node_modules/tedious/node_modules/readable-stream/lib/_stream_readable.js:279:11)\r\n    at Parser.Readable.push (/project-path/node_modules/tedious/node_modules/readable-stream/lib/_stream_readable.js:240:10)\r\n    at Parser.Transform.push (/project-path/node_modules/tedious/node_modules/readable-stream/lib/_stream_transform.js:139:32)\r\n    at Parser.afterTransform (/project-path/node_modules/tedious/node_modules/readable-stream/lib/_stream_transform.js:88:10)\r\n    at Parser._transform (/project-path/node_modules/tedious/lib/token/stream-parser.js:41:7)\r\n    at Parser.Transform._read (/project-path/node_modules/tedious/node_modules/readable-stream/lib/_stream_transform.js:177:10)\r\n    at Parser.Transform._write (/project-path/node_modules/tedious/node_modules/readable-stream/lib/_stream_transform.js:164:83)\r\n    at doWrite (/project-path/node_modules/tedious/node_modules/readable-stream/lib/_stream_writable.js:405:139)\r\n    at writeOrBuffer (/project-path/node_modules/tedious/node_modules/readable-stream/lib/_stream_writable.js:394:5)\r\n    at Parser.Writable.write (/project-path/node_modules/tedious/node_modules/readable-stream/lib/_stream_writable.js:303:11)\r\n    at Parser.addEndOfMessageMarker (/project-path/node_modules/tedious/lib/token/token-stream-parser.js:45:24)\r\n    at Connection.message (/project-path/node_modules/tedious/lib/connection.js:2138:32)\r\n```\r\n\r\n## What do you expect to happen?\r\n`SELECT max([column_1]) AS [max_column_1],count(1) AS [count] FROM [item] AS [item];`\r\n\r\n## What is actually happening?\r\n`SELECT max([column_1]) AS [max_column_1],count(1) AS [count] FROM [item] AS [item] ORDER BY [item].[id] OFFSET 0 ROWS FETCH NEXT 1 ROWS ONLY;`\r\n\r\n## Environment\r\nDialect:\r\n- mssql\r\nDialect **tedious** version: 6.1.1\r\nDatabase version: Microsoft SQL Azure (RTM) - 12.0.2000.8 \r\nSequelize version: both v4 and v5\r\nNode Version: 11.15.0\r\nOS: Mac OS\r\n\r\nTested with latest release:\r\n- Yes, v5.8.7",
    "comments_url": "https://api.github.com/repos/sequelize/sequelize/issues/11018/comments",
    "author": "myleshk",
    "comments": [
      {
        "user": "sushantdhiman",
        "created_at": "2020-06-08T09:06:41Z",
        "body": "This is how `findOne` works, it limits records by 1. Use `findAll`"
      },
      {
        "user": "myleshk",
        "created_at": "2020-06-10T03:49:34Z",
        "body": "ok `findAll` works."
      }
    ]
  },
  {
    "number": 10984,
    "title": "Sequelize automatically sets a default value for NOT NULL columns",
    "created_at": "2019-05-22T07:58:12Z",
    "closed_at": "2019-07-30T15:42:08Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/sequelize/sequelize/issues/10984",
    "body": "I am currently running Sequelize.js code on my MySQL database, that is created using migrations. I have a table with persons that is defined like this:\r\n\r\n```\r\nreturn queryInterface.createTable('Persons', {\r\n      id: {\r\n        allowNull: false,\r\n        autoIncrement: true,\r\n        primaryKey: true,\r\n        unique: true,\r\n        type: Sequelize.INTEGER\r\n      },\r\n      email: {\r\n        allowNull: false,\r\n        unique: true,\r\n        type: Sequelize.STRING\r\n      },\r\n      firstName: {\r\n        type: Sequelize.STRING\r\n      },\r\n      lastName: {\r\n        type: Sequelize.STRING\r\n      },\r\n      createdAt: {\r\n        allowNull: false,\r\n        type: Sequelize.DATE\r\n      },\r\n      updatedAt: {\r\n        allowNull: false,\r\n        type: Sequelize.DATE\r\n      }\r\n    });\r\n```\r\n\r\nand the resulting table looks like this:\r\n\r\n```\r\n`Persons` (\r\n  `id` int(11) NOT NULL AUTO_INCREMENT,\r\n  `email` varchar(255) NOT NULL,\r\n  `firstName` varchar(255) DEFAULT NULL,\r\n  `lastName` varchar(255) DEFAULT NULL,\r\n  `createdAt` datetime NOT NULL,\r\n  `updatedAt` datetime NOT NULL,\r\n  PRIMARY KEY (`id`),\r\n  UNIQUE KEY `id` (`id`),\r\n  UNIQUE KEY `email` (`email`)\r\n)\r\n```\r\n\r\nWhen I add an entry to the database using Model.create({}) (with nothing between the brackets), the following object is added to the database:\r\n\r\n```\r\nid  email   firstName   lastName    createdAt   updatedAt\r\n1   ''      NULL        NULL        2019-05-21 15:33:13 2019-05-21 15:33:13\r\nEvery NOT NULL column I have in my database gets a default value (empty string for varchar, false for boolean, NOW() for datetime).\r\n```\r\n\r\nThe Sequelize.js docs state the following:\r\n\r\n> setting allowNull to false will add NOT NULL to the column, which means an error will be thrown from the DB when the query is executed if the column is null. If you want to check that a value is not null before querying the DB, look at the validations section below.\r\n> \r\n> title: { type: Sequelize.STRING, allowNull: false },\r\n\r\nI never get this error. When trying to insert a new row with NULL as value for email in the database directly, I do get an error, but not with Sequelize.js",
    "comments_url": "https://api.github.com/repos/sequelize/sequelize/issues/10984/comments",
    "author": "Brammz",
    "comments": [
      {
        "user": "papb",
        "created_at": "2019-07-25T00:57:04Z",
        "body": "Do you have `allowNull: false` also set in the model itself? Or you have it only in the migration?"
      },
      {
        "user": "Brammz",
        "created_at": "2019-07-30T14:52:25Z",
        "body": "@papb No, they simple stated the datatype of the attribute. I remember trying this and getting declaration issues. However, I tried this again and now I do get the error. Thank you!"
      },
      {
        "user": "papb",
        "created_at": "2019-07-30T15:24:32Z",
        "body": "> and now I do get the error\r\n\r\nYou mean \"don't\", right?\r\n\r\nYou're welcome :+1:"
      },
      {
        "user": "Brammz",
        "created_at": "2019-07-30T15:42:34Z",
        "body": "Well, I don’t get the declaration error anymore indeed. But I do get an error when violating the null constraint, as it is supposed to go! (also misclicked..)"
      },
      {
        "user": "papb",
        "created_at": "2019-07-30T15:46:36Z",
        "body": "Ah, I see! :+1: "
      }
    ]
  },
  {
    "number": 10979,
    "title": "position(substring in string)\t",
    "created_at": "2019-05-21T11:01:13Z",
    "closed_at": "2021-12-15T00:08:01Z",
    "labels": [
      "question",
      "stale"
    ],
    "url": "https://github.com/sequelize/sequelize/issues/10979",
    "body": "How we area able to create `position(substring in string)` statement? `string` comes from user input and must be escaped\r\n\r\n```js\r\nProject.findAll({\r\n    include: [{\r\n        model: Task,\r\n        where: {\r\n            state: Sequelize.col('project.state'),\r\n            [Op.and]:{\r\n              //position(substring in string)\r\n              //literal(\"position('substring' in :string)\")  :string is place holder\r\n              //fn(position,'substring' in :string):string is place holder\r\n            }\r\n        }\r\n    }]\r\n})\r\n```\r\n\r\n\r\n\r\n\r\n",
    "comments_url": "https://api.github.com/repos/sequelize/sequelize/issues/10979/comments",
    "author": "sm2017",
    "comments": [
      {
        "user": "SimonSchick",
        "created_at": "2019-05-22T17:52:50Z",
        "body": "You can use a literal."
      },
      {
        "user": "sm2017",
        "created_at": "2019-05-22T17:58:26Z",
        "body": "@SimonSchick literal has no plaveholder not ? Nor :named"
      },
      {
        "user": "github-actions[bot]",
        "created_at": "2021-11-10T00:09:35Z",
        "body": "This issue has been automatically marked as stale because it has been open for 14 days without activity. It will be closed if no further activity occurs within the next 14 days. If this is still an issue, just leave a comment or remove the \"stale\" label. 🙂"
      },
      {
        "user": "github-actions[bot]",
        "created_at": "2021-11-30T00:10:20Z",
        "body": "This issue has been automatically marked as stale because it has been open for 14 days without activity. It will be closed if no further activity occurs within the next 14 days. If this is still an issue, just leave a comment or remove the \"stale\" label. 🙂"
      }
    ]
  },
  {
    "number": 10978,
    "title": "model associate foreignKey name don't be assigned.",
    "created_at": "2019-05-21T10:19:07Z",
    "closed_at": "2021-12-15T00:08:03Z",
    "labels": [
      "question",
      "stale"
    ],
    "url": "https://github.com/sequelize/sequelize/issues/10978",
    "body": "<!--\r\nPlease note this is an issue tracker, not a support forum.\r\nFor general questions, please use StackOverflow or Slack.\r\n-->\r\n\r\n## What are you doing?\r\n<!-- Post a minimal, self-contained code sample that reproduces the issue, including models and associations -->\r\n\r\n```js\r\nModels1.hasMany(Models2,  {\r\n  foreignKey: 'gps_id',\r\n  sourceKey: 'id',\r\n});\r\n\r\nModels2.belongsTo(Models1, {\r\n  foreignKey: 'gps_id',\r\n  targetKey: 'id',\r\n});\r\n```\r\n**To Reproduce**\r\nSteps to reproduce the behavior:\r\n1. Define models1 and models2 association\r\n2. different create : gpId\r\n3. original column gps_id also create\r\n\r\n## What do you expect to happen?\r\n foreignKey: 'gps_id'\r\n\r\n## What is actually happening?\r\n foreignKey: 'gpId'\r\n\r\n_Output, either JSON or SQL_\r\n\r\n## Environment\r\nDialect:\r\npostgres\r\nDialect **library** version: \r\nDatabase version: 10.7\r\nSequelize version: 4.42.0\r\nNode Version: >=10\r\nOS: Windows\r\nTested with latest release:",
    "comments_url": "https://api.github.com/repos/sequelize/sequelize/issues/10978/comments",
    "author": "JeffreyLinWeiYou",
    "comments": [
      {
        "user": "github-actions[bot]",
        "created_at": "2021-11-10T00:09:37Z",
        "body": "This issue has been automatically marked as stale because it has been open for 14 days without activity. It will be closed if no further activity occurs within the next 14 days. If this is still an issue, just leave a comment or remove the \"stale\" label. 🙂"
      },
      {
        "user": "github-actions[bot]",
        "created_at": "2021-11-30T00:10:22Z",
        "body": "This issue has been automatically marked as stale because it has been open for 14 days without activity. It will be closed if no further activity occurs within the next 14 days. If this is still an issue, just leave a comment or remove the \"stale\" label. 🙂"
      }
    ]
  },
  {
    "number": 10903,
    "title": "Include not working on `hasOne` and `belongsTo`",
    "created_at": "2019-05-06T08:24:49Z",
    "closed_at": "2021-12-15T00:08:06Z",
    "labels": [
      "question",
      "stale",
      "status: awaiting response"
    ],
    "url": "https://github.com/sequelize/sequelize/issues/10903",
    "body": " hi, how are you? i'm trying to get eager loading models but I don't know what I'm doing wrong. I worked with v3 but v5 doesnt return associated models by eager loading.\r\n\r\n```js\r\n// user model\r\n\r\n\r\nconst crypto = require('crypto');\r\nconst Sequelize = require('sequelize');\r\nconst zxcvbn = require('zxcvbn');\r\n\r\n/**\r\n * User model Class\r\n * @class\r\n */\r\nclass User extends Sequelize.Model {\r\n  /**\r\n    * @param {object} props\r\n  */\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n  /**\r\n   * @param {object} sequelize - sequelize connection object\r\n   * @param {object} DataTypes - sequelize datatypes definition\r\n   * @return {Sequelize.Model} returns a new Sequelize db instance\r\n   */\r\n  static init(sequelize, DataTypes) {\r\n    return super.init({\r\n      email: {\r\n        type: DataTypes.STRING,\r\n        allowNull: false,\r\n        validate: {\r\n          isEmail: {\r\n            args: true,\r\n            msg: ' Invalid email format. please enter a valid email',\r\n          },\r\n        },\r\n        unique: {\r\n          msg: 'email already in use. please enter another email',\r\n        },\r\n      },\r\n      password: {\r\n        type: DataTypes.STRING,\r\n        allowNull: false,\r\n      },\r\n      name: {\r\n        type: DataTypes.STRING,\r\n        allowNull: false,\r\n      },\r\n      lastname: {\r\n        type: DataTypes.STRING,\r\n        allowNull: false,\r\n      },\r\n      verified_email: {\r\n        type: DataTypes.BOOLEAN,\r\n        allowNull: false,\r\n        defaultValue: false,\r\n      },\r\n      salt: {\r\n        type: DataTypes.STRING(256),\r\n        allowNull: false,\r\n        validate: {\r\n          isEmpty(value) {\r\n            if (!value || value === '') {\r\n              throw new Error('salt could not be empty. please enter a valid value');\r\n            }\r\n          },\r\n        },\r\n      },\r\n      salt_rounds: {\r\n        type: DataTypes.INTEGER,\r\n        allowNull: false,\r\n        validate: {\r\n          isInt: {\r\n            args: true,\r\n            msg: 'salt rounds must be an integer, please enter a valid value',\r\n          },\r\n        },\r\n      },\r\n    }, {\r\n      sequelize,\r\n      paranoid: true,\r\n      underscored: true,\r\n    });\r\n  }\r\n  static associate(models) {\r\n    models.User.belongsTo(models.Role, {\r\n      onDelete: 'CASCADE',\r\n      onUpdate: 'CASCADE',\r\n      foreignKey: {\r\n        name: 'role_id',\r\n        allowNull: false,\r\n      },\r\n    });\r\n  }\r\n}\r\n\r\nmodule.exports = User;\r\n\r\n// role model\r\n\r\n\r\nconst Sequelize = require('sequelize');\r\n\r\n/**\r\n * User model Class\r\n * @class\r\n */\r\nclass Role extends Sequelize.Model {\r\n  /**\r\n  * @param {object} props\r\n  */\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n  /**\r\n   * @param {object} sequelize - sequelize connection object\r\n   * @param {object} DataTypes - sequelize datatypes definition\r\n   * @return {Sequelize.Model} returns a new Sequelize db instance\r\n   */\r\n  static init(sequelize, DataTypes) {\r\n    return super.init({\r\n      name: {\r\n        type: DataTypes.STRING,\r\n        allowNull: false,\r\n        set(value) {\r\n          this.setDataValue('name', value.toLowerCase());\r\n        },\r\n      },\r\n      slug_name: {\r\n        type: DataTypes.STRING,\r\n        allowNull: true,\r\n        set(value) {\r\n          this.setDataValue('slug_name', value.toLowerCase().replace(' ', '-'));\r\n        },\r\n      },\r\n    }, {\r\n      sequelize,\r\n      paranoid: true,\r\n      underscored: true,\r\n    });\r\n  }\r\n  /**\r\n   * @param {object} models - object that contains all defined models in the database\r\n   */\r\n  static associate(models) {\r\n   models.Role.hasOne(models.User, {\r\n      onDelete: 'CASCADE',\r\n      onUpdate: 'CASCADE',\r\n      foreignKey: {\r\n        name: 'role_id',\r\n        allowNull: false,\r\n      },\r\n    });\r\n  }\r\n}\r\n\r\nmodule.exports = Role;\r\n// query method\r\n\r\nconst result = await models.User.findByPk(req.params.id, {\r\n        include: [{\r\n          model: models.Role,\r\n        }],\r\n        attributes: {\r\n          exclude: ['salt', 'salt_rounds'],\r\n        },\r\n        rejectOnEmpty: true,\r\n      });\r\n```\r\n**To Reproduce**\r\nSteps to reproduce the behavior:\r\n1. Define models User and  Role (see above)\r\n2. create a role and a user with `role_id`\r\n3. run `findByPk` method with include on `User` \r\n3. See output\r\n\r\n## What do you expect to happen?\r\ni want to get a property called `Role` inside my user result with eager loading information\r\n \r\n\r\n## What is actually happening?\r\nthe output is :\r\n```json\r\n{\r\n  \"id\": 1,\r\n  \"email\": \"asdrubalgranados@gmail.com\",\r\n  \"password\": \"02f88a9c23429d594a8f5a54ca4e5f974cd75a4f0248f938e23e0763c23550312a7ba3e911bd42a2cc4ef8d2a75058ea119462a5f60d650a5deb2a42f0912057\",\r\n  \"name\": \"asdrubal\",\r\n  \"lastname\": \"granados\",\r\n  \"verified_email\": false,\r\n  \"createdAt\": \"2019-05-06T07:21:19.000Z\",\r\n  \"updatedAt\": \"2019-05-06T07:21:19.000Z\",\r\n  \"deletedAt\": null,\r\n  \"role_id\": 1\r\n}\r\n```\r\n\r\ncurrent excecuted sql by sequelize : \r\n```sql\r\n2019-05-06T08:15:03.487Z sequelize:sql:mysql Executed (default): SELECT `User`.`id`, \r\n`User`.`email`, `User`.`password`, `User`.`name`, `User`.`lastname`, \r\n`User`.`verified_email`, `User`.`created_at` AS `createdAt`, `User`.`updated_at` AS \r\n`updatedAt`, `User`.`deleted_at` AS `deletedAt`, `User`.`role_id`, `Role`.`id` AS `Role.id`,\r\n `Role`.`name` AS `Role.name`, `Role`.`slug_name` AS `Role.slug_name`, \r\n`Role`.`created_at` AS `Role.createdAt`, `Role`.`updated_at` AS `Role.updatedAt`, \r\n`Role`.`deleted_at` AS `Role.deletedAt` FROM `users` AS `User` LEFT OUTER JOIN `roles` \r\nAS `Role` ON `User`.`role_id` = `Role`.`id` AND (`Role`.`deleted_at` IS NULL) WHERE \r\n(`User`.`deleted_at` IS NULL AND `User`.`id` = '1');\r\n```\r\n\r\n## Environment\r\nDialect:\r\n mysql\r\n\r\nDialect **library** version:  `mysql2 1.6.5` \r\nDatabase version:  mysql 5.7.22\r\nSequelize version: 5.8.5\r\nNode Version: 10.15.3\r\nOS:  mac os mojave\r\n",
    "comments_url": "https://api.github.com/repos/sequelize/sequelize/issues/10903/comments",
    "author": "amgv",
    "comments": [
      {
        "user": "amgv",
        "created_at": "2019-05-12T21:29:01Z",
        "body": "@mickhansen can you help me with this? I asked this by slack channel but I got no answer"
      },
      {
        "user": "hugodes",
        "created_at": "2019-06-06T11:03:10Z",
        "body": "same issue here"
      },
      {
        "user": "papb",
        "created_at": "2019-08-17T03:46:55Z",
        "body": "Hello, this is an unusual way to define a model.\r\n\r\nHave you tried the standard way, like in the docs, declaring an empty class and running `.init()` afterwards?"
      },
      {
        "user": "github-actions[bot]",
        "created_at": "2021-11-11T00:09:47Z",
        "body": "This issue has been automatically marked as stale because it has been open for 14 days without activity. It will be closed if no further activity occurs within the next 14 days. If this is still an issue, just leave a comment or remove the \"stale\" label. 🙂"
      },
      {
        "user": "github-actions[bot]",
        "created_at": "2021-11-30T00:10:30Z",
        "body": "This issue has been automatically marked as stale because it has been open for 14 days without activity. It will be closed if no further activity occurs within the next 14 days. If this is still an issue, just leave a comment or remove the \"stale\" label. 🙂"
      }
    ]
  },
  {
    "number": 10882,
    "title": "Why do Endpoints not work in AWS?",
    "created_at": "2019-05-01T18:39:37Z",
    "closed_at": "2019-05-02T18:55:52Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/sequelize/sequelize/issues/10882",
    "body": "Today I did my very first AWS setup for an Angular project with the following connection to AWS database:\r\n  \"database\": \"testdb\",\r\n  \"username\": \"username\",\r\n  \"password\": \"secret\",\r\n  \"host\": \"xxx.yyy.zzz.rds.amazonaws.com \",\r\n  \"protocol\": \"postgres\",\r\n  \"logging\": true,\r\n  \"dialect\": \"postgres\",\r\n  \"port\": 5432\r\nFor \"host\" (see above) if I enter the IP of my AWS then all works fine but, if I enter my \"endpoint string\" like shown above then it gives me an error as, “Unhandled rejection SequelizeHostNotFoundError”.\r\nKindly advise on a solution for this issue.\r\nThanks in advance.",
    "comments_url": "https://api.github.com/repos/sequelize/sequelize/issues/10882/comments",
    "author": "VishalUZ",
    "comments": [
      {
        "user": "eseliger",
        "created_at": "2019-05-01T22:22:09Z",
        "body": "This most likely is a problem with your DNS resolution\r\nplease check \r\n\r\n```js\r\nconst dns = require('dns')\r\ndns.resolve('YOUR_RDS_HOST', (err, result) => err ? console.error(err) : console.log(result))\r\n```"
      }
    ]
  },
  {
    "number": 10861,
    "title": "How can sort a field to insensitive locale character ?",
    "created_at": "2019-04-29T08:44:36Z",
    "closed_at": "2019-04-29T10:23:24Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/sequelize/sequelize/issues/10861",
    "body": "When I use order method in query, i'm getting ignored locale character. I set the **charset: 'utf8'** and **collate: 'utf8_turkish_ci'**\r\n\r\nFor example: \r\n\r\n|name|limit|\r\n|--|--|\r\n|İzmir  | 50  |\r\n|Ankara  | 50  |\r\n|Trabzon  | 50  |\r\n\r\nselect * from table order by name ASC;\r\n\r\nI must get Ankara -> İzmir -> Trabzon.\r\nBut i'm getting Ankara -> Trabzon -> İzmir.\r\n\r\nCan anyone help ?",
    "comments_url": "https://api.github.com/repos/sequelize/sequelize/issues/10861/comments",
    "author": "korhanozbek44",
    "comments": [
      {
        "user": "SimonSchick",
        "created_at": "2019-04-29T10:23:24Z",
        "body": "Please join our slack and ask questions there."
      }
    ]
  },
  {
    "number": 10608,
    "title": "Mapping non model columns in response",
    "created_at": "2019-03-23T15:24:16Z",
    "closed_at": "2019-03-23T15:27:37Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/sequelize/sequelize/issues/10608",
    "body": "Hi, \r\n\r\nI have a model that only contains tablename with an id attribute. \r\nI want to query (not via raw query) on an existing database using this model and read values of other columns (like name, status etc) which might be present in existing database. \r\n\r\nCan sequelize auto map new columns that it finds or it can only map the names that are mentioned in it's model definition? \r\n\r\nThanks you for looking at it!. ",
    "comments_url": "https://api.github.com/repos/sequelize/sequelize/issues/10608/comments",
    "author": "anupareek",
    "comments": [
      {
        "user": "SimonSchick",
        "created_at": "2019-03-23T15:27:37Z",
        "body": "```\r\n<!--\r\n\r\nPlease note this is an issue tracker, not a support forum.\r\nFor general questions, please use StackOverflow or Slack.\r\n\r\nFor bugs, please fill out the template below.\r\n\r\n-->\r\n```\r\n\r\nDefine them on the model, for further questions, see above."
      }
    ]
  },
  {
    "number": 10574,
    "title": "set `underscored: true`, but `seq` is ``created_at` AS `createdAt`, `updated_at` AS `updatedAt``",
    "created_at": "2019-03-19T14:39:06Z",
    "closed_at": "2019-03-20T04:45:18Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/sequelize/sequelize/issues/10574",
    "body": "<!--\r\n\r\nPlease note this is an issue tracker, not a support forum.\r\nFor general questions, please use StackOverflow or Slack.\r\n\r\nFor bugs, please fill out the template below.\r\n\r\n-->\r\n\r\n## What are you doing?\r\n<!-- Post a minimal, self-contained code sample that reproduces the issue, including models and associations -->\r\n\r\nI'm looking for data, but data do not conform to the deadline.\r\n\r\n## What do you expect to happen?\r\n_I wanted Foo!_\r\n\r\nSELECT `id`, `bid`, `created_uid`, `updated_uid`, `book_name`, `author`, `treat_content`, `operation_type`, `remark`, `is_treat`, `is_pass`, `created_at` `, `updated_at`  FROM `book_records` AS `book_record` WHERE `book_record`.`bid` = '1000007' ORDER BY `book_record`.`updated_at` DESC LIMIT 0, 10;\r\n\r\n\r\n## What is actually happening?\r\n_But the output was bar!_\r\n\r\nSELECT `id`, `bid`, `created_uid`, `updated_uid`, `book_name`, `author`, `treat_content`, `operation_type`, `remark`, `is_treat`, `is_pass`, `created_at` AS `createdAt`, `updated_at` AS `updatedAt` FROM `book_records` AS `book_record` WHERE `book_record`.`bid` = '1000007' ORDER BY `book_record`.`updated_at` DESC LIMIT 0, 10;\r\n\r\n\r\n__Dialect: mysql \r\n__Dialect version: 1.6.5\r\n__Database version: 8.0.13\r\n__Sequelize version: 5.1.0\r\n",
    "comments_url": "https://api.github.com/repos/sequelize/sequelize/issues/10574/comments",
    "author": "keiseiTi",
    "comments": [
      {
        "user": "sushantdhiman",
        "created_at": "2019-03-20T04:45:18Z",
        "body": "Yes this is intended behavior, we only set `field` to underscored name but original model attributes are still camel cased. If you want them to be snake cased as well you need to define them manually like this\r\n\r\n```js\r\nsequelize.define('model', {\r\n}, {\r\n  timestamps: true,\r\n  createdAt: 'created_at',\r\n  updatedAt: 'updated_at'\r\n})\r\n```  "
      }
    ]
  },
  {
    "number": 10573,
    "title": "sum a field in foreign table on each row",
    "created_at": "2019-03-19T03:04:58Z",
    "closed_at": "2019-03-22T12:50:15Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/sequelize/sequelize/issues/10573",
    "body": "## What are you doing?\r\nI have models defined like below:\r\n\r\n`articles`\r\n```js\r\nmodule.exports = app => {\r\n  const { INTEGER, STRING, TINYINT, DATE, NOW } = app.Sequelize;\r\n  const Articles = app.model.define('Articles', {\r\n    id: { type: INTEGER.UNSIGNED, primaryKey: true, autoIncrement: true },\r\n    title: { type: STRING(30) },\r\n    status: { type: TINYINT },\r\n    path: { type: STRING(200) },\r\n    created_at: { type: DATE, defaultValue: NOW },\r\n    updated_at: { type: DATE },\r\n  }, {\r\n    freezeTableName: true,\r\n    tableName: 'articles',\r\n  });\r\n  return Articles;\r\n}\r\n```\r\n\r\n`bp`\r\n```javascript\r\nmodule.exports = app => {\r\n  const { INTEGER, STRING, ENUM, DECIMAL, DATE, NOW } = app.Sequelize;\r\n  const BP = app.model.define('BP', {\r\n    id: { type: INTEGER.UNSIGNED, primaryKey: true, autoIncrement: true },\r\n    user_id: { type: INTEGER.UNSIGNED, allowNull: false },\r\n    type: { type: ENUM, values: ['get', 'consume'] },\r\n    action: { type: ENUM, values: ['checkin', 'exchange', 'read'] },\r\n    article_path: { type:  STRING(200)}, \r\n    amount: { type: DECIMAL(6, 2) },\r\n    comment: { type: STRING(100) },\r\n    created_at: { type: DATE, defaultValue: NOW },\r\n    order_id: { type: STRING },\r\n  }, {\r\n    freezeTableName: true,\r\n    tableName: 'bonus_point',\r\n    timestamps: false,\r\n  });\r\n  BP.associate = () => {\r\n    BP.belongsTo(app.model.Users, { foreignKey: 'user_id', as: 'user' });\r\n    BP.belongsTo(app.model.Articles, { foreignKey: 'article_path', targetKey: 'path', as: 'article' });\r\n  };\r\n  return BP;\r\n}\r\n```\r\n\r\n## What do you expect to happen?\r\nI want to list articles and sum total `bp` by `article_path` for each row of the result;\r\nHow can I get this; What's the best practice?  Thanks\r\n\r\n## What is actually happening?\r\n_But the output was bar!_\r\n\r\n_Output, either JSON or SQL_\r\n\r\n\r\n__Dialect:__ mysql\r\n__Dialect version:__ XXX\r\n__Database version:__ XXX\r\n__Sequelize version:__ XXX\r\n\r\n\r\n",
    "comments_url": "https://api.github.com/repos/sequelize/sequelize/issues/10573/comments",
    "author": "princewck",
    "comments": [
      {
        "user": "SimonSchick",
        "created_at": "2019-03-22T12:50:15Z",
        "body": "```\r\n<!--\r\n\r\nPlease note this is an issue tracker, not a support forum.\r\nFor general questions, please use StackOverflow or Slack.\r\n\r\nFor bugs, please fill out the template below.\r\n\r\n-->\r\n```"
      }
    ]
  },
  {
    "number": 10437,
    "title": "How to close sequelize db connection after multiple integration test are completed",
    "created_at": "2019-02-11T08:27:25Z",
    "closed_at": "2019-03-10T08:18:47Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/sequelize/sequelize/issues/10437",
    "body": "",
    "comments_url": "https://api.github.com/repos/sequelize/sequelize/issues/10437/comments",
    "author": "Bat-Orshikh",
    "comments": [
      {
        "user": "sushantdhiman",
        "created_at": "2019-03-10T08:18:47Z",
        "body": "You can call `sequelize.close()` in `after` for `v4`. For `v5` sequelize automatically shuts down pool when there is no active REPL work"
      }
    ]
  },
  {
    "number": 10318,
    "title": "TypeError: Cannot read property 'name' of undefined",
    "created_at": "2019-01-04T09:18:12Z",
    "closed_at": "2019-01-08T07:17:51Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/sequelize/sequelize/issues/10318",
    "body": "when i want to join my model this exception was thrown, is anybody know how to solve this?\r\nthis is my code \r\n\r\n```js\r\nRiwayat.hasMany(Regis, {foreignKey: 'id_pasien_baru'})\r\nRegis.belongsTo(Riwayat, {foreignKey: 'id_pasien_baru'});\r\n\r\nRiwayat.findAll({\r\n    where:{id_pasien_baru:req.params.id},include:[Regis]\r\n  }).then(Riwayat => {\r\n    res.send(Riwayat)\r\n  })\r\n  .catch(err => {\r\n    res.send('error')\r\n  })\r\n```\r\n\r\n```\r\nTypeError: Cannot read property 'name' of undefined\r\n    at Function._validateIncludedElement (D:\\axon\\node_modules\\sequelize\\lib\\model.js:535:42)\r\n    at options.include.options.include.map.include (D:\\axon\\node_modules\\sequelize\\lib\\model.js:395:37)\r\n    at Array.map (<anonymous>)\r\n    at Function._validateIncludedElements (D:\\axon\\node_modules\\sequelize\\lib\\model.js:390:39)\r\n    at Promise.try.then.then (D:\\axon\\node_modules\\sequelize\\lib\\model.js:1570:14)\r\n    at tryCatcher (D:\\axon\\node_modules\\bluebird\\js\\release\\util.js:16:23)\r\n    at Promise._settlePromiseFromHandler (D:\\axon\\node_modules\\bluebird\\js\\release\\promise.js:512:31)\r\n    at Promise._settlePromise (D:\\axon\\node_modules\\bluebird\\js\\release\\promise.js:569:18)\r\n    at Promise._settlePromise0 (D:\\axon\\node_modules\\bluebird\\js\\release\\promise.js:614:10)\r\n    at Promise._settlePromises (D:\\axon\\node_modules\\bluebird\\js\\release\\promise.js:694:18)\r\n    at _drainQueueStep (D:\\axon\\node_modules\\bluebird\\js\\release\\async.js:138:12)\r\n    at _drainQueue (D:\\axon\\node_modules\\bluebird\\js\\release\\async.js:131:9)\r\n    at Async._drainQueues (D:\\axon\\node_modules\\bluebird\\js\\release\\async.js:147:5)\r\n    at Immediate.Async.drainQueues (D:\\axon\\node_modules\\bluebird\\js\\release\\async.js:17:14)\r\n    at runCallback (timers.js:810:20)\r\n    at tryOnImmediate (timers.js:768:5)\r\n    at processImmediate [as _immediateCallback] (timers.js:745:5)\r\n::1 - - [04/Jan/2019:09:12:11 +0000] \"GET /api/join/237 HTTP/1.1\" 200 5\r\n```",
    "comments_url": "https://api.github.com/repos/sequelize/sequelize/issues/10318/comments",
    "author": "deigratia",
    "comments": [
      {
        "user": "mkaufmaner",
        "created_at": "2019-01-05T20:12:28Z",
        "body": "This error is thrown when the association does not exist.  First, make sure you are defining your associations properly.  Second, I would recommend passing the association object you want to include like so;\r\n```js\r\nRiwayat.hasMany(Regis, {\r\n\tas: 'Regi'\r\n\tforeignKey: 'id_pasien_baru'\r\n});\r\n\r\nRegis.belongsTo(Riwayat, {\r\n\tas: 'Riwayat',\r\n\tforeignKey: 'id_pasien_baru'\r\n});\r\n\r\nRiwayat.findAll({\r\n\tinclude: [\r\n\t\t{\r\n\t\t\tassociation: Riwayat.associations.Regi\r\n\t\t}\r\n\t],\r\n\twhere: {\r\n\t\tid_pasien_baru: req.params.id\r\n\t}\r\n}).then((riwayats) => {\r\n\tres.send(riwayats);\r\n}).catch(err => {\r\n\tres.send('error');\r\n});\r\n```"
      },
      {
        "user": "deigratia",
        "created_at": "2019-01-07T06:46:01Z",
        "body": "oh thanks\r\n"
      },
      {
        "user": "deigratia",
        "created_at": "2019-01-08T07:18:54Z",
        "body": "> > This error is thrown when the association does not exist. First, make sure you are defining your associations properly. Second, I would recommend passing the association object you want to include like so;\r\n> > ```js\r\n> > Riwayat.hasMany(Regis, {\r\n> > \tas: 'Regi'\r\n> > \tforeignKey: 'id_pasien_baru'\r\n> > });\r\n> > \r\n> > Regis.belongsTo(Riwayat, {\r\n> > \tas: 'Riwayat',\r\n> > \tforeignKey: 'id_pasien_baru'\r\n> > });\r\n> > \r\n> > Riwayat.findAll({\r\n> > \tinclude: [\r\n> > \t\t{\r\n> > \t\t\tassociation: Riwayat.associations.Regi\r\n> > \t\t}\r\n> > \t],\r\n> > \twhere: {\r\n> > \t\tid_pasien_baru: req.params.id\r\n> > \t}\r\n> > }).then((riwayats) => {\r\n> > \tres.send(riwayats);\r\n> > }).catch(err => {\r\n> > \tres.send('error');\r\n> > });\r\n> > ```\r\n> \r\n>\r\n\r\nif join 3 where the association table is dropped?\r\n\r\n@mkaufmaner "
      },
      {
        "user": "jerrywang1981",
        "created_at": "2022-01-07T02:37:47Z",
        "body": "another root cause could be Array.prototype.find was overwritten by other packages, e.g. the package 'collections' would overwrite Array.prototype.find and change the function signature. if you have same error message, and package 'collections', try to uninstall package 'collections' to see if it works. "
      }
    ]
  },
  {
    "number": 10317,
    "title": "MSSQL newid() default",
    "created_at": "2019-01-04T04:41:03Z",
    "closed_at": "2019-04-17T17:29:58Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/sequelize/sequelize/issues/10317",
    "body": "When a column is guid by default value of newid() sequelize generates insert sql statement included the column so sql server raises an error.\r\n\r\nmodel:\r\n            {\r\n                \"id\": {\r\n                    \"type\": \"UNIQUEIDENTIFIER\", \"allowNull\": false, \"defaultValue\": \"(newid())\",\r\n                    \"primaryKey\": true, \"autoIncrement\": false\r\n                },\r\n                \"role_name\": {\r\n                    \"type\": \"NVARCHAR\", \"allowNull\": false, \"defaultValue\": null,\r\n                    \"primaryKey\": false, \"autoIncrement\": false\r\n                }\r\n            }\r\n\r\nresult:\r\nINSERT INTO [roles] ([id],[role_name]) OUTPUT INSERTED.* VALUES (N'(newid())',N'managers')\r\n\r\nerror:\r\nUnhandled rejection SequelizeDatabaseError: Conversion failed when converting from a character string to uniqueidentifier\r\n\r\nby the way \r\n1- I get the model from sequelize by define method.\r\n2- the version of tedios is 4.1.0\r\n3- the version of sequelize is 4.42.0\r\n",
    "comments_url": "https://api.github.com/repos/sequelize/sequelize/issues/10317/comments",
    "author": "mirshahreza",
    "comments": [
      {
        "user": "sushantdhiman",
        "created_at": "2019-01-10T16:21:36Z",
        "body": "Can you pass `defaultValue: sequelize.literal('newid()')`, I think by default we are trying to convert `newid` to string"
      },
      {
        "user": "stale[bot]",
        "created_at": "2019-04-10T16:47:23Z",
        "body": "This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. If this is still an issue, just leave a comment 🙂\n"
      }
    ]
  },
  {
    "number": 10296,
    "title": "how query has one or another association?",
    "created_at": "2018-12-25T07:09:09Z",
    "closed_at": "2019-04-12T21:37:11Z",
    "labels": [
      "question",
      "stale"
    ],
    "url": "https://github.com/sequelize/sequelize/issues/10296",
    "body": "## What are you doing?\r\nPostgres sql:\r\nAssume I have a User table and ItemA, ItemB table, bot are 1:n relations with user:\r\n\r\n```js\r\nUser.hasMany(ItemA);\r\nItemA.belongsTo(User)\r\n\r\nUser.hasMany(ItemB);\r\nItemB.belongsTo(User)\r\n```\r\n\r\nHow do I query for all the users that has either one ItemA or ItemB? I have to do the query from User.findAll because there are more limit/sort/filters on User table\r\n\r\n\r\n\r\n",
    "comments_url": "https://api.github.com/repos/sequelize/sequelize/issues/10296/comments",
    "author": "kdong007",
    "comments": [
      {
        "user": "mkaufmaner",
        "created_at": "2019-01-05T20:27:28Z",
        "body": "Ideally, you would want so utilize a `UNION` clause but Sequelize currently doesn't support unions at the moment.\r\n\r\nThere is a work around which is less efficient.  Hopefully, you don't need any attributes from ItemA or ItemB, otherwise you can run into difficulties with limits and offsets.\r\n\r\n```js\r\nUser.hasMany(ItemA, {\r\n  as: 'ItemAs'\r\n});\r\n\r\nUser.hasMany(ItemB, {\r\n  as: 'ItemBs'\r\n});\r\n\r\nUser.findAll({\r\n  subQuery: false,\r\n  include: [\r\n    {\r\n      association: User.associations.ItemAs,\r\n      required: false,\r\n      attributes: [] // don't include any attributes, just left join\r\n    },\r\n    {\r\n      association: User.associations.ItemBs,\r\n      required: false,\r\n      attributes: [] // don't include any attributes, just left join\r\n    }\r\n  ],\r\n  where: {\r\n    $or: [\r\n      {\r\n        '$User->ItemAs.id$': { // the primary key of the associated model\r\n          $not: null\r\n        }\r\n      },\r\n      {\r\n        '$User->ItemBs.id$': { // the primary key of the associated model\r\n          $not: null\r\n        }\r\n      }\r\n    ]\r\n  }\r\n});\r\n```\r\n\r\nMake sure to not overwrite the existing `where` options when apply user supplied filters.  Otherwise you could inadvertently introduce a security vulnerability."
      },
      {
        "user": "stale[bot]",
        "created_at": "2019-04-05T21:09:06Z",
        "body": "This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. If this is still an issue, just leave a comment 🙂\n"
      }
    ]
  },
  {
    "number": 10289,
    "title": "Debugging an intermittent ECONNRESET between API and MYSQL database",
    "created_at": "2018-12-20T09:52:58Z",
    "closed_at": "2019-01-07T16:06:29Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/sequelize/sequelize/issues/10289",
    "body": "Apologies if this is not the place to raise this issue. \r\n\r\nI have an API written in NodeJS that communicates with a  MYSQL database. The API is running inside a Docker container. The database connection is handled via the Sequelize library.\r\n\r\nRecently, I have started seeing the following error intermittently on my API server logs:\r\n```\r\n{ Error: read ECONNRESET\r\n    at TCP.onread [as _originalOnread] (net.js:622:25)\r\n```\r\n\r\nAny subsequent query request from the API results in the following error:\r\n```\r\nSequelizeDatabaseError: Cannot enqueue Query after fatal error.\r\n```\r\n\r\nRecovery is only possible via a restart of the API. But the same issue sporadically re-appears, sometimes within an hour of a restart, sometimes almost immediately.\r\n\r\nI use the following connection pool configuration for my Sequelize instance:\r\n```\r\n  pool: {\r\n    max: 5,\r\n    min: 1,\r\n    evict: 300000,\r\n    idle: 10000\r\n  }\r\n```\r\n\r\nI gather that the ECONNRESET error is thrown when the other side of the TCP conversation abruptly closes its end of the connection.\r\n\r\n**I have the following questions:**\r\n\r\n1. Why does the sequelize connection continuously fail after an ECONNRESET? Is it correct to assume this is because the API server is attempting to re-use the failed TCP connection continuously for subsequent requests? Does this mean the library is unaware of the terminated connection?\r\n\r\n2. What could be the reasons for the connection to be terminated with an ECONNRESET error? I understand there could be a variety of reasons. Some general pointers here would be helpful.\r\n\r\n3. Is this something I should handle at a code level by adding a periodic heartbeat or something similar to ensure that my connection to the database is alive?\r\n\r\nAnd any other pointers on how I can proceed to debug this issue would be hugely appreciated!\r\n\r\nNode version: 8.12.0 (recently upgraded from 6.9.4)\r\nSequelize version: 3.30.2",
    "comments_url": "https://api.github.com/repos/sequelize/sequelize/issues/10289/comments",
    "author": "priyath",
    "comments": [
      {
        "user": "sushantdhiman",
        "created_at": "2018-12-21T06:10:48Z",
        "body": "Please follow the issue template next time\r\n\r\nFirst `evict` is not supported by v3\r\n\r\n> Why does the sequelize connection continuously fail after an ECONNRESET? Is it correct to assume this is because the API server is attempting to re-use the failed TCP connection continuously for subsequent requests? Does this mean the library is unaware of the terminated connection?\r\n\r\nUsually dead connections are removed automatically, are you calling `getConnection` in your codebase?\r\n\r\n> What could be the reasons for the connection to be terminated with an ECONNRESET error? I understand there could be a variety of reasons. Some general pointers here would be helpful.\r\n\r\nNetwork errors, killed by server etc. Can't be predicted in most cases\r\n\r\n> Is this something I should handle at a code level by adding a periodic heartbeat or something similar to ensure that my connection to the database is alive?\r\n\r\nPool should take care of that, may be use `config.retry` for `ECONNRESET`"
      }
    ]
  },
  {
    "number": 10241,
    "title": "How to save complex changes to MySQL JSON data type",
    "created_at": "2018-12-08T11:29:20Z",
    "closed_at": "2018-12-09T09:29:08Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/sequelize/sequelize/issues/10241",
    "body": "When I make more complex changes to my users JSON col “preferences” like this:\r\n\r\n```\r\nuser.preferences.notifications.disable_emails = {\r\n\tissues: true,\r\n\treports: true,\r\n\tcomments: true\r\n}\r\nuser.save().then(user2 => { \r\n\tconsole.log(user2) \r\n})\r\n```\r\n\r\nMy changes are correctly in user2, but not in the database, it stays NULL or keeps the previous value.\r\nIs there a callback I can call after complex changes so its detecting something is different?\r\nI guess auto watch for changes in a multidimensional JSON is too complex - am I right?",
    "comments_url": "https://api.github.com/repos/sequelize/sequelize/issues/10241/comments",
    "author": "ghost",
    "comments": [
      {
        "user": "knoxcard",
        "created_at": "2018-12-09T07:18:39Z",
        "body": "user is your model.  `model.save()` is correct, but you can't have your data variable be the same as the Model itself, as you have with the user variable.\r\n```\r\nvar userData = {}\r\nuserData.name = 'Tom'\r\nuserData.logged_in = 'true'\r\nuserData.preferences = {}\r\nuserData.preferences.notifications = {}\r\nuserData.preferences.notifications.disable_emails = {\r\n\tissues: true,\r\n\treports: true,\r\n\tcomments: true\r\n}\r\n\r\n// update record\r\nuser.update(userData).then(user2 => {\r\n})\r\n\r\n// save new record\r\nuser.build(userData).save().then(user2 => { \r\n\tconsole.log(user2) \r\n})\r\n```"
      },
      {
        "user": "ghost",
        "created_at": "2018-12-09T09:29:08Z",
        "body": "Oh, thank you, I did not understand it like this.\r\nI always work like this:\r\n```\r\nUser.findById(125689).then(user => {\r\n\ts.user = user\r\n})\r\n\r\n// tons of other stuff, user is persistant while logged in\r\n\r\n// socket change request comes in\r\ns.user.name = request.name\r\ns.user.preferences = request.preferences // complex JSON\r\ns.user.save()\r\n```\r\nnow i do this (which i would never have come up with myself):\r\ns.user is already there since login:\r\n```\r\n\ts.user.preferences = request.preferences\r\n\ts.user.update({\r\n\t\tpreferences: s.user.preferences\r\n\t}).then(user => {\r\n\t\tc(user)\r\n\t})\r\n```\r\nit looks weird, why not just save whats currently in it - but it works, thanks!"
      },
      {
        "user": "knoxcard",
        "created_at": "2018-12-09T09:53:10Z",
        "body": "When I first started using Sequelize, I made the same exact mistakes! lol, hours and hours of reading and trial/error to get things right.  To this day,  I am still enhancing my Sequelize/Session code..."
      }
    ]
  },
  {
    "number": 10214,
    "title": "Included Models are not sorted even if their defaultScope dictates that they should be",
    "created_at": "2018-12-01T06:57:36Z",
    "closed_at": "2018-12-01T11:28:39Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/sequelize/sequelize/issues/10214",
    "body": "<!--\r\n\r\nPlease note this is an issue tracker, not a support forum.\r\nFor general questions, please use StackOverflow or Slack.\r\n\r\nFor bugs, please fill out the template below.\r\n\r\n-->\r\n\r\n## What are you doing?\r\n<!-- Post a minimal, self-contained code sample that reproduces the issue, including models and associations -->\r\n\r\n```js\r\n//\r\n// Define the models and their relationships\r\n//\r\nconst List = sequelize.define('list', {\r\n  id: { autoIncrement: true, primaryKey: true, type: DataTypes.INTEGER },\r\n  title: DataTypes.STRING\r\n});\r\n\r\nconst Item = sequelize.define('item', {\r\n  id: { autoIncrement: true, primaryKey: true, type: DataTypes.INTEGER },\r\n  title: DataTypes.STRING,\r\n  order: DataTypes.INTEGER\r\n});\r\n\r\nList.hasMany(Item);\r\nItem.belongsTo(List);\r\n\r\n// *** MOST IMPORTANT PART OF CONFIGURATION! ***\r\nItem.addScope('defaultScope', {\r\n  order: [\r\n    ['listId', 'ASC'],\r\n    ['order', 'ASC']\r\n  ]\r\n}, {\r\n  override: true\r\n});\r\n\r\n//\r\n// Create some data!\r\n//\r\nconst myTodoList = await List.create({\r\n  title: 'TODO List',\r\n  items: [\r\n    { order: 1, title: 'Begin' },\r\n    { order: 3, title: 'Finish' },\r\n    { order: 2, title: 'Dazzle' }\r\n  ]\r\n}, {\r\n  include: [Item]\r\n});\r\n\r\n//\r\n// Fetch some data to prove the point\r\n//\r\nconst items = await Item.findAll({ where: { listId: myTodoList.id } });\r\n\r\n// YAY! `items` are sorted `ASC` by their `order` field, per their `defaultScope`.\r\n\r\nconst list = await List.findById(myTodoList.id, { include: [Item] });\r\n\r\n// BOO! `list.items` are not consistently sorted.\r\n```\r\n\r\n\r\n## What do you expect to happen?\r\nI ~~expect~~ _would like_ the `list.items` to be sorted by the sorting order specified in their model's `defaultScope` (or other associated scope, if active):\r\n\r\n```json\r\n{\r\n  \"title\": \"TODO List\",\r\n  \"items\": [\r\n    { \"order\": 1, \"title\": \"Begin\" },\r\n    { \"order\": 2, \"title\": \"Dazzle\" },\r\n    { \"order\": 3, \"title\": \"Finish\" }\r\n  ]\r\n}\r\n```\r\n\r\n## What is actually happening?\r\nThe `list.items` are not consistently sorted:\r\n\r\n```json\r\n{\r\n  \"title\": \"TODO List\",\r\n  \"items\": [\r\n    { \"order\": 2, \"title\": \"Dazzle\" },\r\n    { \"order\": 1, \"title\": \"Begin\" },\r\n    { \"order\": 3, \"title\": \"Finish\" }\r\n  ]\r\n}\r\n```\r\n\r\n\r\n__Dialect:__ postgres\r\n__Dialect version:__ ?\r\n__Database version:__ `10.5`\r\n__Sequelize version:__ `4.37.6`\r\n__Tested with latest release:__ No\r\n\r\n\r\n**Note :** _Your issue may be ignored OR closed by maintainers if it's not tested against latest version OR does not follow issue template._\r\n",
    "comments_url": "https://api.github.com/repos/sequelize/sequelize/issues/10214/comments",
    "author": "JamesMGreene",
    "comments": [
      {
        "user": "sushantdhiman",
        "created_at": "2018-12-01T11:28:39Z",
        "body": "Not sure where you get the idea that scopes work like this.\r\n\r\n1)\r\n\r\n```js\r\nconst items = await Item.findAll({ where: { listId: myTodoList.id } });\r\n```\r\n\r\n2)\r\n\r\n```js\r\nconst list = await List.findById(myTodoList.id, { include: [Item] });\r\n```\r\n(1) is valid use of scope but (2) is not how scope will work. Because `List` is the main model it will only apply scope from that model. Also order have to shifted to main query (of `List`) from `Item`, not sure how that will work if I would accept this as a feature request.\r\n\r\nSo as this is not a intended use-case of scopes nor this is something that can be implemented atm I am closing this issue"
      },
      {
        "user": "JamesMGreene",
        "created_at": "2018-12-03T15:53:53Z",
        "body": "Sorry for not being clearer but, yes, this was intended as a feature enhancement request. Filling out the issue template resulted in what does indeed look more like a bug report instead.\r\n\r\nIf I were to provide this implementation as a PR, what would be an acceptable set of behavior?\r\n\r\nFor example, my intent is really just to maintain any `order` configuration set on the active scope for an inclusion. However, do you think honoring only that part of the configuration and not the others (e.g. sub-`include`, etc.) would be too confusing? If it was to be implemented, _should_ it honor all parts of the active scope on those inclusions?\r\n\r\nTo me, it feels like honoring just the `order` may be a small and, I believe, non-breaking change that would not negatively impact existing users. However, honoring all parts of the active scope of inclusions would definitely be a breaking change, and, I would suspect, an unwelcomed one for established users.\r\n\r\nThoughts, @sushantdhiman?"
      },
      {
        "user": "JamesMGreene",
        "created_at": "2019-01-02T22:34:48Z",
        "body": "Thoughts, @sushantdhiman?"
      },
      {
        "user": "ekarious",
        "created_at": "2019-02-27T09:29:00Z",
        "body": "I agree with James for this. I see it as a bug.\r\nWhen set as a default scope. Event in association, it should be treated as the default.\r\nWell, i'll find a way around this for now.\r\nThanks."
      },
      {
        "user": "JamesMGreene",
        "created_at": "2019-03-04T02:01:24Z",
        "body": "@Kitefr\r\n\r\nThis is a workaround I developed which covers the basic scenarios using the sort orders of immediate child inclusions. If you want to take it up a notch, you may also want to consider setting it up to loop through the inclusions' inclusions recursively.\r\n\r\n```js\r\nconst get = require('get-value')\r\n\r\n// Add a permanent global hook to sort inclusions of all models\r\nsequelize.addHook('beforeFindAfterOptions', options => {\r\n  if (!options.include) return\r\n  options.order = options.order || []\r\n\r\n  for (const inclusion of options.include) {\r\n    // If the query defines a scope, we use that order.\r\n    // Otherwise, we use the defaultScope's order\r\n    const scopePath = inclusion.scope ? `scopes.${inclusion.scope}` : 'defaultScope'\r\n    const inclusionOrder = get(inclusion, `model.options.${scopePath}.order`)\r\n\r\n    // No ordering rule was found\r\n    if (!inclusionOrder) continue\r\n\r\n    for (const order of inclusionOrder) {\r\n      options.order.push([inclusion, ...order])\r\n    }\r\n  }\r\n})\r\n```"
      }
    ]
  },
  {
    "number": 10082,
    "title": "Virtual fields that rely on sibling fields",
    "created_at": "2018-10-26T18:43:03Z",
    "closed_at": "2018-10-27T17:28:20Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/sequelize/sequelize/issues/10082",
    "body": "<!--\r\n\r\nPlease note this is an issue tracker, not a support forum.\r\nFor general questions, please use StackOverflow or Slack.\r\n\r\nFor bugs, please fill out the template below.\r\n\r\n-->\r\n\r\n## What are you doing?\r\n\r\nWhen you have a model with virtual fields that rely on other fields then you exclude that field in a query, your custom getter doesn't work. Is this a feature that should be added? Or is there a better pattern I should be using?\r\n\r\n```js\r\nmodule.exports = function (sequelize,DataTypes) {\r\n  var Widget = sequelize.define('Widget',{\r\n    data: {\r\n      type: DataTypes.TEXT\r\n    },\r\n    info: {\r\n      type: DataTypes.VIRTUAL,\r\n      get: function () {\r\n        return JSON.parse(this.data).info;\r\n      }\r\n    }\r\n  });\r\n};\r\n```\r\n\r\nExcluding the `data` field would break the query.\r\n\r\n## What do you expect to happen?\r\n\r\nWanted my virtual field tow work\r\n\r\n## What is actually happening?\r\n\r\nMy virtual field doesn't work when the requisite sibling fields are excluded from the query.\r\n\r\n__Dialect:__ sqlite\r\n__Dialect version:__\r\n__Database version:__\r\n__Sequelize version:__ 4.41.0\r\n__Tested with latest release:__ \r\n\r\n\r\n**Note :** _Your issue may be ignored OR closed by maintainers if it's not tested against latest version OR does not follow issue template._\r\n",
    "comments_url": "https://api.github.com/repos/sequelize/sequelize/issues/10082/comments",
    "author": "ryanburnette",
    "comments": [
      {
        "user": "ryanburnette",
        "created_at": "2018-10-26T18:43:57Z",
        "body": "I guess I could parse the JSON once and put the parsed results into real fields, but I'm asking the question partially in principle."
      },
      {
        "user": "sushantdhiman",
        "created_at": "2018-10-27T06:49:04Z",
        "body": "Virtual type accepts dependent attributes which get pulled when virtual field is used\r\n\r\n```js\r\n{\r\n  active: {\r\n    type: new DataTypes.VIRTUAL(DataTypes.BOOLEAN, ['createdAt']),\r\n    get: function() {\r\n      return this.get('createdAt') > Date.now() - (7 * 24 * 60 * 60 * 1000)\r\n    }\r\n  }\r\n}\r\n```"
      },
      {
        "user": "ryanburnette",
        "created_at": "2018-10-27T16:37:06Z",
        "body": "Thanks for the help comprehending the doc."
      }
    ]
  },
  {
    "number": 10010,
    "title": "can sequelize.col() support automanually fill table alias?",
    "created_at": "2018-10-09T10:39:06Z",
    "closed_at": "2018-10-10T05:10:39Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/sequelize/sequelize/issues/10010",
    "body": "Under normal circumstances, I want to search for a value, do it by the following method\r\n\r\n    await this.userDao.findAll({\r\n      where: {\r\n        name: {\r\n\t\t\t[Op.like]: `%${searchValue}%`,\r\n        },\r\n      },\r\n      include: [{\r\n\t      model: Book,\r\n      }]\r\n    });\r\n\r\nNow I want to implement \" lower('name') = searchValue \" like Sql\r\nBecause of using include, there will be hava a ambiguous problem\r\n\r\n    await this.userDao.findAll({\r\n      where: {\r\n        name: Sequelize.where(Sequelize.fn('lower', Sequelize.col('name')), {\r\n\t\t\t[Op.like]: `%${searchValue.tolowerCase()}%`,\r\n        }),\r\n      },\r\n      include: [{\r\n\t      model: Book,\r\n      }]\r\n    });\r\n\r\n\tthrow 'Column \\'name\\' in where clause is ambiguous',\r\n\r\nBecause of code restrictions or considering database compatibility, I don't know what the table alias is. I can't use raw sql to query, how can I do it, or is this a bug?...",
    "comments_url": "https://api.github.com/repos/sequelize/sequelize/issues/10010/comments",
    "author": "muyu66",
    "comments": [
      {
        "user": "sushantdhiman",
        "created_at": "2018-10-10T05:10:39Z",
        "body": "No I don't think so this will be supported, `Sequelize.col` etc deals with query directly, so you need to scope them with correct alias yourself"
      },
      {
        "user": "muyu66",
        "created_at": "2018-10-10T08:35:37Z",
        "body": "Yes, you are right, Sequelize.col() should be like this directly. But can using other function to implement this effect ? (add table alias into Sequelize.fn() column  automanully) "
      },
      {
        "user": "muyu66",
        "created_at": "2018-10-10T08:38:16Z",
        "body": "I have read the sequelize source code, when passing the Where Object, sequelize has automatically filled the table alias automatically for the Object key, why not in sequelize.fn()\r\n"
      },
      {
        "user": "sushantdhiman",
        "created_at": "2018-10-10T08:40:28Z",
        "body": "That would mean changing values passed to `fn` which is mostly not desired as they are targeted specifically to query.\r\n\r\nThis would lead to issues like why my `col(xyz)` gets converted to `col(abc)`. I think when dealing with raw query constructs it is better to let user scope thing as they want to"
      },
      {
        "user": "PatrickGeyer",
        "created_at": "2019-07-17T17:35:55Z",
        "body": "@sushantdhiman, how can we do this when we don't know where the model will be included from? Do you have any tips for this?"
      },
      {
        "user": "si4dev",
        "created_at": "2019-09-05T07:13:50Z",
        "body": "I'm running into the same issue. I don't like to \"hardcode\" the alias of the table. I cannot find many reasons why not but maybe it is changing later although most tables names are not changing. However in sequelize the alias name is known. So maybe a solution is to allow the col() method on the model itself. This line Sequelize.col('name') will result in an ambitious column. Currently to be solved with Sequelize.col('book.name'). My proposal would be to allow Book.col('name')\r\n\r\nThe Book model will know the table alias and is able to return the correct field without ambiguous problem. \r\n\r\nEDIT: It would also be nice to use directly Book.name which currently would return undefined. So not the instance book but the model Book. I did found Book.tableAttributes however it returns an object and it's not easy to extract tablename+fieldname. This leaves me with one workaround to avoid the hardcode table alias which is to use: ``Sequelize.col(`${Book.tableName}.name`)``"
      },
      {
        "user": "papb",
        "created_at": "2019-09-05T12:00:30Z",
        "body": "Hello @si4dev, I like what you are proposing. Can you please open a new feature request and fill the template accordingly? (And link to this issue as a reference)"
      },
      {
        "user": "abelosorio",
        "created_at": "2020-06-29T20:40:16Z",
        "body": "I can't understand why features like this are being discarded...\r\n\r\n+1 to keeping this open"
      }
    ]
  },
  {
    "number": 9944,
    "title": "Access timestamps from createdAt/updatedAt instead of custom field name",
    "created_at": "2018-09-21T02:24:17Z",
    "closed_at": "2018-09-21T07:04:10Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/sequelize/sequelize/issues/9944",
    "body": "In current sequelize, when a custom column name has been assigned to one of the timestamps, the timestamp value is no longer accessible from Model.createdAt / updated.At etc.\r\n\r\nFrom my understanding, this [v5 change](/sequelize/sequelize/issues/6423#issuecomment-379472035) will only change the behavior when timestamps are not customized.\r\n\r\nI'm a very new user of sequelize, but tbh I think this is inconsistent, isn't it? What is the reason behind this design? (Please consider this as a feature request)\r\n\r\n## What are you doing?\r\n```js\r\nconst MyTable = sequelize.define('mytable', {\r\n  myField: {\r\n    type: Sequelize.INTEGER,\r\n    field: 'my_column',\r\n  },\r\n}, {\r\n  createdAt: 'my_created_at',\r\n  updatedAt: false,\r\n});\r\nMyTable.create({\r\n  myField: 0,\r\n})).then(myInstance => {\r\n  console.log(myInstance.myField); // 0\r\n  console.log(myInstance.createdAt); // undefined\r\n  console.log(myInstance.my_created_at); // createdAt timestamp\r\n});\r\n```\r\n\r\n## What do you expect to happen?\r\nmyInstance.createdAt shows the createdAt timestamp.\r\n\r\n__Dialect:__ mysql\r\n__Sequelize version:__ 4.38.1",
    "comments_url": "https://api.github.com/repos/sequelize/sequelize/issues/9944/comments",
    "author": "zypA13510",
    "comments": [
      {
        "user": "sushantdhiman",
        "created_at": "2018-09-21T05:48:11Z",
        "body": "`createdAt: 'my_created_at',` means a new attribute will be created with this name `my_created_at`\r\n\r\nIf you want to customize just field name you should do something like this\r\n\r\n```js\r\n'use strict';\r\n\r\nconst Sequelize = require('./index');\r\nconst sequelize = require('./test/support').createSequelizeInstance();\r\n\r\nconst MyTable = sequelize.define('mytable', {\r\n  myField: {\r\n    type: Sequelize.INTEGER,\r\n    field: 'my_column',\r\n  },\r\n  createdAt: {\r\n    type: Sequelize.DATE,\r\n    field: 'my_created_at'\r\n  }\r\n}, {\r\n  updatedAt: false,\r\n  timestamps: true\r\n});\r\n\r\nsequelize.sync({ force: true }).then(() => {\r\n  return sequelize.authenticate();\r\n}).then(() => {\r\n  return MyTable.create({\r\n    myField: 0,\r\n  }).then(myInstance => {\r\n    console.log(myInstance.myField); // 0\r\n    console.log(myInstance.createdAt); //  createdAt timestamp\r\n    console.log(myInstance.my_created_at); // undefined\r\n  });\r\n});\r\n```\r\n\r\n```sql\r\n0\r\n2018-09-21T05:47:30.001Z\r\nundefined\r\n```"
      },
      {
        "user": "zypA13510",
        "created_at": "2018-09-21T07:04:10Z",
        "body": "My bad, I forgot the timestamp fields can be modified from the attributes parameter instead of options.\r\nThanks. Closing this issue."
      }
    ]
  },
  {
    "number": 9885,
    "title": "[docs] Does creating a new instance with the same primary key after a soft delete work?",
    "created_at": "2018-09-05T19:32:02Z",
    "closed_at": "2018-09-13T05:23:38Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/sequelize/sequelize/issues/9885",
    "body": "I can't tell from the docs what will happen if I soft delete instance `42` on a paranoid mode model, and then later create a new instance with that same key.  Does Sequelize overwrite the fields on the soft deleted row and set `deletedAt` to `null` in that case, or does it throw a duplicate key error?",
    "comments_url": "https://api.github.com/repos/sequelize/sequelize/issues/9885/comments",
    "author": "jedwards1211",
    "comments": [
      {
        "user": "sushantdhiman",
        "created_at": "2018-09-13T05:23:38Z",
        "body": "Easy to test\r\n\r\n```js\r\nconst Task = sequelize.define(\"task\", {\r\n  name: { type: Sequelize.STRING },\r\n}, {\r\n  timestamps: true,\r\n  paranoid: true\r\n});\r\n\r\n(async () => {\r\n  await sequelize.sync({force: true});\r\n\r\n  try {\r\n    const t1 = await Task.create({ name: 'a' });\r\n    await t1.destroy();\r\n\r\n    const t2 = await Task.create({ id: t1.get('id'), name: 'a' });\r\n    \r\n    console.log(t1.toJSON());\r\n    console.log(t2.toJSON());\r\n  } catch (e) {\r\n    console.error(e);\r\n  }\r\n\r\n  await sequelize.close();\r\n})();\r\n```\r\n\r\n```js\r\nSequelizeUniqueConstraintError: Validation error\r\n    at Query.formatError (/var/www/github/sequelize/lib/dialects/postgres/query.js:326:18)\r\n    at query.catch.err (/var/www/github/sequelize/lib/dialects/postgres/query.js:86:18)\r\nFrom previous event:\r\n    at Query.run (/var/www/github/sequelize/lib/dialects/postgres/query.js:79:23)\r\n    at Promise.try.then.connection (/var/www/github/sequelize/lib/sequelize.js:547:20)\r\nFrom previous event:\r\n    at Promise.resolve.retryParameters (/var/www/github/sequelize/lib/sequelize.js:544:8)\r\n    at /var/www/github/sequelize/node_modules/retry-as-promised/index.js:58:21\r\n    at new Promise (<anonymous>)\r\n    at retryAsPromised (/var/www/github/sequelize/node_modules/retry-as-promised/index.js:48:10)\r\n    at Sequelize.query (/var/www/github/sequelize/lib/sequelize.js:443:28)\r\n    at QueryInterface.insert (/var/www/github/sequelize/lib/query-interface.js:837:27)\r\n    at Promise.try.then.then.then (/var/www/github/sequelize/lib/model.js:3779:53)\r\n    at runCallback (timers.js:810:20)\r\n    at tryOnImmediate (timers.js:768:5)\r\n    at processImmediate [as _immediateCallback] (timers.js:745:5)\r\nFrom previous event:\r\n    at model.save (/var/www/github/sequelize/lib/model.js:3755:8)\r\n    at Function.create (/var/www/github/sequelize/lib/model.js:2187:8)\r\n    at /var/www/github/sequelize/sscce.js:20:27\r\n    at <anonymous>\r\n\r\n```"
      },
      {
        "user": "jedwards1211",
        "created_at": "2018-09-13T06:18:03Z",
        "body": "@sushantdhiman Yes, but the main issue is that we should document it."
      },
      {
        "user": "jedwards1211",
        "created_at": "2018-09-13T06:36:23Z",
        "body": "@sushantdhiman also, since the behavior wasn't documented, I couldn't assume that the *actual* behavior is the *intended* behavior and not a bug, which is why it's important to ask these kinds of questions"
      }
    ]
  },
  {
    "number": 9856,
    "title": "findOrCreate, passing a function into options.defaults",
    "created_at": "2018-08-30T15:30:28Z",
    "closed_at": "2018-08-31T05:18:18Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/sequelize/sequelize/issues/9856",
    "body": "I think it would be useful if sequelize had a support for passing a function into options.default for findOrCreate. For example, if default values are not known in advance and should be computed or fetched from some storage, obtaining them before calling findOrCreate would produce excessive overhead in case the record already exists.\r\n\r\nIdeally this should be a function that returns a promise, so sequelize would await on this promise. Code example:\r\n\r\n```js\r\nModel.findOrCreate({\r\n  where: {username: 'sdepold'},\r\n  defaults: async function() {\r\n    // fetching some external storage\r\n    let age = ageStorage.getAgeForUser('sdepold')\r\n    return {age}\r\n  }\r\n})\r\n```\r\n\r\nObviously this function should be called only when a record needs to be created.",
    "comments_url": "https://api.github.com/repos/sequelize/sequelize/issues/9856/comments",
    "author": "calibr",
    "comments": [
      {
        "user": "sushantdhiman",
        "created_at": "2018-08-31T05:18:18Z",
        "body": "```js\r\nModel.mySpecialFunc = function (options) {\r\n   let age = ageStorage.getAgeForUser('sdepold');\r\n\r\n   return Model.findOrCreate({\r\n     ...options,\r\n     defaults: {\r\n       ...options.defaults,\r\n       age\r\n     }\r\n  });\r\n}\r\n```"
      },
      {
        "user": "calibr",
        "created_at": "2018-09-03T17:38:44Z",
        "body": "@sushantdhiman Thank you, but in your example you are still fetching everytime from some storage calling `ageStorage.getAgeForUser('sdepold');`, however value from this storage may not be used at all if the record already already exists in the DB. That's what I meant when I wrote about \"overhead\" - it could be a network request to fetch some values for `options.default` or something else that takes time and resouces, but may not be used, so can be moved to a special function which is called only when the record needs to be created. Sorry if it was not clear."
      },
      {
        "user": "sushantdhiman",
        "created_at": "2018-09-04T06:28:07Z",
        "body": "No I can't accept this more complicated version to get `defaults`, Network request can be cached it if it is time consuming and it will work without any extra overhead for repeated cases."
      }
    ]
  },
  {
    "number": 9852,
    "title": "I want to define the global classMethods.",
    "created_at": "2018-08-29T02:25:03Z",
    "closed_at": "2018-10-21T07:18:17Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/sequelize/sequelize/issues/9852",
    "body": "\r\n## What are you doing?\r\nI want to define the global classMethods.\r\n\r\n```js\r\n// code here\r\n```\r\n\r\n## What do you expect to happen?\r\nI want to define the global classMethods.\r\n\r\n## What is actually happening?\r\n_But the output was bar!_\r\n\r\n_Output, either JSON or SQL_\r\n\r\n\r\n__Dialect:__ mysql / postgres / sqlite / mssql / any\r\n__Dialect version:__ mysql\r\n__Database version:__ mysql5.7\r\n__Sequelize version:__ last\r\n__Tested with latest release:__ No (If yes, specify that version)\r\n\r\n\r\n**Note :** _Your issue may be ignored OR closed by maintainers if it's not tested against latest version OR does not follow issue template._\r\n",
    "comments_url": "https://api.github.com/repos/sequelize/sequelize/issues/9852/comments",
    "author": "acodercat",
    "comments": [
      {
        "user": "sushantdhiman",
        "created_at": "2018-08-31T07:43:55Z",
        "body": "All model extends `Sequelize.Model` you should be able to add methods directly on that class, it will be available on all Models\r\n\r\n```js\r\nSequelize.Model.testy = function () {\r\n  console.log(`Hello from ${this.name}`);\r\n};\r\n\r\nvar Group = sequelize.define('Group', {\r\n  name: sequelize.Sequelize.STRING\r\n});\r\n\r\nvar Person = sequelize.define('Person', {\r\n  name: sequelize.Sequelize.STRING\r\n});\r\n\r\nPerson.testy();\r\nGroup.testy();\r\n```\r\n\r\n```\r\nHello from Person\r\nHello from Group\r\n```"
      }
    ]
  },
  {
    "number": 9808,
    "title": "setRelation(array) leads to illegal sql",
    "created_at": "2018-08-16T15:12:26Z",
    "closed_at": "2018-12-04T02:06:47Z",
    "labels": [
      "question",
      "stale"
    ],
    "url": "https://github.com/sequelize/sequelize/issues/9808",
    "body": "## What are you doing?\r\nI have a model with a 1-n relation with another model. I want to update the association with new data.\r\n\r\n```js\r\nconst Source = sequelize.define(\r\n    'Source',\r\n    {\r\n      id: {\r\n        type: DataTypes.UUID,\r\n        defaultValue: DataTypes.UUIDV4,\r\n        primaryKey: true,\r\n        lowercase: true\r\n      },\r\n      label: { type: DataTypes.STRING(255), trim: true },\r\n    },\r\n    {\r\n      tableName: 'Sources',\r\n    }\r\n  );\r\n\r\n  Source.associate = models => {\r\n      Source.hasMany(models.NADates, {\r\n      foreignKey: 'sourceId',\r\n      onDelete: 'cascade',\r\n      as: 'naDates'\r\n    });\r\n  };\r\n```\r\n\r\n```js\r\n  const NADate = sequelize.define(\r\n    'SourceNADate',\r\n    {\r\n      id: {\r\n        type: DataTypes.UUID,\r\n        defaultValue: DataTypes.UUIDV4,\r\n        primaryKey: true,\r\n        lowercase: true\r\n      },\r\n      dteFrom: { type: DataTypes.DATE },\r\n      dteTo: { type: DataTypes.DATE }\r\n    },\r\n    {\r\n      tableName: 'SourceNADates'\r\n    }\r\n  );\r\n\r\n  NADate.associate = models => {\r\n    NADate.belongsTo(models.Source, {\r\n      foreignKey: 'sourceId',\r\n      allowNull: false\r\n    });\r\n  };\r\n\r\n```\r\n```js\r\nexport const update = async (data, id) => {\r\n  try {\r\n    const currentItemDb = await get(id, {\r\n      include: [\r\n        {\r\n          model: models.NADate,\r\n          as: 'naDates'\r\n        }\r\n      ]\r\n    });\r\n    const currentItem = JSON.stringify(currentItemDb.get({ raw: true }));\r\n    await currentItemDb.setNaDates(data.naDates);\r\n    await sequelize.transaction(\r\n      { isolationLevel: sequelize.Transaction.ISOLATION_LEVELS.READ_COMMITTED },\r\n      async transaction => Promise.all([\r\n          currentItemDb.cache().update(data, {\r\n            transaction\r\n          }),\r\n          createHistory(securityObj, JSON.parse(currentItem), id, { transaction })\r\n        ])\r\n    );\r\n```\r\n\r\nI'm submitting an object `data` with these characteristics:\r\n```js\r\n{\r\n   naDates: [{dteFrom: \"2018-08-16T04:00:00.000Z\"}]\r\n}\r\n```\r\nnaDates is an array with new items.\r\n\r\n## What do you expect to happen?\r\n`INSERT INTO `NADates`(`dteFrom`,`sourceId`) VALUES('2018-08-16T04:00:00.000Z', '63098f9a-d6fa-479d-97d0-5e3416bf7a16')`\r\n\r\n\r\n## What is actually happening?\r\n\r\n`UPDATE `NADates` SET `sourceId`='63098f9a-d6fa-479d-97d0-5e3416bf7a16' WHERE `id` IN ('[object object]')`\r\n\r\nAs a workaround I can manipulate the NADates table manually based on the sourceId, but this should work if I understand the manual correctly. Very confusing.\r\n\r\n_Output, either JSON or SQL_\r\n\r\n\r\n__Dialect:__ mysql\r\n__Dialect version:__ XXX\r\n__Database version:__ 5.7\r\n__Sequelize version:__ 4.37.10\r\n__Tested with latest release:__ yes\r\n\r\n",
    "comments_url": "https://api.github.com/repos/sequelize/sequelize/issues/9808/comments",
    "author": "mschipperheyn",
    "comments": [
      {
        "user": "sushantdhiman",
        "created_at": "2018-08-28T04:49:51Z",
        "body": "`set*` needs primary key, array of primary keys, array of instances or array of plain objects with primary keys.\r\n\r\nAs I can see \r\n\r\n```\r\n{\r\n   naDates: [{dteFrom: \"2018-08-16T04:00:00.000Z\"}]\r\n}\r\n```\r\n\r\ndoes not contain any primary key"
      },
      {
        "user": "stale[bot]",
        "created_at": "2018-11-26T05:42:41Z",
        "body": "This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. If this is still an issue, just leave a comment 🙂\n"
      }
    ]
  },
  {
    "number": 9792,
    "title": "How can I use attributes after attributes as",
    "created_at": "2018-08-13T07:54:20Z",
    "closed_at": "2018-10-21T07:21:29Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/sequelize/sequelize/issues/9792",
    "body": "How can I use attributes after attributes as, such as this:\r\n\r\n```js\r\nmodel.findAll({\r\n        attributes: [\r\n          'id',\r\n          'name',\r\n          'version',\r\n        ],\r\n        include: [\r\n          {\r\n            association: model.hasOne(\r\n              model,\r\n              { as: 'LatestDelivery', foreignKey: 'id', targetKey: 'id' }\r\n            ),\r\n            attributes: [\r\n              'id',\r\n              [sequelize.fn('max', sequelize.col('LatestDelivery.version')), 'mv'],\r\n            ],\r\n            on: {\r\n              '$SurveyDelivery.id$': { $col: 'LatestDelivery.id' },\r\n              '$SurveyDelivery.version$': { $col: 'LatestDelivery.version' },\r\n            },\r\n            required: true,\r\n          }\r\n        ],\r\n        group: ['LatestDelivery.id'],\r\n      });\r\n```\r\n\r\n\r\n__Dialect:__ mysql\r\n__Dialect version:__ 2.13.0\r\n__Database version:__ 5.6\r\n__Sequelize version:__ 3.30.1\r\n__Tested with latest release:__ No",
    "comments_url": "https://api.github.com/repos/sequelize/sequelize/issues/9792/comments",
    "author": "sml782",
    "comments": [
      {
        "user": "sushantdhiman",
        "created_at": "2018-08-15T05:35:33Z",
        "body": "I don't get your issue, please explain."
      }
    ]
  },
  {
    "number": 9768,
    "title": "the default foreign key is not overwritten with the foreignKey option",
    "created_at": "2018-08-07T06:33:31Z",
    "closed_at": "2018-08-07T14:34:53Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/sequelize/sequelize/issues/9768",
    "body": "\r\n## What are you doing?\r\ncreating association between two model classes: Product and ProductPhoto[One product can have many photos]\r\nwhere product_id from Product table should be foreign key in ProductPhoto table.\r\n\r\n\r\n```js\r\nProduct Model :\r\nvar product = sequelize.define('product', {\r\n    product_id:{\r\n        allowNull: false,\r\n        type:DataTypes.INTEGER,\r\n        primaryKey: true,\r\n        autoIncrement:true,\r\n    },\r\n    productName: {\r\n      type:DataTypes.STRING,\r\n      field:'product_name'\r\n    }\r\n, {\r\n    underscored: true,\r\n    freezeTableName: true\r\n  });\r\n  product.associate = function(models) {\r\n  product.hasMany(models.productPhoto,{foriegnKey:'product_id'});\r\n   }\r\n}\r\nProductPhoto Model:\r\nvar productPhoto = sequelize.define('productPhoto', {\r\n  \t productPhotoId:{\r\n        allowNull: false,\r\n        type:DataTypes.INTEGER,\r\n        primaryKey: true,\r\n        autoIncrement:true,\r\n        field:'product_photo_id'\r\n      },\r\n    productPhotoPath: {\r\n      type:DataTypes.STRING,\r\n      field:'product_photo_path'\r\n    }\r\n}\r\nproductPhoto.associate = function(models) {\r\n    productPhoto.belongsTo(models.product, {foreignKey: 'product_id'});\r\n\r\n  }\r\n```\r\n\r\n## What do you expect to happen?\r\nWhen i execute sync to create database tables ,name product and productPhoto, the foreign key with name product_id in table productPhoto should be created.\r\n\r\n## What is actually happening?\r\nsequelize is generating foriegn key product_product_id, it is not taking foreignKey option.\r\n\r\n\r\n_Output, either JSON or SQL_\r\n\r\n CREATE TABLE IF NOT EXISTS `product` (`product_id` INTEGER NOT NULL auto_increment , `product_name` VARCHAR(255), `product_price` FLOAT, `product_description` TEXT, `product_sku` VARCHAR(255), `product_stock` INTEGER, `product_brand` VARCHAR(255), `product_title` VARCHAR(255), `product_fabric` VARCHAR(255), `product_manufacturer_info` VARCHAR(255), `product_country_of_origin` VARCHAR(255), `product_style` VARCHAR(255), `product_sold_by` VARCHAR(255), `created_at` DATETIME, `updated_at` DATETIME, PRIMARY KEY (`product_id`)) ENGINE=InnoDB;\r\nExecuting (default): SHOW INDEX FROM `product` FROM `ecommerse_db_dev`\r\n\r\nCREATE TABLE IF NOT EXISTS `productPhoto` (`product_photo_id` INTEGER NOT NULL auto_increment , `product_photo_path` VARCHAR(255), `product_photo_alt` VARCHAR(255), `createdAt` DATETIME, `updatedAt` DATETIME, `created_at` DATETIME NOT NULL, `updated_at` DATETIME NOT NULL, `product_product_id` INTEGER, PRIMARY KEY (`product_photo_id`), FOREIGN KEY (`product_product_id`) REFERENCES `product` (`product_id`) ON DELETE SET NULL ON UPDATE CASCADE) ENGINE=InnoDB;\r\nExecuting (default): SHOW INDEX FROM `productPhoto` FROM `ecommerse_db_dev`\r\n\r\n\r\n__Dialect:__ mysql\r\n__Dialect version:__ 1.6.1\r\n__Database version:__ 5.7.21\r\n__Sequelize version:__ 4.37.10\r\n__Tested with latest release:__ Yes (sequelize@4.38.0)\r\n\r\n\r\n**Note :** _Your issue may be ignored OR closed by maintainers if it's not tested against latest version OR does not follow issue template._\r\n",
    "comments_url": "https://api.github.com/repos/sequelize/sequelize/issues/9768/comments",
    "author": "mail2nitinraj",
    "comments": [
      {
        "user": "sushantdhiman",
        "created_at": "2018-08-07T06:53:58Z",
        "body": "> ```product.hasMany(models.productPhoto,{foriegnKey:'product_id'});```\r\n\r\nSpelling mistake `foriegnKey` should be `foreignKey`"
      },
      {
        "user": "mail2nitinraj",
        "created_at": "2018-08-07T14:34:53Z",
        "body": "Thanks! now it worked as expected :)"
      }
    ]
  },
  {
    "number": 9581,
    "title": "Model Unique Case Insensitive Definition",
    "created_at": "2018-06-22T21:01:41Z",
    "closed_at": "2019-01-10T05:21:53Z",
    "labels": [
      "question",
      "stale"
    ],
    "url": "https://github.com/sequelize/sequelize/issues/9581",
    "body": "Hi, \r\n\r\nHaving some problems working out how to get make a field unique and also case insensitive. \r\n\r\nI have the following model.\r\n\r\n```\r\nmodule.exports` = function (sequelize, DataTypes) {\r\n  return sequelize.define('category', {\r\n    name: {\r\n      type: DataTypes.STRING,\r\n      allowNull: true,\r\n      unique: {\r\n        msg: 'Category name already exists.',\r\n        fields: [sequelize.fn('lower', sequelize.col('name'))]\r\n      }\r\n    },\r\n    description: {\r\n      type: DataTypes.STRING,\r\n      allowNull: true\r\n    },\r\n    type: {\r\n      type: DataTypes.STRING,\r\n      allowNull: true\r\n    }\r\n  }, {\r\n    indexes: [{\r\n      unique: true,\r\n      fields: ['name']\r\n    }]\r\n  })\r\n}\r\n```\r\n\r\nI want the message 'Category name already exists' to be displayed if i enter duplicate category names regardless of case e.g. Manual and manual should throw the unique constraint error.\r\n\r\nI've also tried adding it to the index within the model but no joy.\r\n\r\nI've also tried it within Postgres itself through a db migration but then the error being thrown is like 'lower(name::text) must be unique'\r\n\r\nI've searched google and github but can't see how to do it. \r\n\r\nAny suggestions or advice is greatly appreciated.\r\n\r\nThanks\r\n\r\nPaul\r\n\r\n",
    "comments_url": "https://api.github.com/repos/sequelize/sequelize/issues/9581/comments",
    "author": "paulmowat",
    "comments": [
      {
        "user": "paulmowat",
        "created_at": "2018-07-03T23:00:31Z",
        "body": "If this is a bug and not down to a lack of understanding, I'm happy to look into making the required changes but could do with some advice as to what would be expected?"
      },
      {
        "user": "stale[bot]",
        "created_at": "2018-12-31T19:05:21Z",
        "body": "This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. If this is still an issue, just leave a comment 🙂\n"
      }
    ]
  },
  {
    "number": 9579,
    "title": "Associations are not created automatically",
    "created_at": "2018-06-22T19:08:21Z",
    "closed_at": "2018-06-26T11:44:38Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/sequelize/sequelize/issues/9579",
    "body": "## What are you doing?\r\n\r\nI am trying to create associations between my models.  Here are two of my models:\r\n\r\n### Country\r\n```js\r\n'use strict';\r\n\r\nmodule.exports = (sequelize, DataTypes) => {\r\n  const Country = sequelize.define('Country', {\r\n    id: {\r\n      type: DataTypes.INTEGER,\r\n      primaryKey: true\r\n    },\r\n    name: {\r\n      type: DataTypes.STRING,\r\n      allowNull: false,\r\n      unique: true\r\n    }\r\n  }, {\r\n    underscored: true\r\n  });\r\n\r\n  Country.associate = (models) => {\r\n    models.Country.hasMany(models.Team);\r\n  };\r\n\r\n  return Country;\r\n};\r\n```\r\n### Team\r\n```js\r\n'use strict';\r\n\r\nmodule.exports = (sequelize, DataTypes) => {\r\n  const Team = sequelize.define('Team', {\r\n    id: {\r\n      type: DataTypes.INTEGER,\r\n      primaryKey: true\r\n    },\r\n    name: {\r\n      type: DataTypes.STRING,\r\n      allowNull: false\r\n    },\r\n    short_name: {\r\n      type: DataTypes.STRING\r\n    },\r\n    official_name: {\r\n      type: DataTypes.STRING\r\n    },\r\n    abbreviation: {\r\n      type: DataTypes.STRING\r\n    },\r\n    home_colour1: {\r\n      type: DataTypes.STRING\r\n    },\r\n    home_colour2: {\r\n      type: DataTypes.STRING\r\n    },\r\n    away_colour1: {\r\n      type: DataTypes.STRING\r\n    },\r\n    away_colour2: {\r\n      type: DataTypes.STRING\r\n    },\r\n    manager_join_date: {\r\n      type: DataTypes.DATEONLY\r\n    }\r\n  }, {\r\n    underscored: true\r\n  });\r\n\r\n  Team.associate = (models) => {\r\n    models.Team.belongsTo(models.Country);\r\n  };\r\n\r\n  return Team;\r\n};\r\n```\r\n\r\n## What do you expect to happen?\r\nI expect to have a foreign key in the Team table for country and a column named `country_id`.\r\n\r\n## What is actually happening?\r\nI only see the fields defined in my Team model. There is no such column for country and there is no foreign key.\r\n\r\n__Dialect:__ mysql\r\n__Dialect version:__ 5.6.39\r\n__Sequelize version:__ 4.38.0",
    "comments_url": "https://api.github.com/repos/sequelize/sequelize/issues/9579/comments",
    "author": "goktugercegurel",
    "comments": [
      {
        "user": "sushantdhiman",
        "created_at": "2018-06-23T08:33:50Z",
        "body": "You need to call `associate`, it's just a convention to define `associate`"
      }
    ]
  },
  {
    "number": 9564,
    "title": "Multiple scopes",
    "created_at": "2018-06-19T20:29:01Z",
    "closed_at": "2018-07-14T08:57:09Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/sequelize/sequelize/issues/9564",
    "body": "This is not a bug reporting, it is only a question, you can close it after. \r\nWhen I get `Users` from DB I have something like this in my where clause `'$customer.name$'` where `customer` is property on `User`. \r\nBecause of that I need to put this in `User` scope: `include: [() => Customer]`. If I don't do that I would get error: `missing from-clause entry for table`.\r\nSo far so good, but the problem is that doing so it will also return `Customer` inside `User` as a response, and I don't want that, I only included it so `where` clause doesn't throw an error.\r\nIs there a way to use one scope to support `where` clause and another scope as a result of query? Because what you need in `WHERE` is not the same as what you want in `SELECT`. \r\nIf this is not possible, is there any other approach to solve this problem?",
    "comments_url": "https://api.github.com/repos/sequelize/sequelize/issues/9564/comments",
    "author": "Aleksaas",
    "comments": [
      {
        "user": "josemando",
        "created_at": "2018-06-20T17:35:44Z",
        "body": "If you something like this, you won't have any value from Customer on the result\r\n```\r\nUser.findOne({\r\n  include: [{\r\n    model: Customer,\r\n    as: 'customer',\r\n    attributes: [],\r\n    where: {\r\n      name: \"something here\"\r\n    }\r\n  }],\r\n  where: {\r\n    ...\r\n  }\r\n```\r\n"
      },
      {
        "user": "sushantdhiman",
        "created_at": "2018-07-14T08:57:09Z",
        "body": "^"
      }
    ]
  },
  {
    "number": 9501,
    "title": "getterMethods can't use async await ?",
    "created_at": "2018-06-03T13:58:41Z",
    "closed_at": "2018-06-03T14:53:13Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/sequelize/sequelize/issues/9501",
    "body": "version:4.4.2\r\n\r\njs:  \r\n```\r\n.define('template_enterprise', {\r\n   name:STRING\r\n},\r\n{\r\n getterMethods: {\r\n    async fullName() {\r\n      return await xxxx();// Promise\r\n    }\r\n  },\r\n\r\n}\r\n\r\n```\r\nI can't  get fullName, get Promise",
    "comments_url": "https://api.github.com/repos/sequelize/sequelize/issues/9501/comments",
    "author": "rondaful",
    "comments": [
      {
        "user": "sushantdhiman",
        "created_at": "2018-06-03T14:53:13Z",
        "body": "No, this wont be in future.\r\n\r\n1. Complexity\r\n2. We are moving toward ES6 getters, which can't be async by design\r\n3. Anything you are trying to implement with async getters can also be implemented with before hooks"
      }
    ]
  },
  {
    "number": 9494,
    "title": "instance.constructor different when .scope() is used to retrieve the instance",
    "created_at": "2018-05-30T21:08:10Z",
    "closed_at": "2018-06-01T15:00:42Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/sequelize/sequelize/issues/9494",
    "body": "## What are you doing?\r\n```\r\nconst Sequelize = require('sequelize');\r\nconst sequelize = new Sequelize('test-db', '', '', { host: 'localhost', dialect: 'postgres', operatorsAliases: false, logging: false });\r\n\r\nconst User = sequelize.define('User', {\r\n  name: Sequelize.STRING(200),\r\n  status: Sequelize.ENUM('active', 'inactive', 'unverified'),\r\n}, {\r\n  scopes: {\r\n    active: {\r\n      where: {\r\n        status: 'active',\r\n      },\r\n    },\r\n  },\r\n});\r\n\r\nasync function main () {\r\n  await sequelize.sync({ force: true });\r\n  await Promise.all([\r\n    User.create({ name: 'Active User 1', status: 'active' }),\r\n    User.create({ name: 'Active User 2', status: 'active' }),\r\n    User.create({ name: 'Inactive User 1', status: 'inactive' }),\r\n    User.create({ name: 'Inactive User 2', status: 'inactive' }),\r\n  ]);\r\n\r\n  const unscopedUser = await User.findOne({ where: { name: 'Inactive User 1' } });\r\n  const unscopedUsers = await User.findAll({ where: { status: 'inactive' } });\r\n  const scopedUser = await User.scope('active').findOne({ where: { name: 'Active User 1' } });\r\n  const scopedUsers = await User.scope('active').findAll();\r\n\r\n  console.log('unscopedUser constructor is User ==', unscopedUser.constructor === User); // true\r\n  console.log('unscopedUsers constructors are User ==', unscopedUsers.every(i => i.constructor === User)); // true\r\n  console.log('scopedUser constructor is User ==', scopedUser.constructor === User); // false\r\n  console.log('scopedUsers constructors are User ==', scopedUsers.every(i => i.constructor === User)); // false\r\n\r\n  process.exit(0);\r\n}\r\n\r\nmain();\r\n```\r\n\r\n## What do you expect to happen?\r\nI expect the object instance constructors to always be `User` even if I used `.scope()` to retrieve it.\r\n\r\n## What is actually happening?\r\nWhen `.scope()` is used during retrieval the instance constructor is no longer `User`.\r\n\r\n__Dialect:__ postgres\r\n__Dialect version:__ ??\r\n__Database version:__ 10.3\r\n__Sequelize version:__ 4.37.10\r\n__Tested with latest release:__ Yes (4.37.10)",
    "comments_url": "https://api.github.com/repos/sequelize/sequelize/issues/9494/comments",
    "author": "aforty",
    "comments": [
      {
        "user": "sushantdhiman",
        "created_at": "2018-06-01T04:45:59Z",
        "body": "`.scope / .unscope` creates a new copy of model, instances created by them refer to this new copy. For identification purpose you can use `instance.constructor.name` which should be common for different scoped instances.\r\n\r\nWe need a new copy of class to maintain multiple scopes at a time. If we keep the class same, changing scope on one of them will change scope on other sibling classes."
      },
      {
        "user": "aforty",
        "created_at": "2018-06-01T15:00:42Z",
        "body": "I see, thank you!"
      }
    ]
  },
  {
    "number": 9330,
    "title": "On .findAll(), specifying OFFSET without LIMIT leads to incorrect SQL query",
    "created_at": "2018-04-19T22:07:51Z",
    "closed_at": "2018-04-20T03:28:08Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/sequelize/sequelize/issues/9330",
    "body": "## What are you doing?\r\nI'm trying to get all authors and their books except the first author:\r\n```js\r\nconst Sequelize = require('sequelize');\r\nconst sequelize = new Sequelize('postgres://postgres@localhost:5432/postgres', { logging: false });\r\n\r\nconst Book = sequelize.define(\r\n  'books',\r\n  { title: Sequelize.STRING },\r\n  { timestamps: false },\r\n);\r\n\r\nconst Author = sequelize.define(\r\n  'authors',\r\n  { username: Sequelize.STRING },\r\n  { timestamps: false },\r\n);\r\n\r\nAuthor.hasMany(Book);\r\nBook.belongsTo(Author);\r\n\r\nasync function main() {\r\n  await sequelize.sync({ force: true });\r\n\r\n  // Preparing data\r\n  await Author.bulkCreate([\r\n    { id: 1, username: 'John' },\r\n    { id: 2, username: 'William' },\r\n  ]);\r\n\r\n  await Book.bulkCreate([\r\n    { title: 'Lorem Ipsum, vol. 1', authorId: 1 },\r\n    { title: 'Lorem Ipsum, vol. 2', authorId: 1 },\r\n\r\n    { title: 'Lorem Ipsum, vol. 3', authorId: 2 },\r\n    { title: 'Lorem Ipsum, vol. 4', authorId: 2 },\r\n    { title: 'Lorem Ipsum, vol. 5', authorId: 2 },\r\n    { title: 'Lorem Ipsum, vol. 6', authorId: 2 },\r\n  ]);\r\n\r\n  // This statement generates incorrect query:\r\n  await Author.findAll({\r\n    offset: 1,\r\n    include: Book,\r\n    logging: console.log,\r\n  });\r\n\r\n  process.exit(0);\r\n}\r\n\r\nmain();\r\n```\r\n\r\n## What do you expect to happen?\r\nI wanted first found author skipped and get rest of authors and their books. Expected SQL query:\r\n```sql\r\nSELECT\r\n  \"authors\".*,\r\n  \"books\".\"id\"       AS \"books.id\",\r\n  \"books\".\"title\"    AS \"books.title\",\r\n  \"books\".\"authorId\" AS \"books.authorId\"\r\nFROM (SELECT\r\n        \"authors\".\"id\",\r\n        \"authors\".\"username\"\r\n      FROM \"authors\" AS \"authors\"\r\n      OFFSET 1) AS \"authors\" LEFT OUTER JOIN \"books\" AS \"books\" ON \"authors\".\"id\" = \"books\".\"authorId\";\r\n```\r\n\r\n## What is actually happening?\r\nOnly the first row of joined tables is skipped. Actual generated query:\r\n```sql\r\nSELECT\r\n  \"authors\".\"id\",\r\n  \"authors\".\"username\",\r\n  \"books\".\"id\"       AS \"books.id\",\r\n  \"books\".\"title\"    AS \"books.title\",\r\n  \"books\".\"authorId\" AS \"books.authorId\"\r\nFROM \"authors\" AS \"authors\" LEFT OUTER JOIN \"books\" AS \"books\" ON \"authors\".\"id\" = \"books\".\"authorId\"\r\nOFFSET 1;\r\n```\r\n\r\n## Extra info\r\nAdding `limit: 10` produces the correct query:\r\n```sql\r\nSELECT\r\n  \"authors\".*,\r\n  \"books\".\"id\"       AS \"books.id\",\r\n  \"books\".\"title\"    AS \"books.title\",\r\n  \"books\".\"authorId\" AS \"books.authorId\"\r\nFROM (SELECT\r\n        \"authors\".\"id\",\r\n        \"authors\".\"username\"\r\n      FROM \"authors\" AS \"authors\"\r\n      LIMIT 10\r\n      OFFSET 1) AS \"authors\" LEFT OUTER JOIN \"books\" AS \"books\" ON \"authors\".\"id\" = \"books\".\"authorId\";\r\n```\r\n\r\n__Dialect:__ postgres\r\n__Dialect version:__ both `pg` 6.4.2 and 7.4.1 tested\r\n__Database version:__ 9.6\r\n__Sequelize version:__ 4.37.6\r\n__Tested with latest release:__ Yes\r\n",
    "comments_url": "https://api.github.com/repos/sequelize/sequelize/issues/9330/comments",
    "author": "viliam-jobko",
    "comments": [
      {
        "user": "sushantdhiman",
        "created_at": "2018-04-20T03:28:08Z",
        "body": "Yes by default its getting rows using `LEFT OUTER JOIN` one by one\r\n\r\n```js\r\n[ { id: 1,\r\n    username: 'John',\r\n    'books.id': 1,\r\n    'books.title': 'Lorem Ipsum, vol. 1',\r\n    'books.authorId': 1 },\r\n  { id: 2,\r\n    username: 'William',\r\n    'books.id': 6,\r\n    'books.title': 'Lorem Ipsum, vol. 6',\r\n    'books.authorId': 2 },\r\n  { id: 2,\r\n    username: 'William',\r\n    'books.id': 5,\r\n    'books.title': 'Lorem Ipsum, vol. 5',\r\n    'books.authorId': 2 },\r\n  { id: 2,\r\n    username: 'William',\r\n    'books.id': 4,\r\n    'books.title': 'Lorem Ipsum, vol. 4',\r\n    'books.authorId': 2 },\r\n  { id: 2,\r\n    username: 'William',\r\n    'books.id': 3,\r\n    'books.title': 'Lorem Ipsum, vol. 3',\r\n    'books.authorId': 2 } ]\r\n\r\n```\r\n\r\nSo it only skips first row, technically correct but not what you need.\r\n\r\nYou can solve this by forcing sequelize to perform sub query. So it will get each author first then get their books\r\n\r\n```js\r\n  const results = await Author.findAll({\r\n    offset: 1,\r\n    include: Book,\r\n    subQuery: true,\r\n    logging: console.log\r\n  });\r\n\r\nExecuting (default): SELECT \"authors\".*, \"books\".\"id\" AS \"books.id\", \"books\".\"title\" AS \"books.title\", \"books\".\"authorId\" AS \"books.authorId\" FROM (SELECT \"authors\".\"id\", \"authors\".\"username\" FROM \"authors\" AS \"authors\" OFFSET 1) AS \"authors\" LEFT OUTER JOIN \"books\" AS \"books\" ON \"authors\".\"id\" = \"books\".\"authorId\";\r\n\r\n{ id: 2,\r\n  username: 'William',\r\n  books: \r\n   [ { id: 6, title: 'Lorem Ipsum, vol. 6', authorId: 2 },\r\n     { id: 5, title: 'Lorem Ipsum, vol. 5', authorId: 2 },\r\n     { id: 4, title: 'Lorem Ipsum, vol. 4', authorId: 2 },\r\n     { id: 3, title: 'Lorem Ipsum, vol. 3', authorId: 2 } ] }\r\n```"
      }
    ]
  },
  {
    "number": 9175,
    "title": "Hooks run after query is sent",
    "created_at": "2018-03-12T19:44:06Z",
    "closed_at": "2018-04-03T04:44:54Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/sequelize/sequelize/issues/9175",
    "body": "<!--\r\n\r\nPlease note this is an issue tracker, not a support forum.\r\nFor general questions, please use StackOverflow or Slack.\r\n\r\nFor bugs, please fill out the template below.\r\n\r\n-->\r\n\r\n## What are you doing?\r\n<!-- Post a minimal, self-contained code sample that reproduces the issue, including models and associations -->\r\n\r\n### Here is my User.js file:\r\n```js\r\nconst bcrypt = require('bcrypt-nodejs');\r\nconst crypto = require('crypto');\r\n\r\nmodule.exports = (sequelize, Sequelize) => {\r\n  const User = sequelize.define('User', {\r\n    id: {\r\n      autoIncrement: true,\r\n      primaryKey: true,\r\n      type: Sequelize.INTEGER\r\n    },\r\n    firstName: {\r\n      type: Sequelize.STRING,\r\n      notEmpty: true\r\n    },\r\n    lastName: {\r\n      type: Sequelize.STRING,\r\n      notEmpty: true\r\n    },\r\n    email: {\r\n      type: Sequelize.STRING,\r\n      validate: {\r\n        isEmail: true\r\n      }\r\n    },\r\n    password: {\r\n      type: Sequelize.STRING,\r\n      allowNull: false\r\n    },\r\n    passwordExpires: {\r\n      type: Sequelize.DATE\r\n    },\r\n    passwordResetToken: {\r\n      type: Sequelize.STRING\r\n    },\r\n    passwordResetExpires: {\r\n      type: Sequelize.DATE\r\n    },\r\n    lastLogin: {\r\n      type: Sequelize.DATE\r\n    },\r\n    status: {\r\n      type: Sequelize.BOOLEAN,\r\n      defaultValue: true\r\n    }\r\n  });\r\n\r\n  /**\r\n   * Password hash middleware.\r\n   */\r\n  User.beforeCreate((user) => {\r\n    bcrypt.genSalt(10, (err, salt) => {\r\n      if (err) throw (err);\r\n      bcrypt.hash(user.password, salt, null, (err, hash) => {\r\n        if (err) throw (err);\r\n        console.log('Something is wrong.');\r\n        user.password = hash;\r\n      });\r\n    });\r\n  });\r\n```\r\n### Here's my controller logic:\r\n```js\r\nexports.postSignup = (req, res, next) => {\r\n  req.assert('email', 'Email is not valid').isEmail();\r\n  req.assert('password', 'Password must be at least 4 characters long').len(4);\r\n  req.assert('confirmPassword', 'Passwords do not match').equals(req.body.password);\r\n  req.sanitize('email').normalizeEmail({ gmail_remove_dots: false });\r\n\r\n  const errors = req.validationErrors();\r\n\r\n  if (errors) {\r\n    req.flash('errors', errors);\r\n    return res.redirect('/signup');\r\n  }\r\n\r\n  User.findOne({ where: { email: req.body.email.toLowerCase() } }).then((existingUser) => {\r\n    if (existingUser) {\r\n      req.flash('errors', { msg: 'Account with that email address already exists.' });\r\n      return res.redirect('/signup');\r\n    }\r\n    const userData = {\r\n      email: req.body.email,\r\n      password: req.body.password\r\n    };\r\n    User.create(userData).then((user) => {\r\n      req.logIn(user, (err) => {\r\n        if (err) {\r\n          return next(err);\r\n        }\r\n        res.redirect('/');\r\n      });\r\n    }).catch(err => next(err));\r\n  }).catch(err => next(err));\r\n};\r\n```\r\n\r\n## What do you expect to happen?\r\nI expected the hook would run before the query is sent and the password be set to the hash in the database.\r\n\r\n## What is actually happening?\r\nQuery is run before the hook and password isn't set to hash in the database.\r\n```\r\nExecuting (default): INSERT INTO `Users` (`id`,`email`,`password`,`status`,`createdAt`,`updatedAt`) VALUES (DEFAULT,'test@gmail.ca','test',true,'2018-03-12 19:22:06','2018-03-12 19:22:06');\r\nSomething is wrong.\r\n```\r\nThe hash IS properly generated.\r\n\r\n\r\n__Dialect:__ mysql\r\n__Dialect version:__ 2.15.0\r\n__Database version:__ 5.7.19\r\n__Sequelize version:__ 4.36.0\r\n__Tested with latest release:__ Yes, 4.36.0\r\n",
    "comments_url": "https://api.github.com/repos/sequelize/sequelize/issues/9175/comments",
    "author": "jumpman255",
    "comments": [
      {
        "user": "sushantdhiman",
        "created_at": "2018-03-13T05:34:06Z",
        "body": "```js\r\nUser.beforeCreate((user) => {\r\n    bcrypt.genSalt(10, (err, salt) => {\r\n      if (err) throw (err);\r\n      bcrypt.hash(user.password, salt, null, (err, hash) => {\r\n        if (err) throw (err);\r\n        console.log('Something is wrong.');\r\n        user.password = hash;\r\n      });\r\n    });\r\n  });\r\n```\r\n\r\nYour hook is calling an async function without returning any promise. If you want sequelize to wait for hook's logic return a promise so we can wait for that promise to complete before sending query"
      }
    ]
  },
  {
    "number": 8949,
    "title": "Is there has a different bulk update API can do batch update?",
    "created_at": "2018-01-26T02:41:55Z",
    "closed_at": "2018-01-26T05:34:07Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/sequelize/sequelize/issues/8949",
    "body": "maybe It's different with the current `bulkUpdate` function.\r\nIt can update different field by different options.\r\nFor example:\r\n```javascript\r\nseqIntance.batchUpdate('database', [{\r\n     fileds: { name: 'cc', age: 14 },\r\n     where: { id: 12345 }\r\n}, {\r\n     fileds: {name: 'dd', age: 21},\r\n     where: { id: 56789 }\r\n}], options);\r\n```\r\nIt's there any API or function can do the batchUpdate's functional things ?",
    "comments_url": "https://api.github.com/repos/sequelize/sequelize/issues/8949/comments",
    "author": "clChenLiang",
    "comments": [
      {
        "user": "sushantdhiman",
        "created_at": "2018-01-26T05:34:07Z",
        "body": "Not that I know of"
      },
      {
        "user": "clChenLiang",
        "created_at": "2018-01-26T06:15:45Z",
        "body": "tks"
      }
    ]
  },
  {
    "number": 8900,
    "title": "problem with where clause in include.",
    "created_at": "2018-01-15T13:58:59Z",
    "closed_at": "2018-02-20T14:38:42Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/sequelize/sequelize/issues/8900",
    "body": "I have couple of includes in query builder:\r\n\r\n```\r\n\r\n....\r\nvar userMeta = {model: models.UserMeta, where: {}};\r\nvar specialization = {model: models.Specialization, required: false};\r\nf.include = [userMeta, specialization];\r\n```\r\n\r\nAnd final query looks like:\r\n```\r\nSELECT ...\r\nFROM \r\n(SELECT \"User\".\"id\", \"users\" AS \"User\"\r\n   INNER JOIN \"user_meta\" AS \"UserMetum\" ON \"User\".\"id\" = \"UserMetum\".\"user_id\"\r\n// how to add specialization join here\r\n   WHERE \r\n...\r\n   LIMIT '10'\r\n   OFFSET 0) AS \"User\"\r\nINNER JOIN (\"user_specializations\" AS \"Specializations.user_specializations\"\r\n            INNER JOIN \"specializations\" AS \"Specializations\" ON \"Specializations\".\"id\" = \"Specializations.user_specializations\".\"specialization_id\")\r\n```\r\nLooks like sequelize made some kind of optimization behind the scene. Now I want to add filter like:\r\n```\r\nif (filter.specializationId) {\r\n    f.where['$Specialization.id$'] = filter.specializationId;\r\n }\r\n```\r\nI got error: The \"Specialization\" table is not in the FROM clause",
    "comments_url": "https://api.github.com/repos/sequelize/sequelize/issues/8900/comments",
    "author": "zion03",
    "comments": [
      {
        "user": "sushantdhiman",
        "created_at": "2018-01-15T14:01:13Z",
        "body": "`Specialization` => `Specializations`?"
      },
      {
        "user": "zion03",
        "created_at": "2018-01-15T14:14:18Z",
        "body": "Thanks, was typo. Typo fixed with the same problem: The \"Specializations\" table is not in the FROM clause"
      },
      {
        "user": "zion03",
        "created_at": "2018-02-19T13:31:16Z",
        "body": "Any suggestions, I'm using `sequelize: 3.23.6`"
      }
    ]
  },
  {
    "number": 8883,
    "title": "Has database create hook?",
    "created_at": "2018-01-12T09:27:30Z",
    "closed_at": "2018-04-12T11:46:47Z",
    "labels": [
      "question",
      "stale"
    ],
    "url": "https://github.com/sequelize/sequelize/issues/8883",
    "body": "I want excute some code before database(sqlite) file created,but i can't find any way form document.\r\n\r\n__Dialect:__ sqlite \r\n__Dialect version:__ 3\r\n__Database version:__ 3\r\n__Sequelize version:__3.30.3\r\n__Tested with latest release:__ No (If yes, specify that version)\r\n\r\n",
    "comments_url": "https://api.github.com/repos/sequelize/sequelize/issues/8883/comments",
    "author": "keyiis",
    "comments": [
      {
        "user": "sushantdhiman",
        "created_at": "2018-01-12T09:35:00Z",
        "body": "You can try `beforeConnect / afterConnect` hook, but there is no specific hook for SQLite file creation"
      },
      {
        "user": "stale[bot]",
        "created_at": "2018-04-12T10:32:11Z",
        "body": "This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. If this is still an issue, just leave a comment 🙂\n"
      }
    ]
  },
  {
    "number": 8879,
    "title": "How to Count/Select in subqueries?",
    "created_at": "2018-01-11T21:44:00Z",
    "closed_at": "2018-10-24T15:50:08Z",
    "labels": [
      "question",
      "stale"
    ],
    "url": "https://github.com/sequelize/sequelize/issues/8879",
    "body": "<!--\r\n\r\nPlease note this is an issue tracker, not a support forum.\r\nFor general questions, please use StackOverflow or Slack.\r\n\r\nFor bugs, please fill out the template below.\r\n\r\n-->\r\n\r\n## What are you doing?\r\n<!-- Post a minimal, self-contained code sample that reproduces the issue, including models and associations -->\r\n\r\n```js\r\nreturn A.findAll({\r\n    attributes: ['id', 'attr1', 'attr2', [sequelize.fn('COUNT', '*'), 'attr3']],\r\n    include: [{\r\n       model: B,\r\n       attributes: [ ],\r\n       include: [{\r\n           model: C,\r\n           attributes: [ ]\r\n       }]\r\n    }]\r\n   });\r\n```\r\n\r\n## What do you expect to happen?\r\nFor this example, consider that there are:\r\n - 2 records of A\r\n - 5 records of B\r\n - 6 records of C\r\n\r\nSQL query:\r\n```sql\r\nSELECT A.`attr1`, A.`attr2`,\r\n  (SELECT COUNT(*) FROM B, C \r\n   WHERE B.id = C.bId AND B.aId = A.id) AS `attr3`\r\nFROM A;\r\n```\r\nJSON example (con):\r\n```json\r\n[\r\n  {\r\n    \"id\": 1,\r\n    \"attr1\": \"whatever\",\r\n    \"attr2\": \"whatever\",\r\n    \"attr3\": 4\r\n  },\r\n  {\r\n    \"id\": 2,\r\n    \"attr1\": \"whatever\",\r\n    \"attr2\": \"whatever\",\r\n    \"attr3\": 2\r\n  }\r\n]\r\n\r\n```\r\n\r\n## What is actually happening?\r\nSQL query:\r\n```sql\r\nSELECT A.attr1, A.attr2, COUNT('*') AS attr3 FROM A \r\nLEFT OUTER JOIN B ON A.id = B.aId \r\nLEFT OUTER JOIN C ON B.id = C.bId;\r\n```\r\nJSON example:\r\n```json\r\n[\r\n  {\r\n    \"id\": 2,\r\n    \"attr1\": \"whatever\",\r\n    \"attr2\": \"whatever\",\r\n    \"attr3\": 6\r\n  }\r\n]\r\n```\r\n\r\n__Dialect:__ mysql / postgres / **sqlite** / mssql / any\r\n__Dialect version:__ sqlite\r\n__Database version:__ sqlite3.1.13\r\n__Sequelize version:__ sequelize 4.28.1 and sequelize-cli 3.2.0\r\n__Tested with latest release:__ Yes",
    "comments_url": "https://api.github.com/repos/sequelize/sequelize/issues/8879/comments",
    "author": "erijonhson",
    "comments": [
      {
        "user": "erijonhson",
        "created_at": "2018-02-06T20:37:04Z",
        "body": "Any ideias?"
      },
      {
        "user": "stale[bot]",
        "created_at": "2018-05-07T21:34:07Z",
        "body": "This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. If this is still an issue, just leave a comment 🙂\n"
      },
      {
        "user": "erijonhson",
        "created_at": "2018-05-07T23:05:47Z",
        "body": "Someone?"
      },
      {
        "user": "sushantdhiman",
        "created_at": "2018-05-08T04:17:21Z",
        "body": "You need group by `id`"
      },
      {
        "user": "Paxa",
        "created_at": "2018-07-19T02:24:27Z",
        "body": "You can also do it with subquery:\r\n```js\r\nA.findAll({\r\n  attributes: { include: [\r\n    [\r\n      sequelize.literal('SELECT COUNT(*) FROM B, C WHERE B.id = C.bId AND B.aId = \"A\".id'),\r\n      'attr3'\r\n    ],\r\n  ]}\r\n});\r\n```"
      },
      {
        "user": "erijonhson",
        "created_at": "2018-07-19T14:26:19Z",
        "body": "I fixed it with a native subquery, but wanna do only with sequelize. When i have time, will try group by id, like @sushantdhiman recommends. Thank you very much guys, see you soon o/'"
      },
      {
        "user": "stale[bot]",
        "created_at": "2018-10-17T15:01:37Z",
        "body": "This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. If this is still an issue, just leave a comment 🙂\n"
      },
      {
        "user": "adamleemiller",
        "created_at": "2021-08-22T09:39:46Z",
        "body": "> You can also do it with subquery:\r\n> \r\n> ```js\r\n> A.findAll({\r\n>   attributes: { include: [\r\n>     [\r\n>       sequelize.literal('SELECT COUNT(*) FROM B, C WHERE B.id = C.bId AND B.aId = \"A\".id'),\r\n>       'attr3'\r\n>     ],\r\n>   ]}\r\n> });\r\n> ```\r\n\r\nThis no longer seems to work.\r\n\r\n```\r\nmodels.organizations.findAll({\r\n  attributes: {\r\n    include: [\r\n      [\r\n        sequelize.literal('SELECT COUNT(*) FROM farms'), 'totalFarms'\r\n      ]\r\n    ]\r\n  }\r\n}).then(data => {\r\n  resolve(data)\r\n}).catch(error => {\r\n  reject(new Error(error))\r\n})\r\n```\r\n\r\nBuilds an invalid query:\r\n\r\n```\r\n'SELECT `id`, `uuid`, `salesUserId`, `name`, `isActive`, `isDeleted`, `createdAt`, `updatedAt`, SELECT COUNT(*) FROM farms AS `totalFarms` FROM `organizations` AS `organizations`;\r\n```\r\n\r\nError:\r\n\r\n```\r\nYou have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'SELECT COUNT(*) FROM farms AS `totalFarms` FROM `organizations` AS `organization' at line 1\r\n```"
      }
    ]
  },
  {
    "number": 8873,
    "title": "renameColumn async don't work on my migration flow (due to async i think)",
    "created_at": "2018-01-11T02:18:00Z",
    "closed_at": "2018-01-20T06:56:24Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/sequelize/sequelize/issues/8873",
    "body": "## What are you doing?\r\n\r\non first migration i rename the column, then i change the type on the following one\r\nmigration 1\r\n```js\r\nup: (queryInterface, Sequelize) => {\r\n    return [\r\n      queryInterface.renameColumn('UserReferrals', 'percentage', 'percReward')\r\n    ];\r\n  },\r\n```\r\nmigration 2\r\n```js\r\nup: (queryInterface, Sequelize) => {\r\n    return queryInterface.changeColumn('UserReferrals', 'percReward', {\r\n      allowNull: false,\r\n      type: Sequelize.DOUBLE\r\n    });\r\n  },\r\n```\r\n\r\n## What do you expect to happen?\r\nrename and change type\r\n\r\n## What is actually happening?\r\ni usually have this error when sequelize executes the second migration:\r\n\r\n```\r\nUnhandled rejection Error: Table UserReferrals doesn't have the column percReward\r\n```\r\n__Dialect:__ postgres\r\n__Sequelize version:__ 4.28.6",
    "comments_url": "https://api.github.com/repos/sequelize/sequelize/issues/8873/comments",
    "author": "LuizAsFight",
    "comments": [
      {
        "user": "LuizAsFight",
        "created_at": "2018-01-11T02:32:31Z",
        "body": "Is it really async? i workaround with this and i'm not having the error anymore\r\n```\r\nqueryInterface.sequelize.query(`alter table \"UserReferrals\" rename column \"percentage\" to \"percReward\";`),\r\n```\r\n\r\n\r\n"
      },
      {
        "user": "sushantdhiman",
        "created_at": "2018-01-11T04:30:50Z",
        "body": "It works properly for me\r\n\r\n```js\r\n  await Test.sync({ force: true });\r\n\r\n  await sequelize.queryInterface.renameColumn('Tests', 'a', 'percReward');\r\n\r\n  await sequelize.queryInterface.changeColumn('Tests', 'percReward', {\r\n    allowNull: false,\r\n    type: Sequelize.DOUBLE\r\n  });\r\n```\r\n\r\n```sql\r\nExecuting (default): DROP TABLE IF EXISTS \"Tests\" CASCADE;\r\nExecuting (default): CREATE TABLE IF NOT EXISTS \"Tests\" (\"id\"   SERIAL , \"a\" INTEGER, \"b\" INTEGER, \"c\" INTEGER, \"createdAt\" TIMESTAMP WITH TIME ZONE NOT NULL, \"updatedAt\" TIMESTAMP WITH TIME ZONE NOT NULL, PRIMARY KEY (\"id\"));\r\nExecuting (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'Tests' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;\r\nExecuting (default): SELECT pk.constraint_type as \"Constraint\", c.column_name as \"Field\", c.column_default as \"Default\", c.is_nullable as \"Null\", (CASE WHEN c.udt_name = 'hstore' THEN c.udt_name ELSE c.data_type END) || (CASE WHEN c.character_maximum_length IS NOT NULL THEN '(' || c.character_maximum_length || ')' ELSE '' END) as \"Type\", (SELECT array_agg(e.enumlabel) FROM pg_catalog.pg_type t JOIN pg_catalog.pg_enum e ON t.oid=e.enumtypid WHERE t.typname=c.udt_name) AS \"special\" FROM information_schema.columns c LEFT JOIN (SELECT tc.table_schema, tc.table_name, cu.column_name, tc.constraint_type FROM information_schema.TABLE_CONSTRAINTS tc JOIN information_schema.KEY_COLUMN_USAGE  cu ON tc.table_schema=cu.table_schema and tc.table_name=cu.table_name and tc.constraint_name=cu.constraint_name and tc.constraint_type='PRIMARY KEY') pk ON pk.table_schema=c.table_schema AND pk.table_name=c.table_name AND pk.column_name=c.column_name WHERE c.table_name = 'Tests' AND c.table_schema = 'public'\r\nExecuting (default): ALTER TABLE \"Tests\" RENAME COLUMN \"a\" TO \"percReward\";\r\nExecuting (default): ALTER TABLE \"Tests\" ALTER COLUMN \"percReward\" SET NOT NULL;ALTER TABLE \"Tests\" ALTER COLUMN \"percReward\" DROP DEFAULT;ALTER TABLE \"Tests\" ALTER COLUMN \"percReward\" TYPE DOUBLE PRECISION;\r\n\r\n```\r\n\r\nWhy you are returning an array in first migration ?"
      },
      {
        "user": "LuizAsFight",
        "created_at": "2018-01-17T04:34:17Z",
        "body": "i never had this error before, but I have something like 50 migrations and I started a new DB from zero to run my api on production. So I runned db:migrate to execute all migrations.. then i got the error and runned db:migrate:undo:all\r\nAfter this if you still db:migrate and db:migrate:undo:all it breaks a lot of times.\r\n\r\nThen I did the previously mentioned workaround and started db:migrate and db:migrate:undo:all again. The results were good, but still less often breaking.\r\n\r\nMy thoughts are about async problem but I'm not sure about it.\r\n\r\nPs. I only have the problem with the renameColumn operation"
      },
      {
        "user": "sushantdhiman",
        "created_at": "2018-01-20T06:56:24Z",
        "body": "I am sure you are missing return in one of your migrations somewhere, otherwise as shown above it works."
      },
      {
        "user": "LuizAsFight",
        "created_at": "2018-01-20T07:35:45Z",
        "body": "hahaha thanks for your answer, but i'm pretty sure i didn't miss not a single return\r\n\r\nbut no probs i'll just keep using the workaround, renameColumn is not safe"
      }
    ]
  },
  {
    "number": 8856,
    "title": "add support of || (double-pipe) concat operator",
    "created_at": "2018-01-08T10:11:05Z",
    "closed_at": "2018-01-11T04:54:10Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/sequelize/sequelize/issues/8856",
    "body": "<!--\r\n\r\nPlease note this is an issue tracker, not a support forum.\r\nFor general questions, please use StackOverflow or Slack.\r\n\r\nFor bugs, please fill out the template below.\r\n\r\n-->\r\n\r\n## What are you doing?\r\n<!-- Post a minimal, self-contained code sample that reproduces the issue, including models and associations -->\r\n\r\nI try to concat (`||`) binary data to a field using `updateQuery`.\r\n\r\n```js\r\nvar query = db.dialect.QueryGenerator.updateQuery('myTable', { data: db.literal('data || $data') }, { id:1 } ) )\r\n...\r\ndb.query(query, {\r\n  type: db.QueryTypes.UPDATE,\r\n  bind: {\r\n    data: myBuffer\r\n  }\r\n});\r\n```\r\nI would like to use `db.col()` and `db.literal()` in my previous expression, but the `||` operator is not available:\r\n`{ data: db.concat(db.col('data'), db.literal('$data')) }`\r\n\r\n\r\n__Dialect:__  any\r\n__Dialect version:__ latest\r\n__Database version:__ latest\r\n__Sequelize version:__ latest\r\n__Tested with latest release:__ No (If yes, specify that version)\r\n\r\n\r\n**Note :** _Your issue may be ignored OR closed by maintainers if it's not tested against latest version OR does not follow issue template._\r\n",
    "comments_url": "https://api.github.com/repos/sequelize/sequelize/issues/8856/comments",
    "author": "FranckFreiburger",
    "comments": [
      {
        "user": "sushantdhiman",
        "created_at": "2018-01-11T04:54:10Z",
        "body": "You can use `sequelize.fn` \r\n\r\n```js\r\n  await Test.sync({ force: true });\r\n\r\n  await Test.create({ a: 'gdsds' });\r\n\r\n  var query = sequelize.dialect.QueryGenerator.updateQuery('Tests', {\r\n    a: sequelize.fn('CONCAT', sequelize.col('a'), sequelize.literal('$a::text'))\r\n  });\r\n\r\n  await sequelize.query(query, {\r\n    type: sequelize.QueryTypes.UPDATE,\r\n    bind: {\r\n      a: 'ABC'\r\n    }\r\n  });\r\n\r\n  console.log(await Test.findAll({ raw: true }));\r\n```\r\n\r\n```sql\r\nExecuting (default): DROP TABLE IF EXISTS \"Tests\" CASCADE;\r\nExecuting (default): CREATE TABLE IF NOT EXISTS \"Tests\" (\"id\"   SERIAL , \"a\" VARCHAR(255), \"createdAt\" TIMESTAMP WITH TIME ZONE NOT NULL, \"updatedAt\" TIMESTAMP WITH TIME ZONE NOT NULL, PRIMARY KEY (\"id\"));\r\nExecuting (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'Tests' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;\r\nExecuting (default): INSERT INTO \"Tests\" (\"id\",\"a\",\"createdAt\",\"updatedAt\") VALUES (DEFAULT,'gdsds','2018-01-11 04:52:59.466 +00:00','2018-01-11 04:52:59.466 +00:00') RETURNING *;\r\nExecuting (default): UPDATE \"Tests\" SET \"a\"=CONCAT(\"a\", $1::text)\r\nExecuting (default): SELECT \"id\", \"a\", \"createdAt\", \"updatedAt\" FROM \"Tests\" AS \"Test\";\r\n[ { id: 1,\r\n    a: 'gdsdsABC',\r\n    createdAt: 2018-01-11T04:52:59.466Z,\r\n    updatedAt: 2018-01-11T04:52:59.466Z } ]\r\n\r\n```"
      },
      {
        "user": "FranckFreiburger",
        "created_at": "2018-01-11T07:40:29Z",
        "body": "Thanks for the reply.\r\nUsing CONCAT is the first alternative I thought of.\r\nI use pgsql and I cannot find a clear information in the doc to know if CONCAT supports binary data (operates on BYTEA), however, `||` clearly supports BYTEA concatenation.\r\n\r\n"
      },
      {
        "user": "sushantdhiman",
        "created_at": "2018-01-11T07:44:16Z",
        "body": "Can you try and see if `CONCAT` works on binary data, possibly typecast with `bytea`"
      },
      {
        "user": "FranckFreiburger",
        "created_at": "2018-01-11T08:09:19Z",
        "body": "without casting:\r\nsql: `UPDATE \"images\" SET \"data\"=CONCAT(\"data\", $1) WHERE \"id\" = 1`\r\nerr: `SequelizeDatabaseError: column \"data\" is of type bytea but expression is of type text:`\r\n"
      },
      {
        "user": "FranckFreiburger",
        "created_at": "2018-01-11T08:14:21Z",
        "body": "with casting:\r\nsql: `UPDATE \"images\" SET \"data\"=CAST(CONCAT(CAST(\"data\" AS TEXT), $1::text) AS BYTEA) WHERE \"id\" = 1`\r\nerr: `invalid byte sequence for encoding \"UTF8\": 0x9`\r\n"
      },
      {
        "user": "sushantdhiman",
        "created_at": "2018-01-11T08:34:51Z",
        "body": "Just using `literal` will work\r\n\r\n```js\r\n    await Test.sync({ force: true });\r\n\r\n    await Test.create({ a: new Buffer('thing') });\r\n\r\n    var query = sequelize.dialect.QueryGenerator.updateQuery('Tests', {\r\n      a: sequelize.literal('$a || a')\r\n    });\r\n\r\n    await sequelize.query(query, {\r\n      type: sequelize.QueryTypes.UPDATE,\r\n      bind: {\r\n        a: 'some'\r\n      }\r\n    });\r\n\r\n    const result = await Test.findAll();\r\n\r\n    console.log(result[0].get('a').toString('utf8'));\r\n```\r\n\r\n```sql\r\nExecuting (default): DROP TABLE IF EXISTS \"Tests\" CASCADE;\r\nExecuting (default): CREATE TABLE IF NOT EXISTS \"Tests\" (\"id\"   SERIAL , \"a\" BYTEA, \"createdAt\" TIMESTAMP WITH TIME ZONE NOT NULL, \"updatedAt\" TIMESTAMP WITH TIME ZONE NOT NULL, PRIMARY KEY (\"id\"));\r\nExecuting (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'Tests' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;\r\nExecuting (default): INSERT INTO \"Tests\" (\"id\",\"a\",\"createdAt\",\"updatedAt\") VALUES (DEFAULT,E'\\\\x7468696e67','2018-01-11 08:33:37.006 +00:00','2018-01-11 08:33:37.006 +00:00') RETURNING *;\r\nExecuting (default): UPDATE \"Tests\" SET \"a\"=$1 || a\r\nExecuting (default): SELECT \"id\", \"a\", \"createdAt\", \"updatedAt\" FROM \"Tests\" AS \"Test\";\r\nsomething\r\n```"
      },
      {
        "user": "FranckFreiburger",
        "created_at": "2018-01-11T08:47:07Z",
        "body": "I agree.\r\nThe drawback of literal is that we lost sequelize tools like column name escaping, etc..."
      },
      {
        "user": "sushantdhiman",
        "created_at": "2018-01-11T08:54:09Z",
        "body": "If you are binding variables in query, I see no problem with that if query is correctly generated"
      },
      {
        "user": "FranckFreiburger",
        "created_at": "2018-01-11T08:56:27Z",
        "body": "It's ok for me, thanks."
      }
    ]
  },
  {
    "number": 8849,
    "title": "Bug at Sum and Count on associated tables, SUM function iterates as many as the other SUM function iterates works on a different table.",
    "created_at": "2018-01-05T23:49:42Z",
    "closed_at": "2018-04-18T05:58:28Z",
    "labels": [
      "question",
      "stale"
    ],
    "url": "https://github.com/sequelize/sequelize/issues/8849",
    "body": "<!--\r\n\r\nPlease note this is an issue tracker, not a support forum.\r\nFor general questions, please use StackOverflow or Slack.\r\n\r\nFor bugs, please fill out the template below.\r\n\r\n-->\r\n\r\nHere my associations these table.\r\n\r\ndb.Receipts.hasMany(db.ReceiptPayments, { foreignKey: 'receipt_id' });\r\ndb.ReceiptPayments.belongsTo(db.Receipts, { foreignKey: 'receipt_id' });\r\n\r\n// One to Many Relationship between Receipt and its fees!\r\ndb.Receipts.hasMany(db.ReceiptFees, { foreignKey: 'receipt_id' });\r\ndb.ReceiptFees.belongsTo(db.Receipts, {  foreignKey: 'receipt_id' });\r\n\r\nI have put two of these associations since I do have bug about these.\r\n\r\nThis is my query at below. What I want to is that I try to sum the total of payments done onto the receipt and the fees that had been created for that receipt.\r\n\r\n`\r\ndb.Receipts.findAll({\r\n    where: {\r\n      created_at : {\r\n        $gte: moment().startOf('day').toDate(),\r\n        $lte: moment().endOf('day').toDate()\r\n      },\r\n    },\r\n    attributes : [\r\n\r\n      [ db.sequelize.fn('SUM',db.sequelize.col('ReceiptPayments.receivedPayment')), 'totalPayment'],\r\n\r\n      [ db.sequelize.fn('SUM',db.sequelize.col('ReceiptFees.fee')), 'totalFee'],\r\n\r\n    ],\r\n    group : ['Receipts.receipt_id','Plate.plate_id','Checkin.id','Washing.id','Vale.id','Wash.id','Parking.id','Checkout.id',],\r\n    order: [['created_at', 'DESC']],\r\n    include: [\r\n      { model : db.ReceiptPayments, attributes :[] },\r\n      { model : db.ReceiptFees, attributes : [ ] },\r\n      { association : db.Receipts.associations.Plate, attributes : ['plate'] },\r\n      { association : db.Receipts.associations.Checkin },\r\n      { association : db.Receipts.associations.Washing },\r\n      { association : db.Receipts.associations.Vale },\r\n      { association : db.Receipts.associations.Wash },\r\n      { association : db.Receipts.associations.Parking },\r\n      { association : db.Receipts.associations.Checkout },\r\n      ],\r\n  })\r\n`\r\n\r\nWhat the issue I am having is that i have 3 ReceiptPayments records associated to the Receipt. The SUM functions works three times as expected and finds the SUM but however, even though there were only 1 ReceiptFee associated to the table, it works three times swell and sums the same record three times.\r\n\r\nWhat my exception is that the sum function should have three times for ReceiptPayments table as I have 3 ReceiptPayment records associated to the Receipt record and the sum function should have worked only one time as there are only one ReceiptFee record associated to the Receipt record.\r\n\r\nCan you please help me ?\r\n\r\nThe versions of packages I have been using :\r\n\r\n\"pg\": \"^7.4.0\",\r\n\"pg-hstore\": \"^2.3.2\",\r\n \"sequelize\": \"^4.22.8\"\r\n\r\n\r\n## What are you doing?\r\n<!-- Post a minimal, self-contained code sample that reproduces the issue, including models and associations -->\r\n\r\n```js\r\n// code here\r\n```\r\n\r\n## What do you expect to happen?\r\n_I wanted Foo!_\r\n\r\n## What is actually happening?\r\n_But the output was bar!_\r\n\r\n_Output, either JSON or SQL_\r\n\r\n\r\n__Dialect:__ mysql / postgres / sqlite / mssql / any\r\n__Dialect version:__ XXX\r\n__Database version:__ XXX\r\n__Sequelize version:__ XXX\r\n__Tested with latest release:__ No (If yes, specify that version)\r\n\r\n\r\n**Note :** _Your issue may be ignored OR closed by maintainers if it's not tested against latest version OR does not follow issue template._\r\n\r\n  ",
    "comments_url": "https://api.github.com/repos/sequelize/sequelize/issues/8849/comments",
    "author": "ozer",
    "comments": [
      {
        "user": "stale[bot]",
        "created_at": "2018-04-11T05:44:01Z",
        "body": "This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. If this is still an issue, just leave a comment 🙂\n"
      }
    ]
  },
  {
    "number": 8836,
    "title": "can sequelize create union all query like below?",
    "created_at": "2018-01-04T10:20:03Z",
    "closed_at": "2018-01-11T05:10:22Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/sequelize/sequelize/issues/8836",
    "body": "```\r\nselect SUM(price) as \"SUM(price)\", type, 'a' as \"sub\"\r\nfrom sale_record\r\nwhere price between 200 and 300 and profit between 0 and 100\r\ngroup by type\r\nunion all\r\nselect SUM(price) as \"SUM(price)\", type, 'b' as \"sub\"\r\nfrom sale_record\r\nwhere price between 300 and 400 and profit between 100 and 200\r\ngroup by type\r\nunion all\r\nselect SUM(price) as \"SUM(price)\", type, 'c' as \"sub\"\r\nfrom sale_record\r\nwhere price between 300 and 400 and profit between 200 and 300\r\ngroup by type\r\n```\r\n\r\nI've found groupedLimit property in findAll api, but no detail information for it. After looked test cases, I found it only support only one field in groupedLimit.on in test cases.",
    "comments_url": "https://api.github.com/repos/sequelize/sequelize/issues/8836/comments",
    "author": "ruiann",
    "comments": [
      {
        "user": "sushantdhiman",
        "created_at": "2018-01-11T05:10:22Z",
        "body": "You can generate these statements using `selectQuery` then join them with `union all`\r\n\r\n```js\r\nvar query = sequelize.dialect.QueryGenerator.selectQuery('sale_record', {\r\n    attributes: [\r\n      sequelize.fn('SUM', sequelize.col('price')),\r\n      'type',\r\n      ['a', 'sub']\r\n    ],\r\n    where: {\r\n      price: {\r\n        [Op.between]: [200 , 300]\r\n      },\r\n      profit: {\r\n        [Op.between]: [0, 300]\r\n      }\r\n    },\r\n    group: ['type']\r\n  });\r\n```\r\n\r\n```sql\r\nSELECT SUM(\"price\"), \"type\", \"a\" AS \"sub\" FROM \"sale_record\" WHERE \"sale_record\".\"price\" BETWEEN 200 AND 300 AND \"sale_record\".\"profit\" BETWEEN 0 AND 300 GROUP BY \"type\";\r\n```\r\n\r\nBeyond that there is no support for generating unions"
      }
    ]
  },
  {
    "number": 8827,
    "title": "Can sequelize.config be considered read-only public API?",
    "created_at": "2017-12-31T20:12:18Z",
    "closed_at": "2018-01-11T05:16:57Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/sequelize/sequelize/issues/8827",
    "body": "I'm finding it useful to extract the database connection params from it, which don't seem to be available anywhere else on a Sequelize instance.",
    "comments_url": "https://api.github.com/repos/sequelize/sequelize/issues/8827/comments",
    "author": "jedwards1211",
    "comments": [
      {
        "user": "sushantdhiman",
        "created_at": "2018-01-11T05:16:57Z",
        "body": "I wont consider that as public API but I dont see it changing very often in same major version. So go ahead and use those parameters but make sure you add some tests to protect against unintended changes in `sequelize.confg`"
      }
    ]
  },
  {
    "number": 8707,
    "title": "force sync but with exception for one model/ datatable",
    "created_at": "2017-11-28T16:19:08Z",
    "closed_at": "2017-11-28T17:00:58Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/sequelize/sequelize/issues/8707",
    "body": "Is it possible to force sync but with exception for one model/ datatable?",
    "comments_url": "https://api.github.com/repos/sequelize/sequelize/issues/8707/comments",
    "author": "musicformellons",
    "comments": [
      {
        "user": "sushantdhiman",
        "created_at": "2017-11-28T17:02:04Z",
        "body": "You have to map all models you want to sync on may be using Promise.all and call sync on them. There is no way to skip sync when using `sequelize.sync`"
      }
    ]
  },
  {
    "number": 8688,
    "title": "Weird interaction between transaction and connection-pool ",
    "created_at": "2017-11-24T13:29:21Z",
    "closed_at": "2017-12-03T09:26:48Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/sequelize/sequelize/issues/8688",
    "body": "## What are you doing?\r\nWe're seeing some weird deadlock-issue in the cross section between transactions and the connection pool. What it seems like is that the client releases the connection back to the pool between each query within a transaction - which means that the pool can be exhausted between two (or more - easiest to replicate with two) transactions both in the middle of their work waiting for a new connection that never arrives. \r\n\r\nIt seems weird that it'd release the connection back to the pool during an actual transaction - AFAIK that would result in a lot of weird behavior as well, but we're fairly certain we've managed to isolate it down to that. It doesn't seem to be dependent on any specific queries being run or anything - just about any query that results in a lock within the transaction and running some concurrent transactions will yield it. \r\n\r\n## What do you expect to happen?\r\nI expected each transaction to keep its already allocated connection for the lifetime of the transaction to ensure that the pool is not exhausted mid-transaction and mid-lock.\r\n\r\n## What is actually happening?\r\nThe system deadlocks with transactions waiting for each other on separate rows but with no connections to spare.\r\n\r\n_Output, either JSON or SQL_\r\n\r\n\r\n__Dialect:__ postgres\r\n__Dialect version:__ ?\r\n__Database version:__ 9.6.1\r\n__Sequelize version:__ 3.30.3\r\n__Tested with master branch:__ No, due to major syntax changes - if this is fixed in master, I'd be more than happy to rewrite our stuff if that's expected to fix this",
    "comments_url": "https://api.github.com/repos/sequelize/sequelize/issues/8688/comments",
    "author": "buffpojken",
    "comments": [
      {
        "user": "sushantdhiman",
        "created_at": "2017-12-03T09:26:48Z",
        "body": "I was testing some other issue but remembered this one asked similar question :)\r\n\r\n```js\r\nconst Pizza = sequelize.define('pizza', {\r\n  name: Sequelize.STRING\r\n});\r\n\r\nconst Topping = sequelize.define('topping', {\r\n  name: Sequelize.STRING\r\n});\r\n\r\nPizza.hasMany(Topping, {\r\n  foreignKey: 'pizza_id'\r\n});\r\n\r\nsequelize\r\n  .sync({ force: true })\r\n  .then(() => Pizza.bulkCreate([\r\n    { name: 'Tropical' },\r\n    { name: 'Amazon' }\r\n  ]))\r\n  .then(() => Topping.bulkCreate([\r\n    { name: 'Olives', pizza_id: 1 },\r\n    { name: 'Amber', pizza_id: 2 }\r\n  ]))\r\n  .then(() => {\r\n    return Sequelize.Promise.join(\r\n      sequelize.transaction(transaction => {\r\n        return Topping\r\n          .destroy({where: { pizza_id: 1 }, transaction})\r\n          .then(() => {\r\n            return Pizza.destroy({\r\n              where: {id: 1},\r\n              transaction\r\n            });\r\n          });\r\n      }).then(() => console.log('Pizza 1 removed')),\r\n      sequelize.transaction(transaction => {\r\n        return Topping\r\n          .destroy({where: { pizza_id: 2 }, transaction})\r\n          .then(() => {\r\n            return Pizza.destroy({\r\n              where: {id: 2},\r\n              transaction\r\n            });\r\n          });\r\n      }).then(() => console.log('Pizza 2 removed'))\r\n    ).catch(err => console.log(err));\r\n  });\r\n```\r\n\r\n```bash\r\n  sequelize:pool connection acquired +4ms\r\n  sequelize:sql:pg executing(53a02370-c93d-4471-9d4b-c80444fd5a9a) : START TRANSACTION; +5ms\r\n  sequelize:sql:pg executed(53a02370-c93d-4471-9d4b-c80444fd5a9a) : START TRANSACTION; +1ms\r\n  sequelize:sql:pg executing(53a02370-c93d-4471-9d4b-c80444fd5a9a) : DELETE FROM \"toppings\" WHERE \"pizza_id\" = 1 +7ms\r\n  sequelize:sql:pg executed(53a02370-c93d-4471-9d4b-c80444fd5a9a) : DELETE FROM \"toppings\" WHERE \"pizza_id\" = 1 +1ms\r\n  sequelize:sql:pg executing(53a02370-c93d-4471-9d4b-c80444fd5a9a) : DELETE FROM \"pizzas\" WHERE \"id\" = 1 +2ms\r\n  sequelize:connection:pg connection acquired +119ms\r\n  sequelize:sql:pg executed(53a02370-c93d-4471-9d4b-c80444fd5a9a) : DELETE FROM \"pizzas\" WHERE \"id\" = 1 +1ms\r\n  sequelize:sql:pg executing(53a02370-c93d-4471-9d4b-c80444fd5a9a) : COMMIT; +2ms\r\n  sequelize:pool connection acquired +16ms\r\n  sequelize:sql:pg executing(37d790eb-18ed-4aa8-a41a-fa640c868298) : START TRANSACTION; +1ms\r\n  sequelize:sql:pg executed(37d790eb-18ed-4aa8-a41a-fa640c868298) : START TRANSACTION; +1ms\r\n  sequelize:sql:pg executing(37d790eb-18ed-4aa8-a41a-fa640c868298) : DELETE FROM \"toppings\" WHERE \"pizza_id\" = 2 +2ms\r\n  sequelize:sql:pg executed(53a02370-c93d-4471-9d4b-c80444fd5a9a) : COMMIT; +1ms\r\n  sequelize:pool connection released +4ms\r\nPizza 1 removed\r\n  sequelize:sql:pg executed(37d790eb-18ed-4aa8-a41a-fa640c868298) : DELETE FROM \"toppings\" WHERE \"pizza_id\" = 2 +1ms\r\n  sequelize:sql:pg executing(37d790eb-18ed-4aa8-a41a-fa640c868298) : DELETE FROM \"pizzas\" WHERE \"id\" = 2 +1ms\r\n  sequelize:sql:pg executed(37d790eb-18ed-4aa8-a41a-fa640c868298) : DELETE FROM \"pizzas\" WHERE \"id\" = 2 +0ms\r\n  sequelize:sql:pg executing(37d790eb-18ed-4aa8-a41a-fa640c868298) : COMMIT; +2ms\r\n  sequelize:sql:pg executed(37d790eb-18ed-4aa8-a41a-fa640c868298) : COMMIT; +3ms\r\n  sequelize:pool connection released +7ms\r\nPizza 2 removed\r\n  sequelize:connection:pg connection timeout +10s\r\n  sequelize:pool connection destroy +10s\r\n  sequelize:pool connection destroy +10s\r\n  sequelize:connection:pg connection timeout +10s\r\n\r\n```\r\n\r\nAs you can notice in log, when two transactions are running in parallel they will use their own connection and wont release it in midway. Which I think solves your issue.\r\n\r\nTested this again current master (~~ v.4.25.0)"
      }
    ]
  },
  {
    "number": 8672,
    "title": "stubbing a 'ER_DUP_ENTRY' Error ?",
    "created_at": "2017-11-21T15:55:01Z",
    "closed_at": "2017-11-28T16:44:20Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/sequelize/sequelize/issues/8672",
    "body": "\r\n\r\nHi,\r\n\r\nIm writing a unit test here which passes fine - I stub out providerRequest.create method which \r\nsimulates a duplicate entry :\r\n\r\n```\r\ntest.serial('markPubSubSubscriberPending - already pending', t => {\r\n  sinon.stub(providerRequest, 'create').callsFake(function (obj) {\r\n    return new Promise((resolve, reject) => reject({original: {code: 'ER_DUP_ENTRY'}}))\r\n  })\r\n\r\n  return pubsub.markPubSubSubscriberPending('123-456-789', '123-456-789').catch((err) => {\r\n    t.is(err.message === 'ER_DUP_ENTRY', true)\r\n    t.is(providerRequest.create.calledOnce, true)\r\n    providerRequest.create.restore()\r\n  })\r\n})\r\n```\r\n\r\nhowever when I run my standardjs code linter/formatter I get the following:\r\n\r\n```\r\n Expected the Promise rejection reason to be an Error.\r\n```\r\n\r\n\r\nhow can I create an Error obj in the form\r\n\r\n```\r\n{original: {code: 'ER_DUP_ENTRY'}}\r\n```",
    "comments_url": "https://api.github.com/repos/sequelize/sequelize/issues/8672/comments",
    "author": "walshe",
    "comments": [
      {
        "user": "sushantdhiman",
        "created_at": "2017-11-23T04:52:39Z",
        "body": "This should work\r\n\r\n```\r\nnew sequelize.DatabaseError({\r\n  code: 'ER_DUP_ENTRY'\r\n});\r\n```"
      }
    ]
  },
  {
    "number": 8642,
    "title": "sequelize validator error",
    "created_at": "2017-11-16T12:05:28Z",
    "closed_at": "2017-11-23T05:07:42Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/sequelize/sequelize/issues/8642",
    "body": "<!--\r\n\r\nPlease note this is an issue tracker, not a support forum.\r\nFor general questions, please use StackOverflow or Slack.\r\n\r\nFor bugs, please fill out the template below.\r\n\r\n-->\r\n\r\n## What are you doing?\r\n<!-- Post a minimal, self-contained code sample that reproduces the issue, including models and associations -->\r\nI was changing string based operators into symbol based operators. But one of them caused a problem.\r\n```js\r\n//  model\r\nconst users = sequelize.define('users', {\r\n\temail: {\r\n\t\ttype: DataTypes.STRING({ length: 255 }),\r\n\t\tallowNull: true,\r\n\t\tvalidate: { isEmail: true }\r\n\t},\r\n//   ....\r\n\r\n//  actual querybuilder\r\n return db.mySequel.transaction(t => {\r\n        return db.users.findOrCreate({\r\n            where: { email: { [Op.eq]: p_email} },\r\n            defaults: {\r\n                password: p_password,\r\n                username: p_username\r\n            },\r\n            transaction: t\r\n        }).spread((rs, created) => {\r\n            if (created == false) apiError(\"10005\");\r\n            return db.user_has_musician_type.bulkCreate([\r\n                {\r\n                    user_id: rs.id,\r\n                    musician_type: 'G',\r\n                    musician_type_id: p_genre\r\n                },\r\n                {\r\n                    user_id: rs.id,\r\n                    musician_type: 'I',\r\n                    musician_type_id: p_instrument\r\n                }\r\n            ], {\r\n                transaction: t,\r\n                raw: true\r\n            });\r\n        })\r\n    }).then(rs => {\r\n        res.apiResponse(true);\r\n    }).catch(err => {\r\n        next(err);\r\n    });\r\n```\r\n\r\n## What do you expect to happen?\r\nI wanted that sequelize examine p_email(string) properly and create record.\r\n\r\n## What is actually happening?\r\nTwo errors occurred. Both of them were ValidationError related with `isEmail`validation option and the value property was {Symbol(eq) : \"tese211@ttest.com\"} not \"tese211@ttest.com\".\r\nThe error messages were:\r\n- email cannot be an array or an object\r\n- Validation isEmail on email failed\r\n\r\nIt seems sequelize validator examine wrong value.\r\n\r\n__Dialect:__ mysql\r\n__Database version:__ 5.5.42\r\n__Sequelize version:__ 4.22.6\r\n__Tested with master branch:__ Yes\r\n\r\n**Note :** _Your issue may be ignored by maintainers if it's not tested against `master` branch OR does not follow issue template._\r\n",
    "comments_url": "https://api.github.com/repos/sequelize/sequelize/issues/8642/comments",
    "author": "BaroqueCoding",
    "comments": [
      {
        "user": "sushantdhiman",
        "created_at": "2017-11-17T07:04:27Z",
        "body": "Can you show full error thrown?"
      },
      {
        "user": "BaroqueCoding",
        "created_at": "2017-11-19T03:25:47Z",
        "body": "```\r\n{\r\nname: \"SequelizeValidationError\"\r\nmessage: \"string violation: email cannot be an array or an object,↵Validation error: Validation isEmail on email failed\"\r\nstack:\r\n`SequelizeValidationError:\r\n    string violation: email cannot be an array or an object,\r\n    Validation error: Validation isEmail on email failed\r\n        at Promise.all.then (~/seq_node/node_modules/sequelize/lib/instance-validator.js:77:15)\r\n        From previous event:\r\n            at InstanceValidator._validate (~/seq_node/node_modules/sequelize/lib/instance-validator.js:75:7)\r\n            at runHooks.then (~/seq_node/node_modules/sequelize/lib/instance-validator.js:110:14)\r\n            From previous event:\r\n                at InstanceValidator._validateAndRunHooks (~/seq_node/node_modules/sequelize/lib/instance-validator.js:109:8)\r\n                at InstanceValidator.validate (~/seq_node/node_modules/sequelize/lib/instance-validator.js:93:38)\r\n                at model.validate (~/seq_node/node_modules/sequelize/lib/model.js:3734:49)\r\n                at Promise.try (~/seq_node/node_modules/sequelize/lib/model.js:3511:21)\r\n                From previous event:\r\n                    at model.save (~/seq_node/node_modules/sequelize/lib/model.js:3508:23)\r\n                    at Function.create (~/seq_node/node_modules/sequelize/lib/model.js:1997:8)\r\n                    at sequelize.transaction.then.then.instance (~/seq_node/node_modules/sequelize/lib/model.js:2095:19)\r\n                    From previous event:\r\n                        at Function.findOrCreate (~/seq_node/node_modules/sequelize/lib/model.js:2083:8)\r\n                        at db.mySequel.transaction.t (~/seq_node/controllers/user.js:49:25)\r\n                        at transaction.prepareEnvironment.then (~/seq_node/node_modules/sequelize/lib/sequelize.js:969:21)\r\n                        at runCallback (timers.js:789:20)\r\n                        at tryOnImmediate (timers.js:751:5)\r\n                        at processImmediate [as _immediateCallback] (timers.js:722:5)\r\n                        From previous event:\r\n                            at Sequelize._clsRun (~/seq_node/node_modules/sequelize/lib/sequelize.js:969:10)\r\n                            at Function._clsRun (~/seq_node/node_modules/sequelize/lib/sequelize.js:1013:21)\r\n                            at Sequelize.transaction (~/seq_node/node_modules/sequelize/lib/sequelize.js:967:22)\r\n                            at ~/seq_node/controllers/user.js:48:24\r\n                            at Layer.handle [as handle_request] (~/seq_node/node_modules/express/lib/router/layer.js:95:5)\r\n                            at next (~/seq_node/node_modules/express/lib/router/route.js:137:13)\r\n                            at Route.dispatch (~/seq_node/node_modules/express/lib/router/route.js:112:3)\r\n                            at Layer.handle [as handle_request] (~/seq_node/node_modules/express/lib/router/layer.js:95:5)\r\n                            at ~/seq_node/node_modules/express/lib/router/index.js:281:22\r\n                            at Function.process_params (~/seq_node/node_modules/express/lib/router/index.js:335:12)\r\n                            at next (~/seq_node/node_modules/express/lib/router/index.js:275:10)\r\n                            at Function.handle (~/seq_node/node_modules/express/lib/router/index.js:174:3)\r\n                            at router (~/seq_node/node_modules/express/lib/router/index.js:47:12)\r\n                            at Layer.handle [as handle_request] (~/seq_node/node_modules/express/lib/router/layer.js:95:5)\r\n                            at trim_prefix (~/seq_node/node_modules/express/lib/router/index.js:317:13)\r\n                            at ~/seq_node/node_modules/express/lib/router/index.js:284:7\r\n                            at Function.process_params (~/seq_node/node_modules/express/lib/router/index.js:335:12)\r\n                            at next (~/seq_node/node_modules/express/lib/router/index.js:275:10)\r\n                            at exports.apiExtension (~/seq_node/helper/api_helper.js:171:2)\r\n                            at Layer.handle [as handle_request] (~/seq_node/node_modules/express/lib/router/layer.js:95:5)\r\n                            at trim_prefix (~/seq_node/node_modules/express/lib/router/index.js:317:13)\r\n                            at ~/seq_node/node_modules/express/lib/router/index.js:284:7\r\n                            at Function.process_params (~/seq_node/node_modules/express/lib/router/index.js:335:12)\r\n                            at next (~/seq_node/node_modules/express/lib/router/index.js:275:10)\r\n                            at exports.apiSet (~/seq_node/helper/api_helper.js:76:2)`\r\n}\r\n```"
      },
      {
        "user": "BaroqueCoding",
        "created_at": "2017-11-19T03:29:21Z",
        "body": "```\r\nerrors: Array(2)\r\n0 : ValidationErrorItem\r\ninstance:\r\nmodel {dataValues: {…}, _previousDataValues: {…}, _changed: {…}, _modelOptions: {…}, _options: {…}, …}\r\nmessage: \"email cannot be an array or an object\"\r\norigin: \"CORE\"\r\npath: \"email\"\r\ntype: \"string violation\"\r\nvalidatorArgs: []\r\nvalidatorKey: \"not_a_string\"\r\nvalidatorName: null\r\nvalue: {Symbol(eq): \"tese211@ttest.com\"}\r\n\r\n1: ValidationErrorItem\r\ninstance :\r\nmodel {dataValues: {…}, _previousDataValues: {…}, _changed: {…}, _modelOptions: {…}, _options: {…}, …}\r\nmessage: \"Validation isEmail on email failed\"\r\norigin: \"FUNCTION\"\r\npath: \"email\"\r\ntype: \"Validation error\"\r\nvalidatorArgs: [{…}]\r\nvalidatorKey: \"isEmail\"\r\nvalidatorName: \"isEmail\"\r\nvalue: {Symbol(eq): \"tese211@ttest.com\"}\r\n```"
      },
      {
        "user": "BaroqueCoding",
        "created_at": "2017-11-19T03:29:29Z",
        "body": "Need more detail?"
      },
      {
        "user": "sushantdhiman",
        "created_at": "2017-11-19T07:20:52Z",
        "body": "`where: { email: { [Op.eq]: p_email} },` => `where: { email: p_email }`"
      },
      {
        "user": "BaroqueCoding",
        "created_at": "2017-11-19T15:15:49Z",
        "body": "I know that works well. but I'm notified that string based operators like `where: { email: p_email }` is deprecated. Am I something misunderstand?"
      },
      {
        "user": "sushantdhiman",
        "created_at": "2017-11-20T06:15:44Z",
        "body": "`{ email: p_email }` not a string operator. If you are using secure operators then you dont have to worry, usrers wont be able to inject arbitrary operators in `p_email`"
      },
      {
        "user": "BaroqueCoding",
        "created_at": "2017-11-21T03:19:01Z",
        "body": "Thanks for your answer. Here are some questions. Sequelize document shows me an example.\r\n```\r\nPost.findAll({\r\n  where: {\r\n    [Op.or]: [{authorId: 12}, {authorId: 13}]\r\n  }\r\n});\r\n```\r\nThis example makes me confused. If what I understand is correct, `Op.or` can go to the where clause, but` Op.eq` can not.\r\nWhat's the difference? and Where is `Op.eq` intended to be used?"
      },
      {
        "user": "sushantdhiman",
        "created_at": "2017-11-21T04:36:47Z",
        "body": "You have used `Op.eq` correctly, but `findOrCreate` merge `where` and `defaults` fields to create new record, `{ eq: p_email }` wont be a correct entry for `email` field.\r\n\r\nCan you repeat this case with String operators? Let me know if `$eq` works but `Op.eq` doesn't, which will show a regression."
      },
      {
        "user": "BaroqueCoding",
        "created_at": "2017-11-23T05:07:42Z",
        "body": "I understood what you said. Using `{email : p_mail}` seems still works and so does `Op.eq`.\r\nBut the way of `findOrCreate` works looks strange. Anyway, your answer was helpful. thanks again."
      }
    ]
  },
  {
    "number": 8607,
    "title": "get error when accessing belongsTo association",
    "created_at": "2017-11-08T08:09:45Z",
    "closed_at": "2018-03-16T19:48:13Z",
    "labels": [
      "question",
      "stale"
    ],
    "url": "https://github.com/sequelize/sequelize/issues/8607",
    "body": "<!--\r\n\r\nPlease note this is an issue tracker, not a support forum.\r\nFor general questions, please use StackOverflow or Slack.\r\n\r\nFor bugs, please fill out the template below.\r\n\r\n-->\r\n\r\n## What are you doing?\r\nI'm using sequelize in a node app, having the following relations:\r\n\r\n```js\r\nDepartment = sequelize.define('Department', {\r\nid_department: {\r\ntype: DataTypes.INTEGER,\r\nallowNull: false,\r\nprimaryKey: true,\r\n},\r\n.\r\n.\r\n.\r\n}, {\r\ntableName: 'department',\r\ntimestamps: false,\r\n});\r\n\r\nDepartment.associate = (models) => {\r\n    Department.hasMany(models.User, {\r\n        foreignKey: 'id_department',\r\n        as: 'users',\r\n    });\r\n};\r\n\r\n\r\n\r\n\r\n\r\nUser = sequelize.define('User', {\r\n    id_user: {\r\n        type: DataTypes.INTEGER,\r\n        allowNull: false,\r\n        primaryKey: true,\r\n    },\r\n    username: {\r\n        type: DataTypes.STRING,\r\n        allowNull: false,\r\n    },\r\n    id_department: {\r\n        type: DataTypes.INTEGER,\r\n        allowNull: false,\r\n    },\r\n    .\r\n    .\r\n    .\r\n}, {\r\n    tableName: 'user',\r\n    timestamps: false,\r\n});\r\n\r\nUser.associate = (models) => {\r\n    User.belongsTo(models.Department, {\r\n        foreignKey: 'id_department',\r\n        onDelete: 'CASCADE',\r\n    });\r\n};\r\n```\r\n\r\n## What do you expect to happen?\r\nHere I have a problem: When I try to access the user's department:\r\n\r\n```\r\nUser.getDepartment().then(function (result) { return result; });\r\n```\r\n\r\nI get the following error: \"User.getDepartment is not a function\"\r\n\r\nAccessing the users from a department:\r\n\r\n```\r\nusers = Department.getUsers(filter).then(result => { return result; });\r\n```\r\n\r\nseems to work ok, and this problem seems to appear for \"belongsTo\" relation, because in my app I have more entities with different relation, and for each \"hasMany\" works ok, but trying to retrieve \"belongsTo\" relation throws the mentioned error.\r\n\r\nPlease, any help is appreciated, thank you!\r\n\r\n## What is actually happening?\r\nAccessing:\r\n\r\n```\r\nUser.getDepartment().then(function (result) { return result; });\r\n```\r\n\r\nI get the following error: \"User.getDepartment is not a function\"\r\n\r\n\r\n\r\n__Dialect:__ mysql\r\n__Dialect version:__ MySQL 5.5.57-0ubuntu0.14.04.1\r\n__Database version:__ MySQL 5.5.57-0ubuntu0.14.04.1\r\n__Sequelize version:__ 4.15.0\r\n__Tested with master branch:__ Yes\r\n\r\n**Note :** _Your issue may be ignored by maintainers if it's not tested against `master` branch OR does not follow issue template._\r\n",
    "comments_url": "https://api.github.com/repos/sequelize/sequelize/issues/8607/comments",
    "author": "kasinau",
    "comments": [
      {
        "user": "mcmlxxxiii",
        "created_at": "2017-12-09T19:24:48Z",
        "body": "Getting \"is not a function\" in your examples is absolutely normal. It seems that what's happening is just a slight confusion about the class/instance methods usage. The methods you're trying to use are added to instance level while you're trying to use them on class ones.\r\n\r\nTry this instead: \r\n```javascript\r\nUser.get(1).\r\n    then(user => user.getDepartment()).\r\n    then(department => { /* your code */ });\r\n```\r\n\r\nAnd this:\r\n```javascript\r\nDepartment.get(1).\r\n    then(department => department.getUsers()).\r\n    then(users => { /* your code */ });\r\n```"
      },
      {
        "user": "stale[bot]",
        "created_at": "2018-03-09T19:44:53Z",
        "body": "This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. If this is still an issue, just leave a comment 🙂\n"
      }
    ]
  },
  {
    "number": 7916,
    "title": "Raw query parsing error on replacements",
    "created_at": "2017-07-10T01:11:28Z",
    "closed_at": "2017-12-21T08:34:17Z",
    "labels": [
      "question",
      "stale"
    ],
    "url": "https://github.com/sequelize/sequelize/issues/7916",
    "body": "Hello,\r\n\r\nI'm using sequelize's latest version with Postgres. Trying to do basic Select query as raw query with `sequelize.query` function.\r\n\r\nThe following SQL query gives the following error:\r\n\r\n```\r\nError occurred: Named parameter \":MI\" has no value in the given object.\r\n```\r\n\r\nThe line: `sum(case when TO_CHAR(bets.placed_time, 'YYYY-MM-DD HH24:MI:SS') <= ` creates ambiguity. Are there any solution to solve this problem without changing the query?\r\n\r\n```javascript\r\n    sequelize.query(`\r\n      select\r\n        bet_odds.sport_name,\r\n        sum(case when TO_CHAR(bets.placed_time, 'YYYY-MM-DD HH24:MI:SS') <=  TO_CHAR(TO_TIMESTAMP(bet_odds.match_start_time / 1000), 'YYYY-MM-DD HH24:MI:SS') then bets.total_stake/bets.odd_count else 0 end) as pre_match_turnover,\r\n        sum(case when TO_CHAR(bets.placed_time, 'YYYY-MM-DD HH24:MI:SS') >  TO_CHAR(TO_TIMESTAMP(bet_odds.match_start_time / 1000), 'YYYY-MM-DD HH24:MI:SS') then bets.total_stake/bets.odd_count else 0 end) as live_turnover,\r\n        sum(case when TO_CHAR(bets.placed_time, 'YYYY-MM-DD HH24:MI:SS') <=  TO_CHAR(TO_TIMESTAMP(bet_odds.match_start_time / 1000), 'YYYY-MM-DD HH24:MI:SS') then (bets.total_stake/bets.odd_count) - (bets.win_or_lose_amount/bets.odd_count) else 0 end) as pre_match_gross,\r\n        sum(case when TO_CHAR(bets.placed_time, 'YYYY-MM-DD HH24:MI:SS') >  TO_CHAR(TO_TIMESTAMP(bet_odds.match_start_time / 1000), 'YYYY-MM-DD HH24:MI:SS') then (bets.total_stake/bets.odd_count) - (bets.win_or_lose_amount/bets.odd_count) else 0 end) as live_gross\r\n      from\r\n\r\n...\r\n\r\n{\r\n        type: sequelize.QueryTypes.SELECT,\r\n        replacements: {\r\n          start: new Date(start),\r\n          end: new Date(end),\r\n          minStake: parseFloat(minStake),\r\n          maxStake: parseFloat(maxStake)\r\n        }\r\n      \r\n```",
    "comments_url": "https://api.github.com/repos/sequelize/sequelize/issues/7916/comments",
    "author": "anonrig",
    "comments": [
      {
        "user": "eseliger",
        "created_at": "2017-07-11T02:27:15Z",
        "body": "This is a question regarding an (postgre)sql query, not really associated to sequelize. Please use stackoverflow or slack, ... to ask usage questions. We really invest every free minute we have to fix bugs and implement new features in sequelize and it makes it so hard to keep track of all the open issues. "
      },
      {
        "user": "anonrig",
        "created_at": "2017-07-11T14:27:18Z",
        "body": "@eseliger Sequelize automatically thinks that `'YYYY-MM-DD HH24:MI:SS'` includes a parameter with`:MI`. This is not a question related to Postgresql but a question related to Sequelize. This was the main reason why I wrote it on Github but not on StackOverflow.\r\n\r\nThanks."
      },
      {
        "user": "stale[bot]",
        "created_at": "2017-09-09T14:29:58Z",
        "body": "This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. If this is still an issue, just leave a comment 🙂\n"
      },
      {
        "user": "anonrig",
        "created_at": "2017-09-09T17:56:02Z",
        "body": "Still not resolved."
      },
      {
        "user": "stale[bot]",
        "created_at": "2017-12-14T07:38:44Z",
        "body": "This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. If this is still an issue, just leave a comment 🙂\n"
      }
    ]
  },
  {
    "number": 7873,
    "title": "Is there any way to disable SQL logging temporary",
    "created_at": "2017-07-01T11:11:38Z",
    "closed_at": "2017-07-05T11:14:22Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/sequelize/sequelize/issues/7873",
    "body": "hi there! I'am using sequelize to do stuff with mysql. My App has a task to synchronize data periodly and then updates a data table, which contains at least 20,000 rows at once. Surely those SQL will also be logged(I wrote raw SQLs into `profiles.log`). This log file became 200mb in few days. \r\n\r\nIs there some way to tempory disable Sql logging?",
    "comments_url": "https://api.github.com/repos/sequelize/sequelize/issues/7873/comments",
    "author": "raphaelsoul",
    "comments": [
      {
        "user": "harshithkashyap",
        "created_at": "2017-07-03T08:38:30Z",
        "body": "@raphaelsoul You can pass `{ logging: false }` as options to the sequelize methods where you do not need queries to be logged. You could also pass a function and skip some queries.\r\n```\r\n{\r\n  logging: sql => {\r\n     if (someCondition) {\r\n          //Log the query\r\n     }\r\n  }\r\n}\r\n```"
      }
    ]
  },
  {
    "number": 7834,
    "title": "Is there a way to disable SQL console logging on a specific table",
    "created_at": "2017-06-23T12:26:31Z",
    "closed_at": "2017-06-26T10:58:16Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/sequelize/sequelize/issues/7834",
    "body": "I know it can be disabled globally by setting \"logging: false\" on a new Sequelize() instance, but, Is there a way to disable it specifically on a table?",
    "comments_url": "https://api.github.com/repos/sequelize/sequelize/issues/7834/comments",
    "author": "edu791",
    "comments": [
      {
        "user": "felixfbecker",
        "created_at": "2017-06-26T10:58:16Z",
        "body": "no."
      },
      {
        "user": "edu791",
        "created_at": "2017-06-27T12:20:58Z",
        "body": "Could you consider this feature for a new release? I think it would be useful @felixfbecker "
      },
      {
        "user": "felixfbecker",
        "created_at": "2017-06-27T12:22:30Z",
        "body": "If you come up with a good API and implement it, sure :)\r\nThere are some threads here regarding passing `options` and other metadata to the logging function."
      },
      {
        "user": "edu791",
        "created_at": "2017-06-27T12:30:33Z",
        "body": "I don't know how to implement it, that's why I'm asking to you that know the code of Sequelize at depth."
      }
    ]
  },
  {
    "number": 7697,
    "title": "'include' itself issue?",
    "created_at": "2017-05-27T05:30:12Z",
    "closed_at": "2017-05-27T05:43:44Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/sequelize/sequelize/issues/7697",
    "body": "## What you are doing?\r\n```js\r\nmodels.Booking\r\n.findAll({\r\nattributes: ['id'], // for testing\r\ninclude: [\r\n{\r\nmodel: models.Room,\r\nattributes: ['name'], // for testing\r\nwhere: { pensionId: request.params.pensionId }\r\n}\r\n]\r\n})\r\n```\r\n\r\n## What do you expect to happen?\r\nThe sql I wanted is\r\n````select * from [Booking] inner join [Room] room on room.pensionId = 'Foo'````\r\nthis comes out exactly what i want. (tested on heidisql)\r\n\r\n\r\n## What is actually happening?\r\nHowever, it comes\r\n````SELECT [Booking].[id], [Room].[id] AS [Room.id], [Room].[name] AS [Room.name] FROM [Booking] AS [Booking] INNER JOIN [Room] AS [Room] ON [Booking].[roomId] = [Room].[id] AND [Room].[pensionId] = N'Foo';````\r\n\r\nProblem is why automatically include this clause????\r\n````[Booking].[roomId] = [Room].[id]````\r\nthis will be perfect without above clause.\r\n\r\n\r\n__Dialect:__ mssql",
    "comments_url": "https://api.github.com/repos/sequelize/sequelize/issues/7697/comments",
    "author": "xkguq007",
    "comments": [
      {
        "user": "sushantdhiman",
        "created_at": "2017-05-27T05:34:34Z",
        "body": "`[Booking].[roomId] = [Room].[id]` is the join condition between these two models, for each booking it will look for its room + other conditions you want to query for.\r\n\r\nIf we dont add this condition it will add other rooms to query as well which may not belong to booking, giving incorrect result"
      },
      {
        "user": "xkguq007",
        "created_at": "2017-05-27T05:43:44Z",
        "body": "Oh i understand.\r\nit was my fault.\r\nIf that clause doesn't exist, it returns same arrays. thanks.\r\nI will close issue."
      }
    ]
  },
  {
    "number": 7682,
    "title": "Foreign Key names duplicate when fetching",
    "created_at": "2017-05-24T09:02:36Z",
    "closed_at": "2018-04-19T11:01:56Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/sequelize/sequelize/issues/7682",
    "body": "Hello i am facing an issue when i user findAll i get response\r\n```\r\n{\r\n\"id\": 1,\r\n\"caqhId\": null,\r\n\"caqhPassword\": \"323\",\r\n\"degree\": \"323\",\r\n\"dob\": null,\r\n\"emails\": \"[{\"email\": \"pk112233@hotmail.com\"}]\",\r\n\"faxNumbers\": null,\r\n\"firstName\": \"sss\",\r\n\"lastName\": \"ddd\",\r\n\"medicareId\": null,\r\n\"npiNum\": \"1336150432\",\r\n\"phoneNumbers\": null,\r\n\"socialSecurityNumber\": null,\r\n\"entityId\": 3,\r\n\"otherInfoId\": null,\r\n\"qualiticationId\": null,\r\n\"entity_id\": 3,\r\n\"otherInfo_id\": null,\r\n\"qualitication_id\": null\r\n}\r\n```\r\nButi get duplicated 'entity_id' and 'entityId'. Here sequelizer is generating entityId and in my DB i ve 'entity_id'. I know i can use exclude when fetching but is there some other way i can configure when making associations and with changing the db structure.\r\n\r\n```\r\nthis.entity.hasMany(this.provider, {as: 'entity', foreignKey: 'entity_id'})\r\nthis.provider.belongsTo(this.entity, {as: 'entity', foreignKey: 'entity_id'})\r\n```\r\nIn provider.js i ve defined foreignKey \r\n```\r\n//more fields\r\nentityId: {\r\n      type: DataTypes.INTEGER(11),\r\n      allowNull: true,\r\n      references: {\r\n        model: 'entity',\r\n        key: 'id'\r\n      },\r\n      field: 'entity_id'\r\n    }\r\n```",
    "comments_url": "https://api.github.com/repos/sequelize/sequelize/issues/7682/comments",
    "author": "hassanrazakhalid",
    "comments": [
      {
        "user": "weldermarcosxd",
        "created_at": "2017-07-12T11:40:17Z",
        "body": "This happens to me as well. How to remove this modelId or even rename it in foreign keys?"
      },
      {
        "user": "tonivj5",
        "created_at": "2017-09-11T16:42:51Z",
        "body": "I have the same problem, how could I resolve it? 😢 "
      },
      {
        "user": "tonivj5",
        "created_at": "2017-12-17T15:36:12Z",
        "body": "This issue isn't resolved yet"
      },
      {
        "user": "grutty-sf",
        "created_at": "2018-01-19T08:15:29Z",
        "body": "😓me too  This issue isn't resolved yet"
      },
      {
        "user": "grutty-sf",
        "created_at": "2018-01-19T08:19:02Z",
        "body": "`\r\n                attributes: {\r\n                    exclude: ['createdAt', 'updatedAt', 'deletedAt', 'created_at', 'updated_at', 'deleted_at'],\r\n                },\r\n`"
      },
      {
        "user": "sushantdhiman",
        "created_at": "2018-04-19T11:01:56Z",
        "body": "`foreignKey` is attribute name not field name, its the attribute that will be injected or used if already defined in model.\r\n\r\nSo by setting `entity_id` as `foriegnKey` you are asking sequelize to inject an attribute `entity_id` in `provider` plus your are defining an attribute `entityId` yourself, you will 100% get duplicate results. Now you have two attributes `entity_id` and `entityId` in `provider` model both pointing to field `entity_id`\r\n\r\n```js\r\n/// Change this\r\nthis.entity.hasMany(this.provider, {as: 'entity', foreignKey: 'entity_id'})\r\nthis.provider.belongsTo(this.entity, {as: 'entity', foreignKey: 'entity_id'})\r\n\r\n/// To this\r\nthis.entity.hasMany(this.provider, {as: 'entity', foreignKey: 'entityId'})\r\nthis.provider.belongsTo(this.entity, {as: 'entity', foreignKey: 'entityId'})\r\n```\r\n\r\nAs you already have defined attribute `entityId` (with field `entity_id`) in `provider` model, it will use `entity_id` when communicating with database\r\n\r\n```js\r\n//more fields\r\n   entityId: {\r\n      type: DataTypes.INTEGER(11),\r\n      allowNull: true,\r\n      references: {\r\n        model: 'entity',\r\n        key: 'id'\r\n      },\r\n      field: 'entity_id'\r\n    }\r\n```"
      }
    ]
  },
  {
    "number": 6672,
    "title": "how to call the custom sql function in attributes/where condition in sequelize",
    "created_at": "2016-10-08T12:46:08Z",
    "closed_at": "2016-10-09T10:44:47Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/sequelize/sequelize/issues/6672",
    "body": "how to call custom sql function in Sequelize\n\nI tried like this \n\nits working \napp.get('/callservice',function () {\n    Sequelize.query('select fun_GetGalleryCount(1,1);',\n    {\n        type: Sequelize.QueryTypes.RAW\n    })\n    .then(function(results) {\n        console.log(JSON.stringify(results));\n    })\n})\n\nbut in attributes/where condition is not working like this: \n options.where=getcondition(req,Sequelize);\n     options.attributes=[\n           [Sequelize.query('select fun_GetGalleryCount(1,1);',\n                {\n                    type: Sequelize.QueryTypes.RAW\n                }),'ima']\n\n```\n    ];\n```\n\n  hp_property.findAndCountAll(options).then(function(result) {\n});\n\nerrror:\nPossibly unhandled TypeError: attr[0].indexOf is not a function\n\ni tried in another way like this \noptions.attributes=[\n           [Sequelize.query('select fun_GetGalleryCount(1,1);'),'image']\n  ];\n\nso please give the solution \n\n**Dialect:** mysql \n**Database version:** XXX\n",
    "comments_url": "https://api.github.com/repos/sequelize/sequelize/issues/6672/comments",
    "author": "SIMHACHALAM1001",
    "comments": [
      {
        "user": "felixfbecker",
        "created_at": "2016-10-08T13:08:09Z",
        "body": "`query` will execute directly and return a promise. You are looking for `sequelize.fn` and `sequelize.literal`\n"
      },
      {
        "user": "SIMHACHALAM1001",
        "created_at": "2016-10-08T14:36:20Z",
        "body": "options.attributes=[\n[Sequelize.literal('select fun_GetGalleryCount(1,1);'),'image']\n];\n\nalso getting the sam error\n"
      },
      {
        "user": "felixfbecker",
        "created_at": "2016-10-08T14:50:23Z",
        "body": "Log the SQL generated. If you have further questions, ask on StackOverflow or Slack\n"
      },
      {
        "user": "SIMHACHALAM1001",
        "created_at": "2016-10-09T06:07:07Z",
        "body": "thanq its solved by using  Sequelize.litera\n"
      },
      {
        "user": "miltonkowalewski",
        "created_at": "2018-08-14T13:44:39Z",
        "body": "With me this error only occurred when the model was not associated with the correct column name.\r\nLike:\r\nsequelize.define('Users', {\r\n      date: {\r\n\t\t\ttype: DataTypes.DATEONLY,\r\n\t\t\tallowNull: false,\r\n\t\t\tfield: DataTypes.DATEONLY // Wrong! Must be the column name in the database table\r\n\t\t}\r\n}, {\r\n\ttableName: 'REGISTER',\r\n});\r\n"
      }
    ]
  },
  {
    "number": 6625,
    "title": "Swap order of $between?",
    "created_at": "2016-09-23T07:21:47Z",
    "closed_at": "2016-10-27T13:32:42Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/sequelize/sequelize/issues/6625",
    "body": "Is there anyway to swap the order of `$between`? i.e. I want to do something like this using `findAll())`\n\n``` sql\nSELECT * FROM \"events\" WHERE \"start\" BETWEEN ${start} AND ${end} OR ${start} BETWEEN \"start\" AND \"end\"\n```\n\nUsing postgres 9.4\n",
    "comments_url": "https://api.github.com/repos/sequelize/sequelize/issues/6625/comments",
    "author": "gigafied",
    "comments": [
      {
        "user": "felixfbecker",
        "created_at": "2016-09-23T11:38:18Z",
        "body": "Please show what you tried and didn't work\n"
      }
    ]
  },
  {
    "number": 6615,
    "title": "can i get the DDL/SQL before connect database ",
    "created_at": "2016-09-21T11:51:04Z",
    "closed_at": "2016-10-27T13:32:47Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/sequelize/sequelize/issues/6615",
    "body": "can i get the DDL/SQL before connect database \n\nbefore connect to database , define a  model , how can i get the DDL/SQL \n\nOR connected to database , before sync , how to get the DDL \n",
    "comments_url": "https://api.github.com/repos/sequelize/sequelize/issues/6615/comments",
    "author": "ystyle",
    "comments": [
      {
        "user": "felixfbecker",
        "created_at": "2016-09-21T12:55:12Z",
        "body": "Please rephrase your question\n"
      }
    ]
  },
  {
    "number": 6611,
    "title": "Changing the name of an association to get output as JSON",
    "created_at": "2016-09-19T15:47:48Z",
    "closed_at": "2016-09-19T15:59:21Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/sequelize/sequelize/issues/6611",
    "body": "## What you are doing?\n\nSo, lets say I have an association (below) and it has been included and then output to JSON.\n\n``` js\n// in the model\nUser.belongsToMany(models.Permissions, {through: models.UsersPermissions, foreignKey: 'userId'});\n\n// included\ndb.Users.findAll({ \n        include: [ {\n            model: db.Permissions,\n        through: {\n                 attributes: []\n                }\n        }]\n})\n\n//output\n\"Permissions\": [\n        {\n          \"id\": 1,\n          \"name\": \"add-role\",\n          \"description\": \"Allows the user to add a new role to the system\"\n        }\n      ]\n```\n## What do you expect to happen?\n\nNow, that final output comes out as a 'Permission', note the capital P.\n\nWhat I would expect is a lower case 'p', because I don;t know of any standard that would like that capitalized.\n\nThe only way to change this is to use the \"as\" operator. Therefore...\n\n``` js\n// in the model\nUser.belongsToMany(models.Permissions, {through: models.UsersPermissions, foreignKey: 'userId', as: 'permissions'});\n\n// included\ndb.Users.findAll({ \n        include: [ {\n        model: db.Permissions,\n                as: 'permissions',\n        through: {\n                 attributes: []\n                }\n        }]\n})\n\n//output\n\"permissions\": [\n        {\n          \"id\": 1,\n          \"name\": \"add-role\",\n          \"description\": \"Allows the user to add a new role to the system\"\n        }\n      ]\n```\n\nNow, you may feel this is great, what isnt great however is that this \"as\" operator must be used in both the model AND the includes.\n\nIs this the only way to have this happen? Or have I got something wrong here?\n",
    "comments_url": "https://api.github.com/repos/sequelize/sequelize/issues/6611/comments",
    "author": "Kyderman",
    "comments": [
      {
        "user": "felixfbecker",
        "created_at": "2016-09-19T15:59:21Z",
        "body": "``` js\nUser.belongsToMany(models.Permissions, {through: models.UsersPermissions, foreignKey: 'userId', as: 'permissions'});\n\ndb.Users.findAll({ \n        include: [ {\n        association: db.User.associations.permissions,\n        through: {\n                 attributes: []\n                }\n        }]\n})\n```\n\nThe object in `User.associations.permissions` is also returned by `belongsToMany`.\n"
      },
      {
        "user": "Kyderman",
        "created_at": "2016-09-19T16:24:11Z",
        "body": "beautiful!\n\nThanks\n"
      }
    ]
  },
  {
    "number": 6576,
    "title": "JSON format for queries using \"include\"",
    "created_at": "2016-09-09T17:33:16Z",
    "closed_at": "2016-09-09T17:59:17Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/sequelize/sequelize/issues/6576",
    "body": "First, thanks for the awesome library. Saves me a ton of time in my projects. I've had this problem for quite a while and made a bunch of workarounds, finally decided to just ask you guys. Thanks in advance!\n\nBasically i want to query the db and include an association as nest json. EG:\n\n```\nUser.findOne({\n    raw: true,\n    include: [{\n      model: Company,\n      as: 'company'\n    }]\n  })\n```\n\nWhat im getting is:\n\n```\n{\n  id: 1234,\n  name: 'Blah',\n  company.id: 1234,\n  company.name: 'blah blah'\n}\n```\n\nI would expect:\n\n```\n{\n  id: 1234,\n  name: 'Blah',\n  company: { \n    id: 1234,\n    name: 'blah blah'\n  }\n}\n```\n\nWhat am i doing wrong here?\n\n**Dialect:** postgres \n**Database version:** 9.5.2.0\n**Sequelize version:** 3.23.4\n",
    "comments_url": "https://api.github.com/repos/sequelize/sequelize/issues/6576/comments",
    "author": "brianmmorton",
    "comments": [
      {
        "user": "brianmmorton",
        "created_at": "2016-09-09T17:38:37Z",
        "body": "Does this have to do with using raw?\n"
      },
      {
        "user": "felixfbecker",
        "created_at": "2016-09-09T17:52:49Z",
        "body": "Yes, this is not supported why using raw, as raw returns the fields like they come from the DB. Is there any reason why you need raw?\n"
      },
      {
        "user": "brianmmorton",
        "created_at": "2016-09-09T17:57:52Z",
        "body": "Perhaps not? My impression was that i should use raw when I am looking to only return json data. So typically in express I will query data with raw, then res.json(results). Do i not need raw in that case?\n"
      },
      {
        "user": "felixfbecker",
        "created_at": "2016-09-09T17:59:06Z",
        "body": "No, not at all. You can just `JSON.stringify()` the result.\n"
      },
      {
        "user": "brianmmorton",
        "created_at": "2016-09-09T18:00:01Z",
        "body": "Great. thanks for the help!\n"
      },
      {
        "user": "felixfbecker",
        "created_at": "2016-09-09T18:01:23Z",
        "body": "No problem :)\n"
      },
      {
        "user": "felixfbecker",
        "created_at": "2016-09-09T18:01:58Z",
        "body": "Oh, and if it wasn't clear, of course you can also just `res.json()` the result.\n"
      },
      {
        "user": "rafaelvmedeiros",
        "created_at": "2020-04-13T00:21:45Z",
        "body": "another option is set: nest: true\r\n\r\nawait Empresa.findOne({\r\n      where: {},\r\n      raw: true,\r\n      nest: true,\r\n      attributes: ['cnpj', 'razao_social', 'inscricao_estadual'],\r\n      include: [{}]"
      }
    ]
  },
  {
    "number": 6572,
    "title": "Sequelize omitting field when casting to array",
    "created_at": "2016-09-08T20:59:12Z",
    "closed_at": "2016-09-10T18:50:26Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/sequelize/sequelize/issues/6572",
    "body": "I am attempting to use the postgres citext module with Sequelize, so far it has worked well by using literals for queries and defining the type in the model. However because Sequelize does not understand what the citext type is, it returns my citext arrays as strings. e;g \"{item 1, item2}\"  \nTo get around this I am trying to cast the citext array to a TEXT or VARCHAR array in the query, however when I do this, Sequelize does not show that field at all.    \n\nIf I set raw: true, the field shows fine, and as an array.\n\n``` js\nUsers.findAndCountAll({\n        where: { },\n        attributes: [\n          'id',\n          'createdAt',\n          'updatedAt',\n          db.cast(db.col('nicknames'), 'text[]')\n        ]\n})\n```\n## What do you expect to happen?\n\nI expect there to be a nicknames field returned from sequelize and it to be an array, instead it's as if the attribute is not there at all.\n## What is actually happening?\n\nThis is the generated SQL, the SQL itself works fine when I try it in a database manager, but the output Sequelize gives me omits the nickname field.\n\nSELECT \"User\".\"id\", \"User\".\"createdAt\", \"User\".\"updatedAt\", CAST(\"nicknames\" AS TEXT[]) FROM \"Users\" AS \"User\" WHERE \"User\".\"deletedAt\" IS NULL;\n\n**Dialect:** postgres\n**Database version:** 9.5\n**Sequelize version:** 3.23.4\n",
    "comments_url": "https://api.github.com/repos/sequelize/sequelize/issues/6572/comments",
    "author": "SuperManifolds",
    "comments": [
      {
        "user": "felixfbecker",
        "created_at": "2016-09-09T06:51:59Z",
        "body": "You need to tell sequelize under which alias you want to have your expression. I believe the syntax is\n\n``` js\nUsers.findAndCountAll({\n        where: { },\n        attributes: [\n          'id',\n          'createdAt',\n          'updatedAt',\n          [db.cast(db.col('nicknames'), 'text[]'), 'nicknames']\n        ]\n})\n```\n\nbut please refer to the docs\n"
      },
      {
        "user": "SuperManifolds",
        "created_at": "2016-09-10T18:50:26Z",
        "body": "Worked! Can't believe I missed that, thank you so much.\n"
      }
    ]
  },
  {
    "number": 6564,
    "title": "How access a model's associated models",
    "created_at": "2016-09-07T18:20:05Z",
    "closed_at": "2016-09-07T18:22:50Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/sequelize/sequelize/issues/6564",
    "body": "Is there a programmatic way to access the associated models of a model?\n\nFor example, if there is a 1:M association between the models `Author` and `Book`, is there a way that I can access the `Book` model from the `Author` model along with the type of association?\n\nSomething like `Author.getAssociations()` would return something like:\n\n``` javascript\n[{\n    relationship: \"hasMany\",\n    model: Book\n}]\n```\n",
    "comments_url": "https://api.github.com/repos/sequelize/sequelize/issues/6564/comments",
    "author": "nareynolds",
    "comments": [
      {
        "user": "felixfbecker",
        "created_at": "2016-09-07T18:22:50Z",
        "body": "Yes, the associations are saved under `Model.associations`, which is an object hash from alias to association object. The association objects are seperate classes for hasMany / belongsTo / ... and have a couple of attributes, if they are not documented you might wanna peek into the source. \n"
      },
      {
        "user": "nareynolds",
        "created_at": "2016-09-07T18:49:07Z",
        "body": "thanks, again!\n"
      }
    ]
  },
  {
    "number": 6549,
    "title": "How can I create this SQL?",
    "created_at": "2016-09-06T08:05:47Z",
    "closed_at": "2016-09-07T01:05:04Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/sequelize/sequelize/issues/6549",
    "body": "Hello. \n## What you are doing?\n\n``` js\nRoom.belongsTo(Hotel, {foreignKey: 'hotelId'});\n\nRoom.findAndCountAll({\n  where: {\n    sellPrice: {lte: 10000}\n  },\n  include: [{\n    model: Hotel,\n    required: false,\n    where: {\n      region: 'Tokyo'\n    }\n  }]\n});\n\n```\n## What do you expect to happen?\n\n_I wanted._\n- get a room even if hotelId does not exist.\n- make the filter with the region.\n- LEFT OUTER JOIN `hotels` AS `hotel` ON `rooms`.`hotelId` = `hotel`.`id` **WHERE** `hotel`.`region` = 'Tokyo';\n### I wanted this sql\n\n``` sql\nSELECT `rooms`.`id`,\n       `rooms`.`hotelId`,\n       `rooms`.`hotelName`,\n       `rooms`.`roomType`,\n       `rooms`.`smoking`,\n       `rooms`.`breakfast`,\n       `rooms`.`dinner`,\n       `rooms`.`checkIn`,\n       `rooms`.`checkOut`,\n       `rooms`.`numberOfAdults`,\n       `rooms`.`numberOfChildren`,\n       `rooms`.`bookingFrom`,\n       `rooms`.`reservationCode`,\n       `rooms`.`confirmationCode`,\n       `rooms`.`originalPrice`,\n       `rooms`.`sellPrice`,\n       `rooms`.`discountRate`,\n       `rooms`.`chargeStatus`,\n       `rooms`.`postingPeriod`,\n       `rooms`.`message`,\n       `rooms`.`reviewStatus`,\n       `rooms`.`saleStatus`,\n       `rooms`.`transferStatus`,\n       `rooms`.`chargeId`,\n       `rooms`.`createdAt`,\n       `rooms`.`updatedAt`,\n       `hotel`.`id` AS `hotel.id`,\n       `hotel`.`name` AS `hotel.name`,\n       `hotel`.`kanaName` AS `hotel.kanaName`,\n       `hotel`.`formattedAddress` AS `hotel.formattedAddress`,\n       `hotel`.`country` AS `hotel.country`,\n       `hotel`.`region` AS `hotel.region`,\n       `hotel`.`locality` AS `hotel.locality`,\n       `hotel`.`subLocality1` AS `hotel.subLocality1`,\n       `hotel`.`subLocality2` AS `hotel.subLocality2`,\n       `hotel`.`subLocality3` AS `hotel.subLocality3`,\n       `hotel`.`subLocality4` AS `hotel.subLocality4`,\n       `hotel`.`postalCode` AS `hotel.postalCode`,\n       `hotel`.`phone` AS `hotel.phone`,\n       `hotel`.`fax` AS `hotel.fax`,\n       `hotel`.`access` AS `hotel.access`,\n       `hotel`.`station` AS `hotel.station`,\n       `hotel`.`reviewRate` AS `hotel.reviewRate`,\n       `hotel`.`reviewCount` AS `hotel.reviewCount`,\n       `hotel`.`parking` AS `hotel.parking`,\n       `hotel`.`images` AS `hotel.images`,\n       `hotel`.`checkInTime` AS `hotel.checkInTime`,\n       `hotel`.`checkOutTime` AS `hotel.checkOutTime`,\n       `hotel`.`lastCheckInTime` AS `hotel.lastCheckInTime`,\n       `hotel`.`hotelPolicy` AS `hotel.hotelPolicy`,\n       `hotel`.`cancelPolicy` AS `hotel.cancelPolicy`,\n       `hotel`.`creditCard` AS `hotel.creditCard`,\n       `hotel`.`latitude` AS `hotel.latitude`,\n       `hotel`.`longitude` AS `hotel.longitude`,\n       `hotel`.`listedStatus` AS `hotel.listedStatus`,\n       `hotel`.`source` AS `hotel.source`,\n       `hotel`.`createdAt` AS `hotel.createdAt`,\n       `hotel`.`updatedAt` AS `hotel.updatedAt`\nFROM `rooms` AS `rooms`\nLEFT OUTER JOIN `hotels` AS `hotel` ON `rooms`.`hotelId` = `hotel`.`id`\nWHERE `hotel`.`region` = 'Tokyo';\n```\n## What is actually happening?\n- filter with the region is not working.\n- LEFT OUTER JOIN `hotels` AS `hotel` ON `rooms`.`hotelId` = `hotel`.`id` **AND** `hotel`.`region` = 'Tokyo';\n### Actual sql\n\n``` sql\nSELECT `rooms`.`id`,\n       `rooms`.`hotelId`,\n       `rooms`.`hotelName`,\n       `rooms`.`roomType`,\n       `rooms`.`smoking`,\n       `rooms`.`breakfast`,\n       `rooms`.`dinner`,\n       `rooms`.`checkIn`,\n       `rooms`.`checkOut`,\n       `rooms`.`numberOfAdults`,\n       `rooms`.`numberOfChildren`,\n       `rooms`.`bookingFrom`,\n       `rooms`.`reservationCode`,\n       `rooms`.`confirmationCode`,\n       `rooms`.`originalPrice`,\n       `rooms`.`sellPrice`,\n       `rooms`.`discountRate`,\n       `rooms`.`chargeStatus`,\n       `rooms`.`postingPeriod`,\n       `rooms`.`message`,\n       `rooms`.`reviewStatus`,\n       `rooms`.`saleStatus`,\n       `rooms`.`transferStatus`,\n       `rooms`.`chargeId`,\n       `rooms`.`createdAt`,\n       `rooms`.`updatedAt`,\n       `hotel`.`id` AS `hotel.id`,\n       `hotel`.`name` AS `hotel.name`,\n       `hotel`.`kanaName` AS `hotel.kanaName`,\n       `hotel`.`formattedAddress` AS `hotel.formattedAddress`,\n       `hotel`.`country` AS `hotel.country`,\n       `hotel`.`region` AS `hotel.region`,\n       `hotel`.`locality` AS `hotel.locality`,\n       `hotel`.`subLocality1` AS `hotel.subLocality1`,\n       `hotel`.`subLocality2` AS `hotel.subLocality2`,\n       `hotel`.`subLocality3` AS `hotel.subLocality3`,\n       `hotel`.`subLocality4` AS `hotel.subLocality4`,\n       `hotel`.`postalCode` AS `hotel.postalCode`,\n       `hotel`.`phone` AS `hotel.phone`,\n       `hotel`.`fax` AS `hotel.fax`,\n       `hotel`.`access` AS `hotel.access`,\n       `hotel`.`station` AS `hotel.station`,\n       `hotel`.`reviewRate` AS `hotel.reviewRate`,\n       `hotel`.`reviewCount` AS `hotel.reviewCount`,\n       `hotel`.`parking` AS `hotel.parking`,\n       `hotel`.`images` AS `hotel.images`,\n       `hotel`.`checkInTime` AS `hotel.checkInTime`,\n       `hotel`.`checkOutTime` AS `hotel.checkOutTime`,\n       `hotel`.`lastCheckInTime` AS `hotel.lastCheckInTime`,\n       `hotel`.`hotelPolicy` AS `hotel.hotelPolicy`,\n       `hotel`.`cancelPolicy` AS `hotel.cancelPolicy`,\n       `hotel`.`creditCard` AS `hotel.creditCard`,\n       `hotel`.`latitude` AS `hotel.latitude`,\n       `hotel`.`longitude` AS `hotel.longitude`,\n       `hotel`.`listedStatus` AS `hotel.listedStatus`,\n       `hotel`.`source` AS `hotel.source`,\n       `hotel`.`createdAt` AS `hotel.createdAt`,\n       `hotel`.`updatedAt` AS `hotel.updatedAt`\nFROM `rooms` AS `rooms`\nLEFT OUTER JOIN `hotels` AS `hotel` ON `rooms`.`hotelId` = `hotel`.`id`\nAND `hotel`.`region` = 'Tokyo';\n```\n\n**Dialect:** mysql\n**Database version:** 5.7.11\n**Sequelize version:** 3.24.1\n",
    "comments_url": "https://api.github.com/repos/sequelize/sequelize/issues/6549/comments",
    "author": "tomoktan",
    "comments": [
      {
        "user": "felixfbecker",
        "created_at": "2016-09-06T08:08:01Z",
        "body": "It's `$lte`\n"
      },
      {
        "user": "tomoktan",
        "created_at": "2016-09-06T09:03:36Z",
        "body": "@felixfbecker\nIt means that this?\n\n``` js\nRoom.belongsTo(Hotel, {foreignKey: 'hotelId'});\n\nRoom.findAndCountAll({\n  where: {\n    sellPrice: {$lte: 10000}\n  },\n  include: [{\n    model: Hotel,\n    required: false,\n    where: {\n      region: 'Tokyo'\n    }\n  }]\n});\n```\n\nBut , it does not work yet as i think.\n"
      },
      {
        "user": "janmeier",
        "created_at": "2016-09-06T10:55:59Z",
        "body": "If you want where clauses on the outer statement, you should put them at the top level of the sequelize options as well :)\n\n``` js\nRoom.findAndCountAll({\n  where: {\n    sellPrice: {$lte: 10000}\n    '$hotel.region$': 'Tokyo'\n  },\n  include: [{\n    model: Hotel,\n    required: false\n  }]\n});\n```\n\nNotice the use of `$` to refer to columns from the join table\n"
      },
      {
        "user": "tomoktan",
        "created_at": "2016-09-07T01:05:04Z",
        "body": "@janmeier Thank you! It worked! (^o^)\n"
      }
    ]
  },
  {
    "number": 6547,
    "title": "transaction status",
    "created_at": "2016-09-06T07:07:30Z",
    "closed_at": "2016-09-07T07:50:32Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/sequelize/sequelize/issues/6547",
    "body": "hello!\n\nHow to check is transaction executing, commited, or rollbacked?  This is neccecary for try - catch error handlings\n\nThanks!\n",
    "comments_url": "https://api.github.com/repos/sequelize/sequelize/issues/6547/comments",
    "author": "alexey2baranov",
    "comments": [
      {
        "user": "felixfbecker",
        "created_at": "2016-09-06T08:08:44Z",
        "body": "Please show some code\n"
      },
      {
        "user": "alexey2baranov",
        "created_at": "2016-09-06T10:01:58Z",
        "body": "``` javascript\nasync createModel(args, {type, value}) {\n    var tran = await models.sequelize.transaction();\n    var result = null;\n\n    try {\n        let result = await models[type].create(value);\n\n        switch (type) {\n            case \"Zemla\":\n                //some staff\n                await tran.commit();\n                //some staff\n                break;\n            case \"Kopa\":\n                //some staff\n                await tran.commit();\n                //some staff\n                break;\n            case \"Golos\":\n                //some staff\n                await tran.commit();\n                //some staff\n                break;\n            case \"Slovo\":\n                //some staff\n                await tran.commit();\n                //some staff\n                break;\n            case \"Kopnik\":\n                //some staff\n                await tran.commit();\n                //some staff\n                delete result.password;\n                break;\n            case \"File\":\n                break;\n        }\n        return result.id;\n    }\n    catch (err) {\n        // we would like to get this api\n        if (!tran.commited && !tran.rollbacked) {\n            await tran.rollback();\n        }\n        throw err;\n    }\n}\n```\n"
      },
      {
        "user": "felixfbecker",
        "created_at": "2016-09-06T10:05:48Z",
        "body": "This is not needed - if there was an error, the transaction of course was not commited and you have to roll it back. If your code doesnt allow this, you should narrow your try/catch block down or refactor your code into functions.\n"
      },
      {
        "user": "alexey2baranov",
        "created_at": "2016-09-06T10:13:39Z",
        "body": "@felixfbecker \n\n>  if there was an error, the transaction of course was not commited and you have to roll it back\n\nyes! but error may be throwned before and after transaction commit. if it was thrawned before transaction then tran.rollback() in catch block do his job. Otherwise it throws another error \"transaction already commited\".\n\nthe only way refactor this is to add try - catch inside every case block. but i would like to miss this job\n"
      },
      {
        "user": "felixfbecker",
        "created_at": "2016-09-06T10:52:16Z",
        "body": "That's why `transaction.commit()` should be the last statement in your `try` block. Also, you are not `await`ing `tran.rollback()`, so your statement about throwing error \"transaction already commited\" is actually not true.\n"
      },
      {
        "user": "alexey2baranov",
        "created_at": "2016-09-07T04:59:49Z",
        "body": "in out case transaction could not be the last statement in try block because some staff should be done when new model available to others. Of cause we can rewrite this part but code become overloaded. I think tran.state is very usefull instead of doing tran.commit the last statement of try block.\n"
      },
      {
        "user": "alexey2baranov",
        "created_at": "2016-09-07T05:07:57Z",
        "body": "@felixfbecker **do_not_await** transtaction.roolback() is a little hack by now to avoid twice commit-rollback error throwing . Fixed it in code example\n"
      },
      {
        "user": "felixfbecker",
        "created_at": "2016-09-07T07:26:48Z",
        "body": "What needs to happen after commit()? Why can't you move it after the try/catch?\nAn alternative is to save a boolean yourself.\n"
      },
      {
        "user": "alexey2baranov",
        "created_at": "2016-09-07T07:50:32Z",
        "body": "it is not important what we do after commit because each project has their specific. and what we do other will not. I think it would be good for all if Transaction has their state. We publicate specific for each model WAMP publication and other clients will receive this publication and fetch new model from DB. So we should commit transaction before publication.\n\n> Why can't you move it after the try/catch? An alternative is to save a boolean yourself.\n\nyes. as i can sad we can rewrite it but code become overloaded\n\nAnyway i understand that Transaction.state is not possible by now. Thank you for you time\n"
      },
      {
        "user": "felixfbecker",
        "created_at": "2016-09-07T07:57:14Z",
        "body": "You might wanna look at the internals, I think it is saved somewhere. If you really need it do a PR. You can also use the `transaction(callback)` signature.\n"
      },
      {
        "user": "aidinrs",
        "created_at": "2019-02-21T14:21:54Z",
        "body": "there is a property named `finished` on the transaction object that you can check to see if a transaction has been committed or not. However, It is not official API and may change.\r\n```js\r\n// ...\r\nif (transaction.finished === 'commit') {\r\n    // transaction has been committed\r\n} else {\r\n    // transaction has not been committed\r\n}\r\n```"
      },
      {
        "user": "DashBarkHuss",
        "created_at": "2024-09-26T18:42:14Z",
        "body": "> there is a property named `finished` on the transaction object that you can check to see if a transaction has been committed or not. However, It is not official API and may change.\r\n> \r\n> ```js\r\n> // ...\r\n> if (transaction.finished === 'commit') {\r\n>     // transaction has been committed\r\n> } else {\r\n>     // transaction has not been committed\r\n> }\r\n> ```\r\n\r\nWhy don't I see this property?\r\n\r\n```javascript\r\n const t = await sequelize.transaction();\r\n \r\n t.finished > undefined\r\n ````"
      },
      {
        "user": "Mohim-Singla",
        "created_at": "2025-02-04T15:34:26Z",
        "body": "@DashBarkHuss As per my observation, `finished` property is appended to the transaction instance object once commit/rollback function is called. Try below mentioned code snippet.\n\n```\nconst t = await sequelize.transaction();\n await t.commit();\n console.log(t.finished);\n```"
      }
    ]
  },
  {
    "number": 6543,
    "title": "how to sync Sequelize model with pre defined table",
    "created_at": "2016-09-04T13:42:17Z",
    "closed_at": "2016-09-04T13:48:25Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/sequelize/sequelize/issues/6543",
    "body": "I understand the below code is creating `NEW` table in the data base and call it `User` then add data to it.\nI've the table `User` already existing in my data, I just want to do a model to sync with with this table, how can I do it?\n\n```\nvar Sequelize = require('sequelize');\nvar sequelize = new Sequelize('database', 'username', 'password');\n\nvar User = sequelize.define('user', {\n    username: Sequelize.STRING,\n    birthday: Sequelize.DATE\n});\n\nsequelize.sync().then(function() {\n   return User.create({\n       username: 'janedoe',\n       birthday: new Date(1980, 6, 20)\n    });\n}).then(function(jane) {\n       console.log(jane.get({\n       plain: true\n    }));\n});\n```\n",
    "comments_url": "https://api.github.com/repos/sequelize/sequelize/issues/6543/comments",
    "author": "hasan3ysf",
    "comments": [
      {
        "user": "felixfbecker",
        "created_at": "2016-09-04T13:48:07Z",
        "body": "What do you mean by \"syncing the model to the table\"? Running `sync({force: true})` will drop the table first, but you will lose all your data. If you want to keep your data, but only change the schema, you need to write a migration.\n"
      }
    ]
  },
  {
    "number": 6540,
    "title": "Example [options.include[].on] ?",
    "created_at": "2016-09-04T07:41:19Z",
    "closed_at": "2017-07-06T23:25:37Z",
    "labels": [
      "question",
      "type: docs"
    ],
    "url": "https://github.com/sequelize/sequelize/issues/6540",
    "body": "Where is reasonable example for `[options.include[].on]`?  All you give is this:\n\n> Supply your own ON condition for the join.\n\nIt is not enough.\n",
    "comments_url": "https://api.github.com/repos/sequelize/sequelize/issues/6540/comments",
    "author": "wzup",
    "comments": [
      {
        "user": "mickhansen",
        "created_at": "2016-09-05T06:42:05Z",
        "body": "It supports everything that `where` does\n"
      },
      {
        "user": "felixfbecker",
        "created_at": "2016-09-05T08:21:23Z",
        "body": "You can do a PR to improve the docs\n"
      },
      {
        "user": "stale[bot]",
        "created_at": "2017-06-29T12:23:36Z",
        "body": "This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. If this is still an issue, just leave a comment 🙂\n"
      },
      {
        "user": "sfertman",
        "created_at": "2017-11-13T23:38:40Z",
        "body": "@mickhansen @felixfbecker. Still unclear whether it overwrites existing association between models? Seems so, but without clear docs and examples there's a lot of trial and error one must do if one is not the one who build it.... For now it seems that the only safe way to join tables is to work with `where` and not use the `on` key. Plus,  unlike SQL, `on` doesn't seem to be able to join arbitrary tables without defining association on them. No sure if this is a different issue/bug or if this is by design."
      }
    ]
  },
  {
    "number": 6477,
    "title": "I'm using the following code to set up a Sequelize 3.24.1",
    "created_at": "2016-08-20T16:17:12Z",
    "closed_at": "2016-08-20T16:28:54Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/sequelize/sequelize/issues/6477",
    "body": "## What you are doing?\n\nWhen i try to create a sequelize object i receive this error:\n\n```\n/Users/ramonllompartpol/RamonCuni/loxone-api/node_modules/sequelize/lib/sequelize.js:132\n    options.dialect = urlParts.protocol.replace(/:$/, '');\n                                       ^\n\nTypeError: Cannot read property 'replace' of null\n```\n\nThis is my code:\n\n``` js\nimport fs from 'fs';\nimport path from 'path';\nimport Sequelize from 'sequelize';\n\nimport Config from '../config';\n\nconst env = process.env.NODE_ENV;\nconst basename = path.basename(module.filename);\nconst db = {};\nconst config = new Config(env);\nconst sqlConfig = config.getSQLConfig(env);\n\nconsole.log('config', sqlConfig);\n\nconst sequelize = new Sequelize(sqlConfig);\n```\n\nThe console.log get this info:\n\n```\nconfig {\"username\":\"root\",\"password\":\"RCuni0716\",\"database\":\"loxone\",\"host\":\"127.0.0.1\",\"port\":3306,\"dialect\":\"mysql\",\"define\":{\"charset\":\"utf8\",\"collate\":\"utf8_general_ci\"},\"syncOnAssociation\":true}\n```\n\n__Dialect: mysql\n__Database version: 5.7.13\n__Sequelize version: 3.24.1\n",
    "comments_url": "https://api.github.com/repos/sequelize/sequelize/issues/6477/comments",
    "author": "cuni0716",
    "comments": [
      {
        "user": "felixfbecker",
        "created_at": "2016-08-20T16:28:54Z",
        "body": "Seems like `sqlConfig` is a JSON string and therefor treated as a connection URI, which of course results in a parsing error. You need to pass an actual object to the Sequelize constructor or a connection URI.\n"
      }
    ]
  },
  {
    "number": 3237,
    "title": "Question: raw:true in the relational queries",
    "created_at": "2015-02-27T18:17:33Z",
    "closed_at": "2015-02-28T12:44:52Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/sequelize/sequelize/issues/3237",
    "body": "Hi,\n\nAssuming I have the next relations described:\n\n``` javascript\n    models.User.belongsToMany(models.Role,{through:'user__role',foreignKey:'users_id',otherKey:'roles_id'});\n```\n\nSo in the code I do the next:\n\n``` javascript\nUser.find(2298139).then(function(user){\n                    user.getRoles().then(function(roles){\n                        console.log(roles);\n                        reply(roles);\n                    });\n                });\n```\n\nAnd I want to receive the plain result, without the sequelize wrappings.\n\nThe questions are:\n1. How and where should I inject `{options: {raw: true}}`\n2. How can I know that the `raw:true` had worked? I mean how the roles object would be different then?\n\nLooking forward to receive any answer.\n\nRegards,\n",
    "comments_url": "https://api.github.com/repos/sequelize/sequelize/issues/3237/comments",
    "author": "PavelPolyakov",
    "comments": [
      {
        "user": "mickhansen",
        "created_at": "2015-02-28T08:25:47Z",
        "body": "likely `user.getRoles({raw: true})`.\nYou would know it by roles not being instances, and just being POJOs.\n"
      },
      {
        "user": "PavelPolyakov",
        "created_at": "2015-02-28T08:53:32Z",
        "body": "@mickhansen \n\nThanks for the response.\n\nThe thing is, that I receive the same object each time, it looks like this:\n\n``` javascript\n[ { dataValues: { id: '606', name: 'USER', client: null, user__role: [Object] },\n    _previousDataValues: { id: '606', name: 'USER', client: null, user__role: [Object] },\n    __options: \n     { timestamps: false,\n       createdAt: 'createdAt',\n       updatedAt: 'updatedAt',\n       deletedAt: 'deletedAt',\n       instanceMethods: [Object],\n       classMethods: {},\n       validate: {},\n       freezeTableName: true,\n       underscored: false,\n       underscoredAll: false,\n       paranoid: false,\n       whereCollection: [Object],\n       schema: null,\n       schemaDelimiter: '',\n       defaultScope: null,\n       scopes: null,\n       hooks: {},\n       name: [Object],\n       indexes: [],\n       getterMethods: {},\n       tableName: 'role',\n       omitNull: false,\n       sequelize: [Object],\n       uniqueKeys: {},\n       hasPrimaryKeys: true },\n    options: \n     { isNewRecord: false,\n       isDirty: false,\n       include: [Object],\n       includeNames: [Object],\n       includeMap: [Object],\n       includeValidated: true,\n       attributes: [Object],\n       raw: true },\n    hasPrimaryKeys: true,\n    __eagerlyLoadedAssociations: [],\n    isNewRecord: false,\n    user__role: \n     { dataValues: [Object],\n       _previousDataValues: [Object],\n       __options: [Object],\n       options: [Object],\n       hasPrimaryKeys: true,\n       __eagerlyLoadedAssociations: [],\n       isNewRecord: false } } ]\n```\n\nI've tried to do:\n\n``` javascript\nuser.getRoles()\nuser.getRoles({raw: true})\nuser.getRoles({options:{raw: true}})\n```\n\nAs I understand, it's expected that I would receive something like:\n\n``` javascript\n[{\n    id: \"606\",\n    name: \"USER\",\n    client: null,\n    user__role: {\n        users_id: \"2294553\",\n        roles_id: \"606\"\n    }\n}]\n```\n\nAm I right? Or I already receive the raw object?\n"
      },
      {
        "user": "mickhansen",
        "created_at": "2015-02-28T12:33:27Z",
        "body": "Try `user.getRoles({}, {raw: true})`\n"
      },
      {
        "user": "PavelPolyakov",
        "created_at": "2015-02-28T12:44:52Z",
        "body": "@mickhansen \nCool, this works!\n"
      }
    ]
  },
  {
    "number": 3225,
    "title": "[Question]: Just how deprecated are '2x hasMany' relationships?",
    "created_at": "2015-02-25T17:54:49Z",
    "closed_at": "2015-04-27T19:46:30Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/sequelize/sequelize/issues/3225",
    "body": "First: Thanks for the continued hard work on Sequelize and congrats on the recent release of 2.0!\n\nSecond: Can you please elaborate on the current deprecated state of '2x hasMany' relationships as of version 2.0.3? We just updated from version 2.0-rc2 and while nothing is breaking our unit tests and behaviour appears normal, we just want to understand whether sequelize is politely warning us about our relationships for posterity or whether action has already been taken in the ORM not to honour these types on some fundamental level.\n\nFurthermore, how does this change affect issues #1997 and #2459 ? Is this still considered a bug that will be fixed, or does belongsToMany solve this problem? We ended up using a 2x hasMany style relationship to solve the problem described in these issues.\n\nThank you\n",
    "comments_url": "https://api.github.com/repos/sequelize/sequelize/issues/3225/comments",
    "author": "bitwit",
    "comments": [
      {
        "user": "mickhansen",
        "created_at": "2015-02-25T18:22:49Z",
        "body": "It's deprecated as in eventually we will completely remove the functionality. But we won't do that for atleast a few minor (2.x.0) versions.\n\nFor the near future it means that it won't receive any features or bug fixes, which belongsToMany will.\nThe two issues you are referring to will be fixed for belongsToMany, when we get to them, and will most likely not be backported to 2 x hasMany.\n"
      },
      {
        "user": "dag10",
        "created_at": "2015-03-01T02:29:24Z",
        "body": "What would be the correct way to associate the following models:\n\nThere's four models: User, Room, Song, and SongStatistic. The SongStatistic model contains these fields:\n- user\n- room\n- song\n- event (enum)\n\nMany SongStatistic models can exist, describing an event (enum) that occurred on a song, by a user, in a room, at a time (has a timestamp too).\n\nIn 2.x-rc, I was using SongStatistic.belongsTo(User), SongStatistic.belongsTo(Room), and SongStatistic.belongsTo(Song). However, the docs say that belongsTo must be used only for 1:1 relationships, whereas this is a 1:MMM.\n\nI can't use Song.belongsToMany(User, {through: SongStatistic}), since that leaves out the Room association. Does this make sense?\n\nIn the doc for 2.0.3, I can't find any association that's appropriate for this schema.\n"
      },
      {
        "user": "mickhansen",
        "created_at": "2015-03-02T08:33:25Z",
        "body": "belongsTo can be used in 1:M aswell, if the docs state only 1:1 there must be an error :)\nbelongsToMany won't work with multiple associations as  you've deduced, i would keep doing what you're doing (doing the through association by hand with multiple hasMany/belongsTo).\n"
      }
    ]
  },
  {
    "number": 3210,
    "title": "How to populate a table through migrations?",
    "created_at": "2015-02-24T10:35:25Z",
    "closed_at": "2015-02-24T16:44:32Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/sequelize/sequelize/issues/3210",
    "body": "Hi there:\n\nI've set up a project with it's Models and the tables are created automatically by sequelize.\nI've also set up umzug to run the pending migrations automatically.\n\nSo far so good. Is there a simple way to populate a table through a migration?\nHaving a table 'Country' and a SQL to populate it how would my 'up' section look like?\nIs there a doc page where I can look for the right params to use use `QueryInterface.insert()`? \n\nThanks in advance for the help.\n\nEDIT: Using Sequelize 2.0.3\n",
    "comments_url": "https://api.github.com/repos/sequelize/sequelize/issues/3210/comments",
    "author": "sandokanelcojo",
    "comments": [
      {
        "user": "mickhansen",
        "created_at": "2015-02-24T11:37:00Z",
        "body": "You shouldn't interface with `QueryInterface` directly.\nUse `sequelize.query` or `Model.bulkCreate`.\n"
      },
      {
        "user": "sandokanelcojo",
        "created_at": "2015-02-24T16:22:36Z",
        "body": "Thanks a lot.\nI went with `Model.bulkCreate`.\nHere I leave a snippet in case it helps someone:\n\n```\nvar countries = [\n    {code: 'ZMB', name: 'Zambia'},\n    {code: 'ZWE', name: 'Zimbabwe'},\n ];\n\nup: function (sequelize, Sequelize) {\n    sequelize.models.Country.bulkCreate(countries, null)\n      .then(function (models) {\n        console.log(models);\n      });\n},\ndown...\n```\n\nRegards.\n"
      },
      {
        "user": "barmatz",
        "created_at": "2015-02-27T15:52:40Z",
        "body": "+1\n\nI was looking for a workaround for a while.\nThis is my solution when the model is not available yet.\n\n``` js\nmodule.exports = {\n  up: function(migration, DataTypes, done) {\n    migration.createTable('Currencies', {\n      id: {\n        type: DataTypes.INTEGER,\n        primaryKey: true,\n        autoIncrement: true\n      },\n      createdAt: {\n        type: DataTypes.DATE\n      },\n      updatedAt: {\n        type: DataTypes.DATE\n      },\n      name: {\n        type: DataTypes.STRING,\n        allowNull: false\n      },\n      code: {\n        type: DataTypes.STRING,\n        allowNull: false\n      },\n      entity: DataTypes.STRING\n    }).complete(function () {\n      migration.sequelize.query(migration.QueryGenerator.bulkInsertQuery('Currencies', [{\n        name: 'United States dollar',\n        code: 'USD',\n        entity: '&#36;'\n      }, {\n        name: 'Euro',\n        code: 'EUR',\n        entity: '&#8364;'\n      }])).complete(done);\n    });\n  },\n  down: function(migration, DataTypes, done) {\n    migration.dropTable('Currencies').complete(done);\n  }\n};\n\n```\n\nIt would be great if the documentation would reflect the various ways to do this.\n"
      },
      {
        "user": "AlexisNo",
        "created_at": "2016-11-08T20:19:47Z",
        "body": "> you shouldn't interface with QueryInterface directly.\n\n@mickhansen What is wrong about that? This is an example of the solution I use: \n\n``` javascript\n'use strict';\nmodule.exports = {\n  up: function(queryInterface, Sequelize) {\n    return queryInterface.bulkInsert('roles', [{\n      label: 'user',\n      createdAt: new Date(),\n      updatedAt: new Date()\n    }, {\n      label: 'admin',\n      createdAt: new Date(),\n      updatedAt: new Date()\n    }]);\n  },\n  down: function(queryInterface, Sequelize) {\n    return queryInterface.bulkDelete('roles', null, {});\n  }\n};\n```\n\nIs there something wrong about it? I usually do not insert data in migration files and use seeders, but in some cases, it can be relevant.\n\nAbout using `Model.bulkCreate()`, wouldn't it be susceptible to break the migration suite one day? Migration files should be immutable while a model definition can evolve. When a model evolves, I create a new migration file but do not alter the previous one so that new deployments do not require to rebuild the database completely. If a migration file references a model, an update of this model could break the migration suite.\n"
      },
      {
        "user": "felixfbecker",
        "created_at": "2016-11-08T20:27:57Z",
        "body": "We moved more towards making QueryInterface public API, so no problem with that.\n"
      },
      {
        "user": "darkotuning",
        "created_at": "2018-09-06T18:31:44Z",
        "body": "Is it possible that the seed is full of data at one time? I would like to have a lot of data in tables using the faker but not to run the anchor command many times but to do it all at once? Thank you\r\n"
      }
    ]
  },
  {
    "number": 3192,
    "title": "Allow properties to be defined as not saved on update by default",
    "created_at": "2015-02-21T07:12:45Z",
    "closed_at": "2015-02-21T21:30:16Z",
    "labels": [
      "type: feature",
      "question"
    ],
    "url": "https://github.com/sequelize/sequelize/issues/3192",
    "body": "Most database structures have have at least one column in one of their tables which by definition either **never** updates or is only ever updated in very explicit circumstances.\n\nFor example the `userid:STRING` of a User table nearly never changes, you'd only ever change it explicitly in a user rename call.\n\nAnd if you have something like an Emails table, the `email:STRING` would by definition never change since it's a row describing that email and any email change would be a row removal/addition.\n\nRunning `.save()` on these models results in the `UPDATE` doing a set for these properties. This is unnecessary, most often unwelcome, and doesn't match what a developer would normally write.\n\nOne option would be to let define accept a column option that says not to save the column on update by default. Then an `UPDATE` on a normal `.save()` or `.save(['otherColumn'])` would omit updating that column. But the column could still be explicitly updated by including it in the array of columns to save.\n\nNot sure what to name it.\n",
    "comments_url": "https://api.github.com/repos/sequelize/sequelize/issues/3192/comments",
    "author": "dantman",
    "comments": [
      {
        "user": "mickhansen",
        "created_at": "2015-02-21T09:55:04Z",
        "body": "What version are you using?\n`.save()` should not be updating unchanged fields anymore by default.\nIn any case `save` does support a `fields` option that you could use.\n"
      },
      {
        "user": "dantman",
        "created_at": "2015-02-21T21:30:16Z",
        "body": "I'm using `2.0.0-rc8` right now. I upgraded from `2.0.0-rc2` and `2.0.0-dev13`. And at one point in the past was using `1.7.9`.\n\nI wasn't aware that Sequelize had updated to doing full delta saves.\n\nI guess I should also re-examine the behavior of the methods that do implicit \"set these properties, then save them\". Since .setAttributes or whatever instances had back in `1.7.9` is gone now.\n"
      },
      {
        "user": "mickhansen",
        "created_at": "2015-02-21T21:51:48Z",
        "body": "`setAttributes` was refactored to map to `set`\n"
      },
      {
        "user": "dantman",
        "created_at": "2015-02-21T22:02:11Z",
        "body": "I think you mean `.update`.\n\nI remember in the past there was a method, which I believe was `.setAttributes`, I avoided because while it's purpose was to implicitly accept an object of values to change and then implicitly save them, calling it would also save other unrelated attributes including the ones you don't want saved by default. So I started explicitly setting my properties and then running save with the list of fields to update.\n"
      },
      {
        "user": "mickhansen",
        "created_at": "2015-02-21T22:15:27Z",
        "body": "No i meant `setAttributes`.\n\n`updateAttributes` has been mapped to `update`.\nThe semantics of `update` was also changed to only update a intersection of changed attributes and  the attributes passed to `update`\n"
      }
    ]
  },
  {
    "number": 3162,
    "title": "How to associate model to another model by two foreignKeys ?",
    "created_at": "2015-02-18T17:23:04Z",
    "closed_at": "2017-07-06T23:25:07Z",
    "labels": [
      "question",
      "stale"
    ],
    "url": "https://github.com/sequelize/sequelize/issues/3162",
    "body": "Let's imagine situation\n\nYou have two models:\n**event_user** with attributes: _id_\n**event_user_message** with attributes: _user_from_id, user_to_id_\n\n**You want to get _20_ event_users that were in contact (by message/s) with user X**\n\n**definition of associations**\n\n```\nEventUser.hasMany(eventUserMessages, as: \"from\", foreignKey: \"user_from_id\")\nEventUser.hasMany(eventUserMessages, as: \"to\", foreignKey: \"user_to_id\")\n\nEventUserMessages.belongsTo(eventUser, as: \"from\", foreignKey: \"user_from_id\")\nEventUserMessages.belongsTo(eventUser, as: \"to\", foreignKey: \"user_to_id\")\n```\n\n**Solution 1**\n_problem_: _in this case I get only users that had two ways conversation_\n\n```\nvar include, limit, where;\nlimit = parameters.limit ? parameters.limit : 20;\n\ninclude.push({\n  model: models.eventUserMessages,\n  as: \"to\",\n  where: {user_from_id: parameters.inConnectionWith}\n  attributes: []\n});\ninclude.push({\n  model: models.eventUserMessages,\n  as: \"from\",\n  where: {user_to_id: parameters.inConnectionWith}\n  attributes: []\n});\n\neventUserModel.findAll({\n  include: include,\n  where: where\n})\n```\n\n**Solution 2**\nIn this solution you get all expected result\n_problem_: _in this solutions is you can not use Limit (does not work)_\n\n```\ninclude.push({\n  model: models.eventUserMessages,\n  as: \"to\",\n  required: false,\n  attributes: []\n});\ninclude.push({\n  model: models.eventUserMessages,\n  as: \"from\",\n  required: false,\n  attributes: []\n});\n\nwhere = Sequelize.and(where, Sequelize.or({\n  \"to.user_from_id\": parameters.inConnectionWith\n}, {\n  \"from.user_to_id\": parameters.inConnectionWith\n}));\n\neventUserModel.findAll({\n  include: include,\n  where: where\n})\n```\n\nwill appreciate if you provide some suggestions about how to achieve this\nthanks in Advance\n",
    "comments_url": "https://api.github.com/repos/sequelize/sequelize/issues/3162/comments",
    "author": "ondrasak",
    "comments": [
      {
        "user": "mickhansen",
        "created_at": "2015-02-18T18:41:11Z",
        "body": "I'm not sure there are any other ways, we don't currently support overwriting the JOIN condition for an include, but i suppose that would be the real solution `JOIN table ON from_id = ? OR to_id ?`\n"
      },
      {
        "user": "stale[bot]",
        "created_at": "2017-06-29T13:22:17Z",
        "body": "This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. If this is still an issue, just leave a comment 🙂\n"
      }
    ]
  },
  {
    "number": 3082,
    "title": "Update a record by using an instance method on one of the fields (one query)",
    "created_at": "2015-02-09T18:30:59Z",
    "closed_at": "2015-02-12T23:38:59Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/sequelize/sequelize/issues/3082",
    "body": "Hi,\n\n  First off - sequelize has been a pleasure to work with.  Been helping much on a project I'm working on.  Digging around github, looks like LOTS of hard and mindful work has been put in.  Thanks. \n\n  I was wondering if it was possible to use a Model's instance method in the updating of a specific row.  The preference is to generate one update query (update... where...) and keep associated Model functionality, like creating a UUID, in the Model without replicating elsewhere.  So doing a find first, then an update would allow me to use instance methods (or getters/setters) on the Model, but would be an example of two queries.  I could also do an update() call with where clause, but would have to re-create the functionality in my model, like the generation of a UUID, and use that inside my update().  \n\nI'm using 2.0.0-rc8 with postgres.\n\nModel:\nI've simplified the Model here...\n\n``` javascript\nmodule.exports = function(sequelize, DataTypes) {\n  var tableA = sequelize.define(\"tableA\", {\n    id: {\n      type: DataTypes.UUID,\n      primaryKey: true,\n      defaultValue: DataTypes.UUIDV4,\n    }\n  }, {\n    classMethods: {\n      associate: function(models) {\n        tableA.belongsTo(models.tableB);\n      }\n    },\n    instanceMethods: {\n      newUUID: function() {\n        return uuid.v4();  // required sequelize's module dependency on node-uuid to enable this\n      }\n    }\n  });\n```\n\n  There are three ways I was trying to make this happen, and I'm probably just missing something...\n\n1.Using the update method:\n\n``` javascript\ntableA.update({\n      id: this.newUUID,\n    }, {\n      where: {\n        tableB_id: 'some value'\n      }\n    }\n  );\n```\n\nThe problem is that 'primaryKey' is considered null and this violate a not-null constraint - my understanding is that Model instance methods, and getters/setters require an instance to be created first, hence the issue.  I've observed this occurring with a field that is allowNull: false too.\n\n2.Building to generate an instance method:\n\n``` javascript\nvar tableUpdate = models.tableA.build({\n    id: this.newUUID,\n  }, {\n    isNewRecord: false  // to make this an update and NOT a create\n  });\n```\n\nThis works in providing me access to an instance method or a getter/setter, however I can't figure out how to limit the update to a \"where\" on a foreign key field.\n\n3.Creating a public function, outside sequelize, as a helper of sorts:\n\n``` javascript\nmodule.exports = function(sequelize, DataTypes) {\n  var tableA = sequelize.define(\"tableA\", {\n    id: {\n      type: DataTypes.UUID,\n      primaryKey: true,\n      defaultValue: DataTypes.UUIDV4,\n    }\n  }, {\n    classMethods: {\n      associate: function(models) {\n        tokenA.belongsTo(models.tableB);\n      }\n    }\n  });\n\n  tableA.newUUID = function() {\n    return uuid.v4();\n  }\n\n... then later on \n\n    tableA.update({\n      id: tableA.newUUID,\n    }, {\n      where: {\n        tableB_id: 'some value'\n      }\n    }\n  );\n```\n\nThis works, but its nature does not make it exclusive to a model's instance.  Maybe its good enough - it opens the door for a model helper file. \n\nIf it's not possible to do such a thing with one query, is it reasonable to request an options.where for a build? Or possibly some other solution?\n\nI may have overcomplicated things with my desire for one query vs two.  I'm open to any suggestions/best-practices.\n\nThanks.\n",
    "comments_url": "https://api.github.com/repos/sequelize/sequelize/issues/3082/comments",
    "author": "shaiherman",
    "comments": [
      {
        "user": "janmeier",
        "created_at": "2015-02-10T08:47:07Z",
        "body": "I think you should be able to call the instance method like this:\n\n``` js\ntableA.update({\n  id: tableA.Instance.prototype.newUUID(),\n}, {\n  where: {\n    tableB_id: 'some value'\n  }\n});\n```\n"
      },
      {
        "user": "shaiherman",
        "created_at": "2015-02-10T22:36:42Z",
        "body": "That works!  Thanks.\n\nMade me dig around models.js and understand things a lil better - appreciate it. \n"
      }
    ]
  },
  {
    "number": 3069,
    "title": "How does one find and filters data from multiple tables?",
    "created_at": "2015-02-08T01:01:03Z",
    "closed_at": "2015-02-08T16:37:08Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/sequelize/sequelize/issues/3069",
    "body": "Hello,\n\nI have a situation in my code where I have to basically \"merge\" different lists of data ordered by date created.\n\nSo, for example, let's say I have 3 tables. One is of dinners a person has had recently, another lunches, and another breakfasts. Now let's say I want to get a list of all the meals this person has had in order of newest to oldest. (And also, let's assume this person has skipped a couple meals here and there.)\n\nI have a method in mind of doing this myself, but I was wondering if there was a better way already included in SequelizeJS?\n\nThanks,\nNathan\n",
    "comments_url": "https://api.github.com/repos/sequelize/sequelize/issues/3069/comments",
    "author": "NathanFlurry",
    "comments": [
      {
        "user": "NathanFlurry",
        "created_at": "2015-02-08T05:40:49Z",
        "body": "So I eventually decided to write the functionality I want to have in SequelizeJS. (Pretend that b, l, and d are SQL tables.)\n\n```\n// Utils\nvar println = console.log // Sorry, I'm a Swift developer, I always accidentally type \"println\" instead of \"console.log\"\n\n// Data\n// Pretend b, l, and d are all different MySQL tables\nvar data = {\n    b: [ // Breakfasts\n        {\n            food: \"Eggs\",\n            time: 0\n        },\n        {\n            food: \"Bacon\",\n            time: 1\n        },\n        {\n            food: \"Food\",\n            time: 2\n        },\n        {\n            food: \"Apples\",\n            time: 3\n        },\n        {\n            food: \"Pizza\",\n            time: 4\n        },\n        {\n            food: \"More food\",\n            time: 5\n        }\n    ],\n    l: [ // Lunches\n        {\n            food: \"Sadwich\",\n            time: 0.5\n        },\n        {\n            food: \"Salantro\",\n            time: 1.3\n        },\n        {\n            food: \"More gross stuff\",\n            time: 5.7\n        }\n    ],\n    d: [ // Dinners\n        {\n            food: \"Cereal\",\n            time: 0.9\n        },\n        {\n            food: \"Beans\",\n            time: 2.8\n        },\n        {\n            food: \"Pizza\",\n            time: 3.9\n        },\n        {\n            food: \"Something\",\n            time: 5.8\n        }\n    ]\n}\n\n\n\n\n/*\n// Let's pretend we can't just do this simple solution, since you can't quite do this with SequelizeJS\nvar mergedList = []\nfor (var i in data.b) {\n    mergedList.push(data.b[i])\n}\nfor (var i in data.l) {\n    mergedList.push(data.l[i])\n}\nfor (var i in data.d) {\n    mergedList.push(data.d[i])\n}\nmergedList.sort(function(a,b) { return a.time - b.time })\nprintln(mergedList)\n*/\n\nfunction mergeLists() {\n    // Make \"arguments\" usable\n    var args = []\n    for (var i = 0; i < arguments.length; ++i) args[i] = arguments[i]\n\n    var queuedItems = {} // Items that are qued to be tested\n    var indexes = {} // Indexes of items that are in the queu\n\n    // Set initial indexes for all the items in the args\n    for (var i in args) {\n        indexes[i] = 0\n    }\n\n    // Set the default ques\n    for (var i in indexes) {\n        queuedItems[i] = args[i][0]\n    }\n\n    function nextItem() {\n        var n = Object.keys(indexes)[0] // Set a default newest item\n\n        // If there are no more keys, then break\n        if (n == null) {\n            return null\n        }\n\n        // Find the least of the qued values\n        for (var i in queuedItems) {\n            var nValue = args[n][indexes[n]] // Value of current record item\n            var iValue = args[i][indexes[i]] // Value of item being tested\n\n            if (n && nValue && iValue && iValue.time < nValue.time ) {\n                n = i // If the tested item is newer than the old recore, set the new record\n            }\n        }\n\n        // Store a return value\n        var returnValue = [n, args[n][indexes[n]]][1]\n\n        indexes[n]++ // Incrememnt by one\n        queuedItems[n] = args[n][indexes[n]] // Set value to the new index\n\n        // Delete keys if that list is done with\n        if (queuedItems[n] == null) {\n            delete indexes[n]\n            delete queuedItems[i]\n        }\n\n        return returnValue\n    }\n\n    // Make a list of the items\n    var sorted = []\n    while (sorted.length == 0 || sorted[sorted.length - 1] != null) { // If the list has not been started yet or the last item is not a value\n        sorted.push(nextItem()) // Add the next item to the array\n    }\n\n    sorted.pop() // Remove the last item off the list, since it is null\n\n    return sorted\n}\n\nprintln(mergeLists(data.b, data.l, data.d))\n```\n\nThanks!\n\nP.S. LMK if there's a more efficient way to do what I did, since I basically hacked out some code.\n"
      },
      {
        "user": "janmeier",
        "created_at": "2015-02-08T11:18:13Z",
        "body": "Not quite sure what you want to do here ... You showed a lot of javascript code, and not a lot of sequelize / sql. Do you already have the tables defined in sequelize or is this a purely theoretical question? \n\nIf the tables are related in some way you can load the at once using eager loading. But merging them into one list needs to be done in js, or using raw sql\n"
      },
      {
        "user": "NathanFlurry",
        "created_at": "2015-02-08T16:37:08Z",
        "body": "@janmeier Sorry, as I said in the comments, I'm demonstrating the functionality I'd like to see done with my SQL tables (this is not actual code that works with Sequelize). Anyways, you basically answered my question: It's not included in Sequelize. Sorry for not making that clear.\n\nThanks,\nNathan\n"
      }
    ]
  },
  {
    "number": 3068,
    "title": "Using Lodash 3.x _.matches() cannot filter/find/findIndex to the result Array.",
    "created_at": "2015-02-07T08:54:33Z",
    "closed_at": "2015-03-24T15:24:03Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/sequelize/sequelize/issues/3068",
    "body": "I use the 2.0.0-rc3. And when I upgrade by Lodash module to 3.1.0, I find the functions that using _.matches as the filter function will be failed.\nCheck ChangeLog and Code of Lodash, I find it is because the _.matches() will check hasOwnProperty() of object in array, and when using on the DAO object, which using get() to translate dataValues to direct property access, hasOwnProperty(DAO, datakey) will return false, that cause the function fail to get the result.\nCurrently I have to hack the Lodash code to remove the hasOwnProperty check for object. But it looks unsafe. Can Sequelizejs change the implements to fit the Lodash 3.x?\n",
    "comments_url": "https://api.github.com/repos/sequelize/sequelize/issues/3068/comments",
    "author": "jchbh-duplicate",
    "comments": [
      {
        "user": "janmeier",
        "created_at": "2015-02-08T10:43:42Z",
        "body": "Over time we would like to move all access to `get()`, so placing the values directly on the DAO is unfortunately not a possibility. I'd suggest adding a predicate function to your filter that returns `get()`.\n\nI realize this might not be ideal... If you show some of your code we might be able to give suggestions as to how to rework it\n"
      },
      {
        "user": "jchbh-duplicate",
        "created_at": "2015-02-09T07:20:31Z",
        "body": "The workable way is using the long-style match function to done the .matches short-cut actions,\nfor example: \n\nIn lodash 2.4.x: \n\n``` js\noneModel.findAll({where:{...}).then(function(instances){\n   var targetInstance =  _.find(instances, {group: 1}); // it will call .matches() to generate match function. \n})\n```\n\nit is really OK and elegant.\n\nBut in lodash 3.1.0, workable version should be \n\n``` js\noneModel.findAll({where:{...}).then(function(instances){\n   var targetInstance =  _.find(instances, function(instance){return instance.group === 1});\n})\n```\n\nIt can work but not elegant.\n\nLooking into the code of Lodash, you can find this is because Lodash 3.x restrict the comparable properties should only belong to the object (by check hasOwnProperty).\n\nI also know you concern about the get(). so do I. I am also using the Hook function to add some helper attributes to the instanceObject by the magic of get(). \nCurrently I can fork an Lodash and close the check code. But I think it is really a problem if Lodash does not want to change the check logic of _.matches in future versions.\n"
      },
      {
        "user": "janmeier",
        "created_at": "2015-02-09T07:23:17Z",
        "body": "I see your issue, but I also see lodash's desire to only use own properties... Not sure we have a good solution here.\n\n@mickhansen ?\n"
      },
      {
        "user": "janmeier",
        "created_at": "2015-03-24T15:24:03Z",
        "body": "This is not something we are going to change in sequelize, and likely not something that will change in lodash either.\nYou'll just have to go for the slightly longer version\n"
      }
    ]
  },
  {
    "number": 3015,
    "title": "ORDER BY applied incorrectly with nested includes",
    "created_at": "2015-01-27T23:01:26Z",
    "closed_at": "2015-01-28T19:14:13Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/sequelize/sequelize/issues/3015",
    "body": "I'm trying to get the last few files like this:\n\n```\ndb.files.findAll(\n      {\n        where: {\n          id: id,\n          company_id: company_id,\n        },\n        include: [\n          {model: db.datasource, include: [db.job]}\n        ],\n        limit: 4,\n        order: 'created_at DESC'\n      }\n    )\n```\n\nIt generates a query like this:\n\n```\nSELECT \"filesToMap\".*, [... AS ...]\nFROM (SELECT \"files\".\"id\", [...COLUMNS... ]\n      FROM \"files\" AS \"files\" WHERE \"files\".\"company_id\"='1659' LIMIT 4) \n  AS \"files\" LEFT OUTER JOIN \"datasources\" AS \"datasource\" ON \"files\".\"datasource_id\" = \"datasource\".\"id\" \n  LEFT OUTER JOIN \"jobs\" AS \"datasource.jobs\" ON \"datasource\".\"id\" = \"datasource.jobs\".\"datasource_id\" \nORDER BY created_at DESC;\n```\n\nNotice the created_at is at the end, it should be after the LIMIT 4. I end up getting the first files rather than the last.\n",
    "comments_url": "https://api.github.com/repos/sequelize/sequelize/issues/3015/comments",
    "author": "marcus",
    "comments": [
      {
        "user": "mickhansen",
        "created_at": "2015-01-28T10:00:26Z",
        "body": "Hi @marcus \n\nThis might be a bit confusing but the syntax you're using is for raw orders so we don't know where to place it.\n\nIf you use:\n\n``` js\norder: [\n  ['created_at', 'DESC']\n]\n```\n\nWe know that you mean `created_at` on the main table and it will be inside the subquery.\n"
      },
      {
        "user": "marcus",
        "created_at": "2015-01-28T17:39:15Z",
        "body": "Huh. Yes, that is confusing but it works! Thank you very much for answering!\n"
      },
      {
        "user": "mickhansen",
        "created_at": "2015-01-28T19:14:13Z",
        "body": "Yes but thats because `order: string` is use literally.\n"
      }
    ]
  },
  {
    "number": 2994,
    "title": "Inserting the same record with Promise.settle or promise.all fails to find existing orders",
    "created_at": "2015-01-23T19:23:08Z",
    "closed_at": "2015-03-24T14:56:29Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/sequelize/sequelize/issues/2994",
    "body": "I have a model with a unique constraint on a field (order_id). I want to save a bunch of orders, some might be duplicated like this:\n\n```\n[{order_id: 123, ...}, {order_id: 345, ...}, {order_id: 123, ...}]\n```\n\nI have a writeOrder function that returns a promise that writes the order. If the order doesn't exist, it writes a new one, otherwise it should find and update the existing order.\n\nThe problem is that it using writeOrder within promise.settle or promise.all never finds an existing order. It always only tries to write new orders, causing validation errors because of the unique constraint. I've tried switching between creating and upserting, but it never finds the existing order.\n\nIt seems like somewhere I should be able to tell sequelize to actually hit the database to find the existing order before trying to write it.\n\nIf this isn't clear, let me know and I can post more code.\n",
    "comments_url": "https://api.github.com/repos/sequelize/sequelize/issues/2994/comments",
    "author": "marcus",
    "comments": [
      {
        "user": "marcus",
        "created_at": "2015-01-23T21:47:50Z",
        "body": "I noticed that the actual queries are 3 selects to find each order, then 3 writes. I would have expected a series of 3 \"select, write/update\" operations.\n\nI'm not sure the best way to avoid this, but for now I've gotten around it by filtering the records in memory before hand. I'm very interested to know if there's a better way. It seems like this could just be something I am doing wrong.\n"
      },
      {
        "user": "mickhansen",
        "created_at": "2015-01-24T16:05:25Z",
        "body": "Are you using findOrCreate?\nIt should actually be optimized for concurrency cases on unique keys.\n"
      },
      {
        "user": "janmeier",
        "created_at": "2015-03-24T14:56:27Z",
        "body": "Please show some actual code (model definition, test case and find call(s))\n\nAs mick mentioned, this could probably be handled using findOrCreate\n"
      }
    ]
  },
  {
    "number": 2892,
    "title": "Question: passing data from create to bulkcreate",
    "created_at": "2015-01-11T13:26:15Z",
    "closed_at": "2015-01-15T00:13:33Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/sequelize/sequelize/issues/2892",
    "body": "Hi guys,\n\nI'm having some trouble with passing data from create to bulkcreate.\n\nMy code looks like this:\n\n```\nTable.create({\n    userid: req.user.id,\n    tabletype:  req.body.tabletype,\n})\n.then(function(table){\n    Othertable.bulkCreate(req.body.othertabledata, {tableid: table.id});\n});\n```\n\nI would expect this code to: \n1. first create a single instance of table, \n2. then pass through the data of this instance to bulkcreate, and \n3. add the \"tableid\" to each of my records created by bulkcreate.\n\nHowever, the data being inserted in my tableid column ends up being \"null\".\n\nI've tried changing my code to represent an array rather than an object (as indicated in the API), but then sequelize gives me an error code.\n\nAny idea where I'm going wrong?\n\nThanks in advance!\n",
    "comments_url": "https://api.github.com/repos/sequelize/sequelize/issues/2892/comments",
    "author": "ghost",
    "comments": [
      {
        "user": "mickhansen",
        "created_at": "2015-01-11T17:09:08Z",
        "body": "The 2nd argument to `bulkCreate` is `options`, not default values.\nYou'll need to do something like:\n\n``` js\nbulkCreate(req.body.othertabledata.map(function (values) {\n  return _.extend(values, {tableid: table.id});\n});\n```\n"
      },
      {
        "user": "ghost",
        "created_at": "2015-01-15T00:13:33Z",
        "body": "Thanks @mickhansen Mick, that worked perfectly.\n\nFor those that look this up, @mickhansen's solution requires underscore.js:\nIn your terminal:\n\n```\nnpm install underscore --save\n```\n\nIn your app:\n\n```\nvar _ = require('underscore');\n```\n"
      },
      {
        "user": "mickhansen",
        "created_at": "2015-01-15T08:35:23Z",
        "body": "Or lodash ;)\n"
      }
    ]
  },
  {
    "number": 2877,
    "title": "Question: is there a way to have camelCase *and* underscored",
    "created_at": "2015-01-09T11:41:30Z",
    "closed_at": "2015-10-12T10:44:57Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/sequelize/sequelize/issues/2877",
    "body": "Is it possible to have `createdAt` in JavaScript but `created_at` in DB?\n",
    "comments_url": "https://api.github.com/repos/sequelize/sequelize/issues/2877/comments",
    "author": "JSteunou",
    "comments": [
      {
        "user": "mickhansen",
        "created_at": "2015-01-09T11:53:21Z",
        "body": "``` js\ncreatedAt: {\n  type: DataTypes.DATE,\n  field: 'created_at'\n}\n```\n"
      },
      {
        "user": "JSteunou",
        "created_at": "2015-01-09T12:17:41Z",
        "body": "Ho, I hoped for a magical option like `underscored` but only for columns :innocent: \n"
      },
      {
        "user": "mickhansen",
        "created_at": "2015-01-09T12:52:15Z",
        "body": "@JSteunou not currently i'm afraid.\n"
      },
      {
        "user": "JSteunou",
        "created_at": "2015-01-09T13:12:57Z",
        "body": "ok in that case I have an issue.\n\nIf I do as you wrote above I have this in my object when I inspect or do .get()\n\n```\nupdatedAt: Fri Jan 09 2015 14:06:36 GMT+0100 (CET),\ncreatedAt: Fri Jan 09 2015 14:06:36 GMT+0100 (CET),\ndeleted_at: undefined\n```\n\nit seems like when NULL in db, column arent translate to object property.\n"
      },
      {
        "user": "mickhansen",
        "created_at": "2015-01-09T13:37:05Z",
        "body": "@JSteunou hmm strange, it should just be null in that instance.\n"
      },
      {
        "user": "miguelcobain",
        "created_at": "2015-01-20T22:25:57Z",
        "body": "A global default configuration for this would be great.\n"
      },
      {
        "user": "mendenhallmagic",
        "created_at": "2015-02-28T20:59:35Z",
        "body": "Is the `underscored` option supposed to accomplish this? I only see `underscoredAll` mapping tableNames...am I missing something? \n"
      },
      {
        "user": "mickhansen",
        "created_at": "2015-03-02T08:33:55Z",
        "body": "@mendenhallmagic accomplish what exactly? `underscored` generally things as underscored, that includes timestamps.\n"
      },
      {
        "user": "mendenhallmagic",
        "created_at": "2015-03-03T04:23:56Z",
        "body": "Just want to make sure I understand correctly. I have the following sequelize instance:\n\n``` js\nvar sequelize = new Sequelize('sqlite:chat-test.db', {\n  define: {\n    freezeTableName: true,\n    timestamps: false,\n    underscored: true,\n  },\n  logging: false,\n})\n\n```\n\nand the following model:\n\n``` js\nmodule.exports = function (sequelize, DataTypes) {\n  return sequelize.define('chat', {\n    id: rowId,\n    chatId: {\n      field: 'chat_identifier',\n      type: DataTypes.STRING,\n    },\n    displayName: DataTypes.STRING,\n    roomName: DataTypes.STRING,\n  })\n}\n```\n\nShould all columns be snake_case in the db? I just ran a `sequelize.sync()` on a new sqlite file with 2.0.3, and the displayName and roomName fields in the resulting db are camelCased. I do have a patch on query-generator that I can PR...\n"
      },
      {
        "user": "mendenhallmagic",
        "created_at": "2015-03-03T04:38:39Z",
        "body": "Including my rowId module for completion's sake:\n\n``` js\nmodule.exports = {\n  field: 'ROWID',\n  type: 'INTEGER',\n\n  autoIncrement: true,\n  primaryKey: true,\n}\n```\n\nI'm not a sqlite or sequelize expert, but this shouldn't cause any related issues as far as I can tell.\n"
      },
      {
        "user": "mickhansen",
        "created_at": "2015-03-03T08:31:54Z",
        "body": "@mendenhallmagic Ah like that, no in this case underscored refers primarily to table names, the autogenerated timestamp columns and a few other bits, not genering attribute naming.\n"
      },
      {
        "user": "JSteunou",
        "created_at": "2015-10-12T10:44:57Z",
        "body": "I'm closing this since the question was answered and covered\n"
      }
    ]
  },
  {
    "number": 2823,
    "title": "Relationship between two tables",
    "created_at": "2015-01-03T04:15:25Z",
    "closed_at": "2015-03-02T17:20:39Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/sequelize/sequelize/issues/2823",
    "body": "I have `characters` and I have `character_inventory`, the `character` table have a primary key which is `guid` as do `character_inventory`, what I need to do is when I through:\n\n```\nCharacter.findOne({\n  where: { guid: 1 },\n  include: [models.CharacterInventory]\n})\n```\n\nThe Sequelize go inside the `character_inventory` get all the respective `character_inventory` and bring me this too. How can I do that?\n",
    "comments_url": "https://api.github.com/repos/sequelize/sequelize/issues/2823/comments",
    "author": "VictorQueiroz",
    "comments": [
      {
        "user": "dkushner",
        "created_at": "2015-01-03T04:34:27Z",
        "body": "I believe the `Model.findOne()` call applies an implicit `LIMIT 1` to the query result, meaning the query can never return more than one row meaning it cannot perform the join and group you're looking for. You need to use `Character.findAll({ where: { guid: 1 }, include: [models.CharacterInventory] })`.\n"
      },
      {
        "user": "mickhansen",
        "created_at": "2015-01-03T11:52:22Z",
        "body": "The findOne will still work with includes, especially when querying on a primary key, you'll have to provide more information @VictorQueiroz. It's not very clear what your issue is with the include.\n"
      },
      {
        "user": "mickhansen",
        "created_at": "2015-01-03T11:53:13Z",
        "body": "Or are you specifically asking to get only characters with guid 1 and only characterinventory with guid 1?\nIn that case you could do:\n\n``` js\nCharacter.findOne({\n  where: { guid: 1 },\n  include: [{model: models.CharacterInventory, where: {guid: 1}}]\n})\n```\n"
      },
      {
        "user": "janmeier",
        "created_at": "2015-03-02T17:20:39Z",
        "body": "Closing, no response\n"
      }
    ]
  },
  {
    "number": 2812,
    "title": "Syntax error on token \"catch\", Identifier expected",
    "created_at": "2014-12-31T03:47:53Z",
    "closed_at": "2015-01-01T10:16:06Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/sequelize/sequelize/issues/2812",
    "body": "Hi,\n\nI have used model destroy with catch() as code below,\n\n<pre>\nView.destroy({\n            where: {\n                id: viewid\n            }\n        }).then(function(){\n            console.log('success');         \n        }).catch(function(error) {\n              console.log('fail');\n        }); \n</pre>\n\nHas error in eclipse at row \n}).catch(function(error) {\nis \nSyntax error on token \"catch\", Identifier expected\n\nPlease help me resolve this error,\nThanks,\n",
    "comments_url": "https://api.github.com/repos/sequelize/sequelize/issues/2812/comments",
    "author": "ht10vn",
    "comments": [
      {
        "user": "mickhansen",
        "created_at": "2014-12-31T08:59:55Z",
        "body": "Are you getting the error from Node or Eclipse?\ncatch is technically a reserved word but it does not fail in modern javascript since it's still allowed as a prototype keyword.\n"
      },
      {
        "user": "ht10vn",
        "created_at": "2014-12-31T15:38:54Z",
        "body": "Error from the Eclipse,\nIn this case, I only want to handle when destroy fail.\nHave got any other case to handle the error. \n"
      },
      {
        "user": "mickhansen",
        "created_at": "2015-01-01T10:16:06Z",
        "body": "@ht10vn well Eclipse is wrong, not really much we can do about that :)\nAlternatively to catch you can use `.then(onSuccess, onError)` rather than just `.catch(onError)` although that catch is the better alternative imo.\n\nYou can also do `[\"catch\"]()`\n"
      }
    ]
  },
  {
    "number": 2784,
    "title": "Possible to have composite index that includes a belongsTo ?",
    "created_at": "2014-12-27T11:51:08Z",
    "closed_at": "2015-04-27T19:54:36Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/sequelize/sequelize/issues/2784",
    "body": "Something like below (which does not work)\n\n```\n  Tenants = sequelize.define \"Tenants\", \n    ...\n  ,\n    classMethods:\n      associate: (models) ->\n        Tenants.hasMany(models.Users)\n\n  Users = sequelize.define \"Users\",\n    username:\n      type: types.STRING\n      unique: 'users__tenant_username'\n      allowNull: false\n  ,\n    classMethods:\n      associate: (models) ->\n        Users.belongsTo(models.Tenants, {as: 'tenant', unique: 'users__tenant_username'})\n```\n",
    "comments_url": "https://api.github.com/repos/sequelize/sequelize/issues/2784/comments",
    "author": "memelet",
    "comments": [
      {
        "user": "mickhansen",
        "created_at": "2014-12-27T14:15:16Z",
        "body": "You can manually define the foreign key on the model and then use that foreign key in the belongsTo relation.\n\n``` js\ntenant_id: Types.INTEGER,\nunique: 'users__tenant_username'\n\nUser.belongsTo(models.Tenant, {foreignKey: 'tenant_id'})\n```\n"
      },
      {
        "user": "memelet",
        "created_at": "2014-12-29T04:52:40Z",
        "body": "Is this reopened because its confirmed to not work? It certainly does not for me:\n\n```\nSequelizeDatabaseError: ER_CANNOT_ADD_FOREIGN: Cannot add foreign key constraint\n    at [object Object].module.exports.Query.formatError (/Users/bkaplan/si/vi-security-users/node_modules/sequelize/lib/dialects/mysql/query.js:135:16)\n    at Query._callback (/Users/bkaplan/si/vi-security-users/node_modules/sequelize/lib/dialects/mysql/query.js:38:23)\n    at Query.Sequence.end (/Users/bkaplan/si/vi-security-users/node_modules/mysql/lib/protocol/sequences/Sequence.js:96:24)\n    at Query.ErrorPacket (/Users/bkaplan/si/vi-security-users/node_modules/mysql/lib/protocol/sequences/Query.js:93:8)\n    at Protocol._parsePacket (/Users/bkaplan/si/vi-security-users/node_modules/mysql/lib/protocol/Protocol.js:271:23)\n    at Parser.write (/Users/bkaplan/si/vi-security-users/node_modules/mysql/lib/protocol/Parser.js:77:12)\n    at Protocol.write (/Users/bkaplan/si/vi-security-users/node_modules/mysql/lib/protocol/Protocol.js:39:16)\n    at Socket.<anonymous> (/Users/bkaplan/si/vi-security-users/node_modules/mysql/lib/Connection.js:82:28)\n    at Socket.emit (events.js:95:17)\n    at Socket.<anonymous> (_stream_readable.js:764:14)\n    at Socket.emit (events.js:92:17)\n    at emitReadable_ (_stream_readable.js:426:10)\n    at emitReadable (_stream_readable.js:422:5)\n    at readableAddChunk (_stream_readable.js:165:9)\n    at Socket.Readable.push (_stream_readable.js:127:10)\n    at TCP.onread (net.js:528:21)\n```\n"
      },
      {
        "user": "mickhansen",
        "created_at": "2014-12-29T08:51:34Z",
        "body": "Reopened cause i closed it by mistake.\nIt should work but i have not tested it personally.\n\nCan you post both your models in full + the relations where the sync will fail?\n"
      },
      {
        "user": "memelet",
        "created_at": "2014-12-29T09:27:06Z",
        "body": "My ER_CANNOT_ADD_FOREIGN is for a different reason. Since I want the User.tenant_id to have 'not null' I needed to add an onDelete:\n\n```\n        Users.belongsTo(models.Tenants, {\n          foreignKey: 'tenant_id',\n          onDelete:   'cascade'\n        })\n```\n\nSince the default was to set Users.tenant_id to null on deletion of the associate Tenant. And also the Tenants hasMany also needed the onDelete specified with the same values as the Users:\n\n```\n        Tenants.hasMany(models.Users, {\n          onDelete: 'cascade'\n        })\n```\n\nSo it all seems to work, if a bit confusing due to having to repeat the constraint on the Tenants model which does not impact its DDL.\n"
      },
      {
        "user": "mickhansen",
        "created_at": "2014-12-29T09:32:34Z",
        "body": "@memelet i agree having to define the constraint on both sides of the relation is a bit confusing but that's the way it is right now. You probably also want to use `foreignKey: 'tenant_id'` on the hasMany call.\n"
      },
      {
        "user": "memelet",
        "created_at": "2014-12-29T09:44:59Z",
        "body": "Thanks!\n"
      }
    ]
  },
  {
    "number": 2775,
    "title": "BOOLEAN field not updating when passed a string 'true' or 'false' (Postgres)",
    "created_at": "2014-12-24T07:27:42Z",
    "closed_at": "2015-02-23T10:01:24Z",
    "labels": [
      "question",
      "type: docs"
    ],
    "url": "https://github.com/sequelize/sequelize/issues/2775",
    "body": "I have the following model: \n\n``` javascript\n\"use strict\";\n\nmodule.exports = function(sequelize, DataTypes) {\n  var Program = sequelize.define(\"Program\", {\n    name: {\n      type: DataTypes.STRING,\n      allowNull: false\n    },\n    short_name: DataTypes.STRING,\n    description: DataTypes.STRING,\n    short_description: DataTypes.STRING,\n    fitness_level: {\n      type: DataTypes.ENUM('average', 'good', 'high'),\n      defaultValue: 'average'\n    },\n    prerequisites: DataTypes.ARRAY(DataTypes.STRING),\n    knowledge_skills_equipment: DataTypes.ARRAY(DataTypes.STRING),\n    premium_activity: {\n      type: DataTypes.BOOLEAN,\n      defaultValue: false\n    },\n    location: {\n      type: DataTypes.ENUM('onsite', 'offsite'),\n      defaultValue: 'onsite',\n      allowNull: false\n    },\n    program_periods_available: DataTypes.INTEGER,\n    max_participants_per_period: DataTypes.INTEGER,\n    program_periods_required: {\n      type: DataTypes.INTEGER,\n      defaultValue: 1,\n      validate: { min: 1, max: 3 },\n      allowNull: false\n    },\n    fee: {\n      type: DataTypes.FLOAT,\n      defaultValue: 0.00\n    },\n    hidden: {\n      type: DataTypes.BOOLEAN,\n      defaultValue: true,\n      allowNull: false\n    },\n    oos_required: {\n      type: DataTypes.INTEGER,\n      defaultValue: 0,\n      allowNull: false\n    }\n  }, {\n    underscored: true,\n    classMethods: {\n      associate: function(models) {\n        Program.hasMany(models.OOS, { as: 'OOS', through: 'program_oos_assignments' })\n      }\n    }\n  });\n\n  return Program;\n};\n```\n\nIf I pass a boolean literal to `Instance#updateAttributes`, the value gets updated successfully:\n\n``` javascript\nmodels.Program.find(1).then(function(record) { record.updateAttributes( {hidden: true} ) })\n```\n\nSQL Generated:\n\n``` sql\nExecuting (default): SELECT \"id\", \"name\", \"short_name\", \"description\", \"short_description\", \"fitness_level\", \"prerequisites\", \"knowledge_skills_equipment\", \"premium_activity\", \"location\", \"program_periods_available\", \"max_participants_per_period\", \"program_periods_required\", \"fee\", \"hidden\", \"oos_required\", \"created_at\", \"updated_at\" FROM \"Programs\" AS \"Program\" WHERE \"Program\".\"id\"=1;\nExecuting (default): UPDATE \"Programs\" SET \"hidden\"=true,\"updated_at\"='2014-12-24 07:17:01.762 +00:00' WHERE \"id\"=1 RETURNING *\n```\n\nIf I pass in a string value of 'true' or 'false' (as might be received in a form POST), I get some weird behaviour:\n\n``` javascript\nmodels.Program.find(1).then(function(record) { record.updateAttributes( {hidden: 'true'} ) })\n```\n\nSQL Generated: \n\n``` sql\nExecuting (default): SELECT \"id\", \"name\", \"short_name\", \"description\", \"short_description\", \"fitness_level\", \"prerequisites\", \"knowledge_skills_equipment\", \"premium_activity\", \"location\", \"program_periods_available\", \"max_participants_per_period\", \"program_periods_required\", \"fee\", \"hidden\", \"oos_required\", \"created_at\", \"updated_at\" FROM \"Programs\" AS \"Program\" WHERE \"Program\".\"id\"=1;\nExecuting (default): UPDATE \"Programs\" SET \"hidden\"=false,\"updated_at\"='2014-12-24 07:18:01.253 +00:00' WHERE \"id\"=1 RETURNING *\n```\n\nIn this case, setting `hidden` to `'true'` (or any string value, for that matter) resulted in it being set to `false`.\n\nI've tried using a setter method on the `hidden` field to cast the string to a boolean:\n\n``` javascript\nfunction castStringToBoolean(value) {\n  var ret;\n  if (value === 'true') {\n    ret = true;\n  } else {\n    ret = false;\n  }\n  return ret;\n}\n```\n\nWith this setter in place, nothing at all is set for the `hidden` field:\n\n``` javascript\nmodels.Program.find(1).then(function(record) { record.updateAttributes( {hidden: 'true'} ) })\n```\n\nSQL Generated:\n\n``` sql\nExecuting (default): SELECT \"id\", \"name\", \"short_name\", \"description\", \"short_description\", \"fitness_level\", \"prerequisites\", \"knowledge_skills_equipment\", \"premium_activity\", \"location\", \"program_periods_available\", \"max_participants_per_period\", \"program_periods_required\", \"fee\", \"hidden\", \"oos_required\", \"created_at\", \"updated_at\" FROM \"Programs\" AS \"Program\" WHERE \"Program\".\"id\"=1;\nExecuting (default): UPDATE \"Programs\" SET \"updated_at\"='2014-12-24 07:20:49.153 +00:00' WHERE \"id\"=1 RETURNING *\n```\n\nIf I cast the field to a boolean before sending it to `updateAttributes` (e.g. in my Express route handler), then it works:\n\n``` javascript\nif (req.body.hasOwnProperty('hidden') && typeof req.body.hidden === 'string') {\n    req.body.hidden = req.body.hidden === 'true' ? true : false\n}\n```\n\nWhat is the proper way of handling booleans in Seqelize? Why is the setter method not working as I think it should?\n",
    "comments_url": "https://api.github.com/repos/sequelize/sequelize/issues/2775/comments",
    "author": "grahamb",
    "comments": [
      {
        "user": "mickhansen",
        "created_at": "2014-12-24T09:42:32Z",
        "body": "The proper way is using literal booleans.\nA setter/getter should definitely work, have you tried something like:\n\n``` js\nhidden: {\n  type: DataTypes.BOOLEAN,\n  defaultValue: true,\n  allowNull: false,\n  set: function(value) {\n    if (value === 'true') value = true;\n    if (value === 'false') value = false;\n    this.setDataValue('hidden', value);\n  }\n}\n```\n"
      },
      {
        "user": "grahamb",
        "created_at": "2014-12-24T17:58:48Z",
        "body": "Ah, I see now that I my setter was incorrect; I was returning what the new value should be instead of calling `this.setDataValue` to set it.\n\nThe docs aren't very clear on this. The \"example\" given for a setter leaves much to be desired:\n\n``` javascript\n set      : function(v) { /* do your magic with the input here! */ }\n```\n\nHaving a concrete example of \"magic\" would be very helpful. The biggest problem I've run into so far with Sequelize is the documentation. It's lengthy, but not terribly useful. It doesn't help that there is two different and inconsistent versions. The docs on sequelizejs.com are for 1.7.8 and still come up in google searches, while the ones on sequelize.readthedocs.org reference things that don't yet exist in 2.0.0rc3 (e.g. the docs reference the `belongsToMany` association, but that doesn't exist on 2.0.0rc3, it's still `hasMany`).\n"
      },
      {
        "user": "mickhansen",
        "created_at": "2014-12-26T10:41:14Z",
        "body": "@grahamb right you are, that's a very incomplete example.\nDocs are a sore thumb for us yes, we are working hard on it currently with the move to RTD and a huge update to 2.0 docs. Hopefully we'll have the docs updated completely in early january.\n"
      },
      {
        "user": "mickhansen",
        "created_at": "2014-12-26T10:42:09Z",
        "body": "We should probably redirect the pages google can lookup to the new read the docs.\n"
      },
      {
        "user": "mickhansen",
        "created_at": "2014-12-26T10:43:35Z",
        "body": "@grahamb The docs are part of the main repo, we would appreciate ANY help in making them more clear and helpfull for new users (we are really only two maintainers and we have to keep on top of bugs too :))\n"
      },
      {
        "user": "janmeier",
        "created_at": "2015-02-23T10:01:45Z",
        "body": "I've rewritten the example slightly and removed any mention of magic - hopefully that makes it more clear :)\n"
      }
    ]
  },
  {
    "number": 2773,
    "title": "Is hooks available in 1.7.x?",
    "created_at": "2014-12-24T03:50:06Z",
    "closed_at": "2014-12-24T09:38:51Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/sequelize/sequelize/issues/2773",
    "body": "I define a model like this:\n\nmodule.exports = function(sequelize, DataTypes) {\n    return sequelize.define('test', {\n        id: {\n            type: DataTypes.INTEGER,\n            primaryKey: true,\n            autoIncrement: true\n        },\n        name: {\n            type: DataTypes.STRING\n        },\n        _json_field: {\n            type: DataTypes.TEXT\n        }\n    }, {\n        hooks: {\n            afterFind: function(ins) {\n                console.log('afterFind called');\n                this.setDataValue('json_field', this.getDataValue('_json_field').toJSON());\n            },\n            beforeUpdate: function(ins) {\n                console.log('beforeUpdate called');\n                this.setDataValue('_json_field', json.stringify(this.getDataValue('json_field')));\n            }\n        }\n    });\n};\nBut the hooks have no effect.Is hooks available in 1.7.x?\n",
    "comments_url": "https://api.github.com/repos/sequelize/sequelize/issues/2773/comments",
    "author": "jackiesun8",
    "comments": [
      {
        "user": "jackiesun8",
        "created_at": "2014-12-24T06:34:13Z",
        "body": "I upgrade to 2.0.x and the hooks above are ok.But The beforeDefine has no effect.Why??? \n"
      },
      {
        "user": "mickhansen",
        "created_at": "2014-12-24T09:38:51Z",
        "body": "1.7.x has validate, update and create hooks.\n2.0.x has more hooks like find etc.\n\nYou'll have to show some code for the beforeDine hook, you are calling it on the sequelize instance right?\n"
      },
      {
        "user": "jackiesun8",
        "created_at": "2014-12-25T03:41:31Z",
        "body": "the code is blew,I'm sorry the Layout disorder.\n hooks: {\n            beforeDefine: function() {\n                console.log('beforeDefine called');\n            },\n            beforeCreate: function(instance) {\n                console.log('beforeCreate called');\n                if (!instance) return;\n                var value = instance.getDataValue('json_field');\n                instance.setDataValue('_json_field', JSON.stringify(value));\n            },\n            afterFind: function(instance) {\n                console.log('afterFind called')\n                if (!instance) return;\n                var value = instance.getDataValue('_json_field');\n                instance.setDataValue('json_field', JSON.parse(value));\n            },\n            beforeUpdate: function(instance) {\n                console.log('beforeUpdate called');\n                console.log(instance);\n                if (!instance) return;\n                var value = instance.getDataValue('json_field');\n                instance.setDataValue('_json_field', JSON.stringify(value));\n                console.log(instance);\n\n```\n        }\n\n    }\n```\n"
      },
      {
        "user": "jackiesun8",
        "created_at": "2014-12-25T03:48:11Z",
        "body": "I want to simulate some effect that a vitrual field is an js object and a corresponding field that the datatype is text and do the fact store.When I get a instance,I can directly manipulate the virtual field.And when I call instance.save(),the value of virtual field can automatically convert to the corresponding field through json.stringify.\n"
      },
      {
        "user": "mickhansen",
        "created_at": "2014-12-26T10:47:48Z",
        "body": "There's real support for VIRTUAL's in 2.0.x+.\nAll the hooks you are using except afterFind are available in 1.7.x\n"
      }
    ]
  },
  {
    "number": 2763,
    "title": "is it exists function of generate model from SQL code?",
    "created_at": "2014-12-21T20:06:42Z",
    "closed_at": "2015-03-02T17:21:06Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/sequelize/sequelize/issues/2763",
    "body": "Hi!\n\ni just wonder existence about that feature.\nif that feature were exists it is like this...\n\n``` javascript\nvar sequelize = require('sequelize'), db = new sequelize('localhost', 'root', 'root');\n\ndb.authenticate();\ndb.sync();\n\nvar tableSql = 'CREATE TABLE IF NOT EXISTS `table` ( ... )';\nvar model = db.defineFromSql(tableSql); // i just want this function!\n```\n",
    "comments_url": "https://api.github.com/repos/sequelize/sequelize/issues/2763/comments",
    "author": "neamhain",
    "comments": [
      {
        "user": "mickhansen",
        "created_at": "2014-12-22T08:37:54Z",
        "body": "No that feature does not exist in Sequelize.\nWhat's the usecase exactly?\nI know other people have written scripts to generate sequelize models from table descriptions.\n"
      },
      {
        "user": "janmeier",
        "created_at": "2015-03-02T17:21:06Z",
        "body": "Closing, no response\n"
      }
    ]
  },
  {
    "number": 2721,
    "title": "Indexes over computed columns",
    "created_at": "2014-12-12T03:03:59Z",
    "closed_at": "2017-07-07T00:27:54Z",
    "labels": [
      "type: feature",
      "question",
      "stale"
    ],
    "url": "https://github.com/sequelize/sequelize/issues/2721",
    "body": "Is it possible to create indexes over computed columns? I'm getting an error, and there's no mention of it on the documentation, maybe I'm just doing something wrong.\n\nThis is how I'm trying to create it:\n\n```\n{\n                name: 'idx_subtitle_text',\n                method: 'gin',\n                fields: [\"to_tsvector('english', title || ' ' || description)\"]\n}\n```\n\nAnd the error is: \n\n```\n{ [SequelizeDatabaseError: column \"to_tsvector('english', title || ' ' || description)\" does not exist]\n  name: 'SequelizeDatabaseError',\n  message: 'column \"to_tsvector(\\'english\\', title || \\' \\' || description)\" does not exist',\n  parent: \n   { [Error: column \"to_tsvector('english', title || ' ' || description)\" does not exist]\n     severity: 'ERROR',\n     code: '42703',\n     file: 'indexcmds.c',\n     line: '1013',\n     routine: 'ComputeIndexAttrs',\n     sql: 'CREATE INDEX \"idx_subtitle_text\" ON \"subtitle\" USING gin (\"to_tsvector(\\'english\\', title || \\' \\' || description)\")' },\n  sql: 'CREATE INDEX \"idx_subtitle_text\" ON \"subtitle\" USING gin (\"to_tsvector(\\'english\\', title || \\' \\' || description)\")' }\n```\n",
    "comments_url": "https://api.github.com/repos/sequelize/sequelize/issues/2721/comments",
    "author": "pablote",
    "comments": [
      {
        "user": "janmeier",
        "created_at": "2014-12-12T11:33:27Z",
        "body": "Not sure if this will work, but you could try with sequelize.fn\n\n``` js\nfields: [sequelize.fn('to_tsvector', sequelize.col('english'), sequelize.literal(\"title || ' ' || description\"))]\n```\n"
      },
      {
        "user": "chriszs",
        "created_at": "2016-06-10T16:49:28Z",
        "body": "Can confirm that this works:\n\n``` javascript\nfields:[sequelize.fn('to_tsvector', 'english', sequelize.col('organization_name') )]\n```\n\nBut the index auto-naming doesn't (it just names it `name_of_table_`). Unless/until that gets fixed, if you have more than one index like this you should specify the name manually with the name option or the subsequent indexes won't be created.\n"
      },
      {
        "user": "stale[bot]",
        "created_at": "2017-06-29T10:30:06Z",
        "body": "This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. If this is still an issue, just leave a comment 🙂\n"
      }
    ]
  },
  {
    "number": 2681,
    "title": "How to create association in a migration?",
    "created_at": "2014-12-05T22:03:14Z",
    "closed_at": "2014-12-11T12:55:40Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/sequelize/sequelize/issues/2681",
    "body": "Given the following role:\n\n``` javascript\n'use strict';\n\n  module.exports = function (sequelize, DataTypes) {\n     var Role = sequelize.define('Role', {\n         name: {\n             type: DataTypes.STRING\n         }\n     },\n     {\n         associate: function (models) {\n             Role.hasMany(models.User);\n         }\n     });\n      return Role;\n };\n```\n\nHow do you create the migration?  I have this:\n\n``` javascript\nmodule.exports = {\n  up: function(migration, DataTypes, done) {\n      migration.createTable('Roles',\n      {\n          id: {\n              type: DataTypes.INTEGER,\n              primaryKey: true,\n              autoIncrement: true\n          },\n          createdAt: {\n              type: DataTypes.DATE\n          },\n          updatedAt: {\n              type: DataTypes.DATE\n          },\n          name: {\n              type: DataTypes.STRING,\n              unique: true\n          }\n      });\n\n      done()\n  },\n  down: function(migration, DataTypes, done) {\n      migration.dropTable('Roles');\n      done()\n  }\n}\n```\n\nBut it doesn't create the fields needed in the User table when I run the migration, so obviously its missing something...I've read all the documentation I can find but I'm coming up short.  Any assistance would be much appreciated.\n",
    "comments_url": "https://api.github.com/repos/sequelize/sequelize/issues/2681/comments",
    "author": "socketwiz",
    "comments": [
      {
        "user": "mickhansen",
        "created_at": "2014-12-06T11:39:04Z",
        "body": "If it's a 1:M association you need to create the foreign key on the user table manually.\nIf it's a N:M association you need to create the through table manually.\n"
      },
      {
        "user": "socketwiz",
        "created_at": "2014-12-11T12:55:40Z",
        "body": "Thank you :)\n"
      }
    ]
  },
  {
    "number": 2674,
    "title": "afterUpdate hook",
    "created_at": "2014-12-05T12:41:17Z",
    "closed_at": "2014-12-30T19:00:33Z",
    "labels": [
      "question",
      "status: in discussion"
    ],
    "url": "https://github.com/sequelize/sequelize/issues/2674",
    "body": "I would like to report, I don't know if it is a bug, but the afterUpdate hook doesn't work the previousDataValues, for example, I would like to send an email when the status is changed, so I will compare the new status with the old one and if it's changed I will send that email, but I have the use the beforeUpdate hook, because the afterUpdate hook the previousDataValues is the same as the dataValues.\n",
    "comments_url": "https://api.github.com/repos/sequelize/sequelize/issues/2674/comments",
    "author": "rafacustodio",
    "comments": [
      {
        "user": "mickhansen",
        "created_at": "2014-12-05T12:49:41Z",
        "body": "`previousDataValues` becomes `dataValues` on `.save()` since the database and local data is now in sync.\n\nI understand your predicament but not quite sure what we should do, maybe allow you to store some kind of context across the hooks.\n"
      },
      {
        "user": "mlegenhausen",
        "created_at": "2014-12-05T15:11:09Z",
        "body": "Have the same problem. Using `changed` does not work in the `afterUpdate` hook which is not obvious.\n"
      },
      {
        "user": "mickhansen",
        "created_at": "2014-12-05T15:33:45Z",
        "body": "I suppose an argument could be made that `changed` should still reflect changed attributes till after all hooks have run.\n\nthoughts @janmeier @overlookmotel\n"
      },
      {
        "user": "mickhansen",
        "created_at": "2014-12-22T19:01:47Z",
        "body": "ping @janmeier \n"
      },
      {
        "user": "cusspvz",
        "created_at": "2014-12-22T19:05:06Z",
        "body": "+1 for `changed` hook param\n"
      },
      {
        "user": "tsheaff",
        "created_at": "2017-01-28T02:54:57Z",
        "body": "@mickhansen I know this question is (very) old, but I'm not seeing .changed() working from within my `afterUpdate` hook. `dataValues` and `_previousDataValues` are the same when the hook is called, despite having changed several values in the DB.  Is this functionality still supported? I'm on 3.9.0, would upgrading to 4.0 be recommended here?\r\n\r\nThanks!"
      },
      {
        "user": "xitij",
        "created_at": "2017-10-26T20:35:07Z",
        "body": "+1 for this as well. I'm having the same issue using `v3.18.0`"
      },
      {
        "user": "skn3",
        "created_at": "2018-03-09T17:30:41Z",
        "body": "+1 this as well have just faced this issue.\r\n\r\nI have a beforeUpdate hook which checks to see if an attribute has changed. If it has then it triggers some further database operations. In the after update hook it then generates a new css file based upon the state of the instance. During the process of generating the css file in the afterUpdate hook, it actually causes the instance to update again to stash the path of the generated css file. This then causes an infinite recursion because it goes through the beforeUpdate hook and cant detect the change we previously saved.\r\n\r\nSo you might say \"why not create the css file before?\". Well you cant rollback a css file upon error so was using the known validity of \"afterUpdate\" to indicate that the operation completed so therefore it is safe to generate a css file!\r\n\r\nPerhaps if there was was `instance.reset(attribute)` to reset the changed state of a particular attribute?"
      },
      {
        "user": "skn3",
        "created_at": "2018-03-10T14:19:09Z",
        "body": "it looks like `instance.changed(key, false)` actually does this. Is there any reason this is built into a public function but has not been documented? Is this safe to use?"
      },
      {
        "user": "skn3",
        "created_at": "2018-03-10T14:32:32Z",
        "body": "Just to add more details for future coders. I guess the trick (and quite rightly) is to just do the secondary update in my example, with `hooks: false`. It is a fairly controlled/safe update (updating 1 attribute), so a good enough solution!"
      }
    ]
  },
  {
    "number": 2663,
    "title": "problems with improved findAndCount",
    "created_at": "2014-12-04T09:17:49Z",
    "closed_at": "2015-04-27T19:55:41Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/sequelize/sequelize/issues/2663",
    "body": "i have some problems with the new findAndCount from commit 82403cfc1d165e2a01b6b0170efae6fc0355ba85\n\nif i use an where statement for an included model, it throws an error now, cause the model isn't included any more\n\nexample ...\n\n```\nvar User = sequelize.define('User', {\n  name: Sequelize.STRING\n});\nvar Project = sequelize.define('Project', {\n  title: Sequelize.STRING,\n  description: Sequelize.TEXT\n});\n\nProject.hasMany(User, {\n  as: 'Workers'\n});\n\nUser.findAndCount({\n  include: [{\n    model: Project,\n    as: 'Project'\n  }],\n  where: {\n    'Project.title': 'test'\n  }\n}).then(function (result) {\n  console.log('test', result);\n});\n```\n",
    "comments_url": "https://api.github.com/repos/sequelize/sequelize/issues/2663/comments",
    "author": "mithrandirii",
    "comments": [
      {
        "user": "mickhansen",
        "created_at": "2014-12-04T10:32:33Z",
        "body": "You can either use \n\n``` js\ninclude: [{\n  model: Project,\n  as: 'Project',\n  where: {\n    title: 'test'\n  }\n}]\n```\n\nOr\n\n``` js\ninclude: [{\n  model: Project,\n  as: 'Project',\n  required: true\n}]\n```\n"
      },
      {
        "user": "mithrandirii",
        "created_at": "2014-12-04T10:51:53Z",
        "body": "my problem is that both results in an inner join, but i need an left join\n\nmaybe we could use an option to turn off the new findAndCount feature to exlude the models ?\n"
      },
      {
        "user": "mickhansen",
        "created_at": "2014-12-04T11:08:54Z",
        "body": "Perhaps:\n\n``` js\ninclude: [{\n  model: Project,\n  as: 'Project',\n  where: {\n    title: 'test'\n  },\n  required: false\n}]\n```\n\nThen it will be used to include filtered projects on the main table but won't affect the count.\n"
      },
      {
        "user": "yepp4you",
        "created_at": "2014-12-07T08:02:49Z",
        "body": "In the case of that order model is same where model,\nSQL error is happen in order clause ( ER_BAD_FIELD_ERROR... )\n\nexample)\nselect ... from (select ... where a.xxx ... limit 20) ... left outter join .... order by a.xxx desc \n\nHow can i resolve? \n"
      },
      {
        "user": "mickhansen",
        "created_at": "2014-12-07T13:21:03Z",
        "body": "@yepp4you We need more information than that, not really sure what you're describing here.\n"
      },
      {
        "user": "janmeier",
        "created_at": "2015-04-27T19:55:41Z",
        "body": "No more information gotten, closing\n"
      },
      {
        "user": "jocull",
        "created_at": "2016-01-21T14:08:58Z",
        "body": "I ran into this issue today. The problem is that when you are using `FindAndCountAll` with a left join (include with require != true), it is left out of the \"count\" query. Thus when trying to set `where: { 'JoinedTable.column': 'something' }` the joined column is absent (because the table is not joined during counting) and the query fails.\n"
      },
      {
        "user": "jocull",
        "created_at": "2016-01-21T14:32:28Z",
        "body": "Further, using `.count(opts)` seems to malform:\n\nWhen calling with a 'where JoinedTable.column' on the parent query:\n\n```\n SELECT `Official`.*\nFROM   (SELECT Count(`Official`.`id`) AS `count`,\n               `Official`.`id`        AS `id`\n        FROM   `officials` AS `Official`\n        WHERE  `HeadOfficialGames`.`id` IS NULL) AS `Official`\n       LEFT OUTER JOIN `games` AS `HeadOfficialGames`\n                    ON `Official`.`id` = `HeadOfficialGames`.`headofficialid`;  \n```\n\nThis errors because in the context of the subquery the joined column is not present.\n\nWhen calling with 'where column' on the include query:\n\n```\nSELECT `Official`.*\nFROM   (SELECT Count(`Official`.`id`) AS `count`,\n               `Official`.`id`        AS `id`\n        FROM   `officials` AS `Official`) AS `Official`\n       LEFT OUTER JOIN `games` AS `HeadOfficialGames`\n                    ON `Official`.`id` = `HeadOfficialGames`.`headofficialid`\n                       AND `HeadOfficialGames`.`headofficialid` IS NULL;  \n```\n\nProduces:\n\n```\n    \"message\": \"ER_MIX_OF_GROUP_FUNC_AND_FIELDS: In aggregated query without GROUP BY, expression #2 of SELECT list contains nonaggregated column 'eventlink.Official.id'; this is incompatible with sql_mode=only_full_group_by\"\n```\n\nIn short, there's no way to pull of a \"where relationship does not exist\" in a count query.\n"
      }
    ]
  },
  {
    "number": 2652,
    "title": "problem with include model of order by and limit",
    "created_at": "2014-12-03T13:15:14Z",
    "closed_at": "2014-12-05T03:39:21Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/sequelize/sequelize/issues/2652",
    "body": "I have entities say Company, Stock and Quote. blew is the relationship:\n    `db.Stock.belongsTo(db.Company,{foreignKey:\"companyid\"})\n    db.Company.hasOne(db.Stock,{foreignKey:\"companyid\"})\n    db.Quote.belongsTo(db.Stock,{foreignKey:\"stockcode\"})\n    db.Stock.hasMany(db.Quote,{foreignKey:\"stockcode\"})`\n\nI want to select out lastest quote record for every companies I input. I do like this:\n    `models.Company.findAll({\n        where:{companyid:lis},include:[{\n            model:models.Stock,include:[{\n                model:models.Quote,attributes:['marketcap'],order:'createdAt DESC',limit:1\n            }],\n            attributes:['ticker']\n        }]\n    })`\n\nBut, output shows two quotes associated to one stock like \n`stock1{quotes:[q1,q2]}`\nIt seems the order and limit condition do not make sense. So what should I do?\n",
    "comments_url": "https://api.github.com/repos/sequelize/sequelize/issues/2652/comments",
    "author": "mike442144",
    "comments": [
      {
        "user": "mickhansen",
        "created_at": "2014-12-03T13:24:48Z",
        "body": "There is no limit support for `include`, there's no order support on `include` directly either but you can use the same logic to do something like:\n\n```\norder: [\n  [models.Stock, models.Quote, 'createdAt']\n]\n```\n\nI believe, @overlookmotel will be able to help you more since he wrote the ordering based on includes functionality.\n"
      },
      {
        "user": "mike442144",
        "created_at": "2014-12-04T01:52:11Z",
        "body": "@mickhansen Thanks, what does your code mean? order by 'createdAt' in which table? Company,Stock or Quote?\n@overlookmotel what do you think about this? thanks.\n"
      },
      {
        "user": "mike442144",
        "created_at": "2014-12-04T02:01:23Z",
        "body": "@mickhansen I know there is `where` support for include, but there is no `max` function for `where`, so I have to use `order by` and `limit`  \n"
      },
      {
        "user": "mike442144",
        "created_at": "2014-12-04T06:46:57Z",
        "body": "@mickhansen I use your code but other exceptions occured `Converting circular structure to JSON`, it seems I couldn't use include and order at the same time? Is it because there is circle reference among objects when generate select query shown in stack trace.\n"
      },
      {
        "user": "mickhansen",
        "created_at": "2014-12-04T08:22:26Z",
        "body": "@mike442144 you can use include and order at the sametime, the syntax i showed is to define that you want to order by createdAt from Quote being a relation of Stock.\n\nBut i might be getting the syntax wrong, ping @overlookmotel \n"
      },
      {
        "user": "mike442144",
        "created_at": "2014-12-04T14:03:48Z",
        "body": "@overlookmotel Please help me if you know how to solve it. thanks a lot.\n"
      },
      {
        "user": "overlookmotel",
        "created_at": "2014-12-04T23:05:48Z",
        "body": "Hi @mike442144 \n\nI don't know how to do the limit part, but as far as ordering, you should do what @mickhansen said. The complete `findAll()` statement would be like:\n\n```\nmodels.Company.findAll({\n    where: {companyid: lis},\n    include: [{\n        model: models.Stock,\n        attributes: ['ticker'],\n        include: [{\n            model: models.Quote,\n            attributes: ['marketcap']\n        }]\n    }],\n    order: [\n        [models.Stock, models.Quote, 'createdAt', 'DESC']\n    ]\n})\n```\n\nTo order by the attributes of an include, you don't put the `order` attribute inside the include - it has to go at the root of the options. You specify an array which traces it's way through the includes.\n\nIn this case the `order` array is saying \"I want to sort by an attribute. To find that attribute, go into the included `Stock` model, then into the `Quote` model that's included from `Stock` and then the attribute is called `createdAt` and I want it sorted in `DESC` order.\n\nHard to explain... The reason ordering isn't specified inside the include clause itself is that if there are several order clauses at different levels of the include hierarchy, Sequelize would have no way of knowing which order to use first - i.e. no idea how to order the orders!\n\nAnyway, that'll get things in the right order for you. But how to limit it only the first result for each company, I do not know! I've never delved into that kind of thing as I've never needed it. I'm not even sure if it's possible in Sequelize without executing SQL directly using `query()`.\n\nEr... not sure if that's much help?\n"
      },
      {
        "user": "mike442144",
        "created_at": "2014-12-05T03:39:21Z",
        "body": "@overlookmotel got it. since it's hard to do like that, I'll try to break down to several steps or just use SQL directly. But many thanks.\n"
      }
    ]
  },
  {
    "number": 2648,
    "title": "how to assign relationship in more than one many to many relationships",
    "created_at": "2014-12-03T07:29:23Z",
    "closed_at": "2014-12-05T03:36:51Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/sequelize/sequelize/issues/2648",
    "body": "Now I'm running into a problem , I have two entities of person and company, at the same time, they have two relationships say companyperson, boardmembership, and both of them are many to many. Here is the problem ,when I use like this:\n    person.getCompanies()\nwhich give me companies of boardmembership, but how can I get companies from relation table of companyperson? Is there any ways to explicitly assign my relation table?\n",
    "comments_url": "https://api.github.com/repos/sequelize/sequelize/issues/2648/comments",
    "author": "mike442144",
    "comments": [
      {
        "user": "janmeier",
        "created_at": "2014-12-03T07:44:25Z",
        "body": "``` js\nPerson.hasMany(Company, { through: 'CompanyPerson', as: 'Companies' });\nCompany.hasMany(Person, { through: 'CompanyPerson', as: 'Employees' });\n\nPerson.hasMany(Company, { through: 'BoardMembership', as: 'Boards' });\nCompany.hasMany(Person, { through: 'BoardMembership', as: 'BoardMembers' });\n```\n\n`person.getCompanies()` will give you all companies where that user is employed, while `person.getBoards()` will get you all companies where that user is a board member. You can change what the `getBoards` accessor will be by changing the `as` part of the relation\n"
      },
      {
        "user": "mike442144",
        "created_at": "2014-12-03T08:58:04Z",
        "body": "@janmeier thanks a lot, I changed to use the `as` just now, but I cannot get any entities too. the output is below:\n`{\"isFulfilled\":false,\"isRejected\":false}`\nwhat does this mean? I should load relation entities when I load data from database?\nThanks.\n"
      },
      {
        "user": "mickhansen",
        "created_at": "2014-12-03T09:19:39Z",
        "body": "@mike442144 it's returning a promise, you need to use `.then()`\n"
      },
      {
        "user": "mike442144",
        "created_at": "2014-12-03T09:29:51Z",
        "body": "@mickhansen That's great, I make it. Many thanks.\n"
      },
      {
        "user": "mike442144",
        "created_at": "2014-12-04T14:02:49Z",
        "body": "Now here is a new problem, I want to query all persons and boardmembers of one company just use `include`, but I tried include Person, CompanyPerson and Employees, neither is correct. I just don't want to call Company.getEmployees() and Company.getBoardMembers() after query from database. thanks.\n"
      },
      {
        "user": "mickhansen",
        "created_at": "2014-12-04T15:08:44Z",
        "body": "@mike442144 please always show what you actually tried\nHave you tried:\n\n``` js\nCompany.findAll({\n  include: [\n    {model: User, as: 'BoardMembers'},\n    {model: User, as: 'Employees'}\n  ]\n});\n```\n"
      },
      {
        "user": "mike442144",
        "created_at": "2014-12-05T03:36:51Z",
        "body": "@mickhansen That's great. everything is ok then. Thank you very much.\n"
      }
    ]
  },
  {
    "number": 2598,
    "title": "[Question] Update primary key values",
    "created_at": "2014-11-20T19:05:17Z",
    "closed_at": "2014-12-28T17:17:36Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/sequelize/sequelize/issues/2598",
    "body": "Hej,\n\nI've seen the following comment in `instance.js`:\n`// If attempting to set primary key and primary key is already defined, return`\n\nWhy isn't it possible to change the value of primary keys?\n\nThanks\nNiko\n",
    "comments_url": "https://api.github.com/repos/sequelize/sequelize/issues/2598/comments",
    "author": "nikuph",
    "comments": [
      {
        "user": "mickhansen",
        "created_at": "2014-12-03T15:05:24Z",
        "body": "@nikuph i guess that was mostly written with autoincremented primary keys in mind - why do you need to change your primary keys?\n"
      },
      {
        "user": "janmeier",
        "created_at": "2014-12-28T17:17:36Z",
        "body": "Closing, no response\n"
      }
    ]
  },
  {
    "number": 2593,
    "title": "How do I parse nested associations within a raw SQL?",
    "created_at": "2014-11-19T17:10:53Z",
    "closed_at": "2017-06-29T00:01:44Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/sequelize/sequelize/issues/2593",
    "body": "Suppose I have a model called `User` and it belongs to `Image`. If I run a raw sql to fetch only the user, sequelize allows me to pass the model to convert the response to:\n\n```\nsequelize.query(\"SELECT * FROM users...\", User, { raw: true }).then(\"...\");\n```\n\nHowever, if I make a join with the table images, the result of the query will not map the image attributes to an association:\n\n```\nsequelize.query(\"SELECT * FROM users INNER JOIN images users.image_id = images.id...\", User, { raw: true }).then(\"...\");\n```\n\nTo represent what I want to do if its possible:\n\n```\nsequelize.query(\"SELECT * FROM users INNER JOIN images users.image_id = images.id...\", User, include: [Image], { raw: true }).then(\"...\");\n```\n\nIs this a limitation for now I guess. But I want to figure it out how can I achieve that.\nThanks!\n",
    "comments_url": "https://api.github.com/repos/sequelize/sequelize/issues/2593/comments",
    "author": "luccasmaso",
    "comments": [
      {
        "user": "luccasmaso",
        "created_at": "2014-11-19T17:34:43Z",
        "body": "I have tried transforming each select of the belongsTo to the follow the naming pattern:\n\n```\nusers.*,\nImages.url AS \"Images.url\"\n```\n\nIs there a method I can call to parse this json and transform into nested objects like sequelize probably uses under the hood?\n\nThanks again\n"
      },
      {
        "user": "mickhansen",
        "created_at": "2014-12-03T15:07:24Z",
        "body": "@luccasmaso you'll need to remove `raw: true` atleast (since that will skip any type of parsing)\n"
      }
    ]
  },
  {
    "number": 2579,
    "title": "Has Many Through Paranoid Relationship",
    "created_at": "2014-11-14T16:39:45Z",
    "closed_at": "2017-07-06T23:24:43Z",
    "labels": [
      "type: feature",
      "question",
      "stale"
    ],
    "url": "https://github.com/sequelize/sequelize/issues/2579",
    "body": "I have the following relationship set up for tracking current subscriptions (in subscription) as well as historical (in SubscriptionTier). This works great, but SubscriptionTier is setup with SubscriptionId and TierId as the PK (standard for a Many to Many association table). The problem is that I need SubscriptionTier set up as a 'paranoid' table. If I 'destroy` a record in SubscriptionTier, it does not allow me to add another record with those values (Dup PK error). In this case, if a user subscribes to a tier then cancels it, they cannot re-subscribe in the future. Is there any way to handle this without making SubscriptionTier a regular table with a auto_increment PK? I realize composite keys with a null value isn't a best practice in MySQL, but seems like the cleanest in this case.\n\nSubscription > SubscriptionTier > Tier\n\n``` javascript\nvar Subscription = sequelize.define('Subscription', {\n        currentPrice: { type: DataTypes.INTEGER, allowNull: false },\n        currentTaxRate: { type: DataTypes.INTEGER, allowNull: false, defaultValue: 0 },\n        currentTotalPrice: { type: DataTypes.INTEGER, allowNull: false }\n    }, {\n        classMethods: {\n            associate: function(models){\n                Subscription.belongsTo(models.Tier, { as: 'CurrentTier', foreignKey: 'CurrentTierId'});\n                Subscription.hasMany(models.Tier, { through: models.SubscriptionTier });\n                //Other relationships omitted...\n            }\n        },\n        timestamps: true,\n        createdAt: 'start',\n        updatedAt: false,\n        deletedAt: 'end',\n        paranoid: true\n    });\n\nvar SubscriptionTier = sequelize.define('SubscriptionTier', {\n        price: { type: DataTypes.INTEGER, allowNull: false },\n        taxRate: DataTypes.INTEGER,\n        totalPrice: { type: DataTypes.INTEGER, allowNull: false }\n    }, {\n        classMethods: {\n            associate: function(models) {\n                SubscriptionTier.belongsTo(models.Tier);\n                SubscriptionTier.belongsTo(models.Subscription);\n                //Other relationships omitted...\n            }\n        },\n        timestamps: true,\n        createdAt: 'start',\n        updatedAt: false,\n        deletedAt: 'end',\n        paranoid: true\n    });\n\nvar Tier = sequelize.define('Tier', {\n        name: { type: DataTypes.STRING, allowNull: false },\n        currentPrice: { type: DataTypes.INTEGER, allowNull: false },\n        numberOfDomains: DataTypes.INTEGER,\n        maxPublishedWalkthroughs: DataTypes.INTEGER\n    }, {\n        classMethods: {\n            associate: function(models) {\n                Tier.hasMany(models.Subscription, { through: models.SubscriptionTier });\n                //Other relationships omitted...\n            }\n        }\n    });\n```\n",
    "comments_url": "https://api.github.com/repos/sequelize/sequelize/issues/2579/comments",
    "author": "chainlink",
    "comments": [
      {
        "user": "chainlink",
        "created_at": "2014-11-14T16:58:04Z",
        "body": "If I set things up with SubscriptionTier as a regular table, how can I define a composite unique key which includes `SubscriptionId`, `TierId` and `end`?\n"
      },
      {
        "user": "stale[bot]",
        "created_at": "2017-06-29T13:22:42Z",
        "body": "This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. If this is still an issue, just leave a comment 🙂\n"
      }
    ]
  },
  {
    "number": 2530,
    "title": "proper way of doing instance update",
    "created_at": "2014-11-05T05:52:58Z",
    "closed_at": "2014-11-05T12:20:31Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/sequelize/sequelize/issues/2530",
    "body": "why does update does not take the form of \nModel.build().update({attributes to be update})?\n",
    "comments_url": "https://api.github.com/repos/sequelize/sequelize/issues/2530/comments",
    "author": "rutaihwa",
    "comments": [
      {
        "user": "janmeier",
        "created_at": "2014-11-05T06:41:55Z",
        "body": "Not sure what you mean here? Update can be called on an instance, so that will already be built. And as far as I know bulk update will do a build before updating to get default values etc \n"
      },
      {
        "user": "mickhansen",
        "created_at": "2014-11-05T10:06:46Z",
        "body": "It's possible to do:\n\n``` js\nModel.build({ primaryKey: 1 }, {isNewRecord: false}).updateAttributes(values);\n// or\nModel.update(values, {where: {primaryKey: 1}})\n```\n"
      },
      {
        "user": "rutaihwa",
        "created_at": "2014-11-05T12:20:31Z",
        "body": "@janmeier I knew you could build an update bulk instances but i didn't know how to call with updateAttributes.  I find that this syntax better than the later one. @mickhansen :+1: \n"
      }
    ]
  },
  {
    "number": 2527,
    "title": "How to merge multiple different where conditions(string, array, hash)?",
    "created_at": "2014-11-05T02:44:36Z",
    "closed_at": "2014-11-05T08:18:27Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/sequelize/sequelize/issues/2527",
    "body": "From the api doc,  the where query can be either a single string:\n\n``` javascript\n{ where: 'id = 2' }\n```\n\nor a array:\n\n``` javascript\n{ where: ['id = ?', 2] }\n```\n\nor a hash:\n\n``` javascript\n{ where: { id: 2, name: 'tomwang'}}\n```\n\nSo is there some way to combine there different type of queries into a single where statement? I read the doc and found no way.\n",
    "comments_url": "https://api.github.com/repos/sequelize/sequelize/issues/2527/comments",
    "author": "tomwang1013",
    "comments": [
      {
        "user": "mickhansen",
        "created_at": "2014-11-05T08:18:27Z",
        "body": "@tomwang1013 You can use `sequelize.and()` (and $and when it lands)\n\n``` js\nwhere: sequelize.and(\n  ['id = ?', 2],\n  { id: 2, name: 'tomwang'}\n)\n```\n"
      }
    ]
  },
  {
    "number": 2481,
    "title": "Parsing with dottie whilst raw:false",
    "created_at": "2014-10-26T02:46:42Z",
    "closed_at": "2015-02-02T12:36:51Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/sequelize/sequelize/issues/2481",
    "body": "Why does dottie parsing only work with raw queries?\nI would like parse the result of my queries into json objects with dottie, whilst getting a model instance back (so that I can take advantage of instanceMethods, etc..) Thanks\n",
    "comments_url": "https://api.github.com/repos/sequelize/sequelize/issues/2481/comments",
    "author": "crocodile",
    "comments": [
      {
        "user": "mickhansen",
        "created_at": "2014-10-26T19:48:27Z",
        "body": "There's no real reason other than we use custom parsing for find/findAll. Using the dottie transform would interfer with the current implementation which is specific to the known input and therefore better performing.\n"
      }
    ]
  },
  {
    "number": 2478,
    "title": "Count with field attribute on PK not converting.",
    "created_at": "2014-10-24T21:25:30Z",
    "closed_at": "2014-10-26T19:52:16Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/sequelize/sequelize/issues/2478",
    "body": "I have a Guess model that looks like this:\n\n```\nvar Guess = sequelize.define('Guess', {\n    guessId: { type: DataTypes.INTEGER, autoIncrement: true, primaryKey: true, field: 'guess_id' },\n    gameId: { type: DataTypes.INTEGER, field: 'game_id' },\n    userId: { type: DataTypes.INTEGER, field: 'user_id' },\n    guessDesc: { type: DataTypes.STRING(50), field: 'guess_desc' }\n}, {\n    timestamps: true,\n    underscored: true,\n    tableName: 'guesses',\n    createdAt: 'created_date',\n    updatedAt: false\n});\n```\n\nWhen I try to execute a count using an associated table I find that Sequelize isn't converting 'guessId' to the true field's name of 'guess_id'. Here's the JS:\n\n```\nmodels.Guess.count({\n    attributes: [ sequelize.col('Game.game_id'), sequelize.col('Game.game_title') ],\n    include: [{ model: models.Game }],\n    group: [ sequelize.col('Game.game_id'), sequelize.col('Game.game_title') ]\n}).success(function (games) {\n    res.render('home', { games: games });\n});\n```\n\nThe generated SQL (and subsequent error):\n\n```\nSELECT `Game`.`game_id`, `Game`.`game_title`, COUNT(`Guess`.`guessId`) AS `COUNT` \nFROM `guesses` AS `Guess` \nLEFT OUTER JOIN `games` AS `Game` ON `Game`.`game_id` = `Guess`.`game_id` \nGROUP BY `Game`.`game_id`, `Game`.`game_title`;\n\n*Possibly unhandled SequelizeDatabaseError: Error: ER_BAD_FIELD_ERROR: \nUnknown column 'Guess.guessId' in 'field list'*\n```\n\nAnyway to change the COUNT function's field or change it to `Guess`.*? Thanks!\n",
    "comments_url": "https://api.github.com/repos/sequelize/sequelize/issues/2478/comments",
    "author": "nuklehed",
    "comments": [
      {
        "user": "mickhansen",
        "created_at": "2014-10-26T19:52:16Z",
        "body": "@nuklehed not for the `count` method, but you can just change it to a regular `find` and add your own count via the attributes function.\n"
      }
    ]
  },
  {
    "number": 2469,
    "title": "Access selected values that are not model attributes (eg from a join)",
    "created_at": "2014-10-23T17:02:20Z",
    "closed_at": "2017-07-11T23:38:15Z",
    "labels": [
      "question",
      "stale"
    ],
    "url": "https://github.com/sequelize/sequelize/issues/2469",
    "body": "Related to #1460 and #1830. I'm using rc2.\n\nI am using a raw query to join two tables, creating additional \"virtual\" attributes on my model instances.  How can I make these additional attributes accessible from my models? I had previously been using the selectedValues property but now that it's gone I need to find another way. Here is an example (I'm using squel to write the queries):\n\n```\nvar query = squel.select()\n    .field('users.*')\n    .field('count(signs.*)', 'sign_count')\n    .from('users')\n    .left_join('signs', null, 'signs.created_by = users.id')\n    .where('users.deleted_at is null')\n    .where('signs.deleted_at is null')\n    .group('users.id')\n    .order('users.created_at', false);\n\n  sequelize\n    .query(query.toString())\n    .error(next)\n    .success(function(users) {\n      // ...\n    });\n```\n\nSo I am joining the signs table to get a count of signs for each user. This is not very complicated and could maybe be done with the sequelize's count functionality, but there are a number of places where I'm doing more complex joins, like here where I am joining three tables and using an attribute from the third table and attaching it to rows on the first:\n\n```\n  var query = squel.select()\n    .field('signs.*')\n    .field('sponsors.image_url', 'sponsor_logo_url')\n    .from('signs')\n    .left_join('campaigns', null, 'campaigns.id = signs.campaign_id')\n    .left_join('sponsors', null, 'sponsors.id = campaigns.sponsor_id')\n    .where('signs.deleted_at is null')\n    .order('signs.created_at', false);\n```\n",
    "comments_url": "https://api.github.com/repos/sequelize/sequelize/issues/2469/comments",
    "author": "cjroth",
    "comments": [
      {
        "user": "janmeier",
        "created_at": "2014-10-23T17:05:51Z",
        "body": "Have a look at the VIRTUAL attribute, maybe that can solve what you want?\n\nYour example code only shows the query, executing it directly. Are you trying to put the result into a instance of a user model? We need to see the actual model definitions to be able to reproduce your issue\n"
      },
      {
        "user": "cjroth",
        "created_at": "2014-10-23T17:14:13Z",
        "body": "I was using the virtual attributes with selectedValues before:\n\n```\n    instanceMethods: {\n      getSponsorLogoURL: function() {\n        return this.selectedValues['sponsor_logo_url'];\n      },\n    },\n```\n\nYes - I was taking the result of that join and creating model instances with it:\n\n```\n  sequelize\n    .query(query.toString(), User)\n    .error(next)\n    .success(function(users) {\n      // users is a list of User model instances\n    });\n```\n\nand in a few other places where that was not possible, I was using `User.build` to transform raw data into model instances:\n\n```\n// `rawUsers` is an array of raw user data objects:\nusers = rawUsers.map(function(rawUser) {\n  return User.build(rawUser);\n});\n```\n\nThanks!\n"
      },
      {
        "user": "janmeier",
        "created_at": "2014-10-23T17:32:35Z",
        "body": "I'm talking about a virtual attribute in the form of DataTypes.VIRTUAL. It allows you to select data that is not in the model, and have it output when you call toJSON etc.\n\nCould you please show the definition of your user model, other related models and associations and the query you'd like to map into the user model (in sql, not using squel)\n"
      },
      {
        "user": "cjroth",
        "created_at": "2014-10-23T18:08:56Z",
        "body": "Ahh okay, I didn't know about DataTypes.VIRTUAL. That sort of is what I'm looking for. (Sorry I had been using the docs instead of the Wiki - doesn't look like this has made it into the docs yet.)\n\nThere are a lot places where I'm doing custom joins and queries to attach sub-elements and counts to my model instances, and my models would be become cluttered with virtual attributes if I had to add a new virtual attribute for every one-off scenario.\n\nFor example, I have a User model which `hasMany` Sign models:\n\n/models/user.js:\n\n```\nmodule.exports = function(Sequelize, DataTypes) {\n\n  return Sequelize.define('user', {\n    'id': {\n      type: DataTypes.INTEGER,\n      autoIncrement: true,\n      primaryKey: true,\n      unique: true,\n    },\n    'first_name': {\n      type: DataTypes.STRING,\n    },\n    'last_name': {\n      type: DataTypes.STRING,\n    },\n  }, {\n    instanceMethods: {\n    },\n    underscored: true,\n    paranoid: true,\n  });\n\n};\n```\n\nassociation:\n\n```\nUser.hasMany(Sign, { foreignKey: 'created_by' });\n```\n\nsign.js:\n\n```\nmodule.exports = function(Sequelize, DataTypes) {\n\n  return Sequelize.define('sign', {\n    'id': {\n      type: DataTypes.INTEGER,\n      autoIncrement: true,\n      primaryKey: true,\n    },\n    'created_by': {\n      type: DataTypes.INTEGER,\n    },\n    'sponsor_logo_url': {\n      type: DataTypes.VIRTUAL,\n    },\n    // ... took out some irrelevant attributes for brevity ...\n  }, {\n    instanceMethods: {\n      getSponsorLogoURL: function() {\n        // used to be `return this.selectedValues['sponsor_logo_url'];`\n        return this.getDataValue('sponsor_logo_url');\n      },\n    },\n    underscored: true,\n    paranoid: true,\n  });\n```\n\nI query for users or lists of users in probably 50 different places in my project. Sometimes I add a virtual property called \"sign_count\". Sometimes I add a virtual property \"signs\" as a list of sign objects.\n\nHere is the query I use in one place where I'm getting a list of users with their sign counts:\n\n```\nSELECT users.*,\n       count(signs.*) AS \"sign_count\"\nFROM users\nLEFT JOIN signs ON (signs.created_by = users.id)\nWHERE (users.deleted_at IS NULL)\n  AND (signs.deleted_at IS NULL)\nGROUP BY users.id\nORDER BY users.created_at DESC\n```\n\nIn another place, I query for campaigns (a campaign hasMany signs) and then aggregating their associated signs. I don't want to have to add a `signs` virtual property to the Campaign model just for this one situation:\n\n```\nSELECT campaigns.*,\n       json_agg(signs.*) AS \"signs\"\nFROM campaigns\nLEFT JOIN signs ON (signs.campaign_id = campaigns.id)\nWHERE (campaigns.created_by = 1)\n  AND (campaigns.deleted_at IS NULL)\nGROUP BY campaigns.id\nORDER BY campaigns.created_at DESC\n```\n\nTo reiterate, I don't think it's a good idea to add the virtual property `sign_count` to the User model in this case because it's a one-off situation. I feel like there should be a way to access attributes from a raw query like this without having to define a virtual attribute for every possible attribute that I might need to attach to the model in my raw queries.\n\nIt's totally possible that I'm pushing Sequelize beyond what it's intended to do though.\n"
      },
      {
        "user": "LaurentVB",
        "created_at": "2017-05-05T08:14:03Z",
        "body": "Hi,\r\nI know this is a veeeeeeery old question, but I found it while searching for the same information so answering here might help others (and future me).\r\nI'm using Sequelize v3 and I can access my additionally selected column (a COUNT from a JOIN, not part of the defined model, even as a VIRTUAL field) by simply doing: \r\n\r\n```\r\nmodel.get('additional_column_name')\r\n```\r\n\r\nIn the above question's first example, you would access the count with:\r\n\r\n```\r\nuser.get('sign_count')\r\n```\r\n\r\nHope this helps."
      },
      {
        "user": "stale[bot]",
        "created_at": "2017-07-04T22:26:01Z",
        "body": "This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. If this is still an issue, just leave a comment 🙂\n"
      },
      {
        "user": "BartusZak",
        "created_at": "2020-03-05T11:28:16Z",
        "body": "@LaurentVB works within model fields, but what about associated fields?\r\n\r\nI see that constructor of the model contains those values. \r\nIs there a way to get them in a more 'gentle' way?"
      }
    ]
  },
  {
    "number": 2460,
    "title": "Multi-Level Includes and Aggregate Functions",
    "created_at": "2014-10-21T21:13:30Z",
    "closed_at": "2014-10-22T16:16:33Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/sequelize/sequelize/issues/2460",
    "body": "Trying to do a little more advanced queries with what I have setup and I'm running into a few issues. Looking for a nudge in the right direction. I have a model which contains three major objects `user`, `action`, and `actionValue`. The idea is that a user can take multiple actions multiple times and each of those actions are worth some amount of points.\n\nI'm trying to model the calculations for total points inside of a find statement to be used on a dashboard of sorts but I'm having troubles figuring out how to do all of this in Sequelize without using a custom query.\n\nHere's my data model.\n### User\n- id (int) - Auto-generated\n- username (string) - user input\n### Action\n- id (int) - Auto-generated\n- actionTypeId (int) - The ID for the corresponding action in the `actionType` model.\n- count (int) - Number of times the action has been done\n## Action Type\n- id (int) - Auto-generated\n- name (string) - Name of the action\n- value (int) - Number of points the action is worth.\n\nWhat I'm trying to do is retrieve a summary of the points for the user based on the type of action. To do this my `find()` statement looks like the following:\n\n``` js\nmodel.user.find(\n    {\n        where: {\n            username: 'bob'\n        },\n        include: [\n            {\n                model: model.action,\n                include: [ model.actionType ]\n            }\n        ]\n    }\n)\n```\n\nThis will retrieve for me the row on `user` that has a `username` of 'bob' and then retrieve all of their rows on the `action` table and the associated `actionType` record for each, sample below (represented as a JSON array of objects since it is too many fields for a table).\n\n``` js\n[\n  {\n   \"id\": 0\n   \"username\": \"bob\",\n   \"action.id\": 0,\n   \"action.actionTypeId\": 0,\n   \"action.count\": 5,\n   \"action.actionType.id\": 0,\n   \"action.actionType.name\": \"Lost Game\",\n   \"action.actionType.value\": 2\n  },\n  {\n   \"id\": 0\n   \"username\": \"bob\"\n   \"action.id\": 1\n   \"action.actionTypeId\": 1\n   \"action.count\": 3\n   \"action.actionType.id\": 0\n   \"action.actionType.name\": \"Won Game\",\n   \"action.actionType.value\": 10\n  }\n]\n```\n\nI could then parse through that data and I would come out with composite values by multiplying the number of times an action was taken with the value it holds. So for the data above I would see that the user `bob` got 10 points (5 \\* 2) for losing a total of 5 games, and then he got 30 points (3 \\* 10) for winning a total of 3 games giving `bob` a grand total of 40 points.\n\nSince I want to be able to utilize the ordering and other capabilities of the database I want to be able to calculate what I ran through above in my query instead of having to do it on the application server.\n\nIdeally I'm looking for output containing the following (again a JSON object because it is too large for a table):\n\n``` js\n{\n  \"id\": 0,\n  \"username\": \"bob\",\n  \"score\": 40 // This would be the `sum(action.count * action.actionType.value)`\n}\n```\n\nAny help on if this is feasible right now or not through the model would be much appreciated. Thanks!\n",
    "comments_url": "https://api.github.com/repos/sequelize/sequelize/issues/2460/comments",
    "author": "DavidTPate",
    "comments": [
      {
        "user": "mickhansen",
        "created_at": "2014-10-22T07:02:30Z",
        "body": "Not sure it will work but you could try adding:\n\n``` js\nattributes: ['id', 'username', [sequelize.fn('SUM', sequelize.col('action.count') + '*' + sequelize.col('action.actionType.value')), 'score']]`\n```\n\nHowever you will likely still need a group by statement added. But try this at first and see how it works out (i haven't tested it).\n"
      },
      {
        "user": "DavidTPate",
        "created_at": "2014-10-22T14:11:38Z",
        "body": "Thanks, gave that a try and after some tweaking I was able to get it fairly close, just hitting an issue where `sequelize.fn()` combines the strings as comma-separated values (makes sense since it is a generic function generation function).\n\nWhat I ended up having to do was:\n\n``` js\nmodel.user.find(\n    {\n        where: {\n            username: 'bob'\n        },\n        include: [\n            {\n                model: model.action,\n                include: [ model.actionType ],\n                attributes: [\n                  [sequelize.fn('SUM', sequelize.col('action.count'), sequelize.literal('*'), sequelize('action.actionType.value')), 'score']\n                ]\n            }\n        ]\n    }\n)\n```\n\nThis ends up producing the following:\n\n``` sql\nSELECT \n    `user`.*,\n    SUM(`actions`.`count`, *, `actions.actionTypes`.`value`) AS `actions.score`,\n    `actions.actionTypes`.`id` AS `actions.actionTypes.id`,\n    `actions.actionTypes`.`name` AS `actions.actionTypes.name`,\n    `actions.actionTypes`.`value` AS `actions.actionTypes.value`,\n    `actions.actionTypes`.`createdAt` AS `actions.actionTypes.createdAt`,\n    `actions.actionTypes`.`updatedAt` AS `actions.actionTypes.updatedAt`\nFROM\n    (SELECT \n        `user`.`id`,\n        `user`.`username`\n    FROM\n        `users` AS `user`\n    WHERE\n        `user`.`username` = 'bob'\n    LIMIT 1) AS `user`\n        LEFT OUTER JOIN\n    `actions` AS `actions` ON `user`.`id` = `actions`.`userId`\n        LEFT OUTER JOIN\n    `actionTypes` AS `actions.actionTypes` ON `actions.actionTypeId`.`id` = `actions`.`actionTypeId`\n\n```\n\nYou'll notice it has the following `SUM('actions'.'count', *, 'actions.actionTypes'.'value')` which is invalid syntax for SQL. Seems like the last piece (outside of adding my group by statements) is just figuring out how I can join those in the SUM function through sequelize.\n\nThe reason why I had to do: `[sequelize.fn('SUM', sequelize.col('action.count'), sequelize.literal('*'), sequelize('action.actionType.value')), 'score']` instead of the more literal version that you suggested is because `sequelize.fn()` expects what is sent to it to be one of the sequelize types so that it can use the query generator and `sequelize.col()` (along with the others) expects to be called with a query generator when `toString()` is called.\n\nThis might be the point where I have to do it with string literals, and I'm honestly okay with that. I think my use is a specialized case and I have yet to find any ORM that could even come this close to doing this complex query.\n"
      },
      {
        "user": "mickhansen",
        "created_at": "2014-10-22T15:15:48Z",
        "body": "Yeah it might be easier just to use something like `attributes: [[sequelize.literal('SUM()', 'score')]]`.\r\nWe are always looking to figure out ways to cover complex cases for these, so if you have any API ideas for it it would be welcome.\r\n"
      },
      {
        "user": "DavidTPate",
        "created_at": "2014-10-22T16:16:33Z",
        "body": "Gotcha. Thanks for the help!\n\nGoing to go ahead and close this since all my questions are answered. I'll give some thought to the API and contribute with what I can think of.\n"
      },
      {
        "user": "QwertyZW",
        "created_at": "2017-01-09T15:23:40Z",
        "body": "@mickhansen missing a `)` after 'score'.\r\n\r\nIt's `attributes: [[sequelize.literal('SUM()', 'score')]]` for the copypasta squad "
      },
      {
        "user": "mickhansen",
        "created_at": "2017-01-09T15:24:39Z",
        "body": "@QwertyZW Thanks, fixed :)"
      },
      {
        "user": "QwertyZW",
        "created_at": "2017-01-09T18:54:31Z",
        "body": "Btw is there a way to do what the OP is trying to do in 2017? trying out various methods but with no luck. I'm a bit of a newbie with sequelize \r\n\r\nThis code\r\n```\r\n  provider.find({\r\n    where:{\r\n      name: req.query.name\r\n    },\r\n    include: [ \r\n      { \r\n        model: models.Component,   \r\n        include: [\r\n          {\r\n            model: models.TimestampStatus,\r\n          } \r\n        ] \r\n      } \r\n    ]\r\n  })\r\n```\r\n\r\n\r\ngenerates this SQL \r\n\r\n```\r\nSELECT `Provider`.*, `Components`.`id` AS `Components.id`, `Components`.`name` AS `Components.name`, `Components`.`description` AS `Components.description`, `Components`.`createdAt` AS `Components.createdAt`, `Components`.`updatedAt` AS `Components.updatedAt`, `Components`.`ProviderId` AS `Components.ProviderId`, `Components.TimestampStatuses`.`id` AS `Components.TimestampStatuses.id`, `Components.TimestampStatuses`.`status` AS `Components.TimestampStatuses.status`, `Components.TimestampStatuses`.`createdAt` AS `Components.TimestampStatuses.createdAt`, `Components.TimestampStatuses`.`updatedAt` AS `Components.TimestampStatuses.updatedAt`, `Components.TimestampStatuses`.`ComponentId` AS `Components.TimestampStatuses.ComponentId`, `Components.TimestampStatuses`.`ScanId` AS `Components.TimestampStatuses.ScanId` FROM (SELECT `Provider`.`id`, `Provider`.`parser`, `Provider`.`name`, `Provider`.`createdAt`, `Provider`.`updatedAt` FROM `Providers` AS `Provider` WHERE `Provider`.`name` = 'name' LIMIT 1) AS `Provider` LEFT OUTER JOIN `Components` AS `Components` ON `Provider`.`id` = `Components`.`ProviderId` LEFT OUTER JOIN `TimestampStatuses` AS `Components.TimestampStatuses` ON `Components`.`id` = `Components.TimestampStatuses`.`ComponentId`;\r\n```\r\n\r\nAll I wanna do is add a MAX(...) to the SELECT and append a GROUP BY at the end to get this sql:\r\n\r\n```\r\nSELECT MAX(`Components.TimestampStatuses`.`createdAt`), `Provider`.*, `Components`.`id` AS `Components.id`, `Components`.`name` AS `Components.name`, `Components`.`description` AS `Components.description`, `Components`.`createdAt` AS `Components.createdAt`, `Components`.`updatedAt` AS `Components.updatedAt`, `Components`.`ProviderId` AS `Components.ProviderId`, `Components.TimestampStatuses`.`id` AS `Components.TimestampStatuses.id`, `Components.TimestampStatuses`.`status` AS `Components.TimestampStatuses.status`, `Components.TimestampStatuses`.`createdAt` AS `Components.TimestampStatuses.createdAt`, `Components.TimestampStatuses`.`updatedAt` AS `Components.TimestampStatuses.updatedAt`, `Components.TimestampStatuses`.`ComponentId` AS `Components.TimestampStatuses.ComponentId`, `Components.TimestampStatuses`.`ScanId` AS `Components.TimestampStatuses.ScanId` FROM (SELECT `Provider`.`id`,  `Provider`.`parser`, `Provider`.`name`, `Provider`.`createdAt`, `Provider`.`updatedAt` FROM `Providers` AS `Provider` WHERE `Provider`.`name` = 'name' LIMIT 1) AS `Provider` LEFT OUTER JOIN `Components` AS `Components` ON `Provider`.`id` = `Components`.`ProviderId` LEFT OUTER JOIN `TimestampStatuses` AS `Components.TimestampStatuses` ON `Components`.`id` = `Components.TimestampStatuses`.`ComponentId` GROUP BY `Components` . `id`;\r\n```\r\n\r\nI've tried a mixture of things including everything in this thread but with no luck.\r\n\r\nIn essence I'm trying to get the MAX createdAt value of TimestampStatuses.createdAt for each Components.id group\r\n\r\nNode: 6.9.2\r\n\"sequelize\": \"^3.28.0\"\r\n\r\n(This is a messy looking version of the same code that shows some of what I've already tried)\r\n```\r\n  // find the provider, nest all the components and nest their timestamps within them\r\n\r\n//  models.sequelize.query('SET GLOBAL sql_mode=(SELECT REPLACE(@@sql_mode,\\'ONLY_FULL_GROUP_BY\\',\\'\\'));')\r\n  provider.find({\r\n //   attributes: { exclude: ['*'] },\r\n  //  group: 'Components.TimestampStatuses.ComponentId',\r\n   // attributes: [[sequelize.fn('MAX', sequelize.col('Components.TimestampStatuses.createdAt')), 'no_hats']],\r\n    \r\n    where:{\r\n      name: name\r\n    },\r\n    include: [ \r\n      { \r\n      //  attributes: { exclude: ['*'] },\r\n        model: models.Component,   \r\n      //  group: 'id',\r\n        include: [\r\n          {\r\n            model: models.TimestampStatus,\r\n           // limit: 1,\r\n       //     group: 'Components.id',\r\n       //     attributes: [[sequelize.fn('MAX', sequelize.col('Components.TimestampStatuses.createdAt')), 'no_hats']]\r\n          } \r\n        ] \r\n      } \r\n    ]\r\n  })\r\n```"
      },
      {
        "user": "KhizarSH",
        "created_at": "2017-07-06T11:52:57Z",
        "body": "how we can convert this query to sequelized one\r\nSELECT \r\n    createdAt,\r\n    COUNT(*) AS TOTAL, \r\n    sum(DATE_FORMAT(createdAt,'%Y%c%d')=DATE_FORMAT(current_date(),'%Y%c%d')) tcount,\r\n    sum(DATE_FORMAT(createdAt,'%Y%c%d')=DATE_FORMAT(current_date()-1,'%Y%c%d')) ycount,\r\n    sum(DATE_FORMAT(createdAt,'%Y%c%d')=DATE_FORMAT(current_date()-2,'%Y%c%d')) threecount,\r\n    sum(DATE_FORMAT(createdAt,'%Y%c%d')=DATE_FORMAT(current_date()-3,'%Y%c%d')) fourcount,\r\n    sum(DATE_FORMAT(createdAt,'%Y%c%d')=DATE_FORMAT(current_date()-4,'%Y%c%d')) fifthcount\r\nFROM r5.users;"
      }
    ]
  },
  {
    "number": 2360,
    "title": "Renaming attributes",
    "created_at": "2014-09-26T20:19:30Z",
    "closed_at": "2014-09-27T07:42:31Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/sequelize/sequelize/issues/2360",
    "body": "sequelize@2.0.0-rc1\nThis code:\n\n``` javascript\nvar model = sequelize.define('model', {\n  a: Sequelize.TEXT\n});\n\nsequelize\n  .sync({\n    force: true\n  })\n  .then(function () {\n    return model.create({\n      a: 'qwerty'\n    });\n  })\n  .then(function () {\n    return model.find({\n      attributes: [['a', 'b']] //return a as b\n    });\n  })\n  .then(function (foo) {\n    console.log(foo.b); //undefined - why?\n    console.log(foo.toJSON());\n  });\n```\n\ngives me:\n\n``` console\nundefined\n{ b: 'qwerty' }\n```\n\nSo foo.b is undefined. I can foo.get('b'); however, but is it ok?\n",
    "comments_url": "https://api.github.com/repos/sequelize/sequelize/issues/2360/comments",
    "author": "qml",
    "comments": [
      {
        "user": "mickhansen",
        "created_at": "2014-09-27T07:42:31Z",
        "body": "I would suggest you setup `b` as a virtual attribute (use `Sequelize.VIRTUAL` as an attribute type) for future proofing.\n"
      }
    ]
  },
  {
    "number": 2351,
    "title": "question: how to bulk insert",
    "created_at": "2014-09-25T03:24:19Z",
    "closed_at": "2014-09-25T08:06:51Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/sequelize/sequelize/issues/2351",
    "body": "how to bulk insert this array:\n[\n                  {\n                    \"itemA\": \"bla bla\",\n                    \"itemB\":\n                            [\n                              \"a bla bla\",\n                              \"b bla bla\",\n                              \"c bla bla\",\n\n```\n                        ],\n\n              },\n```\n\n....\n]\n\nitemA is table A, itemB is table B and table A and table B have relationship. every element in array itemB is a record in table B.\n\nHow to bulk insert table A and table B?\n\nthanks.\n",
    "comments_url": "https://api.github.com/repos/sequelize/sequelize/issues/2351/comments",
    "author": "hukuba",
    "comments": [
      {
        "user": "mickhansen",
        "created_at": "2014-09-25T08:06:51Z",
        "body": "There's no support for nested bulk inserts, or regular inserts for that matter.\n(You might wanna give formatting the code a harder try next time, helps people out)\n"
      }
    ]
  },
  {
    "number": 2336,
    "title": "Cannot filter based on function",
    "created_at": "2014-09-23T16:55:40Z",
    "closed_at": "2014-09-24T06:17:42Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/sequelize/sequelize/issues/2336",
    "body": "Currently, there is no way to filter based on a function. Consider the following, where we want to return only rows where the id is mod 5.\n\nTable.find({where: {sequelize.fn('mod', sequelize.col('id'), 5): 0}})\n==> throws Error\n\nTable.find({where: {sequelize.fn('mod', 'id', 5): 0}})\n==> throws Error\n\nTable.find({where: {modrow: 0}, attributes: ['id', ['mod(id, 5)', 'modrow']]})\nselect id, modrow from table where table.modrow = 5; // wrong -> errors in sql\n",
    "comments_url": "https://api.github.com/repos/sequelize/sequelize/issues/2336/comments",
    "author": "kespindler",
    "comments": [
      {
        "user": "mickhansen",
        "created_at": "2014-09-24T06:17:42Z",
        "body": "Well the first two examples are not supported by javascript, at all - So you can't really fault sequelize for that one ;p\n\n``` js\nTable.find({\n  where: sequelize.and(\n    sequelize.where(sequelize.fn('MOD', sequelize.col('id')), 5), // rc-1\n    sequelize.literal('MOD(id) = 5') // other (afair)\n  )\n});\n```\n"
      }
    ]
  },
  {
    "number": 2335,
    "title": "Adding extra data to instances",
    "created_at": "2014-09-23T15:12:30Z",
    "closed_at": "2014-09-23T15:18:44Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/sequelize/sequelize/issues/2335",
    "body": "Currently I find the instances from sequelize and just return them using res.json:\n\n```\nShow.findAll({include:[Episode]})\n    .success(function (shows) {\n           res.json(shows);\n    }\n});\n```\n\nHowever I need to add extra data to each Show, that is retrieved asyncronously from a web service (and has live data so it can't be stored in the database), to be returned to the client. I figured I could just loop over each show and do `show.progress = data`, however that simply doesn't work. I'd use an instance method but the call to the web service is asynchronous, so I can't return the data from the instance method. Is there a way to achieve this?\n",
    "comments_url": "https://api.github.com/repos/sequelize/sequelize/issues/2335/comments",
    "author": "Jon889",
    "comments": [
      {
        "user": "mickhansen",
        "created_at": "2014-09-23T15:18:44Z",
        "body": "You can either use a virtual attribute and store the value on that. Or just do `shows = shows.map(function (show) { return show.toJSON(); })` and then query/assign data to that.\n"
      },
      {
        "user": "mickhansen",
        "created_at": "2014-09-23T15:19:12Z",
        "body": "Or use the new afterFind hooks.\n"
      },
      {
        "user": "Jon889",
        "created_at": "2014-09-24T13:52:32Z",
        "body": "Are virtual attributes different to instance methods?\n"
      },
      {
        "user": "mickhansen",
        "created_at": "2014-09-24T13:56:56Z",
        "body": "@Jon889 Yes. They are defined like any other attributes but the value never hits the database.\n"
      }
    ]
  },
  {
    "number": 2331,
    "title": "Optimally modeling a user settings/options table in sequelize",
    "created_at": "2014-09-23T00:26:44Z",
    "closed_at": "2014-11-10T08:05:12Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/sequelize/sequelize/issues/2331",
    "body": "I'm trying to implement user options now and I can't find an optimal way to do it in sequelize, all the methods that would normally be ideal are made sub-optimal by sequelize. I'm using sqlite in dev, mysql during pre-registration, and later in full production intend to use postgresql.\n## A UserOptions table\n\nThis is the classic method of doing it in a relational database. A unique UserID + key and a value which can be included in the find.\n- Queryable and indexable\n- Options can be updated individually\n- Works under all dialects\n\nIssues:\n- Sequelize's ORM is not well suited for it. Custom code needs to be implemented to do things like turn options into a hash to work with. And there is no type of upsert/replace support, the closest that exists would be to use findOrInitialize while managing updating the model instance's list/hash yourself when updating/inserting options.\n## Serialized JSON in TEXT/BLOB\n- Works under all dialects.\n\nIssues:\n- Not queryable\n- The blob of settings must be updated all at once\n## JSON data type\n- Queryable\n- Options can be updated individually\n\nIssues:\n- Will have to fall back to a BLOB outside of pg and implement separate code to set individual options\n- Not indexable\n- Sequelize support is pending\n## Hstore data type\n- Queryable and indexable\n- Options can be updated individually\n\nIssues:\n- Will have to fall back to a BLOB outside of pg and implement separate code to set individual options\n- Sequelize has no support for hstore queries or individual sets.\n",
    "comments_url": "https://api.github.com/repos/sequelize/sequelize/issues/2331/comments",
    "author": "dantman",
    "comments": [
      {
        "user": "mickhansen",
        "created_at": "2014-09-23T07:33:39Z",
        "body": "JSON/JSONB support is likely one of the next items on my list since i need it for a project of mine.\nWith the new afterFind hooks it would likely be trivial to implement option 1.\n"
      },
      {
        "user": "janmeier",
        "created_at": "2014-11-10T08:05:12Z",
        "body": "Closed, no response. If you need more feedback, this is probably better suited for irc @dantman \n"
      }
    ]
  },
  {
    "number": 2330,
    "title": "Defining field and name for foreignKey in association",
    "created_at": "2014-09-22T20:31:14Z",
    "closed_at": "2014-09-24T06:18:50Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/sequelize/sequelize/issues/2330",
    "body": "Hi, so I am migrating to Sequelize from Geddy/Model while using a Postgres. In Geddy all properties in the code are camelCase and when making queries it translates things to snake_case. \n\nTo keep with our existing codebase I want to continue having properties in the code be camelCase while column names are snake_case. For the property names I created a work around by creating a wrapper around `sequelize.define` to add a field entry to all attributes. \n\nI have not figured out how to do this for associations. I want to be able to specify `consult.find({where: {userId: 12}})` and have Sequelize know that the column name should be `user_id`. Is it possible to specify both field and name for foreignKey associations? Or what would be an appropriate work around?\n\nRight now I am using the most up-to-date beta (I believe it is 8) and intend on migrating to 2.0.0 when it comes out. \n",
    "comments_url": "https://api.github.com/repos/sequelize/sequelize/issues/2330/comments",
    "author": "vpontis",
    "comments": [
      {
        "user": "mickhansen",
        "created_at": "2014-09-23T07:17:56Z",
        "body": "The where part is built-in when using `field`.\nIn 2.0.0-rc1+ you can do:\n\n`ModelA.belongsTo(ModelB, {foreignKey: {name: 'userId', field: 'user_id'}})` \n"
      },
      {
        "user": "vpontis",
        "created_at": "2014-09-23T16:55:09Z",
        "body": "Ah, great thank you. I'll try switching to that version now. \n"
      },
      {
        "user": "vpontis",
        "created_at": "2014-09-23T16:58:10Z",
        "body": "Is there any way to define this programmatically so that the field is always the snake case version of the name? \n\nAs I mentioned before, I am doing this with `sequelize.define` and `attributes` by creating a wrapper around `sequelize.define`. But maybe there is a better way to convert both to snake_case. (The problem stems from Postgres not recognizing case so we have camelCase in app and need snake_case in Postgres.)\n"
      },
      {
        "user": "mickhansen",
        "created_at": "2014-09-24T06:18:50Z",
        "body": "@vpontis Not currently.\n"
      },
      {
        "user": "vpontis",
        "created_at": "2014-09-24T17:37:28Z",
        "body": "Great, thanks. The work for 2.0 is looking great. \n\nIt would definitely be awesome to have camelCase convert to snake_case on the db side in future instances. \n"
      },
      {
        "user": "mickhansen",
        "created_at": "2014-09-24T17:44:35Z",
        "body": "Yeah a way to define naming strategies would be something to consider.\n"
      }
    ]
  },
  {
    "number": 2323,
    "title": "[standard proposal] Model definitions and file placement should be standard?",
    "created_at": "2014-09-22T11:09:25Z",
    "closed_at": "2015-04-08T08:54:21Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/sequelize/sequelize/issues/2323",
    "body": "Implementation of sequelize on various framework environments (such as `express`) are different on some ways.\n\nIf sequelize had a standard on models placement, it would be extremely easy to implement nice features such as:\n- Migrations access to models (its a pain on the *ss to create a table with migration and do manually all constraints, relationships and some important data)\n- Sequelize models autoload (instead of having each one creating one)\n- And way more...\n\nWhat do you guys think about this?\n",
    "comments_url": "https://api.github.com/repos/sequelize/sequelize/issues/2323/comments",
    "author": "cusspvz",
    "comments": [
      {
        "user": "mickhansen",
        "created_at": "2014-09-22T11:14:27Z",
        "body": "Sure we can decide on a best practice - But i don't think we should enforce it.\n"
      },
      {
        "user": "janmeier",
        "created_at": "2014-09-22T11:18:15Z",
        "body": "I agree with @mickhansen , we shouldn't enforce the standard as the only way of doing stuff. It seems that people have already picked up on the express example, using the associate function. Not sure we should do more than that as best practice\n"
      },
      {
        "user": "cusspvz",
        "created_at": "2014-09-22T15:43:25Z",
        "body": "I agree too.\nAnd what about best practice for a `sequelize` auto model loading?\n\nInstead of creating an `models/index.js`, dooing this by implementing this as a feature on `sequelize` core and path could be given throught a path?\n\n```\n// app.js\nvar Sequelize = require( 'sequelize' )\n  , db = new Sequelize({ modelsPath: 'my/own/path/for/models' });\n\n// my/own/path/for/models/user.js\n// I like associate function approach, but if this could be part of core, it could be nicer like:\n\nmodule.exports = (function( sequelize, DataTypes, Sequelize ){\n  return sequelize.define({\n    /* fields */\n  }, {\n    /* options */\n  })\n    .whenReady(function ( M ) { // an object with all defined models, context as current model\n      /* associations */\n      // Example:\n      this.belongsTo( M.SomeOtherModel );\n\n    })\n});\n\n```\n"
      },
      {
        "user": "cusspvz",
        "created_at": "2014-09-24T01:14:22Z",
        "body": "ping @mickhansen @janmeier \n"
      },
      {
        "user": "janmeier",
        "created_at": "2015-04-08T08:54:21Z",
        "body": "We shouldn't enforce any practice, so I'm closing this issue. If you feel like it you are welcome to provide a docs PR to provide best practice examples @cusspvz \n"
      }
    ]
  },
  {
    "number": 2305,
    "title": "Can anyone explain how come dataValues can also be accessed directly from the Instance in sequelize",
    "created_at": "2014-09-20T02:55:49Z",
    "closed_at": "2014-09-20T06:20:23Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/sequelize/sequelize/issues/2305",
    "body": "Can anyone explain how come dataValues can also be accessed directly from the Instance in sequelize?\n\nI use for( var key in instance) but can't see any attributes. However I can use instance.name as instance.get('name').\n\nThanks.\n",
    "comments_url": "https://api.github.com/repos/sequelize/sequelize/issues/2305/comments",
    "author": "bluecenter",
    "comments": [
      {
        "user": "mickhansen",
        "created_at": "2014-09-20T06:20:23Z",
        "body": "`instance.get()` is the \"correct\" way. However for backwards compat we have set op dynamic getters on the instance that map to the respective `get()` calls.\n"
      },
      {
        "user": "bluecenter",
        "created_at": "2014-12-03T03:41:51Z",
        "body": "Thank you.\n"
      }
    ]
  },
  {
    "number": 2298,
    "title": "Is it possible to filter multiple fields with functions and ilikes?",
    "created_at": "2014-09-18T23:06:37Z",
    "closed_at": "2014-09-20T14:00:52Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/sequelize/sequelize/issues/2298",
    "body": "What I want to do:\n\nSELECT \\* from users WHERE unnacent(users.name) ILIKE '%t%' AND users.type = 1\n\nIs there a way to generate this query?\n",
    "comments_url": "https://api.github.com/repos/sequelize/sequelize/issues/2298/comments",
    "author": "grillorafael",
    "comments": [
      {
        "user": "mickhansen",
        "created_at": "2014-09-19T07:15:44Z",
        "body": "You might be able to accomplish it with something like:\n\n``` js\nwhere: sequelize.and(\n  [\"unnacent(users.name) ILIKE '%t%'\"],\n  {type: 1}\n)\n```\n"
      },
      {
        "user": "janmeier",
        "created_at": "2014-09-19T07:17:26Z",
        "body": "It would be ideal to be able to do something like:\n\n``` js\nreturn User.findAll({\n    where: Sequelize.and(\n        { type: 1 },\n        Sequelize.where(Sequelize.fn('unnacent', Sequelize.col('user.name')), \"%t%\", 'ILIKE')\n      )\n});\n```\n\nI'm looking at the querygenerator right now to see how hard it would be to refactor to achieve that :)\n"
      },
      {
        "user": "mickhansen",
        "created_at": "2014-09-19T07:25:59Z",
        "body": "i would prefer `'ILIKE', '%t%'` i think. But yeah that would be cool to be able to do. Right now Sequelize.where does very little ;p\n\nEdit: So we would support `where(column, whereLogicObject)` or `where(column, whereLogicItem, value)` or something like that.\n"
      },
      {
        "user": "janmeier",
        "created_at": "2014-09-19T07:28:24Z",
        "body": "Yea, my idea was that the ILIKE part is optional, but of course we can still do that by just detecting the number of args :)\n"
      },
      {
        "user": "mickhansen",
        "created_at": "2014-09-19T08:14:04Z",
        "body": "Yeah, a syntax like `where(columnLogic, {ilike: '%t%'})` is also possible (although that does seem a little dumb at that point.\n"
      },
      {
        "user": "grillorafael",
        "created_at": "2014-09-20T11:49:34Z",
        "body": "```\nwhere: sequelize.and(\n  [\"unnacent(users.name) ILIKE '%t%'\", \"unnacent(users.full_name) ILIKE '%t%'],\n  {type: 1, amount: 10}\n)\n```\n\nDoes this supposed to work?\n"
      },
      {
        "user": "mickhansen",
        "created_at": "2014-09-20T14:00:43Z",
        "body": "@grillorafael No, you need two seperate arrays.\n"
      },
      {
        "user": "grillorafael",
        "created_at": "2014-09-20T17:29:59Z",
        "body": "Ok! Thanks @mickhansen \n"
      }
    ]
  },
  {
    "number": 2296,
    "title": "[Question] [Unique] custom validation email",
    "created_at": "2014-09-18T18:38:49Z",
    "closed_at": "2014-09-22T15:20:02Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/sequelize/sequelize/issues/2296",
    "body": "Hi !! \n\nI'm trying since few days to make a custom validation for my email. My Models :\n\n``` js\n    module.exports = function(sequelize,DataTypes){\n    var Scanner = sequelize.define(\"Scanner\",\n        {\n            id      : {\n                primaryKey      : true,\n                autoIncrement   : true,\n                type            : DataTypes.INTEGER,\n                allowNull       : false\n            },\n            email   : {\n                type    : DataTypes.STRING,\n                validate:{\n                    isEmail: true,\n                    isUnique : function(value,next){\n                        next(); // I tried lot of code on internet but if i just do that i have an error (cf bottom)\n                    }\n                }\n            },\n            pin     : {\n                type : DataTypes.STRING,\n                    validate:{\n                        notEmpty: true\n                    }\n                }\n            },{\n                tableName       : 'scanner',\n                classMethods:{\n                    isValid : function(objScanner) {\n                        return this.build(objScanner).validate() == null ? true : false ;\n                    }\n                }\n            }\n        );\n        return Scanner;\n    };\n```\n\nBut when i'm just call the validation :\n\n``` js\n    Scanner.prototype.addScanner = function(callback){\n        _Scanner.create({email : this.email , pin : this.pin}).success(function(scan){\n            callback(null,scan);\n        }).error(function(error){\n            console.log(error); // send me : { email: [ 'undefined is not a function' ] }\n            callback(error,null);\n        });\n    };\n```\n\nI have this error :\n\n```\n  { email: [ 'undefined is not a function' ] }\n```\n\nSomeone should help me plz ? I tried to catch the error with : \" return new throw Error('already exists');\"  . He's catching my error good but the insert is event done...\n\nThanks in advance for your help :)\n",
    "comments_url": "https://api.github.com/repos/sequelize/sequelize/issues/2296/comments",
    "author": "cybernadinou",
    "comments": [
      {
        "user": "janmeier",
        "created_at": "2014-09-18T18:43:36Z",
        "body": "Probably the next callback is not defined. Async validations only work on 2.0\n"
      }
    ]
  },
  {
    "number": 2282,
    "title": "How to disconnect from DB?",
    "created_at": "2014-09-15T04:40:49Z",
    "closed_at": "2014-09-15T05:51:14Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/sequelize/sequelize/issues/2282",
    "body": "Hi! I'm being incredibly cheap and running a mysql+node project on heroku.  The super cheap DB option has a hard limit of 10 connections to mysql.  Heroku often \"suspends\" applications when they aren't in use, but that doesn't disconnect the sequelize client from mysql.  I can catch the `SIGTERM` and call a disconnect when the app is \"suspending\", but how would I disconnect the client?\n",
    "comments_url": "https://api.github.com/repos/sequelize/sequelize/issues/2282/comments",
    "author": "evantahler",
    "comments": [
      {
        "user": "mickhansen",
        "created_at": "2014-09-15T05:51:09Z",
        "body": "`sequelize.close()` is available on 2.0.0-dev13 and up i believe.\n"
      },
      {
        "user": "janmeier",
        "created_at": "2014-09-15T05:56:52Z",
        "body": "Do however note that there is no equivalent reconnect method so you won't be able to use that particular instance again \n"
      },
      {
        "user": "evantahler",
        "created_at": "2014-09-15T21:30:17Z",
        "body": "Thanks for the info! My desire is to have a \"clean\" shutdown where all connections my app has open can be closed, and `sequelize.close()` is exactly what I need.\n"
      }
    ]
  },
  {
    "number": 2249,
    "title": "How to prevent data loss when sync?",
    "created_at": "2014-09-08T06:27:22Z",
    "closed_at": "2014-09-08T06:58:53Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/sequelize/sequelize/issues/2249",
    "body": "Hi;\n\nI have some static tables like Languages in my database. \n\nEvery time I sync the database, all tables are dropped so data in my static tables are gone.\n\nHow can I prevent some of my tables dropped?\n",
    "comments_url": "https://api.github.com/repos/sequelize/sequelize/issues/2249/comments",
    "author": "burakkilic",
    "comments": [
      {
        "user": "mickhansen",
        "created_at": "2014-09-08T06:58:50Z",
        "body": "Don't use `sync({force: true})`, it drops and recreates tables.\nEither omit the force parameter or use migrations. (sync without force will just create tables that don't exist)\n"
      }
    ]
  },
  {
    "number": 2247,
    "title": "Nested Loading, Where clause Problem",
    "created_at": "2014-09-06T22:28:24Z",
    "closed_at": "2014-09-16T08:44:18Z",
    "labels": [
      "type: bug",
      "question"
    ],
    "url": "https://github.com/sequelize/sequelize/issues/2247",
    "body": "Hi, I have relation such as\n\nWhenever I do the following, no problem occurs:\n\n```\nCourse.find({\n    where: {\n        id: req.params.courseId,\n    },\n    include: [{\n        model: Assignment,\n        include: {\n            model: Feedback,\n        }\n    }]\n}).success(function(course) { ...\n```\n\nHowever when I do this\n\n```\nCourse.find({\n    where: {\n        id: req.params.courseId\n    },\n    include: [{\n        model: Assignment,\n        include: {\n            model: Feedback,\n            where: {\n                id: 1\n            }       \n        }\n    }]\n}).success(function(course) {\n```\n\nIt throws the following error when executing the query:\n\n```\nError: SQLITE_ERROR: no such column: Assignments.Feedback.id\n    --> in Database#all('SELECT `Courses`.*, `Assignments`.`id` AS `Assignments.id`, `Assignments`.`name` AS `Assignments.name`, `Assignments`.`description` AS `Assignments.description`, `Assignments`.`given` AS `Assignments.given`, `Assignments`.`due` AS `Assignments.due`, `Assignments`.`fileUploadAllowed` AS `Assignments.fileUploadAllowed`, `Assignments`.`studentScript` AS `Assignments.studentScript`, `Assignments`.`graderScript` AS `Assignments.graderScript`, `Assignments`.`createdAt` AS `Assignments.createdAt`, `Assignments`.`updatedAt` AS `Assignments.updatedAt`, `Assignments`.`CourseId` AS `Assignments.CourseId`, `Assignments.Feedbacks`.`id` AS `Assignments.Feedbacks.id`, `Assignments.Feedbacks`.`point` AS `Assignments.Feedbacks.point`, `Assignments.Feedbacks`.`message` AS `Assignments.Feedbacks.message`, `Assignments.Feedbacks`.`createdAt` AS `Assignments.Feedbacks.createdAt`, `Assignments.Feedbacks`.`updatedAt` AS `Assignments.Feedbacks.updatedAt`, `Assignments.Feedbacks`.`AssignmentId` AS `Assignments.Feedbacks.AssignmentId`, `Assignments.Feedbacks`.`OwnerId` AS `Assignments.Feedbacks.OwnerId`, `Assignments.Feedbacks`.`ViewerId` AS `Assignments.Feedbacks.ViewerId`, `Assignments.Feedbacks`.`GradingComponentId` AS `Assignments.Feedbacks.GradingComponentId` FROM (SELECT `Courses`.* FROM `Courses` WHERE `Courses`.`id`=\\'1\\' AND `Assignments`.`Feedback`.`id`=1 LIMIT 1) AS `Courses` LEFT OUTER JOIN `Assignments` AS `Assignments` ON `Courses`.`id` = `Assignments`.`CourseId` LEFT OUTER JOIN `Feedbacks` AS `Assignments.Feedbacks` ON `Assignments`.`id` = `Assignments.Feedbacks`.`AssignmentId`;', [Function])\n\n```\n\nAnd the related relations is as follows:\n\n```\n        Assignment.hasMany(Feedback);\n    Feedback.belongsTo(Assignment);\n    User.hasMany(Feedback, {as: \"Owner\", foreignKey: \"OwnerId\"});\n    Feedback.belongsTo(User, {as: \"Owner\", foreignKey: \"OwnerId\"});\n    User.hasMany(Feedback, {as: \"Viewer\", foreignKey: \"ViewerId\"});\n    Feedback.belongsTo(User, {as: \"Viewer\", foreignKey: \"ViewerId\"});\n```\n\nWhat is wrong here? I cannot find what causes a problem when I try to use where in the nested loads. \n",
    "comments_url": "https://api.github.com/repos/sequelize/sequelize/issues/2247/comments",
    "author": "mustafaakin",
    "comments": [
      {
        "user": "mickhansen",
        "created_at": "2014-09-07T14:44:47Z",
        "body": "Looks correct, are you sure that it's actually named `id` in your database?\n"
      },
      {
        "user": "mustafaakin",
        "created_at": "2014-09-07T14:47:39Z",
        "body": "Yes, it is the default primary key, it was an example field. It even fails when it is an empty `where:{}`\n"
      },
      {
        "user": "mickhansen",
        "created_at": "2014-09-07T14:54:22Z",
        "body": "Something must be off in your configuration (shouldn't fail on an empty where i suppose, might be a subquery issue though).\nCan you produce a minimal set of code (single file) that reproduces the issue?\n"
      },
      {
        "user": "rmcdaniel",
        "created_at": "2014-09-13T19:30:45Z",
        "body": "I am encountering the same issue. I have tried on 1.7.9 and unstable.\n"
      },
      {
        "user": "mickhansen",
        "created_at": "2014-09-14T13:42:39Z",
        "body": "@rmcdaniel well maybe you can help with a minimal test case then :)\n"
      },
      {
        "user": "rmcdaniel",
        "created_at": "2014-09-15T18:45:02Z",
        "body": "The fix in my case (1.7.9) was using Sequelize.or in each where clause even though that's nonintuitive and I'm not really sure why it works. Also, find vs. findAll makes a difference too. I didn't have to use .or on the same basic query by using findAll instead of find. I hope this helps someone.\n"
      }
    ]
  },
  {
    "number": 2232,
    "title": "How access instance properties on view engine not using dataValues",
    "created_at": "2014-09-04T03:24:33Z",
    "closed_at": "2014-09-05T00:23:21Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/sequelize/sequelize/issues/2232",
    "body": "Hi,\nfrom the API reference:\n\n> Instance instances operate with the concept of a dataValues property, which stores the actual values represented by the instance. By default, the values from dataValues can also be accessed directly from the Instance, that is:\n> \n> instance.field\n> // is the same as\n> instance.get('field')\n> // is the same as\n> instance.getDataValue('field')\n\nSo my goal was displaying User properties on my index.dust file. First I tried:\n\n```\napp.get('/dashboard',isLoggedIn, function(req, res) {\n      res.render('dashboard', {\n          user : req.user //  the values from dataValues can also be accessed directly from the Instance\n    });\n});\n```\n\n... and on the view:\n\n```\n<li><a hred=\"#\">{user.username}</a></li>\n```\n\n... but the result was an anchor without the username. The reason of this was because I had to define user like: req.user.**dataValues** instead just req.user.\n\nIs this the expected behavior, should I always expose my record instances using  **dataValues** ??\n\nThanks\n",
    "comments_url": "https://api.github.com/repos/sequelize/sequelize/issues/2232/comments",
    "author": "AlvaroOlivencia",
    "comments": [
      {
        "user": "janmeier",
        "created_at": "2014-09-04T07:23:18Z",
        "body": "No, dataValues is in internal property, so you _definitely_ shouldn't use that :). Use `toJSON` instead\n"
      },
      {
        "user": "mickhansen",
        "created_at": "2014-09-04T07:27:35Z",
        "body": "`req.user` ought to work directly as a view variable, but if it does not use `toJSON()` or `.get()` as @janmeier suggests\n"
      },
      {
        "user": "AlvaroOlivencia",
        "created_at": "2014-09-05T00:23:21Z",
        "body": "Thanks guys !\n"
      }
    ]
  },
  {
    "number": 2218,
    "title": "sequelize support SET type?",
    "created_at": "2014-08-31T04:18:19Z",
    "closed_at": "2014-08-31T10:00:35Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/sequelize/sequelize/issues/2218",
    "body": "sequelize support SET data type? thx\n",
    "comments_url": "https://api.github.com/repos/sequelize/sequelize/issues/2218/comments",
    "author": "feifeiiiiiiiiiii",
    "comments": [
      {
        "user": "mickhansen",
        "created_at": "2014-08-31T10:00:35Z",
        "body": "You can always use strings rather than the literals:\n\n``` js\nsomeAttribute: {\n  type: 'SET'\n}\n```\n\nBut no we don't support automatically converting from set to array, but if node-mysql does it might be built in.\n"
      }
    ]
  },
  {
    "number": 2190,
    "title": "Constraints, n:m associations, paranoid and eager loading",
    "created_at": "2014-08-26T13:05:48Z",
    "closed_at": "2014-10-21T10:35:40Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/sequelize/sequelize/issues/2190",
    "body": "I have this association, with paranoid mode activate, using sequelize `2.0.0-dev12`:\n\n```\nCampaign.hasMany(models.offer);\nOffer.hasMany(models.campaign, { onDelete: 'RESTRICT' });\n```\n\nWhen I remove an `Offer` through `.destroy`, here's the query's that emitted:\n\n```\nUPDATE \"Offers\" SET [...],\"createdAt\"='2014-08-26 12:43:01.939 +00:00',\"updatedAt\"='2014-08-26 12:53:04.628 +00:00',\"deletedAt\"='2014-08-26 12:53:04.628 +00:00',\"MerchantId\"=1,\"ProductId\"=1 WHERE \"id\"=3 RETURNING *\n```\n\nI thought the RESTRICT will prevent deleting an `Offer` if its reference in the `CampaignsOffers` join table. Anyway, the entry corresponding to that association is still present in the join table `CampaignsOffers` (I think this is intentional as the filter is such as we retrieve `Offers` where `Offers.deletedAt != NULL`). When I retrieve a campaign and eager load its associated offers though, I sometimes get this kind of results:\n\n```\nstorefront_1 |   [{ id: null,\n[...]\nstorefront_1 |     createdAt: null,\nstorefront_1 |     updatedAt: null,\nstorefront_1 |     deletedAt: null,\nstorefront_1 |     MerchantId: null,\nstorefront_1 |     ProductId: null,\nstorefront_1 |     campaignsOffer: \nstorefront_1 |      { createdAt: '2014-08-26T13:00:24.766Z',\nstorefront_1 |        updatedAt: '2014-08-26T13:00:24.766Z',\nstorefront_1 |        OfferId: 3,\nstorefront_1 |        CampaignId: 1 } } ]\n```\n\nThoughts?\n",
    "comments_url": "https://api.github.com/repos/sequelize/sequelize/issues/2190/comments",
    "author": "ghost",
    "comments": [
      {
        "user": "mickhansen",
        "created_at": "2014-08-26T13:29:41Z",
        "body": "Can you show all the queries executed please? Something must happen to the join table aswell.\nBut this is likely a bug with paranoid and join tables, paranoid for join tables is no longer possible on master since it makes little sense and worked very poorly.\n"
      },
      {
        "user": "ghost",
        "created_at": "2014-08-26T14:47:30Z",
        "body": "Nothing happens to the join table ... I thought that was on purpose as paranoid mode is on so it's still possible to handle things correctly with the `deletedAt` attribute (I guess). Here's the complete logs when I just go to the list of offers, and delete one: \n\n```\napi_1 | Executing (undefined): SELECT \"id\", \"uuid\", [...] , \"createdAt\", \"updatedAt\", \"deletedAt\" FROM \"Merchants\" AS \"Merchant\" WHERE \"Merchant\".\"uuid\"='b8a30ce6-6966-4964-9531-deb507ad501b' AND \"Merchant\".\"deletedAt\" IS NULL LIMIT 1;\napi_1 | Executing (undefined): SELECT \"id\", [...] , \"createdAt\", \"updatedAt\", \"deletedAt\", \"MerchantId\", \"ProductId\" FROM \"Offers\" AS \"Offer\" WHERE \"Offer\".\"id\"='2' AND \"Offer\".\"deletedAt\" IS NULL;\napi_1 | Executing (undefined): UPDATE \"Offers\" SET \"id\"=2, [...] ,\"createdAt\"='2014-08-26 14:40:34.780 +00:00',\"updatedAt\"='2014-08-26 14:42:26.405 +00:00',\"deletedAt\"='2014-08-26 14:42:26.403 +00:00',\"MerchantId\"=1,\"ProductId\"=1 WHERE \"id\"=2 RETURNING *\napi_1 | 2014-08-26 14:42:26 - info: [ action @ web ] to=172.17.42.1, action=deleteOffer, params={\"id\":\"2\",\"action\":\"deleteOffer\",\"apiVersion\":1}, duration=31, error=null\n```\n\nNothing happens to the join table.\n"
      },
      {
        "user": "janmeier",
        "created_at": "2014-08-26T20:29:45Z",
        "body": "Whats the output of the create table? Are the constraints created?\n"
      },
      {
        "user": "ghost",
        "created_at": "2014-08-27T05:09:25Z",
        "body": "Yep, constraints are created.\n\n```\napi_1 | Executing (undefined): CREATE TABLE \"CampaignsOffers\" (\"createdAt\" TIMESTAMP WITH TIME ZONE NOT NULL, \"updatedAt\" TIMESTAMP WITH TIME ZONE NOT NULL, \"OfferId\" INTEGER  REFERENCES \"Offers\" (\"id\") ON DELETE RESTRICT ON UPDATE CASCADE, \"CampaignId\" INTEGER  REFERENCES \"Campaigns\" (\"id\") ON DELETE CASCADE ON UPDATE CASCADE, PRIMARY KEY (\"OfferId\",\"CampaignId\"));\n```\n"
      },
      {
        "user": "janmeier",
        "created_at": "2014-08-28T10:24:18Z",
        "body": "Nothing happens querywise to the join table no, because that is handled by the db. \n\nCan you show a specific test case that fails to delete the records? Including models and associations please \n"
      },
      {
        "user": "mickhansen",
        "created_at": "2014-09-07T16:43:42Z",
        "body": "Closing, no user response.\n"
      },
      {
        "user": "ghost",
        "created_at": "2014-09-10T11:45:28Z",
        "body": "Sorry for the late answer, been busy in here.\n\nConcerning `Nothing happens querywise to the join table no, because that is handled by the db.` - does it also work in paranoid mode? In paranoid mode, the entry is not deleted, just the `deletedAt` column is updated. Does the db knows that when `deletedAt` is updated and not null, it should remove the association in the join table? I don't know but it sounds strange to me.\n\nI'll try to come back with a runnable.com snippet by today.\n"
      },
      {
        "user": "cusspvz",
        "created_at": "2014-09-11T14:22:43Z",
        "body": "> @janmeier \n> Nothing happens querywise to the join table no, because that is handled by the db.\n> \n> @kytwb \n>  does it also work in paranoid mode? \n\nThis is important for me too.\n"
      },
      {
        "user": "janmeier",
        "created_at": "2014-09-11T15:49:38Z",
        "body": "Just did a test and everything seems to be working fine. Waiting for a snippet\n"
      },
      {
        "user": "ghost",
        "created_at": "2014-09-15T05:33:28Z",
        "body": "I'll try to come back with a snippet asap, sorry for the delay. I don't know if its gonna help but here's what I get when I retrieve the `Offers` associated to a `Campaign`. Notice the entry where everything's set to null: that's the `Offer` I just removed. In the part of my application using angular, it seems to \"work\" fine as it just ignore that `null` entry when it's looping, but when I'm using this data server-side with dustjs, it doesn't ignore that `null` entry, creating an empty row.\n\n```\napi_1 | [ { dataValues: \napi_1 |      { id: 1,\napi_1 |        title: 'Single Sandwich',\napi_1 |        description: 'Just one Big Mac, for the petit-creux',\napi_1 |        picture: null,\napi_1 |        type: 'Straight Sale',\napi_1 |        quantity: '1',\napi_1 |        pricePerUnit: '5.99',\napi_1 |        shippingPrice: '0',\napi_1 |        currency: 'USD',\napi_1 |        createdAt: Wed Sep 10 2014 07:35:59 GMT+0000 (UTC),\napi_1 |        updatedAt: Wed Sep 10 2014 07:35:59 GMT+0000 (UTC),\napi_1 |        deletedAt: null,\napi_1 |        MerchantId: 1,\napi_1 |        ProductId: 1,\napi_1 |        campaignsOffer: [Object] },\napi_1 |     _previousDataValues: \napi_1 |      { id: 1,\napi_1 |        title: 'Single Sandwich',\napi_1 |        description: 'Just one Big Mac, for the petit-creux',\napi_1 |        picture: null,\napi_1 |        type: 'Straight Sale',\napi_1 |        quantity: '1',\napi_1 |        pricePerUnit: '5.99',\napi_1 |        shippingPrice: '0',\napi_1 |        currency: 'USD',\napi_1 |        createdAt: Wed Sep 10 2014 07:35:59 GMT+0000 (UTC),\napi_1 |        updatedAt: Wed Sep 10 2014 07:35:59 GMT+0000 (UTC),\napi_1 |        deletedAt: null,\napi_1 |        MerchantId: 1,\napi_1 |        ProductId: 1,\napi_1 |        campaignsOffer: [Object] },\napi_1 |     __options: \napi_1 |      { timestamps: true,\napi_1 |        createdAt: 'createdAt',\napi_1 |        updatedAt: 'updatedAt',\napi_1 |        deletedAt: 'deletedAt',\napi_1 |        instanceMethods: {},\napi_1 |        classMethods: [Object],\napi_1 |        validate: {},\napi_1 |        freezeTableName: false,\napi_1 |        underscored: false,\napi_1 |        underscoredAll: false,\napi_1 |        paranoid: true,\napi_1 |        whereCollection: [Object],\napi_1 |        schema: null,\napi_1 |        schemaDelimiter: '',\napi_1 |        language: 'en',\napi_1 |        defaultScope: null,\napi_1 |        scopes: null,\napi_1 |        hooks: [Object],\napi_1 |        omitNull: false,\napi_1 |        sequelize: [Object],\napi_1 |        uniqueKeys: {},\napi_1 |        hasPrimaryKeys: true },\napi_1 |     options: \napi_1 |      { isNewRecord: false,\napi_1 |        isDirty: false,\napi_1 |        include: [Object],\napi_1 |        includeNames: [Object],\napi_1 |        includeMap: [Object],\napi_1 |        includeValidated: true,\napi_1 |        raw: true,\napi_1 |        attributes: undefined },\napi_1 |     hasPrimaryKeys: true,\napi_1 |     __eagerlyLoadedAssociations: [],\napi_1 |     isNewRecord: false,\napi_1 |     campaignsOffer: \napi_1 |      { dataValues: [Object],\napi_1 |        _previousDataValues: [Object],\napi_1 |        __options: [Object],\napi_1 |        options: [Object],\napi_1 |        hasPrimaryKeys: true,\napi_1 |        __eagerlyLoadedAssociations: [],\napi_1 |        isNewRecord: false } },\napi_1 |   { dataValues: \napi_1 |      { id: null,\napi_1 |        title: null,\napi_1 |        description: null,\napi_1 |        picture: null,\napi_1 |        type: null,\napi_1 |        quantity: null,\napi_1 |        pricePerUnit: null,\napi_1 |        shippingPrice: null,\napi_1 |        currency: null,\napi_1 |        createdAt: null,\napi_1 |        updatedAt: null,\napi_1 |        deletedAt: null,\napi_1 |        MerchantId: null,\napi_1 |        ProductId: null,\napi_1 |        campaignsOffer: [Object] },\napi_1 |     _previousDataValues: \napi_1 |      { id: null,\napi_1 |        title: null,\napi_1 |        description: null,\napi_1 |        picture: null,\napi_1 |        type: null,\napi_1 |        quantity: null,\napi_1 |        pricePerUnit: null,\napi_1 |        shippingPrice: null,\napi_1 |        currency: null,\napi_1 |        createdAt: null,\napi_1 |        updatedAt: null,\napi_1 |        deletedAt: null,\napi_1 |        MerchantId: null,\napi_1 |        ProductId: null,\napi_1 |        campaignsOffer: [Object] },\napi_1 |     __options: \napi_1 |      { timestamps: true,\napi_1 |        createdAt: 'createdAt',\napi_1 |        updatedAt: 'updatedAt',\napi_1 |        deletedAt: 'deletedAt',\napi_1 |        instanceMethods: {},\napi_1 |        classMethods: [Object],\napi_1 |        validate: {},\napi_1 |        freezeTableName: false,\napi_1 |        underscored: false,\napi_1 |        underscoredAll: false,\napi_1 |        paranoid: true,\napi_1 |        whereCollection: [Object],\napi_1 |        schema: null,\napi_1 |        schemaDelimiter: '',\napi_1 |        language: 'en',\napi_1 |        defaultScope: null,\napi_1 |        scopes: null,\napi_1 |        hooks: [Object],\napi_1 |        omitNull: false,\napi_1 |        sequelize: [Object],\napi_1 |        uniqueKeys: {},\napi_1 |        hasPrimaryKeys: true },\napi_1 |     options: \napi_1 |      { isNewRecord: false,\napi_1 |        isDirty: false,\napi_1 |        include: [Object],\napi_1 |        includeNames: [Object],\napi_1 |        includeMap: [Object],\napi_1 |        includeValidated: true,\napi_1 |        raw: true,\napi_1 |        attributes: undefined },\napi_1 |     hasPrimaryKeys: true,\napi_1 |     __eagerlyLoadedAssociations: [],\napi_1 |     isNewRecord: false,\napi_1 |     campaignsOffer: \napi_1 |      { dataValues: [Object],\napi_1 |        _previousDataValues: [Object],\napi_1 |        __options: [Object],\napi_1 |        options: [Object],\napi_1 |        hasPrimaryKeys: true,\napi_1 |        __eagerlyLoadedAssociations: [],\napi_1 |        isNewRecord: false } },\napi_1 |   { dataValues: \napi_1 |      { id: 3,\napi_1 |        title: '4 x 1 Sandwich',\napi_1 |        description: 'Enough so you can see it coming',\napi_1 |        picture: null,\napi_1 |        type: 'Straight Sale',\napi_1 |        quantity: '4',\napi_1 |        pricePerUnit: '3.99',\napi_1 |        shippingPrice: '0',\napi_1 |        currency: 'USD',\napi_1 |        createdAt: Wed Sep 10 2014 07:35:59 GMT+0000 (UTC),\napi_1 |        updatedAt: Wed Sep 10 2014 07:35:59 GMT+0000 (UTC),\napi_1 |        deletedAt: null,\napi_1 |        MerchantId: 1,\napi_1 |        ProductId: 1,\napi_1 |        campaignsOffer: [Object] },\napi_1 |     _previousDataValues: \napi_1 |      { id: 3,\napi_1 |        title: '4 x 1 Sandwich',\napi_1 |        description: 'Enough so you can see it coming',\napi_1 |        picture: null,\napi_1 |        type: 'Straight Sale',\napi_1 |        quantity: '4',\napi_1 |        pricePerUnit: '3.99',\napi_1 |        shippingPrice: '0',\napi_1 |        currency: 'USD',\napi_1 |        createdAt: Wed Sep 10 2014 07:35:59 GMT+0000 (UTC),\napi_1 |        updatedAt: Wed Sep 10 2014 07:35:59 GMT+0000 (UTC),\napi_1 |        deletedAt: null,\napi_1 |        MerchantId: 1,\napi_1 |        ProductId: 1,\napi_1 |        campaignsOffer: [Object] },\napi_1 |     __options: \napi_1 |      { timestamps: true,\napi_1 |        createdAt: 'createdAt',\napi_1 |        updatedAt: 'updatedAt',\napi_1 |        deletedAt: 'deletedAt',\napi_1 |        instanceMethods: {},\napi_1 |        classMethods: [Object],\napi_1 |        validate: {},\napi_1 |        freezeTableName: false,\napi_1 |        underscored: false,\napi_1 |        underscoredAll: false,\napi_1 |        paranoid: true,\napi_1 |        whereCollection: [Object],\napi_1 |        schema: null,\napi_1 |        schemaDelimiter: '',\napi_1 |        language: 'en',\napi_1 |        defaultScope: null,\napi_1 |        scopes: null,\napi_1 |        hooks: [Object],\napi_1 |        omitNull: false,\napi_1 |        sequelize: [Object],\napi_1 |        uniqueKeys: {},\napi_1 |        hasPrimaryKeys: true },\napi_1 |     options: \napi_1 |      { isNewRecord: false,\napi_1 |        isDirty: false,\napi_1 |        include: [Object],\napi_1 |        includeNames: [Object],\napi_1 |        includeMap: [Object],\napi_1 |        includeValidated: true,\napi_1 |        raw: true,\napi_1 |        attributes: undefined },\napi_1 |     hasPrimaryKeys: true,\napi_1 |     __eagerlyLoadedAssociations: [],\napi_1 |     isNewRecord: false,\napi_1 |     campaignsOffer: \napi_1 |      { dataValues: [Object],\napi_1 |        _previousDataValues: [Object],\napi_1 |        __options: [Object],\napi_1 |        options: [Object],\napi_1 |        hasPrimaryKeys: true,\napi_1 |        __eagerlyLoadedAssociations: [],\napi_1 |        isNewRecord: false } } ]\n```\n"
      },
      {
        "user": "janmeier",
        "created_at": "2014-09-23T10:53:32Z",
        "body": "ping @kytwb \n"
      },
      {
        "user": "janmeier",
        "created_at": "2014-10-21T10:35:40Z",
        "body": "No response\n"
      }
    ]
  },
  {
    "number": 2169,
    "title": "Message belongs to Author which is related to Receiver",
    "created_at": "2014-08-21T07:20:58Z",
    "closed_at": "2014-08-21T08:24:03Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/sequelize/sequelize/issues/2169",
    "body": "I want to make a relationship of which is the same as the title. The user sends a message, this Message belongs to User, the Message belongs to Receiver (which is a User instance), and vice-versa. Someone can help me to find the best way of doing this?\n",
    "comments_url": "https://api.github.com/repos/sequelize/sequelize/issues/2169/comments",
    "author": "VictorQueiroz",
    "comments": [
      {
        "user": "janmeier",
        "created_at": "2014-08-21T07:26:30Z",
        "body": "If i understood you correctly: \n\n``` js\nUser.hasMany(Message, { as: 'sent', foreignKey: 'sender_id' });\nUser.hasMany(Message, { as: 'recieved', foreignKey: 'reciever_id' });\n\nMessage.belongsTo(User, { as: 'sender', foreignKey: 'sender_id' });\nMessage.belongsTo(User, { as: 'reciever', foreignKey: 'reciever_id' });\n\n\nuser.getSent();\nuser.getRecieved();\nmessage.getSender();\nmessage.getReciever();\n```\n"
      },
      {
        "user": "VictorQueiroz",
        "created_at": "2014-08-21T07:37:53Z",
        "body": "I solved my question, in my own question. What I dumb I am, really thank's :+1: \n\nBut `message.addSender()` it is not working, I got undefined...\n"
      },
      {
        "user": "janmeier",
        "created_at": "2014-08-21T07:38:47Z",
        "body": ":D\n"
      },
      {
        "user": "janmeier",
        "created_at": "2014-08-21T07:47:43Z",
        "body": "Which version are you on?\n"
      },
      {
        "user": "janmeier",
        "created_at": "2014-08-21T07:49:04Z",
        "body": "Oh, just noticed. Since message can only have one sender its `setSender`\n"
      },
      {
        "user": "VictorQueiroz",
        "created_at": "2014-08-21T08:04:55Z",
        "body": "Now, look at this:\n\n```\n      User.create({\n        name: faker.Name.findName(),\n        email: faker.Internet.email(),\n        password: '123456789',\n        username: faker.Internet.userName()\n      }).success(function (author) {\n        User.create({\n          name: faker.Name.findName(),\n          email: faker.Internet.email(),\n          password: '123456789',\n          username: faker.Internet.userName()\n        }).success(function (receiver) {\n          Message.create({\n            content: faker.Lorem.sentences(30)\n          }).success(function (message) {\n            message.setAuthor(author);\n            message.setReceiver(receiver);\n            message.save();\n\n            Message.findAll({\n                where: {\n                    id: message.id,\n                },\n                include: [\n                    {model: User, as: 'Author'}\n                ]\n            }).success(function (message) {\n                res.json(message)\n            })\n          });\n        });\n      });\n```\n\nI got `Error: User (Author) is not associated to Message!`...\n"
      },
      {
        "user": "janmeier",
        "created_at": "2014-08-21T08:08:06Z",
        "body": "Because in the relations we called them sender and reciever, not author :). You'll haveto change the as part of the belongsto\n"
      },
      {
        "user": "VictorQueiroz",
        "created_at": "2014-08-21T08:10:59Z",
        "body": "Yeah, I have changed it, of course. But still the error, this is not the cause. Look at my model:\n\n```\nvar faker = require('faker');\n\nmodule.exports = function (sequelize, DataTypes) {\n    var Message = sequelize.define('Message', {\n        content: DataTypes.TEXT\n    }, {\n    freezeTableName: true,\n    timestamps: true,\n    paranoid: false,\n    underscored: true,\n    classMethods: {\n      associate: function(models) {\n        var User = models.User;\n\n        Message.belongsTo(User, {\n          as: 'receiver',\n          foreignKey: 'receiver_id'\n        });\n\n        Message.belongsTo(User, {\n          as: 'author',\n          foreignKey: 'author_id'\n        });        \n\n        User.hasMany(Message, { \n          foreignKey: 'author_id'\n        });        \n\n        User.hasMany(Message, { \n          foreignKey: 'receiver_id'\n        });\n      }\n    },\n    tableName: 'messages'\n    });\n\n    return Message;\n};\n```\n"
      },
      {
        "user": "janmeier",
        "created_at": "2014-08-21T08:11:24Z",
        "body": "Lower case a in your belongsTo - upper case in your find ;)\n"
      },
      {
        "user": "VictorQueiroz",
        "created_at": "2014-08-21T08:23:01Z",
        "body": "You was right. And I just attached a .success() at the final of each .set[AS] and everything worked just as I expected. Thank you.\n"
      }
    ]
  },
  {
    "number": 2130,
    "title": "Define PK and FK simultaneously",
    "created_at": "2014-08-08T07:47:54Z",
    "closed_at": "2014-08-12T10:25:48Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/sequelize/sequelize/issues/2130",
    "body": "Seems it's not possible to define PK and FK simultaneously. If I have tables Foo and Bar it's not possible to create FooBar, where PK(foo_id, bar_id) is also foreign keys. I can define additional index in migration but it's not always possible in some DB like SQLite.\n",
    "comments_url": "https://api.github.com/repos/sequelize/sequelize/issues/2130/comments",
    "author": "shadeglare",
    "comments": [
      {
        "user": "janmeier",
        "created_at": "2014-08-08T13:19:30Z",
        "body": "That should be possible. If you let sequelize create the foobar table it should do exactly that (on 2.0). Or perhaps it creates a unique instead of a primary index but the effect should be the same. \n\nTry to show a concrete example and the structure you expect then I'll help you achieve that :-) \n"
      },
      {
        "user": "shadeglare",
        "created_at": "2014-08-10T21:05:36Z",
        "body": "Hi. There are tables:\n\n``` javascript\nvar Mood = connection.define('Mood', {\n    description: {\n        type: Sequelize.STRING,\n        unique: true\n    }\n});\n\nvar Gag = connection.define('Gag', {\n    description: {\n        type: Sequelize.STRING,\n        unique: true\n    }\n});\n\nvar MoodGag = connection.define('MoodGag', {\n    gagId: {\n        type: Sequelize.INTEGER,\n        primaryKey: true\n    },\n    moodId: {\n        type: Sequelize.INTEGER,\n        primaryKey: true\n    }\n});\n```\n\nHow could I make the moodId and gagId foreign keys? gagId should be a FK to the Gag table id and moodId should be a FK to the Mood table id.\n"
      },
      {
        "user": "janmeier",
        "created_at": "2014-08-12T06:44:03Z",
        "body": "``` js\nvar MoodGag = sequelize.define('MoodGag', {\n    gagId: {\n        type: Sequelize.INTEGER,\n        primaryKey: true,\n        references: Gag\n    },\n    moodId: {\n        type: Sequelize.INTEGER,\n        primaryKey: true,\n        references: Mood\n    }\n});\n```\n\nWill give you\n\n``` sql\nCREATE TABLE IF NOT EXISTS \"mood_gags\" (\"gagId\" INTEGER  REFERENCES \"gags\" (\"id\"), \"moodId\" INTEGER  REFERENCES \"moods\" (\"id\"), PRIMARY KEY (\"gagId\",\"moodId\"))\n```\n\nYou can also use associations:\n\n``` js\nGag.hasMany(Mood, { through: MoodGag });\nMood.hasMany(Gag, { through: MoodGag });\n```\n\nWhich will give you\n\n``` sql\nCREATE TABLE IF NOT EXISTS \"mood_gags\" (\"gagId\" INTEGER , \"moodId\" INTEGER , \"MoodId\" INTEGER REFERENCES \"moods\" (\"id\") ON DELETE CASCADE ON UPDATE CASCADE, \"GagId\" INTEGER REFERENCES \"gags\" (\"id\") ON DELETE CASCADE ON UPDATE CASCADE, UNIQUE (\"MoodId\", \"GagId\"), PRIMARY KEY (\"gagId\",\"moodId\"));\n```\n"
      },
      {
        "user": "janmeier",
        "created_at": "2014-08-12T06:44:28Z",
        "body": "Mind you, these things are primarily for 2.0. I think references works for 1.7 also though\n"
      },
      {
        "user": "shadeglare",
        "created_at": "2014-08-12T10:19:59Z",
        "body": "Thanks. I also noticed that I haven't to define PK in the 'middle' table when I want to create FKs cause they will be created automatically ). Exactly what I need.\n\nSo the full example will be:\n\n``` javascript\nvar Mood = connection.define('Mood', {\n    description: {\n        type: Sequelize.STRING,\n        unique: true\n    }\n});\n\nvar Gag = connection.define('Gag', {\n    description: {\n        type: Sequelize.STRING,\n        unique: true\n    }\n});\n\nvar MoodGag = connection.define('MoodGag', {});\n\nGag.hasMany(Mood, { through: MoodGag, foreignKey: 'gagId' });\nMood.hasMany(Gag, { through: MoodGag, foreignKey: 'moodId' });\n```\n\nAnd that gives you SQL:\n\n``` SQL\nCREATE TABLE IF NOT EXISTS `MoodGags` (`createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `moodId` INTEGER NOT NULL REFERENCES `Moods` (`id`) ON DELETE CASCADE ON UPDATE CASCADE, `gagId` INTEGER NOT NULL REFERENCES `Gags` (`id`) ON DELETE CASCADE ON UPDATE CASCADE, PRIMARY KEY (`moodId`, `gagId`));\n```\n"
      },
      {
        "user": "janmeier",
        "created_at": "2014-08-12T10:25:35Z",
        "body": "In that case you can also just use MoodGag as a string so you don't have to define a model for it. \n\nYou only need to create the model manually if you want to have additional attributes in the through table \n"
      }
    ]
  },
  {
    "number": 2129,
    "title": "MYSQL: 'hasOne' and 'belongsTo' methods always create indexes with 'cardinality' as 0 (lowest)",
    "created_at": "2014-08-07T16:26:33Z",
    "closed_at": "2014-08-12T06:21:09Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/sequelize/sequelize/issues/2129",
    "body": "Even when there is one-to-one mapping, 'cardinality' attribute of index of the foreign key created by 'hasOne' or 'belongsTo' methods is always zero. This leads to performance degradation as query plan adopted is more expensive than necessary.\n",
    "comments_url": "https://api.github.com/repos/sequelize/sequelize/issues/2129/comments",
    "author": "sandeepgarg84",
    "comments": [
      {
        "user": "janmeier",
        "created_at": "2014-08-07T17:14:58Z",
        "body": "Wut? I have no idea what your issue here is? \n\nCardinality is (and estimate of) the number of unique values in the index. Per my Googling you can't do anything to hint about the cardinality when creating the index \n"
      },
      {
        "user": "sandeepgarg84",
        "created_at": "2014-08-12T06:21:09Z",
        "body": "Actually when I reverse engineered my DB on SQL workbench, it shown 1:n relationship in ER diagram for my 'hasOne' associations also. So, after checking out, it turned out cardinality was zero. So, posted the question.\nMy bad. Seems like cardinality cannot be set externally. Closing this issue.\n"
      }
    ]
  },
  {
    "number": 2123,
    "title": "Delete associated records",
    "created_at": "2014-08-06T21:19:12Z",
    "closed_at": "2014-08-15T19:29:52Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/sequelize/sequelize/issues/2123",
    "body": "If I associate a model like that:\n\n``` javascript\nUser.hasMany(models.Conversation);\n```\n\nIs these a way to delete all or some associated records when I destroy() a persistent instance like that:\n\n``` javascript\nUser.find({where:{id:userId}}).success(function(){\n    user.destroy();\n});\n```\n",
    "comments_url": "https://api.github.com/repos/sequelize/sequelize/issues/2123/comments",
    "author": "oleduc",
    "comments": [
      {
        "user": "mickhansen",
        "created_at": "2014-08-07T07:00:45Z",
        "body": "You might want a foreign key cascade: `User.hasMany(models.Conversation, {onDelete: 'CASCADE'});`\n"
      },
      {
        "user": "oleduc",
        "created_at": "2014-08-13T17:37:11Z",
        "body": "In the model definition:\n\n``` Javascript\nassociate: function(models) {\n                User.hasMany(models.Association,{onDelete: 'CASCADE'});\n                User.hasMany(models.Association2,{onDelete: 'CASCADE'});\n                User.hasMany(models.Association3,{onDelete: 'CASCADE'});\n                User.hasMany(models.Address,{onDelete: 'CASCADE'});\n            },\n```\n\nUsage:\n\n``` Javascript\nuser.destroy();\n```\n\nWill not remove associated rows from database or remove the foreign key.\n\nI must be doing something wrong.\nThank you very much for you help.\n"
      },
      {
        "user": "janmeier",
        "created_at": "2014-08-13T17:49:26Z",
        "body": "What does the create table statements look like? Are the constraints actually created? What version are you on? \n"
      },
      {
        "user": "oleduc",
        "created_at": "2014-08-15T19:29:52Z",
        "body": "Apparently the way I restored my data after a forced sync would remove table constraints. Thanks.\n"
      }
    ]
  },
  {
    "number": 2112,
    "title": "Hot to order by associated model using function?",
    "created_at": "2014-08-04T09:36:08Z",
    "closed_at": "2017-07-06T23:24:49Z",
    "labels": [
      "type: feature",
      "question",
      "stale"
    ],
    "url": "https://github.com/sequelize/sequelize/issues/2112",
    "body": "```\nPost.hasMany(PostTranslation)\n```\n\nI want to order by lowercase `PostTranslation.text`. So I want to end up with following statement in sql:\n\n```\n...\nORDER BY lower(\"PostTranslations\".\"text\") DESC\n```\n\nHowever I was not able to achieve this. I tried to use `Sequelize.literal(...)` in order array, but it is applied to both inner and outer SELECT and this causes error because `PostTranslations` is joined only in outer SELECT... Also trying to `order: [{ model: PostTranslation },[Sequelize.fn('lower',Sequelize.col('text'))]]` causes error (`ORDER BY \"PostTranslation\".lower(...)`)...\n",
    "comments_url": "https://api.github.com/repos/sequelize/sequelize/issues/2112/comments",
    "author": "alekbarszczewski",
    "comments": [
      {
        "user": "stale[bot]",
        "created_at": "2017-06-29T13:22:36Z",
        "body": "This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. If this is still an issue, just leave a comment 🙂\n"
      }
    ]
  },
  {
    "number": 2098,
    "title": "Is it possible to use CamelCase in model definition, and snake_case in DB?",
    "created_at": "2014-07-30T19:10:07Z",
    "closed_at": "2014-07-31T11:35:52Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/sequelize/sequelize/issues/2098",
    "body": "Title says it all.\n\nI want my models to look like this (in livescript):\n\n``` livescript\nUser = db.define \\User, {\n  id:\n    type: db.INTEGER\n    primary-key: yes\n\n  first-name:\n    type: db.STRING\n\n  last-name:\n    type: db.STRING\n\n  middle-name:\n    type: db.STRING\n\n  username:\n    type: db.STRING\n\n  email:\n    type: db.STRING\n\n  nickname:\n    type: db.STRING\n\n  password-hash:\n    type: db.STRING\n\n  gender:\n    type: db.ENUM \\male, \\female\n\n  date-of-birth:\n    type: db.DATE\n\n}\n```\n\nbut my DB schema to look like this:\n\n``` sql\nCREATE TABLE public.users ( \n    id Integer DEFAULT nextval('users_id_seq'::regclass) NOT NULL UNIQUE\n    , first_name Character Varying( 255 )\n    , last_name Character Varying( 255 )\n    , middle_name Character Varying( 255 )\n    , nickname Character Varying( 255 )\n    , date_of_birth Timestamp With Time Zone\n    , created_at Timestamp With Time Zone DEFAULT now() NOT NULL\n    , updated_at Timestamp With Time Zone DEFAULT now() NOT NULL\n    , gender public.gender\n    , email Character Varying( 2044 ) NOT NULL\n    , username Character Varying( 2044 ) NOT NULL\n    , password_hash Character Varying( 2044 ) NOT NULL\n    , PRIMARY KEY ( id )\n    , CONSTRAINT users_username_key UNIQUE( username )\n    , CONSTRAINT users_email_key UNIQUE( email ) \n);\n```\n",
    "comments_url": "https://api.github.com/repos/sequelize/sequelize/issues/2098/comments",
    "author": "legomind",
    "comments": [
      {
        "user": "mickhansen",
        "created_at": "2014-07-30T20:07:49Z",
        "body": "``` js\nfirstName: {\n  type: Type\n  field: 'first_name'\n}\n```\n\nAlthough this won't work for sync() right now unfortuneatly, `field` is not yet supported in `sync()`\n"
      },
      {
        "user": "legomind",
        "created_at": "2014-07-30T21:47:42Z",
        "body": "ahhh... I actually tried that, but I was relying on the results of `sync()`\nExcellent.\n\nBut there is no way to do this automatically perhaps a global setting? \n"
      },
      {
        "user": "mickhansen",
        "created_at": "2014-07-31T05:30:52Z",
        "body": "Unfortuneatly no, not currently.\n"
      },
      {
        "user": "legomind",
        "created_at": "2014-07-31T11:35:52Z",
        "body": "OK then looks l'm going with this method:\n\n``` livescript\nrequire! {\n  _: underscore.string\n}\n\nadd-fields = (model) ->\n  { [ k, (v.field = _.underscored(k); v) ] for k, v of model}\n\ndb.define \\User, add-fields {\n  id:\n    type: db.INTEGER\n    primary-key: yes\n\n  first-name:\n    type: db.STRING\n\n  ...\n}\n\n```\n\nThanks for your hard work. This module is awesome!!!\n"
      },
      {
        "user": "vpontis",
        "created_at": "2014-09-19T23:48:28Z",
        "body": "@legomind are you using that method to translate CamelCase properties into snake_case columns in the db? I can't quite tell what it is doing. \n\nThanks. \n"
      },
      {
        "user": "legomind",
        "created_at": "2014-09-19T23:53:28Z",
        "body": "Yes, @vpontis. Here is that method in vanilla javascript.\n`_` is `underscore.string` module\n\n``` javascript\nvar addFields;\naddFields = function(model){\n  var k, v, results$ = {};\n  for (k in model) {\n    v = model[k];\n    results$[k] = (v.field = _.underscored(k), v);\n  }\n  return results$;\n};\n```\n"
      },
      {
        "user": "vpontis",
        "created_at": "2014-09-20T00:04:25Z",
        "body": "Ah sweet, thanks!\n"
      }
    ]
  },
  {
    "number": 2077,
    "title": "`Sequelize.fn(Sequelize.col(...)) IN (...)` in where condition?",
    "created_at": "2014-07-22T21:11:40Z",
    "closed_at": "2014-11-28T21:15:07Z",
    "labels": [
      "type: bug",
      "question"
    ],
    "url": "https://github.com/sequelize/sequelize/issues/2077",
    "body": "Can't find is it possible to add something like\n`COALESCE(place_type_codename, announcement_type_codename) IN ('Lost', 'Found')`\nto `where` condition?\ni.e.:\n\n```\nSELECT\n    id, type, item_id, place_type_codename, announcement_type_codename\nFROM\n    feed\nWHERE\n    archived_at IS NULL\n    AND\n    COALESCE(place_type_codename, announcement_type_codename) IN ('Lost', 'Found')\n```\n\nI know we can do something like \n\n```\nvar filter = ['Lost', 'Found'];\nSequelize.and(\n    { archived_at: null },\n    Sequelize.or({\n      place_type_codename: filter\n    }, {\n      announcement_type_codename: filter\n    })\n```\n\nbut let's assume that we have another complex function.\n\nThanks.\n",
    "comments_url": "https://api.github.com/repos/sequelize/sequelize/issues/2077/comments",
    "author": "djmadcat",
    "comments": [
      {
        "user": "mickhansen",
        "created_at": "2014-07-23T07:23:45Z",
        "body": "This is an ideal case for `sequelize.where(sequelize.fn(), {in: []})` however that is not fully supported yet.\nFor now you might have to use `sequelize.literal()` and write it raw.\n"
      },
      {
        "user": "djmadcat",
        "created_at": "2014-07-24T13:05:35Z",
        "body": "@mickhansen Thanks.\nI will appreciate if you give snippets of using:\n- `sequelize.where(sequelize.fn(), {in: []})` with `sequelize.and` (is it possible?)\n- `sequelize.literal` with `sequelize.and`\n\nin `findAll` request.\n"
      },
      {
        "user": "jtraband",
        "created_at": "2014-10-10T01:31:52Z",
        "body": "@mickhansen  \nI'm trying to do something similar with  \n\n```\n  var fn = Sequelize.fn(\"UPPER\", Sequelize.col(\"CompanyName\"));     \n  var where = Sequelize.where(fn, {like: 'B%'});\n  customerModel.findAll( where ).then(function(r) { ... });\n```\n\nBut am unable to get it to work.  Am I missing something, or is there a workaround using sequelize.literal that will accomplish the same thing. Interestingly the query executes but doesn't perform any filtering at all. \n"
      },
      {
        "user": "janmeier",
        "created_at": "2014-10-10T06:11:12Z",
        "body": "@jtraband \n\n``` js\nreturn Company.findAll({\n    where: Sequelize.where(\n      Sequelize.fn(\"UPPER\", Sequelize.col(\"CompanyName\")),\n      { like: 'B%' }\n    )\n  });\n```\n\nWorks fine for me on latest master\n\n``` sql\nSELECT `id`, `CompanyName` FROM `companies` AS `company` WHERE UPPER(`CompanyName`) LIKE 'B%';\n```\n"
      },
      {
        "user": "jtraband",
        "created_at": "2014-10-10T19:34:51Z",
        "body": "Thanks, is there any to get this version from npm or do I need to clone the latest git and link it locally. The 2.0.0 rc version i just got from npm does not work.\n"
      },
      {
        "user": "janmeier",
        "created_at": "2014-10-12T20:12:21Z",
        "body": "npm install sequelize/sequelize \n"
      },
      {
        "user": "janmeier",
        "created_at": "2014-11-28T21:15:43Z",
        "body": "@djmadcat Finally fixed :) - See the test in the referenced commit for the required syntax\n"
      },
      {
        "user": "fahrenq",
        "created_at": "2018-12-17T10:12:08Z",
        "body": "As a note, to combine `.fn`-properties and other properties - just use an array for `where` key.\r\n```js\r\n      where: [\r\n        sequelize.where(\r\n          sequelize.fn('array_length', sequelize.col('patterns'), 1),\r\n          { [Op.gt]: 0 },\r\n        ),\r\n        { companyId: this.companyId },\r\n      ],\r\n```"
      }
    ]
  },
  {
    "number": 2050,
    "title": "Migrations: How to add data to a new column",
    "created_at": "2014-07-16T13:10:06Z",
    "closed_at": "2014-07-16T14:26:47Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/sequelize/sequelize/issues/2050",
    "body": "Hello,\n\nI have a simple migration and want to add a UUIDv4 column to an existing table.\n\nI already have migration script set up which adds the new column:\n\n```\nmodule.exports = {\n  up: function(migration, DataTypes, done) {\n    // add altering commands here, calling 'done' when finished\n\n    migration.addColumn(\n        'Graphs',\n        'uuid',\n        { type: DataTypes.UUID, allowNull: false, defaultValue:DataTypes.UUIDV4}\n    )\n    done();\n  },\n  down: function(migration, DataTypes, done) {\n    // add reverting commands here, calling 'done' when finished\n    done();\n  }\n}\n```\n\nNow the tricky part: After adding the new column I'd like to set UUIDs for all rows automatically. Is that possible? \n",
    "comments_url": "https://api.github.com/repos/sequelize/sequelize/issues/2050/comments",
    "author": "nichdiekuh",
    "comments": [
      {
        "user": "mickhansen",
        "created_at": "2014-07-16T13:19:57Z",
        "body": "What dialect are you using? I believe postgres supports UUID's natively so it should happen automatically when the column is created.\n"
      },
      {
        "user": "nichdiekuh",
        "created_at": "2014-07-16T13:23:33Z",
        "body": "I'm using mysql 5.5, my columns are empty which is ok since mysql doesn't support uuid natively. I won't even mind to loop over the recods myself, if I had access to it in the migration function\n"
      },
      {
        "user": "mickhansen",
        "created_at": "2014-07-16T13:24:52Z",
        "body": "While not ideal you should be able to access the sequelize instance via `migration.migrator.sequelize`\n"
      },
      {
        "user": "nichdiekuh",
        "created_at": "2014-07-16T13:32:32Z",
        "body": "Thank you! Using migration.migrator.sequelize.query() I'm able to query my tables... there's just one thing left: How can I generate a new UUIDv4 using sequelize? Or should I use another module like node-uuid?\n"
      },
      {
        "user": "mickhansen",
        "created_at": "2014-07-16T14:00:33Z",
        "body": "Sequelize doesn't provide a way - So i suggest you use node-uuid yea.\nI'm actually not sure whether or not defaultValue: UUID works for anything that isn't postgres - I know the feature was made for postgres - You'll probably have to test it.\n"
      },
      {
        "user": "nichdiekuh",
        "created_at": "2014-07-16T14:09:21Z",
        "body": "In the meanwhile I was reading the sequelize source and it looks like lib/utils.js uses node-uuid as well. The function \"toDefaultValue\" also has datatype checks for UUIDs - looks like it should to the trick for new rows.\n\nBut line 17792 (function generateUUID) looks odd to me. \n\nAnyways, thanks for your suggestions mick. I got all answers I needed to get my script done.\nHave a nice day! \n"
      },
      {
        "user": "mickhansen",
        "created_at": "2014-07-16T14:26:47Z",
        "body": "Oh, i guess we do have that after all for .create() and stuff.\n"
      },
      {
        "user": "nichdiekuh",
        "created_at": "2014-07-16T14:29:20Z",
        "body": "In addition to this topic, I'd like to give an example for anyone who finds this issue via google:\n\nThe following migration script takes an array of table names, adds the column `uuid` to each table and updates all rows of the given tables, setting a UUIDv4.\n\nUse with caution! This is just a short example and doesn't catch/forward any errors.\n\n``` javascript\n\n\nvar uuid = require('node-uuid');\nvar async = require('async');\nvar _ = require('underscore');\n\n\nvar uuidTables = [\n  'table1',\n  'table2'\n];\n\n\nfunction fillUUIDs(migration,tableName,next)\n{\n  var series = [];\n  migration.migrator.sequelize.query(\"SELECT * FROM \"+tableName).success(function(myTableRows) {\n    _.each(myTableRows,function(row)\n    {\n      var func = function(cb)\n      {\n        var new_uuid =  uuid.v4();\n        migration.migrator.sequelize.query(\"UPDATE \"+tableName+\" SET uuid='\"+new_uuid+\"' WHERE id='\"+row.id+\"'\");\n        cb();\n      };\n      series.push(func);\n    });\n    async.series(series,next);\n  });\n\n}\n\n\nmodule.exports = {\n  up: function(migration, DataTypes, done) {\n    // add altering commands here, calling 'done' when finished\n\n    var series = [];\n    _.each(uuidTables,function(tableName)\n    {\n      var func = function(cb)\n      {\n        migration.addColumn(\n          tableName,\n          'uuid',\n          { type: DataTypes.UUID, allowNull: false, defaultValue:DataTypes.UUIDV4}\n        ).complete(function()\n        {\n          fillUUIDs(migration,tableName,cb);\n        });\n      };\n      series.push(func);\n    });\n    async.series(series,function()\n    {\n      done();\n    });\n  },\n  down: function(migration, DataTypes, done) {\n    // add reverting commands here, calling 'done' when finished\n    done();\n  }\n};\n```\n"
      },
      {
        "user": "TannerS",
        "created_at": "2023-08-15T16:40:50Z",
        "body": "hello! is there a way to do this but the v6 of sequelize? "
      }
    ]
  },
  {
    "number": 2045,
    "title": "How can I validate a unique field when I edit an object with sequelize?",
    "created_at": "2014-07-15T18:39:00Z",
    "closed_at": "2014-07-16T18:40:03Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/sequelize/sequelize/issues/2045",
    "body": "Hi, I use the following code to validate the uniqueness of the user's pseudo when I create the user object. The problem is that when I edit a user object I need to retrieve the current user.id. How can I do that?\n\n```\npseudo:   {\n  type: DataTypes.STRING(150), \n  allowNull: false, \n  validate: {\n    len: {args: [3, 150], msg: \"Pseudo shall contains at least 3 characters\"},\n    isUnique: function(value, next) {\n      User.find({\n          where: {pseudo: value},\n          attributes: ['id']\n      }).done(function(error, user) {\n        if (error)\n            return next(error);\n\n        if (user)\n            return next('Pseudo already in use!');\n\n        next();\n      });\n    }\n  }\n```\n",
    "comments_url": "https://api.github.com/repos/sequelize/sequelize/issues/2045/comments",
    "author": "olive75",
    "comments": [
      {
        "user": "janmeier",
        "created_at": "2014-07-16T09:46:02Z",
        "body": "`this` within the validation function gives you access to the current object being validated.\n"
      },
      {
        "user": "olive75",
        "created_at": "2014-07-16T18:40:03Z",
        "body": "Thanks! I used this:\n\n```\npseudo:   {\n      type: DataTypes.STRING(150), \n      allowNull: false, \n      validate: {\n        len: {args: [3, 150], msg: \"Pseudo shall contains at least 3 characters\"},\n        isUnique: function(value, next) {\n          var id = this.getDataValue('id');\n\n          User.find({\n              where: {pseudo: value},\n              attributes: ['id']\n          }).done(function(error, user) {\n            if (error)\n                return next(error);\n\n            //If the user exists and is another user (check needed when editing) the pseudo is not unique\n            if (user && user.id !== id)\n                return next('Pseudo already in use!');\n\n            next();\n          });\n        }\n      }\n    }\n```\n"
      }
    ]
  },
  {
    "number": 2028,
    "title": "SQL injections",
    "created_at": "2014-07-09T06:20:07Z",
    "closed_at": "2014-07-15T02:59:19Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/sequelize/sequelize/issues/2028",
    "body": "I'm curious if sequelize takes care of sanitizing input to mitigate sql injections?\n\nThanks.\n",
    "comments_url": "https://api.github.com/repos/sequelize/sequelize/issues/2028/comments",
    "author": "rcorral",
    "comments": [
      {
        "user": "mickhansen",
        "created_at": "2014-07-09T07:19:05Z",
        "body": "Most it should yeah, you have any cases where it doesn't?\n"
      },
      {
        "user": "durango",
        "created_at": "2014-07-09T15:22:19Z",
        "body": "The only time in which I can think Sequelize does _not_ do this is when you use `Sequelize.literal` but you should NOT be using that unless you know what you're doing anyway. If you avoid that, you'll be safe.\n"
      },
      {
        "user": "rcorral",
        "created_at": "2014-07-15T02:59:19Z",
        "body": "I was just curious, there wasn't any documentation I could find on the website.\n\nThanks for the quick answer.\n"
      },
      {
        "user": "DG-Wangtao",
        "created_at": "2018-11-20T10:32:23Z",
        "body": "But, why follow code can excute?\r\n```\r\nTable.findAll({\r\n      attributes:\r\n      [\r\n        'id',\r\n        ['sum(\"col1\")', 'sum']\r\n      ],\r\n      group: ['id'],\r\n    });\r\n```\r\n\r\nAs I can us `sum` function in atttribute,is there any risk of  sql injection?"
      },
      {
        "user": "mickhansen",
        "created_at": "2018-11-20T10:34:13Z",
        "body": "@DG-Wangtao If you were to accept user input into the first argument of the array used in the attributes array, then yes you might be exposed"
      },
      {
        "user": "DG-Wangtao",
        "created_at": "2018-11-20T10:49:02Z",
        "body": "> @DG-Wangtao If you were to accept user input into the first argument of the array used in the attributes array, then yes you might be exposed\r\n\r\nThanks !\r\nBecause I meet erro `attr[0].indexOf is not a function` when I use Sequelize.fn like this:\r\n```\r\nTable.findAll({\r\n      attributes:\r\n      [\r\n        'id',\r\n       [Sequelize.fn('sum', Sequelize.col('col1')), 'sum']\r\n      ],\r\n      group: ['id'],\r\n    });\r\n```\r\n\r\nThe error was here \r\n```\r\negg-sequelize/node_modules/sequelize/lib/dialects/abstract/query-generator.js:1243:28)\r\n\r\nelse if (attr[0].indexOf('(') === -1 && attr[0].indexOf(')') === -1) {\r\n```\r\nSo I try to use `sum` function as this."
      }
    ]
  },
  {
    "number": 2026,
    "title": "too many connections for role",
    "created_at": "2014-07-09T00:50:56Z",
    "closed_at": "2014-07-09T07:11:54Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/sequelize/sequelize/issues/2026",
    "body": "On 1.7.9 With postgresSQL I get a too many connections error when I throw a bunch of queries at the database. Is there a way I can set the max connections? I've already set my pool size to 1.\n",
    "comments_url": "https://api.github.com/repos/sequelize/sequelize/issues/2026/comments",
    "author": "jteplitz",
    "comments": [
      {
        "user": "mickhansen",
        "created_at": "2014-07-09T05:14:40Z",
        "body": "@jteplitz602 using transactions?\n"
      },
      {
        "user": "jteplitz",
        "created_at": "2014-07-09T06:10:13Z",
        "body": "Yeah.\n"
      },
      {
        "user": "jteplitz",
        "created_at": "2014-07-09T06:10:13Z",
        "body": "Yeah.\n"
      },
      {
        "user": "mickhansen",
        "created_at": "2014-07-09T07:11:54Z",
        "body": "@jteplitz602 yeah unfortuneatly there's a bug in 1.7.x with transactions not closing their connections fast enough. It's fixed on 2.0.0-dev12\n"
      }
    ]
  },
  {
    "number": 1958,
    "title": "what is the best way to extend model after creation the table.",
    "created_at": "2014-06-25T02:07:56Z",
    "closed_at": "2014-07-06T20:11:09Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/sequelize/sequelize/issues/1958",
    "body": "what is the best way to extend model after creation the table ? Especially when the table already contains many data after being created.\n\nA silly example maybe at first you designed a model for user like below: \n\n``` js\nvar User = sequelize.define('User', {\n    username: DataTypes.STRING\n});\n```\n\nafter your app growed a little, your user wanted to add more info to their profile, so you change your model like this( add a new field ):\n\n``` js\nvar User = sequelize.define('User', {\n    username: DataTypes.STRING,\n    birthday: DataTypes.STRING\n});\n```\n\nI have tried to just modify the model definition, but `.sequelize.sync()` will not cause the table to add an new field.( yes , if with `sync( { force: true })` the table will be rebuild, but all the data will gone ).\n\nso, what is the best way to handle this situation? Do i have to add a new field to the table manually ? any way that can automatically alter the table when the change of the  model is detected?\n",
    "comments_url": "https://api.github.com/repos/sequelize/sequelize/issues/1958/comments",
    "author": "neekey",
    "comments": [
      {
        "user": "arcreative",
        "created_at": "2014-06-25T05:53:25Z",
        "body": "+1... `sync()` is a total misnomer if it's not actually going to do anything.  Would love if it had the ability to alter tables, and (if the former is added) generate a migration for said changes. \n"
      },
      {
        "user": "mickhansen",
        "created_at": "2014-06-25T08:11:50Z",
        "body": "Migrations are the way to go currently for making incremental changes to existing tables.\n`sync({alter: true})` and migrations generated based on the difference between a schema and a table is something high on our list, but it's anything but trivial to implement.\n"
      },
      {
        "user": "janmeier",
        "created_at": "2014-07-06T20:11:09Z",
        "body": "Duplicate of #537 \n"
      }
    ]
  },
  {
    "number": 1949,
    "title": "how best to pass validation errors caught in a class method back to caller?",
    "created_at": "2014-06-23T04:36:14Z",
    "closed_at": "2014-06-24T04:14:21Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/sequelize/sequelize/issues/1949",
    "body": "I have a Model whose class method looks like the following psuedo code\n\n```\nValidationError  = require(\"sequelize\").ValidationError;\n\n// rest of model editted out for brevity\n\nclassMethods: {\n  mkNewFoo: function(data) {\n    return Foo.create(data)\n      .then(function(instance) {\n          return instance;\n      })\n     .catch(function(error)\n     {\n           /*\n            * Basically, I want to determine the error type via instance of and:\n            *     if ValidationError:  pass on to caller\n            *     else if I can determine it's a unique constraint error, throw a \n            *         custom error, again to be handled by the caller\n            *     else pass unknown error  on to caller\n            *     \n            */\n            if (error instanceof ValidationError) {\n                throw error;\n            } else if (testForUniqueContraintViolation(data)  {\n                  throw new myErrors.UniqueConstraintViolation(\"some message\");\n           } else {\n               // unknown error\n              throw error;\n          }\n     });\n  }\n}\n```\n\nhowever, the caller, when it tests for instanceof ValidationError yields false.  I've attempted re-throwing the error (as above), returning the error, throwing a new ValidationError() but haven't had any luck.\n\nAny help would be appreciated. I apologize in advance if this turns out to be a general javascript issue.\n\n-Scott\n",
    "comments_url": "https://api.github.com/repos/sequelize/sequelize/issues/1949/comments",
    "author": "ckot",
    "comments": [
      {
        "user": "mickhansen",
        "created_at": "2014-06-23T09:30:36Z",
        "body": "This is more of a general javascript issue. Returning the error is unlikely to work, but i am surprised that re-throwing does not simply work. What does the error object look like after it has been re-thrown?\n"
      },
      {
        "user": "ckot",
        "created_at": "2014-06-23T19:55:33Z",
        "body": "inside my class method prior to re-throw:\n\n{\n    \"name\": [\n        {\n            \"__raw\": \"Experimenter name must be between 3 and 10 characters\",\n            \"message\": \"Experimenter name must be between 3 and 10 characters\"\n        }\n    ]\n}\n\ninside the catch of the calling function:\n\n{}\n\nOn Jun 23, 2014, at 5:30 AM, Mick Hansen notifications@github.com wrote:\n\n> This is more of a general javascript issue. Returning the error is unlikely to work, but i am surprised that re-throwing does not simply work. What does the error object look like after it has been re-thrown?\n> \n> —\n> Reply to this email directly or view it on GitHub.\n"
      },
      {
        "user": "ckot",
        "created_at": "2014-06-24T04:14:21Z",
        "body": "Took all day to figure out but it works now.  Something due to my inconsistecies with my use of promises in my class method, it's helper class methods, and in my express route handler.  In most cases I forgot to say **return** Promise.try.  Since it took s long to figure out, I'm sure there were some other inconsistencies which caused problems.  Anyway, the symptoms were that the errors failed instanceof tests and had empty bodies.  Just thought I'd share in case anyone else ever had this issue.\n"
      },
      {
        "user": "mickhansen",
        "created_at": "2014-06-24T07:14:40Z",
        "body": "Interesting. Well glad you solved your issue @ckot \n"
      }
    ]
  },
  {
    "number": 1941,
    "title": "many to many association for single model",
    "created_at": "2014-06-21T00:52:26Z",
    "closed_at": "2014-06-21T13:24:49Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/sequelize/sequelize/issues/1941",
    "body": "Is there a way to make a model have a `hasMany` association with itself as both the source and target?\n\n```\nA.hasMany(A)\n```\n\nPer the documentation (and testing) creates a one to many relationship\n\n```\n       A\n     /   \\\n    A     A\n  / | \\\n A  A  A\n\n```\n\nWhere what I want is many to many\n\n```\n A  A  A\n  \\ | /\n    A\n  / | \\\n A  A  A\n```\n\nI am functionally doing this right now by using a second model to define a join table as a go between, which has one-to-many and one-to-one associations with the primary model. And I've added `addA`, `removeA`, and `getAs` as instance methods on `A` to hide the join table code.\n",
    "comments_url": "https://api.github.com/repos/sequelize/sequelize/issues/1941/comments",
    "author": "wrenoud",
    "comments": [
      {
        "user": "mickhansen",
        "created_at": "2014-06-21T08:37:05Z",
        "body": "Hm i'm pretty sure @overlookmotel fixed this.\nYou can define a join table with `A.hasMany(A, {through: JoinModel|'JoinTable'})`\n"
      },
      {
        "user": "wrenoud",
        "created_at": "2014-06-21T13:24:49Z",
        "body": "Thanks! That does the trick.\n"
      }
    ]
  },
  {
    "number": 1931,
    "title": "Will Sequelize support Mongo or Redis ?",
    "created_at": "2014-06-19T04:12:33Z",
    "closed_at": "2014-06-19T07:28:08Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/sequelize/sequelize/issues/1931",
    "body": "",
    "comments_url": "https://api.github.com/repos/sequelize/sequelize/issues/1931/comments",
    "author": "meepeek",
    "comments": [
      {
        "user": "mickhansen",
        "created_at": "2014-06-19T07:28:08Z",
        "body": "While not entirely dismissed, it's highly unlikely. We will probably focus more on SQL dialects and supporting their features, especially postgres features like JSONB\n"
      }
    ]
  },
  {
    "number": 1930,
    "title": "Does Sequelize scalable ?",
    "created_at": "2014-06-19T04:12:08Z",
    "closed_at": "2014-06-19T07:29:10Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/sequelize/sequelize/issues/1930",
    "body": "I mean, for example, how does it work with MySQL cluster ? Will it see as one ?\n",
    "comments_url": "https://api.github.com/repos/sequelize/sequelize/issues/1930/comments",
    "author": "meepeek",
    "comments": [
      {
        "user": "mickhansen",
        "created_at": "2014-06-19T07:27:14Z",
        "body": "Sequelize supports master-slave read replication. If you need master-master write replication we could certainly look at that but for most scaling master-slave read replication is enough.\n"
      },
      {
        "user": "meepeek",
        "created_at": "2014-06-19T07:29:10Z",
        "body": "Oh! Thanks for the reply. Good to hear that it scalable. I am just starting, will let you know if I had reached that point.\n"
      },
      {
        "user": "mickhansen",
        "created_at": "2014-06-19T07:34:01Z",
        "body": "Our first priority is always production issues - So yeah do let us know if you get to deploying sequelize to a multi-mysql server environment.\n"
      }
    ]
  },
  {
    "number": 1842,
    "title": "JSON formatting - not underscored in many-to-many assoication",
    "created_at": "2014-06-01T04:01:14Z",
    "closed_at": "2014-07-13T22:06:19Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/sequelize/sequelize/issues/1842",
    "body": "I have a question about how to make the association key in json to be the underscore case.\nI have set the options in sequelize with { underscored: true, underscoredAll: true }.\n\n<pre>\nUser.hasMany(Role, { through: UserRole })\nRole.hasMany(User, { through: UserRole })\n</pre>\n\n\nI want the \"userRole\" to be the \"user_role\"...\nThanks a lot.\n\n<pre>\n{\n  \"email\":\"test@gmail.com\",\n  \"id\":1,\n  \"roles\":[{\n    \"name\":\"user\",\n    \"id\":1,\n    \"userRole\":{\n       \"status\":\"active\",\n       \"user_id\":1,\n       \"role_id\":1\n     }\n  }]\n}\n</pre>\n\n\n<h3>In koa</h3>\n\n<pre>\n  yield User.find( {\n    where: [ { email: 'test@gmail.com' } ],\n    include: [ {\n      model: Role\n    } ]\n  } )\n  .success( function(data) {\n    user = data;\n  } );\nthis.body = user;\n</pre>\n",
    "comments_url": "https://api.github.com/repos/sequelize/sequelize/issues/1842/comments",
    "author": "marcusyip",
    "comments": [
      {
        "user": "mickhansen",
        "created_at": "2014-06-02T07:01:45Z",
        "body": "What does your UserRole definition look like? You should just be able to change the name to 'user_role'. `sequelize.define('user_role')`\n"
      },
      {
        "user": "marcusyip",
        "created_at": "2014-06-02T07:48:07Z",
        "body": "Thank for the reply. I defined the join model like this.\nAfter I change the UserRole to user_role, it still show userRole, and not UserRole and user_role.\n\n<pre>\nmodule.exports = function(sequelize, DataTypes) {\n  var UserRole = sequelize.define('user_role', {\n    status: {\n      type: DataTypes.STRING(20),\n      allowNull: false,\n      defaultValue: 'inactive'\n    }\n  }, {\n    tableName: 'user_roles'\n  });\n  return UserRole;\n};\n</pre>\n\n<pre>\nmodule.exports = function(sequelize, DataTypes) {\n  var User = sequelize.define('User', {\n    email: {\n      type: DataTypes.STRING(120),\n      allowNull: false,\n      unique: true,\n      validate: { isEmail: true, notNull: true }\n    }\n  }, {\n    classMethods: {\n      associate: function(models) {\n        User.hasMany(models.Role, { through: models.user_role });\n      }\n    },\n    tableName: 'users'\n  });\n  return User;\n};\n</pre>\n\n<pre>\nmodule.exports = function(sequelize, DataTypes) {\n  var Role = sequelize.define('Role', { \n    name: { \n      type: DataTypes.STRING(50), \n      allowNull: false, \n      unique: true, \n      validate: { notNull: true } \n    } \n  }, { \n    classMethods: { \n      associate: function(models) { \n        Role.hasMany(models.User, { through: models.user_role }); \n      } \n    }, \n    tableName: 'roles' \n  }); \n  return Role; \n}; \n</pre>\n"
      },
      {
        "user": "marcusyip",
        "created_at": "2014-06-02T08:53:28Z",
        "body": "In dao.js, DAO.prototype._setInclude\n\n<pre>\nvar accessor = Utils._.camelize(key)\n</pre>\n\nIt seems that It will always camelize my accessor. and the dataValues is return from toJSON().\nIs this a bug and is there some ways that I can change it?\n"
      },
      {
        "user": "mickhansen",
        "created_at": "2014-06-02T08:56:33Z",
        "body": "Not a bug per say, it's been like that for ages and more of a design decision.\nYou can change it my changing the code ;)\nAs for a more general sequelize change it will have to be discussed with the rest of the team.\n"
      },
      {
        "user": "marcusyip",
        "created_at": "2014-06-02T09:13:50Z",
        "body": "Sorry, my English is not good.\nI want to ask that should I update the model directly in my controller?\nFor example:\n\n<pre>\nuser.roles[0].user_role = user.roles[0].userRole;\ndelete user.roles[0].userRole;\n</pre>\n\nOr some other ways to config it.\n"
      },
      {
        "user": "djmadcat",
        "created_at": "2014-06-24T13:25:21Z",
        "body": "+1\nI'm using:\n`\"sequelize\": \"2.0.0-dev12\"`\n\n`raw: true` produces `user_role` association.\n`JSON.parse(JSON.stringify(item))` or `toJSON()` produces `userRole` association.\n\nIs it possible to standardize output or add option to JSONify associations in two ways: inner (camelized) and model-dependent (underscored, camelized or custom through `as`)?\n\nIn my case, I want to add extra field in `toJSON()` method, not outside of the model (i.e. in controller) and output is differs from `raw: true` method.\n"
      },
      {
        "user": "janmeier",
        "created_at": "2014-07-13T22:06:19Z",
        "body": "Fixed by #2035 \n"
      }
    ]
  },
  {
    "number": 1836,
    "title": "Question about Contributing",
    "created_at": "2014-05-29T22:16:59Z",
    "closed_at": "2014-07-06T20:16:05Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/sequelize/sequelize/issues/1836",
    "body": "Is there any specific process that the sequelize community has for accepting contributions to the codebase, specifically, contributions that have been developed as part of a paid contract which the payer is willing to open-source? For example, suppose the company was willing to contribute back something like an Oracle dialect, which represents a fairly large chunk of code -- would there be interest in such a dialect, and is there any paperwork that the sequelize community would be looking for in order to accept the contribution? Is a pull request all you need?\nThe reason I ask is that certain communities, such as the Eclipse foundation, have a non-trivial bureaucratic bar for bringing projects under the Eclipse umbrella.\nThanks,\n---Tim---\n",
    "comments_url": "https://api.github.com/repos/sequelize/sequelize/issues/1836/comments",
    "author": "timezra",
    "comments": [
      {
        "user": "mickhansen",
        "created_at": "2014-05-30T07:30:56Z",
        "body": "No we don't really have anything specific. We accept contributions that add to the overall benefit of the Sequelize community and it users.\n\nWe are looking to support MSSQL so Oracle is probably not out of the question. The primary issue with proprietary dialects is being able to run unit tests for them.\n\nI suppose as long as the payer is willing to contribute the code under the license Sequelize is released under things should be fine.\n\nSo yeah pretty much a pull request is all we need - But for a thing like a dialect we need to have/make a plan for future maintenance.\n"
      },
      {
        "user": "janmeier",
        "created_at": "2014-07-06T20:16:05Z",
        "body": "Closing this. Looking forward to your contribution @timezra  :)\n"
      }
    ]
  },
  {
    "number": 1835,
    "title": "How to get hold of transaction object",
    "created_at": "2014-05-29T18:13:21Z",
    "closed_at": "2014-05-30T14:39:44Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/sequelize/sequelize/issues/1835",
    "body": "instead of using sequelize.transaction(function(t) {}, is it possible to return transaction and use it out of the scope?\nFor example var transaction = getTransactionFromSequelize() { return sequelize.transacation ..promise call here?.....}.  then transaction.commit or transaction.rollback, transaction.done().\n",
    "comments_url": "https://api.github.com/repos/sequelize/sequelize/issues/1835/comments",
    "author": "bluecenter",
    "comments": [
      {
        "user": "mickhansen",
        "created_at": "2014-05-30T04:48:26Z",
        "body": "On 1.7 sequelize.transaction returns a transaction that hasn't started yet, it's kind of iffy.\n\nOn master you can do `sequelize.transaction().then(function (t) {})`\n"
      },
      {
        "user": "bluecenter",
        "created_at": "2014-05-30T13:02:05Z",
        "body": "Thank you. So maybe I can do this\n\n```\n  var deferred = Q.defer()\n  sequelize.transaction().then(deferred.resolve })  \n  return deferred.promise\n```\n\n to get the transaction object ?\n"
      },
      {
        "user": "mickhansen",
        "created_at": "2014-05-30T14:39:44Z",
        "body": "I don't quite recall how Q works, but you'll love the context that way so maybe:\n\n`sequelize.transaction().then(deferred.resolve.bind(deferred))`\n\nOr perhaps just `return Q.when(sequelize.transaction())`\n"
      },
      {
        "user": "bluecenter",
        "created_at": "2014-05-30T14:43:54Z",
        "body": "However the sequelize.transaction() need a function as parameter, otherwise it throws an error.\n"
      },
      {
        "user": "mickhansen",
        "created_at": "2014-05-30T15:01:20Z",
        "body": "Not on master.\n"
      }
    ]
  },
  {
    "number": 1820,
    "title": "Where null in get association method does get included in query",
    "created_at": "2014-05-27T01:19:27Z",
    "closed_at": "2014-09-09T17:45:36Z",
    "labels": [
      "type: bug",
      "question"
    ],
    "url": "https://github.com/sequelize/sequelize/issues/1820",
    "body": "I have model X (parent) associated to model Y (children).\nI can model.findAll({ where: { someproperty: null } }) on the children model if I use the model to do it directly, and it generates the appropriate query with WHERE someproperty IS NULL, etc.\n\nBut if I try to do this using the association getter, ie instanceOfX.getY({ where: { someproperty: null } }) the query is put together with WHERE XId=instanceOfX'sID but it does not include the someproperty IS NULL; it completely ignores it.\n\nI am using Sequelize version 1.7.0-rc9\n\nI'm not too well versed on the internal workings of Sequelize, but I'll provide any further information required of me if I can.\n",
    "comments_url": "https://api.github.com/repos/sequelize/sequelize/issues/1820/comments",
    "author": "Roam-Cooper",
    "comments": [
      {
        "user": "Roam-Cooper",
        "created_at": "2014-05-27T01:29:27Z",
        "body": "Okay, so with further testing, using getAssociation({ where: { endDate: null } }) still does include endDate IS NULL in the WHERE clause in the generated query.\n\nBut using the (old, I think?) array form where: ['\"endDate\" IS NULL AND \"LOCN_LOCATIONId\"=?', locationResult.id] created the query with WHERE endDate IS NULL correctly.\n\nLet me know if any further testing/information is needed.\n"
      },
      {
        "user": "mickhansen",
        "created_at": "2014-05-27T10:48:44Z",
        "body": "Can you show the actual SQL generated?\n`where: { prop: value }` should work for assication getters.\n\nPlease test against 1.7.5 and #master aswell.\n"
      },
      {
        "user": "mickhansen",
        "created_at": "2014-07-07T07:54:33Z",
        "body": "@Roam-Cooper ping\n"
      }
    ]
  },
  {
    "number": 1813,
    "title": "Uncaught exception with count and pagination",
    "created_at": "2014-05-26T13:06:34Z",
    "closed_at": "2014-05-26T13:47:41Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/sequelize/sequelize/issues/1813",
    "body": "I'm trying to call count on a model with a pagination option. I'm on Sequelize 1.7.5.\n\nThe call looks something like this:\n\n```\nGroup.count({\n  where: options.where,\n  limit: parseInt(query['pagination.limit'], 10), // Set to 10\n  offset: parseInt(query['pagination.offset'], 10) // Set to 10\n}).success(function(total){\n\n  // ...\n\n});\n```\n\nThis is the object I'm passing as the first agument:\n\n```\n{ where: {}, limit: 10, offset: 10 }\n```\n\nAnd this is the SQL that is being generated:\n\n```\nSELECT COUNT(*) as `count` FROM `groups` WHERE 1=1 LIMIT 10, 18440000000000000000;\n```\n\nHence, it fails with an uncaught exception: `Cannot read property 'count' of null`\n",
    "comments_url": "https://api.github.com/repos/sequelize/sequelize/issues/1813/comments",
    "author": "jValdron",
    "comments": [
      {
        "user": "jValdron",
        "created_at": "2014-05-26T13:08:04Z",
        "body": "Using the same exact model and the same call, if I change the `count` to a `findAll`, it generates this SQL: \n\n```\nSELECT * FROM `groups` WHERE 1=1 LIMIT 10, 10;\n```\n"
      },
      {
        "user": "mickhansen",
        "created_at": "2014-05-26T13:29:10Z",
        "body": "count with limit and offset doesn't really make sense does it?\nI believe if you provide an offset to count it will proved the max possibility LIMIT.\n"
      },
      {
        "user": "jValdron",
        "created_at": "2014-05-26T13:31:09Z",
        "body": "Unless you have less than 10 elements in your table. But I guess you're right. I could simple do a count and it would solve my problems. I'm using a plugin similar to DataTable that is expecting three values, an array of rows, a total count and a filtered/paginated count.\n"
      },
      {
        "user": "mickhansen",
        "created_at": "2014-05-26T13:44:28Z",
        "body": "Have you tried `findAndCountAll`?\nIn any case, if it's expecting the total count, the rows and the row count, can you just count the rows in your code?\nI realize it's not ideal, but unfortuneatly Sequelize does not support LIMIT on it's count. You could however use aggregate, something like:\n\n```\nGroup.aggregate('id', 'count', {where/etc..})\n```\n"
      },
      {
        "user": "jValdron",
        "created_at": "2014-05-26T13:47:41Z",
        "body": "Alright, I'll work around it. Thanks :)\n"
      }
    ]
  },
  {
    "number": 1762,
    "title": "Does any method support bulk 'REPLACE INSERT' in MySQL?",
    "created_at": "2014-05-14T03:20:25Z",
    "closed_at": "2014-05-14T05:51:39Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/sequelize/sequelize/issues/1762",
    "body": "",
    "comments_url": "https://api.github.com/repos/sequelize/sequelize/issues/1762/comments",
    "author": "imWildCat",
    "comments": [
      {
        "user": "mickhansen",
        "created_at": "2014-05-14T05:51:39Z",
        "body": "No. There's INSERT IGNORE support for bulkCreate for MySQL, but that's about it.\n"
      }
    ]
  },
  {
    "number": 1759,
    "title": "Find on Join Models",
    "created_at": "2014-05-13T14:56:01Z",
    "closed_at": "2014-05-29T12:03:55Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/sequelize/sequelize/issues/1759",
    "body": "Is it possible, other than making many queries to findAll or find on a join (many-to-many model, including the two rows it connects in other tables.\n\nE.g (what I'd expect but doesn't work)\n\n``` js\n\nvar User = sequelize.define('User', {\n  username: Sequelize.STRING,\n  name: Sequelize.STRING\n})\n\nvar Project = sequelize.define('Project', {\n  title: Sequelize.STRING,\n  description: Sequelize.TEXT\n})\n\nvar UserProject = sequelize.define('Project', {\n  orderPosition: Sequelize.INTEGER\n})\n\nProject.hasMany(User, { through: UserProject, foreignKey: 'project_id' })\nUser.hasMany(Project, { through: UserProject, foreignKey: 'user_id' })\n\nUserProject.findAll().success(function(userProjects) {\n\n  // thus userProjects looks something like the following\n  // with project and user model data placed within\n  userProjects = [{\n    id: 123\n    orderPosition: 1\n    project: {\n      id: 2345,\n      title: 'youtube-uploader',\n      description: 'A great project'\n    },\n    user: {\n      id: 433\n      username: 'bencevans',\n      name: 'Ben'\n    }\n  }];\n\n})\n```\n\n/cc @stephendeyoung\n",
    "comments_url": "https://api.github.com/repos/sequelize/sequelize/issues/1759/comments",
    "author": "bencevans",
    "comments": [
      {
        "user": "mickhansen",
        "created_at": "2014-05-13T17:11:20Z",
        "body": "Not without setting up actual association between Project/UserProject and User/UserProject and then doing an include, which will of course still result in two joins.\n"
      }
    ]
  },
  {
    "number": 1758,
    "title": "Searching within nested models?",
    "created_at": "2014-05-13T09:04:56Z",
    "closed_at": "2014-05-13T11:23:38Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/sequelize/sequelize/issues/1758",
    "body": "Is this correct in declaration? A sub query or join?\n\n``` javascript\ndb\n        .Word\n        .findAll( {\n            where  : {\n                language_id: req.query.primaryLang\n            },\n            limit  : 10,\n            include: [\n                { model: db.Word, as: 'relatedWords',\n                    where: {\n                             language_id: 2\n                    }\n                ]\n                }\n            ]\n        } )\n```\n",
    "comments_url": "https://api.github.com/repos/sequelize/sequelize/issues/1758/comments",
    "author": "JehandadK",
    "comments": [
      {
        "user": "mickhansen",
        "created_at": "2014-05-13T09:15:22Z",
        "body": "Call looks right, have you tried it? What happens?\n"
      },
      {
        "user": "JehandadK",
        "created_at": "2014-05-13T10:53:18Z",
        "body": "Not really good with queries but the query seems alright against a particular dataset. Though no data is returned in sequelize. Looking into from my side.\n\nIs this possible that query works fine but data that is returned is not mapped to objects?\n\n``` SQL\nSELECT `Words`.*, `relatedWords`.`id` AS `relatedWords.id`, `relatedWords`.`word` AS `relatedWords.word`, `relatedWords`.`pronunciation` AS `relatedWords.pronunciation`, `relatedWords`.`wordInScript` AS `relatedWords.wordInScript`, `relatedWords`.`language_id` AS `relatedWords.language_id`, `relatedWords.RelatedWord`.`WordId` AS `relatedWords.RelatedWord.WordId`, `relatedWords.RelatedWord`.`relatedWordsId` AS `relatedWords.RelatedWord.relatedWordsId` FROM (SELECT `Words`.* FROM `Words` WHERE `Words`.`language_id`='1' AND (SELECT `WordId` FROM `RelatedWords` AS `relatedWords.RelatedWord` INNER JOIN `Words` AS `relatedWords` ON `relatedWords`.`id` = `relatedWords.RelatedWord`.`relatedWordsId` WHERE `Words`.`id` = `relatedWords.RelatedWord`.`WordId` AND `relatedWords`.`language_id`='2' LIMIT 1) IS NOT NULL LIMIT 10) AS `Words` INNER JOIN `RelatedWords` AS `relatedWords.RelatedWord` ON `Words`.`id` = `relatedWords.RelatedWord`.`WordId` INNER JOIN `Words` AS `relatedWords` ON `relatedWords`.`id` = `relatedWords.RelatedWord`.`relatedWordsId` AND `relatedWords`.`language_id`='2';\n```\n"
      },
      {
        "user": "JehandadK",
        "created_at": "2014-05-13T11:23:37Z",
        "body": "This is working fine, my dataset had an issue.\n"
      },
      {
        "user": "mickhansen",
        "created_at": "2014-05-13T11:26:56Z",
        "body": "Great :)\n"
      }
    ]
  },
  {
    "number": 1748,
    "title": "Migration logic for deploying everywhere",
    "created_at": "2014-05-11T18:27:51Z",
    "closed_at": "2015-04-27T19:38:16Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/sequelize/sequelize/issues/1748",
    "body": "I want to be able to easily deploy my app both to server where it resides for a long time already, or to a completely new server — for example, for unit tests. Or, since I want to create unit tests to test the mgirations themselves too, to a server in a state before certain migration.\n\nRight now in my app all migrations are automatically run on startup, which is perfect for deploying to production, but it creates problems with deploying to an empty database.\n\nSince all migrations are marked with timestamps, may be Sequelize could somehow remember when particular database was created and automatically run only migrations that were created after that date?\n",
    "comments_url": "https://api.github.com/repos/sequelize/sequelize/issues/1748/comments",
    "author": "golergka",
    "comments": [
      {
        "user": "mickhansen",
        "created_at": "2014-05-11T19:12:12Z",
        "body": "@golergka migrations are based on sequelize_meta for the targeted database, so if you have an empty database all the migrations should run. And the next time you run migrate, it will have stored the last migration it ran and then run the migrations after that.\n"
      },
      {
        "user": "golergka",
        "created_at": "2014-05-11T20:06:42Z",
        "body": "> if you have an empty database all the migrations should run\n\n@mickhansen I doubt that it's completely correct. If I have an empty database that has just been created by sync() after all the models have been declared, the database already conforms the models declarations, and shouldn't be modified.\n"
      },
      {
        "user": "mickhansen",
        "created_at": "2014-05-12T06:55:07Z",
        "body": "@golergka well that's not was not my understanding of an empty database ;)\nBut if that is the question, no Sequelize can't mark previous migrations as run when running sync. But it should be rather simple for you to throw together a script to run alongside sync that does just that.\n"
      },
      {
        "user": "janmeier",
        "created_at": "2015-04-27T19:38:16Z",
        "body": "Migration issues belong is sequelize/cli and sequelize/umzug\n"
      }
    ]
  },
  {
    "number": 1746,
    "title": "Is it possible to enable mysql connection compression (i.e. mysql COMPRESS flag)",
    "created_at": "2014-05-11T09:46:16Z",
    "closed_at": "2014-05-11T10:16:46Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/sequelize/sequelize/issues/1746",
    "body": "Hello,\nThanks for your ongoing support of the project!\nWe're dealing with remote MySQL RDS, and would love to optimize a bit by using compression. There is a connection flag that enables compression from client side, however, I could not find any references to it within sequelize. \n\nIs it possible to use compression at all? \n\nThank you!\n",
    "comments_url": "https://api.github.com/repos/sequelize/sequelize/issues/1746/comments",
    "author": "kopurando",
    "comments": [
      {
        "user": "janmeier",
        "created_at": "2014-05-11T09:53:45Z",
        "body": "``` js\nnew Sequelize(..., {\n  dialectOptions: {\n    compress: true\n  }\n});\n```\n\nAnything you pass in dialectOptions is passed directly to the underlying connector lib\n"
      },
      {
        "user": "kopurando",
        "created_at": "2014-05-11T10:16:46Z",
        "body": "Okay, thank you. Turns out, node-mysql does not support it itself. \n"
      }
    ]
  },
  {
    "number": 1740,
    "title": "how to change include model attributes as name?",
    "created_at": "2014-05-10T06:00:10Z",
    "closed_at": "2014-05-10T07:17:11Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/sequelize/sequelize/issues/1740",
    "body": "use Sequelize 1.7.3\n\nI try to use\n\n``` js\nDB.Model.PetFollow\n                .findAll({\n                    include: [\n                        {model: DB.Model.Pet , attributes:['id',['header_key', 'avatar']]}\n                    ],\n\n                    where: DB.Model.mysql.or({pet_id: nowPet.id},{user_id : nowPet.uid})\n                });\n```\n\nit throws \n\n```\nTypeError: Object header_key,avatar has no method 'replace'\n```\n\nfor inculde model, have any way change attributes  as name ?\n",
    "comments_url": "https://api.github.com/repos/sequelize/sequelize/issues/1740/comments",
    "author": "youxiachai",
    "comments": [
      {
        "user": "mickhansen",
        "created_at": "2014-05-10T06:40:44Z",
        "body": "Not supported currently (i think there's also another issue about it).\nWhat's the usecase exactly? Is it to alias attribute names? Cause i'm working on support for aliasing attributes like:\n\n``` js\nname: {\n  type: DataTypes.STRING,\n  field: 'full_name'\n}\n```\n"
      }
    ]
  },
  {
    "number": 1738,
    "title": "Question: How to get count of many-to-many associated models",
    "created_at": "2014-05-09T15:23:55Z",
    "closed_at": "2014-05-09T15:43:39Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/sequelize/sequelize/issues/1738",
    "body": "This issue looks like it has been referenced in other issues, but I have been unable to figure it out from the discussions.\n\nIs there a way to get the count of an associated model in a Many-to-Many relation without getting the entire related model?\n\nFor example, given models `Tag` and `Photo`, which are many-to-many, I'd like to know how many Photos are related to each Tag.\n",
    "comments_url": "https://api.github.com/repos/sequelize/sequelize/issues/1738/comments",
    "author": "jseppi",
    "comments": [
      {
        "user": "mickhansen",
        "created_at": "2014-05-09T15:41:55Z",
        "body": "We only have the include mechanic, so there's no way not to get the join if that's what you mean.\n"
      },
      {
        "user": "jseppi",
        "created_at": "2014-05-09T15:43:39Z",
        "body": "Ok, thanks\n"
      },
      {
        "user": "mickhansen",
        "created_at": "2014-05-09T15:58:02Z",
        "body": "But you can count based on the join, or you can do your own subquery as an attribute.\n"
      }
    ]
  },
  {
    "number": 1736,
    "title": "Question: Is there any Util on sequelize to handle the extend of two different options objects?",
    "created_at": "2014-05-09T13:55:52Z",
    "closed_at": "2014-05-11T08:56:13Z",
    "labels": [
      "type: feature",
      "question"
    ],
    "url": "https://github.com/sequelize/sequelize/issues/1736",
    "body": "Just because you can't extend two different objects of options, cause you need to merge differently each type of options, is there anything like that on core?\n",
    "comments_url": "https://api.github.com/repos/sequelize/sequelize/issues/1736/comments",
    "author": "cusspvz",
    "comments": [
      {
        "user": "janmeier",
        "created_at": "2014-05-09T14:07:37Z",
        "body": "Not quite sure what you mean, could you give an example?\n\nWe have the lodash lib exposed in Utils._\n"
      },
      {
        "user": "cusspvz",
        "created_at": "2014-05-09T14:23:05Z",
        "body": "@janmeier normal object extend functions just check attributes of objects and copy from one place to another, or recursively. Obviously that won't work with different type of options of sequelize, cause you can have two options like:\n\n``` js\nfn(\n  {\n    order: 'id ASC',\n    where: \n  },\n\n  {\n    order: [ 'name ASC' ],\n    where: {\n      name: 'test',\n    },\n  }\n)\n\n// should return \n{\n  order: [ 'id ASC', 'name ASC' ],\n  where: [\n    'id = 3',\n    {\n      name: 'test',\n    },\n  ],\n}\n```\n\nSo, as you can't merge this options with default extenders, i supposed that you could have any function on utils to do that, but after a couple of minutes reading the `utils.js` i confirmed that sequelize doesn't have, so, i'm doing it.\n"
      },
      {
        "user": "janmeier",
        "created_at": "2014-05-09T14:24:55Z",
        "body": "@durango Where smartWhere / compileSmartWhere at some point. I only think it works for where though, and not order etc. \n"
      },
      {
        "user": "cusspvz",
        "created_at": "2014-05-09T14:26:09Z",
        "body": "Or even like this:\n\n```\nfn( [ 5, 10, 25 ], { order: 'id ASC' } )\n\n// It should return\n{\n  where: {\n    [m.primaryKeyAttribute]: [ 5, 10, 25 ],\n  },\n  order: [ 'id ASC' ]\n}\n\n```\n"
      },
      {
        "user": "cusspvz",
        "created_at": "2014-05-09T14:30:52Z",
        "body": "But `smartWhere` doesn't merge, is only for parsing. I'm talking about merging different options into one, recursively. I need that cause i'm creating a sort of `needed` functionality on my database, to allow me to get needed options for my queries.\n\nJust for example, i configure a model Post with some default `neededOptions`, like include of User that created the Post, the ProfileImage of that user and so on. Whenever i call `.findNeeded( options )` or  `.findAllNeeded(o)`, it will merge `options` with Model's `neededOptions`.\n"
      },
      {
        "user": "mickhansen",
        "created_at": "2014-05-09T14:33:48Z",
        "body": "smartWhere does merge where statements - But we're not using it much internally anymore since we can just use .and()\n"
      },
      {
        "user": "cusspvz",
        "created_at": "2014-05-09T14:35:38Z",
        "body": "It isn't only for where statements, but for all options.\n\n```\n  /*\n   * extendOptions\n   *\n   * Function to extend Options as they should be\n   *\n   * @context: instanceof model\n   * @arguments: multiple and dynamic, first must be always an object, because it is the returning target.\n   *\n   * Example: extendOptions( {}, [ 5, 9, 7 ], 10, { order: 'id ASC', include: [ {...} ] }, { include: [ {...} ] } )\n   *\n   */\n```\n"
      },
      {
        "user": "cusspvz",
        "created_at": "2014-05-09T14:40:19Z",
        "body": "I think that you should need this on core, but it depends on future implementations that need to merge multiple options or to, as i need, defaultilize options.\n"
      },
      {
        "user": "mickhansen",
        "created_at": "2014-05-09T14:59:13Z",
        "body": "We haven't really needed it in core so far.\nThis seems more like what people would need when building API's. Not saying we couldn't put it in core.\n"
      },
      {
        "user": "cusspvz",
        "created_at": "2014-05-09T15:29:43Z",
        "body": "Ok, it is almost done, for me its a must have, not only as API but for core too, cause i would save a bunch of time for some basic stuff, like on `paranoidClause` for example, you won't need to check all types of wheres to see if paranoid is in it or not.\n"
      },
      {
        "user": "mickhansen",
        "created_at": "2014-05-09T15:42:39Z",
        "body": "Well for paranoid you still have to since it could be part of an array where.\n"
      },
      {
        "user": "mickhansen",
        "created_at": "2014-05-11T08:55:25Z",
        "body": "@cusspvz but yeah it could be nice util\n"
      },
      {
        "user": "mickhansen",
        "created_at": "2014-05-11T08:56:13Z",
        "body": "Closing this since the question has been resolved (we don't have it) and you are as always welcome to provide a PR @cusspvz - They are always great :)\n"
      },
      {
        "user": "cusspvz",
        "created_at": "2014-05-12T09:58:19Z",
        "body": ":+1: \n"
      }
    ]
  },
  {
    "number": 1735,
    "title": "Many to many association, multiple aliases of the same model",
    "created_at": "2014-05-09T06:06:16Z",
    "closed_at": "2014-05-29T12:06:39Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/sequelize/sequelize/issues/1735",
    "body": "I have two models: `User` and `Folder`. User can have many folders, and one folder can have many users. I want users to have various access to folders:\n\n``` js\nFolder.hasMany(User, {as: 'ReadUser'});\nFolder.hasMany(User, {as: 'WriteUser'});\nFolder.hasMany(User, {as: 'AdminUser'});\n\n// ...\n\nUser.hasMany(Folder);\n```\n\nThen I would like to assign users to folder like this:\n\n``` js\nfolder.addReadUser(user1);\nfolder.addWriteUser(user2);\nfolder.addAdminUser(user3);\n```\n1. How to do that? Now I'm getting an error:\n   \n   ```\n   Error: Cyclic dependency found. 'Folder' is dependent of itself.\n   ```\n2. How to define those models to be able to associate them two-ways?\n   \n   ``` js\n   folder.addReadUser(user1);\n   // ...\n   user.addAdminFolder(folder1);\n   ```\n\nI'm using version `v2.0.0-dev11`\n",
    "comments_url": "https://api.github.com/repos/sequelize/sequelize/issues/1735/comments",
    "author": "lukaszgrolik",
    "comments": [
      {
        "user": "mickhansen",
        "created_at": "2014-05-09T06:18:52Z",
        "body": "The cyclic dependency can be turned off by using `constraints: failse` on the associations.\n\nYou just need to add the reverse associations.\n\n`User.hasMany(Folder, {as: 'AdminFolder'})`.\n\nMind you in this case you might need to specify a through model or join table via `through: tableName|Model`\n"
      }
    ]
  },
  {
    "number": 1719,
    "title": "Include generates subqueries",
    "created_at": "2014-05-07T12:07:24Z",
    "closed_at": "2014-05-09T12:13:07Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/sequelize/sequelize/issues/1719",
    "body": "Hi, \n\nI'm trying to use .findAll with a condition over an associated model:\nmodel.Person.findAll({\n                include: [{ model: model.Alias, as: 'aliases', attributes: ['name']}],\n                where: model.sequelize.and(\n                    model.sequelize.or.apply(this, search),\n                    {published: true}\n                ),\n                limit: limit\n            }\n\nwith \"search\" being among other person restrictions:  [\"'aliases.name' like ?\", term+\"%\"]\n\nHowever this generates:\n\nSELECT `people`._, `aliases`.`name` AS `aliases.name`, `aliases`.`id` AS `aliases.id` FROM (SELECT `people`._ FROM `people` WHERE ((firstname like 'eva g%' OR surname like 'eva g%' OR concat(firstname,' ',surname) like 'eva g%' OR 'aliases.name' like 'eva g%') AND `people`.`published`=true) LIMIT 4) AS `people` LEFT OUTER JOIN `alias` AS `aliases` ON `people`.`id` = `aliases`.`person_id`;\n\nIs it somehow possible to get it so, that there would be no subquery and the join is on the outer clause so the alias condition is applied correctly?\n\nI'm not sure if I'm abusing \"include\" here, since I'm not really interested in the aliases data, just needed to find the correct people.\n\nCheers,\nAndreas\n\nP.S: I'm using 2.0.0-dev9\n",
    "comments_url": "https://api.github.com/repos/sequelize/sequelize/issues/1719/comments",
    "author": "mendrik",
    "comments": [
      {
        "user": "mickhansen",
        "created_at": "2014-05-07T12:12:41Z",
        "body": "Holy lack of formatting batman.\n"
      },
      {
        "user": "mickhansen",
        "created_at": "2014-05-07T12:14:29Z",
        "body": "`include.where` sets `include.required = true` by default, if required is true on a :M include it generates a subQuery (because of data duplication.\n\nUse `required: false` together with a `where` to kill the subquery.\n"
      },
      {
        "user": "mickhansen",
        "created_at": "2014-05-07T12:15:40Z",
        "body": "Hmm, ignore my previous comment - With the code you are showing you shouldn't be getting a subquery, are you sure you are showing the whole thing?\n\nAlso please test against the latest version + master when reporting an issue, it might already be fixed.\n"
      },
      {
        "user": "mendrik",
        "created_at": "2014-05-07T12:29:09Z",
        "body": "thanks for the quick reply and sorry about the formatting, however I tried to use required: false previously and it resulted in the same issue. I also tried master branch a sec ago and same problem occurs. To simplify my example:\n\n```\nmodel.Person.findAll({\n  include: {model: model.Alias, as: 'aliases', attributes: ['name'], required: false},\n  where: [\"'aliases.name' like ?\", terms[0]+\"%\"],\n  limit: limit\n})\n```\n\nAnd my model definition is quite simple too:\n\n```\nPerson.hasMany(Alias, {\n    as: 'aliases',\n    onDelete: 'cascade'\n});\n```\n\nthis all results in: \n\n```\nSELECT `person`.*, `aliases`.`name` AS `aliases.name`, `aliases`.`id` AS `aliases.id`\nFROM (\n  SELECT  `person`.* FROM `people` AS `person` WHERE 'aliases.name' LIKE 'eva g%' LIMIT 4\n) AS `person`\nLEFT OUTER JOIN `alias` AS `aliases` ON `person`.`id` = `aliases`.`person_id`;\n```\n"
      },
      {
        "user": "mendrik",
        "created_at": "2014-05-07T12:30:55Z",
        "body": "Btw. I cannot add the where clause to the include, since it would join only on found aliases.\n"
      },
      {
        "user": "mickhansen",
        "created_at": "2014-05-07T12:34:41Z",
        "body": "You are getting the subquery because of the combination of a LIMIT and a :M include. There's no way around this, a subquery is absolutely required. Unfortuneatly there's no way to tell sequelize that your where condition should be outside the subquery.\n\nWhy can't you put the where on the include? You are querying on the joined table, thats what include.where is there for.\n\nHave you tried something like:\n\n``` js\nmodel.Person.findAll({\n  include: {\n    model: model.Alias,\n    as: 'aliases',\n    attributes: ['name'],\n    required: false,\n    where: {\n      name: {\n        like: terms[0]+\"%\"\n      }\n    }\n  }\n  limit: limit\n});\n```\n"
      },
      {
        "user": "mendrik",
        "created_at": "2014-05-07T12:58:23Z",
        "body": "Ok thanks a bunch, skipping the limit does exactly what I want. The join where doesn't work since I need \"or\" logic there. You guys saved my day! :)\n"
      },
      {
        "user": "mickhansen",
        "created_at": "2014-05-07T12:59:57Z",
        "body": "@mendrik yeah .or() is a complicated case - we need a way users can tell sequelize whether to place the where on the inner or outer query, not sure how to do that yet though (api wise).\n"
      },
      {
        "user": "ralusek",
        "created_at": "2016-09-16T05:09:57Z",
        "body": "@mickhansen Hey there, I just encountered an issue where I am including a model with its own `where` in the `include.` I've successfully implemented this countless times, but this is a particularly difficult query. In this case, I'm getting `missing FROM-clause entry for table`, which is an issue typically related to column naming. I have triple checked the raw query in this case, and there is no problem.\n\nSo, like the poster here, I need to have the subquery logic have `required:true`, and this is causing the `where` logic to go into the `JOIN AND`, rather than the outer `WHERE`. If I move the `where` logic to the outside the include, and reference the nested properties by col name, query is built with `WHERE` rather than `JOIN` filtering, and executes fine.\n\nTL;DR, you mention here: \"we need a way users can tell sequelize whether to place the where on the inner or outer query,\" has that been done yet?\n"
      },
      {
        "user": "janmeier",
        "created_at": "2016-09-16T06:59:42Z",
        "body": "@ralusek You can use `$column$` to reference columns from a joined table on the outer query\n\n``` js\nUser.findAll({\n  include: [Task],\n  where: {\n    '$task.name$': 'foobar'\n  }\n});\n```\n\n``` sql\nSELECT * \nFROM user \nLEFT JOIN task .... ON ..\nWHERE task.name = 'foobar'\n```\n"
      },
      {
        "user": "ralusek",
        "created_at": "2016-09-16T08:48:46Z",
        "body": "@janmeier Thanks. Yea that's actually what I am doing, but I had the logic of my query on what would be the `Task` in your example, via a scope. It was convenient to be able to have it scoped, but it made it so the query wouldn't work unless I explicitly place the logic inside of the top level `where`.\n"
      },
      {
        "user": "eumpek",
        "created_at": "2016-09-20T14:04:12Z",
        "body": "Hello, i am also having the same problem but when i use '$' operator to reference columns from a joined table what happens is that, i get an error because the subquery doesnt include the referenced table. \n\nHere is my query:\n`SELECT * FROM (\n        SELECT *\n        FROM tableA\n        WHERE (tableB.id LIKE '%')\n        LIMIT 0, 20\n        ) AS t\nLEFT OUTER JOIN tableB ON tableB.id = tableA.id \n`\n\nThe strange thing here is that i have another model, where i user both inner and outer joins, and i never get subquery. I can not figure out what is the difference between the two. \n"
      },
      {
        "user": "eumpek",
        "created_at": "2016-09-21T11:01:12Z",
        "body": "I ended up using \n`subQuery:false,` in my findAndCountAll method.\n"
      },
      {
        "user": "tybro0103",
        "created_at": "2020-02-23T20:58:13Z",
        "body": "`duplicating: false` worked for me"
      }
    ]
  },
  {
    "number": 1718,
    "title": "Where clause failed on second level nested include",
    "created_at": "2014-05-07T08:50:59Z",
    "closed_at": "2014-05-09T12:13:14Z",
    "labels": [
      "type: bug",
      "question"
    ],
    "url": "https://github.com/sequelize/sequelize/issues/1718",
    "body": "Following example:\n\n``` js\nvar co = require('co');\nvar Sequelize = require('sequelize');\n\nvar sequelize = new Sequelize('sequelize-test', 'root', '');\n\nvar Parent = sequelize.define('Parent', {});\nvar Child1 = sequelize.define('Child1', {});\nvar Child2 = sequelize.define('Child2', {});\n\nParent.hasMany(Child1);\nChild1.belongsTo(Parent);\n\nChild1.hasMany(Child2);\nChild2.belongsTo(Child1);\n\nco(function* () {\n    yield sequelize.sync({\n        force: true\n    });\n\n    var parent = yield Parent.create();\n    var child1 = yield Child1.create();\n    var child2 = yield Child2.create();\n\n    yield parent.addChild1(child1);\n    yield child1.addChild2(child2);\n\n    var result = yield Parent.find({\n        attributes: ['id'], // Added for better query readability\n        include: [\n            {\n                model: Child1,\n                attributes: ['id'],\n                include: [\n                    {\n                        model: Child2,\n                        attributes: ['id'],\n                        where: {\n                            id: child2.id\n                        }\n                    }\n                ]\n            }\n        ]\n    });\n\n    console.log(result);\n})();\n```\n\nWhich produces the following output:\n\n```\nExecuting (default): INSERT INTO `Parents` (`id`,`createdAt`,`updatedAt`) VALUES (DEFAULT,'2014-05-07 08:44:29','2014-05-07 08:44:29');\nExecuting (default): INSERT INTO `Child1s` (`id`,`createdAt`,`updatedAt`) VALUES (DEFAULT,'2014-05-07 08:44:29','2014-05-07 08:44:29');\nExecuting (default): INSERT INTO `Child2s` (`id`,`createdAt`,`updatedAt`) VALUES (DEFAULT,'2014-05-07 08:44:29','2014-05-07 08:44:29');\nExecuting (default): SELECT * FROM `Child1s` AS `Child1` WHERE (`Child1`.`ParentId`=1 AND `Child1`.`id`=1);\nExecuting (default): UPDATE `Child1s` SET `id`=1,`createdAt`='2014-05-07 08:44:29',`updatedAt`='2014-05-07 08:44:29',`ParentId`=1 WHERE `id`=1\nExecuting (default): SELECT * FROM `Child2s` AS `Child2` WHERE (`Child2`.`Child1Id`=1 AND `Child2`.`id`=1);\nExecuting (default): UPDATE `Child2s` SET `id`=1,`createdAt`='2014-05-07 08:44:29',`updatedAt`='2014-05-07 08:44:29',`Child1Id`=1 WHERE `id`=1\nExecuting (default): SELECT `Parent`.*, `Child1s`.`id` AS `Child1s.id`, `Child1s`.`id` AS `Child1s.id`, `Child1s.Child2s`.`id` AS `Child1s.Child2s.id`, `Child1s.Child2s`.`id` AS `Child1s.Child2s.id` FROM (SELECT `Parent`.`id` FROM `Parents` AS `Parent` WHERE (SELECT `Child1Id` FROM `Child2s` AS `Child1s.Child2s` WHERE `Child1s`.`id` = `Child1s.Child2s`.`Child1Id` LIMIT 1) IS NOT NULL LIMIT 1) AS `Parent` LEFT OUTER JOIN `Child1s` AS `Child1s` ON `Parent`.`id` = `Child1s`.`ParentId` INNER JOIN `Child2s` AS `Child1s.Child2s` ON `Child1s`.`id` = `Child1s.Child2s`.`Child1Id` AND `Child1s.Child2s`.`id`=1;\n/Users/mlegenhausen/dev/github/sequelize-test/node_modules/co/index.js:290\n    throw err;\n          ^\nError: ER_BAD_FIELD_ERROR: Unknown column 'Child1s.id' in 'where clause'\n    at Query.Sequence._packetToError (/Users/mlegenhausen/dev/github/sequelize-test/node_modules/mysql/lib/protocol/sequences/Sequence.js:30:14)\n    at Query.ErrorPacket (/Users/mlegenhausen/dev/github/sequelize-test/node_modules/mysql/lib/protocol/sequences/Query.js:82:18)\n    at Protocol._parsePacket (/Users/mlegenhausen/dev/github/sequelize-test/node_modules/mysql/lib/protocol/Protocol.js:205:24)\n    at Parser.write (/Users/mlegenhausen/dev/github/sequelize-test/node_modules/mysql/lib/protocol/Parser.js:62:12)\n    at Protocol.write (/Users/mlegenhausen/dev/github/sequelize-test/node_modules/mysql/lib/protocol/Protocol.js:37:16)\n    at Socket.<anonymous> (/Users/mlegenhausen/dev/github/sequelize-test/node_modules/mysql/lib/Connection.js:73:28)\n    at Socket.EventEmitter.emit (events.js:104:17)\n    at readableAddChunk (_stream_readable.js:156:16)\n    at Socket.Readable.push (_stream_readable.js:123:10)\n    at TCP.onread (net.js:520:20)\n```\n\nThe error occurs cause of the `where` clause of Child2. If I remove the clause it works.\n\nNote: I am using generators for better readability to start this use node 0.11.x with `--harmony` flag.\n",
    "comments_url": "https://api.github.com/repos/sequelize/sequelize/issues/1718/comments",
    "author": "mlegenhausen",
    "comments": [
      {
        "user": "mickhansen",
        "created_at": "2014-05-07T09:25:48Z",
        "body": "The problem is the subquery, have you tested this against master? A fix was introduced in something similar to this.\n\nElse try adding required: true to child1, or required: false to both child1 and child2\n"
      },
      {
        "user": "mlegenhausen",
        "created_at": "2014-05-07T10:50:56Z",
        "body": "Tested against master with same result as before.\n\nAdding `required:false` to  `child2` did the trick (with dev11 and master).\n"
      },
      {
        "user": "mickhansen",
        "created_at": "2014-05-07T10:52:01Z",
        "body": "Yeah `required: false` will turn off the subquery since it doesn't need to be there anymore - I guess there's an issue with having a required :M child to a non required parent.\n"
      },
      {
        "user": "mlegenhausen",
        "created_at": "2014-05-07T11:41:30Z",
        "body": "Thanks that saved my day again :) Great project and great maintainers!\n"
      },
      {
        "user": "Celadora",
        "created_at": "2017-02-14T10:02:45Z",
        "body": "This solves the problem of the query error, but if I use it the where clause no longer constrains the query. I need both. Is there any work around to this other than doing two separate queries?"
      }
    ]
  },
  {
    "number": 1699,
    "title": "How to update an existing db on openshift?",
    "created_at": "2014-04-30T14:23:18Z",
    "closed_at": "2014-05-09T12:13:30Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/sequelize/sequelize/issues/1699",
    "body": "Hi, I already have a database in Openshift and I need to update some tables..\nDo I need to run a migration? How could I do that without deleting the existing db?\n\nThanks!\n",
    "comments_url": "https://api.github.com/repos/sequelize/sequelize/issues/1699/comments",
    "author": "maggialejandro",
    "comments": [
      {
        "user": "mickhansen",
        "created_at": "2014-04-30T15:47:57Z",
        "body": "Migrations are specifically so you don't delete the existing db but only modify it.\nYou need to either manually apply the changes you need to the production db or generate a set of migrations you can run (this is essentially the same as running them manually if you only do it once but over time it gives you the benefit of knowing what migrations have run and putting your schema changes with your version control etc).\n\n(This is a generalized answer, i have no experience with openshift)\n"
      }
    ]
  },
  {
    "number": 1693,
    "title": "Accessing Defined Models from a Sequelize Instance",
    "created_at": "2014-04-29T00:49:52Z",
    "closed_at": "2014-04-29T08:42:51Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/sequelize/sequelize/issues/1693",
    "body": "I've seen this syntax to access a defined model from the Sequelize instance:\n\n```\nvar sequelize = new Sequelize('database', 'username'[, 'password']);\n\nvar Project = sequelize.define('Project', {\n  title: Sequelize.STRING,\n  description: Sequelize.TEXT\n});\n\nsequelize.Project.build({});\n```\n\nHowever, when I tried it myself on 1.7.0:\n\n```\nconsole.log(sequelize.Project);\n```\n\nReturned `undefined`\n\nIs there another way or a correct way to accomplish this?\n",
    "comments_url": "https://api.github.com/repos/sequelize/sequelize/issues/1693/comments",
    "author": "noah-goodrich",
    "comments": [
      {
        "user": "mickhansen",
        "created_at": "2014-04-29T06:21:41Z",
        "body": "You need to attach the object on your own. Usually people do something like:\n\n``` js\nsequelize.Project = sequelize.import('./models/project');\n```\n\nSequelize doesn't do that for you. (The fact that people decide to attach models to the sequelize object is purely a convenience thing that emerged)\n"
      },
      {
        "user": "noah-goodrich",
        "created_at": "2014-04-29T08:42:51Z",
        "body": "Thanks.\n"
      }
    ]
  },
  {
    "number": 1692,
    "title": "updates and associations",
    "created_at": "2014-04-28T09:43:45Z",
    "closed_at": "2014-04-28T19:14:37Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/sequelize/sequelize/issues/1692",
    "body": "Hi, I'm developing a Backbone app, and for certain things it's really convenient to fetch my collections with their associations.  If I try to save these models back to sequelize will the associations be ignored, or am I going to have to filter them out beforehand to avoid errors?\n",
    "comments_url": "https://api.github.com/repos/sequelize/sequelize/issues/1692/comments",
    "author": "ckot",
    "comments": [
      {
        "user": "mickhansen",
        "created_at": "2014-04-28T09:56:42Z",
        "body": "That probably depends on what version your using. But to be on the safe side you can just use `{fields: Object.keys(Model.rawAttributes)}` whenever calling save/create etc. (This is the default in 2.0.0).\n"
      },
      {
        "user": "ckot",
        "created_at": "2014-04-28T10:16:06Z",
        "body": "Hi Mick,\n\nThanks for the quick response!  I’m using the 1.7 version, so I’ll need to do it manually.\n\nAccording to the docs you can do:\n\nTask.updateAttributes({title: ‘bar’, description: ‘blah blah blah’}, [‘title’]);\n\nwhere the second parameter restricts which of the fields actually get update (description is unmodified).\n\nIf I’m understanding this correctly, I would be putting this {fields: Object.keys(Model.rawAttributes)} in that second parameters place, and it returns a constrained list of fields in the model (for example [‘title’, ‘description’])\n\nThanks again,\n\nScott\n\nOn Apr 28, 2014, at 5:56 AM, Mick Hansen notifications@github.com wrote:\n\n> That probably depends on what version your using. But to be on the safe side you can just use {fields: Object.keys(Model.rawAttributes)} whenever calling save/create etc. (This is the default in 2.0.0).\n> \n> —\n> Reply to this email directly or view it on GitHub.\n"
      },
      {
        "user": "mickhansen",
        "created_at": "2014-04-28T10:53:51Z",
        "body": "`task.updateAttributes({title: ‘bar’, description: ‘blah blah blah’}, [‘title’]);` is equivelant to `task.updateAttributes({title: ‘bar’, description: ‘blah blah blah’}, {fields: [‘title’]});` so yes `task.updateAttributes({title: ‘bar’, description: ‘blah blah blah’}, {fields: Object.keys(Task.rawAttributes)});` would scope the update to just the attributes you have defined (where 'task' is an instance of the model 'Task').\n"
      },
      {
        "user": "ckot",
        "created_at": "2014-04-28T18:24:19Z",
        "body": "Hi Mick,\n\nThanks for the clarification. You rule!\n\n-Scott\n\nOn Apr 28, 2014, at 6:53 AM, Mick Hansen notifications@github.com wrote:\n\n> task.updateAttributes({title: ‘bar’, description: ‘blah blah blah’}, [‘title’]); is equivelant to task.updateAttributes({title: ‘bar’, description: ‘blah blah blah’}, {fields: [‘title’]}); so yes task.updateAttributes({title: ‘bar’, description: ‘blah blah blah’}, {fields: Object.keys(Task.rawAttributes)}); would scope the update to just the attributes you have defined (where 'task' is an instance of the model 'Task').\n> \n> —\n> Reply to this email directly or view it on GitHub.\n"
      },
      {
        "user": "mickhansen",
        "created_at": "2014-04-28T19:14:37Z",
        "body": "Great :)\n"
      }
    ]
  },
  {
    "number": 1682,
    "title": "Problem renaming associations output",
    "created_at": "2014-04-25T03:40:13Z",
    "closed_at": "2014-04-27T08:10:19Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/sequelize/sequelize/issues/1682",
    "body": "So I'm having an issue with the `as` sub-parameter of the `include` parameter to `.findAll`.  I'm using 2.0.0-dev11 + MySQL.\n\nThe error I get back is:\n\n```\nPossibly unhandled Error: Task (Experiment) is not associated to User!\n```\n\nThe error occurs in:\n\n```\nnode_modules/sequelize/lib/dao-factory.js:1812:13\n```\n\nSo in the code below, if I change `{ include: [{model:Task,as:'Experiment'}]}` to `{ include: Task }` then it works just fine.\n\nBut I really want to get the association back in a list named `Experiments` instead of named `Tasks`.\n\n```\nvar User = sequelize.define('User', { name: Sequelize.STRING });\nvar Task = sequelize.define('Task', { name: Sequelize.STRING });\n\nTask.belongsTo(User);\nUser.hasMany(Task);\n\nsequelize.sync({force: true})\n  .then(function() {\n    return User.create({name:'Rick'});\n  })\n  .then(function(u) {\n    var task = Task.build({name:'Science'});\n    return u.addTask(task);\n  })\n  .then(function() {\n    return User.findAll({ include: [{model:Task,as:'Experiment'}]});\n  })\n  .then(function(users) {\n    console.log(JSON.stringify(users, null, 2));\n  })\n  .then(function() {\n    console.log('done');\n  });\n```\n",
    "comments_url": "https://api.github.com/repos/sequelize/sequelize/issues/1682/comments",
    "author": "baliw",
    "comments": [
      {
        "user": "mickhansen",
        "created_at": "2014-04-25T04:38:23Z",
        "body": "The way it currently is that if you use an alias for an include you have to use it on the association aswell. That's to allow us to identify the correct association (since there might be multiple).\n\nSo for `User.findAll({ include: [{model:Task,as:'Experiment'}]});` to work you need `User.hasMany(Task, {as: 'Experiment'});`\n"
      },
      {
        "user": "baliw",
        "created_at": "2014-04-27T08:10:18Z",
        "body": "Thanks for the help.  That put me on the right track. :-)\n"
      }
    ]
  },
  {
    "number": 1675,
    "title": "Validation Error vs actual Error",
    "created_at": "2014-04-23T03:56:53Z",
    "closed_at": "2014-04-25T23:05:22Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/sequelize/sequelize/issues/1675",
    "body": "This is more of a question than an issue, but when creating/updating models, I've been struggling with finding the best way to differentiate validation errors from 'actual' errors.\n\nFor example;\n\n```\nmodel.save()\n    .success( function () {})\n    .error( function (err) { /*err could be a validation error, or a database error */ })\n```\n\nAm I missing something here?\n",
    "comments_url": "https://api.github.com/repos/sequelize/sequelize/issues/1675/comments",
    "author": "nrmitchi",
    "comments": [
      {
        "user": "mickhansen",
        "created_at": "2014-04-23T06:25:11Z",
        "body": "That's supported in 2.0.0 - You can use `instanceof Sequelize.ValidationError`\n"
      },
      {
        "user": "nrmitchi",
        "created_at": "2014-04-25T23:05:22Z",
        "body": "Okay awesome. Thanks.\n"
      }
    ]
  },
  {
    "number": 1673,
    "title": "How to change timestamps dataType",
    "created_at": "2014-04-22T10:54:03Z",
    "closed_at": "2014-04-23T01:55:27Z",
    "labels": [
      "type: feature",
      "question"
    ],
    "url": "https://github.com/sequelize/sequelize/issues/1673",
    "body": "default timestamps  is DATATIME,but i want to use unix timestamps(DataType.INTEGER), how to change it ?\n",
    "comments_url": "https://api.github.com/repos/sequelize/sequelize/issues/1673/comments",
    "author": "youxiachai",
    "comments": [
      {
        "user": "mickhansen",
        "created_at": "2014-04-22T11:03:05Z",
        "body": "You can't, not if you want sequelize date handling.\n"
      }
    ]
  },
  {
    "number": 1668,
    "title": "Select Rows that have children",
    "created_at": "2014-04-21T22:01:13Z",
    "closed_at": "2014-04-22T13:36:53Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/sequelize/sequelize/issues/1668",
    "body": "hi is there a way to use Having in the queries? to do something like this\n\n```\nSELECT Count(Table2.Id), Table1.* \nFROM Table1 \nLEFT JOIN Table2\nON Table1.id = Table2.Table1Id\nHAVING Count(Table2.Id) > 0\n```\n\nI only want to get Categories that have asociated children records.\n",
    "comments_url": "https://api.github.com/repos/sequelize/sequelize/issues/1668/comments",
    "author": "theHazzard",
    "comments": [
      {
        "user": "mickhansen",
        "created_at": "2014-04-22T06:11:16Z",
        "body": "You can use `having` like you can use `where`.\n\nSo something like:\n\n``` js\nModelA.findAll({\n  include: [ModelB],\n  having: 'count(ModelB.id) > 0'\n});\n```\n\nOr you could use an INNER JOIN if you don't need a specific count but just need there to be some of the included model `include: [{model: ModelB, required: true}]`.\n"
      },
      {
        "user": "theHazzard",
        "created_at": "2014-04-22T13:30:15Z",
        "body": "Great! I used the Inner Join approach, is there's a way to tell Sequelize to omit all TableB attributes?\n"
      },
      {
        "user": "mickhansen",
        "created_at": "2014-04-22T13:32:16Z",
        "body": "@theHazzard `include: [{model: ModelB, required: true, attributes: []}]` might work, but no garauntees.\n"
      },
      {
        "user": "theHazzard",
        "created_at": "2014-04-22T13:33:07Z",
        "body": "it still brings the ID, but it's ok, I've filtered with lodash, thanks for all your help!\n"
      },
      {
        "user": "mickhansen",
        "created_at": "2014-04-22T13:36:49Z",
        "body": "@theHazzard hmm, what version are you using? We add the id explicitely for faster deduplication matching - But it shouldn't be in the final result.\n"
      },
      {
        "user": "theHazzard",
        "created_at": "2014-04-22T13:38:47Z",
        "body": "I'm using v1.7.2\n"
      },
      {
        "user": "theHazzard",
        "created_at": "2014-04-22T13:39:59Z",
        "body": "this is an example of the result I have.\n\n```\n{\n    \"id\": 4,\n    \"Nombre\": \"Institutos\",\n    \"clasificadoes\": [\n      {\n        \"id\": 256\n      },\n      {\n        \"id\": 257\n      }\n    ]\n  },\n```\n"
      },
      {
        "user": "theHazzard",
        "created_at": "2014-04-22T13:41:45Z",
        "body": "and here is the code I'm running\n\n```\nrubroClasificado.findAll({\n            attributes: ['Rubroclasificadoes.id', 'Rubroclasificadoes.Nombre'],\n            include: {\n                attributes: [],\n                model: Clasificado,\n                required: true\n            } \n})\n```\n"
      },
      {
        "user": "mickhansen",
        "created_at": "2014-04-22T13:50:55Z",
        "body": "Fix for attributes not being in the final result might be only be in 2.0.0-dev11\n"
      }
    ]
  },
  {
    "number": 1661,
    "title": "How to get all models and all their associated models where at least one associated model satisfies given requirements",
    "created_at": "2014-04-19T10:26:11Z",
    "closed_at": "2017-09-10T15:06:02Z",
    "labels": [
      "question",
      "stale"
    ],
    "url": "https://github.com/sequelize/sequelize/issues/1661",
    "body": "```\nUser.hasMany(Role);\nRole.hasMany(User);\n\nUser.findAll({\n   where: {/* some query */},\n   include: [{ model: Role, attributes: ['name'], where: { name: ['member'] } }]\n}).done(...)\n```\n\nThis code returns all `users` that are associated with `role.name = 'member'`. But along with each user it returns ONLY one role that matches required name ('member').\n\nWhat I want is to return ALL `roles` associated with each user, and filter users just to those that have at least one `Role` that match requirements.\n\nIs it possible using Sequelize?\n",
    "comments_url": "https://api.github.com/repos/sequelize/sequelize/issues/1661/comments",
    "author": "alekbarszczewski",
    "comments": [
      {
        "user": "mickhansen",
        "created_at": "2014-04-19T12:59:57Z",
        "body": "It's not possible natively - But you could do it with a raw where using a subquery check.\n"
      },
      {
        "user": "alekbarszczewski",
        "created_at": "2014-04-19T19:36:56Z",
        "body": "I managed to solved this by adding (as you said) raw where subquery:\n\n```\nvar roles = ['member','admin'];\nroles = _.map(roles,function(role){ return \"'\"+role+\"'\"; }).join(',');\n// now roles = \"'member','admin'\"\n\nvar subQuery = 'EXISTS ('+\n               'SELECT * FROM \"RolesUsers\" ru2 '+\n               'JOIN \"Roles\" r2  ON r2.\"id\" = ru2.\"RoleId\" '+\n               'WHERE ru2.\"UserId\" = \"Users\".\"id\" AND r2.\"name\" IN ('+roles+') '+\n               ')';\nvar options = {\n    include: [{ model: Role, attributes: ['name'] }],\n    where: [subQuery]\n}\n\nUser.findAll(options).done(...);\n```\n\nIs there any better/nicer method for building this subQuery in Sequelize?\nFor example for turning `['member','admin']` to `IN ('member','admin')`?\nHow would you write this code?\n"
      },
      {
        "user": "mickhansen",
        "created_at": "2014-04-19T20:05:43Z",
        "body": "I would probably let sequelize handle the escaping, so do something like:\n\n`where: ['.... r2.\"name\" IN (:roles) ....', roles]`\n\nThis might not work if using postgres though, hmm.\n"
      },
      {
        "user": "alekbarszczewski",
        "created_at": "2014-04-19T20:30:22Z",
        "body": "There is one more issue here: when I am using `findAndCountAll` with this query it counts all users rows + all role rows. So when user is associated with two roles then it count twice.\nHere are SQL queries generated by `findAndCountAll`:\n\nSELECT\n\n```\nSELECT \"Users\".*,\n       \"roles\".\"name\"                AS \"Roles.name\",\n       \"roles\".\"id\"                  AS \"Roles.id\",\n       \"Roles.RolesUser\".\"createdat\" AS \"Roles.RolesUser.createdAt\",\n       \"Roles.RolesUser\".\"updatedat\" AS \"Roles.RolesUser.updatedAt\",\n       \"Roles.RolesUser\".\"userid\"    AS \"Roles.RolesUser.UserId\",\n       \"Roles.RolesUser\".\"roleid\"    AS \"Roles.RolesUser.RoleId\"\nFROM   (SELECT \"users\".*\n        FROM   \"users\"\n        WHERE  ( EXISTS (SELECT *\n                         FROM   \"rolesusers\" ru2\n                                JOIN \"roles\" r2\n                                  ON r2.\"id\" = ru2.\"roleid\"\n                         WHERE  ru2.\"userid\" = \"users\".\"id\"\n                                AND r2.\"name\" IN ( 'member' )) )\n        LIMIT  100) AS \"Users\"\n       LEFT OUTER JOIN \"rolesusers\" AS \"Roles.RolesUser\"\n                    ON \"Users\".\"id\" = \"Roles.RolesUser\".\"userid\"\n       LEFT OUTER JOIN \"roles\" AS \"Roles\"\n                    ON \"roles\".\"id\" = \"Roles.RolesUser\".\"roleid\" \n```\n\nCOUNT\n\n```\nSELECT Count(\"users\".\"id\") AS \"count\"\nFROM   \"users\"\n       LEFT OUTER JOIN \"rolesusers\" AS \"Roles.RolesUser\"\n                    ON \"users\".\"id\" = \"Roles.RolesUser\".\"userid\"\n       LEFT OUTER JOIN \"roles\" AS \"Roles\"\n                    ON \"roles\".\"id\" = \"Roles.RolesUser\".\"roleid\"\nWHERE  ( EXISTS (SELECT *\n                 FROM   \"rolesusers\" ru2\n                        JOIN \"roles\" r2\n                          ON r2.\"id\" = ru2.\"roleid\"\n                 WHERE  ru2.\"userid\" = \"users\".\"id\"\n                        AND r2.\"name\" IN ( 'member' )) ) \n```\n\nResult of this query is for example 1 user that \"contains\" 2 roles and count is 2.\nI don't know if it is possible to overcome this?\nIf not I could execute `SELECT` and `COUNT` as separate queries...\n"
      },
      {
        "user": "arcanis",
        "created_at": "2015-04-04T10:56:32Z",
        "body": "I would also be interested if Sequelize supported this use case at some point.\n\nIt would be great to be able to put `whereSome : { name : 'member' }` and just let Sequelize figure out how to resolve everything.\n"
      },
      {
        "user": "JemarJones",
        "created_at": "2017-07-05T13:45:38Z",
        "body": "@mickhansen Is this still the only solution with the most current version of sequelize?"
      },
      {
        "user": "stale[bot]",
        "created_at": "2017-09-03T14:06:58Z",
        "body": "This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. If this is still an issue, just leave a comment 🙂\n"
      },
      {
        "user": "dsbert",
        "created_at": "2019-02-04T16:27:58Z",
        "body": "Is there any new functionality since this issue was closed to allow an existence check using an association?"
      }
    ]
  },
  {
    "number": 1603,
    "title": "How can one return the inserted record when using raw?",
    "created_at": "2014-04-07T20:13:50Z",
    "closed_at": "2015-02-02T12:37:00Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/sequelize/sequelize/issues/1603",
    "body": "``` javascript\nvar query = 'insert into foos (name) values (\\'bar\\') returning *';\nsql.query(query, null, { raw: true }).success(function (rows) {\n    console.log(rows); // null\n    ...\n});\n```\n\nWhy does this return null?  Pasting the emitted sql into pg returns the new record as expected. \n\nMy dialect is set to postgres, and I am using 1.7 of sequelize.\n",
    "comments_url": "https://api.github.com/repos/sequelize/sequelize/issues/1603/comments",
    "author": "rschooley",
    "comments": [
      {
        "user": "mickhansen",
        "created_at": "2014-04-08T06:32:40Z",
        "body": "Strange it doesn't work for raw, i believe we use it for create. But i guess we haven't done any mapping back to the result for that type of query, not sure.\n"
      },
      {
        "user": "janmeier",
        "created_at": "2014-04-30T07:49:57Z",
        "body": "Adding `type: Sequelize.QueryTypes.SELECT` / `type: 'SELECT'` to your options object should work.\n\nPlease re-open if it doesn't\n"
      },
      {
        "user": "troygilbert",
        "created_at": "2014-08-28T16:38:26Z",
        "body": "I don't think I can re-open this, but I've encountered this same issue, and specifying `type: 'SELECT'` in my options does not fix it, instead of null I get this exception:\n\n`TypeError: Object #<OkPacket> has no method 'map'`\n\nMy query is a bit more complex, but starts with `INSERT INTO`:\n\n```\nINSERT INTO `Orders` (`status`, `date`) SELECT * FROM (SELECT 'scheduled' AS `status`, '2014-08-28 17:00:00' AS `date`) AS tmp WHERE NOT EXISTS (SELECT `id` FROM `Orders` WHERE (`date` BETWEEN '2014-08-28 05:00:00' AND '2014-08-29 04:59:59') AND `cancelledAt` IS NULL) LIMIT 1\n```\n\nQuery executes correctly, the database gets updated, but result is null from sequelize.\n"
      },
      {
        "user": "rayshan",
        "created_at": "2014-09-13T23:34:16Z",
        "body": "Confirming for a `delete` query, setting `type: 'BULKDELETE'` will pass the number of records affected, however `logging: console.log` has no affect. 2.0 dev 13\n"
      }
    ]
  },
  {
    "number": 1583,
    "title": "Foreign key constrained defined in model schema does not work",
    "created_at": "2014-04-02T08:54:46Z",
    "closed_at": "2014-04-02T10:16:04Z",
    "labels": [
      "type: bug",
      "question"
    ],
    "url": "https://github.com/sequelize/sequelize/issues/1583",
    "body": "I have following code\n\n```\nvar Sequelize = require('sequelize');\n\nvar sequelize = new Sequelize('postgres://postgres:postgres@localhost:5432/skyhigh',{\n    dialect: 'postgres',\n    native: false,\n});\n\nvar Shelf = sequelize.define('Shelf', { \n});\n\nvar Book = sequelize.define('Book', {\n    ShelfId: {\n        type: Sequelize.INTEGER,\n        references: \"Shelf\",\n        referencesKey: \"id\",\n    }\n});\n\nShelf.hasMany(Book);\n\nsequelize.sync({ force: true });\n```\n\nand it throws this error:\n\n```\nevents.js:72\n        throw er; // Unhandled 'error' event\n              ^\nerror: relation \"Shelf\" does not exist\n    at Connection.parseE (/Users/alek/Desktop/seqbug/node_modules/pg/lib/connection.js:561:11)\n    at Connection.parseMessage (/Users/alek/Desktop/seqbug/node_modules/pg/lib/connection.js:390:17)\n    at null.<anonymous> (/Users/alek/Desktop/seqbug/node_modules/pg/lib/connection.js:92:20)\n    at Socket.EventEmitter.emit (events.js:95:17)\n    at Socket.<anonymous> (_stream_readable.js:746:14)\n    at Socket.EventEmitter.emit (events.js:92:17)\n    at emitReadable_ (_stream_readable.js:408:10)\n    at emitReadable (_stream_readable.js:404:5)\n    at readableAddChunk (_stream_readable.js:165:9)\n    at Socket.Readable.push (_stream_readable.js:127:10)\nseqbug$ \n```\n\nchanging `ShelfId` to any other key such `shelf_id` does not work.\n",
    "comments_url": "https://api.github.com/repos/sequelize/sequelize/issues/1583/comments",
    "author": "alekbarszczewski",
    "comments": [
      {
        "user": "mickhansen",
        "created_at": "2014-04-02T09:01:18Z",
        "body": "Please turn on logging and show us what order the SQL statements are being run on.\nPlease also provide you Sequelize version, and please also verify that your bug persists against the latest version and the latest master.\n"
      },
      {
        "user": "mickhansen",
        "created_at": "2014-04-02T09:02:19Z",
        "body": "Mind you in the latest master, hasMany will automatically create the foreign key reference, right @janmeier?\n"
      },
      {
        "user": "janmeier",
        "created_at": "2014-04-02T09:04:01Z",
        "body": "Perhaps the name of the shelf table is being pluralized to shelfes / shelves (there have been problems with pluralization before due to the lingo lib).\n\nYou could provide the Shelf model instead of a string in references, that should give you the correct table name.\n\nAnd as mick mentioned, on master foreign key references are added automatically yes\n"
      },
      {
        "user": "mickhansen",
        "created_at": "2014-04-02T09:12:26Z",
        "body": "@janmeier i suppose in the future it would be nice to be able to do something like `references: SomeModel.attributes.someAttribute`\n"
      },
      {
        "user": "alekbarszczewski",
        "created_at": "2014-04-02T09:32:10Z",
        "body": "I tried it with `1.7.0` and `unstable` versions of sequelize. Here is SQL:\n\n```\nExecuting (default): DROP TABLE IF EXISTS \"Sites\" CASCADE;\nExecuting (default): CREATE TABLE IF NOT EXISTS \"Sites\" (\"id\"   SERIAL , \"createdAt\" TIMESTAMP WITH TIME ZONE NOT NULL, \"updatedAt\" TIMESTAMP WITH TIME ZONE NOT NULL, PRIMARY KEY (\"id\"));\nExecuting (default): DROP TABLE IF EXISTS \"Books\" CASCADE;\nExecuting (default): CREATE TABLE IF NOT EXISTS \"Books\" (\"id\"   SERIAL , \"SiteId\" INTEGER REFERENCES \"Site\" (\"id\"), \"createdAt\" TIMESTAMP WITH TIME ZONE NOT NULL, \"updatedAt\" TIMESTAMP WITH TIME ZONE NOT NULL, PRIMARY KEY (\"id\"));\n```\n1. It seems that foreign key ref is not pluralized (`Site` instead of `Sites`)\n2. If I don't use foreign key at model schema level and just use `Site.hasMany(Book)` then foreign key constraints are NOT created - I checked it and on Books table there is only one constraint `Book_pkey`.\n3. It would be cool if you would allow model schema to be created in this way:\n\n```\n{\n   prop1: { type: ... },\n   prop2: { type: ... },\n   hasMany: {\n      'OtherModel': { some_options },\n      'OtherModel2': { some_options },\n   },\n   hasOne: {\n       'OtherModel3': { some_options }\n   }\n```\n"
      },
      {
        "user": "mickhansen",
        "created_at": "2014-04-02T09:43:47Z",
        "body": "\"If I don't use foreign key at model schema level and just use Site.hasMany(Book) then foreign key constraints are NOT created - I checked it and on Books table there is only one constraint Book_pkey.\" - No that's only on master, not in a release yet.\n\nYour SQL and the models you provided are not the same, one is Shelf one is Site? But in any case it appears you need to fix your `references` statement to point at the correct table.\n"
      },
      {
        "user": "alekbarszczewski",
        "created_at": "2014-04-02T09:47:26Z",
        "body": "I changed  `Shelf` to `Site` to check if there is no problem with `Shelves/Shelfes`. \nWell if model names are pluralized automatically then references field also should be treated this way I think.\n"
      },
      {
        "user": "mickhansen",
        "created_at": "2014-04-02T09:58:40Z",
        "body": "I disagree - Since you can also provide a tableName to a model.\nI do however agree that its not totally ideal, but you can atleast fix your issue for now. \n\nWe'll most likely provide more sugar for this type of thing later on. In the mean time you can either provide the correct string or use `freezeTableName: true`, in which case the tableName won't be pluralized.\n"
      },
      {
        "user": "alekbarszczewski",
        "created_at": "2014-04-02T10:15:24Z",
        "body": "Ok thanks for help.\n"
      },
      {
        "user": "mickhansen",
        "created_at": "2014-04-02T11:06:17Z",
        "body": "Anytime :)\n"
      }
    ]
  },
  {
    "number": 1576,
    "title": "Can .findOrCreate() have the same POJO smarts as .create()?",
    "created_at": "2014-04-01T08:58:12Z",
    "closed_at": "2014-09-22T08:25:58Z",
    "labels": [
      "type: feature",
      "question"
    ],
    "url": "https://github.com/sequelize/sequelize/issues/1576",
    "body": "The underlying use-case is that I have a single form, the contents of which affect multiple objects (it's created using eager loading) and it would make life very simple (and readily adaptable) if I can simply pass the entire formData object to each of my services without needing to explicitly call out the relevant attributes for the model involved in each one.\n\nA loose example: \n\n``` js\nvar formData = {'FirstName': 'Mick', 'LastName': 'Hansen', 'Car': 'Mustang', 'Life': 'Good'}\n\nvar Client = sequelize.define('Person', {\n    ID: { type: Sequelize.INTEGER, autoIncrement: true, primaryKey: true},\n    IRS: { type: Sequelize.STRING},\n    FirstName: { type: Sequelize.STRING},\n    SecondName: { type: Sequelize.STRING},\n    LastName: { type: Sequelize.STRING},\n}\n```\n\n`Client.create(formData)` inserts a record which will contain a FirstName and LastName, and silently ignores Car and Life (also ID, IRS and SecondName). This is good, it's intuitive, and will grow with the model seamlessly.\n\n`Client.findOrCreate(formData)` tries to run \n\n``` sql\nSELECT * \nFROM   Person \nWHERE Person.FirstName = 'Mick' \nAND       Person.LastName = 'Hanson' \nAND       Person.Car = 'Mustang' \nAND       Person.Life = 'Good' \n```\n\nThis elicits complaints from the database about unknown columns (not unreasonably as Car and Life are not columns in the Person table).\n\nI had anticipated that the two functions would deal with the POJO in the same way, and refer only to the relevant attributes.\n\nThe work around is to generate a POJO which contains only the attributes relevant to each model, and pass that to `.findOrCreate()`. \n\nI believe that this would be better done inside `.findOrCreate()` because it would align the functionality with that of `.create()`, promote cleaner user code, and allow for models to be altered without effectively 'hard coding' the relevant attributes in multiple places.\n",
    "comments_url": "https://api.github.com/repos/sequelize/sequelize/issues/1576/comments",
    "author": "EduceHealth",
    "comments": [
      {
        "user": "mickhansen",
        "created_at": "2014-04-01T13:56:41Z",
        "body": "`findOrCreate` currently has the signature of `(where, defaults)`.\n\nIf where is a non POJO (i.e. `sequelize.and()`) it will just use `defaults` as the value.\n\nI suppose that we could argue that if only using the `where` param it's most likely a POJO since it has to be used for values aswell. If we can assume that we can apply the same filtering that we do to `.save()` which `findOrCreate` uses internally via `save`.\n\nThoughts @janmeier, @sequelize/owners?\n"
      },
      {
        "user": "janmeier",
        "created_at": "2014-09-13T21:20:36Z",
        "body": "@mickhansen I just had another look at this, and I'm not sure we should be doing any filtering here. The problem arises in the `find` part, and I'm not sure we'd want to limit people to only adding the attributes of the table in the `where` part? At least I think that would break stuff for a lot of users who are relying on the parent where object for doing queries on joined tables (I know that can be done with where objects on the individual includes, but there are probably still people doing it via the parent where object)\n"
      },
      {
        "user": "mickhansen",
        "created_at": "2014-09-22T06:28:25Z",
        "body": "@janmeier yeah i'm not sure limiting the where to model attributes would be ideal.\n"
      },
      {
        "user": "janmeier",
        "created_at": "2014-09-22T08:25:58Z",
        "body": "@Grokling Sorry for the long response time, but unfortunately we can't do any filtering on find\n"
      }
    ]
  },
  {
    "number": 1559,
    "title": "Best way to include many-to-many self-referenced",
    "created_at": "2014-03-27T19:13:44Z",
    "closed_at": "2014-04-05T20:54:29Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/sequelize/sequelize/issues/1559",
    "body": "My User model has this...\n\n```\nUser.hasMany(User, {\n    as: 'Friends',\n    foreignKey: 'FriendId',\n    through: 'friends'\n})\n```\n\nSequelize has created this table...\n\n```\nCREATE TABLE friends\n(\n  \"createdAt\" timestamp with time zone NOT NULL,\n  \"updatedAt\" timestamp with time zone NOT NULL,\n  \"FriendId\" integer NOT NULL,\n  \"FriendsId\" integer NOT NULL,\n  CONSTRAINT friends_pkey PRIMARY KEY (\"FriendId\", \"FriendsId\")\n)\nWITH (\n  OIDS=FALSE\n);\n```\n\nMy intention is to populate this table with 2 rows for every \"friendship\"; Friend A to Friend B and Friend B to Friend A.  So far so, good.\n\nHowever, I'm stumped as to how I would join to this table with an include in Sequelize.  I also don't want the whole friends' User object if the current User is friends with the User being pulled in the main find.  I only really need to know if they are friends.  The following is the best I can come up with but it throws an error:\n\n```\ninclude: [\n    {\n        model: User,\n        as: \"Friends\",\n        required: false,\n        where: {\n            FriendsId: req.user.id\n        }\n    }\n]\n```\n\nError: \n\n```\n{\n  \"name\": \"error\",\n  \"severity\": \"ERROR\",\n  \"code\": \"42703\",\n  \"position\": \"6061\",\n  \"file\": \"parse_relation.c\",\n  \"line\": \"2639\",\n  \"routine\": \"errorMissingColumn\",\n  \"sql\": \"SELECT \\\"Users\\\".*, \\\"Friends\\\".\\\"id\\\" AS \\\"Friends.id\\\", ... , \\\"Friends.friend\\\".\\\"createdAt\\\" AS \\\"Friends.friend.createdAt\\\", \\\"Friends.friend\\\".\\\"updatedAt\\\" AS \\\"Friends.friend.updatedAt\\\", \\\"Friends.friend\\\".\\\"FriendId\\\" AS \\\"Friends.friend.FriendId\\\", \\\"Friends.friend\\\".\\\"FriendsId\\\" AS \\\"Friends.friend.FriendsId\\\" FROM (SELECT \\\"Users\\\".* FROM \\\"Users\\\" WHERE (\\\"Users\\\".\\\"disabled\\\"=false AND \\\"Users\\\".\\\"type\\\"='member' AND \\\"Users\\\".\\\"publish\\\"=true LIMIT 20) AS \\\"Users\\\" LEFT OUTER JOIN \\\"friends\\\" AS \\\"Friends.friend\\\" ON \\\"Users\\\".\\\"id\\\" = \\\"Friends.friend\\\".\\\"FriendId\\\" LEFT OUTER JOIN \\\"Users\\\" AS \\\"Friends\\\" ON \\\"Friends\\\".\\\"id\\\" = \\\"Friends.friend\\\".\\\"FriendsId\\\" AND \\\"Friends\\\".\\\"FriendsId\\\"=154040;\"\n}\n```\n",
    "comments_url": "https://api.github.com/repos/sequelize/sequelize/issues/1559/comments",
    "author": "emadd",
    "comments": [
      {
        "user": "mickhansen",
        "created_at": "2014-03-28T06:20:09Z",
        "body": "`include.where` doesn't allow for querying the join model/table of a relation currently.\nWhat you probably want do is make your friendships and actual model and then base your include on that instead - Your schema doesn't change you just both do a many-many through the model plus do a hasMany on the model on both sides.\n\nThen you could do:\n\n``` js\ninclude: [\n    {\n        model: Friend,\n        required: false,\n        where: {\n            FriendsId: req.user.id\n        }\n    }\n]\n```\n"
      },
      {
        "user": "JehandadK",
        "created_at": "2014-06-30T07:58:56Z",
        "body": "How can we change the column names for ids\n\nUser.hasMany(User, {\n    as: 'Friends',\n    foreignKey: 'FriendId',\n    through: 'friends'\n})\n\n  \"FriendId\" -> \"someId\"\n  \"FriendsId\" -> \"otherid\"\n"
      },
      {
        "user": "mickhansen",
        "created_at": "2014-06-30T08:34:03Z",
        "body": "@JehandadK have you tried replacing the part that says \"FriendId\"? `foreignKey: 'someId'`\n"
      },
      {
        "user": "JehandadK",
        "created_at": "2014-06-30T08:52:32Z",
        "body": "Yes that works, but how can we change \"FriendsId\" ?\n"
      },
      {
        "user": "JehandadK",
        "created_at": "2014-07-02T03:12:10Z",
        "body": "So I should take that this dosent work? Perhaps anyway I can manually configure it?\n"
      },
      {
        "user": "mickhansen",
        "created_at": "2014-07-02T05:25:34Z",
        "body": "Haven't had time to investigate it, self referential N:M has some edge cases. What version are you on?\n"
      },
      {
        "user": "JehandadK",
        "created_at": "2014-07-02T06:00:22Z",
        "body": "1.7.8 Stable\n"
      },
      {
        "user": "mickhansen",
        "created_at": "2014-07-02T07:10:30Z",
        "body": "@JehandadK mind testing if it's fixed in master? Some work was done on self refential N:M - Where you might be able to define user.hasMany twice and thereby define a foreignkey for both sides.\n"
      },
      {
        "user": "JehandadK",
        "created_at": "2014-07-03T08:59:49Z",
        "body": "@mickhansen Yes! This works, Thanks!\n\n``` javascript\ndb.Word.hasMany(db.Word, { through: db.RelatedWord, as: 'relatedWords', foreignKey: 'words_id'});\ndb.Word.hasMany(db.Word, { through: db.RelatedWord, as: 'relatedWords2', foreignKey: 'similar_words_id'});\n```\n\nThe tables are created (it was creating extra cols before the fix) as expected but cant confirm through tests. All are failing because of breaking changes in 2.0.x\n"
      },
      {
        "user": "mickhansen",
        "created_at": "2014-07-03T09:06:58Z",
        "body": "You might not want to name both with the same alias though ;)\n"
      },
      {
        "user": "JehandadK",
        "created_at": "2014-07-03T09:19:00Z",
        "body": "Yap! Reverted to 1.7.9 actually.\n"
      }
    ]
  },
  {
    "number": 1557,
    "title": "How to validate virtual properties",
    "created_at": "2014-03-26T16:32:44Z",
    "closed_at": "2014-05-09T12:18:25Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/sequelize/sequelize/issues/1557",
    "body": "Scenario: I have a model `User` which has a `name` column, a `password_hash` column and a setter for the virtual property `password`  which hashes the value and stores it in the `password_hash` column.\nNow when I create a new user via `User.create({name: \"foo\", password: \"bar\"})` the password is hashed and stored correctly, _but_...\n\nHow can I validate the password (e.g. check length)? _Adding a `password` field to the `validator` property of the model configuration does not work (the validate method is called, but with no arguments given)_\n\nSince Sequelize has the nice validator feature I think this should be easy to add.\n",
    "comments_url": "https://api.github.com/repos/sequelize/sequelize/issues/1557/comments",
    "author": "nullEuro",
    "comments": [
      {
        "user": "durango",
        "created_at": "2014-03-28T22:36:29Z",
        "body": "You can use a hook, beforeCreate/beforeSave, but perhaps we should fix the underlying problem of adding validations to virtual properties. @mickhansen ?\n"
      },
      {
        "user": "mickhansen",
        "created_at": "2014-03-28T22:48:02Z",
        "body": "@durango problem is that validations run on attributes, virtual attributes (via getter/setterMethods) aren't actually attributes.\n\nWe've thought about adding a Sequelize.VIRTUAL datatype, that works as regular datatypes but never hit the database. I suppose that might work for this.\n"
      },
      {
        "user": "durango",
        "created_at": "2014-03-28T22:48:47Z",
        "body": "> We've thought about adding a Sequelize.VIRTUAL datatype, that works as regular datatypes but never hit the database. I suppose that might work for this.\n\nExactly :) I wasn't originally referring to the setter/getter methods, sorry for the confusion :S\n"
      },
      {
        "user": "mickhansen",
        "created_at": "2014-03-28T22:53:19Z",
        "body": "@durango yeah it would make perfect sense for stuff like this since you could have a VIRTUAL password field that holds it own value plus sets password_hash and then you can still validate against a real value.\n"
      },
      {
        "user": "mickhansen",
        "created_at": "2014-05-09T12:18:25Z",
        "body": "Closing in favor of virtual attribute feature request #1235\n"
      }
    ]
  },
  {
    "number": 1554,
    "title": "allowNull for hasMany associations?",
    "created_at": "2014-03-25T16:23:01Z",
    "closed_at": "2014-03-25T19:59:01Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/sequelize/sequelize/issues/1554",
    "body": "When defining associations, I'm trying to make a foreign key NOT NULL. `allowNull` isn't working for it: my `countryId` continues as NULL.\n\n```\nCountry.hasMany(models.States, {\n  as: 'States', \n  foreignKey: 'countryId', \n  onDelete: 'restrict', \n  foreignKeyConstraint: true,\n  allowNull: false\n});\n```\n",
    "comments_url": "https://api.github.com/repos/sequelize/sequelize/issues/1554/comments",
    "author": "vidz1979",
    "comments": [
      {
        "user": "janmeier",
        "created_at": "2014-03-25T16:52:25Z",
        "body": "Currently it is not possible to pass these options to the column, but I agree that perhaps it should be.\n\nHowever, there are couple of things you can do to fix your issue right now:\n- Define the column on the model:\n\n``` js\nsequelize.define('state'. {\n  country_id: {\n    allowNull: false\n  }\n}\n```\n- I'm pretty sure that if the column you are referring (country.id) does not allow nulls, then netiher will your countryId column\n"
      },
      {
        "user": "vidz1979",
        "created_at": "2014-03-25T19:59:01Z",
        "body": "With hasMany and other association declarators, even defining the column on child table wasn't possible. But I've managed to create a not null FK with reference and referenceKey:\n\n```\ncountryId: {\n  type: DataTypes.INTEGER,\n  allowNull: false,\n  references: \"countries\",   // the table name and key\n  referencesKey: \"id\",\n}\n```\n\nI think that is even easier than defining with hasMany.\n"
      },
      {
        "user": "kartik115",
        "created_at": "2017-11-10T09:33:56Z",
        "body": "@janmeier is it possible now to add not null field as Foreign key."
      }
    ]
  },
  {
    "number": 1552,
    "title": "Single quotes causing a problem in column name only on 64 bit windows7 machine",
    "created_at": "2014-03-25T12:46:50Z",
    "closed_at": "2014-04-04T19:42:55Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/sequelize/sequelize/issues/1552",
    "body": "Hi,\nI am using node.js npm modules.\nThe query builded by ORM  on 32 bit windows7 machine, is below, (this works fine)\n\n``` sql\nSelect * from ............ ORDER BY EmpName COLLATE NOCASE ASC\n```\n\nBut the same query builded by ORM on 64 bit windows7 machine  is,(this doesnt work)\n\n``` sql\nSelect * from ......... ORDER BY `EmpName COLLATE NOCASE ASC`\n```\n\nAs you can see ORM is adding a quote around `EmpName COLLATE NOCASE ASC` on 64 bit machine which is making the sequelize to think `EmpName COLLATE NOCASE ASC` as a column name and throws a error saying \"this column name not found\". But in 32 bit machine there are no quotes so the query works fine.\nOne more problem to same query is, when i copy the whole query into SQLite personal browser and replace `with ' the query executes fine . So the real cuprit here is`( this ` can be found on top left of the keyboard along with ~). Can anyone please explain why the ORM is acting differently on 32 and 64 bit machines and try to give a possible solution to the above problem\n\nThanks in advance\n",
    "comments_url": "https://api.github.com/repos/sequelize/sequelize/issues/1552/comments",
    "author": "ghousuddin",
    "comments": [
      {
        "user": "janmeier",
        "created_at": "2014-03-25T12:50:49Z",
        "body": "This sounds incredibly strange. Are you sure, you are running the same version of sequelize, and the same version of node?. Are you using the same terminal (e.g. that you are not using cmd on one machine and cygwin on the other) since they might show quotes slightly differently.\n\nIf you provide a test case I can test it on my 64 bit win 7 at some point, but I really don't see why this could be happening.\n"
      },
      {
        "user": "ghousuddin",
        "created_at": "2014-03-26T07:28:53Z",
        "body": "Hi ,\nThanks for the reply.\nI do not have a test case to provide it to you, but i can provide you the scenario how we have implemented the code.\n\nvar getEmpQuery = function(whereCase,sortParam) {\n    console.log(\"where =>\"+whereCase);\n    console.log(\"sort =>\"+sortParam);\n    return { include :\n            [  \n                {model : empJoined, as : 'joinData'},\n                {model : empSalary            , as: 'salary'}\n            ],  \n            where :  whereCase,\n            order : sortParam\n           };\n};\nvar retString = getEmpQuery(where,sort);\nconsole.log(\"*************\");\nconsole.log(retString);\n\nDebugs after execution:\n\nwhere => language LIKE '%eng%'\nsort => EmpName COLLATE NOCASE ASC\n\n---\n\n{ include:\n   [ \n     { model: [Object], as: 'joinData' },\n     { model: [Object], as: 'salary' } ],\n  where: 'language LIKE \\'%eng%\\'',\n  order: [ 'EmpName COLLATE NOCASE ASC' ] }\n\n  The query formed is:\n   Select \\* from ............. WHERE language LIKE '%eng%' ORDER BY `EmpName COLLATE NOCASE ASC`;\n\nLemme know if you need anything else as well\n\nThanks\n"
      },
      {
        "user": "janmeier",
        "created_at": "2014-03-31T15:18:00Z",
        "body": "Without any model definitions, including associations, it's going to be impossible for me to track this down\n"
      },
      {
        "user": "janmeier",
        "created_at": "2014-04-04T19:42:55Z",
        "body": "I've tried various combinations and sequelize versions on my windows 7 64 bit machine, and I haven't been able to reproduce the problem. \n\nIf this is still an issue for you, please provide your sequelize version, node version, and some model definitions\n"
      }
    ]
  },
  {
    "number": 1545,
    "title": "How can I \"inject\" one model into another?",
    "created_at": "2014-03-23T19:59:06Z",
    "closed_at": "2014-03-23T20:56:06Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/sequelize/sequelize/issues/1545",
    "body": "Alright, this may seem kind of crazy but please try to follow along.  I'm hoping there's a simple solution.\n\nI've found that when providing a complete \"document\" to my angular client of a user account...\n\n```\nUser.find(\n    {\n        where:whereObj,\n        order: '\"People\".\"gender\" DESC',\n        include:[\n            {\n                model: Person,\n                as: \"People\",\n                include:[\n                    {\n                        model: PersonalTrait,\n                        as: \"Traits\"\n                    }\n                ]\n            },\n            {\n                model: Media,\n                as: \"PrimaryMedia\"\n            },\n            {\n                model: MediaFolder,\n                as: \"MediaFolders\",\n                include:[\n                    {\n                        model: Media,\n                        as: \"Media\"\n                    }\n                ]\n            }\n        ]\n    }\n).success(function(user){\n    if(user === null){\n        res.send(404);\n    }else{\n        res.json(200, user);\n   }\n}).error(function(err){\n    res.send(400);\n});\n```\n\nI see the database query resulting in exponential rows, depending on the number of rows for Traits, MediaFolders and Media.  For example...  1 User row has 2 People rows and 2 MediaFolder rows produces 4 rows in Sequelize's query to produce the object.  Adding 2 MediaRows linked to a MediaFolder row produces 6 rows. Adding 2 Traits to the User now produces 9 rows.  20 traits = 63 rows.  20 traits & 12 media = 252 rows.\n\nI'm fairly certain I understand why this is and that I'm using Sequelize properly.  So I decided to try taking a different approach by first getting the basic User object with everything but the Media Folders, then getting those media folders and \"injecting\" them into the User object result.\n\n```\nUser.find(\n    {\n        where:whereObj,\n        order: '\"People\".\"gender\" DESC',\n        include:[\n            {\n                model: Person,\n                as: \"People\",\n                include:[\n                    {\n                        model: PersonalTrait,\n                        as: \"Traits\"\n                    }\n                ]\n            },\n            {\n                model: Media,\n                as: \"PrimaryMedia\"\n            }\n        ]\n    }\n).success(function(user){\n    if(user === null){\n        res.send(404);\n    }else{\n\n        MediaFolder.findAll(\n            {\n                where: {\n                    \"UserId\": user.id\n                },\n                include:[\n                    {\n                        model: Media,\n                        as: \"Media\"\n                    }\n                ]\n            }\n        ).success(function(mediaFolders){\n            user.mediaFolders = mediaFolders; // <-- pseudocode\n            res.json(200, user);\n        }).error(function(err){\n            res.send(400);\n        });\n   }\n}).error(function(err){\n    res.send(400);\n});\n```\n\nThe only problem is that I'm not sure how I can do this because that \"pseudocode\" line above didn't work.  :)\n",
    "comments_url": "https://api.github.com/repos/sequelize/sequelize/issues/1545/comments",
    "author": "emadd",
    "comments": [
      {
        "user": "janmeier",
        "created_at": "2014-03-23T20:17:21Z",
        "body": "In `res.json(200, user)` the user object is being converted to JSON using sequelize's toJSON method, which includes all eagerly loaded relations automatically. However, when you add mediaFolders manually sequelize does not know to include that in the JSON output. \n\nTry something along the lines of\n\n``` js\nresponse = user.toJSON()\nresponse.mediaFolders = mediaFolders\nres.json(200, response);\n```\n"
      },
      {
        "user": "emadd",
        "created_at": "2014-03-23T20:56:06Z",
        "body": "Fantastic!  This works perfectly and is scalable.  Very fast.\n"
      },
      {
        "user": "mickhansen",
        "created_at": "2014-03-24T08:05:35Z",
        "body": "The first find call should be able to work though.\n"
      },
      {
        "user": "emadd",
        "created_at": "2014-03-24T15:12:14Z",
        "body": "It works, but it's not efficient. Sequelize is writing SQL that produces thousands of rows just to pull a couple dozen objects. \n\nSent from my iPhone\n\n> On Mar 24, 2014, at 2:05 AM, Mick Hansen notifications@github.com wrote:\n> \n> The first find call should be able to work though.\n> \n> —\n> Reply to this email directly or view it on GitHub.\n"
      },
      {
        "user": "mickhansen",
        "created_at": "2014-03-24T15:17:45Z",
        "body": "@emadd how would you write the SQL any differently?\n"
      },
      {
        "user": "mickhansen",
        "created_at": "2014-03-24T15:18:22Z",
        "body": "But no joins can be less efficient than doing seperate queries, especially with the extra parsing needed. I'm thinking we might want to add an option that takes hasMany queries and does them in a seperate query instead.\n"
      },
      {
        "user": "emadd",
        "created_at": "2014-03-24T15:36:16Z",
        "body": "I wouldn't. It's brilliant, really. I was only looking for some advice on how to go about it another way. My application has very specific scalability challenges that any ORM would struggle with, but Sequelize kicks all kinds of ass. \n\n\"Normalize until it hurts, de-normalize until it works\"\n\nHaving the option to specify how the related objects are included would be pretty cool. \n\nSent from my iPhone\n\n> On Mar 24, 2014, at 9:17 AM, Mick Hansen notifications@github.com wrote:\n> \n> @emadd how would you write the SQL any differently?\n> \n> —\n> Reply to this email directly or view it on GitHub.\n"
      },
      {
        "user": "mickhansen",
        "created_at": "2014-03-24T15:46:20Z",
        "body": "Ah, yeah. Huge performance hit on that unfortuneatly, i really want to optimize that as much as possible since it adds a shitload of convenience.\n\nIn my performance critical app i've put an aggressive redis cache i front to get the performance i really need.\n\nYeah, Bookshelf does it in seperate queries, and it definitely has its usecases as i've come to find out.\n"
      }
    ]
  },
  {
    "number": 1537,
    "title": "Self reference (bi-directional)",
    "created_at": "2014-03-22T11:07:57Z",
    "closed_at": "2014-03-22T22:50:05Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/sequelize/sequelize/issues/1537",
    "body": "A Person can have many children: Person.hasMany(Person {as: 'children})\nA Person has one father: Person.hasOne(Person {as: 'father'})\n\nSeems straightforward enough. \nNow I want to find records for a Person, and their father:\nPerson.find({include: [{model: Person, as: 'father}])\n\nBad things happen: \"Error: Person (Father) is not associated to Person!\" which was unexpected given that there are actually two relationships in place.\n\nBut then, it also occurs to me that I don't know how to tell Sequelize which of the relations to follow in a given include? If I wanted to return records for both father and children how would I do that?\n\nPerhaps I'm just thinking about it all wrong?\n",
    "comments_url": "https://api.github.com/repos/sequelize/sequelize/issues/1537/comments",
    "author": "EduceHealth",
    "comments": [
      {
        "user": "mickhansen",
        "created_at": "2014-03-22T11:50:38Z",
        "body": "Using `as` tells it what relation to use. You must have misspelled something, there's also a type in the code you provided us, please show us the actual code you are using.\n\nSide note: For the relation to work from both sides you probably wan't something like `foreignkey: 'parent_id` on both relation calls hasOne/hasMany. Conceptually you might want to use belongsTo rather than hasOne. (belongsTo is usually the opposite of hasMany in a 1:M relation, although hasOne should work since its a self-refential association, normally it wouldn't know)\n"
      },
      {
        "user": "EduceHealth",
        "created_at": "2014-03-22T22:50:05Z",
        "body": "\"You must have misspelled something\" - you are right. \n\nI hadn't made the connection that the two 'as' statements needed to match for it to work. I'd declared the relationship as 'Parent', but then tried to use it as 'father'. Makes perfect sense.\n\nThanks for the pointer.\n"
      },
      {
        "user": "mickhansen",
        "created_at": "2014-03-23T07:49:18Z",
        "body": "Ah, yes it has to match. That's how we distinguish between the relations :)\n"
      }
    ]
  },
  {
    "number": 1528,
    "title": "potential bug in quoteIdentifiers function in query generator of mysql / mariadb",
    "created_at": "2014-03-20T15:02:01Z",
    "closed_at": "2014-03-20T17:34:46Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/sequelize/sequelize/issues/1528",
    "body": "hi,\n\ni have an problem with multi associated properties in where and order conditions with nested eager loading.\n\ni get wrong sql with the following find / findAll ...\n\n``` javascript\nvar Article = sequelize.define('Article', { name: Sequelize.STRING })\n  , Customer = sequelize.define('Customer', { name: Sequelize.STRING })\n  , PostCode = sequelize.define('PostCode', { postcode: Sequelize.INTEGER, city: Sequelize.STRING })\n\nArticle.belongsTo(Customer)\nCustomer.belongsTo(PostCode)\n\nsequelize.sync().done(function() {\n  Article.findAll({\n    attributes: ['name'],\n    include: [{\n      model: Customer,\n      attributes: ['name'],\n      include: [{\n        model: PostCode,\n        attributes: ['postcode', 'city'],\n      }]\n    }],\n    order: ['Customer.PostCode.postcode', 'ASC']\n  }).success(function(articles) {\n    console.log('articles', articles)\n  })\n})\n```\n\n``` sql\nSELECT\n  `Article`.`name`,\n  `Customer`.`name` AS `Customer.name`,\n  `Customer`.`id` AS `Customer.id`,\n  `Customer.PostCode`.`postcode` AS `Customer.PostCode.postcode`,\n  `Customer.PostCode`.`city` AS `Customer.PostCode.city`,\n  `Customer.PostCode`.`id` AS `Customer.PostCode.id`\nFROM `Article`\n  LEFT OUTER JOIN `Customer` AS `Customer`\n    ON `Customer`.`id` = `Article`.`customer_id`\n      LEFT OUTER JOIN `PostCode` AS `Customer.PostCode`\n        ON `Customer.PostCode`.`id` = `Customer`.`post_code_id`\nORDER BY `Customer`.`PostCode`.`postcode`, `ASC`;\n```\n\ni think the problem is the quoteIdentifiers from lib/dialects/mysql/query-generator.js. it escapes the string \n\n```\nCustomer.PostCode.postcode\n```\n\n to \n\n```\n`Customer`.`PostCode`.`postcode`\n```\n\nTo make the query working it should by \n\n```\n`Customer.PostCode`.`postcode`\n```\n\n cause of the generated table alias.\n\nthe problem could by solved by the following code ...\n\n``` javascript\n    quoteIdentifiers: function(identifiers, force) {\n      var seperator = identifiers.lastIndexOf('.')\n      if (seperator === -1) {\n        return this.quoteIdentifier(identifiers, force)\n      } else {\n        return this.quoteIdentifier(identifiers.substr(0, seperator), force) + '.' + this.quoteIdentifier(identifiers.substr(seperator + 1), force)\n      }   \n    },\n```\n\nbut i am not sure we're using that the right way. it would be nice if somebody can look over it.\n\nthx, mithrandir\n",
    "comments_url": "https://api.github.com/repos/sequelize/sequelize/issues/1528/comments",
    "author": "mithrandirii",
    "comments": [
      {
        "user": "janmeier",
        "created_at": "2014-03-20T16:23:24Z",
        "body": "Just tried running your example against master (thanks for providing an example that i can actually copy paste directly into my env btw, not everyone remembers that!) and it runs correctly. One change however, I changed the order to be wrapped in a second array.\n\n``` sql\nSELECT \n  `Articles`.`name`, \n  `Customer`.`name` AS `Customer.name`, \n  `Customer`.`id` AS `Customer.id`, \n  `Customer.PostCode`.`postcode` AS `Customer.PostCode.postcode`, \n  `Customer.PostCode`.`city` AS `Customer.PostCode.city`, \n  `Customer.PostCode`.`id` AS `Customer.PostCode.id` \nFROM `Articles` \n  LEFT OUTER JOIN `Customers` AS `Customer` \n    ON `Customer`.`id` = `Articles`.`customer_id` \n  LEFT OUTER JOIN `PostCodes` AS `Customer.PostCode` \n    ON `Customer.PostCode`.`id` = `Customer`.`post_code_id` \nORDER BY `Customer.PostCode`.`postcode` ASC;\n```\n\nThe fact that your order syntax actually kind of worked suggests to me that you are on an old version - could you try upgrading?\n"
      },
      {
        "user": "mithrandirii",
        "created_at": "2014-03-20T16:36:40Z",
        "body": "i used the version 1.7 . if i use the current git master i get another error on sync with our real application: 'cyclic dependency found'. so first i have to build an test env. but thx for the fast reply\n"
      },
      {
        "user": "janmeier",
        "created_at": "2014-03-20T16:40:03Z",
        "body": "No problem :)\n\nMaster introduced automatically adding foreign key references on associations, so you are creating a circual reference somewhere, probably of the form\n\n``` js\nx.hasOne(y)\ny.hasOne(x)\n```\n\nWhich adds x_id to y and y_id to x - one of them should be a belongsTo\n"
      },
      {
        "user": "mithrandirii",
        "created_at": "2014-03-20T17:34:46Z",
        "body": "ok, with git master the problem is solved. thanks again for your help and hint with the cyclic dependency ;)\n"
      }
    ]
  },
  {
    "number": 1524,
    "title": "Model.hasMany(OtherModel)  doesn't use name of foreign key specified in OtherModel",
    "created_at": "2014-03-20T00:54:50Z",
    "closed_at": "2014-03-24T20:44:20Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/sequelize/sequelize/issues/1524",
    "body": "I have the following two models:\nUser and CropSession were User.hasMany(models.CropSession). In CropSession I reference the table Users with referenceKey: id as userId.\n\nWhen I do\n\n``` js\nUser.find({where: {id: 1}}).then(function(user) {\n  return user.getCropSessions();\n});\n```\n\nThe returned CropSession has property UserId instead of userId. Is there a way to get the stipulated name? In this case being userId.\n\nI leave you next with the model definitions for reference.\n\nUser model\n\n``` js\n'use strict';\n\nvar bcrypt = require('bcrypt');\nvar Promise = require('bluebird');\nvar hash = Promise.promisify(bcrypt.hash, bcrypt);\nvar comparePassword = Promise.promisify(bcrypt.compare, bcrypt);\n\nmodule.exports = function(sequelize, DataTypes) {\n  var User = sequelize.define('User', {\n    id: {\n      type: DataTypes.INTEGER,\n      autoIncrement: true,\n      primaryKey: true\n    },\n    email: {\n      type: DataTypes.STRING,\n      isEmail: true,\n      unique: true,\n      validate: {\n        isEmail: true,\n        notEmpty: true\n      }\n    },\n    userType: {\n      type: DataTypes.ENUM('farmer', 'researcher'),\n      allowNull: false,\n      validate: {\n        isIn: [['farmer', 'researcher']],\n      }\n    },\n    password: {\n      type: DataTypes.STRING,\n      allowNull: false,\n      validate: {\n        notEmpty: true\n      }\n    },\n    name: {\n      type: DataTypes.STRING,\n      allowNull: false,\n      validate: {\n        isAlpha: true\n      }\n    },\n    lastName: {\n      type: DataTypes.STRING,\n      allowNull: false,\n      validate: {\n        isAlpha: true\n      }\n    },\n    organization: {\n      type: DataTypes.STRING,\n      allowNull: false,\n      validate: {\n        isAlphanumeric: true\n      }\n    },\n    farmLatitude: {\n      type: DataTypes.FLOAT,\n      allowNull: true,\n      validate: {\n        isFloat: true\n      }\n    },\n    farmLongitude: {\n      type: DataTypes.FLOAT,\n      allowNull: true,\n      validate: {\n        isFloat: true\n      }\n    }\n  }, {\n    validate: {\n      farmerCoordinates: function() {\n        var hasCoords = this.farmLatitude && !isNaN(this.farmLatitude) &&\n            this.farmLongitude && !isNaN(this.farmLongitude);\n        if(this.userType === 'farmer' && !hasCoords) {\n          throw new Error('Farmer must have the farm\\'s location defined');\n        }\n      }\n    },\n    classMethods: {\n      associate: function(models) {\n        User.hasMany(models.CropSession);\n      },\n      hashPassword: function(password) {\n        return hash(password, 8);\n      }\n    },\n    instanceMethods: {\n      verifyPassword: function(password) {\n        return comparePassword(password, this.password);\n      },\n      getJSON: function() {\n        var values = this.values;\n        delete values.password;\n        return values;\n      }\n    }\n  });\n\n  return User;\n};\n\n```\n\nCropSession model\n\n``` js\n'use strict';\n\nmodule.exports = function(sequelize, DataTypes) {\n  var CropSession = sequelize.define('CropSession', {\n    id: {\n      type: DataTypes.INTEGER,\n      autoIncrement: true,\n      primaryKey: true\n    },\n    userId: {\n      type: DataTypes.INTEGER,\n      references: 'Users',\n      referencesKey: 'id',\n      unique: true\n    },\n    cropName: {\n      type: DataTypes.STRING,\n      unique: true\n    },\n    cropTypeId: {\n      type: DataTypes.INTEGER,\n      references: 'CropTypes',\n      referencesKey: 'id'\n    },\n    startDate: {\n      type: DataTypes.DATE,\n      allowNull: false\n    },\n    initialStageLength: {\n      type: DataTypes.INTEGER,\n      allowNull: false,\n      validate: {\n        isNumeric: true\n      }\n    },\n    developmentStageLength: {\n      type: DataTypes.INTEGER,\n      allowNull: false,\n      validate: {\n        isNumeric: true\n      }\n    },\n    midStageLength: {\n      type: DataTypes.INTEGER,\n      allowNull: false,\n      validate: {\n        isNumeric: true\n      }\n    },\n    lateStageLength: {\n      type: DataTypes.INTEGER,\n      allowNull: false,\n      validate: {\n        isNumeric: true\n      }\n    },\n    kcInitial: {\n      type: DataTypes.FLOAT,\n      allowNull: false,\n      validate: {\n        isNumeric: true\n      }\n    },\n    kcMid: {\n      type: DataTypes.FLOAT,\n      allowNull: false,\n      validate: {\n        isNumeric: true\n      }\n    },\n    kcEnd: {\n      type: DataTypes.FLOAT,\n      allowNull: false,\n      validate: {\n        isNumeric: true\n      }\n    }\n  }, {\n    classMethods: {\n      associate: function(models) {\n        CropSession.belongsTo(models.User);\n        CropSession.belongsTo(models.CropType);\n\n        CropSession.hasMany(models.IrrigationEvent);\n      }\n    }\n  });\n\n  return CropSession;\n};\n\n```\n",
    "comments_url": "https://api.github.com/repos/sequelize/sequelize/issues/1524/comments",
    "author": "vjames19",
    "comments": [
      {
        "user": "mickhansen",
        "created_at": "2014-03-20T08:24:19Z",
        "body": "The naming for camelCase attributes is a bit off, we're working on fixing that.\nFor now you could do `User.hasMany(models.CropSession, {foreignKey: 'userId'});`\n"
      },
      {
        "user": "vjames19",
        "created_at": "2014-03-20T19:20:34Z",
        "body": "@mickhansen I forgot to mention that I also tried using the foreignKey option, but I still get the same result!\n"
      },
      {
        "user": "vjames19",
        "created_at": "2014-03-20T19:30:22Z",
        "body": "@mickhansen The following seems to fix it:\n`CropSession.belongsTo(models.User, {foreignKey: 'userId'});`\n"
      },
      {
        "user": "mickhansen",
        "created_at": "2014-03-20T20:11:51Z",
        "body": "@vjames19 Well yes, you need to use it on both sides of the association if you use the calls on both sides of the association ;)\n"
      }
    ]
  },
  {
    "number": 1520,
    "title": "Possible to get raw values for results of findAll",
    "created_at": "2014-03-19T03:52:36Z",
    "closed_at": "2014-03-20T04:46:52Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/sequelize/sequelize/issues/1520",
    "body": "We can currently access the -values attribute for single instances, but this doesn't seem possible for multiple instances. Is this is a bug or designed as such? \n",
    "comments_url": "https://api.github.com/repos/sequelize/sequelize/issues/1520/comments",
    "author": "fsosa",
    "comments": [
      {
        "user": "mickhansen",
        "created_at": "2014-03-19T05:35:24Z",
        "body": "Can you clarify?\n\n\"Multiple instances\" would just be array of instances, so usually regular array mapping techniques work.\n"
      },
      {
        "user": "fsosa",
        "created_at": "2014-03-20T04:46:52Z",
        "body": "You're completely right, I misunderstood what was actually being returned. Thanks!\n"
      },
      {
        "user": "mickhansen",
        "created_at": "2014-03-20T08:24:55Z",
        "body": "Great :)\n"
      }
    ]
  },
  {
    "number": 1450,
    "title": "should find({include: [model]) return the association identifier in result?",
    "created_at": "2014-03-03T17:41:20Z",
    "closed_at": "2014-03-03T19:04:31Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/sequelize/sequelize/issues/1450",
    "body": "This is more of a question, rather than an issue (though potentially an issue).\n\nIf I've got two models defined:\n\n```\n  var User = sequelize.define('users', {\n    id:       { type: Sequelize.INTEGER, autoIncrement: true, primaryKey: true }, \n    username: { type: Sequelize.STRING, unique: true }, \n    email:    { type: Sequelize.STRING, unique: true, validate: { isEmail: true } } \n  });\n\n  var Address = sequelize.define('addresses', { \n    id:             { type: Sequelize.INTEGER, autoIncrement: true, primaryKey: true }, \n    street:         { type: Sequelize.STRING },\n    state_province: { type: Sequelize.STRING },\n    postal_code:    { type: Sequelize.STRING },\n    country_code:   { type: Sequelize.STRING }\n  });\n\n  User.belongsTo(Address);\n```\n\nenter some data, and then call:\n\n```\n  User\n    .findAll({ include: [Address] })\n    .success(function(records) {\n      console.log(records);\n    });\n```\n\nI'll end up with some json looking like this:\n\n```\n{ id: 1,\n  username: 'sherlock',\n  email: 'sherlock@holmes.com',\n  address_id: 1,\n  address:\n   { id: 1,\n     street: '‎221B Baker Street',\n     state_province: 'London',\n     postal_code: 'NW1',\n     country_code: '44' } }\n```\n\nMy question is whether, when we're prefetching the data and injecting it into the result, we should include the 'address_id' in the \"parent\" record result, given that the id exists in the 'address'? \n",
    "comments_url": "https://api.github.com/repos/sequelize/sequelize/issues/1450/comments",
    "author": "mbroadst",
    "comments": [
      {
        "user": "janmeier",
        "created_at": "2014-03-03T17:54:43Z",
        "body": "By default sequelize will load all the defined attributes of the table, also the ones that are related to relations. Figuring out what fields not to include because they are so to speak \"already covered\" by having the related entity included would not be easy.\n\nYou can however do:\n\n``` js\nUser\n.findAll({ attributes: ['username', 'id', 'email'], include: [Address] })\n.success(function(records) {\n    console.log(records[0].toJSON());\n});\n```\n"
      },
      {
        "user": "mbroadst",
        "created_at": "2014-03-03T18:26:32Z",
        "body": "Agreed, and that is a perfectly valid solution, but as a thought experiment is this the \"correct\" behavior? Taking the implementation effort out of the equation for a second, I'm just asking if it seems to you guys that the association identifier **should** be omitted?\n"
      },
      {
        "user": "mickhansen",
        "created_at": "2014-03-03T18:50:29Z",
        "body": "I don't disagree with your thinking. But let's look at it the other way around, how will it seems to the user if we start magically removing attributes that are validly a part of his table?\n\nI agree in the terms of a restful API it would be pretty to remove those foreign keys (they hide the \"ugly\" implementation). But in terms of sanity i'd say it's better to include all attributes in the result.\n"
      },
      {
        "user": "mbroadst",
        "created_at": "2014-03-03T19:04:31Z",
        "body": "@mickhansen agreed. You hit the nail on the head that I'm working with a REST api here, so I'll go that route and pull out values to provide the type of data we're looking for. Thanks to you and @janmeier for your input.\n"
      }
    ]
  },
  {
    "number": 1413,
    "title": "`include` breaks when using `include: { daoFactory: DaoFactory1, as: 'factory' }` form",
    "created_at": "2014-02-20T15:57:34Z",
    "closed_at": "2014-02-20T16:40:09Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/sequelize/sequelize/issues/1413",
    "body": "Not sure if it has to do with the association in my db being backwards.\n\nI have \n\n```\nAddress.hasOne(Firm);\nCompany.belongsTo(Address);\n```\n\nThis works as expected:  \n\n```\nCompany.findAll({include: [Address]});\n```\n\nBut this breaks:  \n\n```\nCompany.findAll({include: [{daoFactory: Address, as: 'address'}]});  \n```\n\nWith an error log of \n\n```\nError: Address (address) is not associated to Firm!\nat module.exports.validateIncludedElement (D:\\Work\\LittleRoom\\Sequelize\\node_modules\\sequelize\\lib\\dao-factory.js:1433:13)\nat null. (D:\\Work\\LittleRoom\\Sequelize\\node_modules\\sequelize\\lib\\dao-factory.js:1337:41)\nat Array.map (native)\nat module.exports.validateIncludedElements (D:\\Work\\LittleRoom\\Sequelize\\node_modules\\sequelize\\lib\\dao-factory.js:1336:39)\nat module.exports.DAOFactory.findAll (D:\\Work\\LittleRoom\\Sequelize\\node_modules\\sequelize\\lib\\dao-factory.js:451:34)\nat port (D:\\Work\\LittleRoom\\Sequelize\\index.js:46:17)\nat callbacks (D:\\Work\\LittleRoom\\Sequelize\\node_modules\\express\\lib\\router\\index.js:164:37)\nat param (D:\\Work\\LittleRoom\\Sequelize\\node_modules\\express\\lib\\router\\index.js:138:11)\nat param (D:\\Work\\LittleRoom\\Sequelize\\node_modules\\express\\lib\\router\\index.js:135:11)\nat pass (D:\\Work\\LittleRoom\\Sequelize\\node_modules\\express\\lib\\router\\index.js:145:5)\n```\n",
    "comments_url": "https://api.github.com/repos/sequelize/sequelize/issues/1413/comments",
    "author": "cheapsteak",
    "comments": [
      {
        "user": "janmeier",
        "created_at": "2014-02-20T16:12:04Z",
        "body": "The `as` option is only for when you have explicitly aliased your relation, like this:\n\n``` js\nCompany.belongsTo(Address, { as: 'HomeAddress' })\n\nCompany.findAll({include: [{model: Address, as: 'HomeAddress'}]});  \n```\n"
      },
      {
        "user": "cheapsteak",
        "created_at": "2014-02-20T16:20:17Z",
        "body": "Explicitly aliasing the `belongsTo` part of the relation seems to have broken the other way of include as well.\n\nThis was working:\n\n```\nAddress.hasOne(Firm, { as: 'Company'} );\nCompany.belongsTo(Address, { foreignKey: 'address_id'});\n\nCompany.findAll({\n    where: { compay_ids : ids },\n    include: [Address]\n})  \n```\n\nThis breaks:  \n\n```\nAddress.hasOne(Firm, { as: 'Company'} );\nCompany.belongsTo(Address, { as: 'Address', foreignKey: 'address_id'});  //added explicit alias\n\nCompany.findAll({  //same as before\n    where: { compay_ids : ids },\n    include: [Address]\n})  \n```\n\nAgain a `Address is not associated to Company!` error exception is thrown\n"
      },
      {
        "user": "mickhansen",
        "created_at": "2014-02-20T16:25:20Z",
        "body": "If your association is using `as` you need to use it in your `include` statement aswell.\n"
      },
      {
        "user": "mickhansen",
        "created_at": "2014-02-20T16:25:57Z",
        "body": "```\nAddress.hasOne(Firm, { as: 'Company'} );\nCompany.belongsTo(Address, { as: 'Address', foreignKey: 'address_id'});  //added explicit alias\n\nCompany.findAll({  //same as before\n  where: { compay_ids : ids },\n  include: [{model: Address, as: 'Address'}]\n})  \n```\n\nOr remove the alias all together. But you have to pick one, no alias, or alias on both.\n"
      },
      {
        "user": "janmeier",
        "created_at": "2014-02-20T16:26:29Z",
        "body": "Put another way, you can only use `as` in include if you also use `as` in the association. It is not possible to load your model under another name when including\n"
      },
      {
        "user": "cheapsteak",
        "created_at": "2014-02-20T16:30:52Z",
        "body": "Ah, I see. Thank you for the clarification. That worked.\n"
      },
      {
        "user": "mickhansen",
        "created_at": "2014-02-20T16:40:09Z",
        "body": "A continuing point of confusion, guess we'll have to clear up the docs on that somehow. \n"
      }
    ]
  },
  {
    "number": 1394,
    "title": "no method 'set%modelname%' for multiassociations models",
    "created_at": "2014-02-15T03:24:23Z",
    "closed_at": "2014-02-25T09:21:47Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/sequelize/sequelize/issues/1394",
    "body": "I have models with these associations:\n\n```\ndb.Term\n    .hasMany(db.Taxonomy, {foreignKey: 'term_id'});\n\ndb.Taxonomy\n    .belongsTo(db.Term)\n    .hasMany(db.Event, {through: 'event_taxonomy'})\n\ndb.Event\n    .hasMany(db.Taxonomy, {through: 'event_taxonomy'})\n```\n\nin my controller i try to add new event, with relationship for taxonomy\n\n```\ndb.Taxonomy.find(1).success(function(taxonomy) {\n    db.Event.create({name: 'test'}).success(function(event) {\n\n        // it works\n        taxonomy.addEvent(event).success(function() {})\n\n        // it crush with error \"Object [object Object] has no method 'addTaxonomy'\"\"\n        event.addTaxonomy(taxonomy).success(function() {})\n\n    })    \n})\n```\n",
    "comments_url": "https://api.github.com/repos/sequelize/sequelize/issues/1394/comments",
    "author": "dpolyakov",
    "comments": [
      {
        "user": "mickhansen",
        "created_at": "2014-02-15T08:45:08Z",
        "body": "Its most likely `setTaxonomies` and remember to use an array `[category]`\n"
      },
      {
        "user": "mickhansen",
        "created_at": "2014-02-15T08:46:22Z",
        "body": "Or use `addTaxonomy` if you just want to add to the set. `setAssociations` expects and array and sets the entire association set for that relation.\n"
      },
      {
        "user": "dpolyakov",
        "created_at": "2014-02-15T09:20:30Z",
        "body": "Oh, sorry, i made some mistakes when wrote issue. category = taxonomy\n\nI try both variants but get the error in each of them:\n\n```\nevent.addTaxonomy(taxonomy).success(function() {})\n\nObject [object Object] has no method 'addTaxonomy'\n```\n\n```\nevent.setTaxonomys([taxonomy]).success(function() {})\n\nObject [object Object] has no method 'setTaxonomys'\n```\n"
      },
      {
        "user": "mickhansen",
        "created_at": "2014-02-15T13:20:02Z",
        "body": "Well its most likely `setTaxonomies` like i said, since its pluralized.\nThere might be a naming issue though, try logging the dao/model instance and see what methods it has.\n"
      },
      {
        "user": "janmeier",
        "created_at": "2014-02-15T19:07:07Z",
        "body": "Since it's a has many you need to use the plural, setTaxonomies, and pass\nit an array\n"
      },
      {
        "user": "mickhansen",
        "created_at": "2014-02-19T07:51:45Z",
        "body": "@dpolyakov are you still having issues?\n"
      },
      {
        "user": "dpolyakov",
        "created_at": "2014-02-24T10:34:49Z",
        "body": "@mickhansen i have not had time to check. In the next couple of days I will try to fix my code and give you the answer\n"
      },
      {
        "user": "dpolyakov",
        "created_at": "2014-02-24T22:16:50Z",
        "body": "I printed `accessors` from `node_modules/sequelize/lib/associations/has-many.js`` and get these methods:\n\n```\n{ get: 'getTermTaxonomies',\n  set: 'setTermTaxonomies',\n  add: 'addTermTaxonomy',\n  create: 'createTermTaxonomy',\n  remove: 'removeTermTaxonomy',\n  hasSingle: 'hasTermTaxonomy',\n  hasAll: 'hasTermTaxonomies' }\n```\n\nSo, `addTermTaxonomy` is working for me\n"
      },
      {
        "user": "mickhansen",
        "created_at": "2014-02-25T06:01:54Z",
        "body": "Weird that it's TermTaxonomy when you named the model Taxonomy\n"
      },
      {
        "user": "mickhansen",
        "created_at": "2014-02-25T06:02:15Z",
        "body": "Or did you, i guess we never saw your model definition :)\n"
      },
      {
        "user": "dpolyakov",
        "created_at": "2014-02-25T07:40:19Z",
        "body": "Terms\n\n```\nmodule.exports = function(sequelize, DataTypes) {\n    return sequelize.define('Term', {\n            name: {\n                type: DataTypes.STRING,\n                validate: {\n                    notEmpty: true\n                }\n            },\n            slug:  {\n                type: DataTypes.STRING,\n                unique: true\n            }\n        },\n        {\n            tableName: 'terms'\n        }\n    )\n}\n```\n\nTaxonomy\n\n```\nvar db = require('../models');\n\nmodule.exports = function(sequelize, DataTypes) {\n    var Taxonomy = sequelize.define('Taxonomy', {\n            term_id: {\n                type: DataTypes.INTEGER,\n                references: db.Term,\n                referencesKey: 'id',\n                onDelete: 'restrict'\n            },\n            type: {\n                type:DataTypes.TEXT\n            },\n            parent: {\n                type: DataTypes.INTEGER\n            },\n            description: {\n                type:DataTypes.TEXT\n            }\n        },\n        {\n            tableName: 'term_taxonomy'\n        }\n    );\n\n    return Taxonomy\n}\n```\n\nEvent\n\n```\nmodule.exports = function (sequelize, DataTypes) {\n    var Event = sequelize.define('Event', {\n            name: {\n                type: DataTypes.STRING,\n                validate: {\n                    notEmpty: true\n                }\n            },\n            slug: {\n                type: DataTypes.STRING\n                //unique: true\n            },\n\n            description: {\n                type: DataTypes.TEXT\n            } \n     );\n\n    return Event\n}\n```\n\nRelationship in models/index.js\n\n```\ndb.Term\n    .hasMany(db.Taxonomy, {foreignKey: 'term_id'});\n\ndb.Taxonomy\n    .belongsTo(db.Term)\n    .hasOne(db.Taxonomy, { as: 'parent', foreignKey: 'parent',useJunctionTable: false})\n    .hasMany(db.Event, {through: 'event_taxonomy' })\n\ndb.Event\n    .hasMany(db.Taxonomy, {through: 'event_taxonomy' })\n```\n"
      },
      {
        "user": "mickhansen",
        "created_at": "2014-02-25T09:21:30Z",
        "body": "Ah yeah you encountered the tableName bug. We're fixing that in 2.0 (can't do it in 1.7 for BC reasons), currently it will use tableName for names instead of model.name, that's obviously not intended behaviour.\n"
      },
      {
        "user": "Ygilany",
        "created_at": "2015-10-05T15:33:37Z",
        "body": "Can I know how did you print out the accessors for a specific model ?\nThanks\n@dpolyakov @mickhansen \n"
      },
      {
        "user": "janmeier",
        "created_at": "2015-10-06T06:38:58Z",
        "body": "@Ygilany `Model.Instance.prototype` or simply log the association\n"
      },
      {
        "user": "timmyreilly",
        "created_at": "2019-01-18T08:02:27Z",
        "body": "Just to tag this along, as this thread helped me a lot. Their might also be a `setWhatever` on one model but not the other model in a many-to-many relationship. So... don't forget to check the other object for a `setWhatever` in the prototype before pulling your hair out. "
      }
    ]
  },
  {
    "number": 1392,
    "title": "how to filter findAll include modle fields",
    "created_at": "2014-02-14T18:43:42Z",
    "closed_at": "2014-02-15T11:00:40Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/sequelize/sequelize/issues/1392",
    "body": "Example\n\n``` js\n    DB.Article.findAll({\n        include : [{model : DB.User}],\n        order : 'article.created_at DESC',\n        limit : 50\n    }).done(function (err, result){\n\n        })\n```\n\nit show sql\n\n``` sql\nExecuting (default): SELECT `article`.*, `user`.`id` AS `user.id`, `user`.`name` AS `user.name`, `user`.`password` AS `user.password`, `user`.`email` AS `user.email`, `user`.`bio` AS `user.bio`, `user`.`posts_count` AS `user.posts_count`, `user`.`digged_count` AS `user.digged_count`, `user`.`status` AS `user.status`, `user`.`create_passport_id` AS `user.create_passport_id`, `user`.`created_at` AS `user.created_at`, `user`.`modified_at` AS `user.modified_at` FROM `article` LEFT OUTER JOIN `user` AS `user` ON `user`.`id` = `article`.`user_id` ORDER BY article.created_at DESC LIMIT 50;\n```\n\nHave an way change include model select fields?\n",
    "comments_url": "https://api.github.com/repos/sequelize/sequelize/issues/1392/comments",
    "author": "youxiachai",
    "comments": [
      {
        "user": "dpolyakov",
        "created_at": "2014-02-15T03:37:10Z",
        "body": "```\nDB.Article.findAll({\n        include : [{\n            model : DB.User,\n            attributes: ['name']\n            }],\n        order : 'article.created_at DESC',\n        limit : 50\n    }).done(function (err, result){\n})\n```\n\nit will include only user name\n"
      },
      {
        "user": "youxiachai",
        "created_at": "2014-02-15T11:00:40Z",
        "body": "@dpolyakov thanks !\n"
      }
    ]
  },
  {
    "number": 1378,
    "title": "Create function validation ISO 8859-2 invalid character error",
    "created_at": "2014-02-11T17:11:49Z",
    "closed_at": "2014-07-14T18:33:37Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/sequelize/sequelize/issues/1378",
    "body": "Can I turn off the auto validation in the create function, because always got error when I add an accentuated letter to the value.\n\nI make some changes on the validation function:\n\n Validator.prototype.isAlpha = function() {\n        if (!this.str.match(/^[a-zA-ZíéáűúőóüöÍÉÁŰÚŐÓÜÖ]+$/)) {\n            return this.error(this.msg || 'Invalid characters');\n        }\n        return this;\n    }\n\n```\nValidator.prototype.isAlphanumeric = function() {\n    if (!this.str.match(/^[a-zA-Z0-9íéáűúőóüöÍÉÁŰÚŐÓÜÖ]+$/)) {\n        return this.error(this.msg || 'Invalid characters');\n    }\n    return this;\n}\n```\n\nBut that is not to stable :(.\n",
    "comments_url": "https://api.github.com/repos/sequelize/sequelize/issues/1378/comments",
    "author": "BetelGuese",
    "comments": [
      {
        "user": "mickhansen",
        "created_at": "2014-02-11T18:55:05Z",
        "body": "Almost all alpha validations are implemented naively like that.\nI don't believe it's currently possible to skips validations entirely for a create/save call.\n"
      },
      {
        "user": "mickhansen",
        "created_at": "2014-02-12T05:52:49Z",
        "body": "Why aren't you using UTF-8 btw? Regex supports UTF-8 and UTF-8 should support all characters of 8859-2\n"
      },
      {
        "user": "janmeier",
        "created_at": "2014-07-14T18:33:37Z",
        "body": "Closed, since this is a regex matching / validation question, not a sequelize question\n"
      }
    ]
  },
  {
    "number": 1368,
    "title": "Possible to define foreign key options via Associations ",
    "created_at": "2014-02-10T05:08:36Z",
    "closed_at": "2014-02-10T20:03:25Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/sequelize/sequelize/issues/1368",
    "body": "When defining an association, is it possible to define options for the automatically created foreign key?\n\nFor example, \n\n```\nProject.hasMany(User, {allowNull: false}); \n```\n\nIf not, is the only way to accomplish this by defining the column via the model and then using the foreignkey option?\n",
    "comments_url": "https://api.github.com/repos/sequelize/sequelize/issues/1368/comments",
    "author": "fsosa",
    "comments": [
      {
        "user": "mickhansen",
        "created_at": "2014-02-10T05:45:56Z",
        "body": "Without being total certain; Yes i believe the only way to have granular control over the foreign key column is to define it yourself.\n"
      },
      {
        "user": "fsosa",
        "created_at": "2014-02-10T20:03:25Z",
        "body": "Appreciate the response, thanks!\n"
      }
    ]
  },
  {
    "number": 1366,
    "title": "Oddities with one to one relationships?",
    "created_at": "2014-02-09T14:11:14Z",
    "closed_at": "2014-02-10T10:05:44Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/sequelize/sequelize/issues/1366",
    "body": "I've got a fairly simple schema, a Users table and a UserRoles table. One User has one Role, linked from the User's roleId to the UserRole's id.\n\nFor some reason I can't specify the relationship like this:\n\n``` javascript\nm.User.hasOne(m.UserRole, {as: 'role', foreignKey: 'roleId'});\n```\n\nBecause I get the following error:\n\n``` javascript\n{ [Error: ER_BAD_FIELD_ERROR: Unknown column 'role.roleId' in 'field list']\n  code: 'ER_BAD_FIELD_ERROR',\n  errno: 1054,\n  sqlState: '42S22',\n  index: 0,\n  sql: 'SELECT `Users`.*, `role`.`id` AS `role.id`, `role`.`name` AS `role.name`, `role`.`roleId` AS `role.roleId` FROM `Users` LEFT OUTER JOIN `UserRoles` AS `role` ON `Users`.`id` = `role`.`roleId` WHERE `Users`.`id`=1;' }\n```\n\nHowever if I specify the relationship with a belongsTo like so:\n\n``` javascript\nm.User.belongsTo(m.UserRole, {as: 'role', foreignKey: 'roleId'});\n```\n\nIt works fine.\n\nThis seems a bit confusing to me, I'd expect hasOne to represent a situation where you're mapping from a column on the source table, to a target table, instead of what is happening which is the inverse of that, the target table is mapping onto the source table.\n\nCan anyone clear this up for me?\n",
    "comments_url": "https://api.github.com/repos/sequelize/sequelize/issues/1366/comments",
    "author": "ghost",
    "comments": [
      {
        "user": "mickhansen",
        "created_at": "2014-02-09T18:22:21Z",
        "body": "If the foreignKey is on the source model, in this case User, it's a belongsTo association. If the foreignKey is on the target model, it's a hasOne association.\n\nYou can think about this in terms of ownership, you really only use hasOne when it owns that model. A user/role relationship would usually be a 1:M association with user belonging to roles and roles having many users.\n"
      },
      {
        "user": "ghost",
        "created_at": "2014-02-10T10:05:44Z",
        "body": "That makes sense, thanks for clearing that up!\n"
      }
    ]
  },
  {
    "number": 1340,
    "title": "Eager loading and WHERE clauses",
    "created_at": "2014-02-04T09:57:21Z",
    "closed_at": "2014-02-04T10:41:14Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/sequelize/sequelize/issues/1340",
    "body": "Hello,\n\nI'm on 2.0.0-dev4 and trying to query an associated Model using a where clause, but the where condition ends up in a totally unexpected place inside the query.\n\n``` js\nProject.hasMany(Parameter);\nParameter.hasMany(Project);\nParameter.hasMany(ParameterValue);\nParameterValue.belongsTo(Parameter);\n```\n\nThe query:\n\n``` js\n    var where =\n    {\n        where: Sequelize.and(\n            {id : project_id},\n            Sequelize.or(\n                { 'Projects.customer_id': customer_id },\n                { 'Projects.customer_id': 0 }\n            )\n        ),\n        include:[ParameterValue,Project]\n    };\n\n    return Parameter.find(where);\n```\n\nThe resulting query:\n\n``` sql\nSELECT `Parameters`.*, \n`ParameterValues`.`id` AS `ParameterValues.id`, \n`ParameterValues`.`name` AS `ParameterValues.name`, \n`ParameterValues`.`key` AS `ParameterValues.key`, \n`ParameterValues`.`unit` AS `ParameterValues.unit`, \n`ParameterValues`.`type` AS `ParameterValues.type`, \n`ParameterValues`.`parameter_id` AS `ParameterValues.parameter_id`, \n`Projects`.`id` AS `Projects.id`, \n`Projects`.`name` AS `Projects.name`, \n`Projects`.`url` AS `Projects.url`, \n`Projects`.`api_key` AS `Projects.api_key`, \n`Projects`.`created_at` AS `Projects.created_at`, \n`Projects`.`customer_id` AS `Projects.customer_id`, \n`Projects.ParametersProject`.`project_id` AS `Projects.ParametersProject.project_id`, \n`Projects.ParametersProject`.`parameter_id` AS `Projects.ParametersProject.parameter_id` \n\nFROM (SELECT `Parameters`.* FROM `Parameters` \nWHERE (`Parameters`.`id`=\\'1\\' \n\n// The Projects.customer_id condition end on in this subSelect)\nAND (`Projects`.`customer_id`=1 OR `Projects`.`customer_id`=0)) LIMIT 1) AS `Parameters` \nLEFT OUTER JOIN \n    `ParameterValues` AS `ParameterValues` ON `Parameters`.`id` = `ParameterValues`.`parameter_id` \n    LEFT OUTER JOIN `ParametersProjects` AS `Projects.ParametersProject` \n    ON `Parameters`.`id` = `Projects.ParametersProject`.`parameter_id` \n    LEFT OUTER JOIN `Projects` AS `Projects` \n    ON `Projects`.`id` = `Projects.ParametersProject`.`project_id`;' \n    }\n```\n\nIs there another way to wrap the second where condition in order to end up in the right place (inside the join ON condition for instance would be fine for me)\n",
    "comments_url": "https://api.github.com/repos/sequelize/sequelize/issues/1340/comments",
    "author": "nichdiekuh",
    "comments": [
      {
        "user": "mickhansen",
        "created_at": "2014-02-04T10:07:34Z",
        "body": "`ìnclude: [{model: Project, where: {customer_id: value}}]`\n\nnot sure if `or()` works in `include.where` - but test it out and if it doesn't please open a new issue requesting that feature :).\n"
      },
      {
        "user": "mickhansen",
        "created_at": "2014-02-04T10:41:14Z",
        "body": "Closing in favor of feature request #1341\n"
      }
    ]
  },
  {
    "number": 1336,
    "title": "Guidance on error handling",
    "created_at": "2014-02-03T05:59:51Z",
    "closed_at": "2014-02-03T18:58:57Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/sequelize/sequelize/issues/1336",
    "body": "I have a one-to-many relationship: 1 order has many items. I am trying to write a function that creates an item for a given orderId (see below). This function has 3 sequential steps: 1) find the order, 2) create the item, 3) connect the item to the order. If any of the steps fails, I must return an error. That's why my function takes a `successCallback` and an `errorCallback`.\n\nIs there a more elegant way to write this function? Ideally, I would like to avoid the 3 nested levels. Also, if possible, I would like to avoid sending the two callback functions as parameters.\n\n```\nexports.createItem = function(orderId, itemInput, successCallback, errorCallback) {\n\n    domain.Order.find({where: {id: orderId}})\n        .success(function(order) {\n            domain.Item.create(itemInput)\n                .success(function(item) {\n                    order.addItem(item)\n                        .success(function() {\n                            successCallback(item);\n                        })\n                        .error(function(err) {\n                            errorCallback(err);\n                        })\n                })\n                .error(function(err) {\n                    errorCallback(err);\n                })\n        })\n        .error(function(err) {\n            errorCallback(err);\n        })\n}\n```\n",
    "comments_url": "https://api.github.com/repos/sequelize/sequelize/issues/1336/comments",
    "author": "nareshbhatia",
    "comments": [
      {
        "user": "mickhansen",
        "created_at": "2014-02-03T06:16:41Z",
        "body": "Ideal case for promises.\nSomething like this should work:\n\n``` js\nreturn domain.Order.find({where: {id: orderId}}).then(function (order) {\n  return domain.Item.create(itemInput).then(function (item) {\n    return order.addItem(item);\n  });\n}).then(function (item) {\n\n}, function (error) {\n\n});\n```\n"
      },
      {
        "user": "nareshbhatia",
        "created_at": "2014-02-03T18:58:57Z",
        "body": "This is perfect! Thanks @mickhansen, as always!\n"
      }
    ]
  },
  {
    "number": 1121,
    "title": "Non-persistent objects not validating",
    "created_at": "2013-12-10T13:49:28Z",
    "closed_at": "2013-12-25T17:17:35Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/sequelize/sequelize/issues/1121",
    "body": "It seems the non-persistent objects can be created by providing non-valid attributes. I have tested with persistent objects and the validation works.\n\nCan you shed more light on this ?\n\nOr some sample code to help me out.\n\nThe following is not working for me.\n\n``` js\n // build non-persistent user object\nvar user = User.build({\n   email: [invalid email],\n   password: [invalid password]\n});\n\nuser.validate().error(function(errors){\n   console.log(errors);\n});\n```\n\nPlease help :( ...\n\n**edit by janmeier** code formatting\n",
    "comments_url": "https://api.github.com/repos/sequelize/sequelize/issues/1121/comments",
    "author": "ghost",
    "comments": [
      {
        "user": "janmeier",
        "created_at": "2013-12-10T13:53:31Z",
        "body": "What do you define as an invalid email / password\n\nPlease show your schema definition / validations\n"
      },
      {
        "user": "ghost",
        "created_at": "2013-12-10T16:25:53Z",
        "body": "Well ... as I said they are working on persistent objects upon saving them to DB so I am sure everything is good and in place.\n\nStill, here is a sample email field in one of my models for you just in case you can help me on this:\n\n......,\nemail: {\n.......,\nvalidate: {\n   isEmail: {\n      args: true,\n      msg: 'Please enter a valid email address'\n   }\n}\n\nDoes this clarify things a bit ? What could be the problem ?\n"
      },
      {
        "user": "janmeier",
        "created_at": "2013-12-10T16:33:56Z",
        "body": "Try doing \n\n``` js\nuser.validate().success(function(errors){\n   console.log(errors);\n});\n\n// or \nuser.validate().done(function(err, errors){\n   console.log(errors);\n});\n```\n\nI agree, this is not totally logical - the err argument / error callback is only triggered if something goes really wrong - e.g. an async validator that queries the db makes an SQL syntax error or something like that.\n\nThis should probably be more clear in the docs...\n"
      }
    ]
  },
  {
    "number": 1102,
    "title": "many to one question?",
    "created_at": "2013-12-04T12:47:34Z",
    "closed_at": "2013-12-04T21:22:11Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/sequelize/sequelize/issues/1102",
    "body": "Is this the same?\n\nProject.hasMany(User)\nUser.belongsTo(Project)\n\nI can establish someone or I have to establish all?\n",
    "comments_url": "https://api.github.com/repos/sequelize/sequelize/issues/1102/comments",
    "author": "carlituxman",
    "comments": [
      {
        "user": "janmeier",
        "created_at": "2013-12-04T18:25:48Z",
        "body": "When you do `User.belongsTo(Project)` you are creating the relation enabling you to call `user.getProject()`. `Project.hasMany(User)` links the association the other way, enabling you to call `project.getUsers()`. If you only did one of those two, e.g. if you only did `User.belongsTo(Project)` you would be able to retrieve the project that a user is currently working on, but not all users working on a project\n\nSo yes, in short, they create the same fields, but creates the relation from two \"different perspectives\" so to say\n"
      },
      {
        "user": "carlituxman",
        "created_at": "2013-12-04T20:46:30Z",
        "body": "Perfect! \nMany thanks\n"
      }
    ]
  },
  {
    "number": 1075,
    "title": "Delete associated records",
    "created_at": "2013-11-25T10:50:27Z",
    "closed_at": "2013-11-25T12:14:56Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/sequelize/sequelize/issues/1075",
    "body": "Hi,\n\nI have this setup:\n\n``` js\nvar Restriction = sequelize.define('restriction', {\n    id: Sequelize.INTEGER,\n    device: Sequelize.INTEGER,\n    user: Sequelize.INTEGER\n});\n\nvar User = sequelize.define('user', {\n    id: Sequelize.INTEGER,\n    name: Sequelize.STRING\n});\n\nUser.hasMany(Restriction, {as: 'Restrictions', foreignKey: 'user', primaryKey: 'id'});\n```\n\nThis means that each User has many Restrictions. When I fetch a User, I call user.getRestrictions() and it return the restrictions associated to the user. Fine.\nBut when I call user.removeRestriction() I was expecting that restriction to be deleted from the database, but instead the foreign key was set to NULL.\n\nIs there a way to actually remove that restriction instead of setting the FK to NULL?\nThanks!\n",
    "comments_url": "https://api.github.com/repos/sequelize/sequelize/issues/1075/comments",
    "author": "fonini",
    "comments": [
      {
        "user": "janmeier",
        "created_at": "2013-11-25T11:42:22Z",
        "body": "A restriction is an actual entity, not an entity in a junction table, so removing a restriction entry when you remove the asocation from user is not a sane default behaviour.If you want it, you can call `restriction.destroy();`\n"
      },
      {
        "user": "fonini",
        "created_at": "2013-11-25T11:52:38Z",
        "body": "Thanks.\nI just wanted to make my code more clean, because when I update a User, I have to remove all the restrictions, then write the new ones and associate then with the User.\n"
      },
      {
        "user": "janmeier",
        "created_at": "2013-11-25T12:14:56Z",
        "body": "Cool, closing this issue then. Please re-open if you have further questions.\n"
      }
    ]
  },
  {
    "number": 1035,
    "title": "Return Date values in UTC Timezone",
    "created_at": "2013-11-04T00:08:35Z",
    "closed_at": "2013-11-05T08:57:53Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/sequelize/sequelize/issues/1035",
    "body": "The date values are being saved in UTC format but when retrieved from the DB they are being converted to the local timezone.\n\nEx:\nSaved DATE in the DB: `2013-11-02 00:00:00`\nReturned date from Model.date: `Sat Nov 01 2013 22:00:00 GMT-0200 (BRST)`\n\nI tried to find where the date values are parsed but found nothing, if anyone can point me where it is i can try to fix it.\n",
    "comments_url": "https://api.github.com/repos/sequelize/sequelize/issues/1035/comments",
    "author": "jonhkr",
    "comments": [
      {
        "user": "janmeier",
        "created_at": "2013-11-04T09:32:51Z",
        "body": "I originally rewrote the date logic to UTC, so I would like to elaborate on why I think this is the correct behavour. Mind you I haven't looked at the code lately, so im just speaking from memory :).\n\nThe two dates you posted represent the same point in time:\n\n``` js\nd1 = new Date('2013-11-02 00:00:00Z')\nSat Nov 02 2013 01:00:00 GMT+0100 (W. Europe Standard Time)\nd2 = new Date('Sat Nov 01 2013 22:00:00 GMT-0200 (BRST)')\nSat Nov 02 2013 01:00:00 GMT+0100 (W. Europe Standard Time)\n\nd1.getTime()\n1383350400000\nd2.getTime()\n1383350400000\nd1.getTime() === d2.getTime()\ntrue\n```\n\nModel.date is a javascript Date object, and those are always in the local timezone. If you want to the get the UTC time of a Date, you will have to write custom logic using `.getUTCDate()` etc. When you pass a date object to sequelize it is converted to UTC before it is saved, not matter what local time zone it has. When you retrieve a date object is created, representing the UTC timestamp in the local timezone of your server. This means that even if you save a date from a server in one timezone and retrieve it from a server in another zone, the date objects will represent the _same point in time_ (their timestamps are equal), even though their `.toString()` representation will be different.\n\nIn short you should not take extra care to convert your dates to UTC before passing them to sequelize, sequelize will handle the conversion.\n"
      },
      {
        "user": "jonhkr",
        "created_at": "2013-11-04T17:16:45Z",
        "body": "So, I solved my problem by converting the date value to UTC again using a model getter method.\nThanks @janmeier for clarifying it.\n"
      },
      {
        "user": "janmeier",
        "created_at": "2013-11-05T08:58:00Z",
        "body": "You're welcome :)\n"
      },
      {
        "user": "tomwang1013",
        "created_at": "2014-11-19T11:03:15Z",
        "body": "@janmeier I think the problem exists. \n`d1 = new Date('2013-11-02 00:00:00Z')`\nYou added `Z` which change the time making it different from the one in mysql.\n"
      }
    ]
  },
  {
    "number": 990,
    "title": "Consuming a DB created for Rails app",
    "created_at": "2013-10-14T06:39:22Z",
    "closed_at": "2013-10-16T10:10:45Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/sequelize/sequelize/issues/990",
    "body": "I have decided to move some functionality of an existing Rails API into Node.js. I picked up Sequelize as an ORM mainly because it seemed like it is the most feature rich out of the many others.\n\nSo I started mapping my models from Rails in Sequelize (since I didn`t need all the columns I only mapped the necessary ones) and I ended up with a 1-n relationship that is done using :through in Rails. So I created the following ralationship:\n\n```\nHole.hasMany(TrackingGroup, {foreignKey: 'hole_id', joinTableName:'holes_tracking_groups', underscored: true, useJunctionTable: true}); \n\nTrackingGroup.belongsTo(Hole, {foreignKey: 'tracking_group_id', joinTableName: 'holes_tracking_groups'});\n```\n\nThe idea is that when I get all the tracking groups for a hole I will have a query in the holes_tracking_groups where the hole_id = \"something\" but instead I was having a query in the tracking_group table (the one that has all the tracking groups). Or in other words the specified joinTableName was not considered at all.\n",
    "comments_url": "https://api.github.com/repos/sequelize/sequelize/issues/990/comments",
    "author": "marval",
    "comments": [
      {
        "user": "janmeier",
        "created_at": "2013-10-14T20:09:02Z",
        "body": "Junction tables of join tables are only used for many to many relations, so in order to fit your current data model to sequelize you will have to do:\n\n``` js\nHole.hasMany(TrackingGroup, {foreignKey: 'hole_id', joinTableName:'holes_tracking_groups', underscored: true}); \nTrackingGroup.hasMany(Hole, {foreignKey: 'tracking_group_id', joinTableName: 'holes_tracking_groups'});\n```\n\nBy the way, useJunctionTable is only used if you have a self-reference but don't need a junction table, so I've removed that as well ;)\n"
      },
      {
        "user": "marval",
        "created_at": "2013-10-16T10:10:45Z",
        "body": "Thanks for the response. It doesn`t even make sense to have the junction table and it is actually a many-to-many relationship. I guess I wasn`t paying that much attention at that late hour :)\n"
      }
    ]
  },
  {
    "number": 923,
    "title": "belongs-to setter syncs even if syncOnAssociation is false",
    "created_at": "2013-09-21T00:34:40Z",
    "closed_at": "2013-09-22T15:51:41Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/sequelize/sequelize/issues/923",
    "body": "Currently BelongsTo.prototype.injectSetter always calls this.save at the end of the function. Isn't something like this more appropriate?\n\n```\n// passes the changed field to save, so only that field get updated.\nif (this.options.syncOnAssociation) {\n    return this.save([ self.identifier ], {allowNull: [self.identifier]})\n}      \nelse {\n    return this\n}\n```\n",
    "comments_url": "https://api.github.com/repos/sequelize/sequelize/issues/923/comments",
    "author": "omdathetkan",
    "comments": [
      {
        "user": "janmeier",
        "created_at": "2013-09-22T15:51:41Z",
        "body": "The code that you are reffering to is save, which means insert into the database. The full snippet:\n\n``` js\n obj[accessor] = function(associatedObject) {\n      var primaryKeys = !!associatedObject && !!associatedObject.daoFactory ? Object.keys(associatedObject.daoFactory.primaryKeys) : []\n        , primaryKey = primaryKeys.length === 1 ? primaryKeys[0] : 'id'\n\n      this[self.identifier] = associatedObject ? associatedObject[primaryKey] : null\n\n      // passes the changed field to save, so only that field get updated.\n      return this.save([ self.identifier ], {allowNull: [self.identifier]})\n    }\n```\n\nThis is the function that is called when you call setModel, so that should definitely save the data\n"
      },
      {
        "user": "omdathetkan",
        "created_at": "2013-09-22T16:12:05Z",
        "body": "Thanks for the reply. I guess I'm doing something wrong then. \nMaybe this is not the right place to discuss it, but here is my problem:\n\n```\nvar unit = models.Unit.build({\n    foo: 'bar'\n    something: 'something'\n});                                         \nbp.setParent1(parent1);\nbp.setParent2(parent2);\nbp.save();\n```\n\nparent1_id and parent2_id are both NOT NULL values. Whenever I set the first parent it tries to save the instance causing an error since the second one has not been set yet.\n\nShould I be using a different method to assign the relations?\n"
      },
      {
        "user": "janmeier",
        "created_at": "2013-09-22T16:15:56Z",
        "body": "Synconassociations means sync the model / schema / table structure when an association is made between two schemas, not when an assocation is made between two models.\n\nWhen you have special requirements that several fields should be set, you will have to do most of the work yourself. Something like:\n\n``` js\nbp.parent1_id = parent1.id\nbp.parent2_id = parent2.id\n\nbp.save()\n```\n\nThere is definitely a usecase for being able to make an association without saving to the DB, feel free to create a feature request for it, but it would be a major change, so it would take some time to implement\n"
      }
    ]
  },
  {
    "number": 731,
    "title": "Sequelize 2.0.0-alpha2 auto add table name + 's'",
    "created_at": "2013-06-27T00:06:56Z",
    "closed_at": "2013-06-27T13:50:07Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/sequelize/sequelize/issues/731",
    "body": "Using sqlite3\nI have table: wavall\nand I define model:\nexports.Sound = sqlite.define('wavall', {\n    rowid: Sequelize.INTEGER,\n    name: Sequelize.STRING,\n    description: Sequelize.STRING,\n    folder: Sequelize.STRING,\n    size: Sequelize.STRING\n});\n\nIt throw error no such table wavalls !!!!!!!!!!! why? I define table name wavall not wavalls!\n",
    "comments_url": "https://api.github.com/repos/sequelize/sequelize/issues/731/comments",
    "author": "youxiachai",
    "comments": [
      {
        "user": "janmeier",
        "created_at": "2013-06-27T13:50:05Z",
        "body": "Use the freezeTableName options. You can do either:\n\n``` js\nnew Sequelize('database', 'username', 'password', {\n  define: {\n    freezeTableName: true\n  }\n});\n```\n\nor \n\n``` js\nsequelize.define('wavall', {\n  columns\n}, {\n  freezeTableName: true\n});\n```\n"
      },
      {
        "user": "jiananshi",
        "created_at": "2014-09-29T08:19:05Z",
        "body": "this is helpful, which puzzles me for a while\n"
      },
      {
        "user": "zhou-yg",
        "created_at": "2016-06-14T07:36:17Z",
        "body": "good.\n"
      },
      {
        "user": "santosh9991",
        "created_at": "2018-05-04T22:33:21Z",
        "body": "I get the same error, resolved it by adding freezeTableName: true. But, why do we get that error. ?\r\n"
      }
    ]
  },
  {
    "number": 696,
    "title": "Is there a way to put id, foreign key columns to top of the table?",
    "created_at": "2013-06-13T05:48:32Z",
    "closed_at": "2014-05-10T16:58:26Z",
    "labels": [
      "type: feature",
      "question"
    ],
    "url": "https://github.com/sequelize/sequelize/issues/696",
    "body": "Currently sequelize.sync() creates id column before createdAt and foreign key columns at the end. Is it possible to put them to top or any way to specify AFTER? Thanks!\n",
    "comments_url": "https://api.github.com/repos/sequelize/sequelize/issues/696/comments",
    "author": "amitava82",
    "comments": [
      {
        "user": "sdepold",
        "created_at": "2013-06-13T06:12:26Z",
        "body": "nope :-/ thats a \"bug\"\n"
      },
      {
        "user": "madhurjain",
        "created_at": "2013-12-15T08:42:59Z",
        "body": "As a work around, define an id column explicitly at the top of your model like so\n\n`id: { type: DataTypes.INTEGER, primaryKey: true, allowNull: false, autoIncrement: true }`\n"
      },
      {
        "user": "mickhansen",
        "created_at": "2014-05-10T16:58:26Z",
        "body": "This should be default as of the latest releases.\n"
      }
    ]
  },
  {
    "number": 691,
    "title": "Unicode Datatype",
    "created_at": "2013-06-12T07:18:43Z",
    "closed_at": "2013-06-13T05:41:21Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/sequelize/sequelize/issues/691",
    "body": "Hi, If I define a column with Sequelize.STRING, can it store unicode character? If not, how would I go about doing it? Thanks.\n",
    "comments_url": "https://api.github.com/repos/sequelize/sequelize/issues/691/comments",
    "author": "amitava82",
    "comments": [
      {
        "user": "janmeier",
        "created_at": "2013-06-12T09:26:22Z",
        "body": "If you do no specify a charset when creating your table or in the define options or your sequelize options, the table will be created with the default charset for the DB.\n\nThere are several things you can do to support unicode:\n\nTable level:\n\n``` js\nsequlize.define('table', {\n\n}, {\n  charset: 'utf8',\n  collate: 'utf8_unicode_ci'\n})\n```\n\nColumn level:\n\n``` js\nsequelize.define('table', {\n  column: Sequelize.STRING + ' CHARSET utf8 COLLATE utf8_unicode_ci'\n})\n```\n\nI just noticed that the collate option is not actually supported yet - push comming up\n"
      },
      {
        "user": "amitava82",
        "created_at": "2013-06-13T05:41:21Z",
        "body": "Thanks! May be we could put it into doc.\n"
      },
      {
        "user": "janmeier",
        "created_at": "2013-06-13T08:14:59Z",
        "body": "The table level definition is already in the docs. Perhaps it should be noted somewhere in the docs that you can specify the type as a string yourself..\n"
      },
      {
        "user": "rafis",
        "created_at": "2016-10-06T06:55:09Z",
        "body": "Converting type from DataType class to String causes different processing in Sequelize internals. If type is String it considered as strict instruction to use that type as is and it looks non-native to Sequelize.\n\n```\n{\n    type: 'VARCHAR(255)',\n    allowNull: false,\n    Model: table,\n    fieldName: 'column',\n    _modelAttribute: true,\n    field: 'column'\n}\n```\n\nIf type is native DataType:\n\n```\n{\n    type: {\n        options: {\n            length: 255,\n            binary: undefined\n        },\n        _binary: undefined,\n        _length: 255\n    },\n    allowNull: true,\n    defaultValue: 0,\n    Model: table,\n    fieldName: 'column',\n    _modelAttribute: true,\n    field: 'column'\n}\n```\n\nIt has valuable `_length` attribute which I need. Can you please add to column definition ability to specify `charset` and `collate` like it has been done in table params:\n\n```\nslug: {\n    type: DataTypes.STRING(255),\n    charset: 'latin1',\n    collate: 'latin1_bin',\n    allowNull: false\n}\n```\n"
      },
      {
        "user": "alfaproject",
        "created_at": "2018-04-14T09:59:22Z",
        "body": "@rafis was that ever implemented? I can't find it anywhere. ):"
      },
      {
        "user": "armellarcier",
        "created_at": "2018-09-04T06:58:01Z",
        "body": "+1"
      }
    ]
  },
  {
    "number": 667,
    "title": "Problem with Stringify and  associations",
    "created_at": "2013-05-31T21:19:33Z",
    "closed_at": "2013-07-11T12:18:48Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/sequelize/sequelize/issues/667",
    "body": "Hi. \n\nWith the following scenario:\n\nUser.hasMany(Rol)\n\nWhen I create a User (User.build()) the rols property is not created. Even so, If I create it my self: \nvar user = User.build();\nuser.rols = [];\n\nWhen I call JSON.stringify() on that objetc the rols array is not passes to the string.\n\nAre there any workarrounds?\n\nThanks.\n",
    "comments_url": "https://api.github.com/repos/sequelize/sequelize/issues/667/comments",
    "author": "maxsosa",
    "comments": [
      {
        "user": "janmeier",
        "created_at": "2013-06-13T15:55:37Z",
        "body": "The associated data is only added to the JSON output when eagerly loaded associations are present (i.e. when the data is loaded using `include`.\n\nIn your case, if you also want a rols array in user i would suggest overwriting toJSON:\n\n``` js\nsequelize.define('user', {\n\n}, [\n  instanceMethods: {\n    toJSON: function () {\n       var values = this.values\n\n      if (!Array.isArray(values.rols)) {\n        values.rols = []\n      }\n\n      return values\n    }\n  }\n})\n```\n"
      }
    ]
  },
  {
    "number": 638,
    "title": "Postgresql find() never reached .error(function(error){})",
    "created_at": "2013-05-21T23:02:35Z",
    "closed_at": "2013-05-22T09:21:19Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/sequelize/sequelize/issues/638",
    "body": "I have something strange happening. I issue this code:\n\n```\nmodels.User.find({where: {userid: req.params.uid, token: req.params.token}}).success(function(user) {\n            console.log(user);\n            console.log(user.token_sent);\n            res.send('found it!');\n        }).failure(function(error) {\n            res.send(500, error);\n        });\n```\n\nWhen the User is not in the database, I recieve an error instead of the error being passed to the error callback. Instead, console.log(user) returns null. And console.log(user.token_sent) breaks.\n\n```\nExecuting: SELECT * FROM \"Users\" WHERE \"userid\"='2' AND \"token\"='ddd580a83805f66b700c21dd6a2b54d8658a58b4978e9a18' LIMIT 1;\nnull\n\n/home/user/nodetest/admin/node_modules/pg/lib/client.js:160\n      throw error;\n            ^\nTypeError: Cannot read property 'token_sent' of null\n    at null.<anonymous> (/home/user/nodetest/admin/routes/index.js:65:29)\n    at EventEmitter.emit (events.js:95:17)\n    at null.<anonymous> (/home/user/nodetest/admin/node_modules/sequelize/lib/query-interface.js:343:17)\n    at EventEmitter.emit (events.js:117:20)\n    at module.exports.onSuccess (/home/user/nodetest/admin/node_modules/sequelize/lib/dialects/postgres/query.js:106:14)\n    at null.<anonymous> (/home/user/nodetest/admin/node_modules/sequelize/lib/dialects/postgres/query.js:47:17)\n    at EventEmitter.emit (events.js:95:17)\n    at Query.handleReadyForQuery (/home/user/nodetest/admin/node_modules/pg/lib/query.js:101:8)\n    at null.<anonymous> (/home/user/nodetest/admin/node_modules/pg/lib/client.js:151:26)\n    at EventEmitter.emit (events.js:117:20)\n```\n\nAm I doing something wrong?\n",
    "comments_url": "https://api.github.com/repos/sequelize/sequelize/issues/638/comments",
    "author": "milovanderlinden",
    "comments": [
      {
        "user": "janmeier",
        "created_at": "2013-05-22T09:03:40Z",
        "body": "Errors are only triggered when something goes seriously wrong - a syntax error in the SQL and things like that. When the user is not found the query itself was successful, so the success callback is triggered. But since nothing matched your query, null is returned. And the reason your code breaks is that you are trying to access a property on something that is null. You success handler should be something like this:\n\n``` js\nif (user) {\n    console.log(user);\n    console.log(user.token_sent);\n    res.send('found it!');\n} else {\n    res.send(\"nothing found\");\n}\n```\n"
      },
      {
        "user": "milovanderlinden",
        "created_at": "2013-05-22T09:21:19Z",
        "body": "Thank you for the answer, perfectly clear!\n"
      }
    ]
  },
  {
    "number": 549,
    "title": "Transient property",
    "created_at": "2013-04-16T03:24:29Z",
    "closed_at": "2013-07-11T12:18:09Z",
    "labels": [
      "type: feature",
      "question"
    ],
    "url": "https://github.com/sequelize/sequelize/issues/549",
    "body": "I want to add additional properties to my object, before I return it to the client. At they moment they are omitted from the object when it is serialized. Is there are way to add a transient property?\n",
    "comments_url": "https://api.github.com/repos/sequelize/sequelize/issues/549/comments",
    "author": "p15martin",
    "comments": [
      {
        "user": "janmeier",
        "created_at": "2013-04-16T07:08:18Z",
        "body": "At the moment sequelize does not support transient properties. By default `toJSON` just returns the attributes of the model, which are saved in `.values`\n\nYou can however just overwrite the toJSON method on instances of a DAO, like this:\n\n``` javascript\nvar User = sequelize.define('user', {\n  id: Sequelize.INTEGER,\n  name: Sequelize.STRING\n}, {\n  instanceMethods: {\n    toJSON: function () {\n      var json = this.values;\n\n      json.type= 'user';\n      return json;\n    }\n  }\n});\n```\n\nBuild a user and log the output from toJSON\n\n``` javascript\nvar u = User.build({\n  id: 42,\n  name: 'John Doe'\n});\n\nconsole.log(u.toJSON());\n\n{\n  id: 42,\n  name: 'John Doe',\n  createdAt: Tue Apr 16 2013 09:01:39 GMT+0200 (Rom, sommertid),\n  updatedAt: Tue Apr 16 2013 09:01:39 GMT+0200 (Rom, sommertid),\n  type: 'user'\n}\n```\n"
      },
      {
        "user": "durango",
        "created_at": "2013-05-15T00:53:22Z",
        "body": "@janmeier is this something we should build or is there no real world application? I'm pretty sure it's been asked a few times, and by a friend of mine about two weeks ago.\n"
      },
      {
        "user": "janmeier",
        "created_at": "2013-05-15T09:05:56Z",
        "body": "I would say they are nice to have, but not really needed, since overwriting toJSON is relatively easy. Accessing this.values might seem a bit hacky to some though ...\n\nIt should be pretty easy to add though. I'm thinking the API could be something like: \n\n``` js\nvar User = sequelize.define('user', {\n  id: Sequelize.INTEGER,\n  name: Sequelize.STRING\n}, {\n  instanceMethods: {\n\n  },\n  transient: {\n    type: 'user'\n  }\n});\n```\n\nThat way it becomes totally clear that the properties are separated from the actual table properties. Then we would need to add the transient properties to the DAO prototype, and merge them with values in toJSON.\n"
      },
      {
        "user": "durango",
        "created_at": "2013-05-15T14:38:47Z",
        "body": "you meant transient: { user: {type: Sequelize.INTEGER, defaultValue: 'hello'} } right? Otherwise it just seems weird (what is user type?). The only problem I have with the toJSON solution, is that you'd have to retype everything over-and-over again after each call pretty much.\n\nAlso, what about being able to do transient: { userToken: {type: Sequelize.STRING, value: function() { return this.user_id + this.user_name; } } and whenever the object gets an update / values change / reload, then Model.userToken reflects that automagically?\n"
      },
      {
        "user": "janmeier",
        "created_at": "2013-05-15T14:45:19Z",
        "body": "Since transient properties are never saved I don't really think there is any reason to specify data type \n\nBeing able to use functions sounds like a very nice idea! We could then define the passed function as a getter on the DAO, so you could both do:\n\n``` js\nUser.find().success(function (user) {\n  user.userToken // 42janmeier\n\n  user.toJSON().userToken // 42janmeier\n})\n```\n\nThe reason I want to use getters that it does not make sense in my mind to define transient properties where some are functions and some are values. i.e., I want to avoid\n\n``` js\nuser.userToken() // 42janmeier\n```\n\nDoes it seem confusing that `.userToken` would actually call a function?\n"
      },
      {
        "user": "durango",
        "created_at": "2013-05-15T14:56:30Z",
        "body": ":+1: this is starting to shape up nicely now. The only reason why I mentioned the Sequelize.TYPE was mostly for when we return the JSON (since booleans, ints, and nulls are OK values). So, when are you going to get started on this? ;) haha\n"
      },
      {
        "user": "iamjochem",
        "created_at": "2013-05-15T15:13:16Z",
        "body": "my PR #538 is effectively capable of doing this 'transient' thing (it is a matter of defining custom property getter functions) ... please have look.\n"
      }
    ]
  },
  {
    "number": 519,
    "title": "Load from JSON object",
    "created_at": "2013-04-06T19:44:31Z",
    "closed_at": "2013-04-08T18:01:39Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/sequelize/sequelize/issues/519",
    "body": "Hello, I know any object from the model can be stringified. But there are any method to create an Sequelize object from a plain JSON that previously was a model object?\n\nThanks.\n",
    "comments_url": "https://api.github.com/repos/sequelize/sequelize/issues/519/comments",
    "author": "maxsosa",
    "comments": [
      {
        "user": "mickhansen",
        "created_at": "2013-04-06T20:50:04Z",
        "body": "Model.build(JSON.parse(jsonString)) - or just Model.build(object)\n"
      },
      {
        "user": "janmeier",
        "created_at": "2013-04-08T08:26:56Z",
        "body": "You might want to pass in `isNewRecord = false` as well\n\n`Model.build(object, { isNewRecord : false ))`\n\n_edit:_ fat fingers..\n"
      },
      {
        "user": "maxsosa",
        "created_at": "2013-04-08T18:01:39Z",
        "body": "Thank you! That's exactly wat I needed.\n\nRegards.\n"
      }
    ]
  },
  {
    "number": 505,
    "title": "Any sign of 1.6.0 final?",
    "created_at": "2013-04-01T15:13:43Z",
    "closed_at": "2013-04-02T10:22:12Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/sequelize/sequelize/issues/505",
    "body": "`npm info sequelize` shows:\n\n```\n     '1.5.0': '2012-08-10T06:04:03.071Z',\n     '1.6.0-alpha-1': '2012-09-30T18:37:57.931Z',\n     '1.6.0-alpha-2': '2012-10-16T05:40:44.041Z',\n     '1.6.0-alpha-3': '2012-11-02T19:32:25.957Z',\n     '1.6.0-beta-1': '2012-11-15T20:40:18.405Z',\n     '1.6.0-beta-2': '2012-11-22T20:55:43.560Z',\n     '1.6.0-beta-3': '2012-11-23T19:06:23.595Z',\n     '1.6.0-beta4': '2012-11-25T18:55:01.486Z' },\n  version: '1.6.0-beta4',\n```\n\nAny reason it's been 4 months since the last beta? I can obviously set to pull from HEAD if there's an issue, but it would be great to go ahead and do the final 1.6.0 release, as a lot of useful fixes are piling up.\n\nThanks in advance.\n",
    "comments_url": "https://api.github.com/repos/sequelize/sequelize/issues/505/comments",
    "author": "dankohn",
    "comments": [
      {
        "user": "robraux",
        "created_at": "2013-04-02T04:18:39Z",
        "body": "+1 -- currently running off a fork, tagged from head. Looking forward to 1.6 final ASAP.\n"
      },
      {
        "user": "mickhansen",
        "created_at": "2013-04-02T07:28:14Z",
        "body": "It should be out shortly, the final touches are being done to documentation - then we should be ready for a 1.6.0 release.\n"
      },
      {
        "user": "sdepold",
        "created_at": "2013-04-02T07:54:02Z",
        "body": "will be released today. I'm actually only trying to find out if I can do some require.js optimization to the documentation page and afterwards you'll get a super duper new version\n"
      },
      {
        "user": "sdepold",
        "created_at": "2013-04-02T10:22:12Z",
        "body": "page is updated + 1.6.0 is out\n"
      },
      {
        "user": "dankohn",
        "created_at": "2013-04-02T13:06:05Z",
        "body": "Wow, I don't think even Oracle Enterprise support provides sub-24 hour turnaround like that. ;-) Thanks!\n"
      },
      {
        "user": "robraux",
        "created_at": "2013-04-02T13:35:16Z",
        "body": "Fantastic news, going to update and run the test suite now! Just wanted to thank you for all the work guys!\n"
      },
      {
        "user": "sdepold",
        "created_at": "2013-04-02T18:52:37Z",
        "body": ":)\n"
      }
    ]
  },
  {
    "number": 484,
    "title": "Problem with IDs when creating new instance",
    "created_at": "2013-03-11T13:16:53Z",
    "closed_at": "2013-03-12T08:42:54Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/sequelize/sequelize/issues/484",
    "body": "My model looks like: \n\n```\nexports.Language = sequelize.define('Language', {\n  title: Sequelize.STRING,\n  acronym: {type: Sequelize.ENUM,\n            values: ['en', 'de']}\n});\n```\n\nwhen I know create the instance in that way:\n\n```\n  MODELS.Language\n    .create({title: 'Deutsch',\n             acronym: 'de'});\n\n  MODELS.Language\n    .create({title: 'Englisch',\n            acronym: 'en'});\n```\n\nit results in the following query:\n\n```\nExecuting: INSERT INTO `Languages` (`title`,`acronym`,`id`,`createdAt`,`updatedAt`) VALUES ('Deutsch','de',NULL,'2013-03-11 14:08:42','2013-03-11 14:08:42');\nExecuting: INSERT INTO `Languages` (`title`,`acronym`,`id`,`createdAt`,`updatedAt`) VALUES ('Englisch','en',NULL,'2013-03-11 14:08:42','2013-03-11 14:08:42');\n```\n\nThe id-field is empty. Sqllite accepts it, but in mysql its rejected. Where is my error - shouldn't sqllite also reject this?\n",
    "comments_url": "https://api.github.com/repos/sequelize/sequelize/issues/484/comments",
    "author": "gu-stav",
    "comments": [
      {
        "user": "ricardograca",
        "created_at": "2013-03-11T13:23:13Z",
        "body": "Nope. Null id means it's a new record. There's something wrong with your id field in the database. It should have the ability to auto-increment so that when it's value is Null the database creates a new record with the next available id. How did you create the tables?\n"
      },
      {
        "user": "gu-stav",
        "created_at": "2013-03-11T13:29:00Z",
        "body": "It's the initial setup, so I do it by the sequqlize.sync():\n\n```\nexports._sync = function( addDefaultData ) {\n  sequelize.sync({force: true})\n  .error(function( err ) {\n    console.error( err );\n  })\n  .success(function() {\n    if ( addDefaultData ) {\n      require('./default_data.js')( exports );\n    }\n  });\n};\n```\n\ndefault_data.js has the\n\n```\nMODELS.Language.create()\n```\n\ncall.\n\nThe table looks like this:\n\n```\nExecuting: CREATE TABLE IF NOT EXISTS `Languages` (`title` VARCHAR(255), `acronym` , `id` INTEGER PRIMARY KEY AUTOINCREMENT, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);\n```\n"
      },
      {
        "user": "janmeier",
        "created_at": "2013-03-11T13:37:38Z",
        "body": "The query is correct, as @ricardograca said, the database should handle assigning the IDs. \n\n`CREATE TABLE IF NOT EXISTS` - does the table already exist?\n"
      },
      {
        "user": "gu-stav",
        "created_at": "2013-03-11T13:50:54Z",
        "body": "The table is dropped before - so it doesn't exist...\n"
      },
      {
        "user": "janmeier",
        "created_at": "2013-03-11T14:17:12Z",
        "body": "What exactly do you mean by rejected, what is the SQL error message?\n"
      },
      {
        "user": "gu-stav",
        "created_at": "2013-03-11T14:36:17Z",
        "body": "The problem is, that I cannot really see, where it is coming from. It says, that the error occurs within the CREATE TABLE query, but i don't see any errors there. The complete setup-queries are:\n\n```\nExecuting: CREATE TABLE IF NOT EXISTS `BlogsTranslatedArticles` (`BlogId` INTEGER , `TranslatedArticleId` INTEGER , `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`BlogId`, `TranslatedArticleId`)) ENGINE=InnoDB;\nExecuting: CREATE TABLE IF NOT EXISTS `ImagesPreviews` (`ImageId` INTEGER , `PreviewId` INTEGER , `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`ImageId`, `PreviewId`)) ENGINE=InnoDB;\nExecuting: CREATE TABLE IF NOT EXISTS `BlogsLocations` (`LocationId` INTEGER , `BlogId` INTEGER , `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`LocationId`, `BlogId`)) ENGINE=InnoDB;\nExecuting: DROP TABLE IF EXISTS `Blogs`;\nExecuting: DROP TABLE IF EXISTS `Images`;\nExecuting: DROP TABLE IF EXISTS `Languages`;\nExecuting: DROP TABLE IF EXISTS `ImagePreviews`;\nExecuting: DROP TABLE IF EXISTS `Locations`;\nExecuting: DROP TABLE IF EXISTS `Galleries`;\nExecuting: DROP TABLE IF EXISTS `Users`;\nExecuting: DROP TABLE IF EXISTS `BlogsTranslatedArticles`;\nExecuting: DROP TABLE IF EXISTS `ImagesPreviews`;\nExecuting: DROP TABLE IF EXISTS `BlogsLocations`;\nExecuting: CREATE TABLE IF NOT EXISTS `Blogs` (`title` VARCHAR(255), `text` TEXT, `parsedText` TEXT, `language` INTEGER DEFAULT 1, `url` VARCHAR(255) UNIQUE, `draft` TINYINT(1) DEFAULT true, `locationExpanded` TINYINT(1), `locationType` , `id` INTEGER NOT NULL auto_increment , `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `LanguageId` INTEGER, `UserId` INTEGER, PRIMARY KEY (`id`)) ENGINE=InnoDB;\nExecuting: CREATE TABLE IF NOT EXISTS `Languages` (`title` VARCHAR(255), `acronym` , `id` INTEGER NOT NULL auto_increment , `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;\nExecuting: CREATE TABLE IF NOT EXISTS `ImagePreviews` (`title` VARCHAR(255), `width` INTEGER, `height` INTEGER, `id` INTEGER NOT NULL auto_increment , `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;\nExecuting: CREATE TABLE IF NOT EXISTS `Locations` (`title` VARCHAR(255), `lat` VARCHAR(255), `long` VARCHAR(255), `description` TEXT, `listable` TINYINT(1) DEFAULT true, `id` INTEGER NOT NULL auto_increment , `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `UserId` INTEGER, `LanguageId` INTEGER, PRIMARY KEY (`id`)) ENGINE=InnoDB;\nExecuting: CREATE TABLE IF NOT EXISTS `Galleries` (`title` VARCHAR(255), `description` TEXT, `id` INTEGER NOT NULL auto_increment , `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `LanguageId` INTEGER, `LocationId` INTEGER, `UserId` INTEGER, PRIMARY KEY (`id`)) ENGINE=InnoDB;\nExecuting: CREATE TABLE IF NOT EXISTS `Users` (`name` VARCHAR(255), `email` VARCHAR(255) UNIQUE, `id` INTEGER NOT NULL auto_increment , `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `LanguageId` INTEGER, PRIMARY KEY (`id`)) ENGINE=InnoDB;\nExecuting: CREATE TABLE IF NOT EXISTS `Images` (`title` VARCHAR(255), `description` TEXT, `alt` TEXT, `virtualFile` VARCHAR(255) UNIQUE, `file` VARCHAR(255), `language` INTEGER DEFAULT 1, `id` INTEGER NOT NULL auto_increment , `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `LanguageId` INTEGER, `LocationId` INTEGER, `UserId` INTEGER, PRIMARY KEY (`id`)) ENGINE=InnoDB;\nExecuting: CREATE TABLE IF NOT EXISTS `BlogsTranslatedArticles` (`BlogId` INTEGER , `TranslatedArticleId` INTEGER , `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`BlogId`, `TranslatedArticleId`)) ENGINE=InnoDB;\nExecuting: CREATE TABLE IF NOT EXISTS `ImagesPreviews` (`ImageId` INTEGER , `PreviewId` INTEGER , `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`ImageId`, `PreviewId`)) ENGINE=InnoDB;\nExecuting: CREATE TABLE IF NOT EXISTS `BlogsLocations` (`LocationId` INTEGER , `BlogId` INTEGER , `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`LocationId`, `BlogId`)) ENGINE=InnoDB;\n\nError: Error: ER_PARSE_ERROR: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near ' `id` INTEGER NOT NULL auto_increment , `createdAt` DATETIME NOT NULL, `updatedA' at line 1,\nError: ER_PARSE_ERROR: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near ' `id` INTEGER NOT NULL auto_increment , `createdAt` DATETIME NOT NULL, `updatedA' at line 1\n    at exports._sync (/var/www/nginx/thepage/models.js:104:13)\n    at EventEmitter.emit (events.js:98:17)\n    at module.exports.finish (/var/www/nginx/thepage/node_modules/sequelize/lib/query-chainer.js:137:30)\n    at module.exports.observeEmitter (/var/www/nginx/thepage/node_modules/sequelize/lib/query-chainer.js:110:16)\n    at EventEmitter.emit (events.js:88:17)\n    at module.exports.DAOFactory.sync.Utils.CustomEventEmitter.doQuery (/var/www/nginx/thepage/node_modules/sequelize/lib/dao-factory.js:110:41)\n    at EventEmitter.emit (events.js:88:17)\n    at module.exports.queryAndEmit (/var/www/nginx/thepage/node_modules/sequelize/lib/query-interface.js:267:17)\n    at EventEmitter.emit (events.js:115:20)\n    at module.exports.Query.run (/var/www/nginx/thepage/node_modules/sequelize/lib/dialects/mysql/query.js:32:14)\n```\n\nCan you find the error?\n"
      },
      {
        "user": "ricardograca",
        "created_at": "2013-03-11T14:40:10Z",
        "body": "Funny. locationType on Blogs has no datatype. That's probably the problem.\n"
      },
      {
        "user": "gu-stav",
        "created_at": "2013-03-11T14:49:44Z",
        "body": "Ah, the same with Languages - they both have the datatype ENUM.\n\n```\nexports.Language = sequelize.define('Language', {\n  title: Sequelize.STRING,\n  acronym: {type: Sequelize.ENUM,\n            values: ['en', 'de']}\n});\n```\n"
      },
      {
        "user": "mickhansen",
        "created_at": "2013-03-11T14:51:00Z",
        "body": "What version are you using? ENUM is a recent addition i belive.\n"
      },
      {
        "user": "gu-stav",
        "created_at": "2013-03-11T14:54:35Z",
        "body": "I'm running on the latest rev of the repository - so it should work I think? Even if this is not working properly now, there are these NULL-Ids left. I have no idea why this happens ...\n"
      },
      {
        "user": "gu-stav",
        "created_at": "2013-03-11T22:35:00Z",
        "body": "Ok, I found my mistake with the null-ID-Fields. But I think the missing data-type for ENUMS is a bug.\n"
      },
      {
        "user": "janmeier",
        "created_at": "2013-03-12T08:22:21Z",
        "body": "Would you mind sharing your solution for the NULL-ID fields perhaps :) ?\n\nI just tried the following:\n\n``` javascript\nsequelize.define('Language', {\n  title: Sequelize.STRING,\n  acronym: {type: Sequelize.ENUM,\n            values: ['en', 'de']}\n});\n\nsequelize.sync()\n```\n\nWhich created the table fine, but if you error persists, could you please create a new issue with the minimum amount of code required to reproduce the ENUM issue?\n"
      },
      {
        "user": "gu-stav",
        "created_at": "2013-03-12T08:42:54Z",
        "body": "The solution is so stupid, that i don't want to share it - the day was just too long, so I didn't understand anymore, that inserting NULL into auto_increment fields results in the ID - managed by mysql. Brainfuck.\n\nI'll research, where there ENUM error comes from and accordingly create an issue. Thanks for you help.\n"
      }
    ]
  },
  {
    "number": 474,
    "title": "Do you have support DOUBLE/DOUBLE PRECISION ?",
    "created_at": "2013-03-05T12:47:13Z",
    "closed_at": "2013-03-05T12:59:36Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/sequelize/sequelize/issues/474",
    "body": "",
    "comments_url": "https://api.github.com/repos/sequelize/sequelize/issues/474/comments",
    "author": "killmenot",
    "comments": [
      {
        "user": "janmeier",
        "created_at": "2013-03-05T12:51:39Z",
        "body": "Right now Sequelize supports FLOAT fields out of the box. But you can also specify the type of a row yourself, instead of using the Sequelize types:\n\n``` javascript\nsequelize.define(... , {\n    float: Sequelize.FLOAT\n});\n\nsequelize.define(... , {\n    double: 'DOUBLE'\n});\n```\n"
      },
      {
        "user": "killmenot",
        "created_at": "2013-03-05T12:59:36Z",
        "body": "Cool, it works. Thank you.\n"
      }
    ]
  },
  {
    "number": 459,
    "title": "Order By Associations Fails",
    "created_at": "2013-02-24T20:17:44Z",
    "closed_at": "2013-02-24T21:39:27Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/sequelize/sequelize/issues/459",
    "body": "I have the following associations:\n\n``` javascript\nPlayer.hasMany(Wage);\nWage.belongsTo(Player);\n```\n\nI want to select the players with the highest wages, so I try something like:\n\n``` javascript\n Player.findAll({order: 'wage DESC', limit:10}).success(function(players) {\n```\n\nHowever, I get this error:\n\n```\nevents.js:71\n        throw arguments[1]; // Unhandled 'error' event\n                       ^\nerror: column \"wage\" does not exist\n    at p.parseE (/home/andrew/code/node/soccerwages/node_modules/pg/lib/connection.js:503:11)\n    at p.parseMessage (/home/andrew/code/node/soccerwages/node_modules/pg/lib/connection.js:363:17)\n    at Socket.p.attachListeners (/home/andrew/code/node/soccerwages/node_modules/pg/lib/connection.js:86:20)\n    at Socket.EventEmitter.emit (events.js:96:17)\n    at TCP.onread (net.js:397:14)\n```\n\nIs it possible to sort by associations? If not, can you suggest an alternative workaround so that I can efficiently get the players with the highest wages from my database?\n",
    "comments_url": "https://api.github.com/repos/sequelize/sequelize/issues/459/comments",
    "author": "andrewaustin",
    "comments": [
      {
        "user": "andrewaustin",
        "created_at": "2013-02-24T21:39:27Z",
        "body": "I guess this is a foolish issue since the relationship is a ManyToMany.\n"
      },
      {
        "user": "mickhansen",
        "created_at": "2013-02-25T07:48:38Z",
        "body": "You could run order by with a subquery, it's a bit hacky but the best that can be done currently i believe.\n"
      }
    ]
  },
  {
    "number": 425,
    "title": "Single linked associations wont delete",
    "created_at": "2013-01-28T16:55:37Z",
    "closed_at": "2013-06-20T05:17:58Z",
    "labels": [
      "type: bug",
      "question"
    ],
    "url": "https://github.com/sequelize/sequelize/issues/425",
    "body": "Single linked associations wont be deleted when I want to .destroy() them.\n",
    "comments_url": "https://api.github.com/repos/sequelize/sequelize/issues/425/comments",
    "author": "durango",
    "comments": [
      {
        "user": "janmeier",
        "created_at": "2013-02-23T12:09:35Z",
        "body": "Hi @durango \n\nCould you please post the code that you are using, and possibly also the console output when you try to run it, then I will have a look at this.\n"
      },
      {
        "user": "durango",
        "created_at": "2013-02-23T16:27:36Z",
        "body": "Actually this was a git ticket submitted for Sasha from someone who was having this problem in IRC :( I was just simply posting it as a reminder.\n"
      },
      {
        "user": "janmeier",
        "created_at": "2013-02-25T10:50:00Z",
        "body": "Oh, fingers crossed that @sdepold has mor info then :)\n"
      },
      {
        "user": "sdepold",
        "created_at": "2013-02-25T11:10:06Z",
        "body": "it might be related to a scenario where a daoFactory is connected to another one only via `.belongsTo`. need to check. I'm currently refactoring the eager loading and might find a bug related to this issue. i found some weirdness already but need to dig deeper.\n"
      },
      {
        "user": "sdepold",
        "created_at": "2013-04-02T12:00:26Z",
        "body": "is that fixed with 1.6.0?\n"
      }
    ]
  },
  {
    "number": 419,
    "title": "when define the instanceMethods/classMethods during the instantiation, will replace the the definition in Model define",
    "created_at": "2013-01-18T07:57:24Z",
    "closed_at": "2013-06-20T05:18:36Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/sequelize/sequelize/issues/419",
    "body": "version 〈1.5.0\nfor example, the definition\n\n``` javascript\nvar sequelize = db.sequelize= new Sequelize(dbConf.database, dbConf.user, dbConf.password, {\n   /// blabla......\n     define: { \n          instanceMethods: {method1: function(){}\n     }\n   //// blabla\n```\n\nwill replace the definition \n\n``` javascript\nvar Content = sequelize.define(nep.conf.get('contents', {/*attribute*/}, {\n      instanceMethods: {method2: function(){}\n}\nContent.build().method2 // ==> undefined\nContent.build().method1 //==>  function . exsit\n```\n\nthis is your setting or just a bug? i'm sorry for my poor english\n",
    "comments_url": "https://api.github.com/repos/sequelize/sequelize/issues/419/comments",
    "author": "leeluolee",
    "comments": [
      {
        "user": "janmeier",
        "created_at": "2013-02-23T13:15:16Z",
        "body": "Hi @leeluolee \n\nI think I understand from your question that you are using version 1.5.0 right?\n\nIn that case, you might be right, but in 1.6 you are able to define instanceMethods both on a global and on a per DAO basis as shown in #374 \n"
      },
      {
        "user": "leeluolee",
        "created_at": "2013-02-24T08:08:59Z",
        "body": "@janmeier \nthanks for answering\n"
      },
      {
        "user": "janmeier",
        "created_at": "2013-02-24T14:16:35Z",
        "body": "Does that mean that your issue is solved ;-) ?\n"
      }
    ]
  },
  {
    "number": 317,
    "title": "Column user_id gets created on model without being asked for",
    "created_at": "2012-11-09T07:05:22Z",
    "closed_at": "2013-06-08T10:21:38Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/sequelize/sequelize/issues/317",
    "body": "I have a table 'user' which has a primary key 'id'.\nWhen retrieving a record from my Postgres DB it is returned with an extra column 'user_id'.\n\nThis causes problems when saving back to the DB because the column 'user_id' doesn't exist on the table.\n\nHow do I stop it from creating this column ('user_id;)?\n",
    "comments_url": "https://api.github.com/repos/sequelize/sequelize/issues/317/comments",
    "author": "Gamaroff",
    "comments": [
      {
        "user": "Gamaroff",
        "created_at": "2012-11-09T07:51:11Z",
        "body": "It seems to be resolved if I ensure that I add \n\n```\nomitNull: true,\nsync: { force: false }\n```\n"
      },
      {
        "user": "mickhansen",
        "created_at": "2012-11-09T16:03:40Z",
        "body": "You might want to look at your associations - one of them is probably adding the field for the associations to work\n"
      },
      {
        "user": "Gamaroff",
        "created_at": "2012-11-09T18:57:53Z",
        "body": "Thanks Mick\n"
      },
      {
        "user": "janmeier",
        "created_at": "2013-02-23T13:23:15Z",
        "body": "@Gamaroff did you find out which association added the `user_id`\n\nIf not, feel free to post your code, and I will have a look at it ;-)\n"
      }
    ]
  }
]