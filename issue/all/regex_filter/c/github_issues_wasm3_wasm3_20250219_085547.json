[
  {
    "number": 207,
    "title": "Updates to wasm3 to pass security review",
    "created_at": "2021-03-06T14:23:53Z",
    "closed_at": "2021-03-11T05:36:48Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/wasm3/wasm3/issues/207",
    "body": "Our team at Google is trying to use wasm3 for a project we hope to open-source, but wasm3 must pass a security review before we can launch any Google project using it.  Would you be receptive to pull requests motivated by the security review?  This might include occasional actual security patches, but most suggested changes are designed to simplify the security review process, e.g. making it possible to sign off on the security of a function in a file without having to read lots of code in other files.\r\n\r\nOur team trying to use wasm3 as an extra sandboxing layer that hopefully will enable us to run fully untrusted code on our servers in security-sensitive applications, where security is more important than speed.  We're using the minimum possible built-in APIs, not wasi.  I'm pulling your latest version into our internal repo right now, and I see there appears to be encouraging improvements in the security side of wasm3, e.g. the new m3ApiCheckMem calls.  Is our sandboxing application for wams3 an intended use case of wasm3?\r\n\r\nIThanks,\r\nBill",
    "comments_url": "https://api.github.com/repos/wasm3/wasm3/issues/207/comments",
    "author": "waywardgeek",
    "comments": [
      {
        "user": "vshymanskyy",
        "created_at": "2021-03-06T16:29:47Z",
        "body": "Hey Bill. Sandboxing/SFI is definitely one of the intended use-cases of wasm3.\r\nPRs are welcome, as usual! Most changes are accepted, as soon as they are not degrading the performance (or increase memory usage) too much. Public API is also not stable yet, so we can change it at any time.\r\n\r\nWasm3 didn't yet undergo any serious fuzz testing, so definitely there's room for improvement in terms of security."
      },
      {
        "user": "waywardgeek",
        "created_at": "2021-03-06T16:43:58Z",
        "body": "Awesome!  We definitely will enhance fuzzing.  That is already a request from the security reviewer."
      }
    ]
  },
  {
    "number": 117,
    "title": "Rudimentary perf comparison: x86_64 v.s. arm64",
    "created_at": "2020-03-10T06:08:07Z",
    "closed_at": "2020-03-16T14:31:28Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/wasm3/wasm3/issues/117",
    "body": "### Environment:\r\n\r\nx86_64: MacOS, Stock Clang/LLVM, 2.3 GHz Quad-Core Intel Core i5 \r\nCompiler:   AppleClang\r\nBuild Type: Release\r\nLTO:        ON\r\n\r\narm64: Nvidia Jetson TX2: JetPack4.3 \r\nCompiler:   GNU\r\nBuild Type: Release\r\nLTO:        ON\r\n\r\n### Results\r\n\r\n## x86_64\r\n./run-wasi-test.py \r\n=== Simple WASI test ===\r\n../build/wasm3 ./wasi/test.wasm cat ./wasi/0.txt\r\nResult: <Empty Stack>\r\n\r\n=== Simple WASI test (wasm-opt -O3) ===\r\n../build/wasm3 ./wasi/test-opt.wasm cat ./wasi/0.txt\r\nResult: <Empty Stack>\r\n\r\n=== mandelbrot ===\r\n../build/wasm3 ./benchmark/mandelbrot/mandel.wasm 128 4e5\r\n100.00%\r\nElapsed time: 592.93 ms\r\nResult: <Empty Stack>\r\n\r\n=== mandelbrot (doubledouble) ===\r\n../build/wasm3 ./benchmark/mandelbrot/mandel_dd.wasm 128 4e5\r\n100.00%\r\nElapsed time: 3233.25 ms\r\nResult: <Empty Stack>\r\n\r\n=== C-Ray ===\r\ncat ./benchmark/c-ray/scene | ../build/wasm3 ./benchmark/c-ray/c-ray.wasm -s 128x128\r\nRendering took: 0 seconds (86 milliseconds)\r\nResult: <Empty Stack>\r\n\r\n=== smallpt (explicit light sampling) ===\r\n../build/wasm3 ./benchmark/smallpt/smallpt-ex.wasm 16 64\r\nRendering (16 spp) 100.00%\r\nElapsed: 1412.0 ms\r\nResult: <Empty Stack>\r\n\r\n=== STREAM ===\r\n../build/wasm3 ./benchmark/stream/stream.wasm\r\nResult: <Empty Stack>\r\n\r\n=== Self-hosting ===\r\n../build/wasm3 ./self-hosting/wasm3-fib.wasm\r\nResult: <Empty Stack>\r\n\r\n=== Brotli ===\r\ncat ./benchmark/brotli/alice29.txt | ../build/wasm3 ./benchmark/brotli/brotli.wasm -c\r\nResult: <Empty Stack>\r\n\r\n=== CoreMark ===\r\n../build/wasm3 ./benchmark/coremark/coremark-wasi.wasm\r\nResult: <Empty Stack>\r\n\r\n{'crashed': 0, 'failed': 0, 'timeout': 0, 'total_run': 10}\r\n\r\n## arm64\r\n./run-wasi-test.py \r\n=== Simple WASI test ===\r\n../build/wasm3 ./wasi/test.wasm cat ./wasi/0.txt\r\nResult: <Empty Stack>\r\n\r\n=== Simple WASI test (wasm-opt -O3) ===\r\n../build/wasm3 ./wasi/test-opt.wasm cat ./wasi/0.txt\r\nResult: <Empty Stack>\r\n\r\n=== mandelbrot ===\r\n../build/wasm3 ./benchmark/mandelbrot/mandel.wasm 128 4e5\r\n100.00%\r\nElapsed time: 4120.20 ms\r\nResult: <Empty Stack>\r\n\r\n=== mandelbrot (doubledouble) ===\r\n../build/wasm3 ./benchmark/mandelbrot/mandel_dd.wasm 128 4e5\r\n100.00%\r\nElapsed time: 30594.11 ms\r\nResult: <Empty Stack>\r\n\r\n=== C-Ray ===\r\ncat ./benchmark/c-ray/scene | ../build/wasm3 ./benchmark/c-ray/c-ray.wasm -s 128x128\r\nRendering took: 0 seconds (562 milliseconds)\r\nResult: <Empty Stack>\r\n\r\n=== smallpt (explicit light sampling) ===\r\n../build/wasm3 ./benchmark/smallpt/smallpt-ex.wasm 16 64\r\nRendering (16 spp) 100.00%\r\nElapsed: 9026.3 ms\r\nResult: <Empty Stack>\r\n\r\n=== STREAM ===\r\n../build/wasm3 ./benchmark/stream/stream.wasm\r\nResult: <Empty Stack>\r\n\r\n=== Self-hosting ===\r\n../build/wasm3 ./self-hosting/wasm3-fib.wasm\r\nResult: <Empty Stack>\r\n\r\n=== Brotli ===\r\ncat ./benchmark/brotli/alice29.txt | ../build/wasm3 ./benchmark/brotli/brotli.wasm -c\r\nResult: <Empty Stack>\r\n\r\n=== CoreMark ===\r\n../build/wasm3 ./benchmark/coremark/coremark-wasi.wasm\r\nResult: <Empty Stack>\r\n\r\n{'crashed': 0, 'failed': 0, 'timeout': 0, 'total_run': 10}\r\n\r\nIs there anything could be improved by adjusting compiler parameters? or the arch determined it's not a good platform to do this tail-chaining style interpretation on this arm64 implementation.\r\n\r\nThanks.",
    "comments_url": "https://api.github.com/repos/wasm3/wasm3/issues/117/comments",
    "author": "taskx6004",
    "comments": [
      {
        "user": "MaxGraey",
        "created_at": "2020-03-10T11:52:44Z",
        "body": "Could you share compiler's flags? And did you try use clang for arm64?"
      },
      {
        "user": "taskx6004",
        "created_at": "2020-03-10T11:58:19Z",
        "body": "I am working on llvm compiling at the moment, I used the default build script. Thanks for responding, i will update in a day or two. "
      },
      {
        "user": "vshymanskyy",
        "created_at": "2020-03-10T13:05:26Z",
        "body": "Why do you think there's a problem with TCO? For ARM64 it shoild work like a charm.\r\nHowever your specific CPU may be not very good at running this type of code (due to cache architecture, etc)."
      },
      {
        "user": "vshymanskyy",
        "created_at": "2020-03-10T13:07:06Z",
        "body": "Also, the CoreMark test does not report it's result here. You should run it separately"
      },
      {
        "user": "taskx6004",
        "created_at": "2020-03-12T12:19:47Z",
        "body": "Spend some time to build with LLVM-9 on both Linux/X86_64 and Linux/ARM64:\r\nCoreMark had similar scores, (not the previous X86 MacBook, an old laptop with 5gen i5)\r\n\r\narch: arm64 v.s. x86_64\r\nmandelbrot: 3089.61 / 770.24 ms\r\nmandelbrot (doubledouble): 31669.00 / 4609.43 ms\r\nC-Ray: 508 / 105 ms\r\nsmallpt: 8406.7 / 1718.6 ms\r\n\r\nAs @vshymanskyy  indicated, it's most likely the cache size matters"
      }
    ]
  }
]