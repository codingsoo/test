[
  {
    "number": 2069,
    "title": "HTML::DocumentFragment.parse should be able to accept an IO object",
    "created_at": "2020-08-29T16:11:49Z",
    "closed_at": "2024-08-05T14:47:22Z",
    "labels": [
      "help wanted"
    ],
    "url": "https://github.com/sparklemotion/nokogiri/issues/2069",
    "body": "**Describe the bug**\r\n\r\n`HTML4::Document.parse`, `HTML5::Document.parse`, and `HTML5::DocumentFragment.parse` all accept IO objects.\r\n\r\nBut `HTML4::DocumentFragment.parse` raises an unobvious exception when we do this.\r\n\r\n**To Reproduce**\r\n\r\n```ruby\r\n#! /usr/bin/env ruby\r\nputs Nokogiri::HTML4::DocumentFragment.parse(StringIO.new(\"<div>hello</div>\"))\r\n```\r\n\r\nemits:\r\n\r\n```\r\n/home/flavorjones/code/oss/nokogiri/lib/nokogiri/html4/document_fragment.rb:40:in `match?': no implicit conversion of StringIO into String (TypeError)\r\n\r\n          path = if /^\\s*?<body/i.match?(tags)\r\n                                         ^^^^\r\n        from /home/flavorjones/code/oss/nokogiri/lib/nokogiri/html4/document_fragment.rb:40:in `initialize'\r\n        from /home/flavorjones/code/oss/nokogiri/lib/nokogiri/html4/document_fragment.rb:24:in `new'\r\n        from /home/flavorjones/code/oss/nokogiri/lib/nokogiri/html4/document_fragment.rb:24:in `parse'\r\n        from (irb):5:in `<main>'\r\n```\r\n\r\n\r\n**Expected behavior**\r\n\r\nI'd like the `HTML4::DocumentFragment.parse` method(s) be able to handle an IO object, even if that means we just `#read` the whole string into a `String`.\r\n\r\n\r\n",
    "comments_url": "https://api.github.com/repos/sparklemotion/nokogiri/issues/2069/comments",
    "author": "flavorjones",
    "comments": [
      {
        "user": "flavorjones",
        "created_at": "2024-07-15T22:09:15Z",
        "body": "@sharvy This might be a good first issue! There shouldn't be any C coding necessary, and it should be straightforward to write a test based on the reproduction script above.\r\n\r\nI think the solution is basically something like what we have in the `read_and_encode` method in `lib/nokogiri/html5.rb`:\r\n\r\n```ruby\r\nif tags.respond_to?(:read)\r\n  tags = if encoding.nil?\r\n    tags.read\r\n  else\r\n    tags.read(encoding: encoding)\r\n  end\r\nend\r\n```\r\n\r\nand I'd want to test both branches of that (with and without encoding specified)."
      },
      {
        "user": "sharvy",
        "created_at": "2024-07-16T06:46:00Z",
        "body": "@flavorjones Thanks. Looks like a quick win. I'm on it."
      }
    ]
  }
]