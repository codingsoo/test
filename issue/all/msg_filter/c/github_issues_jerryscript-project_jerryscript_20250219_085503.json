[
  {
    "number": 4798,
    "title": "Using the JerryScript Parser to make other tooling",
    "created_at": "2021-10-21T10:40:41Z",
    "closed_at": "2021-10-28T11:33:39Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jerryscript-project/jerryscript/issues/4798",
    "body": "Hello!\r\n\r\nI was looking at ESBuild and other alternatives to Webpack and Rollup that are not written in JS themselves and wondered if it was possible to utilize the JerryScript parser?\r\n\r\nLooking at the `jerry-core/parser` files, it seems that it would be possible to. But the \"public\" headers in `/include` don't seem to mention the parser at all (or I just overlooked it, quite possible).\r\n\r\nWhat function would I be going for to just parse JS into an AST and then walk or possibly re-write it? For instance, to re-write imports, or to append other functions and alike.\r\n\r\nThanks and kind regards,\r\nIngwie",
    "comments_url": "https://api.github.com/repos/jerryscript-project/jerryscript/issues/4798/comments",
    "author": "IngwiePhoenix",
    "comments": [
      {
        "user": "rerobika",
        "created_at": "2021-10-28T11:18:49Z",
        "body": "The function you are looking for does not exists since JerryScript's parser does not build AST. It generates the bytecode while reading the source and the scanner component is used to guide the parser on situations where a simple lookahead for the next token is not enough."
      }
    ]
  },
  {
    "number": 4263,
    "title": "jerry-script snapshot documentation doesn't explain how to generate snapshot for function (-f)",
    "created_at": "2020-10-01T14:45:01Z",
    "closed_at": "2020-10-01T14:51:48Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jerryscript-project/jerryscript/issues/4263",
    "body": "I spend some time trying to understand how to use `jerry-generate` to generate bycode for functions and not scripts \r\n(jerry_generate_function_snapshot vs jerry_generate_snapshot)\r\n\r\nthe jerry-generate --help is not really helpful:\r\n```\r\n./jerry-snapshot --help                                                       jerryscript/git/master !\r\n./jerry-snapshot [-h] [COMMAND]\r\n\r\n  -h, --help            print this help and exit\r\n  COMMAND               specify the command\r\n\r\nAvailable commands:\r\n  generate\r\n  litdump\r\n  merge\r\n\r\nPassing -h or --help after a command displays its help.\r\n```\r\n\r\nTo figure I need to use: \r\n`./jerry-snapshot generate ./function.js -f _function`\r\n\r\nI think the `-f` option is explained nowhere in the doc, I figured it from the code.\r\n\r\n###### JerryScript revision\r\nmaster: 0ffe1665\r\n",
    "comments_url": "https://api.github.com/repos/jerryscript-project/jerryscript/issues/4263/comments",
    "author": "jvermillard",
    "comments": [
      {
        "user": "rerobika",
        "created_at": "2020-10-01T14:49:35Z",
        "body": "Hi @jvermillard!\r\n\r\nPassing `--help` after `generate` cli options gives you more detailed information about the capabilities of the snapshot generator.\r\n\r\n```\r\n$ build/bin/jerry-snapshot generate --help\r\nbuild/bin/jerry-snapshot generate [-h] [-s] [-f ARGUMENTS] [--load-literals-list-format FILE]\r\n  [--show-opcodes] [-o FILE] [FILE]\r\n\r\n  -h, --help            print this help and exit\r\n  -s, --static          generate static snapshot\r\n  -f, --generate-function-snapshot ARGUMENTS\r\n                        generate function snapshot with given arguments\r\n  --load-literals-list-format FILE\r\n                        import literals from list format (for static snapshots)\r\n  --show-opcodes        print generated opcodes\r\n  -o FILE               specify output file name (default: js.snapshot)\r\n  FILE                  input source file\r\n\r\n```"
      }
    ]
  },
  {
    "number": 4058,
    "title": "Question: How to handle Date object in native C?",
    "created_at": "2020-07-26T00:41:31Z",
    "closed_at": "2020-08-03T09:19:56Z",
    "labels": [
      "question",
      "api"
    ],
    "url": "https://github.com/jerryscript-project/jerryscript/issues/4058",
    "body": "Hi, I'm having hard time to figure out how to get the Date.year, month, date in the native C code. Also having hard time to figure out how to return a Date object from native to javascript. Thanks\r\n\r\nJavascript\r\n```javascript\r\nlet date = native_driver_gui_calendar.setTodayDate(new Date(2020, 6, 10));\r\n```\r\n\r\nNative C\r\n```C\r\nstatic jerry_value_t function_native_driver_gui_calendar_setTodayDate(const jerry_value_t func_value, /**< function object */\r\n                                 const jerry_value_t this_value, /**< this arg */\r\n                                 const jerry_value_t args[],    /**< function arguments */\r\n                                 const jerry_length_t args_cnt)  /**< number of function arguments */\r\n{\r\n  //How to get the year, month, date of a Date object?\r\n  //The following code returns all zero\r\n  printf(\"Year:%d Month:%d Day:%d\\n\", ecma_date_year_from_time(args[0]), ecma_date_month_from_time(args[0]), ecma_date_date_from_time(args[0]));\r\n\r\n //How to return \"new Date(2020, 0,0)\" value to the javascript?\r\n  return jerry_create_date();\r\n}\r\n```",
    "comments_url": "https://api.github.com/repos/jerryscript-project/jerryscript/issues/4058/comments",
    "author": "weixiongmei",
    "comments": [
      {
        "user": "rerobika",
        "created_at": "2020-07-27T08:10:06Z",
        "body": "Hello @weixiongmei !\r\n\r\nUnfortunately, currently we do not have any API functions to handle date objects.\r\nAlso the reason is why the the called `ecma` level functions are not working, it that these methods expect an `ecma_number_t` instead of a `jerry_value_t`. If you unpack it into a double variable with `jerry_get_number_from_value(args[0])` you can use these internal methods, with the warning of the usage of non-api functions is not the best practice.\r\n\r\nMoreover I can suggest you two __better__ solutions:\r\n**A:**\r\n - ecma_date_year_from_time(args[0]) is almost equivalent to perform `Date.prototype.getYear.call(args[0])`\r\n - `.call()` can be performed with `jerry_invoke_function` with `args[0]` as `this` argument \r\n - `getYear` is the property of `Date.prototype`\r\n - `Date.prototype` is the property of `Date`\r\n - `Date` is the property of the `global object.`\r\n - So putting the pieces together,  use `jerry_get_property (global, \"Date\")`, then `jerry_get_property(Date, \"prototype\")`, then `jerry_get_property(Date.prototype, \"getYear\")` and finally `jerry_invoke_function (Date.prototype.getYear, args[0], NULL, 0)`\r\n\r\n**B:**\r\n - If you have free-time/capacity it'd be great to publish these internal method to the API. I think we should have one single universal function for retrieving information form a date object. So my proposal would look like this:\r\n\r\n```c\r\ntypedef enum\r\n{\r\n  JERRY_DATE_OPERATION_GET_YEAR,\r\n  JERRY_DATE_OPERATION_GET_MONTH,\r\n  // ... and so on\r\n} jerry_date_operation_t;\r\n\r\njerry_value_t\r\njerry_date_get (jerry_date_operation_t operation, jerry_value_t value)\r\n{\r\n  // step 1: validate date object\r\n  \r\n  // step 2: get the internal date\r\n  ecma_number_t date_num = get_the_stored_internal_date_value() // see ecma_builtin_date_prototype_dispatch_routine\r\n  ecma_number_t result;\r\n  // step 3: choose the operation\r\n  switch (operation) {\r\n    case JERRY_DATE_OPERATION_GET_YEAR: {\r\n      result = ecma_date_year_from_time (date_num);\r\n      break;\r\n    }\r\n    case JERRY_DATE_OPERATION_GET_MONTH: {\r\n      result = ecma_date_month_from_time (date_num);\r\n      break;\r\n    }\r\n\r\n   // ... and so on\r\n  }\r\n\r\n  return ecma_make_number_value (result);\r\n}\r\n```\r\n\r\nBoth options are suitable for resolve your problem, but IMHO the option **B** would be more future-proof also much efficient as well.\r\n  \r\n"
      }
    ]
  },
  {
    "number": 3144,
    "title": "Help with getting name of registered jerry_external_handler_t name, please.",
    "created_at": "2019-09-21T18:06:46Z",
    "closed_at": "2019-09-27T11:23:28Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jerryscript-project/jerryscript/issues/3144",
    "body": "How to get information from const **jerry_value_t function_object** and **const jerry_value_t function_this** in code like below. I need to get the name of called external handler (some_handler) inside this handler, is it possible? Not to provide by arguments[], but to get from  function_object for example.\r\nPlease help. And what is the structure of **function_object** and **function_this** to use them in a code.\r\n\r\n#include <stdio.h>\r\n#include \"jerryscript.h\"\r\n\r\nstatic jerry_value_t\r\nsome_handler (const jerry_value_t function_object,\r\n               const jerry_value_t function_this,\r\n               const jerry_value_t arguments[],\r\n               const jerry_length_t arguments_count)\r\n{\r\n\t\r\n  return jerry_create_undefined ();\r\n}\r\n\r\nint\r\nmain (void)\r\n{\r\n  const jerry_char_t script[] = \"call_handler('First arg');\";\r\n  const jerry_length_t script_size = sizeof (script) - 1;\r\n\r\n  jerry_init (JERRY_INIT_EMPTY);\r\n\r\n  {\r\n    jerry_value_t global_object = jerry_get_global_object ();\r\n    jerry_value_t property_name_print = jerry_create_string ((const jerry_char_t *) \"call_handler\");\r\n    jerry_value_t property_value_func = jerry_create_external_function (print_handler);\r\n    jerry_value_t set_result = jerry_set_property (global_object, property_name_print, property_value_func);\r\n\r\n    jerry_release_value (set_result);\r\n    jerry_release_value (property_value_func);\r\n    jerry_release_value (property_name_print);\r\n    jerry_release_value (global_object);\r\n  }\r\n\r\n  jerry_value_t parsed_code = jerry_parse (NULL, 0, script, script_size, JERRY_PARSE_NO_OPTS);\r\n\r\n  if (!jerry_value_is_error (parsed_code))\r\n  {\r\n    jerry_value_t ret_value = jerry_run (parsed_code);\r\n    jerry_release_value (ret_value);\r\n  }\r\n  jerry_release_value (parsed_code);\r\n  jerry_cleanup ();\r\n  return 0;\r\n}\r\n\r\nThanks a lot!",
    "comments_url": "https://api.github.com/repos/jerryscript-project/jerryscript/issues/3144/comments",
    "author": "rafail-ufa",
    "comments": [
      {
        "user": "galpeter",
        "created_at": "2019-09-26T14:31:29Z",
        "body": "Hi!\r\n\r\nBy default an external method (created via `jerry_create_external_function`) does not have a name.\r\n\r\nHowever, you can attach a `name` property to the created function object. This `name` property then can be accessed via the `function_object` argument in the C method (or at any other place if required).\r\n\r\nExample to set/get `name` property for an external function (snippet):\r\n\r\n```c\r\nstatic jerry_value_t some_handler (\r\n    const jerry_value_t function_object,\r\n    const jerry_value_t function_this,\r\n    const jerry_value_t arguments[],\r\n    const jerry_length_t arguments_count)\r\n{   \r\n    jerry_value_t name_val = jerry_create_string ((const jerry_char_t *) \"name\");\r\n    jerry_value_t prop = jerry_get_property (function_object, name_val);\r\n\r\n    jerry_size_t string_size = jerry_get_string_size (prop);\r\n    jerry_char_t prop_str[string_size + 1];\r\n\r\n    jerry_size_t copied =\r\n        jerry_substring_to_char_buffer (prop,\r\n                                        0,\r\n                                        string_size,\r\n                                        prop_str,\r\n                                        string_size);\r\n    prop_str[copied] = '\\0';\r\n\r\n    jerry_release_value (prop);\r\n    jerry_release_value (name_val);\r\n\r\n    printf(\"Called function with name: %s\\n\", prop_str);\r\n\r\n    return jerry_create_undefined;\r\n}\r\n\r\nvoid set_function_name(jerry_value_t func, char* name) {\r\n    jerry_value_t name_key = jerry_create_string ((const jerry_char_t *) \"name\");\r\n    jerry_value_t name_value = jerry_create_string ((const jerry_char_t *) name);\r\n    jerry_value_t set_result = jerry_set_property (func, name_key, name_value);\r\n    // TODO: check set result if there is an error\r\n    jerry_release_value(set_result);\r\n    jerry_release_value(name_value);\r\n    jerry_release_value(name_key);\r\n}\r\n\r\nint main() {\r\n    const jerry_char_t script[] = \"call_handler('First arg');\";\r\n    const jerry_length_t script_size = sizeof (script) - 1;\r\n\r\n    current_instance_p = jerry_create_instance(512 * 1024, instance_alloc, NULL);\r\n    jerry_init (JERRY_INIT_EMPTY);\r\n\r\n    {   \r\n        jerry_value_t global_object = jerry_get_global_object ();\r\n        jerry_value_t property_name_print =\r\n            jerry_create_string ((const jerry_char_t *) \"call_handler\");\r\n        jerry_value_t property_value_func = jerry_create_external_function (some_handler);\r\n\r\n        set_function_name (property_value_func, \"MyFunction\");\r\n\r\n        jerry_value_t set_result =\r\n            jerry_set_property (global_object, property_name_print, property_value_func);\r\n        // TODO: check the 'set_result' if it is an error.\r\n        jerry_release_value (set_result);\r\n        jerry_release_value (property_value_func);\r\n        jerry_release_value (property_name_print);\r\n        jerry_release_value (global_object);\r\n\r\n    }\r\n\r\n    jerry_value_t parsed_code =\r\n        jerry_parse (NULL, 0, script, script_size, JERRY_PARSE_NO_OPTS);\r\n\r\n    if (!jerry_value_is_error (parsed_code))\r\n    {   \r\n        jerry_value_t ret_value = jerry_run (parsed_code);\r\n        jerry_release_value (ret_value);\r\n    }\r\n\r\n    jerry_release_value (parsed_code);\r\n    jerry_cleanup ();\r\n    return 0;\r\n}\r\n```\r\n\r\nIn case of a native C method the `function_object` argument means the function object which was invoked (in this case this was crated via the `jerry_create_external_function` method). The `function_this` is the `this` object which used to invoke the method.\r\n\r\nFor example if the following JS code is executed in this example:\r\n\r\n```js\r\ncall_handler(\"First arg\");\r\n```\r\n\r\nThe `function_this` value is an `undefined` value (as there was no 'this' set for the function). \r\n\r\nHowever, if the following JS code is executed:\r\n\r\n```js\r\nvar my_demo = { val: 6 }\r\ncall_handler.call(my_demo, \"First arg\");\r\n```\r\n\r\nThe `function_this` will be the object referenced by the `my_demo` var."
      }
    ]
  },
  {
    "number": 1884,
    "title": "Is it possible to store the JS program in bytecode as a const in ROM?",
    "created_at": "2017-06-07T23:20:54Z",
    "closed_at": "2017-06-13T18:59:15Z",
    "labels": [
      "question",
      "snapshot"
    ],
    "url": "https://github.com/jerryscript-project/jerryscript/issues/1884",
    "body": "Hi, \r\nI'm working on a project which need a Javascript engine as a replacement of configuration file.\r\nSince the SRAM on my board is really limited, while there are still a some ROM, I am wondering if I could port only the vm part to my firmware and cut out the parser part. In this way, I could cut down the ROM space of parser part and save the SRAM that was used to save bytecode.\r\n\r\nSo, it's basically two questions:\r\n1. Is it possible to port VM only?\r\n2. Is it possible to store bytecode as a const?\r\n",
    "comments_url": "https://api.github.com/repos/jerryscript-project/jerryscript/issues/1884/comments",
    "author": "cnnblike",
    "comments": [
      {
        "user": "zherczeg",
        "created_at": "2017-06-08T04:52:24Z",
        "body": "JerryScript is a modular JS engine. Almost any feature can be disabled.\r\n\r\nTo disable the parser, set:\r\n`#define JERRY_JS_PARSER 0`\r\nor pass `--js-parser off` to tools/build.py\r\n\r\nYou can execute byte-code from memory, just align the buffer to 4 bytes. The byte code can also be run from ROM without loading it into the RAM."
      },
      {
        "user": "cnnblike",
        "created_at": "2017-06-08T21:48:06Z",
        "body": "Thank you, so the bytecode is platform-independent, right? Meaning I could parse it on x86 platform and use it on armv7?"
      },
      {
        "user": "zherczeg",
        "created_at": "2017-06-09T04:06:42Z",
        "body": "As long as the byte order of the two machines are the same (little endian in this case, so it works), and you use the same compressed pointer size (e.g. 16 bit)."
      },
      {
        "user": "cnnblike",
        "created_at": "2017-06-13T06:12:44Z",
        "body": "@zherczeg \r\nAs for the ROM usage problem, I just did a simple test and get some interesting result .\r\nBefore adding jerryscript:\r\ntext 23980 data: 244 bss:5332\r\nafter adding jerryscript(just use VM module):\r\ntext: 150904 data: 348 bss: 28128\r\nafter adding jerryscript(with VM and parser):\r\ntext: 176064 data: 348 bss: 28128 \r\n\r\nHere is my question: \r\nso the parser actually doesn't take much ROM, right?  Or did I make anything wrong? How could I continue decrease ROM usage?\r\nIt's just opposite from how I thought it would be - I thought the parser would cost much more than the vm do.\r\n\r\n\r\nthis is how i build my VM-only version of libjerryscript:\r\n```bash\r\npython tools/build.py --toolchain=cmake/toolchain_mcu_stm32f1.cmake --jerry-cmdline OFF --jerry-libc OFF --jerry-libm OFF --js-parser OFF --mem-heap=20 --jerry-port-default OFF --clean\r\n```\r\nparser+VM:\r\n```bash\r\npython tools/build.py --toolchain=cmake/toolchain_mcu_stm32f1.cmake --jerry-cmdline OFF --jerry-libc OFF --jerry-libm OFF --js-parser ON --mem-heap=20 --jerry-port-default OFF --clean\r\n```"
      },
      {
        "user": "zherczeg",
        "created_at": "2017-06-13T06:46:31Z",
        "body": "What is your platform? On arm thumb2 the whole engine is around 140K, and can be reduced to around 80K as far as I remember (Please use -Os optimization). You can disable a lot of features, please check `jerry-core/profiles/minimal.profile`"
      },
      {
        "user": "cnnblike",
        "created_at": "2017-06-13T14:30:06Z",
        "body": "@zherczeg \r\nThank you a lot for replying!\r\nI'm now building for stm32f103vct6, a M3 with 48kB SRAM and 256kB Flash. After some troubleshooting, the problem might lies in jerry-ext, I forgot to disable this part.\r\n \r\nif I disable js-parser, jerry-ext, jerry-libm, jerry-libc, jerry-port-default, use the minimal profile , use the build option Os, \r\nThis is interesting, because from my build, the minimal.profile really helped a lot, while abandon js-parser doesn't.\r\nwith minimal profile. the size is like the following:\r\nbare-HAL: 24k \r\nbare-HAL + jerry-vm = 67k \r\nbare-HAL + jerry-vm + js-parser = 91k\r\n\r\nThis is the toolchain file I used for building:\r\n```\r\ninclude(CMakeForceCompiler)\r\nset(CMAKE_SYSTEM_NAME MCU)\r\nset(CMAKE_SYSTEM_PROCESSOR armv7l)\r\nset(CMAKE_SYSTEM_VERSION STM32F1)\r\nset(FLAGS_COMMON_ARCH -mlittle-endian -mthumb -mcpu=cortex-m3 -march=armv7-m)\r\nCMAKE_FORCE_C_COMPILER(arm-none-eabi-gcc GNU)\r\n```\r\n\r\n\r\n--\r\nupdate:\r\nThis is the key is JUST like what you said, is to use a minimal profile, instead of a es5.1 profile.\r\nwith jerry-vm+es5.1profile, it's 150k\r\nwith jerry-vm+js-parser+es5.1profile, it's 170k\r\n\r\n"
      }
    ]
  },
  {
    "number": 1319,
    "title": "how can i share a c variable to jerry readonly",
    "created_at": "2016-09-05T03:01:23Z",
    "closed_at": "2016-09-06T05:52:22Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jerryscript-project/jerryscript/issues/1319",
    "body": "suppose I have a huge struct to export to javascript, but i don't want javascript to modify the value.\n\nseems now every value have to make a copy to vm, two copy in C and jerrry is a waste memory and it's hard to sync every value changed to jerry.\n",
    "comments_url": "https://api.github.com/repos/jerryscript-project/jerryscript/issues/1319/comments",
    "author": "dbskccc",
    "comments": [
      {
        "user": "zherczeg",
        "created_at": "2016-09-05T09:14:32Z",
        "body": "I would recommend to create an external function and it returns the requested value. A string argument could represent the name of the value (since you have a big struct).\n"
      },
      {
        "user": "dbskccc",
        "created_at": "2016-09-06T01:23:30Z",
        "body": "now, I change every single value to a function like below:\nstruct Ttest{\ndouble balance;\nchar\\* name;\nint history[10];\n}\nproperty balance become to an external function obj.balance(), in jerry read by call balance() and write by call obj.balance(newblance);\n\nbut for array property history[10], it's still no good way to operate the value.\n"
      },
      {
        "user": "zherczeg",
        "created_at": "2016-09-06T03:00:26Z",
        "body": "I think you just need to pass an index argument to the function, i.e. obj.getHistory(4); obj.setHistory(5, \"newvalue\") or just checking the number of parameters (1 - read, 2 - write)\n"
      },
      {
        "user": "dbskccc",
        "created_at": "2016-09-06T05:52:22Z",
        "body": "yeah, got it.\nfor array we can make it a object property and access like below:\nread: obj.history.at(0) obj.history.length()\nwrite:obj.hostory.at(1,newValue)\n"
      }
    ]
  },
  {
    "number": 572,
    "title": "error: control reaches end of non-void function",
    "created_at": "2015-08-13T22:06:58Z",
    "closed_at": "2015-08-28T00:19:28Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jerryscript-project/jerryscript/issues/572",
    "body": "Some functions like `lit_get_magic_string_utf8()` ends with \n\n```\n  JERRY_UNREACHABLE ();\n}\n```\n\nand does not return value. \nIn this case without `-Wno-return-type` mips compiler fails with an `error: control reaches end of non-void function`. Should I use this option `-Wno-return-type` or should I add something like this?\n\n```\n  JERRY_UNREACHABLE ();\n  return NULL; /* make compiler happy */\n}\n```\n",
    "comments_url": "https://api.github.com/repos/jerryscript-project/jerryscript/issues/572/comments",
    "author": "seanshpark",
    "comments": [
      {
        "user": "egavrin",
        "created_at": "2015-08-13T23:05:32Z",
        "body": "This flag is useful, so I'd prefer to add `return NULL;`.\n"
      },
      {
        "user": "ruben-ayrapetyan",
        "created_at": "2015-08-14T09:15:43Z",
        "body": "`JERRY_UNREACHABLE` macro calls `jerry_unreachable` function that is marked with `noreturn` attribute (`jerry_unreachable` leads to either `exit` or `abort`).\nSo, seems that the warning is false-positive.\nTo fix this, maybe, `while (true) {}` loop could be added after call to `jerry_unreachable` in the macro.\n"
      },
      {
        "user": "seanshpark",
        "created_at": "2015-08-17T00:02:28Z",
        "body": "adding `while (true) {}` to end of `jerry_fatal()` works. \nthere are `jerry_assert_fail()`, `jerry_unreachable()` and `jerry_unimplemented()` that calls `jerry_fatal()` and all of them has `noreturn` attribute.\n@ruben-ayrapetyan , if you confirm I'll make a PR.\n"
      },
      {
        "user": "egavrin",
        "created_at": "2015-08-17T07:02:36Z",
        "body": "@seanshpark @ruben-ayrapetyan \n\n``` cpp\n#define JERRY_UNREACHABLE() \\\n  do \\\n  { \\\n    jerry_unreachable (NULL, __FILE__, __func__, __LINE__); \\\n    __builtin_unreachable(); \\\n  } while (0)\n```\n"
      }
    ]
  },
  {
    "number": 180,
    "title": "Faster debug version",
    "created_at": "2015-06-14T23:49:42Z",
    "closed_at": "2015-06-17T22:57:43Z",
    "labels": [
      "enhancement",
      "question",
      "normal"
    ],
    "url": "https://github.com/jerryscript-project/jerryscript/issues/180",
    "body": "As  new eval has landed, one small problem is that debug version execution has became very slow.\nCan there be some level of checking so that it might be somewhat faster for debugging?\n",
    "comments_url": "https://api.github.com/repos/jerryscript-project/jerryscript/issues/180/comments",
    "author": "seanshpark",
    "comments": [
      {
        "user": "ILyoan",
        "created_at": "2015-06-15T04:03:49Z",
        "body": "It seems like `rcs_chunked_list_t::get_prev()` and `rcs_chunked_list_t::get_next()` are called too many times in debug mode. The prominent caller of them are `assert_node_is_correct()` and `assert_list_is_correct()`. \n"
      },
      {
        "user": "sand1k",
        "created_at": "2015-06-15T14:23:07Z",
        "body": "Surrouned code of assert_list_is_correct(), assert_node_is_correct() and rcs_recordset_t::assert_state_is_correct() with `#ifdef JERRY_HEAVY_DEBUG ... #endif`, so that this checks run only for unit tests.\nPull request #193 performs the update.\n"
      }
    ]
  }
]