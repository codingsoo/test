[
  {
    "number": 25080,
    "title": "error_for_create_order_hyperliquid",
    "created_at": "2025-01-28T14:06:37Z",
    "closed_at": "2025-01-28T15:07:29Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/25080",
    "body": "### Operating System\n\n_No response_\n\n### Programming Languages\n\nPython\n\n### CCXT Version\n\n4.4.52\n\n### Description\n\nhello, i've been looking for someone who has this error but i haven't found it. here's the code and the error. thanks to those who will take the time.\n\n### Code\n\n\u2002\u2002/CODE\\\n\nimport ccxt\nimport config\n\nexchange = ccxt.hyperliquid({\n    'Wallet_API': config.Wallet_API,\n    'Secret_Key': config.Secret_Key,\n})\n\n\nsymbol = 'BTC/USDC:USDC'\norder_type = 'limit' #'market'\nside = 'buy' #'sell'\namount_in_usdc = 10\nprice = 50000 #The price at wich you want to buy or sell\n\ncurrent_price = (exchange.fetch_ticker(symbol)['ask'] + exchange.fetch_ticker(symbol)['bid'])/2\namount = amount_in_usdc / current_price\n\norder = exchange.create_order(symbol, order_type, side, amount, price)\n\n\n/ERROR\\\n\n raise AuthenticationError(self.id + ' requires \"' + key + '\" credential')\n ccxt.base.errors.AuthenticationError: hyperliquid requires \"privateKey\" credential \n\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/25080/comments",
    "author": "B3atrixKidd0",
    "comments": [
      {
        "user": "carlosmiei",
        "created_at": "2025-01-28T15:07:29Z",
        "body": "Hello @B3atrixKidd0,\n\nYou're using the wrong properties (wallet_api and secret_key)\n```\n'Wallet_API': config.Wallet_API,\n'Secret_Key': config.Secret_Key,\n```\n\nYou should use `walletAddress` and `privateKey`\n"
      }
    ]
  },
  {
    "number": 24949,
    "title": "myokx.fetchOHCLV wrong candles ohcl",
    "created_at": "2025-01-19T20:08:43Z",
    "closed_at": "2025-01-20T10:25:01Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/24949",
    "body": "### Operating System\n\n_No response_\n\n### Programming Languages\n\n_No response_\n\n### CCXT Version\n\nlast\n\n### Description\n\nHi,\n\nI'm using the myokx exchange with the \"BTC/USD\" pair, I also use a 1d timeframe.\nBut the candles values are all the sames, I do not know why.... here is an extract of the result that I got:\n\n[1733097600000, 92000, 99000, 92000, 99000, 0.0002933],\n[1733184000000, 99001.2, 99001.2, 99001, 99001, 0.0001],\n[1733270400000, 99001, 99001, 99001, 99001, 0],\n[1733356800000, 99001, 99001, 99001, 99001, 0],\n[1733443200000, 99001, 99001, 99001, 99001, 0],\n[1733529600000, 99001, 99001, 99001, 99001, 0],\n[1733616000000, 99001, 99001, 99001, 99001, 0],\n[1733702400000, 99001.2, 99001.2, 99001.2, 99001.2, 0.00005],\n[1733788800000, 99001.2, 99001.2, 99001.2, 99001.2, 0],\n[1733875200000, 99001.2, 99001.2, 99001.2, 99001.2, 0],\n[1733961600000, 99001.2, 99001.2, 99001.2, 99001.2, 0],\n[1734048000000, 99001.2, 99001.2, 99001.2, 99001.2, 0],\n[1734134400000, 99001.2, 99001.2, 99001.2, 99001.2, 0],\n[1734220800000, 99001.2, 99001.2, 99001.2, 99001.2, 0],\n[1734307200000, 99001.2, 99001.2, 99001.2, 99001.2, 0],\n[1734393600000, 99001.2, 99001.2, 99001.2, 99001.2, 0],\n[1734480000000, 99001.2, 99001.2, 99001.2, 99001.2, 0],\n[1734566400000, 99001.2, 99001.2, 99001.2, 99001.2, 0],\n[1734652800000, 99001.2, 99001.2, 99001.2, 99001.2, 0],\n[1734739200000, 99001.2, 99001.2, 99001.2, 99001.2, 0],\n[1734825600000, 99001.2, 99001.2, 99001.2, 99001.2, 0],\n[1734912000000, 99001.2, 99001.2, 99001.2, 99001.2, 0],\n[1734998400000, 99001.2, 99001.2, 99001.2, 99001.2, 0],\n[1735084800000, 99001.2, 99001.2, 99001.2, 99001.2, 0],\n[1735171200000, 99001.2, 99001.2, 99001.2, 99001.2, 0],\n[1735257600000, 99001.2, 99001.2, 99001.2, 99001.2, 0],\n[1735344000000, 99001.2, 99001.2, 99001.2, 99001.2, 0],\n\n...\n\nYou see, it is a flat line !\n\nBTW, here I test in \"sandbox\" mode, but even the live mode is weird !\n\n### Code\n\n```\n      const symbol = 'BTC/USD';\n      const timeframe = '1d';\n      const since = 1719957600000;\n      const limit = 204;\n      return await exchange.fetchOHLCV(symbol, timeframe, since, limit);     \n\n```\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/24949/comments",
    "author": "vd3d",
    "comments": [
      {
        "user": "sc0Vu",
        "created_at": "2025-01-20T07:30:48Z",
        "body": "@vd3d I don't see any issue when test with live api. And I think the data came from exchange directly.\n\n```\n1735257600000 |  95805.1 |  97258.8 |  93400.2 |  94202.8 | 136.32858178\n1735344000000 |  94220.9 |  95420.5 |  94061.4 |  95227.4 |  43.42473312\n1735430400000 |  95112.2 |  95170.2 |  92894.5 |  93594.3 |  66.46617885\n1735516800000 |  93530.5 |  94870.4 |  91386.3 |  92732.2 | 138.88799604\n1735603200000 |  92662.7 |  96142.8 |  91964.4 |  93505.1 | 172.65785404\n1735689600000 |  93521.6 |  95011.1 |  92840.1 |  94470.4 |   69.8014824\n1735776000000 |  94497.1 |  97789.2 |  94287.6 |  96881.7 |  83.42530987\n1735862400000 |  96927.9 |  98968.7 |  96102.5 |  98182.2 |  55.68597049\n1735948800000 |  98200.5 |  98637.2 |  97610.2 |  98236.6 |  28.95665272\n1736035200000 |  98258.1 |    98816 |  97330.8 |  98412.7 |  24.88921394\n1736121600000 |  98563.8 | 102586.9 |  97979.7 |   102286 |  86.55377929\n1736208000000 | 102297.9 | 102796.7 |  96167.5 |  96918.3 |  96.13870084\n1736294400000 |    96800 |  97193.8 |  92534.9 |    95032 | 169.26715429\n1736380800000 |  94956.4 |  95172.8 |  91185.7 |  92467.6 | 168.89246268\n1736467200000 |  92528.6 |  95811.8 |    92275 |  94767.9 | 138.63196324\n1736553600000 |  94666.8 |  94980.1 |  93849.5 |  94544.9 |  26.46155646\n1736640000000 |  94588.4 |  95354.1 |  93687.9 |  94421.9 |   38.9102092\n1736726400000 |  94508.9 |  95859.1 |  89189.1 |  94537.3 | 198.46288768\n1736812800000 |  94526.7 |  97294.8 |  94386.9 |  96570.4 | 113.19427479\n1736899200000 |  96544.5 | 100708.2 |  96482.3 |   100521 | 132.14269573\n1736985600000 | 100532.5 | 100843.4 |  97333.8 |  99979.2 | 105.61780481\n1737072000000 |  99996.5 | 105914.9 |  99996.5 |   104199 | 121.43813392\n1737158400000 | 104182.7 | 104899.7 | 102292.3 | 104484.7 | 103.01346354\n```"
      }
    ]
  },
  {
    "number": 24442,
    "title": "Issue with auth on Paradex",
    "created_at": "2024-12-04T10:02:40Z",
    "closed_at": "2024-12-04T11:38:55Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/24442",
    "body": "### Operating System\r\n\r\nwidows\r\n\r\n### Programming Languages\r\n\r\nPython\r\n\r\n### CCXT Version\r\n\r\n4.3.35\r\n\r\n### Description\r\n\r\nParadex on ccxt uses privateKey to auth, create JWT token etc.\r\nSometimes the starknet privatekey can be 63 length (65 with \"0x\" prefix). I believe it can causes issues with ccxt code that expects an hexadecimal key : \"binascii.Error: Non-base16 digit found\" when trying to retrieve balance of the account.\r\n\r\nccxt\\async_support\\paradex.py\", line 914 :\r\n```\r\n    def sign_message(self, message, privateKey):\r\n        return self.sign_hash(self.hash_message(message), privateKey[-64:])\r\n```\r\nyou can see the [-64] that doesn't work with 65 len privatekeys\r\nI tried replacing \"0x\" by \"0x0\" to have a hexadecimal key but it leads to an error : ccxt.base.errors.BadRequest: paradex {\"error\":\"NOT_ONBOARDED\",\"message\":\"user has never called the /onboarding endpoint\"}\r\nwhile the paradex account already exists so the user should be already onboarded I guess.\r\n\r\nI don't understand everything of this but what I am almost sure is that I get a privateKey with a length of 65 and without any modifications, it may not be suited for the signature fonctions that expects a 66 length:\r\n\r\nccxt\\async_support\\paradex.py\"\r\n```\r\n    def sign_hash(self, hash, privateKey):\r\n        signature = self.ecdsa(hash[-64:], privateKey[-64:], 'secp256k1', None)\r\n        r = signature['r']\r\n        s = signature['s']\r\n        v = self.int_to_base16(self.sum(27, signature['v']))\r\n        return '0x' + r.rjust(64, '0') + s.rjust(64, '0') + v\r\n\r\n    def sign_message(self, message, privateKey):\r\n        return self.sign_hash(self.hash_message(message), privateKey[-64:])\r\n```\r\n\r\nthank you\r\n\r\n\r\n\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/24442/comments",
    "author": "Scribulus",
    "comments": [
      {
        "user": "carlosmiei",
        "created_at": "2024-12-04T10:26:21Z",
        "body": "@Scribulus Btw, can you try to provide the private key of the ETH address and not the paradex private key?"
      },
      {
        "user": "Scribulus",
        "created_at": "2024-12-04T11:03:31Z",
        "body": "@carlosmiei oh, you are right, it requires the ETH private key, not the paradex private Key.  It was making sense to me to use the privateKey given by the paradex account I want to connect to.\r\n\r\n now it works ^^'\r\n \r\n Sorry it was confused by this"
      },
      {
        "user": "carlosmiei",
        "created_at": "2024-12-04T11:09:16Z",
        "body": "@Scribulus Right now we're using the ETH PK to derive the starknet private key, but ideally we should support both and we're checking if that is possible. "
      },
      {
        "user": "Scribulus",
        "created_at": "2024-12-04T11:21:53Z",
        "body": "@carlosmiei ok,  I guess the ETH private key is required for \"onboarding\" to paradex from ccxt.  but if the user onboard manually on the paradex app and can sign transaction with the paradex private key and the ETH wallet address only it could be better for the wallet security."
      },
      {
        "user": "carlosmiei",
        "created_at": "2024-12-04T11:36:27Z",
        "body": "@Scribulus I agree,  we will do our best to support both and avoid having to use the main wallet pk"
      },
      {
        "user": "Scribulus",
        "created_at": "2024-12-05T19:32:27Z",
        "body": "@carlosmiei Do you know if subaccounts and/or vault are available with ccxt. tried a few keys in options dict  like \"account\", \"subaccount\" when connecting or using get balance but nothing.\r\nIs it the right place to ask ?"
      }
    ]
  },
  {
    "number": 24373,
    "title": "Error setting margin type and leverage setting",
    "created_at": "2024-11-25T23:33:43Z",
    "closed_at": "2024-11-26T20:03:04Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/24373",
    "body": "### Operating System\n\nWin10\n\n### Programming Languages\n\nPython\n\n### CCXT Version\n\n4.4.33\n\n### Description\n\nError setting margin type and leverage setting 1- 'binance' object has no attribute 'fapiPrivate_post_margintype' 2- 'binance' object has no attribute 'fapiPrivate_post_leverage'\n\n### Code\n\n```# Setting margin\r\ndef set_margin_type(symbol, margin_type='ISOLATED'):\r\n    try:\r\n        market = binance.market(symbol)\r\n        params = {\r\n            'symbol': market['id'],\r\n            'marginType': margin_type,\r\n        }\r\n        response = binance.fapiPrivate_post_margintype(params)\r\n        print(f\"Margin type for {symbol} set at {margin_type}\")\r\n    except Exception as e:\r\n        print(f\"Error when setting margin type: {e}\")\r\n\r\n# leverage setting\r\ndef set_leverage(symbol, leverage):\r\n    try:\r\n        market = binance.market(symbol)\r\n        params = {\r\n            'symbol': market['id'],\r\n            'leverage': leverage,\r\n        }\r\n        response = binance.fapiPrivate_post_leverage(params)\r\n        print(f\"Leverage for {symbol} set at {leverage}x\")\r\n    except Exception as e:\r\n        print(f\"Error leverage setting : {e}\")\r\n\r\n# TESTS\r\ndef run_tests():\r\n    sync_time()\r\n    test_balance()  # Balance check\r\n    fetch_ohlcv('ETH/USDT', '1H')  \r\n    test_order('ETH/USDT', 0.05) \r\n    set_margin_type('ETH/USDT', 'ISOLATED')  \r\n    set_leverage('ETH/USDT', 10)  \r\n\r\nif __name__ == '__main__':\r\n    run_tests()\r\n\u2002\u2002\r\n\r\n```\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/24373/comments",
    "author": "Borodacmd",
    "comments": [
      {
        "user": "sc0Vu",
        "created_at": "2024-11-26T03:20:10Z",
        "body": "@Borodacmd You can use `fapiprivate_post_leverage` and `fapiprivate_post_margintype` directly, or call the unified methods `set_leverage` and `set_margin_mode`."
      }
    ]
  },
  {
    "number": 24358,
    "title": "bybit perpetual contract unable to fetch ohlcv",
    "created_at": "2024-11-24T13:30:57Z",
    "closed_at": "2024-11-25T04:59:58Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/24358",
    "body": "### Operating System\n\nWindows\n\n### Programming Languages\n\nPython\n\n### CCXT Version\n\n_No response_\n\n### Description\n\nUnable to retrieve ohlcv for ticker in linear but no spot.\r\n\r\nticker sample: MAJORUSDT , USUALUSDT\r\nBoth ticker was able to extract from exchange.fetch_tickers but getting error \"ccxt.base.errors.BadSymbol: bybit does not have market symbol MAJORUSDT\"\r\n\n\n### Code\n\n```python\r\nimport ccxt\r\nimport pprint\r\n\r\n# Initialize Bybit exchange\r\nexchange = ccxt.bybit({\r\n    'enableRateLimit': True,\r\n})\r\n\r\n# Function to get the symbol list ending with USDT\r\ndef get_symbol_list():\r\n    try:\r\n        # Fetch all tickers with category 'linear'\r\n        tickers = exchange.fetch_tickers(params={'category': 'linear'})\r\n\r\n        processed_symbols = [symbol for symbol in tickers.keys() if symbol.endswith(\"USDT\")]\r\n\r\n        return processed_symbols\r\n\r\n    except ccxt.NetworkError as e:\r\n        print(f\"Network error: {e}\")\r\n    except ccxt.ExchangeError as e:\r\n        print(f\"Exchange error: {e}\")\r\n    except Exception as e:\r\n        print(f\"An error occurred: {e}\")\r\n\r\n# Get the list of linear symbols with USDT\r\nsymbols = get_symbol_list()\r\ndef get_kline_data(symbol, interval='1m', limit=1):\r\n    exchange.load_markets()\r\n    return exchange.fetch_ohlcv(symbol, timeframe=interval, limit=limit,params={'category': 'linear'})\r\nfor symbol in symbols:\r\n    pprint.pprint(get_kline_data(symbol))\r\n```",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/24358/comments",
    "author": "amiglesia",
    "comments": [
      {
        "user": "carlosmiei",
        "created_at": "2024-11-24T14:13:50Z",
        "body": "Hello @amiglesia,\r\n\r\nFirst of all I would suggest using the unified symbols instead to avoid clashes\r\n\r\nIn this case\r\n```\r\nMAJOR/USDT => spot\r\nMAJOR/USDT:USDT => linear perp\r\n```\r\n\r\nRegarding your issue, I don't think that bybit provides the spot `MAJOR/USDT` market hence the error you're getting"
      },
      {
        "user": "amiglesia",
        "created_at": "2024-11-24T14:32:00Z",
        "body": "Hi @carlosmiei \r\nThank you for quick response.\r\n\r\nYes, i also tried the unified symbol manually.\r\n```python\r\npprint.pprint(exchange.fetch_ohlcv('MAJOR/USDT:USDT'))\r\npprint.pprint(exchange.fetch_ohlcv('MAJOR/USDT'))\r\npprint.pprint(exchange.fetch_ohlcv('MAJORUSDT'))\r\n```\r\nbut all instances leads to error.\r\n```\r\nccxt.base.errors.BadSymbol: bybit does not have market symbol MAJORUSDT\r\nccxt.base.errors.BadSymbol: bybit does not have market symbol MAJOR/USDT:USDT\r\nccxt.base.errors.BadSymbol: bybit does not have market symbol MAJOR/USDT\r\n```\r\n\r\nalso using the exchange.fetch_tickers(params={'category': 'linear'})\r\nreturn the ticker MAJORUSDT while other in their linear perp symbol\r\n```\r\n'MAGIC/USDT:USDT'\r\n'MAJORUSDT'\r\n'MANA/USDT:USDT'\r\n'MANEKI/USDT:USDT'\r\n```"
      },
      {
        "user": "carlosmiei",
        "created_at": "2024-11-24T14:59:25Z",
        "body": "@amiglesia \r\n\r\nAre you sure that your markets are updated? If you have a long running instance can you please try to do `exchange.load_markets(True)` to refresh the cache?\r\n\r\nI just tested it and seems to be working as expected\r\n\r\n```\r\n p bybit fetchOHLCV \"MAJOR/USDT:USDT\" 1h None 5 --no-keys\r\nPython v3.12.3\r\nCCXT v4.4.33\r\nbybit.fetchOHLCV(MAJOR/USDT:USDT,1h,None,5)\r\n[[1732442400000, 1.3969, 1.4178, 1.366, 1.3681, 5493.3],\r\n [1732446000000, 1.3681, 1.4353, 1.3236, 1.33, 12656.7],\r\n [1732449600000, 1.33, 1.379, 1.02, 1.13, 130550.8],\r\n [1732453200000, 1.13, 1.241, 1.13, 1.182, 44810.0],\r\n [1732456800000, 1.182, 1.1952, 1.1179, 1.1585, 22694.8]]\r\n```\r\n"
      },
      {
        "user": "gcheng24",
        "created_at": "2024-11-25T01:27:38Z",
        "body": "@amiglesia I got this error too and updating the ccxt module fixed it"
      }
    ]
  },
  {
    "number": 24323,
    "title": "Futures disabled for Spanish accounts",
    "created_at": "2024-11-20T19:35:09Z",
    "closed_at": "2024-11-21T18:33:02Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/24323",
    "body": "### Operating System\n\n_No response_\n\n### Programming Languages\n\n_No response_\n\n### CCXT Version\n\n_No response_\n\n### Description\n\nIt seems that futures are not allowed anymore in Spain, so I can\u00b4t access to the fapi anymore. It is possible to configure ccxt to use sapi instead?\n\n### Code\n\n```\r\n\u2002\u2002\r\n\r\n```\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/24323/comments",
    "author": "jmunozvalencia",
    "comments": [
      {
        "user": "carlosmiei",
        "created_at": "2024-11-20T21:59:23Z",
        "body": "Hello @jmunozvalencia,\r\n\r\nsapi should only be used to trade spot markets whereas fapi is the API for futures trading. \r\n\r\nIf you can't access it from spain, you have to find an alternative if you still want to trade futures but that alternative is not related to CCXT there's nothing we can do on our side to lift that block. \r\n\r\n"
      },
      {
        "user": "jmunozvalencia",
        "created_at": "2024-11-21T18:02:53Z",
        "body": "It seems that fetch_my_trades uses fapi by  default and that\u015b is able to return the spot trades, however it is not longer working anymore because futures are not allowed anymore. My question is if it is possible to change fetch_my_trades to use sapi instead. Thanks"
      },
      {
        "user": "carlosmiei",
        "created_at": "2024-11-21T18:17:26Z",
        "body": "@jmunozvalencia \r\n\r\nIf you provide a `spot` symbol, then ccxt will use `sapi`, if you provide a perp/future `symbol` ccxt will use `fapi` "
      },
      {
        "user": "jmunozvalencia",
        "created_at": "2024-11-21T18:24:52Z",
        "body": "You are right, I was getting all the trades for the symbols returned in exchange.symbols. That includes the perp/future symbols and was failing because I don\u00b4t have access to fapi. However, if I only use the spot symbols, it uses sapi and it works fine. Thanks, problem solved!"
      }
    ]
  },
  {
    "number": 23990,
    "title": "CoinEx errror: The endpoint has been deprecated",
    "created_at": "2024-10-14T21:14:59Z",
    "closed_at": "2024-10-15T11:30:57Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/23990",
    "body": "### Operating System\n\nUbuntu 22.04.4 LTS\n\n### Programming Languages\n\nPHP\n\n### CCXT Version\n\n4.3.5\n\n### Description\n\n2024-10-15 00:04:56,708 ERROR coinex **The endpoint has been deprecated. Please use the new version of this endpoint.**: Traceback (most recent call last):\r\n  File \".../main.py\", line 145, in handle_all_orderbooks\r\n    start_order = await **coinex.create_limit_order**(symbol, start_side, amount, start_price)\r\n  File \"/usr/local/lib/python3.10/dist-packages/ccxt/async_support/base/exchange.py\", line 1488, in create_limit_order\r\n    return await self.create_order(symbol, 'limit', side, amount, price, params)\r\n  File \"/usr/local/lib/python3.10/dist-packages/ccxt/async_support/coinex.py\", line 2226, in create_order\r\n    response = await self.v1PrivatePostOrderLimit(request)\r\n  File \"/usr/local/lib/python3.10/dist-packages/ccxt/async_support/base/exchange.py\", line 816, in request\r\n    return await self.fetch2(path, api, method, params, headers, body, config)\r\n  File \"/usr/local/lib/python3.10/dist-packages/ccxt/async_support/base/exchange.py\", line 813, in fetch2\r\n    return await self.fetch(request['url'], request['method'], request['headers'], request['body'])\r\n  File \"/usr/local/lib/python3.10/dist-packages/ccxt/async_support/base/exchange.py\", line 243, in fetch\r\n    self.handle_errors(http_status_code, http_status_text, url, method, headers, http_response, json_response, request_headers, request_body)\r\n  File \"/usr/local/lib/python3.10/dist-packages/ccxt/async_support/coinex.py\", line 5373, in handle_errors\r\n    raise ExchangeError(feedback)\r\nccxt.base.errors.ExchangeError: coinex **The endpoint has been deprecated. Please use the new version of this endpoint.**\n\n### Code\n\n```\r\n\u2002\u2002\r\n\r\n```\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/23990/comments",
    "author": "grozz97",
    "comments": [
      {
        "user": "grozz97",
        "created_at": "2024-10-14T22:40:38Z",
        "body": "Probably the problem is in the old version of CCXT?"
      },
      {
        "user": "sc0Vu",
        "created_at": "2024-10-15T07:19:45Z",
        "body": "@grozz97 Can you upgrade ccxt and try?"
      },
      {
        "user": "carlosmiei",
        "created_at": "2024-10-15T10:49:42Z",
        "body": "Hello @grozz97, correct that was updated in the meantime.\r\n\r\nCan you please upgrade and try again? "
      }
    ]
  },
  {
    "number": 23797,
    "title": "HTX watchTicker does not return bid and ask",
    "created_at": "2024-09-24T07:40:03Z",
    "closed_at": "2024-09-24T07:57:01Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/23797",
    "body": "### Operating System\n\n_No response_\n\n### Programming Languages\n\nJavaScript\n\n### CCXT Version\n\n4.3.91\n\n### Description\n\nHTX watchTicker(\"\") does not return bid and ask. Returns undefined.\n\n### Code\n\n```\r\n\u2002\u2002\r\n\r\n```\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/23797/comments",
    "author": "iht76",
    "comments": [
      {
        "user": "carlosmiei",
        "created_at": "2024-09-24T07:55:37Z",
        "body": "Hello @iht76, it is missing because the API does not provide them, as you can see inside `info`\r\n\r\n```\r\nCCXT v4.4.6\r\nhtx.watchTicker (BTC/USDT)\r\n{\r\n  symbol: 'BTC/USDT',\r\n  timestamp: 1727164505734,\r\n  datetime: '2024-09-24T07:55:05.734Z',\r\n  high: 63829.7,\r\n  low: 62717.09,\r\n  bid: undefined,\r\n  bidVolume: undefined,\r\n  ask: undefined,\r\n  askVolume: undefined,\r\n  vwap: 63294.04601827882,\r\n  open: 63552.08,\r\n  close: 63542.1,\r\n  last: 63542.1,\r\n  previousClose: undefined,\r\n  change: -9.98,\r\n  percentage: -0.0157036559621652,\r\n  average: 63547.09,\r\n  baseVolume: 3828.1051343695563,\r\n  quoteVolume: 242296262.53759614,\r\n  info: {\r\n    id: 346667813615,\r\n    low: 62717.09,\r\n    high: 63829.7,\r\n    open: 63552.08,\r\n    close: 63542.1,\r\n    vol: 242296262.53759614,\r\n    amount: 3828.1051343695563,\r\n    version: 346667813615,\r\n    count: 3087310\r\n  }\r\n}\r\n```\r\n"
      }
    ]
  },
  {
    "number": 23650,
    "title": "Gateio futures does not work with CCXT Pro",
    "created_at": "2024-09-05T22:51:29Z",
    "closed_at": "2024-09-08T15:10:31Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/23650",
    "body": "### Operating System\n\nWindows 11\n\n### Programming Languages\n\nPHP\n\n### CCXT Version\n\n4.3.96\n\n### Description\n\nHello! When I use 'defaultType' => 'swap' in the constructor parameters and then use the create_order_ws method, I get an open position on spot market instead of futures. Is this a bug? Thank you.\n\n### Code\n\n```\r\n$config = [\r\n    'apiKey' => $this->key,\r\n    'secret' => $this->secret,\r\n    'options' => [\r\n        'defaultType' => 'swap' // for perpetual futures\r\n    ],\r\n];\r\n$this->gateWs = new \\ccxt\\pro\\gateio($config);\r\n\r\n/* some other code*/\r\n\r\n$data = yield $this->gateWs->create_order_ws(\r\n    'XRP/USDT',\r\n    'market',\r\n    'buy',\r\n    10,\r\n    $this->tickers['XRP']\r\n); // This opens an order on the spot market, not futures\r\n\r\n```\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/23650/comments",
    "author": "Jekamajor",
    "comments": [
      {
        "user": "sc0Vu",
        "created_at": "2024-09-05T23:04:00Z",
        "body": "@Jekamajor The symbol represents spot market. The market id would be XRP/USDT:USDT for swap. Could you try this market?"
      },
      {
        "user": "Jekamajor",
        "created_at": "2024-09-06T08:50:43Z",
        "body": "> @Jekamajor The symbol represents spot market. The market id would be XRP/USDT:USDT for swap. Could you try this market?\r\n\r\nYes, thanks, with XRP/USDT:USDT  the request goes to futures, but now I'm getting this exception message after calling the create_order_ws method \r\n\r\n`{\"header\":{\"response_time\":\"1725612393633\",\"status\":\"400\",\"channel\":\"futures.order_place\",\"event\":\"api\",\"client_id\":\"11.22.33.44-0xc13d915541\"},\"data\":{\"errs\":{\"label\":\"INVALID_REQUEST\",\"message\":\"Mismatch type string with value number \\\"at index 58: mismatched type with value\\\\n\\\\n\\\\t:\\\\\\\"usdt\\\\\\\",\\\\\\\"price\\\\\\\":0,\\\\\\\"tif\\\\\\\":\\\\\\\"ioc\\\\\\\",\\\\\\\"t\\\\n\\\\t................^...............\\\\n\\\"\"}},\"request_id\":\"10\"}`"
      },
      {
        "user": "carlosmiei",
        "created_at": "2024-09-06T10:46:29Z",
        "body": "@Jekamajor Can you show us the message sent to the exchange please?"
      },
      {
        "user": "carlosmiei",
        "created_at": "2024-09-06T11:10:55Z",
        "body": "@Jekamajor managed to reproduce the issue, working on a fix right now"
      },
      {
        "user": "Jekamajor",
        "created_at": "2024-09-06T11:31:05Z",
        "body": "> @Jekamajor Can you show us the message sent to the exchange please?\r\n\r\nIf I understood you correctly, here is the log after enabling verbose mode after calling create_order_ws method\r\n\r\n```2024-09-06T13:25:09+02:00 sending {\"id\":\"authenticated\",\"time\":1725621907,\"channel\":\"futures.login\",\"event\":\"api\",\"payload\":{\"req_id\":\"authenticated\",\"timestamp\":\"1725621907\",\"api_key\":\"xxx\",\"signature\":\"yyy\",\"req_param\":[]}}\r\n2024-09-06T13:25:09+02:00 on_message {\"header\":{\"response_time\":\"1725621911059\",\"status\":\"200\",\"channel\":\"futures.login\",\"event\":\"api\",\"client_id\":\"11.22.33.44-0xc2ebc55e00\"},\"data\":{\"result\":{\"uid\":\"7385430\",\"api_key\":\"xxx\"}},\"request_id\":\"authenticated\"}\r\n2024-09-06T13:25:09+02:00 sending {\"id\":\"8\",\"time\":1725621909,\"channel\":\"futures.order_place\",\"event\":\"api\",\"payload\":{\"req_id\":\"8\",\"timestamp\":\"1725621909\",\"api_key\":\"xxx\",\"signature\":\"yyy\",\"req_param\":{\"contract\":\"XRP_USDT\",\"size\":10,\"settle\":\"usdt\",\"price\":0,\"tif\":\"ioc\",\"text\":\"t-8aa266b5785551c5\",\"textIsRequired\":true}}}\r\n2024-09-06T13:25:10+02:00 on_message {\"header\":{\"response_time\":\"1725621911413\",\"status\":\"200\",\"channel\":\"futures.order_place\",\"event\":\"api\",\"client_id\":\"11.22.33.44-0xc2ebc55e00\",\"conn_id\":\"56932c...83\",\"trace_id\":\"9b4ad1d0...a010d03cbbcf6cc\"},\"data\":{\"result\":{\"req_id\":\"8\",\"api_key\":\"xxx\",\"timestamp\":\"1725621909\",\"signature\":\"yyy\",\"trace_id\":\"9b4ad1d0...f6cc\",\"text\":\"\",\"req_header\":{\"trace_id\":\"9b4ad1d...bcf6cc\"},\"req_param\":{\"size\":10,\"settle\":\"usdt\",\"price\":0,\"tif\":\"ioc\",\"text\":\"t-8aa266b5785551c5\",\"textIsRequired\":true,\"contract\":\"XRP_USDT\"}}},\"request_id\":\"8\",\"ack\":true}\r\n2024-09-06T13:25:10+02:00 on_message {\"header\":{\"response_time\":\"1725621911413\",\"status\":\"400\",\"channel\":\"futures.order_place\",\"event\":\"api\",\"client_id\":\"11.22.33.44-0xc2ebc55e00\"},\"data\":{\"errs\":{\"label\":\"INVALID_REQUEST\",\"message\":\"Mismatch type string with value number \\\"at index 35: mismatched type with value\\\\n\\\\n\\\\t:\\\\\\\"usdt\\\\\\\",\\\\\\\"price\\\\\\\":0,\\\\\\\"tif\\\\\\\":\\\\\\\"ioc\\\\\\\",\\\\\\\"t\\\\n\\\\t................^...............\\\\n\\\"\"}},\"request_id\":\"8\"}```"
      },
      {
        "user": "carlosmiei",
        "created_at": "2024-09-06T11:34:01Z",
        "body": "@Jekamajor Thanks, the issue will be fixed in the linked PR."
      },
      {
        "user": "carlosmiei",
        "created_at": "2024-09-08T13:22:47Z",
        "body": "@Jekamajor Can you please update your ccxt version and try again? It should be working now"
      }
    ]
  },
  {
    "number": 23610,
    "title": "bybit market transaction fee is wrong",
    "created_at": "2024-09-01T11:09:13Z",
    "closed_at": "2024-09-08T13:30:05Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/23610",
    "body": "### Operating System\n\nwindows 11\n\n### Programming Languages\n\nJavaScript\n\n### CCXT Version\n\n4.3.93\n\n### Description\n\ntaker fee from exchange.markets[symbol] returns 0.006 while from bybit it should be 0.0550 % or 0.0440 % (after discount).\r\n\r\nsymbol is of any linear perpetual.\r\n\n\n### Code\n\n```\r\n\u2002\u2002\r\n\r\n```\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/23610/comments",
    "author": "oaixnomis",
    "comments": [
      {
        "user": "sc0Vu",
        "created_at": "2024-09-02T03:00:56Z",
        "body": "@oaixnomis That's the default value. You can get fee with `fetchTradingFees` function."
      },
      {
        "user": "oaixnomis",
        "created_at": "2024-09-02T07:25:06Z",
        "body": "> @oaixnomis That's the default value. You can get fee with `fetchTradingFees` function.\r\n\r\nthanks for the explain. is this default behavior just for bybit or for other exchanges as well?"
      },
      {
        "user": "carlosmiei",
        "created_at": "2024-09-08T13:30:05Z",
        "body": "@oaixnomis Yes, the fee inside market is the generic one whereas `fetchTradingFees` uses a private endpoint (most of the time) and returns your own fee. "
      }
    ]
  },
  {
    "number": 23587,
    "title": "ModuleNotFoundError: No module named 'importlib.metadata'",
    "created_at": "2024-08-30T14:29:16Z",
    "closed_at": "2024-09-03T03:12:37Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/23587",
    "body": "### Operating System\n\ncentos7\n\n### Programming Languages\n\nPython\n\n### CCXT Version\n\n4.3.90\n\n### Description\n\ntoday I upgrade my ccxt to 4.3.90,but when i run my py script ,there is an error: ModuleNotFoundError: No module named 'importlib.metadata',my python verion is 3.7.5\n\n### Code\n\n```\r\n\u2002\u2002\r\n\r\n```\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/23587/comments",
    "author": "y0rkl4u",
    "comments": [
      {
        "user": "carlosmiei",
        "created_at": "2024-08-30T15:35:53Z",
        "body": "Hello @y0rkl4u,\r\nIs it possible to update your Python version to at least 3.8? Python 3.7 is not officially supported "
      }
    ]
  },
  {
    "number": 23393,
    "title": "Binance fetchLedger () supports contract wallets only",
    "created_at": "2024-08-12T09:28:21Z",
    "closed_at": "2024-08-12T09:59:09Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/23393",
    "body": "### Operating System\n\nWindows\n\n### Programming Languages\n\n_No response_\n\n### CCXT Version\n\n4.3.79\n\n### Description\n\nUsing C#, since is timestamp\r\n\r\nCalling\r\n```\r\nDictionary<string, object> paramEx = new Dictionary<string, object>\r\n{ \r\n    { \"paginate\", true }\r\n};\r\nledger = await exchange.fetchLedger(null, since, null, paramEx) as List<object>\r\n```\r\nI receive\r\nExchangeErrorbinance fetchLedger() supports contract wallets only\r\n\r\nNeither in Binance nor in ccxt docs I was able to find what that means or what contract wallets would be. I would require a solution to pull ALL kinds of movements from Binance including funding, deposits, withdrawals and trades. Thank you !\n\n### Code\n\n```\r\nDictionary<string, object> paramEx = new Dictionary<string, object>\r\n{ \r\n    { \"paginate\", true }\r\n};\r\nledger = await exchange.fetchLedger(null, since, null, paramEx) as List<object>\r\n```\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/23393/comments",
    "author": "landogarner7",
    "comments": [
      {
        "user": "sc0Vu",
        "created_at": "2024-08-12T09:50:16Z",
        "body": "@landogarner7 It seems fetchLedger is for contract wallets only (swap or option symbol). Here are other functions you could use `fetchTransfers`, `fetchWithdrawals` and `fetchDeposits`. Let us know if you find anything."
      }
    ]
  },
  {
    "number": 23352,
    "title": "load_markets().keys() differ from fetch_tickers()",
    "created_at": "2024-08-07T13:52:52Z",
    "closed_at": "2024-08-07T15:30:18Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/23352",
    "body": "### Operating System\n\nWin 10\n\n### Programming Languages\n\nPython\n\n### CCXT Version\n\n4.3.73\n\n### Description\n\nI expect the code below to produce the same numbers (2542/2542), but it actually prints (2542/437). Why is this happening? It\u2019s particularly strange because the markets from load_markets are currently trading, yet fetch_tickers does not display them. This function (fetch_tickers) should be used for active tickers.\n\n### Code\n\n```\r\nasync def debug():\r\n    exchange = ccxt.bybit({logging_data})\r\n    markets = await exchange.load_markets(True)\r\n    tickers = await exchange.fetch_tickers()\r\n    print(len(markets.keys()))\r\n    print(len(tickers))\r\n    await exchange.close()\r\nasyncio.run(debug())\r\n\r\n```\r\nresult\r\n```\r\n2542\r\n437\r\n```",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/23352/comments",
    "author": "kapedalex",
    "comments": [
      {
        "user": "carlosmiei",
        "created_at": "2024-08-07T15:20:39Z",
        "body": "Hello @kapedalex, `loadMarkets/fetchMarkets` is a \"special\" function that performs several calls to load all the available markets (swap, spot, options, etc) and currencies.  (most of the markets you see are options and delivery futures)\r\n\r\n`fetchTicker/fetchTickers` only performs one rest call, so they can only load one part of the markets. If you want to load all of them you need to call `fetch_tickers` multiple types using `type` in `params`, example:\r\n\r\n\r\n```Python\r\nswap_tickers = await bybit.fetch_tickers() # by default returns linear swaps\r\nspot_tickers = await bybit.fetch_tickers(params = {'type':'spot'})\r\ninverse_tickers = await bybit.fetch_tickers(params = {'subType':'inverse'})\r\noption_tickers = await bybit.fetch_tickers(params = {'type':'option'})\r\n```\r\n(ofc you can use asyncio.gather and do them concurrently)\r\n\r\n"
      }
    ]
  },
  {
    "number": 23323,
    "title": "kucoin Invalid KC-API-TIMESTAMP",
    "created_at": "2024-08-04T13:19:26Z",
    "closed_at": "2024-08-04T19:53:51Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/23323",
    "body": "### Operating System\r\n\r\n10\r\n\r\n### Programming Languages\r\n\r\nPHP\r\n\r\n### CCXT Version\r\n\r\n4.3.73\r\n\r\n### Description\r\n\r\nSince today an error started to appear when requesting a balance from KuCoin exchange:\r\nccxt\\InvalidNonce\r\nkucoin Invalid KC-API-TIMESTAMP\r\n\r\nThe method `$exchange->load_time_difference();` does not help\r\n\r\n### Code\r\n\r\n```PHP\r\n$exchangeClass = \"\\\\ccxt\\\\kucoin\";\r\n$exchange      = new $exchangeClass([\r\n  'apiKey'   => $account['api_key'],\r\n  'secret'   => $account['api_secret'],\r\n  'password' => $account['api_password'],\r\n]);\r\n\r\n$timeDifference = $exchange->load_time_difference();\r\n// print_r($timeDifference); // returns: 5528\r\n\r\n$balance = $exchange->fetchBalance([\r\n  'type' => 'trade',\r\n]);\r\nprint_r($balance);\r\n// ccxt\\InvalidNonce\r\n// kucoin Invalid KC-API-TIMESTAMP\r\n```\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/23323/comments",
    "author": "Elferboy",
    "comments": [
      {
        "user": "carlosmiei",
        "created_at": "2024-08-04T16:03:48Z",
        "body": "Hello @Elferboy,\r\nNothing has changed on the CCXT side and I just tested and it worked.\r\n\r\nCan you please check if your clock is synced with UTC? If not I would try to sync it before making the request.\r\n\r\n```\r\n ph kucoin fetchBalance                                   \r\nPHP v8.3.7\r\nCCXT version :4.3.73\r\nkucoin->fetchBalance()\r\nArray\r\n(\r\n    [info] => Array\r\n        (\r\n            [code] => 200000\r\n            [data] => Array\r\n                (\r\n                    [0] => Array\r\n                        (\r\n                            [id] => 64feeec4cd03f30007aa5a8f\r\n                            [currency] => LTC\r\n                            [type] => trade\r\n                            [balance] => 0.211021\r\n                            [available] => 0.211021\r\n                            [holds] => 0\r\n                        )\r\n\r\n                    [1] => Array\r\n                        (\r\n                            [id] => 668635c2ff2dfe000796f545\r\n                            [currency] => ADA\r\n                            [type] => trade\r\n                            [balance] => 20.47\r\n                            [available] => 20.47\r\n                            [holds] => 0\r\n                        )\r\n\r\n                    [2] => Array\r\n                        (\r\n                            [id] => 66\r\n```\r\n"
      },
      {
        "user": "Elferboy",
        "created_at": "2024-08-04T19:53:51Z",
        "body": "Thank you! I synchronized the time with the \"time.windows.com\" server and it started working fine. Too bad that the `load_time_difference()` method does not work for kucoin to equalize the difference.\r\nNow the `load_time_difference()` method shows 1205 microseconds difference."
      }
    ]
  },
  {
    "number": 23034,
    "title": "dont understand the error message and what to do with / please help in details",
    "created_at": "2024-07-09T13:50:36Z",
    "closed_at": "2024-08-06T17:28:09Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/23034",
    "body": "### Operating System\n\nWindows 11\n\n### Programming Languages\n\n_No response_\n\n### CCXT Version\n\n4.1.78.\n\n### Description\n\nHello Team!\r\n\r\nI use orders, limits, markets, stop limits, stop markets as well.\r\nSomehow I have issue with - not all the time, but sometimes - with simple market order.\r\n\r\nThe order structure is this:\r\n\r\nexchange.createOrder(symbol, 'market', order_side, amount, params={'positionSide': pos_side})\r\n\r\nAll the referenced variables have proper values that match with exchange requirements.\r\n\r\nThe error message I receive is this:\r\n  File \"C:\\Users\\Gabor\\PycharmProjects\\ccxt\\venv\\lib\\site-packages\\ccxt\\binance.py\", line 4279, in create_order\r\n    request = self.create_order_request(symbol, type, side, amount, price, params)\r\n  File \"C:\\Users\\Gabor\\PycharmProjects\\ccxt\\venv\\lib\\site-packages\\ccxt\\binance.py\", line 4457, in create_order_request\r\n    request['quantity'] = self.amount_to_precision(symbol, amount)\r\n  File \"C:\\Users\\Gabor\\PycharmProjects\\ccxt\\venv\\lib\\site-packages\\ccxt\\base\\exchange.py\", line 3950, in amount_to_precision\r\n    raise InvalidOrder(self.id + ' amount of ' + market['symbol'] + ' must be greater than minimum amount precision of ' + self.number_to_string(market['precision']['amount']))\r\nccxt.base.errors.InvalidOrder: binanceusdm amount of SOL/USDC:USDC must be greater than minimum amount precision of 2\r\n\r\nI use amount precision with this code:\r\ndef adjust_amount(symbol, amount):\r\n    exchange.load_markets()\r\n    symbol_formatted = symbol.replace(\"USDC\", \"/USDC:USDC\")\r\n    market = exchange.markets[symbol_formatted]\r\n    amount_precision = market['precision']['amount']\r\n    # Calculate the power of 10 for the required precision\r\n    power_of_ten = 10 ** amount_precision\r\n    # Adjust the amount using ceil and power of 10\r\n    adjusted_amount = math.ceil(amount * power_of_ten) / power_of_ten\r\n    return adjusted_amount\r\n\r\nCan you please help me to understand what I do wrong?\r\nActually I dont understand the problem exactly.\r\nIf you can give me detailed explanation what is the background of the issue, like the concept behind it, I would appreciate so much!\r\n\r\nThank you!\r\n\r\nKind regards,\r\nGabor\n\n### Code\n\nexchange.createOrder(symbol, 'market', order_side, amount, params={'positionSide': pos_side})\r\n\r\n\r\ndef adjust_amount(symbol, amount):\r\n    exchange.load_markets()\r\n    symbol_formatted = symbol.replace(\"USDC\", \"/USDC:USDC\")\r\n    market = exchange.markets[symbol_formatted]\r\n    amount_precision = market['precision']['amount']\r\n    # Calculate the power of 10 for the required precision\r\n    power_of_ten = 10 ** amount_precision\r\n    # Adjust the amount using ceil and power of 10\r\n    adjusted_amount = math.ceil(amount * power_of_ten) / power_of_ten\r\n    return adjusted_amount",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/23034/comments",
    "author": "Bgsolid",
    "comments": [
      {
        "user": "sc0Vu",
        "created_at": "2024-07-10T05:39:21Z",
        "body": "@Bgsolid \r\n\r\nThe error represents that the amount should be bigger than the `market['precision']['amount']`. Take `ETH/USDT` market in kucoin as example, the market data is:\r\n```JS\r\n{\r\n  id: 'ETH-USDT',\r\n  symbol: 'ETH/USDT',\r\n  base: 'ETH',\r\n  quote: 'USDT',\r\n  baseId: 'ETH',\r\n  quoteId: 'USDT',\r\n  type: 'spot',\r\n  spot: true,\r\n  margin: true,\r\n  swap: false,\r\n  future: false,\r\n  option: false,\r\n  active: true,\r\n  contract: false,\r\n  taker: 0.001,\r\n  maker: 0.001,\r\n  precision: { amount: 1e-7, price: 0.01 },\r\n  limits: {\r\n    leverage: {},\r\n    amount: { min: 0.0001, max: 10000000000 },\r\n    price: {},\r\n    cost: { min: 0.01, max: 999999999 }\r\n  },\r\n  tierBased: true,\r\n  percentage: true,\r\n  tiers: {\r\n    taker: [\r\n      [ 0, 0.001 ],\r\n      [ 50, 0.001 ],\r\n      [ 200, 0.0009 ],\r\n      [ 500, 0.0008 ],\r\n      [ 1000, 0.0007 ],\r\n      [ 2000, 0.0007 ],\r\n      [ 4000, 0.0006 ],\r\n      [ 8000, 0.0005 ],\r\n      [ 15000, 0.00045 ],\r\n      [ 25000, 0.0004 ],\r\n      [ 40000, 0.00035 ],\r\n      [ 60000, 0.0003 ],\r\n      [ 80000, 0.00025 ]\r\n    ],\r\n    maker: [\r\n      [ 0, 0.001 ],\r\n      [ 50, 0.0009 ],\r\n      [ 200, 0.0007 ],\r\n      [ 500, 0.0005 ],\r\n      [ 1000, 0.0003 ],\r\n      [ 2000, 0 ],\r\n      [ 4000, 0 ],\r\n      [ 8000, 0 ],\r\n      [ 15000, -0.00005 ],\r\n      [ 25000, -0.00005 ],\r\n      [ 40000, -0.00005 ],\r\n      [ 60000, -0.00005 ],\r\n      [ 80000, -0.00005 ]\r\n    ]\r\n  },\r\n  marginMode: { cross: true, isolated: true }\r\n}\r\n```\r\n\r\nAnd the precision of the amount is 1e-7, which means the amount should be bigger than 0.0000001."
      }
    ]
  },
  {
    "number": 23018,
    "title": "QUESTION: using of both async and sync versions of ccxt within same app",
    "created_at": "2024-07-07T20:55:19Z",
    "closed_at": "2024-07-08T11:08:24Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/23018",
    "body": "### Operating System\n\nWindows 11 / Debian\n\n### Programming Languages\n\nPython\n\n### CCXT Version\n\n4.3.15\n\n### Description\n\nHi. First thing to say is thank you for ccxt - it's a really brilliant library!\r\n\r\nI have an app written in python which is watching or fetching orderbooks at multiple exchanges - using CCXT Pro where available, or async fetch methods where not.\r\n\r\nI want to try reconfigure my app with threads for some of orderbook fetching (because, off topic, my UI is running in the same event loop as ccxt and is lagging). This means I need to use the non-async ccxt library.\r\n\r\nI still want to use watchOrderBooks for some lookups but also threaded fetches alongside. I'm loathe to create two objects for ccxt and ccxt pro however (plus running load_markets on both). Is there a way to just load the async version but fallback to the non-async method at times? Or will I always need to do both imports and create both objects?\n\n### Code\n\n```\r\n\u2002\u2002\r\n\r\n```\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/23018/comments",
    "author": "ByTheSeaL",
    "comments": [
      {
        "user": "sc0Vu",
        "created_at": "2024-07-08T03:37:38Z",
        "body": "Hi @ByTheSeaL, The async integration works differently; you'll need to initialize two exchange objects.\r\n\r\n"
      }
    ]
  },
  {
    "number": 22930,
    "title": "Retrieving open orders from different markets",
    "created_at": "2024-06-29T12:42:03Z",
    "closed_at": "2024-07-17T10:47:06Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/22930",
    "body": "### Operating System\r\n\r\nwindows 11\r\n\r\n### Programming Languages\r\n\r\n_No response_\r\n\r\n### CCXT Version\r\n\r\nlast\r\n\r\n### Description\r\n\r\nHello! i'm trying to get open orders from several exchanges, I'm using fetchOpenOrders method. Without ticker it works correctly on Bybit, but on Binance ccxt returns such error: _binance fetchOpenOrders\\(\\) WARNING: fetching open orders without specifying a symbol is rate-limited to one call per 1525 seconds. Do not call self method frequently to avoid ban. Set binance.options[\"warnOnFetchOpenOrdersWithoutSymbol\"\\] \\= False to suppress self warning message._ \r\nOn swap market it is not a problem, because I can get currently opened positions tickers and retrieve open stop orders,\r\n```\r\nfor ticker in open_positions:\r\n    await update_open_stop_orders(user, market, ticker)\r\n```\r\n while on spot such decision for limit sell orders obviously doesnt work. How is it better to handle that issue?\r\n\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/22930/comments",
    "author": "seeyoul8r",
    "comments": [
      {
        "user": "sc0Vu",
        "created_at": "2024-06-30T08:30:30Z",
        "body": "Hi @seeyoul8r, You can set `options['warnOnFetchOpenOrdersWithoutSymbol']=false` to disable the warning."
      },
      {
        "user": "seeyoul8r",
        "created_at": "2024-06-30T08:33:53Z",
        "body": "> Hi @seeyoul8r, You can set `options['warnOnFetchOpenOrdersWithoutSymbol']=false` to disable the warning.\r\n\r\nYes, but in this case I'm able to be banned due to often requests, right?"
      },
      {
        "user": "carlosmiei",
        "created_at": "2024-06-30T09:44:43Z",
        "body": "> > Hi @seeyoul8r, You can set `options['warnOnFetchOpenOrdersWithoutSymbol']=false` to disable the warning.\r\n> \r\n> Yes, but in this case I'm able to be banned due to often requests, right?\r\n\r\n@seeyoul8r Yes, you should minimize the number of requests to that endpoint without providing a symbol. Alternatively you can call it specifying a `symbol`, the rateLimit weight in that case is much lower. "
      },
      {
        "user": "seeyoul8r",
        "created_at": "2024-06-30T09:48:58Z",
        "body": "> > > Hi @seeyoul8r, You can set `options['warnOnFetchOpenOrdersWithoutSymbol']=false` to disable the warning.\r\n> > \r\n> > \r\n> > Yes, but in this case I'm able to be banned due to often requests, right?\r\n> \r\n> @seeyoul8r Yes, you should minimize the number of requests to that endpoint without providing a symbol. Alternatively you can call it specifying a `symbol`, the rateLimit weight in that case is much lower.\r\n\r\nThanks! So if i want to get all open limit sell orders on spot exchange I need to devise some logic, for example - receiving recent trades and fetch symbols from it, right?"
      },
      {
        "user": "carlosmiei",
        "created_at": "2024-07-01T09:28:06Z",
        "body": "@seeyoul8r You can do that, or upon placing an order you save the `symbol` used in a list or something so you know the symbols used to place orders. "
      },
      {
        "user": "ttodua",
        "created_at": "2024-07-16T19:23:15Z",
        "body": "I've checked this and `1 call per 1525 seconds` is a bug and we will try to fix it. \r\nin real numbers (approximately), on spot markets, querying `without symbol` `takes around 10 times more quota per each request compared to when requesting with symbol. for future markets, it takes around 40 times more quota. approximately, if you can request once per 60 Milliseconds (with symbol), without symbol you can request once per 1-2 seconds (depending market type)"
      },
      {
        "user": "ttodua",
        "created_at": "2024-07-16T19:59:33Z",
        "body": "@seeyoul8r also note, rate-limit are weight-oriented, rather than time-oriented. my above comment/example would be true when user does not make any queries within that period. however, if you are also making other queries, they would add to weight and it would increase the wait time, depending the amount of queries. in short, user is given X quota per second and user spends it according to the different requests."
      }
    ]
  },
  {
    "number": 22871,
    "title": "What is the best way to re-connect",
    "created_at": "2024-06-23T09:55:43Z",
    "closed_at": "2024-07-20T08:49:17Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/22871",
    "body": "### Operating System\n\nlinux\n\n### Programming Languages\n\nPython\n\n### CCXT Version\n\nAll\n\n### Description\n\nWhen I have any error in a webscoket stream or any forever loop what is the best practice to re-connect with exchange, for eg a network error.\r\nRight Now I am doing this: closing in case of exception and again instantiation ccxt.okx for eg.\n\n### Code\n\n```\r\n\u2002\u2002    async def stream_balance_update(self, symbol,cb):\r\n        while True:\r\n            bl = None\r\n            try:\r\n                bal = await self.exch.watch_balance(params={\"extraParams\": '{\"updateInterval\": 0}'})\r\n                bl = {}\r\n                for d in list(bal[\"free\"].keys()):\r\n                    d = Balance().load(d, bal)\r\n                    bl[d.asset] = d\r\n                # logger.info(bl)\r\n                await cb(bl) if cb else None\r\n            except Exception as e:\r\n                logger.info(type(e).__name__, e)\r\n                logger.info('stream_account_update:', bal)\r\n                logger.info(traceback.format_exc())\r\n                await self.exch.close()\r\n                self.connect()\r\n\r\n    def connect(self):\r\n        if self.exchange_name == 'okx':\r\n            self.exch = ccxt.okx({\r\n                'enableRateLimit': True,\r\n                'logger': None,\r\n                'apiKey': self.api_key,\r\n                'secret': self.secret,\r\n                \"password\": self.passphrase,\r\n            })\r\n        else:\r\n            raise Exception('Exchange not supported')\r\n\r\n\r\n```\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/22871/comments",
    "author": "duggar",
    "comments": [
      {
        "user": "carlosmiei",
        "created_at": "2024-06-23T16:43:57Z",
        "body": "Hello @duggar, \r\n\r\nYou don't need to call `self.connect` here because you don't need to recreate the instance, `self.exc.close()` should be enough to close all pending WS connections, and then the next iteration of the loop will call `watchX` again and reconnect automatically.  "
      }
    ]
  },
  {
    "number": 22779,
    "title": "C# WatchOrders Hyperliquid Subscriptions",
    "created_at": "2024-06-11T08:33:28Z",
    "closed_at": "2024-06-11T10:28:57Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/22779",
    "body": "### Operating System\r\n\r\nUbuntu 22.04\r\n\r\n### Programming Languages\r\n\r\n_No response_\r\n\r\n### CCXT Version\r\n\r\n4.3.42\r\n\r\n### Description\r\n \r\nNone of following code results in order status being received for Hyperliquid. I am using C#. I am providing walletAddress to exchange in parameters of exchange object. Has this function been tested? Does it work properly? May there be something that I am missing?\r\n\r\n### Code\r\n\r\n```\r\n\u2002\u2002var ordersTask = this.exchange.WatchOrders();\r\n   ordersTask.Wait();\r\n   Logger.Debug($\"Orders received: {ordersTask.Result.Count()}.\");\r\n\r\n   var ordersTask = this.exchange.WatchOrders(\"SOL/USDC:USDC\");\r\n   ordersTask.Wait();\r\n   Logger.Debug($\"Orders received: {ordersTask.Result.Count()}.\");\r\n\r\n\r\n```\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/22779/comments",
    "author": "JakubMartinovicHusar",
    "comments": [
      {
        "user": "carlosmiei",
        "created_at": "2024-06-11T09:46:46Z",
        "body": "@JakubMartinovicHusar I just tested and it seems to be working\r\n\r\n```\r\n npm run cli.cs -- hyperliquid WatchOrders \"SOL/USDC:USDC\" --verbose --sandbox\r\n\r\n> ccxt@4.3.42 cli.cs\r\n> dotnet run --project \"./cs/cli/cli.csproj\" hyperliquid WatchOrders SOL/USDC:USDC --verbose --sandbox\r\n\r\n[\r\n  \"SOL/USDC:USDC\"\r\n]\r\nWebSocket connected to wss://api.hyperliquid-testnet.xyz/ws\r\nSending message: {\"method\":\"subscribe\",\"subscription\":{\"type\":\"orderUpdates\",\"user\":\"0x3B3741c0EFf9C6b556Ec813e70589161F416662A\"}}\r\nOn message: {\"channel\":\"subscriptionResponse\",\"data\":{\"method\":\"subscribe\",\"subscription\":{\"type\":\"orderUpdates\",\"user\":\"0x3b3741c0eff9c6b556ec813e70589161f416662a\"}}}\r\nOn message: {\"channel\":\"orderUpdates\",\"data\":[{\"order\":{\"coin\":\"SOL\",\"side\":\"B\",\"limitPx\":\"183.75\",\"sz\":\"0.1\",\"oid\":9893803368,\"timestamp\":1718099116378,\"origSz\":\"0.1\"},\"status\":\"open\",\"statusTimestamp\":1718099116378},{\"order\":{\"coin\":\"SOL\",\"side\":\"B\",\"limitPx\":\"183.75\",\"sz\":\"0.0\",\"oid\":9893803368,\"timestamp\":1718099116378,\"origSz\":\"0.1\"},\"status\":\"filled\",\"statusTimestamp\":1718099116378}]}\r\n[\r\n  {\r\n    \"id\": \"9893803368\",\r\n    \"clientOrderId\": null,\r\n    \"timestamp\": 1718099116378,\r\n    \"datetime\": \"2024-06-11T09:45:16.378Z\",\r\n    \"lastTradeTimestamp\": null,\r\n    \"symbol\": \"SOL/USDC:USDC\",\r\n    \"type\": null,\r\n    \"side\": \"buy\",\r\n    \"price\": 183.75,\r\n    \"cost\": null,\r\n    \"average\": null,\r\n    \"amount\": null,\r\n    \"filled\": null,\r\n    \"triggerPrice\": null,\r\n    \"stopLossPrice\": null,\r\n    \"takeProfitPrice\": null,\r\n    \"remaining\": 0.0,\r\n    \"status\": \"closed\",\r\n    \"reduceOnly\": false,\r\n    \"postOnly\": false,\r\n    \"fee\": {\r\n      \"rate\": null,\r\n      \"cost\": null\r\n    },\r\n    \"trades\": [],\r\n    \"info\": {\r\n      \"order\": {\r\n        \"coin\": \"SOL\",\r\n        \"side\": \"B\",\r\n        \"limitPx\": \"183.75\",\r\n        \"sz\": \"0.0\",\r\n        \"oid\": 9893803368,\r\n        \"timestamp\": 1718099116378,\r\n        \"origSz\": \"0.1\"\r\n      },\r\n      \"status\": \"filled\",\r\n      \"statusTimestamp\": 1718099116378\r\n    }\r\n  }\r\n]\r\n```\r\n\r\n@JakubMartinovicHusar If you enable the verbose mode can you check which wallet is being used to subscribe?\r\n"
      },
      {
        "user": "JakubMartinovicHusar",
        "created_at": "2024-06-11T10:12:36Z",
        "body": "@carlosmiei thank you for answer. \r\n\r\nI have investigated it further as you suggested and it indeed works. I had to add explicit user parameter. I was using only walletAddress parameter when instantiating exchange which is eventual API wallet key. You need to specify user - wallet address to watch orders. \r\nvar ordersTask = this.exchange.WatchOrders(\r\n                        parameters: new Dictionary<string, object>(){{\"user\", \"0x...4\"}}\r\n                    );\r\n\r\n@carlosmiei thank your for your help!"
      },
      {
        "user": "carlosmiei",
        "created_at": "2024-06-11T10:23:46Z",
        "body": "@JakubMartinovicHusar Glad it worked now, but just to make it clear you just need to specify `user` if it's different from the `walletAddress`. Alternatively, you can set it in the options so you don't need to provide it manually every single time, example:\r\n\r\n```C#\r\nexchange.options[\"user\"] = \"new address\"; // will override `walletAddress` whenever it's needed\r\n```\r\n"
      }
    ]
  },
  {
    "number": 22447,
    "title": "Cancelling orders does not work on OKX",
    "created_at": "2024-05-09T14:17:59Z",
    "closed_at": "2024-05-10T11:49:08Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/22447",
    "body": "### Operating System\r\n\r\nMac OS Sonoma 14.1.1\r\n\r\n### Programming Languages\r\n\r\nPython\r\n\r\n### CCXT Version\r\n\r\n4.3.18\r\n\r\n### Description\r\n\r\nUsing the test code to open and cancel an order, it leaves an order uncancelled. Thank you for your help ahead of time.\r\n\r\n### Code\r\n\r\n```\r\n\u2002\u2002\r\ndef close_positions():\r\n    # Fetch open orders\r\n    open_orders = exchange.fetch_open_orders()\r\n\r\n    # Cancel all open orders\r\n    for order in open_orders:\r\n        exchange.cancel_order(order['id'], order['symbol'])\r\n\r\n\r\ndef test_orders():\r\n    order = exchange.create_order(symbol= symbol, type = \"market\", side = \"buy\", amount=10.0)\r\n    time.sleep(10)\r\n    #exchange.cancel_order(order['id'], symbol)\r\n    close_positions()\r\n    print(\"test complete\")\r\n\r\ntest_orders()\r\n```\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/22447/comments",
    "author": "MrMechanical",
    "comments": [
      {
        "user": "MrMechanical",
        "created_at": "2024-05-09T14:32:05Z",
        "body": "after debugging I believe the issue is with fetch_open_orders as open_orders is empty during testing\r\nopen_orders\r\n[]"
      },
      {
        "user": "sc0Vu",
        "created_at": "2024-05-10T05:23:21Z",
        "body": "@MrMechanical because the order type is market, and it would be matched when you create. You can use `fetchClosedOrders` instead."
      }
    ]
  },
  {
    "number": 22265,
    "title": "okx {\"msg\":\"Request header OK-ACCESS-PASSPHRASE incorrect.\",\"code\":\"50105\"}",
    "created_at": "2024-04-24T08:05:15Z",
    "closed_at": "2024-04-24T11:56:41Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/22265",
    "body": "### Operating System\r\n\r\nubuntu\r\n\r\n### Programming Languages\r\n\r\nJavaScript\r\n\r\n### CCXT Version\r\n\r\n^4.3.6\r\n\r\n### Description\r\n\r\nI am passing correct passphrase then also I am getting the same error again and again \r\nI have check it several times\r\n\r\n### Code\r\n\r\n```\r\n\u2002const okxExchange = new ccxt.okx({\r\n  apiKey: \"my-api-key\",\r\n  secret: \"my-secret-key\",\r\n  password: \"my-password\",\r\n  passPharse: \"Helloworldiamhere@98\",\r\n});\r\n\r\n```\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/22265/comments",
    "author": "block98ct",
    "comments": [
      {
        "user": "carlosmiei",
        "created_at": "2024-04-24T09:11:56Z",
        "body": "Hello @block98ct,\r\nyou should provide the `passphrase` as `password` to ccxt, example\r\n\r\n```Javascript\r\n\u2002const okxExchange = new ccxt.okx({\r\n  apiKey: \"my-api-key\",\r\n  secret: \"my-secret-key\",\r\n  password: \"my-api-passphrase\",\r\n});\r\n```\r\n"
      },
      {
        "user": "block98ct",
        "created_at": "2024-04-24T09:18:45Z",
        "body": "@carlosmiei Thanks for the quick response\r\nIs this the same for kucoin also??"
      },
      {
        "user": "carlosmiei",
        "created_at": "2024-04-24T09:47:04Z",
        "body": "@block98ct Yes, the api passphrase/password should always be provided as `password` to ccxt"
      }
    ]
  },
  {
    "number": 22179,
    "title": "Are users meant to update frequently?",
    "created_at": "2024-04-16T22:41:13Z",
    "closed_at": "2024-04-17T08:57:43Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/22179",
    "body": "\r\n\r\nThere is a mapping between CCXT symbols and particular exchanges and it is not clear to me whether this mapping is updated through hardcoding in the library code or dynamically though some server?\r\n\r\nIf things are hardcoded in library, does this mean we are meant to stay up to date every day or so?\r\n\r\nThanks,\r\n\r\n\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/22179/comments",
    "author": "thisismygitrepo",
    "comments": [
      {
        "user": "Dan-krm",
        "created_at": "2024-04-17T06:09:03Z",
        "body": "Hi @thisismygitrepo it's best to keep the library updated since there is constantly exchanges being updated, new features being added and bugs being fixed. But I don't think you're required to update your version for the specific reason that you specified.\r\n\r\nThe CCXT market symbols are handled through the fetchMarkets method in each individual exchange class. Most of the methods in CCXT include a call to loadMarkets which calls fetchMarkets to update and set all of the market information on the exchange."
      }
    ]
  },
  {
    "number": 22104,
    "title": "Mexc can't put a stop loss order",
    "created_at": "2024-04-09T11:34:56Z",
    "closed_at": "2024-04-10T02:14:47Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/22104",
    "body": "### Operating System\n\nwindows 11\n\n### Programming Languages\n\nPython\n\n### CCXT Version\n\n3.1.50\n\n### Description\n\nhello,\r\n\r\nI would like to create a Stop-Limit order but it's always a Limit order which is created\r\nI've tried using parameters but mexc is still creating a Limit order with no stop loss and no trigger price\r\nIt looks like neither stopPrice nor triggerPrice is taken into account\r\n\r\nany thoughts ?\r\n\r\nthanks\r\n\r\n{'id': 'C02__406344578380128256053', 'clientOrderId': None, 'timestamp': 1712662332869, 'datetime': '2024-04-09T11:32:12.869Z', 'lastTradeTimestamp': None, 'status': None, 'symbol': 'NTX/USDT', 'type': 'limit', 'timeInForce': None, 'side': 'sell', 'price': 0.1, 'stopPrice': None, 'triggerPrice': None, 'average': None, 'amount': 63, 'cost': None, 'filled': None, 'remaining': None, 'fee': None, 'trades': [], 'info': {'symbol': 'NTXUSDT', 'orderId': 'C02__406344578380128256053', 'orderListId': '-1', 'price': '0.1', 'origQty': '63', 'type': 'LIMIT', 'side': 'SELL', 'transactTime': '1712662332869'}, 'fees': [], 'lastUpdateTimestamp': None, 'postOnly': None, 'reduceOnly': None, 'takeProfitPrice': None, 'stopLossPrice': None}\r\n\n\n### Code\n\n```\r\nparams = {\r\n    'triggerPrice': 0.045,\r\n    'triggerDirection': 'below', # order will be triggered when price is above 1700\r\n    'stopPrice': 0.035,  # your stop loss price\r\n    'stopLoss': {\r\n        'type': 'limit',# or 'market', this field is not necessary if limit price is specified\r\n        'price': 0.035, # limit price for a limit stop loss order\r\n        'triggerPrice': 0.04,\r\n        'stopPrice': 0.035,\r\n    }\r\n    }\r\n```\r\n    \r\n    order = exchange.create_order('NTXUSDT', 'limit','sell', 150, 0.035, params)",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/22104/comments",
    "author": "swiinger",
    "comments": [
      {
        "user": "sc0Vu",
        "created_at": "2024-04-09T14:10:37Z",
        "body": "@swiinger do you create order in spot market? I think mexc doesn't support stop order for spot."
      }
    ]
  },
  {
    "number": 21862,
    "title": "ClosedOrders does not work on Binance Swap - ExchangeError: binance {\"code\":-4166,\"msg\":\"Search window is restricted to recent 90 days only.\"}",
    "created_at": "2024-03-21T17:19:33Z",
    "closed_at": "2024-03-22T11:56:55Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/21862",
    "body": "### Operating System\r\n\r\n_No response_\r\n\r\n### Programming Languages\r\n\r\n_No response_\r\n\r\n### CCXT Version\r\n\r\n4.2.79 \r\n\r\n### Description\r\n\r\nTry to load closed orders but doesn't work for me\r\n\r\n### Code\r\n\r\n```\r\nfetchCanceledAndClosedOrders('FET/USDT:USDT', 1705857391, 10)\r\nor\r\nfetchClosedOrders('FET/USDT:USDT', 1705857391, 10)\r\n\r\nbut SPOT pair \r\nfetchClosedOrders('FET/USDT', 1705857391, 10)\r\ndoes work\r\n\r\n```\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/21862/comments",
    "author": "tom-teamcoda",
    "comments": [
      {
        "user": "carlosmiei",
        "created_at": "2024-03-21T18:06:00Z",
        "body": "Hello @tom-teamcoda, unfortunately that's a restriction on the exchange side (spot and swap use different apis so they might have different limits/restrictions).\r\n\r\nWith that said, there's nothing ccxt can do about it. \r\n"
      },
      {
        "user": "tom-teamcoda",
        "created_at": "2024-03-21T18:07:10Z",
        "body": "I'm sorry but even with timestamp from 1 day ago it does not work "
      },
      {
        "user": "carlosmiei",
        "created_at": "2024-03-21T18:35:42Z",
        "body": "@tom-teamcoda That's because you're providing the timestamp in seconds instead of milliseconds (the unified format accepted by ccxt).\r\n\r\nCan you try that?"
      }
    ]
  },
  {
    "number": 21707,
    "title": " probit access token expired",
    "created_at": "2024-03-14T02:07:32Z",
    "closed_at": "2024-03-14T03:06:41Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/21707",
    "body": "### Operating System\n\nxampp, win10\n\n### Programming Languages\n\nPHP\n\n### CCXT Version\n\nlastest\n\n### Description\n\nHi;\r\nI've made create_order in probit exchange but got error:\r\n\r\nFatal error: Uncaught ccxt\\AuthenticationError: probit access token expired, call signIn() method in C:\\xampp\\htdocs\\main\\ccxt11t3\\php\\probit.php:1777 Stack trace: #0 C:\\xampp\\htdocs\\main\\ccxt11t3\\php\\Exchange.php(4404): ccxt\\probit->sign('new_order', 'private', 'POST', Array, NULL, NULL) #1 C:\\xampp\\htdocs\\main\\ccxt11t3\\php\\Exchange.php(4412): ccxt\\Exchange->fetch2('new_order', 'private', 'POST', Array, NULL, NULL, Array) #2 C:\\xampp\\htdocs\\main\\ccxt11t3\\php\\abstract\\probit.php(92): ccxt\\Exchange->request('new_order', 'private', 'POST', Array, NULL, NULL, Array) #3 C:\\xampp\\htdocs\\main\\ccxt11t3\\php\\probit.php(1240): ccxt\\abstract\\probit->privatePostNewOrder(Array) #4 C:\\xampp\\htdocs\\main\\ccxt11t3\\probitORDER.php(52): ccxt\\probit->create_order('BTC-USDT', 'LIMIT', 'buy', 0.0003, 50000.0) #5 {main} thrown in C:\\xampp\\htdocs\\main\\ccxt11t3\\php\\probit.php on line 1777\r\n\r\nHow can i get this worked? thank for your support!\r\n\n\n### Code\n\n```\r\n\u2002\u2002$poloniex   = new \\ccxt\\probit   (array (\r\n    'apiKey' => 'xxx',\r\n    'secret' => 'xxxx',\r\n));\r\n\r\n\r\n$poloniex_markets = $poloniex->load_markets ();\r\n$poloniex->create_order ('BTC-USDT', 'LIMIT', 'buy', 0.0001, 50000, array ('client_order_id' => '123'));\r\n\r\n\r\n\r\n\r\n```\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/21707/comments",
    "author": "haitokt",
    "comments": [
      {
        "user": "sc0Vu",
        "created_at": "2024-03-14T02:12:22Z",
        "body": "@haitokt I think you can signIn to retrieve another token."
      }
    ]
  },
  {
    "number": 21595,
    "title": " calculate_fee() missing 1 required positional argument: 'self'",
    "created_at": "2024-03-07T18:33:35Z",
    "closed_at": "2024-03-07T18:40:57Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/21595",
    "body": "### Operating System\n\nubuntu 20.04\n\n### Programming Languages\n\nPython\n\n### CCXT Version\n\n4.2.48\n\n### Description\n\nExample to reproduce : \r\n\r\nTraceback (most recent call last):\r\n  File \"/home/localuser/calculation.py\", line 30, in <module>\r\n    returned=ccxt.binance.calculate_fee(symbol=symbol, type=type, side=side,\r\nTypeError: calculate_fee() missing 1 required positional argument: 'self'\r\n\n\n### Code\n\n```\r\n\u2002exchange = ccxt.binance({\r\n    \"apiKey\": API_KEY,\r\n    \"secret\": API_SECRET\r\n})\r\n\r\nexchange.load_markets()\r\n\r\n\r\n#BUY BUY SELL\r\nsymbol = 'ETH/BTC'\r\ntype = 'limit'\r\nside = 'buy'\r\namount=0.1\r\nprice=0.05704\r\ntotal=float(amount*price)\r\n\r\nreturned=ccxt.binance.calculate_fee(symbol=symbol, type=type, side=side, amount=amount, price=price)\r\nprint(returned)\u2002\r\n\r\n```\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/21595/comments",
    "author": "VeilleurTrytoFix",
    "comments": [
      {
        "user": "carlosmiei",
        "created_at": "2024-03-07T18:40:37Z",
        "body": "Hello @VeilleurTrytoFix,\r\n\r\nYou're calling it as a static method (ccxt.binance.calculate_fee) but it's not, you should do it instead\r\n\r\n`exchange.calculate_fee(symbol=symbol, type=type, side=side, amount=amount, price=price)`"
      },
      {
        "user": "carlosmiei",
        "created_at": "2024-03-07T18:40:57Z",
        "body": "Just tested and worked\r\n\r\n```\r\nPython v3.11.7\r\nCCXT v4.2.64\r\nbinanceusdm.calculateFee(BTC/USDT:USDT,limit,buy,0.1,50)\r\n{'cost': 4e-05, 'currency': 'USDT', 'rate': 0.0004, 'type': 'taker'}\r\n```\r\n"
      }
    ]
  },
  {
    "number": 21290,
    "title": "How to update pair list for specific exchange ?",
    "created_at": "2024-02-20T09:25:47Z",
    "closed_at": "2024-02-20T11:25:46Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/21290",
    "body": "### Operating System\r\n\r\nubuntu 20.04\r\n\r\n### Programming Languages\r\n\r\nPython\r\n\r\n### CCXT Version\r\n\r\nccxt-4.2.47\r\n\r\n### Description\r\n\r\nHi all,\r\n\r\nI'm looking for how to update the pair available on spot market for binance exchange : \r\n\r\nCCXT trying to post an order on : XMR/ETH,XMR/BTC,PAXG/BNB or these pair are not available on binance spot market\r\n\r\nHow can i update the available pair ?\r\n\r\nin my below example :  **'spot': True,** its wrong, binance deleted XMR from market list\r\n\r\nThanks\r\n\r\n### Code\r\n\r\n```py\r\nexchange.load_markets()\r\nprint(exchange.markets['XMR/ETH'])\r\n\u2002\r\n{'id': 'XMRETH', 'lowercaseId': 'xmreth', 'symbol': 'XMR/ETH', 'base': 'XMR', 'quote': 'ETH', 'settle': None, 'baseId': 'XMR', 'quoteId': 'ETH', 'settleId': None, 'type': 'spot', 'spot': True, 'margin': False, 'swap': False, 'future': False, 'option': False, 'index': None, 'active': False, 'contract': False, 'linear': None, 'inverse': None, 'subType': None, 'taker': 0.001, 'maker': 0.001, 'contractSize': None, 'expiry': None, 'expiryDatetime': None, 'strike': None, 'optionType': None, 'precision': {'amount': 3, 'price': 5, 'cost': None, 'base': 8, 'quote': 8}, 'limits': {'leverage': {'min': None, 'max': None}, 'amount': {'min': 0.001, 'max': 9000000.0}, 'price': {'min': 1e-05, 'max': 1000.0}, 'cost': {'min': 0.001, 'max': 9000000.0}, 'market': {'min': 0.0, 'max': 225.56396694}}, 'created': None, 'info': {'symbol': 'XMRETH', 'status': 'BREAK', 'baseAsset': 'XMR', 'baseAssetPrecision': '8', 'quoteAsset': 'ETH', 'quotePrecision': '8', 'quoteAssetPrecision': '8', 'baseCommissionPrecision': '8', 'quoteCommissionPrecision': '8', 'orderTypes': ['LIMIT', 'LIMIT_MAKER', 'MARKET', 'STOP_LOSS_LIMIT', 'TAKE_PROFIT_LIMIT'], 'icebergAllowed': True, 'ocoAllowed': True, 'quoteOrderQtyMarketAllowed': True, 'allowTrailingStop': True, 'cancelReplaceAllowed': True, 'isSpotTradingAllowed': True, 'isMarginTradingAllowed': False, 'filters': [{'filterType': 'PRICE_FILTER', 'minPrice': '0.00001000', 'maxPrice': '1000.00000000', 'tickSize': '0.00001000'}, {'filterType': 'LOT_SIZE', 'minQty': '0.00100000', 'maxQty': '9000000.00000000', 'stepSize': '0.00100000'}, {'filterType': 'ICEBERG_PARTS', 'limit': '10'}, {'filterType': 'MARKET_LOT_SIZE', 'minQty': '0.00000000', 'maxQty': '225.56396694', 'stepSize': '0.00000000'}, {'filterType': 'TRAILING_DELTA', 'minTrailingAboveDelta': '10', 'maxTrailingAboveDelta': '2000', 'minTrailingBelowDelta': '10', 'maxTrailingBelowDelta': '2000'}, {'filterType': 'PERCENT_PRICE_BY_SIDE', 'bidMultiplierUp': '5', 'bidMultiplierDown': '0.2', 'askMultiplierUp': '5', 'askMultiplierDown': '0.2', 'avgPriceMins': '5'}, {'filterType': 'NOTIONAL', 'minNotional': '0.00100000', 'applyMinToMarket': True, 'maxNotional': '9000000.00000000', 'applyMaxToMarket': False, 'avgPriceMins': '5'}, {'filterType': 'MAX_NUM_ORDERS', 'maxNumOrders': '200'}, {'filterType': 'MAX_NUM_ALGO_ORDERS', 'maxNumAlgoOrders': '5'}], 'permissions': ['SPOT', 'TRD_GRP_015', 'TRD_GRP_016', 'TRD_GRP_023', 'TRD_GRP_024', 'TRD_GRP_025'], 'defaultSelfTradePreventionMode': 'EXPIRE_MAKER', 'allowedSelfTradePreventionModes': ['EXPIRE_TAKER', 'EXPIRE_MAKER', 'EXPIRE_BOTH']}, 'percentage': True, 'feeSide': 'get', 'tierBased': False}\r\n\u2002\r\n\r\n```\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/21290/comments",
    "author": "VeilleurTrytoFix",
    "comments": [
      {
        "user": "samgermain",
        "created_at": "2024-02-20T10:16:35Z",
        "body": "I'm not entirely sure what your asking, but if you want to refresh the markets that you've loaded from the exchange, you can can `load_markets` and assign `reload` to `True`\r\n\r\n```py\r\nload_markets(reload=True)\r\n```"
      },
      {
        "user": "VeilleurTrytoFix",
        "created_at": "2024-02-20T10:17:58Z",
        "body": "> I'm not entirely sure what your asking, but if you want to refresh the markets that you've loaded from the exchange, you can can `load_markets` and assign `reload` to `True`\r\n> \r\n> ```python\r\n> load_markets(reload=True)\r\n> ```\r\n\r\ni updated my comment with an example : \r\n\r\nprint(exchange.markets['XMR/ETH'])\r\n\r\nreturn : 'spot': True\r\n\r\nbinance deleted all XMR pair for trading on spot"
      },
      {
        "user": "samgermain",
        "created_at": "2024-02-20T10:38:37Z",
        "body": "> binance deleted all XMR pair for trading on spot\r\n\r\nYou can check if trading is enabled by checking the value of `active` on a market. If `active` is equal to `false` then trading is no longer enabled\r\n\r\n```py\r\n{\r\n  id: 'XMRETH',\r\n  lowercaseId: 'xmreth',\r\n  symbol: 'XMR/ETH',\r\n  base: 'XMR',\r\n  quote: 'ETH',\r\n  settle: undefined,\r\n  baseId: 'XMR',\r\n  quoteId: 'ETH',\r\n  settleId: undefined,\r\n  type: 'spot',\r\n  spot: true,\r\n  margin: false,\r\n  swap: false,\r\n  future: false,\r\n  option: false,\r\n  index: undefined,\r\n  active: false,                                            ##################### Here ####################\r\n  contract: false,\r\n  linear: undefined,\r\n  inverse: undefined,\r\n  subType: undefined,\r\n  taker: 0.001,\r\n  maker: 0.001,\r\n  contractSize: undefined,\r\n  expiry: undefined,\r\n  expiryDatetime: undefined,\r\n  strike: undefined,\r\n  optionType: undefined,\r\n  precision: { amount: 3, price: 5, base: 8, quote: 8 },\r\n  limits: {\r\n    leverage: { min: undefined, max: undefined },\r\n    amount: { min: 0.001, max: 9000000 },\r\n    price: { min: 0.00001, max: 1000 },\r\n    cost: { min: 0.001, max: 9000000 },\r\n    market: { min: 0, max: 225.56396694 }\r\n  },\r\n  created: undefined,\r\n  info: {\r\n    symbol: 'XMRETH',\r\n    status: 'BREAK',\r\n    baseAsset: 'XMR',\r\n    baseAssetPrecision: '8',\r\n    quoteAsset: 'ETH',\r\n    quotePrecision: '8',\r\n    quoteAssetPrecision: '8',\r\n    baseCommissionPrecision: '8',\r\n    quoteCommissionPrecision: '8',\r\n    orderTypes: [\r\n      'LIMIT',\r\n      'LIMIT_MAKER',\r\n      'MARKET',\r\n      'STOP_LOSS_LIMIT',\r\n      'TAKE_PROFIT_LIMIT'\r\n    ],\r\n    icebergAllowed: true,\r\n    ocoAllowed: true,\r\n    quoteOrderQtyMarketAllowed: true,\r\n    allowTrailingStop: true,\r\n    cancelReplaceAllowed: true,\r\n    isSpotTradingAllowed: true,\r\n    isMarginTradingAllowed: false,\r\n    filters: [\r\n      {\r\n        filterType: 'PRICE_FILTER',\r\n        minPrice: '0.00001000',\r\n        maxPrice: '1000.00000000',\r\n        tickSize: '0.00001000'\r\n      },\r\n      {\r\n        filterType: 'LOT_SIZE',\r\n        minQty: '0.00100000',\r\n        maxQty: '9000000.00000000',\r\n        stepSize: '0.00100000'\r\n      },\r\n      { filterType: 'ICEBERG_PARTS', limit: '10' },\r\n      {\r\n        filterType: 'MARKET_LOT_SIZE',\r\n        minQty: '0.00000000',\r\n        maxQty: '225.56396694',\r\n        stepSize: '0.00000000'\r\n      },\r\n      {\r\n        filterType: 'TRAILING_DELTA',\r\n        minTrailingAboveDelta: '10',\r\n        maxTrailingAboveDelta: '2000',\r\n        minTrailingBelowDelta: '10',\r\n        maxTrailingBelowDelta: '2000'\r\n      },\r\n      {\r\n        filterType: 'PERCENT_PRICE_BY_SIDE',\r\n        bidMultiplierUp: '5',\r\n        bidMultiplierDown: '0.2',\r\n        askMultiplierUp: '5',\r\n        askMultiplierDown: '0.2',\r\n        avgPriceMins: '5'\r\n      },\r\n      {\r\n        filterType: 'NOTIONAL',\r\n        minNotional: '0.00100000',\r\n        applyMinToMarket: true,\r\n        maxNotional: '9000000.00000000',\r\n        applyMaxToMarket: false,\r\n        avgPriceMins: '5'\r\n      },\r\n      { filterType: 'MAX_NUM_ORDERS', maxNumOrders: '200' },\r\n      { filterType: 'MAX_NUM_ALGO_ORDERS', maxNumAlgoOrders: '5' }\r\n    ],\r\n    permissions: [\r\n      'SPOT',\r\n      'TRD_GRP_015',\r\n      'TRD_GRP_016',\r\n      'TRD_GRP_023',\r\n      'TRD_GRP_024',\r\n      'TRD_GRP_025'\r\n    ],\r\n    defaultSelfTradePreventionMode: 'EXPIRE_MAKER',\r\n    allowedSelfTradePreventionModes: [ 'EXPIRE_TAKER', 'EXPIRE_MAKER', 'EXPIRE_BOTH' ]\r\n  },\r\n  tierBased: false,\r\n  percentage: true,\r\n  feeSide: 'get'\r\n}\r\n2024-02-20T10:32:58.334Z iteration 1 passed in 0 ms\r\n```"
      }
    ]
  },
  {
    "number": 20727,
    "title": "Bitrue exchange market order does not return details of completed order",
    "created_at": "2024-01-08T15:45:21Z",
    "closed_at": "2024-01-08T22:41:49Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/20727",
    "body": "### Operating System\n\nMacOS\n\n### Programming Languages\n\nPython\n\n### CCXT Version\n\n4.1.84\n\n### Description\n\nBitrue Exchange market order successfully places order and fulfils the order but does not return the completed order details.  the return object states the order status=open and amost of the other fields/attributes are null.\n\n### Code\n\n```\r\n\u2002\u2002order_buy = exchange.create_market_buy_order('symbol, amount, {\"newClientOrderId\": clientOrderId})\r\n\r\n```\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/20727/comments",
    "author": "juber01",
    "comments": [
      {
        "user": "carlosmiei",
        "created_at": "2024-01-08T16:40:41Z",
        "body": "Hello @juber01, that's a \"normal\" behavior, because it takes a few ms to consolidate the information. \r\nYou can always get all the order-related information by calling `fetch_order(id)` afterwards. "
      },
      {
        "user": "juber01",
        "created_at": "2024-01-08T16:44:48Z",
        "body": "I don't see this issue with Binance with market orders.  What you are suggesting would be putting in an additional check and then supplementing the order details.  I need this as it's captured in a database for further processing"
      },
      {
        "user": "carlosmiei",
        "created_at": "2024-01-08T16:48:16Z",
        "body": "@juber01 Each exchange is different and if the information is missing in the exchange's response ccxt has to return those values as undefined/null."
      }
    ]
  },
  {
    "number": 20372,
    "title": "fetch_bids_asks not working for Bitrue exchange",
    "created_at": "2023-12-14T10:20:29Z",
    "closed_at": "2023-12-14T11:02:21Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/20372",
    "body": "### Operating System\n\nMacOS\n\n### Programming Languages\n\nPython\n\n### CCXT Version\n\n4.1.83\n\n### Description\n\nThe executing the function call fetch_bids_asks it is throwing an exception error.\r\n\r\nException has occurred: BadSymbol       (note: full exception trace is shown but execution is paused at: _run_module_as_main)\r\nbitrue does not have market symbol W\r\n  File \"/python3.11/site-packages/ccxt/base/exchange.py\", line 3905, in market\r\n    raise BadSymbol(self.id + ' does not have market symbol ' + symbol)\r\n  File \"/python3.11/site-packages/ccxt/base/exchange.py\", line 2979, in market_symbols\r\n    market = self.market(symbols[i])\r\n             ^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"/3.11.7/lib/python3.11/site-packages/ccxt/bitrue.py\", line 1419, in fetch_bids_asks\r\n    symbols = self.market_symbols(symbols, None, False)\r\n              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"/trader_bot/trader_bot.py\", line 53, in main\r\n    bids_asks = exchange.fetch_bids_asks(\"WTK/USDT\")\r\n                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n### Code\n\n# Initialise the ccxt exchange for bitrue\r\n  exchange = ccxt.bitrue({\r\n    \"apiKey\": bitrue_key,\r\n    \"secret\": bitrue_secret\r\n  })\r\n\r\n#Get bids and asks\r\n    bids_asks = exchange.fetch_bids_asks(\"WTK/USDT\")\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/20372/comments",
    "author": "juber01",
    "comments": [
      {
        "user": "sc0Vu",
        "created_at": "2023-12-14T10:43:49Z",
        "body": "Hi @juber01 \r\n\r\nThe symbols is list for fetch_bids_asks, try this: `exchange.fetch_bids_asks(['WTK/USDT'])`"
      },
      {
        "user": "juber01",
        "created_at": "2023-12-14T10:54:56Z",
        "body": "Thank you that works.  Can this take this param {\"limit\":5} to return bids and asks instead of just the latest?"
      },
      {
        "user": "carlosmiei",
        "created_at": "2023-12-14T11:01:08Z",
        "body": "@juber01, that is not possible, if you want to get multiple bids/asks you should use fetchOrderBook Instead"
      }
    ]
  },
  {
    "number": 20243,
    "title": "Phemex hedge mode wont let me place a market order",
    "created_at": "2023-12-05T13:16:42Z",
    "closed_at": "2023-12-05T15:50:14Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/20243",
    "body": "### Operating System\n\nWindows 11\n\n### Programming Languages\n\nPython\n\n### CCXT Version\n\n4.1.75\n\n### Description\n\nEverytime i run the the code i get this error \r\n\r\n**Error placing order: phemex {\"code\":20004,\"msg\":\"TE_ERR_INCONSISTENT_POS_MODE\",\"data\":null}**\n\n### Code\n\n```\r\nexchange = ccxt.phemex({\r\n    'apiKey': api_key,\r\n    'secret': api_secret,\r\n    'enableRateLimit': True,\r\n})\r\n\r\nsymbol1 = 'BTCUSDT'\r\nexchange.set_position_mode(True, symbol1) # set pos mode to hedge\r\norder = exchange.create_order(symbol1,'market','sell',0.001)\r\n\r\n\r\n\r\n\r\n\r\n```\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/20243/comments",
    "author": "ClamaBsc",
    "comments": [
      {
        "user": "carlosmiei",
        "created_at": "2023-12-05T15:11:13Z",
        "body": "Hello @ClamaBsc, Phemex requires an explicit `posSIde` parameter to be provided when in hedged mode, so you should do something like this:\r\n\r\n```Python\r\norder = exchange.create_order(symbol1,'market','sell',0.001, params = {'posSide': 'Short'}) # or Long\r\n```\r\n"
      },
      {
        "user": "ClamaBsc",
        "created_at": "2023-12-05T15:41:39Z",
        "body": "@carlosmiei Thank you so much, It works now\r\n\r\nI have one more question.\r\n\r\nhow to set margin mode to cross i think its different in phemex than other, \r\n\r\nthanks ,\r\n\r\n"
      }
    ]
  },
  {
    "number": 20028,
    "title": "Transfer from subacc to main on okex",
    "created_at": "2023-11-17T21:00:39Z",
    "closed_at": "2023-11-18T07:56:32Z",
    "labels": [
      "question",
      "python"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/20028",
    "body": "### Operating System\n\nLinux\n\n### Programming Languages\n\nPython\n\n### CCXT Version\n\n4.1.56\n\n### Description\n\nhi can u help with transfer from subacc to main on okex pls, i try use 2 methods, and got the same error\n\n### Code\n\n#1 \r\n```\r\nexchange.private_post_asset_transfer({\"ccy\": symbolWithdraw, \"amt\": str(sub_balance), \"from\": '6', \"to\": '6', \"type\": \"2\", \"subAcct\": name_sub})\r\n```\r\n#2 \r\n```\r\nexchange.transfer(code=symbolWithdraw, amount=sub_balance, fromAccount=name_sub, toAccount='main', params={\"type\": \"2\", \"from\": '6', \"to\": '6'})\u2002\u2002\r\n```\r\n#ERROR\r\n```\r\nccxt.base.errors.ExchangeError: okx {\"msg\":\"This API key doesn't have permission to use this function\",\"code\":\"50120\"}\r\n```",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/20028/comments",
    "author": "WhereIsMyMindDL",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2023-11-17T21:56:15Z",
        "body": "Have you have enabled the transfer permission on your API key in the okx website settings?"
      }
    ]
  },
  {
    "number": 19740,
    "title": "Clarification on gate and gateio identifiers for Gate.io exchange",
    "created_at": "2023-10-30T13:49:16Z",
    "closed_at": "2023-10-30T14:48:46Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/19740",
    "body": "### Operating System\r\n\r\nUbuntu\r\n\r\n### Programming Languages\r\n\r\nJS\r\n\r\n### CCXT Version\r\n\r\n^4.1.13\r\n\r\n### Description\r\n\r\nHello CCXT team and community,\r\n\r\nI have been working with the CCXT library and noticed that there are two identifiers, `gate` and `gateio`, that both seem to refer to the Gate.io exchange. I am able to interact with the exchange using either identifier, and was wondering if there is a preferred or more accurate identifier to use when interacting with Gate.io through CCXT.\r\n\r\nCould you please clarify the difference between `gate` and `gateio`, if any, and advise on which identifier is recommended for use? Are there any particular considerations or functionalities that are exclusive to one identifier over the other?\r\n\r\nThank you in advance for your assistance and clarification on this matter.\r\n\r\nBest regards\r\n\r\n\r\n### Code\r\n\r\n```\r\n\u2002\u2002\r\n\r\n```\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/19740/comments",
    "author": "kvlknctk",
    "comments": [
      {
        "user": "carlosmiei",
        "created_at": "2023-10-30T14:48:46Z",
        "body": "Hello @kvlknctk,\r\nThey are the exact same thing, one is just an alias for the other, so you can use the name you prefer most. \ud83d\ude42 "
      }
    ]
  },
  {
    "number": 19666,
    "title": "Bitmex fetch positions doesn't show information anymore",
    "created_at": "2023-10-25T13:07:11Z",
    "closed_at": "2023-10-25T14:02:36Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/19666",
    "body": "### Operating System\n\nWindows 10\n\n### Programming Languages\n\nPython\n\n### CCXT Version\n\n4.1.20\n\n### Description\n\nHello,\r\n\r\nsuddenly, probably after ccxt update I get no Information from \r\n\r\nBitmex.fetch.positions anymore. \r\n\r\nOutput is --> []  None\r\n\r\nWas there any change on ccxt for Bitmex or is it a bug? \r\n\r\nMy account was liquidated because of this problem. Luckily it was just play money :-)... \r\n\r\n\n\n### Code\n\n```\r\nbitmex = ccxt.bitmex({'enableRateLimit': True,\r\n                       'apiKey': bitmexconfig.api_key,\r\n                       'secret': bitmexconfig.api_secret,})\r\n\r\n\r\nsymbol = 'XBTUSD'\r\nparams={\"type\":\"swap\",\"code\":\"XBT\"}\r\n\r\nbitmex_pos = bitmex.fetch_positions([symbol], params)\r\nprint(bitmex_pos)\r\n\r\n```\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/19666/comments",
    "author": "Nitrix321",
    "comments": [
      {
        "user": "carlosmiei",
        "created_at": "2023-10-25T13:39:50Z",
        "body": "Hello @Nitrix321,\r\n\r\nRecently we just improved the filtering because if you called `fetch_positions([A,B,C])` it would return all the positions regardless of the symbols provided. The filtering might not be working correctly with exchange-specific ids and I will fix it ASAP but in the meantime, you can either not provide any symbol or provide the unified one (BTC/USD:BTC)\r\n\r\nExample:\r\n```Python\r\npos = bitmex.fetch_positions(params = params)\r\n# or\r\npos = bitmex.fetch_positions(['BTC/USD:BTC'] ,params = params)\r\n```\r\n"
      },
      {
        "user": "carlosmiei",
        "created_at": "2023-10-25T13:46:00Z",
        "body": "@Nitrix321 Sorry I think what I said is wrong, exchange-specific symbols are also working,  but due to the filtering it will only return positions from the symbols in the symbols array, so I would suggest calling `fetch_positions` without any argument. "
      }
    ]
  },
  {
    "number": 19595,
    "title": "Python fetch_markets() does not return future markets",
    "created_at": "2023-10-17T05:16:14Z",
    "closed_at": "2023-10-18T03:52:52Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/19595",
    "body": "### Operating System\r\n\r\nWindows 11\r\n\r\n### Programming Languages\r\n\r\nPython 3.11.6\r\n\r\n### CCXT Version\r\n\r\n4.1.14\r\n\r\n### Description\r\n\r\nI wanna get all Binance Future USDT markets. I think there is 100+ future markets, but most of them are missing in fetch_markets()\r\n\r\n### Code\r\n```\r\nbinance = ccxt.binance(config={\r\n    'apiKey': config['ACCESS_KEY'],\r\n    'secret': config['SECRET_KEY'],\r\n    'enableRateLimit': True,\r\n    'options': {'defaultType': 'future'}\r\n})\r\n\r\nmarkets = binance.fetch_markets()\r\ncount = 0\r\nfor coin_info in markets:\r\n    if coin_info['quote'] != 'USDT':\r\n        continue\r\n    if not coin_info['active']:\r\n        continue\r\n    if coin_info['future'] or coin_info['type'] == 'future':\r\n        count += 1\r\n\r\nprint(f\"Count: {count}\") # Count: 4\r\n```",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/19595/comments",
    "author": "Mechatrony",
    "comments": [
      {
        "user": "carlosmiei",
        "created_at": "2023-10-17T09:05:24Z",
        "body": "Hello @Mechatrony,\r\nBy `future` do you mean delivery futures or perpetual swaps? At CCXT, we call the latter `swaps`.\r\n\r\nCan you try this?\r\n```Python\r\n markets = await exchange.load_markets()\r\nfuture_markets = [m for m in markets.values() if m['future']] # 27 markets\r\nswap_markets = [m for m in markets.values() if m['swap']] # 298 swaps\r\n```\r\n"
      }
    ]
  },
  {
    "number": 19522,
    "title": "Bingx gbp/jpy symbol not available in markets",
    "created_at": "2023-10-11T10:06:58Z",
    "closed_at": "2023-11-06T16:48:25Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/19522",
    "body": "### Operating System\n\nOSX\n\n### Programming Languages\n\nJavaScript\n\n### CCXT Version\n\n4.0.3\n\n### Description\n\nHi everyone,\r\n\r\nI'm new to this library and the documentation is great. I am trying to create the foundation for my code to execute some orders for FOREX, which is available in BingX, however when i instantiate my client and I use loadMarkets() I don't get any of the forex, stocks, indices, etc. Why is that? What am I missing? are they just not supported? What would happen if i know the symbol is GBP/JPY and i just create an order with that? would that work?\r\n\r\nCheers and thanks for an awesome project.\n\n### Code\n\n```\r\n\u2002\u2002\r\n\r\n```\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/19522/comments",
    "author": "mmaestrini",
    "comments": [
      {
        "user": "carlosmiei",
        "created_at": "2023-10-11T10:10:41Z",
        "body": "Hello @mmaestrini,\r\nUnfortunately I don't think Bingx provides forex trading through the API, so we can't integrate it into ccxt. "
      },
      {
        "user": "carlosmiei",
        "created_at": "2023-11-06T16:48:25Z",
        "body": "@mmaestrini Right now I don't think any of the listed exchanges support FOREX/STOCKS trading. "
      }
    ]
  },
  {
    "number": 19506,
    "title": "OKX BrokerId and clientOrderId",
    "created_at": "2023-10-10T12:57:37Z",
    "closed_at": "2023-11-06T16:46:09Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/19506",
    "body": "### Operating System\r\n\r\nUbuntu 22.04\r\n\r\n### Programming Languages\r\n\r\nPython\r\n\r\n### CCXT Version\r\n\r\n4.0.49\r\n\r\n### Description\r\n\r\nHi everyone\r\nI was working on OKX and wanted to provide both a client order id and a broker id\r\nI found this in your code that is blocking me, is it intended? \r\nThanks in advance\r\n\r\n### Code\r\n\r\n```\r\n        if clientOrderId is None:\r\n            brokerId = self.safe_string(self.options, 'brokerId')\r\n            if brokerId is not None:\r\n                request['clOrdId'] = brokerId + self.uuid16()\r\n                request['tag'] = brokerId\r\n        else:\r\n            request['clOrdId'] = clientOrderId\r\n            params = self.omit(params, ['clOrdId', 'clientOrderId'])\r\n\r\n```\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/19506/comments",
    "author": "KevinBaudin",
    "comments": [
      {
        "user": "carlosmiei",
        "created_at": "2023-10-10T13:09:59Z",
        "body": "Hello @KevinBaudin, What's blocking you exactly? Bear in mind that the values inside `params` override the `request` values. "
      },
      {
        "user": "KevinBaudin",
        "created_at": "2023-10-10T13:15:24Z",
        "body": "The fact that I provide a brokerId in options is only read if I do not provide a client order id in the params, right?\r\nBut you tell me that I can provide \"tag\" in params and circumvent it, right?"
      },
      {
        "user": "carlosmiei",
        "created_at": "2023-10-10T13:15:57Z",
        "body": "@KevinBaudin \r\n> But you tell me that I can provide \"tag\" in params and circumvent it, right?\r\n\r\nExactly"
      },
      {
        "user": "KevinBaudin",
        "created_at": "2023-10-10T13:21:18Z",
        "body": "Great ! Also in the \"sign\" function I would need to provide it in params for the same reason right? But I don't think I would need it, I never used it imo. If you tell me that it would not be blocking, everything is fine for me"
      },
      {
        "user": "carlosmiei",
        "created_at": "2023-10-13T11:14:53Z",
        "body": "@KevinBaudin The `params` provided to the unified method will get to `sign` so it should be ok. "
      }
    ]
  },
  {
    "number": 19437,
    "title": "Class krakenfutures not found. ",
    "created_at": "2023-10-03T11:59:20Z",
    "closed_at": "2023-10-03T14:37:52Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/19437",
    "body": "### Operating System\n\nubuntu\n\n### Programming Languages\n\nPHP\n\n### CCXT Version\n\n2.5\n\n### Description\n\nError when implementing kraken futures: \r\nClass krakenfutures not found\r\n\r\n\r\nI am trying to setup krakenfutures (using PHP) but the class does not exist in the library. \r\n\r\nI used composer require ccxt/ccxt to install. Here is the version \r\n \"require\": {\r\n        \"ccxt/ccxt\": \"^2.5\",\r\n\r\nIf I try:\r\n\r\n $exchange = '\\\\ccxt\\\\krakenfutures';\r\n        $exchange = new $exchange(array(\r\n            'apiKey' => 'my api key',\r\n            'secret' => 'my secret',\r\n        ));\r\n\r\nI have: Class krakenfutures not found. \r\n\r\nI checked in the files of ccxt, I have a kraken.php but no krakenfutures.php. \r\n\r\nWhen I check on the documentation is says it is supported in ccxt pro. \r\nWhen I try to go to ccxt.pro I am redirected to github pages saying that ccxt pro is now merged to ccxt. \r\n\r\nMaybe I misunderstood something because I saw some people saying that they implemented it. I tried to search if I could buy ccxt pro but all I found is that it is now merged.\r\n\r\nCan you please help ?\r\n\r\nThanks\n\n### Code\n\n```\r\n\u2002\u2002 $exchange = '\\\\ccxt\\\\krakenfutures';\r\n        $exchange = new $exchange(array(\r\n            'apiKey' => 'my api key',\r\n            'secret' => 'my secret',\r\n        ));\r\n\r\n```\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/19437/comments",
    "author": "smamet",
    "comments": [
      {
        "user": "carlosmiei",
        "created_at": "2023-10-03T13:25:03Z",
        "body": "Hello @smamet,\r\n`KrakenFutures` was added at a later version, so you need to update your CCXT version to access it. "
      }
    ]
  },
  {
    "number": 19325,
    "title": "kucoinfutures empty fetchPosition - error.",
    "created_at": "2023-09-19T06:47:28Z",
    "closed_at": "2023-09-20T10:28:52Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/19325",
    "body": "### Operating System\n\nubuntu 23.04\n\n### Programming Languages\n\nPython\n\n### CCXT Version\n\nccxt-4.0.100\n\n### Description\n\nIf the position is empty, it returns an error (data = []):\r\nTraceback (most recent call last):\r\n    self._position = self.exchange.fetchPosition(symbol) \r\n                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \".../python3.11/site-packages/ccxt/kucoinfutures.py\", line 904, in fetch_position\r\n    return self.parse_position(data[0], market)\r\n                               ~~~~^^^\r\nmaybe we should fix it this way.\r\nif len(data) > 0:\r\n            return self.parse_position(data[0], market)\r\n        else:\r\n            return {}\n\n### Code\n\n```\r\n\u2002\u2002\r\n\r\n```\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/19325/comments",
    "author": "ptfu0",
    "comments": [
      {
        "user": "ptfu0",
        "created_at": "2023-09-19T14:28:37Z",
        "body": "There is a new problem, there is no position, but fetchPosition started giving a non-existent position.\r\nexchange.fetchPosition('BTC/USDT:USDT')\r\n{'info': {'id': '', 'symbol': 'XBTUSDTM', 'autoDeposit': False, 'maintMarginReq': 0, 'riskLimit': 25000, 'realLeverage': 0, 'crossMode': False, 'delevPercentage': 0.0, 'openingTimestamp': 0, 'currentTimestamp': 1695133582609, 'currentQty': 0, 'currentCost': 0, 'currentComm': 0, 'unrealisedCost': 0, 'realisedGrossCost': 0, 'realisedCost': 0, 'isOpen': False, 'markPrice': 0, 'markValue': 0, 'posCost': 0, 'posCross': 0, 'posCrossMargin': 0, 'posInit': 0, 'posComm': 0, 'posCommCommon': 0, 'posLoss': 0, 'posMargin': 0, 'posMaint': 0, 'maintMargin': 0, 'realisedGrossPnl': 0, 'realisedPnl': 0, 'unrealisedPnl': 0, 'unrealisedPnlPcnt': 0, 'unrealisedRoePcnt': 0, 'avgEntryPrice': 0, 'liquidationPrice': 0, 'bankruptPrice': 0, 'settleCurrency': 'USDT', 'maintainMargin': 0, 'riskLimitLevel': 1}, 'id': None, 'symbol': 'BTC/USDT:USDT', 'timestamp': 1695133582609.0, 'datetime': None, 'lastUpdateTimestamp': None, 'initialMargin': 0.0, 'initialMarginPercentage': None, 'maintenanceMargin': 0.0, 'maintenanceMarginPercentage': 0.0, 'entryPrice': 0.0, 'notional': 0.0, 'leverage': 0.0, 'unrealizedPnl': 0.0, 'contracts': 0.0, 'contractSize': 0.001, 'realizedPnl': 0.0, 'marginRatio': None, 'liquidationPrice': 0.0, 'markPrice': 0.0, 'lastPrice': None, 'collateral': 0.0, 'marginMode': 'isolated', 'side': None, 'percentage': None, 'stopLossPrice': None, 'takeProfitPrice': None}\r\n"
      },
      {
        "user": "carlosmiei",
        "created_at": "2023-09-20T09:52:16Z",
        "body": "@ptfu0 I would not call it a problem because that is the \"default\" position returned by kucoin. You can discard these empty positions by checking if the size and the price are 0."
      },
      {
        "user": "ptfu0",
        "created_at": "2023-09-20T10:30:08Z",
        "body": "Thanks, that's roughly what I did, except I did a side is None )"
      }
    ]
  },
  {
    "number": 19177,
    "title": "symbol BTC/FDUSD leverage not working",
    "created_at": "2023-09-11T09:13:01Z",
    "closed_at": "2023-09-12T06:10:37Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/19177",
    "body": "### Operating System\r\n\r\nWindows11\r\n\r\n### Programming Languages\r\n\r\nPython\r\n\r\n### CCXT Version\r\n\r\n4.0.78\r\n\r\n### Description\r\n\r\nHi, \r\n\r\nWe are working on binance BTC/FDUSD symbol trading with leverage. \r\nThis symbol is working totally fine without leveraging (e.g. binance.fetch_ticker, binance.create_market_buy_order), while when calling binance.markets[ 'BTC/FDUSD' ], the return leverage limit is None.\r\n\r\nWe've checked that the return of leverage with binance.markets[ 'BTC/USDT' ] is working while binance.markets[ 'BTC/FDUSD' ] and binance.markets[ 'FDUSD/BTC' ] are not (returns None), also binance.fapiPrivate_post_leverage is not working with 'FDUSD' symbols.\r\n\r\nWe've also confirmed with binance support that 'FDUSD' symbols endpoints are fine on binance side, so we suppose the issue is on the ccxt tool, thanks.\r\n\r\n### Code\r\n\r\n```\r\nsymbol = 'BTC/FDUSD'\r\nself.binance = ccxt.binance({ })\r\n\r\nresult = float(self.binance.fetch_ticker(symbol)['bid']) # Works\r\norder = self.binance.create_market_buy_order(symbol, amount) # Works\r\norder = self.binance.create_market_sell_order(symbol, amount) # Works\r\n\r\nself.binance.load_markets()\r\nmarket = self.binance.markets[ symbol ]  # returns None in leverage limit\r\nself.binance.fapiPrivate_post_leverage(symbol) # Not working\r\n```\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/19177/comments",
    "author": "cO-Oe",
    "comments": [
      {
        "user": "carlosmiei",
        "created_at": "2023-09-11T10:57:19Z",
        "body": "Hello @cO-Oe,\r\n\r\nThe main issue is that you're calling a derivatives endpoint (fapiPrivate_post_leverage) using a spot symbol. "
      }
    ]
  },
  {
    "number": 19023,
    "title": "Kucoin Symbol Does not Exist",
    "created_at": "2023-08-28T11:42:26Z",
    "closed_at": "2023-08-28T11:54:29Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/19023",
    "body": "### Operating System\r\n\r\nWindows 10\r\n\r\n### Programming Languages\r\n\r\nPython\r\n\r\n### CCXT Version\r\n\r\n4.0.77\r\n\r\n### Description\r\n\r\nI am unable to change the margin for BTCUSDT, see code below to reproduce\r\n\r\n### Code\r\n\r\n```\r\nclient = ccxt.kucoinfutures({'apiKey': strategy.public,\r\n                                      'secret': strategy.private,\r\n                                      'password': password})\r\n\r\nticker = \"BTC/USDT:USDT\"\r\nticker = ticker.replace(\"/USDT:USDT\", \"USDTM\")\r\nclient.futuresprivate_post_position_margin_auto_deposit_status(\r\n    params={'symbol': ticker, 'status': True})\r\n```\r\nFile ~\\anaconda3\\lib\\site-packages\\ccxt\\base\\types.py:26, in Entry.__init__.<locals>.unbound_method(_self, \r\nparams)\r\n     25 def unbound_method(_self, params={}):\r\n---> 26     return _self.request(self.path, self.api, self.method, params, config=self.config)\r\n\r\nFile ~\\anaconda3\\lib\\site-packages\\ccxt\\base\\exchange.py:3019, in Exchange.request(self, path, api, method, params, headers, body, config)\r\n   3018 def request(self, path, api: Any = 'public', method='GET', params={}, headers: Optional[Any] = None, body: Optional[Any] = None, config={}):\r\n-> 3019     return self.fetch2(path, api, method, params, headers, body, config)\r\n\r\nFile ~\\anaconda3\\lib\\site-packages\\ccxt\\base\\exchange.py:3016, in Exchange.fetch2(self, path, api, method, \r\nparams, headers, body, config)\r\n   3014 self.lastRestRequestTimestamp = self.milliseconds()\r\n   3015 request = self.sign(path, api, method, params, headers, body)\r\n-> 3016 return self.fetch(request['url'], request['method'], request['headers'], request['body'])\r\n\r\nFile ~\\anaconda3\\lib\\site-packages\\ccxt\\base\\exchange.py:644, in Exchange.fetch(self, url, method, headers, body)\r\n    641     else:\r\n    642         raise ExchangeError(details) from e\r\n--> 644 self.handle_errors(http_status_code, http_status_text, url, method, headers, http_response, json_response, request_headers, request_body)\r\n    645 if json_response is not None:\r\n    646     return json_response\r\n\r\nFile ~\\anaconda3\\lib\\site-packages\\ccxt\\kucoin.py:3871, in kucoin.handle_errors(self, code, reason, url, method, headers, body, response, requestHeaders, requestBody)\r\n   3869 self.throw_broadly_matched_exception(self.exceptions['broad'], body, feedback)\r\n   3870 if errorCode != '200000':\r\n-> 3871     raise ExchangeError(feedback)\r\n   3872 return None\r\n\r\nExchangeError: kucoinfutures Contract symbol[BTCUSDTM] does not exist",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/19023/comments",
    "author": "Tomas-MP",
    "comments": [
      {
        "user": "carlosmiei",
        "created_at": "2023-08-28T11:51:04Z",
        "body": "Hello @Tomas-MP, I think you're using the wrong exchange-specific market id, it should be `XBTUSDTM`\r\n\r\nYou can easily check it by doing\r\n```Python\r\nawait ex.loadMarkets()\r\nmarket = ex.market('BTC/USDT:USDT')\r\nprint(market['id'])\r\n```\r\n"
      }
    ]
  },
  {
    "number": 18975,
    "title": "binance {\"code\":-5000,\"msg\":\"GET /fapi/v1/positionRisk is retired, please use GET /fapi/v2/positionRisk\"}",
    "created_at": "2023-08-23T13:48:25Z",
    "closed_at": "2023-08-24T09:51:13Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/18975",
    "body": "### Operating System\n\nMacOS\n\n### Programming Languages\n\nJavaScript\n\n### CCXT Version\n\n4.0.3\n\n### Description\n\nbinance {\"code\":-5000,\"msg\":\"GET /fapi/v1/positionRisk is retired, please use GET /fapi/v2/positionRisk\"}\r\n\r\nWe are not calling this enpoint anywhere in our code so this must be ccxt internal error.\n\n### Code\n\n```\r\n\u2002\u2002\r\n\r\n```\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/18975/comments",
    "author": "filipzupancic",
    "comments": [
      {
        "user": "carlosmiei",
        "created_at": "2023-08-23T14:12:18Z",
        "body": "Hello @filipzupancic, we upgraded the endpoint a few versions ago (it is used by fetchPositions btw), if you upgrade your ccxt version to the latest it should work"
      }
    ]
  },
  {
    "number": 18893,
    "title": "AttributeError: 'binance' object has no attribute 'fapiPrivate_get_positionside_dual'",
    "created_at": "2023-08-15T15:45:53Z",
    "closed_at": "2023-08-17T10:00:04Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/18893",
    "body": "### Operating System\r\n\r\nubuntu\r\n\r\n### Programming Languages\r\n\r\nPython\r\n\r\n### CCXT Version\r\n\r\ninstalled ccxt-4.0.61\r\n\r\n### Description\r\n\r\nAttributeError: 'binance' object has no attribute 'fapiPrivate_get_positionside_dual'\r\n\r\n### Code\r\n\r\n```\r\n\u2002\u2002response = self._exchange.fapiPrivate_get_positionside_dual()\r\n\r\n```\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/18893/comments",
    "author": "netsesame",
    "comments": [
      {
        "user": "carlosmiei",
        "created_at": "2023-08-15T17:27:01Z",
        "body": "Hello @netsesame,\r\nCan you try instead `fapiprivate_get_positionside_dual` or `fapiPrivateGetPositionSideDual`? For some reason the snake_case version is not breaking the `private` part. "
      },
      {
        "user": "netsesame",
        "created_at": "2023-08-16T14:59:56Z",
        "body": "I copied it from line 126 of ccxt/examples/py/binance-futures-margin.py.After making the modification, it is now working properly. Thank you for your assistance."
      }
    ]
  },
  {
    "number": 18857,
    "title": "Bybit stop limit orders cannot be canceled",
    "created_at": "2023-08-11T09:05:59Z",
    "closed_at": "2023-08-11T14:12:04Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/18857",
    "body": "### Operating System\n\nWindows\n\n### Programming Languages\n\nJavaScript\n\n### CCXT Version\n\n4.0.57\n\n### Description\n\nWhen placing stop loss orders, using the CCXT unified method, on Bybit spot market (using a Unified Bybit account), it is not possible to cancel those orders. As an example, this is what I did:\r\n\r\n`await exchange.createOrder('BTC/USDT', 'limit', 'sell', 0.001, 28500, { stopLossPrice: 29000 });`\r\n\r\nWhen using `exchange.cancelAllOrders('BTC/USDT')`, the order is not canceled. No exception is thrown, but I still see the open order on the exchange.\r\n\r\nWhen using `exchange.cancelOrder(<id>, 'BTC/USDT')`, using the id that is returned when creating the order, does not work either. In that case I get the following exception:\r\n\r\nOrderNotFound: bybit {\"retCode\":170213,\"retMsg\":\"Order does not exist.\",\"result\":{},\"retExtInfo\":{},\"time\":1691743905604}\r\n    at bybit.throwExactlyMatchedException (C:\\code\\crypto-coding-course\\code\\cc-bot\\node_modules\\ccxt\\dist\\cjs\\src\\base\\Exchange.js:3087:19)\r\n    at bybit.handleErrors (C:\\code\\crypto-coding-course\\code\\cc-bot\\node_modules\\ccxt\\dist\\cjs\\src\\bybit.js:9161:18)\r\n    at C:\\code\\crypto-coding-course\\code\\cc-bot\\node_modules\\ccxt\\dist\\cjs\\src\\base\\Exchange.js:766:51\r\n    at processTicksAndRejections (node:internal/process/task_queues:96:5)\r\n    at async bybit.fetch2 (C:\\code\\crypto-coding-course\\code\\cc-bot\\node_modules\\ccxt\\dist\\cjs\\src\\base\\Exchange.js:2666:16)\r\n    at async bybit.request (C:\\code\\crypto-coding-course\\code\\cc-bot\\node_modules\\ccxt\\dist\\cjs\\src\\base\\Exchange.js:2669:16)\r\n    at async bybit.cancelUnifiedAccountOrder (C:\\code\\crypto-coding-course\\code\\cc-bot\\node_modules\\ccxt\\dist\\cjs\\src\\bybit.js:4690:26)\r\n    at async bybit.cancelOrder (C:\\code\\crypto-coding-course\\code\\cc-bot\\node_modules\\ccxt\\dist\\cjs\\src\\bybit.js:4874:20)\r\n\r\n\r\nAm I doing something wrong, or is this a bug?\n\n### Code\n\n```\r\n\u2002\u2002\r\n\r\n```\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/18857/comments",
    "author": "hodlerhacks",
    "comments": [
      {
        "user": "carlosmiei",
        "created_at": "2023-08-11T13:36:07Z",
        "body": "Hello @hodlerhacks,\r\nHave you tried to provide `stop:true` inside `params`? \r\n\r\nExample:\r\n```Python\r\nexchange.cancelAllOrders('BTC/USDT', {'stop': true})\r\n```\r\n"
      },
      {
        "user": "hodlerhacks",
        "created_at": "2023-08-11T13:48:25Z",
        "body": "Oh wow, that solves it indeed, thanks! :-)\r\n\r\nI couldn't find this in the documentation. What exactly does this parameter do? When should I use it? Is it Bybit-specific and/or can I safely use that with other exchanges as well? (I'm developing an application that works with many different exchanges, and I'm trying to keep the code as generic as possible, hence the question.)"
      },
      {
        "user": "carlosmiei",
        "created_at": "2023-08-11T13:57:32Z",
        "body": "> I couldn't find this in the documentation. What exactly does this parameter do? When should I use it? Is it Bybit-specific and/or can I safely use that with other exchanges as well? (I'm developing an application that works with many different exchanges, and I'm trying to keep the code as generic as possible, hence the question.)\r\n\r\n@hodlerhacks Some exchanges have different endpoints to handle stop/trigger orders, so the `stop` parameter tells ccxt to use that endpoint instead, and yes it is unified across exchanges so you should be able to use it with other exchanges as well.\r\n\r\nAdditionally, we will try to improve our documentation, thanks for letting us know. \r\n\r\n"
      }
    ]
  },
  {
    "number": 18762,
    "title": "Need advice for getting Binance a group of symbols data",
    "created_at": "2023-08-03T10:40:47Z",
    "closed_at": "2023-08-16T06:30:48Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/18762",
    "body": "### Operating System\n\nWindows 10\n\n### Programming Languages\n\nJavaScript\n\n### CCXT Version\n\n4.0.49\n\n### Description\n\nHi, \r\nI want to write some JavaScript to get about 20 to 30 symbols OHLC data, like: BTC/USDT; ETH/USDT \u2026\r\nCCXT has the fetchOrderbook function, but this function will fetch data for only one pair, like: BTC/USDT.\r\nIf I want to fetch such data for 20 pairs, what I should do: I use a loop to fetch each pair\u2019s order book?\r\nI want to keep the JS code running to fetch such data every minute, but I don\u2019t know if this will break the rate limit.\r\nI see CCXT has also websocket data for Binance, but I don\u2019t know if I can use websocket to get 20 or 30 pairs data, if it is possible, show me some code examples.\r\nThanks,\n\n### Code\n\n```\r\nconst orderbook = await exchange.fetchOrderBook(pair1);\r\n\r\n```\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/18762/comments",
    "author": "zydjohnHotmail",
    "comments": [
      {
        "user": "carlosmiei",
        "created_at": "2023-08-03T10:47:41Z",
        "body": "Hello @zydjohnHotmail,\r\nRight now, yes you have to make 1 request per symbol, but that does not mean you have to do it sequentially, you can parallelize your requests. Regarding the RateLimit question, CCXT has a builtin RateLimiter so unless you're fetching a huge amount of data it should be ok. If you see that the limits are being crossed too many times you can also rotate your requests through different proxies to avoid getting limited. \r\n\r\nExample:\r\n\r\n```Javascript\r\n    const ohlcv = new ccxt.binance ();\r\n    const symbols = ['BTC/USDT', 'ETH/BTC', 'ETH/USDT', 'LTC/BTC', 'LTC/USDT'] // your symbols here\r\n    const promises = symbols.map (symbol => ohlcv.fetchOHLCV (symbol, '5m'))\r\n    const result = await Promise.all (promises)\r\n    for (let i = 0; i < symbols.length; i++) {\r\n        const symbol = symbols[i]\r\n        const ohlcv = result[i]\r\n        console.log (symbol, ohlcv.length, 'candles')\r\n    }\r\n```\r\n\r\n"
      },
      {
        "user": "zydjohnHotmail",
        "created_at": "2023-08-04T12:22:29Z",
        "body": "Hi,  thank you very much for your code, I tried to use your code, the following is my D:\\nodejs\\CCXT>type BinanceOHLCV.js\r\n'use strict';\r\nconst ccxt = require('ccxt');\r\n\r\n(async function () {\r\n    console.log(ccxt.version)\r\n    const ohlcv = new ccxt.binance ();\r\n    const symbols = ['BTC/USDT', 'ETH/BTC', 'ETH/USDT', 'LTC/BTC', 'LTC/USDT']\r\n    const promises = symbols.map (symbol => ohlcv.fetchOHLCV (symbol, '5m'))\r\n    const result = await Promise.all (promises)\r\n    for (let i = 0; i < symbols.length; i++) {\r\n        const symbol = symbols[i]\r\n        const ohlcv = result[i]\r\n        console.log (symbol, ohlcv.length, 'candles')\r\n    }\r\n})();\r\n\r\nWhen I run this code, I got the output: code: D:\\nodejs\\CCXT>node BinanceOHLCV.js\r\n4.0.49\r\nBTC/USDT 500 candles\r\nETH/BTC 500 candles\r\nETH/USDT 500 candles\r\nLTC/BTC 500 candles\r\nLTC/USDT 500 candles\r\n=> The code is working, but the data is not what I want: I want to show the price values, like: open, high, low and close.  How can I change the code to get the data I want.  By the way, how can I run this code, so I will get all the data every minute or every 5 minutes?\r\nThanks,"
      },
      {
        "user": "carlosmiei",
        "created_at": "2023-08-04T13:11:55Z",
        "body": "@zydjohnHotmail I was printing the length only but you can print the entire response.\r\nIf you want to fetch it every X minutes you can put it inside a while True, something like this:\r\n\r\n```Javascript\r\n    const binance = new ccxt.binance ();\r\n    const symbols = ['BTC/USDT', 'ETH/BTC', 'ETH/USDT', 'LTC/BTC', 'LTC/USDT'] // your symbols here\r\n    const sleepTime = 60000 // sleep time between requests in milliseconds currently 1 min\r\n    while (true) {\r\n        const promises = symbols.map (symbol => binance.fetchOHLCV (symbol, '5m'))\r\n        const result = await Promise.all (promises)\r\n        for (let i = 0; i < symbols.length; i++) {\r\n            const symbol = symbols[i]\r\n            const ohlcv = result[i]\r\n            console.log(symbol, ohlcv)\r\n        }\r\n        await binance.sleep(sleepTime)\r\n    }\r\n```\r\n"
      }
    ]
  },
  {
    "number": 18633,
    "title": "Bybit.fetch_tickers() return data with colon",
    "created_at": "2023-07-24T07:26:50Z",
    "closed_at": "2023-07-26T15:12:03Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/18633",
    "body": "### Operating System\n\nWindows 10 \n\n### Programming Languages\n\n_No response_\n\n### CCXT Version\n\n2.8.31\n\n### Description\n\nWhen I call fetch_tickers() function I get something like '10000LADYS/USDT:USDT':{} And this is rather strange considering that bybit.markets() will return the data in a different format, which is my preferred ('BTC/USDT':{} ). I tried to change the params and put a spot there, etc., but this does not help me. I checked the bybit documentation and didn't find anything there. Perhaps you can advise me. Because such a difference in the returned data from only 1 exchange interferes very much\n\n### Code\n\n```\r\n\u2002\u2002\r\n\r\n```\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/18633/comments",
    "author": "AlwxDavydov",
    "comments": [
      {
        "user": "carlosmiei",
        "created_at": "2023-07-24T09:27:29Z",
        "body": "Hello @AlwxDavydov,\r\n\r\nFirst and foremost, I noticed that you have a pretty outdated ccxt version I would suggest upgrading it because we did a lot of meaningful updates in the meantime.\r\n\r\nRegarding your question, bybit will return the swap tickers by default if no symbol/type is provided but you can easily provide a type in params if you want to retrieve spot tickers only, example:\r\n\r\n```Python\r\ntickers = await bybit.fetch_tickers(params = {'type':'spot'})\r\n```"
      },
      {
        "user": "AlwxDavydov",
        "created_at": "2023-07-24T17:04:02Z",
        "body": "@carlosmiei Thanks, your answer helped but not completely. As it turned out, not all tokens return by params = {'type':'spot'}), just like 1INCH, it will shown only if I use code with deafult params and looked like '1INCH/USDT:USDT. To be honest, I don't understand why. Initially, I thought that spot is only spot pairs, and default is those pairs that include margin trading, but no. For example WLD/USDC will be returned by params = spot, but in includes margin. So when I call a fetch_tickers() I want to got all pairs and I want it in some format like got all other exchanges.(without :USDT) Moreover I check type of some coins and both 1INCH and CAPO is type:spot but first is shown only without params second is shown only with params = {'type':'spot'}."
      },
      {
        "user": "carlosmiei",
        "created_at": "2023-07-26T11:10:27Z",
        "body": "@AlwxDavydov Sorry don't know exactly why was re-opened. Have you updated your ccxt version as suggested?"
      },
      {
        "user": "AlwxDavydov",
        "created_at": "2023-07-26T11:12:05Z",
        "body": "@carlosmiei Yes, the old version was added by autocomplete. I just didn't notice it"
      },
      {
        "user": "AlwxDavydov",
        "created_at": "2023-07-26T11:16:46Z",
        "body": "@carlosmiei I'll even add the problem. The fact is that len(bybit.markets) will return 669, but fetch_tickers(\r\n            params={'type': 'spot'}) will return around 280, and  fetch_tickers() will return around 250 pairs. So bybit.markets will include some derivatives and there are around 550 real spot markets, but they can only be obtained by different calls (with fetch_tickers(params={'type': 'spot'}) and without this pararms). I really hope I was able to explain well, but if you do not understand, please tell me and I will try again"
      },
      {
        "user": "carlosmiei",
        "created_at": "2023-07-26T11:55:45Z",
        "body": "@AlwxDavydov Sorry I still don't get what the problem is here.\r\n\r\n> The fact is that len(bybit.markets) will return 669,\r\n\r\nyes, bybit loads all markets buy default now (spot, swap, futures, options)\r\n\r\n> fetch_tickers(\r\nparams={'type': 'spot'}) will return around 280,\r\n\r\nThat is because only returns spot tickers\r\n\r\n>  fetch_tickers() will return around 250 pairs\r\n\r\nAs explained, by default will return only swap tickers\r\n\r\n\r\n\r\n"
      },
      {
        "user": "AlwxDavydov",
        "created_at": "2023-07-26T12:39:32Z",
        "body": "@carlosmiei Once again, I apologize for my stupidity and English. To be clearer, I will explain my task. I get tickers on many exchanges, on all but bybit it will return me all available pairs for spot (what I need) trading. But on bybit, the ticker call needs to be called 2 times to get all the pairs I need. This is annoying, but not such a big problem, the problem is that in spot trading pairs it will return data to me in a different format, namely the last coin and the colon before it(\"BTC/USDT:USDT\"). And I'm rather asking for advice on how I can get my 550 spot pairs (after all, their real number is about it) in the same format, without the last character with a colon."
      },
      {
        "user": "ttodua",
        "created_at": "2023-07-26T13:07:33Z",
        "body": "@AlwxDavydov please post your ccxt version.\r\nalso, tell us an example, which spot symbol that you are missing from bybit response when doing `fetch_tickers (None, {'type':'spot'})`"
      },
      {
        "user": "carlosmiei",
        "created_at": "2023-07-26T13:12:02Z",
        "body": "@AlwxDavydov Yeah the problem might be with the ccxt version, you might have installed a buggy outdated one. \r\n\r\nBtw if you see `:USDT` in the symbol that means it is a swap/derivative market not a spot one.  \r\n\r\nAs I said, I tested it on the latest version of ccxt and by doing `fetch_tickers(\r\nparams={'type': 'spot'})` I only get spot markets (with the symbol BASE/QUOTE)"
      }
    ]
  },
  {
    "number": 18609,
    "title": "derebit authentication error",
    "created_at": "2023-07-20T18:11:18Z",
    "closed_at": "2023-07-21T08:27:33Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/18609",
    "body": "### Operating System\n\nosx and windows 10\n\n### Programming Languages\n\npython\n\n### CCXT Version\n\nlast over pipe installed\n\n### Description\n\ni am try use your lib but on the windows 10 and on the osx have at the some error message \r\nccxt.base.errors.AuthenticationError: deribit {\"jsonrpc\":\"2.0\",\"error\":{\"message\":\"invalid_credentials\",\"code\":13004},\"testnet\":false,\"usIn\":1689876278308631,\"usOut\":1689876278308889,\"usDiff\":258}\r\n\r\nall lib last version updated,\r\nmy key and secret good and work.\r\n\r\npublic function your lib good work,but only private not work.\n\n### Code\n\n\r\nimport ccxt\r\nderibit = ccxt.deribit({\r\n    'apiKey': 'xxx',\r\n    'secret': 'xxx',\r\n})\r\n\r\nderibit.verbose = True\r\nprint(deribit.fetch_balance ())",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/18609/comments",
    "author": "sadek69",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2023-07-20T19:55:46Z",
        "body": "@sadek69 are you using the testnet keys or the production keys?"
      },
      {
        "user": "sadek69",
        "created_at": "2023-07-20T22:44:34Z",
        "body": "i am use test net keys"
      },
      {
        "user": "carlosmiei",
        "created_at": "2023-07-21T08:08:36Z",
        "body": "Hello @sadek69, I just tested the sandbox mode, and everything seems to be working fine, so I would suggest double-checking your API keys, make sure they don't have empty spaces, are not expired, etc\r\n\r\n```\r\n p deribit fetchBalance --sandbox\r\nPython v3.10.9\r\nCCXT v4.0.33\r\nderibit.fetchBalance()\r\n{'BTC': {'free': 98.99598757, 'total': 98.99602114, 'used': 1.678e-05},\r\n 'free': {'BTC': 98.99598757},\r\n 'info': {'available_funds': '98.99598757',\r\n          'available_withdrawal_funds': '98.99598654',\r\n          'balance': '98.99602011',\r\n          'cross_collateral_enabled': False,\r\n          'currency': 'BTC',\r\n          'delta_total': '0.001678',\r\n          'delta_total_map': {'btc_usd': '0.001678289'},\r\n          'deposit_address': 'bcrt1qhe24trh0d34lwh6j5rfmpyr8l9j76g3gey7jgs',\r\n          'equity': '98.99602114',\r\n          'estimated_liquidation_ratio': '0.00001721',\r\n          'estimated_liquidation_ratio_map': {'btc_usd': '0.000017205020192293057'},\r\n          'fee_balance': '0.0',\r\n          'futures_pl': '0.00099132',\r\n          'futures_session_rpl': '0.0',\r\n          'futures_session_upl': '0.00000103',\r\n          'initial_margin': '0.00003357',\r\n          'limits': {'matching_engine': {'burst': '20', 'rate': '5'},\r\n                     'non_matching_engine': {'burst': '100', 'rate': '20'}},\r\n          'maintenance_margin': '0.00001678',\r\n          'margin_balance': '98.99602114',\r\n          'options_delta': '0.0',\r\n          'options_gamma': '0.0',\r\n          'options_gamma_map': {},\r\n          'options_pl': '0.0',\r\n          'options_session_rpl': '0.0',\r\n          'options_session_upl': '0.0',\r\n          'options_theta': '0.0',\r\n          'options_theta_map': {},\r\n          'options_value': '0.0',\r\n          'options_vega': '0.0',\r\n          'options_vega_map': {},\r\n          'portfolio_margining_enabled': False,\r\n          'projected_delta_total': '0.001678',\r\n          'projected_initial_margin': '0.00003357',\r\n          'projected_maintenance_margin': '0.00001678',\r\n          'session_rpl': '0.0',\r\n          'session_upl': '0.00000103',\r\n          'spot_reserve': '0.0',\r\n          'total_pl': '0.00099132'},\r\n 'total': {'BTC': 98.99602114},\r\n 'used': {'BTC': 1.678e-05}}\r\n```\r\n\r\n"
      }
    ]
  },
  {
    "number": 18498,
    "title": "fetchPositionsRisk() requires an array argument for symbols",
    "created_at": "2023-07-07T13:03:59Z",
    "closed_at": "2023-07-07T13:07:04Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/18498",
    "body": "### Operating System\n\nLinux\n\n### Programming Languages\n\npython\n\n### CCXT Version\n\n4.0.13\n\n### Description\n\nSeems like the bug from 18131 is still not solved in 4.0.13. Below code gives \r\n>binance fetchPositionsRisk() requires an array argument for symbols\r\n\r\nSame error when one adds params={'type': 'future'} \r\n\r\n\n\n### Code\n\n```\r\nsymbol = \"LTC/USDT:USDT\"\r\nposResult = await exchange.fetchPositions(symbols = symbol)\r\n```\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/18498/comments",
    "author": "spc789",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2023-07-07T13:05:13Z",
        "body": "@spc789 the error says itself, the argument must be an array of symbols, not a single symbol:\r\n\r\n```\r\nsymbol = \"LTC/USDT:USDT\"\r\nposResult = await exchange.fetchPositions(symbols = [symbol])\r\n```\r\n\r\nor \r\n\r\n```\r\nsymbols = [\"LTC/USDT:USDT\"]\r\nposResult = await exchange.fetchPositions(symbols)\r\n```"
      }
    ]
  },
  {
    "number": 18359,
    "title": "CCXT Pro 'create_order_ws' on Kraken",
    "created_at": "2023-06-27T11:14:56Z",
    "closed_at": "2023-06-27T14:11:22Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/18359",
    "body": "### Operating System\n\nMacOS\n\n### Programming Languages\n\n_No response_\n\n### CCXT Version\n\nCCXT Pro 1.0.33\n\n### Description\n\nI am trying to submit an order with CCXT Pro on Kraken using web socket (Python).\r\n\r\n`order = await exchange.create_order_ws(symbol=\"UNI/USD\", type=\"market\", side=\"buy\", amount=1 )`\r\n\r\nBut I receive the following error:\r\n\r\n`AttributeError: 'kraken' object has no attribute 'create_order_ws'`\r\n\r\nDoes it mean that not all the WS methods in CCXT Pro work for supported exchanges or am I missing something?\r\n\r\nThank you for your help!\n\n### Code\n\n```\r\n\u2002\u2002\r\n\r\n```\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/18359/comments",
    "author": "AntoBr96",
    "comments": [
      {
        "user": "carlosmiei",
        "created_at": "2023-06-27T11:19:33Z",
        "body": "Hello @AntoBr96, Are you still using the old package? The latest ccxt version is 3.1.53, which is very distant from yours.\r\n\r\nRegarding your question, for now `kraken` is the only exchange with `create_order_Ws/cancel_order_ws/etc` available but we will be adding it to different exchanges in the future. \r\n\r\nIn short, if you update your ccxt version you should be able to use that method. "
      },
      {
        "user": "reverendrenegade",
        "created_at": "2023-09-09T14:00:42Z",
        "body": "Are there any updates on exchange coverage beyond Kraken regarding the aforementioned web socket streams? \r\n\r\n\"create_order_Ws/cancel_order_ws/etc\""
      }
    ]
  },
  {
    "number": 17822,
    "title": "watch_ohlcv always returns a single value",
    "created_at": "2023-05-07T06:51:04Z",
    "closed_at": "2023-05-07T21:59:12Z",
    "labels": [
      "bug",
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/17822",
    "body": "### Operating System\n\nEndeavourOS\n\n### Programming Languages\n\npython\n\n### CCXT Version\n\nCCXT Pro 3.0.79\n\n### Description\n\nI've been trying to run the `binance-watch-ohlcv.py` example and expected it to return more candles, however, it only seems to return one, no matter the limits I set. As I've understood, this method should return more candles, depending on the limit parameter that is set.\n\n### Code\n\n```\r\n\u2002\u2002\r\n\r\nimport ccxt.pro\r\nfrom asyncio import run\r\n\r\nprint('CCXT Pro version', ccxt.pro.__version__)\r\n\r\n\r\ndef table(values):\r\n    first = values[0]\r\n    keys = list(first.keys()) if isinstance(first, dict) else range(0, len(first))\r\n    widths = [max([len(str(v[k])) for v in values]) for k in keys]\r\n    string = ' | '.join(['{:<' + str(w) + '}' for w in widths])\r\n    return \"\\n\".join([string.format(*[str(v[k]) for k in keys]) for v in values])\r\n\r\n\r\nasync def main():\r\n    exchange = ccxt.pro.binance({\r\n        'options': {\r\n            'OHLCVLimit': 1000, # how many candles to store in memory by default\r\n        },\r\n    })\r\n    symbol = 'ETH/USDT'  # or BNB/USDT, etc...\r\n    timeframe = '1m'  # 5m, 1h, 1d\r\n    limit = 10  # how many candles to return max\r\n    method = 'watchOHLCV'\r\n    if (method in exchange.has) and exchange.has[method]:\r\n        max_iterations = 100000  # how many times to repeat the loop before exiting\r\n        for i in range(0, max_iterations):\r\n            try:\r\n                ohlcvs = await exchange.watch_ohlcv(symbol, timeframe, None, limit)\r\n                now = exchange.milliseconds()\r\n                print('\\n===============================================================================')\r\n                print('Loop iteration:', i, 'current time:', exchange.iso8601(now), symbol, timeframe)\r\n                print('-------------------------------------------------------------------------------')\r\n                print(table([[exchange.iso8601(o[0])] + o[1:] for o in ohlcvs]))\r\n            except Exception as e:\r\n                print(type(e).__name__, str(e))\r\n                break\r\n        await exchange.close()\r\n    else:\r\n        print(exchange.id, method, 'is not supported or not implemented yet')\r\n\r\n\r\nrun(main())\r\n```\r\nOutput looks like this\r\n```\r\nCCXT Pro version 3.0.79\r\n\r\n===============================================================================\r\nLoop iteration: 0 current time: 2023-05-07T06:42:00.151Z ETH/USDT 1m\r\n-------------------------------------------------------------------------------\r\n2023-05-07T06:41:00.000Z | 1902.53 | 1902.59 | 1902.52 | 1902.59 | 30.4667\r\n\r\n===============================================================================\r\nLoop iteration: 1 current time: 2023-05-07T06:42:03.130Z ETH/USDT 1m\r\n-------------------------------------------------------------------------------\r\n2023-05-07T06:42:00.000Z | 1902.58 | 1902.59 | 1902.58 | 1902.59 | 17.8681\r\n```",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/17822/comments",
    "author": "AndreiMihalea",
    "comments": [
      {
        "user": "pcriadoperez",
        "created_at": "2023-05-07T20:16:55Z",
        "body": "Hi @AndreiMihalea , by default the watch methods only return the updates it receives from the exchange, that's why you only receive one message at a time.\r\nWe do however cache all the messages, so if you wish to see them you can set the option. `exchange.newUpdates = false` so it returns the full cache.\r\nAlso if you want the historic ohlcv you can use `fetchOHLCV`\r\n\r\nLet me know if you have any questions, if not feel free to close the issue."
      }
    ]
  },
  {
    "number": 17818,
    "title": "Setting timeout and reconnect wait time for ws streams",
    "created_at": "2023-05-06T19:17:57Z",
    "closed_at": "2023-05-06T20:43:53Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/17818",
    "body": "### Operating System\n\nWindows & Linux\n\n### Programming Languages\n\npython\n\n### CCXT Version\n\n-\n\n### Description\n\nIs there a way to programmatically set the timeout property and a reconnect wait time for the websocket streams ? \n\n### Code\n\n```\r\n\u2002\u2002\r\n\r\n```\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/17818/comments",
    "author": "spc789",
    "comments": [
      {
        "user": "pcriadoperez",
        "created_at": "2023-05-06T20:39:05Z",
        "body": "Hi @spc789 ,\r\n\r\nYou can set the property `exchange['streaming']['keepAlive']` which is the ping-pong keep-alive rate in milliseconds\r\n\r\nFor the reconnect, by default if the connection is lost we reconnect when the next time the `watch` function is called. To control the timming, we throw an error when there is a disconnect, so in the try.. catch.. clause you could look for that error and set a reconnect time.\r\n\r\nI hope this answers the question, if not let me know or feel free to close the issue"
      }
    ]
  },
  {
    "number": 17753,
    "title": "unsupported operand type(s) for %: 'int' and 'NoneType' in watchTicker",
    "created_at": "2023-05-02T16:52:55Z",
    "closed_at": "2023-05-02T17:38:31Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/17753",
    "body": "### Operating System\r\n\r\nLinux\r\n\r\n### Programming Languages\r\n\r\npython\r\n\r\n### CCXT Version\r\n\r\n3.0.78\r\n\r\n### Description\r\n\r\nThe *complete* (just fill in an api and secret) code below throws the \r\n\r\n> unsupported operand type(s) for %: 'int' and 'NoneType' \r\n\r\nerror.\r\n\r\nCould it be there's an error somewhere in the watchTicker function ?\r\n\r\nI tried with symbol = 'ETH/USDT', symbol = 'ETH/USDT:USDT' and 'ETH-USDT'\r\n\r\n### Code\r\n\r\n```\r\n#!/usr/bin/python3.8\r\nimport ccxt\r\nimport ccxt.pro as ccxtpro\r\nimport os, sys, platform, traceback\r\nimport socket, requests\r\nimport pprint\r\nimport asyncio, aiohttp\r\nimport uvloop\r\n\r\nasync def watch_ticker(exchange):\r\n    while True:\r\n        try:\r\n            symbol = 'ETH/USDT'\r\n            print (symbol)\r\n            tck = await exchange.watchTicker(symbol)\r\n            pp.pprint(tck)\r\n        except Exception as e:\r\n            print(f\"{e}\")\r\n            exc_type, exc_obj, exc_tb = sys.exc_info()\r\n            fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]\r\n            print(exc_type, fname, exc_tb.tb_lineno)\r\n            await exchangepro.close()\r\n\r\n######################################\r\n### MAIN PROGRAM STARTS HERE \r\nasync def main():\r\n    tasks = []\r\n\r\n    tasks.append(asyncio.create_task(watch_ticker(exchangepro)))\r\n\r\n    try:\r\n        await asyncio.gather(*tasks)\r\n\r\n    except (ccxt.RequestTimeout, ccxt.NetworkError) as e:\r\n        print(f\"Request error occurred: {e} ...\")\r\n\r\n    except Exception as e:\r\n        print(f\"{e}\")\r\n        exc_type, exc_obj, exc_tb = sys.exc_info()\r\n        fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]\r\n        print(exc_type, fname, exc_tb.tb_lineno)\r\n        await exchangepro.close()\r\n\r\n########################################\r\n### WRAPPER FOR MAIN PROGRAM\r\n\r\nexchangepro = ccxtpro.binance({\r\n    'apiKey': api_key,\r\n    'secret': api_secret,\r\n    'enableRateLimit': False,\r\n})\r\n\u2002\u2002\r\nexchangepro.options = {\r\n    'defaultType': 'future', # or 'margin' or 'spot'\r\n    'adjustForTimeDifference': True,\r\n    'newOrderRespType': 'FULL',\r\n    'defaultTimeInForce': 'GTC'}\r\n\r\ntry:\r\n    if os.name.upper() != 'NT':\r\n        uvloop.install()\r\n    if os.name.upper() == 'NT':\r\n        asyncio.set_event_loop_policy(asyncio.WindowsSelectorEventLoopPolicy())\r\n\r\n    asyncio.run(main(), debug=False)\r\n\r\nexcept KeyboardInterrupt:\r\n    print(\"Program interrupted by user\")\r\n\r\n```\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/17753/comments",
    "author": "spc789",
    "comments": [
      {
        "user": "carlosmiei",
        "created_at": "2023-05-02T17:10:33Z",
        "body": "Hello  @spc789 is it possible to share the complete stacktrace? \r\nAlso, do you get that error immediately? \r\n"
      },
      {
        "user": "spc789",
        "created_at": "2023-05-02T17:16:10Z",
        "body": "Error comes immediately\r\nComplete stack trace : \r\n\r\nTraceback (most recent call last):\r\n>  File \"./CCXT\", line 20, in watch_ticker\r\n>    tck = await exchange.watchTicker(symbol)\r\n>  File \"/usr/local/lib/python3.8/dist-packages/ccxt/pro/binance.py\", line 702, in watch_ticker\r\n>    url = self.urls['api']['ws'][type] + '/' + self.stream(type, messageHash)\r\n>  File \"/usr/local/lib/python3.8/dist-packages/ccxt/pro/binance.py\", line 108, in stream\r\n>    normalizedIndex = streamIndex % streamLimit\r\n>TypeError: unsupported operand type(s) for %: 'int' and 'NoneType'\r\n><class 'NameError'> selfGrid-CCXT-WS-TICKERTEST 23\r\n\r\n"
      },
      {
        "user": "carlosmiei",
        "created_at": "2023-05-02T17:26:14Z",
        "body": "@spc789 Ok found the issue, basically you can't do this:\r\n\r\n```Python\r\nexchangepro.options = {\r\n    'defaultType': 'future', # or 'margin' or 'spot'\r\n    'adjustForTimeDifference': True,\r\n    'newOrderRespType': 'FULL',\r\n    'defaultTimeInForce': 'GTC'}\r\n```\r\nbecause you override and delete all the other options, you should be doing this instead:\r\n\r\n```Python\r\ncustomOptions = {\r\n    'defaultType': 'future', # or 'margin' or 'spot'\r\n    'adjustForTimeDifference': True,\r\n    'newOrderRespType': 'FULL',\r\n    'defaultTimeInForce': 'GTC'\r\n}\r\n\r\nexchangepro = ccxtpro.binance({\r\n    'apiKey': os.environ['BINANCEUSDM_APIKEY'],\r\n    'secret': os.environ['BINANCEUSDM_SECRET'],\r\n    'enableRateLimit': False,\r\n    'options': customOptions\r\n})\r\n```\r\n"
      }
    ]
  },
  {
    "number": 17718,
    "title": "load_markets v/s fetch_markets (pairs dict differences)",
    "created_at": "2023-04-30T08:22:43Z",
    "closed_at": "2023-05-01T22:47:57Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/17718",
    "body": "### \u061c\n\nCCXT ver 2.2.36 / Win-10 / python 3.7\r\n\r\nGetting available trading-pairs via load_markets may bring less results compared to fetch_markets for some exchanges.\r\nSo far I noticed two types of differences:\r\n\r\nA) Duplicate-pairs (totally identical records) are brought by fetch_market (while load_market doesn't). Example: For bitFlier exchange BTC_JPY and ETH_BTC pairs, occuring 3 times each in fetch_market result.\r\n\r\nB) Multiple pairs of the same symbol with different id are all brought by fetch_markets (while load_market brings only one of them). Example: For Binance exchange fetch_markets brings symbol BCH/BTC with 2 different ids (BCHBTC and BCHABCBTC), while load_markets brings only one id (BCHBTC). ",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/17718/comments",
    "author": "avmarko",
    "comments": [
      {
        "user": "carlosmiei",
        "created_at": "2023-04-30T10:41:35Z",
        "body": "Hello @avmarko,\r\n\r\n`fetchMarkets` returns an array of parsed markets whereas `loadMarkets` returns a dictionary indexed by the unified symbol, which is why you don't see repeated entries. For instance, binance has conflicting ids between spot and linear swap markets, so it is expected to see `id: BTCUSDT` twice on the array returned by `fetchMarkets` . The same does not happen with `loadMarkets` because our unified symbols do not have this ambiguity so you will get one entry with `key = 'BTC/USDT` referring to the spot market and another with `key = 'BTC/USDT:USDT` referring to the linear swap market. "
      }
    ]
  },
  {
    "number": 17631,
    "title": "[Question] FetchStatus",
    "created_at": "2023-04-21T21:59:45Z",
    "closed_at": "2023-04-22T12:43:38Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/17631",
    "body": "### \u061c\n\nHi, \r\n\r\nI have been having trouble to find the answer by myself through the ccxt documentation. So I have no choice to ask it here. \r\nI would like to use exchange.fetchStatus() to do a initial check before running my script. \r\n\r\nBut I wonder, what will be expected response if an exchange goes into maintenance mode? \r\nHow will the 'eta' response be like? In seconds or date time? \r\n\r\nBecause i am implementing a loop that will sleep until the ETA time before running the remaining code if it goes into maintenance mode. \r\n\r\nSorry if this answer can be found, because i really didn't manage to find it. ",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/17631/comments",
    "author": "300Gram",
    "comments": [
      {
        "user": "sc0Vu",
        "created_at": "2023-04-22T01:12:04Z",
        "body": "Hi @300Gram \r\n\r\nIf the exchange start maintenance mode, the statue would be `maintenance`.\r\n\r\nIt seems not so much exchange response  `eta` (only see bitmart), and the data would be timestamp in ms.\r\n\r\nLet me know if you have any other issues."
      }
    ]
  },
  {
    "number": 17608,
    "title": "Could not create 'Nonce' for Bigone jwt",
    "created_at": "2023-04-19T15:49:53Z",
    "closed_at": "2023-04-20T02:37:15Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/17608",
    "body": "### \u061c\n\nHi there,\r\n\r\nI'm trying to read the balance from my Bigone account using a python script.\r\nBeside the API_Key and Secret, there is also an JWT I need. But when I create the jwt, I always get an error:\r\n\r\nccxt.base.errors.AuthenticationError: bigone {\"code\":40004,\"message\":\"nonce expired\"} \r\n\r\nI have try everything, but get still the same error. Here is my code:\r\n\r\n`\r\nbigoneApi = os.environ.get('BIGONE_API_KEY')\r\nbigoneSecret = os.environ.get('BIGONE_SECRET')\r\n\r\nissuedAt = int(time.time())\r\nexpiration = int(time.time()) + 432000 # JWT will expire in 5 days\r\nnonce = int(time.time() * 1000)\r\n\r\npayload = {\r\n    \"type\": \"OpenAPI\",\r\n    \"sub\": bigoneApi,\r\n    \"iat\": issuedAt,\r\n    \"exp\": expiration,\r\n    \"nonce\": nonce\r\n}\r\n\r\nbigoneToken = jwt.encode(payload, bigoneSecret, algorithm='HS256')\r\nbigoneEx = ccxt.bigone({\r\n    'apiKey': bigoneApi,\r\n    'secret': bigoneSecret,\r\n    'headers': {\r\n        'Authorization': 'Bearer ' + bigoneToken\r\n    }\r\n})`\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/17608/comments",
    "author": "AntonDe",
    "comments": [
      {
        "user": "carlosmiei",
        "created_at": "2023-04-19T16:25:07Z",
        "body": "Hello @AntonDe,\r\nCCXT already does the signing logic for you why are you trying to do it manually? You just need to provide the apiKey and secret (token in this case).\r\n"
      },
      {
        "user": "AntonDe",
        "created_at": "2023-04-19T16:40:35Z",
        "body": "You are right, by using Binance exchange for example I just provide the API and Secret. Bigone needs an JWT set, in other case by just setting the API and Secret and trying to get the balance from Bigone exchange. I get the error: \r\n\r\ninvalid jwt"
      },
      {
        "user": "carlosmiei",
        "created_at": "2023-04-19T17:14:36Z",
        "body": "> You are right, by using Binance exchange for example I just provide the API and Secret. Bigone needs an JWT set, in other case by just setting the API and Secret and trying to get the balance from Bigone exchange. I get the error:\r\n> \r\n> invalid jwt\r\n\r\n@AntonDe What is your ccxt version? I just tested and seems to be working fine\r\n\r\n```\r\nPython v3.10.9\r\nCCXT v3.0.72\r\nbigone.fetchBalance()\r\n{'1INCH': {'free': 0.0, 'total': 0.0, 'used': 0.0},\r\n 'AAVE': {'free': 0.0, 'total': 0.0, 'used': 0.0},\r\n 'AAVE3L': {'free': 0.0, 'total': 0.0, 'used': 0.0},\r\n 'AAVE3S': {'free': 0.0, 'total': 0.0, 'used': 0.0},\r\n 'AAVE5L': {'free': 0.0, 'total': 0.0, 'used': 0.0},\r\n 'AAVE5S': {'free': 0.0, 'total': 0.0, 'used': 0.0},\r\n 'ABBC': {'free': 0.0, 'total': 0.0, 'used': 0.0},\r\n```\r\n"
      }
    ]
  },
  {
    "number": 17514,
    "title": "Opening stop loss and take profit orders on Bybit",
    "created_at": "2023-04-09T10:11:46Z",
    "closed_at": "2023-05-06T10:33:12Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/17514",
    "body": "### Operating System\r\n\r\nWindows 10\r\n\r\n### Programming Languages\r\n\r\npython\r\n\r\n### CCXT Version\r\n\r\n3.0.9\r\n\r\n### Description\r\n\r\nI'm trying to create a stop loss and take profit for my order on bybit with ccxt.\r\n\r\n\r\n\r\n### Code\r\n\r\nI've tried the following:\r\n(1)\r\n```\r\n        side = direction\r\n        order_type = 'market'\r\n        entry_price = last_price\r\n        size = 1\r\n        params = {\r\n            'leverage': 1,\r\n            'marginMode': 'cross',\r\n            'stopLoss' : stop_loss,\r\n            'takeProfit' : take_profit\r\n        }\r\n\r\n        order = exchange.create_order(symbol, order_type, side, size, entry_price, params)\r\n```\r\n\r\n(2)\r\n```\r\n        side = direction\r\n        order_type = 'market'\r\n        entry_price = last_price\r\n        size = 1\r\n        params = {\r\n            'leverage': 1,\r\n            'marginMode': 'cross',\r\n            'stopLossPrice' : stop_loss,\r\n            'takeProfitPrice' : take_profit\r\n        }\r\n\r\n        order = exchange.create_order(symbol, order_type, side, size, entry_price, params)\r\n```\r\n\r\n(3)\r\n```\r\n        side = direction\r\n        order_type = 'market'\r\n        entry_price = last_price\r\n        size = 1\r\n        params = {\r\n            'leverage': 1,\r\n            'marginMode': 'cross',\r\n            'stop_loss' : stop_loss,\r\n            'take_profit' : take_profit\r\n        }\r\n\r\n        order = exchange.create_order(symbol, order_type, side, size, entry_price, params)\r\n```\r\n\r\n\r\n\r\n(4)\r\n```\r\n        side = direction\r\n        order_type = 'market'\r\n        entry_price = last_price\r\n        size = 1\r\n        params = {\r\n            'leverage': 1,\r\n            'marginMode': 'cross',\r\n            'stopPrice' : stop_loss,\r\n            'triggerPrice' : take_profit\r\n        }\r\n\r\n        order = exchange.create_order(symbol, order_type, side, size, entry_price, params)\r\n```\r\n\r\nI'm either getting the following error:\r\n```\r\nError: bybit {\"retCode\":10001,\"retMsg\":\"Request parameter error.\",\"result\":{},\"retExtInfo\":{},\"time\":1681034354617}\r\n```\r\n\r\nOr it opens a limit order for the stop loss and it ignores the take profit limit order and market order.",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/17514/comments",
    "author": "ambiflextrous",
    "comments": [
      {
        "user": "sc0Vu",
        "created_at": "2023-04-10T04:48:10Z",
        "body": "Hi @weslienlive\r\n\r\nThe bug was incorrect data type of stopLoss/takeProfit (should be string). We already fixed last week. Please update ccxt. Let me know if you have any other issues."
      }
    ]
  },
  {
    "number": 17479,
    "title": "Fetch oldest candles on BitGet, no response",
    "created_at": "2023-04-04T21:23:55Z",
    "closed_at": "2023-04-06T06:21:20Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/17479",
    "body": "### Operating System\n\nlinux\n\n### Programming Languages\n\nJS\n\n### CCXT Version\n\n3.0.52\n\n### Description\n\nHi @carlosmiei,\r\n\r\nI'm trying to retrieve the oldest candles for a symbol on BitGet.\r\nI use a large time frame to estimate the first market time.\r\nBut no candle is returned.\r\nSee example.\r\nWork fine on Binance and ByBit.\n\n### Code\n\n```\r\n\u2002\u2002    const exchange = new ccxt['bitget']()\r\n\r\n    // big time frame\r\n    let ohlcvRawList = await exchange.fetchOHLCV('ETH/USDT:USDT', '1w')\r\n\r\n    let firstMonthCandle = ohlcvRawList[0]\r\n    const timeStart = firstMonthCandle[0]\r\n\r\n    const timeStartTenMonthAfter = timeStart + 60 * 60 * 24 * 30 * 10 * 1000\r\n\r\n    console.log('first month candle', firstMonthCandle)\r\n    ohlcvRawList = await exchange.fetchOHLCV('ETH/USDT:USDT', '1h', timeStart)\r\n    console.log(ohlcvRawList.length) // 0\r\n\r\n    // try 10 months after\r\n    ohlcvRawList = await exchange.fetchOHLCV('ETH/USDT:USDT', '1h', timeStartTenMonthAfter)\r\n    console.log(ohlcvRawList.length) // 0\r\n```\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/17479/comments",
    "author": "dawadam",
    "comments": [
      {
        "user": "sc0Vu",
        "created_at": "2023-04-05T02:30:43Z",
        "body": "Hi @dawadam \r\n\r\nAfter test, it seems you can fetch data within 30 days for 1h (the documentations said for `1m` candles)"
      }
    ]
  },
  {
    "number": 17307,
    "title": "exchange.loadMarkets() returns unsupported TUSD pairs for Binance",
    "created_at": "2023-03-22T20:01:41Z",
    "closed_at": "2023-03-23T12:39:33Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/17307",
    "body": "### Operating System\n\nWindows\n\n### Programming Languages\n\nJS\n\n### CCXT Version\n\n3.0.23\n\n### Description\n\nThe symbols returned when using exchange.loadMarkets() with Binance returns the following TUSD trading pairs:\r\n\r\nADA/TUSD\r\nALGO/TUSD\r\nANKR/TUSD\r\nATOM/TUSD\r\nBAT/TUSD\r\nBCH/TUSD\r\nBCPT/TUSD\r\nBNB/TUSD\r\nBSV/TUSD\r\nBTC/TUSD\r\nBTT/TUSD\r\nEOS/TUSD\r\nETC/TUSD\r\nETH/TUSD\r\nFTM/TUSD\r\nGTO/TUSD\r\nLINK/TUSD\r\nLTC/TUSD\r\nNEO/TUSD\r\nONE/TUSD\r\nPAX/TUSD\r\nPHB/TUSD\r\nTFUEL/TUSD\r\nTRX/TUSD\r\nTUSD/BNB\r\nTUSD/BTC\r\nTUSD/BUSD\r\nTUSD/ETH\r\nTUSD/USDT\r\nTUSDB/TUSD\r\nUSDC/TUSD\r\nUSDS/TUSD\r\nWAVES/TUSD\r\nXLM/TUSD\r\nXRP/TUSD\r\nZEC/TUSD\r\n\r\nOf these, only the following are actually available on Binance:\r\nBNB/TUSD\r\nBTC/TUSD\r\nETH/TUSD\r\nTUSD/USDT\r\n\r\nPerhaps this is a problem on the Binance side, but reporting it just in case.\r\n\n\n### Code\n\n```\r\n\u2002\u2002\r\n\r\n```\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/17307/comments",
    "author": "hodlerhacks",
    "comments": [
      {
        "user": "carlosmiei",
        "created_at": "2023-03-23T12:39:32Z",
        "body": "Hello @hodlerhacks,\r\nThanks but if you look closely the market has `active:false` meaning that the market exists but is not available for trading"
      }
    ]
  },
  {
    "number": 17170,
    "title": "watch_ohlcv function not working for Bybit exchange",
    "created_at": "2023-03-14T15:40:00Z",
    "closed_at": "2023-03-14T19:25:33Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/17170",
    "body": "### Operating System\n\nWindows 11\n\n### Programming Languages\n\npython\n\n### CCXT Version\n\n2.8.89\n\n### Description\n\nI am trying to connect with Bybit using the watch_ohlcv function to stream live data, but it returns an array with no values. The same code works fine for Binance Exchange.\r\n\r\nOutput ---\r\n\r\n[[None, None, None, None, None, None]]\r\n[[None, None, None, None, None, None]]\r\n[[None, None, None, None, None, None]]\r\n[[None, None, None, None, None, None]]\r\n[[None, None, None, None, None, None]]\n\n### Code\n\n```\r\nimport asyncio\r\nimport ccxt.pro\r\n\r\n\r\nmarket = \"future\"\r\napi_key = \"api_key\"\r\napi_sec = \"api_secret\"\r\n\r\nexchange = ccxt.pro.bybit({\r\n    'enableRateLimit': True,\r\n    'options': {\r\n        'defaultType': market,\r\n        'adjustForTimeDifference': True\r\n    },\r\n    \"apiKey\" : api_key,\r\n    \"secret\" : api_sec\r\n})\r\n\r\n\r\n\r\nasync def fetch_kline():\r\n\r\n    while True:\r\n\r\n        live_feed = await exchange.watch_ohlcv(\"ETH/USDT\", \"1m\")\r\n\r\n        print(live_feed)\r\n\r\n\r\n\r\nasyncio.run(fetch_kline())\r\n```",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/17170/comments",
    "author": "sumitgautam0101",
    "comments": [
      {
        "user": "carlosmiei",
        "created_at": "2023-03-14T15:41:49Z",
        "body": "Hello @sumitgautam0101,\r\nDo you mind updating your ccxt version? I think this issue was fixed in the meantime."
      }
    ]
  },
  {
    "number": 17114,
    "title": "watchOrderBookSnapshot has error in ascendex",
    "created_at": "2023-03-10T18:18:33Z",
    "closed_at": "2023-03-16T15:26:36Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/17114",
    "body": "### Operating System\r\n\r\nwindows 64bit\r\n\r\n### Programming Languages\r\n\r\nJS\r\n\r\n### CCXT Version\r\n\r\n2.8.75\r\n\r\n### Description\r\n\r\n```js\r\nError in watchOrderBookSnapshot method in the ascendex:\r\n\r\nC:\\Bots\\jsTest\\node_modules\\ccxt\\js\\pro\\ascendex.js:270\r\n        orderbook.reset (snapshot);\r\n                  ^\r\n\r\nTypeError: Cannot read properties of undefined (reading 'reset')\r\n    at ascendex.handleOrderBookSnapshot (C:\\Bots\\jsTest\\node_modules\\ccxt\\js\\pro\\ascendex.js:270:19)\r\n    at ascendex.handleMessage (C:\\Bots\\jsTest\\node_modules\\ccxt\\js\\pro\\ascendex.js:892:20)\r\n    at WsClient.onMessage (C:\\Bots\\jsTest\\node_modules\\ccxt\\js\\pro\\base\\Client.js:283:14)\r\n    at callListener (C:\\Bots\\jsTest\\node_modules\\ws\\lib\\event-target.js:290:14)\r\n    at WebSocket.onMessage (C:\\Bots\\jsTest\\node_modules\\ws\\lib\\event-target.js:209:9)\r\n    at WebSocket.emit (node:events:512:28)\r\n    at Receiver.receiverOnMessage (C:\\Bots\\jsTest\\node_modules\\ws\\lib\\websocket.js:1180:20)\r\n    at Receiver.emit (node:events:512:28)\r\n    at Receiver.dataMessage (C:\\Bots\\jsTest\\node_modules\\ws\\lib\\receiver.js:541:14)\r\n    at Receiver.getData (C:\\Bots\\jsTest\\node_modules\\ws\\lib\\receiver.js:459:17)\r\n\r\nNode.js v19.7.0\r\n```\r\n\r\n### Code\r\n\r\n```js\r\nconst ccxt = require('ccxt')\r\n\r\nconst exchange = new ccxt.pro.ascendex({\r\n    'apiKey': apiKey,\r\n    'secret': secret,\r\n    'options': {\r\n        'account-category': 'margin', // 'cash', 'margin', 'futures' // obsolete\r\n        'account-group': accountGroup,\r\n        'defaultType': 'margin', // 'spot', 'margin', 'swap'\r\n        'accountCategories': {\r\n            'margin': 'margin',\r\n        }\r\n    },\r\n})\r\n\r\nexchange.verbose = false\r\n\r\nasync function watchOrderBookSnapshot(symbol) {\r\n    while (true) {\r\n        try {\r\n            const orderbook = await exchange.watchOrderBookSnapshot(symbol)\r\n            console.log(new Date(), exchange.id, symbol, orderbook)\r\n        } catch (e) {\r\n            console.log(symbol, e)\r\n        }\r\n    }\r\n}\r\n\r\nwatchOrderBookSnapshot('MATIC/USDT')\u2002\r\n\r\n```\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/17114/comments",
    "author": "fotrosi",
    "comments": [
      {
        "user": "carlosmiei",
        "created_at": "2023-03-11T14:28:40Z",
        "body": "Hello @fotrosi,\r\n`watchOrderBookSnaphot` is an internal method and not meant to be used independently. You should be using `watchOrderBook` instead. "
      }
    ]
  },
  {
    "number": 16952,
    "title": "Create Order in ccxt bybit Testnet position idx not match position mode",
    "created_at": "2023-02-24T13:43:11Z",
    "closed_at": "2023-02-24T14:13:25Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/16952",
    "body": "### \u061c\n\nI want create a simple order in Derivates -> USDT Perpetual -> BTCUSDT. \r\n\r\nI have following Balance:\r\n'coin': 'BTC', 'equity': '1.07893293', 'walletBalance': '1.07893293'\r\n\r\nHere is my code:\r\n\r\nimport ccxt\r\n\r\nexchange = ccxt.bybit({\r\n    'apiKey': 'apiKey',\r\n    'secret': 'secretKey',\r\n    'enableRateLimit': True,\r\n    'options': {\r\n        'recvWindow': 10000,\r\n    }\r\n})\r\nexchange.set_sandbox_mode(True)\r\nexchange.options[\"defaultType\"] = 'swap'\r\nsymbol = 'BTC/USDT:USDT'\r\norder = exchange.createOrder(symbol=symbol, type='Market', side='buy', amount=0.01)\r\n\r\nBut i get this error:\r\nbybit {\"retCode\":10001,\"retMsg\":\"position idx not match position mode\",\"result\":{},\"retExtInfo\":{},\"time\":1677246036932}\r\n\r\nHave somebody a solution?\r\nThanks",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/16952/comments",
    "author": "ghost",
    "comments": [
      {
        "user": "carlosmiei",
        "created_at": "2023-02-24T14:04:40Z",
        "body": "Hello @hambi44,\r\nYes you just need to provide `positionIdx` inside params.\r\n\r\nExample:\r\n```Python\r\nparams = {\r\n    'positionIdx': 1 #  0 One-Way Mode, 1 Buy-side, 2 Sell-side\r\n}\r\nsymbol = 'BTC/USDT:USDT'\r\norder = exchange.createOrder(symbol=symbol, type='Market', side='buy', amount=0.01, params = params)\r\n```\r\n"
      }
    ]
  },
  {
    "number": 16929,
    "title": "Kucoin fetchBalance method returning empty data",
    "created_at": "2023-02-22T20:31:54Z",
    "closed_at": "2023-02-22T21:02:32Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/16929",
    "body": "### \u061c\r\n\r\nI think this is a stupid question.\r\nBut I don't know why. please help me.\r\nFor testing purpose, I deposited 55$ to kucoin main account and can check it.\r\n\r\n0.00230737BTC\u2248 55.03USD(Loans: 0.00 BTC)\r\n\r\nI also created an API key.\r\n```\r\nKey : 63f666faf2ac4300019c0de5\r\nAPI Restrictions : General, Trade\r\nPeriod of Validity : 30 days\r\nIP Restriction : No\uff08less secure; binding an IP address is recommended)\r\n\r\nKeys and secrets are correct.\r\n\r\nconst kucoin = new ccxt.kucoin({\r\n    'apiKey': config.kucoin_apiKey,\r\n    'secret': config.kucoin_secret,\r\n    'password' : config.kucoin_password,\r\n    'enableRateLimit': true,\r\n    'trust': true // enable trust option\r\n});\r\nconsole.log (await kucoin.fetchBalance ())\r\n\r\nresult is : \r\n{\r\n  info: { code: '200000', data: [] },\r\n  timestamp: undefined,\r\n  datetime: undefined,\r\n  free: {},\r\n  used: {},\r\n  total: {}\r\n}\r\n\r\nwhen I test with fetchDeposits(), the result is correct.\r\n\r\nOS : Windows 10\r\nProgramming Language version: Node JS 14.18.1\r\nCCXT version : 2.4.96\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/16929/comments",
    "author": "leon-0222",
    "comments": [
      {
        "user": "samgermain",
        "created_at": "2023-02-22T20:57:44Z",
        "body": "Can you try \r\n\r\n`kucoin.fetchBalance('{\"type\": \"main\"}')`\r\n\r\nand \r\n\r\n`kucoin.fetchBalance('{\"type\": \"spot\"}')`\r\n\r\n------------------------------\r\n\r\n`kucoin.fetchBalance` defaults to getting the balance from your spot account, when you make a deposit to your kucoin account, it will go into your `funding`/`main` account"
      }
    ]
  },
  {
    "number": 16898,
    "title": "Kucoinfutures fetch open orders shows no data anymore",
    "created_at": "2023-02-19T15:55:05Z",
    "closed_at": "2023-02-20T13:10:26Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/16898",
    "body": "### \u061c\n\nOS: Windows 10\r\nProgramming Language version: Python\r\nCCXT version: 2.8.16\r\n\r\n\r\nHello, \r\n\r\nsince a few days kucoinfutures doesn't show any data if I try to fetch open orders when STOP ORDER is placed. Issue occurs at linear and inverse contracts.   If a limit order above price is placed it works. \r\nAlso here I didn't change anything, it has worked fine for months now, but suddenly it doesn't work anymore. \r\n\r\n\r\nkucoin = ccxt.kucoinfutures({'enableRateLimit': True,\r\n                       'apiKey': kucoinconfig.api_key,\r\n                       'secret': kucoinconfig.api_secret,\r\n                       'password' : 'xxxxxxxxxxx',})\r\n\r\nsymbol = 'ETH/USDT:USDT'\r\npos_size = 1\r\n\r\norders = kucoin.fetch_open_orders(symbol)\r\n        print(orders)\r\n\r\nOutput is this --> []\r\n\r\n\r\n\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/16898/comments",
    "author": "Nitrix321",
    "comments": [
      {
        "user": "carlosmiei",
        "created_at": "2023-02-20T09:58:19Z",
        "body": "Hello @Nitrix321,\r\n\r\nIf you want to fetch open `stop` orders you should provide `stop:True` inside `params`.\r\nExample:\r\n```\r\nparams = {\r\n   'stop': True\r\n}\r\nstop_open_orders = kucoin.fetch_open_orders(symbol, params=params)\r\n```\r\n\r\n"
      }
    ]
  },
  {
    "number": 16878,
    "title": "The parameters of orders are null",
    "created_at": "2023-02-17T11:53:11Z",
    "closed_at": "2023-02-17T13:38:32Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/16878",
    "body": "### \u061c\n\nhello, this is what I get after calling\r\n\r\n`write(order=exchange.create_market_order(symbol, side, size, params))`\r\n\r\nwhere write is a function that dumps a json in a json file\r\n\r\n`{\r\n    \"info\": {\r\n        \"orderId\": \"2c471e2c-7160-40e0-842b-6234a0333e2a\",\r\n        \"orderLinkId\": \"\"\r\n    },\r\n    \"id\": \"2c471e2c-7160-40e0-842b-6234a0333e2a\",\r\n    \"clientOrderId\": null,\r\n    \"timestamp\": null,\r\n    \"datetime\": null,\r\n    \"lastTradeTimestamp\": null,\r\n    \"symbol\": null,\r\n    \"type\": null,\r\n    \"timeInForce\": null,\r\n    \"postOnly\": null,\r\n    \"side\": null,\r\n    \"price\": null,\r\n    \"stopPrice\": null,\r\n    \"triggerPrice\": null,\r\n    \"amount\": null,\r\n    \"cost\": null,\r\n    \"average\": null,\r\n    \"filled\": null,\r\n    \"remaining\": null,\r\n    \"status\": null,\r\n    \"fee\": null,\r\n    \"trades\": [],\r\n    \"fees\": [],\r\n    \"reduceOnly\": null\r\n}`\r\n\r\nwhy are all the attributes null? what am I doing wrong?",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/16878/comments",
    "author": "SequoiaB",
    "comments": [
      {
        "user": "carlosmiei",
        "created_at": "2023-02-17T12:11:44Z",
        "body": "Hello @SequoiaB,\r\nYou're doing nothing wrong. Some exchanges, upon creating an order return only its id immediately (some order creation processes are async so they don't have the information available right away). Using that id you can fetch all the information by using the unified method `fetchOrder` "
      }
    ]
  },
  {
    "number": 16650,
    "title": "python async speed slower",
    "created_at": "2023-01-27T07:36:29Z",
    "closed_at": "2023-01-27T18:00:35Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/16650",
    "body": "### Operating System\n\nubuntu\n\n### Programming Languages\n\npython\n\n### CCXT Version\n\n2.6.94\n\n### Description\n\nWhile I was trying to migrate my code to async I noticed that my execution was slower.\r\n\r\nI wrote a small code to compare the async vs sync speed. \r\n\r\nAverage execution time of both is written below in seconds in one of my test runs. On average async takes rougly 2x longer . Similar results when tested in other methods such as \"fetch_tickers\".\r\n\r\nasync mean: 1.1664345026016236\r\nsync mean: 0.5469205617904663\n\n### Code\n\n```\r\nimport asyncio\r\nimport time\r\n\r\nimport ccxt.async_support as ccxta  \r\nimport ccxt\r\nimport os\r\nfrom dotenv import load_dotenv\r\nload_dotenv()\r\n\r\nbinance_keys = {\r\n        \"apikey\" : os.getenv(\"BINANCE_APIKEY\"),\r\n        \"secret\" : os.getenv(\"BINANCE_SECRET\")\r\n    }\r\n\r\nasync def get_balance_async(exchange):\r\n    balance = await exchange.fetch_balance()\r\n    await exchange.close()\r\n    return balance\r\n\r\nexchange_async = ccxta.binance({\r\n        'apiKey': binance_keys[\"apikey\"],\r\n        'secret': binance_keys[\"secret\"],\r\n    })\r\n\r\nexchange_sync = ccxt.binance({\r\n        'apiKey': binance_keys[\"apikey\"],\r\n        'secret': binance_keys[\"secret\"],\r\n    })\r\n\r\ntime_sync = []\r\ntime_async = []\r\n\r\nloop = asyncio.get_event_loop()\r\nfor i in range(10):\r\n\r\n    start = time.time()\r\n    loop.run_until_complete(get_balance_async(exchange_async))\r\n    time_async.append(time.time() - start)\r\n    time.sleep(0.2)\r\n\r\n    start = time.time()\r\n    balance = exchange_sync.fetch_balance()\r\n    time_sync.append(time.time() - start)\r\n    time.sleep(0.2)\r\n\r\nprint(\"Async data: \", time_async)\r\nprint(\"Sync data: \", time_sync)\r\nprint(f\"async mean: {sum(time_async)/len(time_async)}\")\r\nprint(f\"sync mean: {sum(time_sync)/len(time_sync)}\")\r\n\u2002\u2002\r\n\r\n```\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/16650/comments",
    "author": "akasimo",
    "comments": [
      {
        "user": "carlosmiei",
        "created_at": "2023-01-27T11:23:45Z",
        "body": "Hello @akasimo,\r\nThe difference is not related to the sync vs async approach, but the default RateLimiter ccxt async has in place. You can disable it if you want by providing this option: `enableRateLimit: False`. "
      }
    ]
  },
  {
    "number": 16500,
    "title": "How to fetchCurrencies workes?",
    "created_at": "2023-01-15T21:24:48Z",
    "closed_at": "2023-01-16T04:24:50Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/16500",
    "body": "### Operating System\r\n\r\nWindows 10 \r\n\r\n### Programming Languages\r\n\r\nNodejs\r\n\r\n### CCXT Version\r\n\r\n2.5.47\r\n\r\n### Description\r\n\r\nThis is not exactly a bug request, more of a question. I'm sorry, I couldn't find the question section. The thing is, I can't get the currency structure. In the documentation, this method is listed as public, but I saw a similar question where the developers said that the structure of the token, the commission and the network can only be obtained with an API key. How can I get Currency Structure? I also tried the example directly from the documentation, but it's most likely for python, or I'm using it incorrectly\r\n\r\n### Code\r\n\r\n```\r\n\u2002\u2002\r\nconst ccxt = require(\"ccxt\");\r\n\r\n(async function () {\r\n  let binance = new ccxt.binance();\r\n  await binance.loadMarkets;\r\n  let cur= await binance.fetchCurrencies[\"ETH\"];\r\n  console.log(cur);  // undefined\r\n})();\r\n\r\n// Example from docs\r\n(async function () {\r\n  let binance = new ccxt.binance();\r\n  await binance.loadMarkets();\r\n  let cur= binance.currencies[\"ETH\"][\"fee\"];\r\n  console.log(cur);  // undefined\r\n})(); /\r\n\r\n//I want this Currency Structure\r\n\r\n{\r\n    'id':       'btc',       \r\n    'code':     'BTC',       \r\n    'name':     'Bitcoin',   \r\n    'active':    true,       \r\n    'fee':       0.123,      \r\n    'precision': 8,         \r\n    'deposit':   true      \r\n    'withdraw':  true        \r\n    'limits': {              \r\n        'amount': {\r\n            'min': 0.01,     \r\n            'max': 1000,     \r\n        },\r\n        'withdraw': { ... },\r\n        'deposit': {...},\r\n    },\r\n    'networks': {...}        \r\n    'info': { ... },    \r\n}",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/16500/comments",
    "author": "AlwxDavydov",
    "comments": [
      {
        "user": "sc0Vu",
        "created_at": "2023-01-16T04:23:19Z",
        "body": "Hi @AlwxDavydov \r\n\r\nAfter loadMarkets, you can get currency:\r\n\r\n`let cur= binance.currency('ETH')`"
      }
    ]
  },
  {
    "number": 16406,
    "title": "[Python] set TP and SL in Bybit ",
    "created_at": "2023-01-10T03:11:55Z",
    "closed_at": "2023-01-10T13:09:57Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/16406",
    "body": "### Operating System\r\n\r\nLinux\r\n\r\n### Programming Languages\r\n\r\npython\r\n\r\n### CCXT Version\r\n\r\n2.5.56\r\n\r\n### Description\r\n\r\nAny way to set TP and SL with bybit in python?\r\nI keep getting errors like\r\n\r\n```\r\nERROR:root:bybit {\"retCode\":10001,\"retMsg\":\"expect Failling, but trigger_price[5980000] \\u003e= current[1361500]??1\",\"result\":{},\"retEx\r\n``` \r\n\r\nor \r\n\r\n```\r\nERROR:root:bybit {\"retCode\":10001,\"retMsg\":\"expect Rising, but trigger_price[1249500] \\u003c= current[1363000]??1\",\"result\":{},\"retExtI\r\n```\r\nboth for shorts and longs\r\n\r\n### Code\r\n\r\n```\r\n\u2002\u2002bybit.create_order(symbol=position.symbol,\r\n                                   type='limit',\r\n                                   side=position.direction,\r\n                                   amount=size,\r\n                                   price=float(position.entry),\r\n                                   params={\r\n                                    'leverage': LEVER,\r\n                                    'stopLossPrice': float(position.sl),\r\n                                    'takeProfitPrice': float(position.tp),\r\n                                    })\r\n\r\n```\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/16406/comments",
    "author": "3ntr0phy",
    "comments": [
      {
        "user": "carlosmiei",
        "created_at": "2023-01-10T09:56:07Z",
        "body": "Hello @3ntr0phy,\r\n\r\nActually, `stopLossPrice` and `takeProfitPrice` params are incompatible params, because they're meant to be used when you want your order or behave as a `stopLoss` **or** `takeProfit` orders. \r\n\r\nIf you want to attach a takeProfit and stopLoss order to the position being opened, you should use the `stopLoss` and `takeProfit` params.\r\n\r\nExample:\r\n\r\n```Python\r\nparams = {\r\n    'stopLoss': str(float(position.sl)), # stringified number\r\n    'takeProfi': str(float(position.tp)), # stringified number\r\n}\r\nbybit.create_order(...., params = params)\r\n```\r\n"
      }
    ]
  },
  {
    "number": 16348,
    "title": "CCXT OKEX fetchorders not showing stoploss orders",
    "created_at": "2023-01-05T20:25:58Z",
    "closed_at": "2023-01-06T08:37:21Z",
    "labels": [
      "bug",
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/16348",
    "body": "### Operating System\r\n\r\n\r\n_No response_\r\n\r\n### Programming Languages\r\nPython3\r\n\r\n### CCXT Version\r\n1.79.95\r\n\r\n### Description\r\nfor okex, fetch_open_orders() outputs my limit orders but not my stoploss/takeprofit orders\r\n\r\nhow can i get my stoploss/takeprofit orders? it's driving me nuts!\r\n\r\n### Code\r\nokex = ccxt.okex({\r\n     \"apiKey\": xxx,\r\n     \"secret\": xxx,\r\n     \"password\": xxx,\r\n     'enableRateLimit': True,\r\n     'options': {\r\n         'defaultType': 'swap',\r\n         'swap': True# \u2190-------------- quotes and 'future'\r\n     }\r\n})\r\n\r\n```\r\nokex.fetch_open_orders() #shows limit orders but not SL/TP orders\r\n\r\nparams = {'stop':True} \r\nokex.fetch_open_orders(params=params) \r\n\r\n#outputs ccxt.base.errors.BadRequest: okex {\"code\":\"51000\",\"data\":[],\"msg\":\"Parameter ordType  error\"}\r\n\u2002\u2002\r\n\r\n```\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/16348/comments",
    "author": "pachinkopirate",
    "comments": [
      {
        "user": "sc0Vu",
        "created_at": "2023-01-06T08:28:13Z",
        "body": "Hi @pachinkopirate \r\n\r\nThe `ordType` is required.\r\nordType | String | Yes | Order typeconditional: One-way stop orderoco: One-cancels-the-other ordertrigger: Trigger ordermove_order_stop: Trailing ordericeberg: Iceberg ordertwap: TWAP order\r\n-- | -- | -- | --\r\n\r\neg:\r\n\r\n```python\r\nsymbol = 'ETH/USDT:USDT'\r\nparams = {'stop':True,'ordType':'oco'} \r\nokex.fetch_open_orders(symbol, None, None, params) \r\n```\r\n\r\nLet me know if you have other questions."
      }
    ]
  },
  {
    "number": 16193,
    "title": "CCXT Ascendex Stopped Working (fetch_markets())",
    "created_at": "2022-12-24T18:04:51Z",
    "closed_at": "2022-12-25T01:43:32Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/16193",
    "body": "Hi all.\r\n\r\nHave been using CCXT for Ascendex successfully for months.  Recently it stopped working.\r\nIt's failing in 'load_markets'.  Base currency & quote currency for some trading pair I don't even care about are both Null, this leads to a Type error during concatenation.    I would guess some bad/null data coming from the exchange, or that Null's are not being filtered/handled properly in CCXT Ascendex.\r\n\r\n- OS:  AWS EC2 (Windows)\r\n- Programming Language version:  Python 3.9 ( 3.9.5 I think)\r\n- CCXT version:  latest, 2.2.89\r\n\r\nYOUR_CODE_TO_REPRODUCE_THE_ISSUE_WITHOUT_YOUR_KEYS\r\n\r\nascendex.py, line 573, 'fetch_markets()'\r\n\r\nERROR LINE>>>symbol = base + '/' + quote \r\n \r\nFails with Type error, because base & quote are both = None.\r\nThe symbol is XMR5S/USDT, which I am not even interested in.\r\n\r\n----\r\nThe calling code is standard set up:\r\n```\r\nself.exchange_class = getattr(mod, exchange_id)\u2028\u2028\r\nself.ccxt = self.exchange_class({\u2028    'apiKey': config['apiKey'],\u2028    'secret': config['secret'],\u2028    'uid': config['uid'],\u2028    'password': config['password'],\u2028    'options': {\u2028        'defaultType': 'spot',\u2028    },\u2028    'enableRateLimit': True,\u2028})\u2028 \r\nself.ccxt.set_sandbox_mode(\u2028config['is_sandbox']\u2028)\u2028\r\n\u2028self.ccxt.load_markets()\r\n\r\n```\r\n\r\nYOUR_OUTPUT_ERROR_EXCEPTION_IN_TEXT_NO_SCREENSHOTS\r\n```\r\nNot very useful is it doesn't cast light on WHY they are None value.\r\n\"unsupported operand type(s) for +: 'NoneType' and 'str'\"\r\n```\r\n\r\nPlease advise, thank you\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/16193/comments",
    "author": "SpenTappy",
    "comments": [
      {
        "user": "carlosmiei",
        "created_at": "2022-12-24T18:10:39Z",
        "body": "Hello @SpenTappy,\r\nYes, we detected this issue recently, but it should already be fixed. Can you try updating to the latest version?\r\n\r\nThanks!"
      }
    ]
  },
  {
    "number": 16040,
    "title": "Asyncio workflow",
    "created_at": "2022-12-10T11:14:02Z",
    "closed_at": "2022-12-13T05:20:47Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/16040",
    "body": "- Programming Language version: Python 3.10.5\r\n- CCXT version: 2.2.91\r\n\r\nIf I understand the asyncio functionality correctly , the workflow for this code is as following:\r\n```\r\nimport asyncio\r\nimport ccxt.pro\r\n\r\n\r\nasync def loop(exchange, symbol):\r\n    while True:\r\n        orderbook = await exchange.fetch_order_book(symbol)\r\n        # code without call exchange method\r\n        if condition:\r\n            await exchange.create_order(symbol, ...)\r\n\r\n\r\nasync def main():\r\n    exchange = ccxt.pro.binance()\r\n    symbols = ['symbol1', 'symbol2', 'symbolN']\r\n    await asyncio.gather(*[loop(exchange, symbol) for symbol in symbols])\r\n\r\n\r\nasyncio.run(main())\r\n```\r\n1. All loop functions execute code until 'fetch_order_book' call.\r\n2. Execute 'fetch_order_book' and execute code until 'fetch_order_book' if condition not True else until 'create_order'\r\n3. From symbol1 to symbolN in the order, execute 'fetch_order_book' or 'create_order'\r\n\r\nIs it right? \r\nSo my question is how can I execute the 'create_order' function immediately after 'fetch_order_book' if condition is True.\r\n\r\nThe purpose of my question is in case of you have lot of symbol in symbols list. If only the last symbol has condition True, you need to wait all symbol to fetch him orderbook before post your order. I would like to minimize the time between the execution of 'fetch_order_book_ and the execution of the trade.\r\n\r\nThanks you very much for your help.\r\n\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/16040/comments",
    "author": "Hadevmin",
    "comments": [
      {
        "user": "pcriadoperez",
        "created_at": "2022-12-13T03:33:40Z",
        "body": "Hi @Hadevmin ,\r\n\r\nNot exactly. So asyncio will run all the loop functions in parallel and independently.\r\nEach loop function will first wait for `fetch_order_book`, check the condition and if true immediately call create_order. And continuously do so.\r\n\r\nSo this code should meet your needs of executing the 'create_order' function immediately after 'fetch_order_book' if condition is True.\r\n\r\nAlso for this case I'd recommend using `watch_order_book` which will provide order book updates, instead of having to fetch the full order book.\r\n\r\nPlease let me know if you have any further questions, if not feel free to close the issue"
      },
      {
        "user": "Hadevmin",
        "created_at": "2022-12-13T05:20:47Z",
        "body": "Hi @pcriadoperez,\r\n\r\nI probably made some mistakes in my tests because I was not observing this scenario....\r\nThanks for your help! And for the method, it is the case! ;)\r\nI use this condition before calling the order book or the account balance.\r\n```\r\nif exchange.has['watchOrderBook']:\r\n   exchange.watch_order_book\r\n   ...\r\nelif exchange.has['fetchOrderBook']:\r\n   exchange.fetch_order_book\r\n   ...\r\n```"
      }
    ]
  },
  {
    "number": 16022,
    "title": "Can I use the repo to receive tokens to and from different networks?",
    "created_at": "2022-12-08T13:37:02Z",
    "closed_at": "2022-12-08T20:46:15Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/16022",
    "body": "- OS: Windows 10 PRO\r\n- Programming Language version: Node.js (version 19.2.0)\r\n- CCXT version: 2.2.84\r\n\r\nHi,\r\n\r\nI know I can use CCXT to withdraw tokens to any address if they are in ERC20, BEP20, SPL, TRC20 networks.\r\nBut I want to know if I can use some wallet, like Exodus which has desktop version, I create a wallet and I have the private key. I can withdraw tokens from my account in exchange to my wallet and can I use CCXT with the private key to send tokens from my wallet address to another my account in another exchange.\r\n\r\nFor example: \r\n\r\nLet\u2019s say I setup Exodus wallet for Windows 10, and I have the address with the private key.\r\n\r\nIf I want to withdraw some USDT from my Binance account via ERC20 network, after I receive the USDT from my Binance account, can I use CCXT with the Exodus wallet private key, after paying the gas fees, send USDT to my Huobipro account via BEP20 network?\r\n\r\nI think receiving the USDT should work,  as it just a different address as any other exchange address.\r\n\r\nPlease advise if I can send USDT from wallet address with private key to another account in different exchange.\r\nThanks,\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/16022/comments",
    "author": "zydjohnHotmail",
    "comments": [
      {
        "user": "carlosmiei",
        "created_at": "2022-12-08T20:44:05Z",
        "body": "Hello @zydjohnHotmail, the short answer is no,\r\nCCXT wraps the exchange's API so basically, we're only a middleware that wraps the REST calls you make to the Exchange. So as you said, yes you can use ccxt to ask the exchange X to withdraw the token to Y wallet, but not the other way around but ccxt itself does not interact with the blockchain."
      }
    ]
  },
  {
    "number": 16006,
    "title": "Kraken's response has little information",
    "created_at": "2022-12-07T18:04:53Z",
    "closed_at": "2022-12-07T21:01:34Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/16006",
    "body": "- OS:\r\n- Programming Language version:\r\n- CCXT version:\r\n\r\n```\r\n order = kraken.createOrder(symbol_name, type,side,quantity, price)\r\n```\r\nThis is the response I get:\r\n```\r\n{'id': 'XXXXXXXXXXX', 'clientOrderId': None, 'info': {'txid': ['XXXXXXXXX'], 'descr': {'order': 'sell 0.00178900 XBTUSD @ limit 16776.3'}}, 'timestamp': None, 'datetime': None, 'lastTradeTimestamp': None, 'status': None, 'symbol': 'BTC/USD', 'type': 'limit', 'timeInForce': None, 'postOnly': None, 'side': 'sell', 'price': 16776.3, 'stopPrice': None, 'cost': None, 'amount': 0.001789, 'filled': None, 'average': None, 'remaining': None, 'fee': None, 'trades': [], 'fees': []} \r\n```\r\nI looked up Kraken's REST API and they seem to have information about the trade when it's open and when it's closed but the response inside CCXT is just all NONE which does not help at all.\r\n\r\nThe following is the open orders response from Kraken:\r\n{\r\n  \"result\": {\r\n    \"open\": {\r\n      \"txid1\": {\r\n        \"refid\": \"string\",\r\n        \"userref\": \"string\",\r\n        \"status\": \"pending\",\r\n        \"opentm\": 0,\r\n        \"starttm\": 0,\r\n        \"expiretm\": 0,\r\n        \"descr\": {\r\n          \"pair\": \"string\",\r\n          \"type\": \"buy\",\r\n          \"ordertype\": \"market\",\r\n          \"price\": \"string\",\r\n          \"price2\": \"string\",\r\n          \"leverage\": \"string\",\r\n          \"order\": \"string\",\r\n          \"close\": \"string\"\r\n        },\r\n        \"vol\": \"string\",\r\n        \"vol_exec\": \"string\",\r\n        \"cost\": \"string\",\r\n        \"fee\": \"string\",\r\n        \"price\": \"string\",\r\n        \"stopprice\": \"string\",\r\n        \"limitprice\": \"string\",\r\n        \"trigger\": \"last\",\r\n        \"misc\": \"string\",\r\n        \"oflags\": \"string\",\r\n        \"trades\": [\r\n          \"string\"\r\n        ]\r\n      },\r\n      \"txid2\": {\r\n        \"refid\": \"string\",\r\n        \"userref\": \"string\",\r\n        \"status\": \"pending\",\r\n        \"opentm\": 0,\r\n        \"starttm\": 0,\r\n        \"expiretm\": 0,\r\n        \"descr\": {\r\n          \"pair\": \"string\",\r\n          \"type\": \"buy\",\r\n          \"ordertype\": \"market\",\r\n          \"price\": \"string\",\r\n          \"price2\": \"string\",\r\n          \"leverage\": \"string\",\r\n          \"order\": \"string\",\r\n          \"close\": \"string\"\r\n        },\r\n        \"vol\": \"string\",\r\n        \"vol_exec\": \"string\",\r\n        \"cost\": \"string\",\r\n        \"fee\": \"string\",\r\n        \"price\": \"string\",\r\n        \"stopprice\": \"string\",\r\n        \"limitprice\": \"string\",\r\n        \"trigger\": \"last\",\r\n        \"misc\": \"string\",\r\n        \"oflags\": \"string\",\r\n        \"trades\": [\r\n          \"string\"\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  \"error\": [\r\n    \"EGeneral:Invalid arguments\"\r\n  ]\r\n}\r\n\r\nIt seems like you guys have a lot on your plate so I do appreciate any help possible. Thank you",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/16006/comments",
    "author": "MotivaoCrypto",
    "comments": [
      {
        "user": "carlosmiei",
        "created_at": "2022-12-07T18:49:30Z",
        "body": "Hello @bonetjoshua, upon creating the order Kraken returns little information but you can use `fetchOrder` after creating it to get the full data. "
      }
    ]
  },
  {
    "number": 15948,
    "title": "Bybit fetch_deposit_address doesn't work",
    "created_at": "2022-12-04T09:01:12Z",
    "closed_at": "2022-12-04T10:47:34Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/15948",
    "body": "Hey guys.\r\nCommands \r\n```\r\nbybit.fetch_deposit_address(\"USDT\")\r\nbybit.fetch_deposit_address(\"USDT\", {\"network\":\"ERC20\"})\r\n```\r\nboth lead to `TypeError: argument of type 'NoneType' is not iterable`",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/15948/comments",
    "author": "KindSpidey",
    "comments": [
      {
        "user": "samgermain",
        "created_at": "2022-12-04T10:35:16Z",
        "body": "They both work for me using\r\n\r\n```python\r\nimport json\r\nimport ccxt\r\nfrom pprint import pprint\r\n\r\nkeys = json.load(open('../keys.local.json'))\r\nexchange = ccxt.bybit(keys['bybit'])\r\nmarkets = exchange.load_markets()\r\n\r\ndeposit_address = exchange.fetch_deposit_address('USDT')\r\ndeposit_address_erc20 = exchange.fetch_deposit_address('USDT', {'network': 'ERC20'})\r\n\r\npprint(deposit_address)\r\npprint(deposit_address_erc20)\r\n```\r\n\r\n```python\r\n{'address': '0x916be8b2e06eda793f3078f7a8845d47109c1058',\r\n 'currency': 'USDT',\r\n 'info': {'address_deposit': '0x916be8b2e06eda793f3078f7a8845d47109c1058',\r\n          'chain': 'ETH',\r\n          'chain_type': 'ERC20',\r\n          'tag_deposit': ''},\r\n 'network': 'ETH',\r\n 'tag': None}\r\n{'address': '0x916be8b2e06eda793f3078f7a8845d47109c1058',\r\n 'currency': 'USDT',\r\n 'info': {'address_deposit': '0x916be8b2e06eda793f3078f7a8845d47109c1058',\r\n          'chain': 'ETH',\r\n          'chain_type': 'ERC20',\r\n          'tag_deposit': ''},\r\n 'network': 'ETH',\r\n 'tag': None}\r\n ```\r\n \r\n please provide your full code and debug message so that we can investigate your problem better\r\n"
      },
      {
        "user": "KindSpidey",
        "created_at": "2022-12-04T10:40:22Z",
        "body": "Done. Bybit fetch_deposit_address doesnt work, if I dont load_markets before. If load_markets first, than fetch - everything works"
      },
      {
        "user": "samgermain",
        "created_at": "2022-12-04T10:47:34Z",
        "body": "> Done. Bybit fetch_deposit_address doesnt work, if I dont load_markets before. If load_markets first, than fetch - everything works\r\n\r\nSo the solution is to run `load_markets` before running `fetch_deposit_address`"
      }
    ]
  },
  {
    "number": 15696,
    "title": "Can we dynamic the exchange selection on npm library",
    "created_at": "2022-11-15T13:35:07Z",
    "closed_at": "2022-11-16T03:35:15Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/15696",
    "body": "I'm working on a project where we need to implement a function that lets users choose which exchange to select from the api; is there any way we can dynamically update the exchange selection procedure in the library?\r\n\r\nThis is the method i applyed and i want that `ccxt.{someExchange}({})` part dynamic if there is a way please help me.\r\n` const binanceData = new ccxt.binance({})`\r\n`        let binanceTicker = await binanceData.fetchTicker(pair);`\r\n\r\n\r\nOS: Ubuntu\r\nProgramming Language version: Node.JS latest\r\nCCXT version: latest\r\nExchange: All\r\nMethod: All",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/15696/comments",
    "author": "lovepareek",
    "comments": [
      {
        "user": "carlosmiei",
        "created_at": "2022-11-15T14:29:44Z",
        "body": "Hello @LovePareek,\r\nYes you can.\r\n\r\nExample:\r\n```Javascript\r\nconst myDynamicVar = \"binance\"; // assuming this is the variable the user will fill in\r\nconst exchange = new ccxt[myDynamicVar]({});\r\n```\r\n\r\n"
      }
    ]
  },
  {
    "number": 15462,
    "title": "bybit fetchOrders is not supported while hasFetchOrders is true",
    "created_at": "2022-10-30T04:38:16Z",
    "closed_at": "2023-11-08T18:49:06Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/15462",
    "body": "`exchange.fetchOrders` is not supported on Bybit exchange.\r\n\r\n- OS: Win 10 x64\r\n- Programming Language version: Node.js 18\r\n- CCXT version: 2.0.67\r\n\r\n```JavaScript\r\nexchange.hasFetchOrders      // <-- true\r\nexchange.has['fetchOrders']  // <-- true\r\n\r\nexchange.fetchOrders('BTCUSDT') // <-- error\r\n```\r\n\r\n```JavaScript\r\n/home/user/www/node-trading-bot/node_modules/ccxt/js/bybit.js:3447\r\n            throw new NotSupported (this.id + ' fetchOrders() does not support ' + market['type'] + ' markets or USDC markets, use exchange.fetchOpenOrders () and exchange.fetchClosedOrders () instead');\r\n                  ^\r\n\r\nNotSupported: bybit fetchOrders() does not support spot markets or USDC markets, use exchange.fetchOpenOrders () and exchange.fetchClosedOrders () instead\r\n    at bybit.fetchOrders (/home/user/www/node-trading-bot/node_modules/ccxt/js/bybit.js:3447:19)\r\n    at processTicksAndRejections (node:internal/process/task_queues:96:5)\r\n    at async run (/home/user/www/node-trading-bot/src/testing.js:70:14) {\r\n  constructor: [class NotSupported extends ExchangeError]\r\n}\r\n```\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/15462/comments",
    "author": "danieltorscho",
    "comments": [
      {
        "user": "sc0Vu",
        "created_at": "2022-10-31T01:01:46Z",
        "body": "Hi @danieltorscho \r\n\r\nThe error is that bybit didn't support spot and usdc settled trading pairs. Please make sure the pair is not one of them. In the mean time, I'll check whether they open api endpoint for the spot."
      },
      {
        "user": "carlosmiei",
        "created_at": "2023-11-08T18:49:06Z",
        "body": "@danieltorscho `fetchOrders` is now fully supported. "
      }
    ]
  },
  {
    "number": 15377,
    "title": "bybit Can't get any info of usdc perp",
    "created_at": "2022-10-21T13:57:03Z",
    "closed_at": "2022-10-24T09:27:19Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/15377",
    "body": "Hi, I have search and try method about options type already but still no clue. I can't access to any USDC perpetual symbol or balance. Its only show future balance&pair(USDT). I want to trade in usdc perpetual sir but \r\n```\r\nccxt.base.errors.BadSymbol: bybit does not have market symbol BTCPERP\r\n```\r\n\r\nThis is header\r\n```\r\nbybit = ccxt.bybit({\r\n\"apiKey\": \"xxxx\",\r\n\"secret\": \"xxxx\",\r\n\"options\": {'defaultType': 'future'}\r\n})\r\nprint(bybit.fetchMarkets())\r\n```\r\n\r\nIs bybit USDC perp contracts have some specific type for it?\r\n\r\nps. Sorry for trouble",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/15377/comments",
    "author": "croissantty",
    "comments": [
      {
        "user": "carlosmiei",
        "created_at": "2022-10-21T14:25:38Z",
        "body": "Hello @croissantty, Bybit has conflicting ids between USDT settle derivatives and the USDC one (BTC-PERP), so I would recommend using the unified symbol, in this case `BTC/USD:USDC`\r\n\r\nExample:\r\n```Python\r\nticker = await exchange.fetch_ticker('BTC/USD:USDC')\r\n```\r\n\r\nRegarding the balance, by default  will return the usdt based wallet balance, to change it, you have two options\r\n- settle the `defaultSettle` option as `USDC` `exchange.options['defaultSettle`] = 'USDC' `\r\n- add `settle` to `params` \r\n\r\nExample:\r\n\r\n```Python\r\nparams = {\r\n    'settle': 'USDC'\r\n}\r\nbalance = await exchange.fetch_balance(params)\r\n```\r\n\r\n\r\n"
      },
      {
        "user": "croissantty",
        "created_at": "2022-10-21T19:38:24Z",
        "body": "Very thank you @carlosmiei, with your help now I can access balance and symbol. but look like `fetchMyTrades()` is not working with this exchange or I'm missing something?\r\n\r\n```\r\nccxt.base.errors.NotSupported: bybit fetchMyTrades() is not supported for market BTC/USD:USDC\r\n```"
      },
      {
        "user": "ttodua",
        "created_at": "2022-10-24T09:27:18Z",
        "body": "> is not supported for market\r\n\r\nYou are right, seems the current implementation doesn't have any endpoint to access it, so it seems bybit is lacking that endpoint, we can't do anything in such case (if anyone finds out that that bybit added/supports it now and we have a missing implementation, let us know)"
      }
    ]
  },
  {
    "number": 15374,
    "title": "CCXTPRO removed dependence",
    "created_at": "2022-10-21T09:48:09Z",
    "closed_at": "2022-10-24T09:08:04Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/15374",
    "body": "- OS: Mac OS\r\n- Programming Language version: Python\r\n- CCXT version:  2.0.53\r\n- CCXT version:  1.2.36\r\n\r\n\r\n```\r\nfrom ccxt.async_support.eqonex import eqonex                              # noqa: F401\r\n```\r\nin the newest version of ccxt was removed dependence  which ccxtpro is still requiring\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/15374/comments",
    "author": "AdamPrisen",
    "comments": [
      {
        "user": "AdamPrisen",
        "created_at": "2022-10-21T10:25:18Z",
        "body": "Hello yea i am still using ccxt.pro but i am reading that websockets were merged to ccxt so we will change it to that version"
      },
      {
        "user": "carlosmiei",
        "created_at": "2022-10-21T10:26:11Z",
        "body": "@AdamPrisen yeah ccxt.pro was merged into ccxt and the old package won't get updates anymore, so we strongly recommend migrating it"
      },
      {
        "user": "HUGH-XUUUU",
        "created_at": "2022-10-22T10:29:00Z",
        "body": "Hi,What do you mean abou \"merged into ccxt\"? Can we still use these websocket supported method in ccxt.pro?"
      },
      {
        "user": "carlosmiei",
        "created_at": "2022-10-22T10:41:20Z",
        "body": "Hello @HUGH-XUUUU in the past ccxt.pro was a paid product with its own package, now it's free and merged into the regular ccxt package, so if you're still using the \"paid\" package it's better to migrate because won't get more updates/fixes"
      }
    ]
  },
  {
    "number": 15306,
    "title": "How to implement fetchCurrency?",
    "created_at": "2022-10-15T11:25:48Z",
    "closed_at": "2022-10-18T08:51:05Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/15306",
    "body": "- OS: Windows 10 (Version 21H2)\r\n- Programming Language version: Node.js (version 18.10.0)\r\n- CCXT version: 2.0.19\r\n\r\n```JavaScript\r\nuse strict';\r\nconst ccxt = require('ccxt');\r\n\r\n(async function () {\r\n    console.log(ccxt.version)\r\n    const exchange = new ccxt.binance({\r\n        apiKey: 'My_API_Key',\r\n        secret: 'My_Secret_Key',\r\n        verbose: false,\r\n        defaultType: 'spot',\r\n        adjustForTimeDifference: true,\r\n        'options': {\r\n            'fetchCurrencies': true,\r\n        },\r\n    })\r\n    try \r\n    {\r\n    const currencies = await exchange.fetchCurrencies();\r\n    console.log(currencies);\r\n    } catch (error) {\r\n        console.log(error)\r\n    }\r\n})();\r\n```\r\n\r\nHello:\r\nI want to know if I can use `fetchCurrencies()` to implement `fetchCurrency()` for a single currency.\r\nFor example, in exchange Binance, it has so many currencies, but only a few of them are important, like: BTC, USDT, ETH.\r\nThe other currencies are not used often, so I want to know if I can implement `fetchCurrency()` to get information for only one currency, like \u2018USDT\u2019.\r\nPlease advise,\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/15306/comments",
    "author": "zydjohnHotmail",
    "comments": [
      {
        "user": "sc0Vu",
        "created_at": "2022-10-16T15:42:14Z",
        "body": "Hi @zydjohnHotmail \r\n\r\nThere are `currency(code)` and `safeCurrency(currencyId, currency` in Exchange class, you can use them to get currency."
      },
      {
        "user": "samgermain",
        "created_at": "2022-10-18T08:34:43Z",
        "body": "@zydjohnHotmail \r\n\r\nHere's an example of how you would use the currency method to get the info for a currency. You need to provide your `apiKey` and `secret` to binance, or else you will get different results\r\n\r\n```JavaScript\r\nconst ccxt = require('ccxt');\r\nconst keys = require('./keys.local.json');\r\n\r\n(async function () {\r\n    const exchange = new ccxt.binance({\r\n        ...keys.binance,\r\n        'options': {\r\n            'fetchCurrencies': true,\r\n        },\r\n    });\r\n    await exchange.loadMarkets ();\r\n    const currency = exchange.currency ('USDT');\r\n    console.log (currency);\r\n})();\r\n```\r\n\r\n## Output\r\n\r\n```JavaScript\r\n{\r\n  id: 'USDT',\r\n  name: 'TetherUS',\r\n  code: 'USDT',\r\n  precision: undefined,\r\n  info: {\r\n    coin: 'USDT',\r\n    depositAllEnable: true,\r\n    withdrawAllEnable: true,\r\n    name: 'TetherUS',\r\n    free: '0',\r\n    locked: '0',\r\n    freeze: '0',\r\n    withdrawing: '0',\r\n    ipoing: '0',\r\n    ipoable: '0',\r\n    storage: '0',\r\n    isLegalMoney: false,\r\n    trading: true,\r\n    networkList: [\r\n      [Object], [Object],\r\n      [Object], [Object],\r\n      [Object], [Object],\r\n      [Object], [Object]\r\n    ]\r\n  },\r\n  active: true,\r\n  deposit: true,\r\n  withdraw: true,\r\n  networks: [\r\n    {\r\n      network: 'BSC',\r\n      coin: 'USDT',\r\n      withdrawIntegerMultiple: '0.00000001',\r\n      isDefault: false,\r\n      depositEnable: true,\r\n      withdrawEnable: true,\r\n      depositDesc: '',\r\n      withdrawDesc: '',\r\n      specialTips: '',\r\n      specialWithdrawTips: 'The network you have selected is BSC. Please ensure that the withdrawal address supports the Binance Smart Chain network. You will lose your assets if the chosen platform does not support retrievals.',\r\n      name: 'BNB Smart Chain (BEP20)',\r\n      resetAddressStatus: false,\r\n      addressRegex: '^(0x)[0-9A-Fa-f]{40}$',\r\n      addressRule: '',\r\n      memoRegex: '',\r\n      withdrawFee: '0.29',\r\n      withdrawMin: '10',\r\n      withdrawMax: '10000000000',\r\n      depositDust: '0.01',\r\n      minConfirm: '15',\r\n      unLockConfirm: '0',\r\n      sameAddress: false,\r\n      estimatedArrivalTime: '5',\r\n      busy: false,\r\n      country: 'AE,BINANCE_BAHRAIN_BSC'\r\n    },\r\n    ...\r\n  ],\r\n  fee: 3.2,\r\n  fees: {\r\n    BSC: 0.29,\r\n    AVAXC: 0.8,\r\n    BNB: 0.8,\r\n    ETH: 3.2,\r\n    MATIC: 0.8,\r\n    SOL: 0.8,\r\n    XTZ: 0.8,\r\n    TRX: 0.8\r\n  },\r\n  limits: {\r\n    leverage: { min: undefined, max: undefined },\r\n    amount: { min: undefined, max: undefined },\r\n    price: { min: undefined, max: undefined },\r\n    cost: { min: undefined, max: undefined }\r\n  }\r\n}\r\n```"
      }
    ]
  },
  {
    "number": 15234,
    "title": "Fetching orders on Bybit futures",
    "created_at": "2022-10-09T16:35:32Z",
    "closed_at": "2022-10-10T15:21:21Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/15234",
    "body": "\r\n\r\n- OS: macOS 12.6\r\n- Programming Language version: python 3.8.13\r\n- CCXT version: 1.95.28\r\n\r\n```\r\nbybit = ccxt.bybit({\r\n    'apiKey': ***,\r\n    'secret': ***,\r\n    'options': {\r\n        'defaultType': 'future',\r\n    },\r\n})\r\n\r\npair_order = 'BTC/USDT:USDT'\r\nenter_amount_in_symbol = 20\r\nopen_order_price = 19555\r\n\r\norder = bybit.create_order(pair_order, 'LIMIT', 'sell', enter_amount_in_symbol, open_order_price, {'base_price': open_order_price, 'stop_px': open_order_price})\r\n\r\nprint(bybit.fetch_order(order['id'], pair_order))\r\n\r\nprint(bybit.fetch_order_trades(order['id'], pair_order))\r\n\r\n```\r\n\r\n```\r\nOrderNotFound: bybit fetchOrder() order 91a5eefa-4345-4ec6-8f06-a1b997eb6ab7 not found\r\n\r\n\r\n[{'id': '9cd501fa-b6b8-59ae-ac38-6bf068b49ed1',\r\n  'info': {'order_id': '91a5eefa-4345-4ec6-8f06-a1b997eb6ab7',\r\n   'order_link_id': '',\r\n   'side': 'Sell',\r\n   'symbol': 'BTCUSDT',\r\n   'exec_id': '9cd501fa-b6b8-59ae-ac38-6bf068b49ed1',\r\n   'price': '18502',\r\n   'order_price': '18502',\r\n   'order_qty': '0.001',\r\n   'order_type': 'Market',\r\n   'fee_rate': '0.0006',\r\n   'exec_price': '19476.5',\r\n   'exec_type': 'Trade',\r\n   'exec_qty': '0.001',\r\n   'exec_fee': '0.0116859',\r\n   'exec_value': '19.4765',\r\n   'leaves_qty': '0',\r\n   'closed_size': '0',\r\n   'last_liquidity_ind': 'RemovedLiquidity',\r\n   'trade_time': '1665332280',\r\n   'trade_time_ms': '1665332280182'},\r\n  'timestamp': 1665332280182,\r\n  'datetime': '2022-10-09T16:18:00.182Z',\r\n  'symbol': 'BTC/USDT:USDT',\r\n  'order': '91a5eefa-4345-4ec6-8f06-a1b997eb6ab7',\r\n  'type': 'market',\r\n  'side': 'sell',\r\n  'takerOrMaker': 'taker',\r\n  'price': 19476.5,\r\n  'amount': 0.001,\r\n  'cost': 19.4765,\r\n  'fee': {'cost': 0.0116859, 'currency': 'USDT', 'rate': 0.0006},\r\n  'fees': [{'currency': 'USDT', 'cost': 0.0116859, 'rate': 0.0006}]}]\r\n\r\n```\r\n\r\nHello,\r\n\r\ni'm trying to get information about filled order on Bybit, but here's something strange. Fetch_order doesn't see an order id and I can't find it in fetch_orders request too. But when I try to call fetch_order_trades, I can see all data about this order. How can I receive this information via fetch_order?\r\n\r\nOn Binance such request worked perfectly.\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/15234/comments",
    "author": "ddtask2",
    "comments": [
      {
        "user": "sc0Vu",
        "created_at": "2022-10-10T08:17:45Z",
        "body": "Hi @ddtask2 \r\n\r\nIMHO, you used stop order. Try this one:\r\n\r\n```python\r\nprint(bybit.fetch_order(order['id'], pair_order, { 'stop': True }))\r\n```"
      },
      {
        "user": "ddtask2",
        "created_at": "2022-10-10T15:02:13Z",
        "body": "> \r\n\r\n\r\n\r\n> Hi @ddtask2\r\n> \r\n> IMHO, you used stop order. Try this one:\r\n> \r\n> ```python\r\n> print(bybit.fetch_order(order['id'], pair_order, { 'stop': True }))\r\n> ```\r\n\r\nThanks a lot, this helped. But is there any solution to get order info regardless of it's type?"
      },
      {
        "user": "carlosmiei",
        "created_at": "2022-10-10T15:17:58Z",
        "body": "Hello @ddtask2, not with a single request because bybit uses different endpoints depending on the order type"
      }
    ]
  },
  {
    "number": 15212,
    "title": "MBX_WEIGHT_1M header parameter, know your 1min limits ",
    "created_at": "2022-10-07T07:43:49Z",
    "closed_at": "2022-10-09T17:35:05Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/15212",
    "body": "Hi, I am using ccxt version 1.81.14 in php. I just talk to Binance customer support and find out that I can know whenever I am going to hit the hard-limits like 1200 weight per 1min. There is a parameter in header, MBX_WEIGHT_1M, from Binance api's response. \r\n\r\nSo my question is, how can we get the header parameter response from ccxt? \r\n\r\nbtw i am using this list of functions:\r\nfor future, i am using $exchange->market, $exchange->fapiPrivate_post_leverage, $exchange->fetchTicker, and $exchange->create_order()\r\n\r\nfor spot, i am just using $exchange->create_market_buy_order\r\n\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/15212/comments",
    "author": "ngdekhai",
    "comments": [
      {
        "user": "carlosmiei",
        "created_at": "2022-10-07T14:17:46Z",
        "body": "Hello @ngdekhai, You can activate the `last_response_headers` option to access that information, example:\r\n\r\n```Python\r\nexchange = ccxt.binance({\r\n    # 'apiKey': 'YOUR_API_KEY',\r\n    # 'secret': 'YOUR_SECRET_KEY',\r\n    'last_response_headers': True,\r\n})\r\n\r\nmarkets = await exchange.load_markets()\r\n\r\norder = await exchange.create_order(your params here)\r\n## Get headers from the last call\r\nheaders = exchange.last_response_headers\r\nprint(headers)\r\n```\r\n"
      }
    ]
  },
  {
    "number": 15165,
    "title": "exchange.markets['BTC/USDT']['limits']['leverage']['max'] returns None",
    "created_at": "2022-10-02T18:27:23Z",
    "closed_at": "2022-10-04T15:03:11Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/15165",
    "body": "I tried to check the MAX Leverage of Binance Future. But my code returns None. I have no idea why I can not see it. Is this bug or am I missing something? I tried 10 different symbols, but every output was None.  I have 200USDT in my Binance Future account.\r\n\r\n- OS: Ubuntu 20.04.5 LTS\r\n- Programming Language version: Python 3.9.6\r\n- CCXT version: 1.94.16\r\n\r\n```\r\nexchange = ccxt.binance({\"apiKey\": key1, \"secret\": key2,\\\r\n                        'options': {'defaultType': 'future'},\\\r\n                        'enableRateLimit': True})\r\n\r\nexchange.load_markets()\r\n\r\nprint(exchange.markets['BTC/USDT']['limits']['leverage']['max'])\r\n```\r\noutput\r\n```\r\nNone\r\n```\r\nIf you know what's going on. Please help me :(",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/15165/comments",
    "author": "MyStyleAlways",
    "comments": [
      {
        "user": "carlosmiei",
        "created_at": "2022-10-03T08:15:41Z",
        "body": "Hello @MyStyleAlways, unfortunately not every exchange provides that information through the API"
      }
    ]
  },
  {
    "number": 15160,
    "title": "Fetching balance state on Bybit returns an empty list",
    "created_at": "2022-10-01T11:52:12Z",
    "closed_at": "2022-10-01T14:04:20Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/15160",
    "body": "- OS: Windows 10 (WSL2 Ubuntu 20.04)\r\n- Programming Language version: Node.js 18\r\n- CCXT version: 1.92.89\r\n\r\nFetching a balance returns all 0. It does not work both on mainnet and testnet.\r\n\r\nBalance amount for all symbols is returned as 0. API key and secret is a correct one.\r\nSwitching from bybit to binance exchange successfully returns a correct amount of balance, but not on bybit.\r\n\r\nMy actual balance on testnet is: 112,294.98 USD (\u22485.82435910 BTC)\r\n\r\n```\r\nconst ccxt = require('ccxt')\r\n\r\n(async () => {\r\n  const exchange = new ccxt.bybit({\r\n    apiKey: 'xxx',\r\n    secret: 'xxx'\r\n  })\r\n  \r\n  const balance = await exchange.fetchBalance()\r\n  console.log(balance)\r\n})()\r\n```\r\n\r\n```\r\n{\r\n  info: {\r\n    ret_code: '0',\r\n    ret_msg: 'OK',\r\n    result: {\r\n      USDT: [Object],\r\n      DOT: [Object],\r\n      LTC: [Object],\r\n      BIT: [Object],\r\n      MANA: [Object],\r\n      BTC: [Object],\r\n      ETH: [Object],\r\n      EOS: [Object],\r\n      XRP: [Object],\r\n      SOL: [Object],\r\n      ADA: [Object]\r\n    },\r\n    ext_code: '',\r\n    ext_info: '',\r\n    time_now: '1664624408.371975',\r\n    rate_limit_status: '117',\r\n    rate_limit_reset_ms: '1664624408367',\r\n    rate_limit: '120'\r\n  },\r\n  USDT: { free: 0, used: 0, total: 0 },\r\n  DOT: { free: 0, used: 0, total: 0 },\r\n  LTC: { free: 0, used: 0, total: 0 },\r\n  BIT: { free: 0, used: 0, total: 0 },\r\n  MANA: { free: 0, used: 0, total: 0 },\r\n  BTC: { free: 0, used: 0, total: 0 },\r\n  ETH: { free: 0, used: 0, total: 0 },\r\n  EOS: { free: 0, used: 0, total: 0 },\r\n  XRP: { free: 0, used: 0, total: 0 },\r\n  SOL: { free: 0, used: 0, total: 0 },\r\n  ADA: { free: 0, used: 0, total: 0 },\r\n  free: {\r\n    USDT: 0,\r\n    DOT: 0,\r\n    LTC: 0,\r\n    BIT: 0,\r\n    MANA: 0,\r\n    BTC: 0,\r\n    ETH: 0,\r\n    EOS: 0,\r\n    XRP: 0,\r\n    SOL: 0,\r\n    ADA: 0\r\n  },\r\n  used: {\r\n    USDT: 0,\r\n    DOT: 0,\r\n    LTC: 0,\r\n    BIT: 0,\r\n    MANA: 0,\r\n    BTC: 0,\r\n    ETH: 0,\r\n    EOS: 0,\r\n    XRP: 0,\r\n    SOL: 0,\r\n    ADA: 0\r\n  },\r\n  total: {\r\n    USDT: 0,\r\n    DOT: 0,\r\n    LTC: 0,\r\n    BIT: 0,\r\n    MANA: 0,\r\n    BTC: 0,\r\n    ETH: 0,\r\n    EOS: 0,\r\n    XRP: 0,\r\n    SOL: 0,\r\n    ADA: 0\r\n  }\r\n}\r\n```\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/15160/comments",
    "author": "danieltorscho",
    "comments": [
      {
        "user": "carlosmiei",
        "created_at": "2022-10-01T13:06:06Z",
        "body": "Hello @danieltorscho,\r\nBybit is one of the only exchanges loading derivative features (markets, balances, etc) by default. I suspect that your funds are under the spot wallet, so I'd suggest instantiating bybit like this:\r\n\r\n```Python\r\nexchange = ccxt.bybit({\r\n    'apiKey': 'YOUR_API_KEY',\r\n    'secret': 'YOUR_SECRET_KEY',\r\n    'options': {\r\n       'defaultType': 'spot', # very important set spot as default type\r\n    }\r\n})\r\nbalances = await exchange.fetch_balance()\r\n```\r\n```\r\n\r\n\r\n"
      }
    ]
  },
  {
    "number": 15154,
    "title": "OKX batch orders",
    "created_at": "2022-09-30T12:24:50Z",
    "closed_at": "2022-10-01T17:34:26Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/15154",
    "body": "- OS: Ubuntu 20.04\r\n- Programming Language version: PHP 7.4\r\n- CCXT version: 1.91.22\r\n\r\nJust a simple question: Does CCXT support to place batch orders in one request for OKX exchange? Thanks.\r\n\r\nKind regards.\r\nKai\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/15154/comments",
    "author": "kaiqiangh",
    "comments": [
      {
        "user": "carlosmiei",
        "created_at": "2022-09-30T17:39:14Z",
        "body": "Hello @kaiqiangh, yes it does, you just need to set it in the options like this:\r\n\r\n```Python\r\nexchange.options['createOrder'] = 'privatePostTradeBatchOrders'\r\n```\r\n"
      },
      {
        "user": "kaiqiangh",
        "created_at": "2022-10-01T15:58:21Z",
        "body": "Hi @carlosmiei ,\r\n\r\nThanks for your reply. \r\n\r\nI found that the default method is already set to 'privatePostTradeBatchOrders' in the function 'createOrder'.\r\n`const defaultMethod = this.safeString (this.options, 'createOrder', 'privatePostTradeBatchOrders');`\r\n\r\nThen I overwrote some piece of codes in this function (around line 2154) and works for me. \r\nusing `extendedRequest = [request, params]` instead of `extendedRequest = [ this.extend (request, params) ]`\r\n"
      }
    ]
  },
  {
    "number": 15097,
    "title": "ccxt.base.errors.ExchangeError: bybit markets not loaded",
    "created_at": "2022-09-24T07:14:43Z",
    "closed_at": "2022-09-30T19:22:38Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/15097",
    "body": "Hello,\r\n\r\nHow come this doesnt work, and get error : ccxt.base.errors.ExchangeError: bybit markets not loaded\r\n\r\nimport ccxt\r\nsymbol = 'BTCUSDT'\r\nprint(exchange.market(symbol)['precision']['amount'])\r\n\r\nbut this works:\r\n\r\nimport ccxt\r\nsymbol = 'BTCUSDT'\r\nprint(exchange.fetch_ohlcv(symbol, timeframe='1m', limit=1))\r\nprint(exchange.market(symbol)['precision']['amount'])\r\n\r\n- OS: win10\r\n- Programming Language version: python 3.8\r\n- CCXT version: 1.93.43",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/15097/comments",
    "author": "Smartromain",
    "comments": [
      {
        "user": "carlosmiei",
        "created_at": "2022-09-24T11:12:32Z",
        "body": "Hello @Smartromain, markets will be automatically loaded after the first call to a unified method, if you want to access it right away, you can do this:\r\n\r\n```Python\r\nsymbol = 'BTCUSDT'\r\nexchange.load_markets() # Trigger market loading\r\nprint(exchange.market(symbol)['precision']['amount'])\r\n```\r\n"
      }
    ]
  },
  {
    "number": 14890,
    "title": "bibox fetch_withdrawals has error",
    "created_at": "2022-09-06T16:46:01Z",
    "closed_at": "2022-09-16T22:03:47Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/14890",
    "body": "hi\r\nsince = None\r\nlimit = 200\r\nend_time = connection.milliseconds()\r\nparams = {\r\n     'end_time': int(end_time / 1000),\r\n}\r\nwithdrawals = connection.fetch_withdrawals(\"TRX\", since, limit, params)\r\n\r\nerror :\r\nbibox {\"error\":{\"code\":\"3000\",\"msg\":\"\u8bf7\u6c42\u53c2\u6570\u9519\u8bef\"},\"cmd\":\"transfer/transferInList\"}",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/14890/comments",
    "author": "hosseinab",
    "comments": [
      {
        "user": "kubeat",
        "created_at": "2022-09-07T09:55:41Z",
        "body": "i try to debug your code.the param 'limit' too big\uff0cyou can try change 'limit ' to 100 \u3002bibox Api have update to v3 ,v4,the ccxt is v1"
      }
    ]
  },
  {
    "number": 14664,
    "title": "Get FTX Future coins list?",
    "created_at": "2022-08-12T04:47:05Z",
    "closed_at": "2022-08-13T00:40:45Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/14664",
    "body": "Hi I'm looking for a list of coins ending with -PERP for the FTX exchange. \r\n\r\nI tried \r\n\r\n```\r\ncoins = ccxt.ftx({'options': { 'defaultType': 'future', }}).load_markets()\r\n```\r\n\r\nbut it just gives a list of coins with USDT and USD and it's 800 length as opposed to FTX amount of futures (less than 150). \r\n\r\nThis code works for binance, if I just switch ftx() to binance().",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/14664/comments",
    "author": "leonfresh",
    "comments": [
      {
        "user": "samgermain",
        "created_at": "2022-08-12T05:48:05Z",
        "body": "There are no coins that end in `-PERP` only market ids that end in `-PERP`. I would also suggest using the unified symbol names, because they are the same between exchanges.\r\n\r\n```\r\nimport ccxt  # noqa: E402\r\nfrom pprint import pprint\r\n\r\nexchange = ccxt.ftx()\r\nexchange.load_markets()\r\nmarkets = exchange.markets\r\n# coins = [market['id'] for symbol, market in markets.items() if market['swap']] // uncomment if you want to use the -PERP market ids\r\ncoins = [symbol for symbol, market in markets.items() if market['swap']]\r\n\r\npprint(coins)\r\npprint(len(coins))\r\n```\r\nprints\r\n```\r\n['1INCH/USD:USD',\r\n 'AAVE/USD:USD',\r\n 'ADA/USD:USD',\r\n 'AGLD/USD:USD',\r\n 'ALCX/USD:USD',\r\n 'ALGO/USD:USD',\r\n 'ALICE/USD:USD',\r\n 'ALPHA/USD:USD',\r\n ...\r\n 'XRP/USD:USD',\r\n 'XTZ/USD:USD',\r\n 'YFI/USD:USD',\r\n 'YFII/USD:USD',\r\n 'ZEC/USD:USD',\r\n 'ZIL/USD:USD',\r\n 'ZRX/USD:USD']\r\n177\r\n```"
      }
    ]
  },
  {
    "number": 14608,
    "title": "FTX websockets stream on perpetual very slow ",
    "created_at": "2022-08-06T17:01:12Z",
    "closed_at": "2022-08-07T13:15:30Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/14608",
    "body": "- OS: Windows\r\n- Programming Language version: Python 3.9.13\r\n- CCXT version: ccxtpro 1.2.10\r\n\r\nThe data recieved from ftx perp pairs is once every 2 seconds(roughly). Which is extremely slow comparing it to the regular BTC/USD pair on FTX which averaged out to 0.053 seconds over a 20 min sample (which in my experience is still on the slow side). I was wondering why it is taking roughly 2 seconds per tick and if i could do anything to make this a lot quicker. Let me know, appreciate your time.\r\n\r\n```\r\nimport ccxtpro\r\nfrom asyncio import run\r\n\r\nasync def main():\r\n    FTX = ccxtpro.ftx({'newUpdates': True})\r\n    while x == True:\r\n        start = time.time()\r\n        orderbook = await FTX.watch_order_book('BTC-PERP') #also used BTC/USD:USD same effect\r\n        print(FTX.iso8601(FTX.milliseconds()), 'BTC/USD:USD', orderbook['bids'][0], orderbook['asks'][0])\r\n        await FTX.close()\r\n\r\nrun(main())\r\n```\r\n\r\n```\r\n2022-08-06T16:59:55.505Z BTC/USD:USD [23157.0, 8.5341] [23158.0, 5.0993]\r\n2022-08-06T16:59:57.518Z BTC/USD:USD [23157.0, 4.196] [23158.0, 15.8474]\r\n2022-08-06T16:59:59.539Z BTC/USD:USD [23157.0, 2.615] [23158.0, 11.1582]\r\n2022-08-06T17:00:01.573Z BTC/USD:USD [23157.0, 0.099] [23158.0, 18.0891]\r\n2022-08-06T17:00:03.598Z BTC/USD:USD [23151.0, 8.7448] [23152.0, 34.0551]\r\n2022-08-06T17:00:05.668Z BTC/USD:USD [23145.0, 0.6389] [23146.0, 18.9104]\r\n2022-08-06T17:00:07.693Z BTC/USD:USD [23142.0, 6.9215] [23143.0, 32.0178]\r\n2022-08-06T17:00:09.728Z BTC/USD:USD [23138.0, 19.8388] [23139.0, 0.2147]\r\n2022-08-06T17:00:11.772Z BTC/USD:USD [23138.0, 22.1469] [23139.0, 0.4077]\r\n2022-08-06T17:00:13.754Z BTC/USD:USD [23142.0, 2.4671] [23143.0, 23.4715]\r\n2022-08-06T17:00:15.797Z BTC/USD:USD [23142.0, 3.4958] [23143.0, 20.8941]\r\n2022-08-06T17:00:17.827Z BTC/USD:USD [23138.0, 3.3549] [23139.0, 30.4348]\r\n```\r\n\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/14608/comments",
    "author": "zerconn",
    "comments": [
      {
        "user": "pcriadoperez",
        "created_at": "2022-08-07T02:05:06Z",
        "body": "Hi @zerconn , The issue is you are clossing the connection, so it takes a second or two to reconnect again.\r\nIf you remove the line `await FTX.close()`  you should get updates about every 30 ms\r\n\r\nHere was the code I used: \r\n```python\r\nimport ccxtpro\r\nfrom asyncio import run\r\nimport time\r\n\r\nasync def main():\r\n    FTX = ccxtpro.ftx({'newUpdates': True})\r\n    while True:\r\n        start = time.time()\r\n        orderbook = await FTX.watch_order_book('BTC-PERP') #also used BTC/USD:USD same effect\r\n        print(FTX.iso8601(FTX.milliseconds()), 'BTC/USD:USD', orderbook['bids'][0], orderbook['asks'][0])\r\n        #await FTX.close()\r\n\r\nrun(main())\r\n```\r\nHere was my output:\r\n```\r\n2022-08-07T02:02:55.328Z BTC/USD:USD [22929.0, 22.6859] [22930.0, 3.2098]\r\n2022-08-07T02:02:55.352Z BTC/USD:USD [22929.0, 22.6859] [22930.0, 3.2098]\r\n2022-08-07T02:02:55.381Z BTC/USD:USD [22929.0, 22.0459] [22930.0, 4.2098]\r\n2022-08-07T02:02:55.403Z BTC/USD:USD [22929.0, 21.7259] [22930.0, 4.5298]\r\n2022-08-07T02:02:55.430Z BTC/USD:USD [22929.0, 21.5259] [22930.0, 4.9298]\r\n2022-08-07T02:02:55.454Z BTC/USD:USD [22929.0, 21.5259] [22930.0, 4.9298]\r\n2022-08-07T02:02:55.486Z BTC/USD:USD [22929.0, 21.5259] [22930.0, 4.9298]\r\n```\r\n\r\nI hope that solves the issues!"
      }
    ]
  },
  {
    "number": 14584,
    "title": "Phemex `fetch_positions` does not support phemex official symbol",
    "created_at": "2022-08-03T15:05:36Z",
    "closed_at": "2022-08-04T08:11:13Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/14584",
    "body": "Phemex `fetch_positions` does not support phemex official symbol\r\n\r\n## versions\r\n* OS: Debian 11\r\n* Programming Language version: python 3.8.12\r\n* CCXT version: 1.91.68\r\n\r\n## code to reproduce\r\n\r\n### setup\r\n```\r\nimport ccxt\r\n\r\nccxt_exchange = ccxt.phemex({\r\n    'apiKey': ...,\r\n    'secret': ...,\r\n})\r\n```\r\n\r\n### fetch_positions does not support uXXXUSD format\r\n```\r\nccxt_exchange.fetch_positions(symbols=['uBTCUSD']) # => returns `[]`\r\nccxt_exchange.fetch_positions(symbols=['BTC/USD:USD']) # => returns position structured response\r\n```\r\n\r\n### fetch_positions does not support neither inverse formats\r\n```\r\nccxt_exchange.fetch_positions(symbols=['BTCUSD']) # => returns `[]`\r\nccxt_exchange.fetch_positions(symbols=['BTC/USD:BTC']) # => returns `[]`\r\n```",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/14584/comments",
    "author": "takami-ml",
    "comments": [
      {
        "user": "carlosmiei",
        "created_at": "2022-08-03T16:53:27Z",
        "body": "Hello @takami-ml \r\n\r\n> ccxt_exchange.fetch_positions(symbols=['uBTCUSD']) # => returns `[]`\r\n> ccxt_exchange.fetch_positions(symbols=['BTC/USD:USD']) # => returns position structured response\r\n\r\nCan you double-check this? I've just tested and worked fine with both formats, unified and exchange-specific.\r\n\r\n\r\n> fetch_positions does not support neither inverse formats\r\n> ccxt_exchange.fetch_positions(symbols=['BTCUSD']) # => returns `[]`\r\n> ccxt_exchange.fetch_positions(symbols=['BTC/USD:BTC']) # => returns `[]`\r\n\r\nBy default will try to load \"linear contracts\" to fetch inverse contracts (BTC settled in this case), please provide the settle currency as `code` inside params.\r\n\r\nSomething like this:\r\n```Python\r\nccxt_exchange.fetch_positions(symbols=['BTC/USD:BTC'], {'code':'BTC'})\r\n```\r\n\r\n\r\n"
      },
      {
        "user": "takami-ml",
        "created_at": "2022-08-03T23:39:58Z",
        "body": "@carlosmiei \r\n\r\nThank you for the information.\r\n\r\n> Can you double-check this? I've just tested and worked fine with both formats, unified and exchange-specific.\r\n\r\nI'm sorry,  this one was my mistake. (I just had an inverse position, not linear.)\r\nI confirmed it worked as expected.\r\n\r\n> By default will try to load \"linear contracts\" to fetch inverse contracts (BTC settled in this case), please provide the settle currency as code inside params.\r\n\r\nWhen I set `code` to BTC, it worked.\r\nI did not understand the `defaultSubType` option and `code` params. Thanks for the information.\r\n\r\nIn conclusion, in both cases, there was no problem. I am very sorry to have used your time!\r\n"
      }
    ]
  },
  {
    "number": 14556,
    "title": "upbit createDepositAddress Error",
    "created_at": "2022-07-31T17:11:34Z",
    "closed_at": "2022-08-01T14:07:46Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/14556",
    "body": "OS:Windows 10\r\nProgramming Language version:Python\r\nCCXT version:1.90.66\r\nExchange: Upbit\r\nMethod: createDepositAddress\r\n\r\n\r\nAddressPending: upbit is generating BTC deposit address, call fetchDepositAddress or createDepositAddress one more time later to retrieve the generated address\r\n\r\n\r\nI'd like to know why the code exits with that message when generating an address.\r\n\r\nAfter the code ends, I can check in Upbit that the address has been created\r\nBut I can't check it when I create it in python\r\n\r\nI couldn't find it after searching after #6452 for this problem.\r\nI'm a beginner in programming, so I don't know if it's a bug or my skill problem.\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/14556/comments",
    "author": "newbienoobnoob",
    "comments": [
      {
        "user": "carlosmiei",
        "created_at": "2022-08-01T09:13:43Z",
        "body": "@newbienoobnoob Hello, so when you call `createDepositAdress` there are two things that might happen:\r\n- First, the exchange immediately responds with an address, and you're ready to go\r\n- Second, the exchange warns that it will create an address, but since this is an asynchronous process it can't return it right now, you have to wait a few seconds and request it again.\r\n\r\nYou can do simple polling until the address is ready, for example:\r\n\r\n```Python\r\n    address = None\r\n    while True:\r\n        try:\r\n            address = await exchange.create_deposit_address(\"BTC\")\r\n            break\r\n        except ccxt.AddressPending as e:\r\n            print(\"Address not ready yet, will wait and try again\")\r\n            await exchange.sleep(1000) # sleeps 1 second before trying again\r\n```\r\n\r\n\r\n\r\n"
      }
    ]
  },
  {
    "number": 14512,
    "title": "okx default type does not change",
    "created_at": "2022-07-28T11:52:05Z",
    "closed_at": "2022-07-28T14:24:17Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/14512",
    "body": "i'm using the latest version of ccxt\r\nin okx, when i change defaultType to swap or any other kinds it does not change and when i call an order it still shows spot mode price and ..... .\r\nand when I wanna create a swap order it shows error which i don't have when i use binance and change defaultType to future.\r\n\r\n\r\nokex = ccxt.okx({\r\n    'apiKey': config.API_KEY,\r\n    'secret': config.API_SECRET,\r\n    'password' : config.API_PASS,\r\n    'options':{\r\n        'defaultType' : 'swap'\r\n        },\r\n\r\n})\r\nokex.set_sandbox_mode(True)\r\n\r\n\r\nleve = okex.set_leverage(10 , 'ETH-USDT' ,  params = {'mgnMode' : 'isolated'} , )\r\norder1 = okex.create_market_buy_order('ETH-USDT' , 6 )\r\nprint(order1)\r\n\r\n\r\n\r\nbut when i use this code i can get swap price but i can't open an order with swap symbol :\r\n\r\nokex = ccxt.okx({\r\n    'apiKey': config.API_KEY,\r\n    'secret': config.API_SECRET,\r\n    'password' : config.API_PASS,\r\n})\r\n\r\nticker = okex.fetch_ticker('ETH-USDT-SWAP')\r\nprint(ticker)\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/14512/comments",
    "author": "ar3sla",
    "comments": [
      {
        "user": "carlosmiei",
        "created_at": "2022-07-28T12:02:02Z",
        "body": "Hello @ar3sla you're mixing up spot and swap market ids.\r\n\r\nIf you want to place an order for the linear ETH/USDT swap you should be using `ETH-USDT-SWAP` as an argument for `createMarketBuyOrder` instead of `ETH-USDT`, the latter represents the spot symbol. \r\n\r\n\r\n\r\n\r\n\r\n\r\n"
      },
      {
        "user": "ar3sla",
        "created_at": "2022-07-28T12:23:42Z",
        "body": "hi @carlosmiei, thanks for your answer\r\nbut when i change it to ETH-USDT-SWAP with this code:\r\nokex = ccxt.okx({\r\n    'apiKey': config.API_KEY,\r\n    'secret': config.API_SECRET,\r\n    'password' : config.API_PASS,\r\n    'options':{\r\n        'defaultType' : 'swap'\r\n        },\r\n\r\n})\r\nokex.set_sandbox_mode(True)\r\n\r\nparams1 = {\r\n    \"instId\":\"ETH-USDT-SWAP\",\r\n    \"tdMode\":\"isolated\",\r\n    \"side\":\"buy\",\r\n    'posSide':\"SWAP\",\r\n    \"ordType\":\"market\",\r\n    \"sz\":\"6\"\r\n}\r\norder1 = okex.create_market_buy_order('ETH-USDT-SWAP' , 6 , params=params1)\r\nprint(order1)\r\n\r\nit shows me this error :\r\nccxt.base.errors.BadRequest: okx {\"code\":\"1\",\"data\":[{\"clOrdId\":\"e847386590ce4dBC2ffbe9c12cb175e0\",\"ordId\":\"\",\"sCode\":\"51000\",\"sMsg\":\"Parameter posSide  error \",\"tag\":\"\"}],\"msg\":\"Operation failed.\"}\r\n\r\n\r\n\r\nand if i use ETH-USDT in this code :\r\nokex = ccxt.okx({\r\n    'apiKey': config.API_KEY,\r\n    'secret': config.API_SECRET,\r\n    'password' : config.API_PASS,\r\n\r\n\r\n})\r\nokex.set_sandbox_mode(True)\r\n\r\n\r\norder1 = okex.create_market_buy_order('ETH-USDT' , 6 )\r\nprint(order1)\r\n\r\nit shows me this error :\r\n\r\nccxt.base.errors.InsufficientFunds: okx {\"code\":\"1\",\"data\":[{\"clOrdId\":\"e847386590ce4dBCb25a7bde230285b0\",\"ordId\":\"\",\"sCode\":\"51008\",\"sMsg\":\"Order placement failed due to insufficient balance \",\"tag\":\"\"}],\"msg\":\"Operation failed.\"}"
      },
      {
        "user": "carlosmiei",
        "created_at": "2022-07-28T13:06:15Z",
        "body": "Hello @ar3sla,\r\n\r\n> order1 = okex.create_market_buy_order('ETH-USDT' , 6 )\r\n> print(order1)\r\n\r\nthis is not what you want, as said earlier 'ETH-USDT' is a spot symbol, so you're saying \"I want to buy 6 ETH with USDT\"\r\n\r\n> order1 = okex.create_market_buy_order('ETH-USDT-SWAP' , 6 , params=params1)\r\n> print(order1)\r\n\r\nYou're almost there, you're just missing the `postSide` parameter required by OKX.\r\n\r\nSomething like this:\r\n```Python\r\n\r\nparams1 = {\r\n    \"marginMode\":\"isolated\", # or cross\r\n    \"posSide\":\"long\", # long or short depending on your intent\r\n}\r\nsymbol = \"ETH-USDT-SWAP\"\r\namount = 6 # number of contracts\r\norder1 = okex.create_market_buy_order(symbol , amount , params=params1)\r\nprint(order1)\r\n```\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"
      }
    ]
  },
  {
    "number": 14457,
    "title": "Kucoin Futures error retrieving data",
    "created_at": "2022-07-23T23:56:13Z",
    "closed_at": "2022-07-24T17:43:16Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/14457",
    "body": "- OS: Windows 10\r\n- Programming Language version: Python 3.1\r\n- CCXT version: 1.91.2\r\n\r\n\r\ntrying to fetch my current positing contractsize, amount of contracts and current margin value:\r\n\r\n\r\n```\r\ndef open_positions():\r\n    params = {'type':'swap', 'code':'USD'}\r\n    symbol = 'BTC/USDT:USDT'\r\n    ku_bal = kucoin.fetch_positions(symbols=[symbol], params=params)\r\n    open_positions = ku_bal[0]\r\n    open_positions = ku_bal['info']['data']['maintMargin']\r\n    openpos_side = open_positions[0]['contracts']\r\n    openpos_size = open_positions[0]['contractSize']\r\n```\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"reeee\", line 310, in <module>\r\n    bot()\r\n  File \"reeeee\", line 251, in bot\r\n    pnl_close() #checking if we hit pnl\r\n  File \"reeeeee\", line 233, in pnl_close\r\n    kill_switch()\r\n  File \"reeeeeee\", line 136, in kill_switch\r\n    openposi = open_positions()[1]\r\n  File \"reeeeee\", line 112, in open_positions\r\n    open_positions = ku_bal['info']['data']['maintMargin']\r\nTypeError: list indices must be integers or slices, not str\r\n\r\n```\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/14457/comments",
    "author": "ysonitis5",
    "comments": [
      {
        "user": "carlosmiei",
        "created_at": "2022-07-24T10:14:39Z",
        "body": "Hello @ysonitis5,\r\n\r\nYou're trying to access a non-existent field in the raw response, which is why it's crashing.\r\n\r\nTo fix it you can either search for the unified `maintenanceMargin` field, like this:\r\n```Python\r\npositions = kucoin.fetch_positions(symbols=[symbol], params=params)\r\nmaintenance_margin = positions[0]['maintenanceMargin'] # the advisable way to get it\r\n```\r\nor access the correct raw value inside `info`, \r\n\r\n```Python\r\npositions = kucoin.fetch_positions(symbols=[symbol], params=params)\r\nmaintenance_margin = positions[0]['info']['posMaint'] # not recommended because APIs are always changing\r\n```\r\n\r\n\r\n"
      }
    ]
  },
  {
    "number": 13831,
    "title": "How to set market take profit?",
    "created_at": "2022-06-13T18:47:53Z",
    "closed_at": "2022-06-15T06:46:05Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/13831",
    "body": "The code as follows:\r\n```\r\nimport ccxt\r\nimport time\r\nfrom pprint import pprint\r\nftx = ccxt.ftx({\r\n    'apiKey': 'my_apikey',\r\n    'secret': 'my_secret',\r\n})\r\n\r\nsymbol = 'BTC/USD:USD'\r\nftx.load_markets()\r\nmarket = ftx.market(symbol)\r\nbtc_maket_price = float(market['info']['price'])\r\nbtc_amount = 20 / btc_maket_price\r\ncreate_order = ftx.create_order(symbol, 'market', 'buy', btc_amount)\r\n\r\ntype = 'takeProfit'\r\nside = 'sell'\r\nrise_btc_price = btc_maket_price + btc_maket_price * 0.015\r\nparams = {\r\n    'stopPrice': rise_btc_price,\r\n}\r\norder = ftx.create_order(symbol, type, side, btc_amount, params)\r\n```\r\n\r\nThe errors as follows:\r\nTraceback (most recent call last):\r\n  File \"C:\\Users\\fxu50\\PycharmProjects\\pythonProject1\\contract.py\", line 26, in <module>\r\n    order = ftx.create_order(symbol, type, side, btc_amount, params)\r\n  File \"C:\\Users\\fxu50\\PycharmProjects\\pythonProject1\\ccxt\\ftx.py\", line 1625, in create_order\r\n    raise InvalidOrder(self.id + ' createOrder() does not support order type ' + type + ', only limit, market, stop, trailingStop, or takeProfit orders are supported')\r\nccxt.base.errors.InvalidOrder: ftx createOrder() does not support order type takeProfit, only limit, market, stop, trailingStop, or takeProfit orders are supported",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/13831/comments",
    "author": "qwe231cvb",
    "comments": [
      {
        "user": "frosty00",
        "created_at": "2022-06-14T01:58:51Z",
        "body": "please update to the latest version of ccxt, this issue should be fixed."
      },
      {
        "user": "qwe231cvb",
        "created_at": "2022-06-14T11:19:27Z",
        "body": "> please update to the latest version of ccxt, this issue should be fixed.\r\n\r\nI have downloaded version 1.87.24 and still the problem persists."
      },
      {
        "user": "kroitor",
        "created_at": "2022-06-14T20:03:07Z",
        "body": "@qwe231cvb you have to upgrade to the most recent version of CCXT, but not only that, you also have to make sure that you have upgraded correctly by printing the actual CCXT version that you are using in runtime. \r\n\r\nLet us know if this does not work:\r\n\r\n```Python\r\nimport ccxt\r\nfrom pprint import pprint\r\n\r\n\r\nprint(\"CCXT Version:\", ccxt.__version__)\r\n\r\n\r\nftx = ccxt.ftx({\r\n    'apiKey': 'my_apikey',\r\n    'secret': 'my_secret',\r\n})\r\n\r\nmarkets = exchange.load_markets()\r\n\r\n# exchange.verbose = True  # uncomment for debugging purposes if necessary, after loading the markets\r\n\r\nsymbol = 'BTC/USD:USD'\r\nftx.load_markets()\r\nmarket = ftx.market(symbol)\r\nbtc_maket_price = float(market['info']['price'])\r\nbtc_amount = 20 / btc_maket_price\r\ncreate_order = ftx.create_order(symbol, 'market', 'buy', btc_amount)\r\n\r\ntype = 'takeProfit'\r\nside = 'sell'\r\nrise_btc_price = btc_maket_price + btc_maket_price * 0.015\r\nparams = {\r\n    'stopPrice': rise_btc_price,\r\n}\r\norder = ftx.create_order(symbol, type, side, btc_amount, params)\r\n```"
      },
      {
        "user": "qwe231cvb",
        "created_at": "2022-06-15T06:04:06Z",
        "body": "> @qwe231cvb you have to upgrade to the most recent version of CCXT, but not only that, you also have to make sure that you have upgraded correctly by printing the actual CCXT version that you are using in runtime.\r\n> \r\n> Let us know if this does not work:\r\n> \r\n> ```python\r\n> import ccxt\r\n> from pprint import pprint\r\n> \r\n> \r\n> print(\"CCXT Version:\", ccxt.__version__)\r\n> \r\n> \r\n> ftx = ccxt.ftx({\r\n>     'apiKey': 'my_apikey',\r\n>     'secret': 'my_secret',\r\n> })\r\n> \r\n> markets = exchange.load_markets()\r\n> \r\n> # exchange.verbose = True  # uncomment for debugging purposes if necessary, after loading the markets\r\n> \r\n> symbol = 'BTC/USD:USD'\r\n> ftx.load_markets()\r\n> market = ftx.market(symbol)\r\n> btc_maket_price = float(market['info']['price'])\r\n> btc_amount = 20 / btc_maket_price\r\n> create_order = ftx.create_order(symbol, 'market', 'buy', btc_amount)\r\n> \r\n> type = 'takeProfit'\r\n> side = 'sell'\r\n> rise_btc_price = btc_maket_price + btc_maket_price * 0.015\r\n> params = {\r\n>     'stopPrice': rise_btc_price,\r\n> }\r\n> order = ftx.create_order(symbol, type, side, btc_amount, params)\r\n> ```\r\n\r\nThe problem persists, here is the printout:\r\nCCXT Version: 1.87.24\r\nTraceback (most recent call last):\r\n  File \"C:\\Users\\fxu50\\PycharmProjects\\pythonProject1\\contract.py\", line 30, in <module>\r\n    order = ftx.create_order(symbol, type, side, btc_amount, params)\r\n  File \"C:\\Users\\fxu50\\PycharmProjects\\pythonProject1\\ccxt\\ftx.py\", line 1625, in create_order\r\n    raise InvalidOrder(self.id + ' createOrder() does not support order type ' + type + ', only limit, market, stop, trailingStop, or takeProfit orders are supported')\r\nccxt.base.errors.InvalidOrder: ftx createOrder() does not support order type takeProfit, only limit, market, stop, trailingStop, or takeProfit orders are supported\r\n"
      },
      {
        "user": "kroitor",
        "created_at": "2022-06-15T06:46:05Z",
        "body": "@qwe231cvb you're making a market takeProfit order, so you have to specify price=None or the actual limit price:\r\n\r\n```Python\r\nimport ccxt\r\nfrom pprint import pprint\r\n\r\n\r\nprint(\"CCXT Version:\", ccxt.__version__)\r\n\r\n\r\nftx = ccxt.ftx({\r\n    'apiKey': 'my_apikey',\r\n    'secret': 'my_secret',\r\n})\r\n\r\nmarkets = exchange.load_markets()\r\n\r\n# exchange.verbose = True  # uncomment for debugging purposes if necessary, after loading the markets\r\n\r\nsymbol = 'BTC/USD:USD'\r\nftx.load_markets()\r\nmarket = ftx.market(symbol)\r\nbtc_maket_price = float(market['info']['price'])\r\nbtc_amount = 20 / btc_maket_price\r\ncreate_order = ftx.create_order(symbol, 'market', 'buy', btc_amount)\r\n\r\ntype = 'takeProfit'\r\nside = 'sell'\r\nrise_btc_price = btc_maket_price + btc_maket_price * 0.015\r\nparams = {\r\n    'stopPrice': rise_btc_price,\r\n}\r\nprice = None  # or your takeProfit limit price  # -------- \u2193\r\norder = ftx.create_order(symbol, type, side, btc_amount, price, params)\r\n```\r\n\r\nHope that answers your question."
      }
    ]
  },
  {
    "number": 13818,
    "title": "In bybit, fetch_order returns None",
    "created_at": "2022-06-13T08:54:52Z",
    "closed_at": "2022-06-13T13:01:00Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/13818",
    "body": "- OS: Ubuntu\r\n- Programming Language version: Python\r\n- CCXT version: 1.85.51\r\n\r\n```\r\nimport ccxt\r\nbybit = ccxt.bybit({...})\r\n\r\nsymbol = 'GLMR/USDT:USDT'\r\nresult1 = bybit.create_order(symbol=symbol)\r\nresult2 = bybit.fetch_order(id=result1['id'], symbol=symbol)\r\nprint(result2)\r\n```\r\n\r\n```\r\nNone\r\n```\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/13818/comments",
    "author": "kjnh10",
    "comments": [
      {
        "user": "carlosmiei",
        "created_at": "2022-06-13T11:13:03Z",
        "body": "Hello @kjnh10, can you please post a verbose output so that we can analyze the request and response?"
      },
      {
        "user": "carlosmiei",
        "created_at": "2022-06-13T11:14:23Z",
        "body": "@kjnh10 Actually I would start by updating the ccxt version I suspect that bug was fixed recently so updating it might solve your problem"
      },
      {
        "user": "kjnh10",
        "created_at": "2022-06-13T11:55:45Z",
        "body": "I has updated to 1.87.12, and it seems resolves this problem.\r\n\r\nThanks,"
      }
    ]
  },
  {
    "number": 13712,
    "title": "Total balance of a account",
    "created_at": "2022-06-08T14:40:50Z",
    "closed_at": "2022-06-09T12:20:56Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/13712",
    "body": "Hi, I am not very good in programming so I tried googling on how to use CCXT to get the overall account balance using the \"balance\" function, but no luck. \n\nSo I wonder if anyone can help me out. \nI am trying to get the overall account balance of any exchange, instead of just 1 assets. \n\nThank you in advance.",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/13712/comments",
    "author": "300Gram",
    "comments": [
      {
        "user": "carlosmiei",
        "created_at": "2022-06-08T14:49:40Z",
        "body": "Hello @300Gram, which exchange do you use?\r\n\r\nAlso, I would suggest reading the manual carefully you will find most of the things you might need there. "
      },
      {
        "user": "FabLK",
        "created_at": "2022-06-08T14:59:46Z",
        "body": "@300Gram Hello, I'm doing that for my project and this is how I proceed:\r\n\r\n1/Getting balances of every token\r\n2/For every token, find the price against USDT (if not available against BTC or ETH then against USDT) of course you can do this against USD or every currency you want\r\n3/Convert my token balances into usdEquivalent balances\r\n4/Sum all usdEquivalent balances \r\n\r\nThis is how I proceed for Binance (this code may be not optimal but it gives you an idea): \r\n**The ccxt object is self.exchange**\r\n```py\r\n        def get_balance(self):\r\n            start = time.time()\r\n            balances = self.exchange.fetch_balance()['info']['balances']\r\n            self.balance = 0\r\n\r\n            for i in balances:\r\n                if float(i['free'])!=0 or float(i['locked'])!=0:\r\n                    if i['asset'] != 'USDT':\r\n                        request = i['asset']+'/USDT'\r\n                        try:\r\n                            price = float(self.exchange.fetchTicker(request)['last'])\r\n                        except:\r\n                            try:\r\n                                request = i['asset']+'/BTC'\r\n                                price = float(self.exchange.fetchTicker(request)['last'])\r\n                                val_btc = (float(i['free'])+float(i['locked']))*price\r\n                                price = float(self.exchange.fetchTicker('BTC/USDT')['last'])\r\n                                self.balance += val_btc*price\r\n                            except:\r\n                                try:\r\n                                    request = i['asset']+'/ETH'\r\n                                    price = float(self.exchange.fetchTicker(request)['last'])\r\n                                    val_btc = (float(i['free'])+float(i['locked']))*price\r\n                                    price = float(self.exchange.fetchTicker('ETH/USDT')['last'])\r\n                                    self.balance += val_btc*price\r\n                                except:\r\n                                    print(i['asset'])\r\n\r\n                        self.balance += (float(i['free'])+float(i['locked']))*price\r\n                    else:\r\n                        self.balance += float(i['free'])+float(i['locked'])\r\n            self.latency = time.time()-start\r\n```"
      }
    ]
  },
  {
    "number": 13255,
    "title": "Is it a joke? MECX futures login",
    "created_at": "2022-05-15T10:50:23Z",
    "closed_at": "2022-05-15T10:53:23Z",
    "labels": [
      "bug",
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/13255",
    "body": "I have code\r\n```\r\nmexc_futures = ccxt.mexc({\r\n    \"apiKey\": config.MEXC_API_KEY,\r\n    \"secret\": config.MEXC_SECRET_KEY,\r\n    \"options\": {'defaultType': 'future' }\r\n})\r\n```\r\nAnd got\r\n```\r\nccxt.base.errors.ExchangeError: mexc does not support 'future' type, set exchange.options['defaultType'] to 'spot', 'margin', 'delivery' or 'future'\r\n```\r\nWhat am i supposed to do?)",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/13255/comments",
    "author": "KindSpidey",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2022-05-15T10:52:16Z",
        "body": "@KindSpidey sorry, it's a misleading erroneous message, it actually supports either `spot` or `swap` (for perpetual futures aka swaps). In this case, you should use `swap` instead of `future`. Will fix the message in the upcoming build. Thank you for pointing it out."
      },
      {
        "user": "kroitor",
        "created_at": "2022-05-15T10:57:07Z",
        "body": "@KindSpidey i've pushed a fix to that message in CCXT 1.82.53 (the new build will arrive in 20 minutes). Thank you for your feedback!"
      }
    ]
  },
  {
    "number": 12943,
    "title": "Why fee an trades aren't reported when an order is filled at Binance ?",
    "created_at": "2022-04-22T10:50:23Z",
    "closed_at": "2022-04-22T11:50:57Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/12943",
    "body": "Hello,\r\n\r\nI try to understand why `fee`, `fees` and `trades` keys are empty in the dictionary returned by the exchange after an order is filled (method `fetchOrder`). Sometime the keys contain data. Please find below two orders executed on ETH/USDT spot market of Binance. One order has values but not the other. What could be the reason ?\r\n\r\nAs you can see both orders have status `FILLED`. One is `sell` the other is `buy`.\r\n\r\n`fee` is null\r\n\r\n`{\"id\": \"8664222318\", \"fee\": null, \"cost\": 18.07068, \"fees\": [], \"info\": {\"side\": \"SELL\", \"time\": \"1650610804472\", \"type\": \"LIMIT\", \"price\": \"3011.78000000\", \"status\": \"FILLED\", \"symbol\": \"ETHUSDT\", \"orderId\": \"8664222318\", \"origQty\": \"0.00600000\", \"isWorking\": true, \"stopPrice\": \"0.00000000\", \"icebergQty\": \"0.00000000\", \"updateTime\": \"1650610829617\", \"executedQty\": \"0.00600000\", \"orderListId\": \"-1\", \"timeInForce\": \"GTC\", \"clientOrderId\": \"6qgr8\", \"origQuoteOrderQty\": \"0.00000000\", \"cummulativeQuoteQty\": \"18.07068000\"}, \"side\": \"sell\", \"type\": \"limit\", \"price\": 3011.78, \"amount\": 0.006, \"filled\": 0.006, \"status\": \"closed\", \"symbol\": \"ETH/USDT\", \"trades\": [], \"average\": 3011.78, \"datetime\": \"2022-04-22T07:00:04.472Z\", \"postOnly\": false, \"remaining\": 0.0, \"stopPrice\": null, \"timestamp\": 1650610804472, \"timeInForce\": \"GTC\", \"clientOrderId\": \"6qgr8\", \"lastTradeTimestamp\": null}`\r\n\r\n`fee` contains data \r\n\r\n`{\"id\": \"8665290466\", \"fee\": {\"cost\": 2.99e-05, \"currency\": \"ETH\"}, \"cost\": 89.71196, \"fees\": [{\"cost\": 2.99e-05, \"currency\": \"ETH\"}], \"info\": {\"side\": \"BUY\", \"type\": \"LIMIT\", \"fills\": [{\"qty\": \"0.02990000\", \"price\": \"3000.40000000\", \"tradeId\": \"807983332\", \"commission\": \"0.00002990\", \"commissionAsset\": \"ETH\"}], \"price\": \"3000.40000000\", \"status\": \"FILLED\", \"symbol\": \"ETHUSDT\", \"orderId\": \"8665290466\", \"origQty\": \"0.02990000\", \"executedQty\": \"0.02990000\", \"orderListId\": \"-1\", \"timeInForce\": \"GTC\", \"transactTime\": \"1650618004892\", \"clientOrderId\": \"8iMM1\", \"cummulativeQuoteQty\": \"89.71196000\"}, \"side\": \"buy\", \"type\": \"limit\", \"price\": 3000.4, \"amount\": 0.0299, \"filled\": 0.0299, \"status\": \"closed\", \"symbol\": \"ETH/USDT\", \"trades\": [{\"id\": \"807983332\", \"fee\": {\"cost\": 2.99e-05, \"currency\": \"ETH\"}, \"cost\": 89.71196, \"fees\": [{\"cost\": \"0.00002990\", \"currency\": \"ETH\"}], \"info\": {\"qty\": \"0.02990000\", \"price\": \"3000.40000000\", \"tradeId\": \"807983332\", \"commission\": \"0.00002990\", \"commissionAsset\": \"ETH\"}, \"side\": \"buy\", \"type\": \"limit\", \"order\": \"8665290466\", \"price\": 3000.4, \"amount\": 0.0299, \"symbol\": \"ETH/USDT\", \"datetime\": null, \"timestamp\": null, \"takerOrMaker\": null}], \"average\": 3000.4, \"datetime\": \"2022-04-22T09:00:04.892Z\", \"postOnly\": false, \"remaining\": 0.0, \"stopPrice\": null, \"timestamp\": 1650618004892, \"timeInForce\": \"GTC\", \"clientOrderId\": \"8iMM1\", \"lastTradeTimestamp\": null}`\r\n\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/12943/comments",
    "author": "Kinzowa",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2022-04-22T10:52:17Z",
        "body": "@Kinzowa do you always use fetchOrder in all cases, or do you get those orders from different methods (say, fetchOrder / fetchOrders, or fetchOrder/createOrder, etc) ?"
      },
      {
        "user": "Kinzowa",
        "created_at": "2022-04-22T10:56:07Z",
        "body": "Hi @kroitor , thanks for your answer. Yes I use different methods. When an order is placed with `createOrder` I catch the response and, if the status is still `open` then I periodically check it with `fetchOrder`."
      },
      {
        "user": "Kinzowa",
        "created_at": "2022-04-22T11:01:38Z",
        "body": "Now I understand, fee and trades are only reported by the exchange with `createOrder` if the order is executed.\r\n\r\nIf I understand correctly, Binance returns `fee` and `commission` keys when the order takes liquidity (taker), but not if it's a maker."
      },
      {
        "user": "kroitor",
        "created_at": "2022-04-22T11:50:57Z",
        "body": "> Now I understand, fee and trades are only reported by the exchange with `createOrder` if the order is executed.\r\n>\r\n> If I understand correctly, Binance returns `fee` and `commission` keys when the order takes liquidity (taker), but not if it's a maker.\r\n\r\nBasically, the fee is a property of a trade, not a property of an order. Most of the exchanges will return those fees with trades from fetchMyTrades. Some exchanges will also return those fees in the orders, but not all of them. That is because a single order can be filled with multiple trades, and then you have to sum up those fees to get the total fee. When the exchange does not specify a total fee on the order, ccxt can calculate it, if the exchange returns the trade information within the order. However, Binance exchange will only return that trade+fee information within createOrder upon placing it. And when you query it later, the trade+fee info is not available from the fetchOrder-endpoint. Hence, you have to fetchMyTrades, filter those trades by the order id and sum up their fees by currency. Hope that answers your question. Feel free to reopen this issue or just ask further questions if any."
      }
    ]
  },
  {
    "number": 12576,
    "title": "Transfer USDT between spot and futures",
    "created_at": "2022-03-31T13:52:37Z",
    "closed_at": "2022-04-01T11:07:00Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/12576",
    "body": "- OS: Windows \r\n- Programming Language version: 3.10\r\n- CCXT version: 1.77.62\r\n\r\n```\r\nimport time\r\nstart = time.time()\r\nexchange.sapi_post_futures_transfer({\r\n    'asset': 'USDT',\r\n    'amount': '10',\r\n    'type': 2,\r\n})\r\nend = time.time()\r\n```\r\nI want to take a long position in the spot market and a short position in the future market. To do that, I have to make a USDT transfer between spot and future wallets. My question is:\r\n\r\nExecution time of the above transfer code is around 1 second. Except for USDT transfer between wallets, my entire code, including creating orders, takes milliseconds. Since USDT transfer takes 1 second, is there a risk that the order execution code runs before USDT transfer so the order can not be implemented due to lack of funds? If so, what would be the best solution?\r\n\r\nMaybe I should clarify my question\r\nLet's say that I am in full long position and I receive short signal. So I have to close all long positions, transfer USDT to future wallet and open short positions. Transferring USDT takes around 1 second. I wonder if there is a risk that execution order code(opening short positions) runs before money transfer? If it happens there wont be enough funds to open short position.\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/12576/comments",
    "author": "euphrates85",
    "comments": [
      {
        "user": "ttodua",
        "created_at": "2022-04-01T07:48:31Z",
        "body": "as I assume, you are using synchronous code. If so, it doesn't matter if transfer takes 800MS, 1200MS or 1000MS , as long as you execute trade after transfering. \r\nif you run asynchronous code, then right - it will need some extra steps - when you get the 'short' signal, then you can asynchronously initiate the transfer, and paralelly, i.e. every 200MS, check the balance to ensure the funds are received.\r\n\r\nBut again, if you run synchronous code, then I don't see why it would be an issue, i.e.:\r\n````\r\nif (short_signal_received) {\r\n    exchange.sapi_post_futures_transfer({...});\r\n    exchange.create_order(.....); //so, order will be only fired after the above line finishes its work.\r\n}\r\n````\r\nLet me know if i misunderstood the question."
      },
      {
        "user": "samgermain",
        "created_at": "2022-04-01T07:48:57Z",
        "body": "If you're using async ccxt, you would need to `await` the completion of the transfer before making your order, otherwise, you can just use the unified `transfer` method and not worry about it\r\n\r\n```\r\nimport ccxt\r\nimport pprint\r\n\r\nprint('CCXT Version:', ccxt.__version__)\r\n\r\nbinance = ccxt.binance()\r\ntransfer = binance.transfer(USDT, 0.01, spot, future)\r\norder = binance.createOrder( ... )\r\npprint(transfer)\r\npprint(order)\r\n```"
      }
    ]
  },
  {
    "number": 12512,
    "title": "In using CCXT for FTX exchange, is there a simple/smart way to retrieve the values of current account Leverage, Total collateral and Free collateral?",
    "created_at": "2022-03-27T11:12:40Z",
    "closed_at": "2022-05-07T00:57:54Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/12512",
    "body": "In using CCXT for FTX exchange, is there a simple/smart way to retrieve the values of current Leverage, Total collateral and Free collateral?",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/12512/comments",
    "author": "jamezun",
    "comments": [
      {
        "user": "micant",
        "created_at": "2022-03-28T23:49:26Z",
        "body": "Not sure how smart it is but this is my implementation:\r\n\r\nMy understanding is that (for the most part) futures trading is not implemented in the _unified api_\r\n\r\n```\r\n async setLeverage(exchange, config) {\r\n      const lev = await exchange.privatePostAccountLeverage({\r\n        leverage: config.leverage\r\n      });\r\n  }\r\n\r\n async getLeverage(exchange) {\r\n      const { result } = await exchange.privateGetAccount();\r\n      const { leverage } = result;\r\n      return leverage;\r\n  }\r\n\r\n  async fetchCollateral(exchange) {\r\n      const { result } = await exchange.privateGetAccount();\r\n      const { collateral, freeCollateral } = result;\r\n      return {\r\n        collateral: {\r\n          USD: {\r\n            free: freeCollateral,\r\n            used: collateral - freeCollateral,\r\n            total: collateral\r\n          }\r\n        }\r\n      };\r\n    }\r\n\r\n```\r\n"
      }
    ]
  },
  {
    "number": 12452,
    "title": "Since timestamp exchange.iso8601() not syncing with actual trade timestamp",
    "created_at": "2022-03-23T01:53:29Z",
    "closed_at": "2022-03-23T01:57:58Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/12452",
    "body": "OS: Windows Server 2019 Datacenter\r\nProgramming Language version: Node.js 15.3.0\r\nCCXT version: 1.49.98\r\nExchange: Kucoin\r\nMethod: exchange.iso8601()\r\n\r\nHello!\r\n\r\nI noticed a problem that happens with the `exchange.iso8601()`. I will describe the steps. I am not sure the verbose output is needed or if this is a fundamental \"problem\" that has a solution. Otherwise I will create/add verbose if needed.\r\n\r\nI have written comments in the code which tell the question:\r\n\r\n```\r\n    //First, I Declare the kucoin exchange\r\n    const Exchange = ccxt[\"kucoin\"];\r\n    const exchange = new Exchange({ enableRateLimit: true, 'timeout': 30000 });\r\n\r\n    //Second, I register the kucoin exchange iso8601 Date now which returned: 1647997843992\r\n    var since = exchange.iso8601(Date.now()).toString(); \r\n\r\n    //Third, I now Create order that goes through instantly on kucoin\r\n    var response = await exchange.createOrder(\"ETH/USDT\", \"limit\", \"buy\", 0.002, 3000, {});\r\n\r\n    //Now, I will try and return trades since: \"1647997843992\"\r\n    var trades = await exchange.fetchClosedOrders(\"ETH/USDT\", since, 10); //since: 1647997843992\r\n```\r\nHowever, no trades are returned but I tried to put 1 second back in time manually as since parameter instead `1647997842992`. Now I did return the trade on kucoin.\r\n\r\nThe thing is that the trade has registered this timestamp: `1647997843672`.\r\n`1647997843672 `is `20 `milliseconds BEFORE `1647997843992` which I registered the moment before I created the trade.\r\n\r\nWhy does this happen. It seems that something is not syncing. Shouldn't I get the Absolute timestamp from the exchange?\r\nIs there any safe approach to be sure to have the correct timestamp as the `since`?\r\n\r\nThank you!",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/12452/comments",
    "author": "jackpotcityco",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2022-03-23T01:57:58Z",
        "body": "@jackpotcityco the `since` argument must be a number in milliseconds (not a string). Alternatively you should use `exchange.parse8601()` to parse an ISO8601 datetime string to a milliseconds-number, cause `exchange.iso8601` is used to convert from milliseconds to a string.\r\n\r\nThis should work, let us know if it does not help:\r\n\r\n```JavaScript\r\n    const exchange = new ccxt[\"kucoin\"]({\r\n        'apiKey': 'YOUR_API_KEY',\r\n        'secret': 'YOUR_SECRET',\r\n        'password': 'YOUR_API_PASSWORD',\r\n    });\r\n\r\n    const since = exchange.milliseconds()\r\n\r\n    const response = await exchange.createOrder(\"ETH/USDT\", \"limit\", \"buy\", 0.002, 3000, {});\r\n\r\n    const trades = await exchange.fetchClosedOrders(\"ETH/USDT\", since, 10);\r\n```"
      }
    ]
  },
  {
    "number": 12034,
    "title": "Question: precision of assets",
    "created_at": "2022-02-20T07:29:48Z",
    "closed_at": "2022-02-20T11:13:34Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/12034",
    "body": "Got a question regarding precision of assets.\r\nIt's not clear to me if precision of the same asset/currency if always the same all exchange markets. Or can it be different?\r\nCan I use precision from Currency or should I always use precision from Market (base or quote depending where my currency is). \r\n\r\nFor example, is it possible that BTC on WAVES/BTC (as quote) has precision 8 and on BTC/LTC (as base) has precision 7? \r\nAnyone? Thank you in advance!\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/12034/comments",
    "author": "dar7man",
    "comments": [
      {
        "user": "AnimusXCASH",
        "created_at": "2022-02-20T10:44:08Z",
        "body": "Yes, the precision can vary amongst exchanges. \n\nBrg"
      },
      {
        "user": "dar7man",
        "created_at": "2022-02-20T11:09:29Z",
        "body": "Sorry, maybe I wasn't clear. \r\nI was asking if precision can very amongst markets on the same exchange?"
      },
      {
        "user": "kroitor",
        "created_at": "2022-02-20T11:13:34Z",
        "body": "@dar7man hi! Yes, that is very common, an exchange can have varying precision with different markets (on the same exchange). Hope that answers your question, let us know if not."
      },
      {
        "user": "dar7man",
        "created_at": "2022-02-20T11:16:24Z",
        "body": "I'm not sure. I was asking if one asset (for example BTC), can have different precision on the **same exchange** but on **different markets**?"
      },
      {
        "user": "kroitor",
        "created_at": "2022-02-20T11:25:53Z",
        "body": "@dar7man yes, that is possible, the same asset can have different precision within different market pairs on the same exchange."
      },
      {
        "user": "kroitor",
        "created_at": "2022-02-20T11:35:07Z",
        "body": "@dar7man withdrawal precision is not always the same as trading precision. \r\n\r\n> How it corresponds to \"precision\" in Market structure?\r\n\r\nIf the exchange does not specify a per-currency precision or any currency info per se, then the highest precision from markets is taken for currencies.\r\n\r\nIf the exchange does define separate per-currency and per-market precision for BTC, then CCXT will use that where applicable."
      }
    ]
  },
  {
    "number": 11176,
    "title": "How to pass sub account argument to Binance exchange instantiation",
    "created_at": "2022-01-08T17:02:23Z",
    "closed_at": "2022-01-08T17:03:41Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/11176",
    "body": "I can't find anywhere the syntax to tell Binance to load data (.fetchBalance(), .fetch_positions()) only on a subaccount?\r\nOn FTX, I would add the below to the parameters dict:\r\n'headers': {'FTX-SUBACCOUNT': 'YOURSUBACCOUNTNAME'}\r\n\r\nI've tried replacing the headers key by 'BINANCE-SUBACCOUNT', or 'SUBACCOUNT', but everytime I get error 2015:\r\n{AuthenticationError}binance {\"code\":-2015,\"msg\":\"Invalid API-key, IP, or permissions for action.\"}",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/11176/comments",
    "author": "bsauvage1",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2022-01-08T17:03:41Z",
        "body": "@bsauvage1 with Binance the API keypair identifies the subaccount, i think, so if you pass the subaccount API key to it, it should fetch the subaccount balance. Let us know if that does not help."
      }
    ]
  },
  {
    "number": 10751,
    "title": "[okex] Networks indexed improperly",
    "created_at": "2021-12-01T13:27:01Z",
    "closed_at": "2021-12-01T13:29:55Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/10751",
    "body": "Dear fellows,\r\nokex.js -> options\r\n\r\n```                \r\n'networks': {\r\n    'ETH': 'ERC20',\r\n    'TRX': 'TRC20',\r\n    'OMNI': 'Omni',\r\n},\r\n```\r\nare indexed wrongly, the networks in other parts of ccxt (exchange.currencies.networks for example) are indexed by ERC20, TRC20, etc.\r\nI suggest to unify it (e.g. binance, kucoin, etc):\r\n```javascript\r\nbinance: \r\n                'networks': {\r\n                    'ERC20': 'ETH',\r\n                    'TRC20': 'TRX',\r\n                    'BEP2': 'BNB',\r\n                    'BEP20': 'BSC',\r\n                    'OMNI': 'OMNI',\r\n                    'EOS': 'EOS',\r\n                    'SPL': 'SOL',\r\n                },\r\nkucoin:\r\n\r\n                'networks': {\r\n                    'ETH': 'eth',\r\n                    'ERC20': 'eth',\r\n                    'TRX': 'trx',\r\n                    'TRC20': 'trx',\r\n                    'KCC': 'kcc',\r\n                    'TERRA': 'luna',\r\n                },\r\n```\r\n\r\nThere is also issue with default value in withdraw function, which allows invalid network ID to get into withdrawal requests:\r\n```javascript\r\n        network = this.safeString (networks, network, network); // handle ETH>ERC20 alias\r\n```\r\n\r\nEDIT: the options might just need to by extended with ERC20, TRC20, etc.",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/10751/comments",
    "author": "krychla1",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2021-12-01T13:29:55Z",
        "body": "That is actually a correct mapping:\r\n\r\n```JavaScript\r\n'networks': {\r\n    'ETH': 'ERC20',\r\n    'TRX': 'TRC20',\r\n    'OMNI': 'Omni',\r\n},\r\n```\r\n\r\n\u2191\u00a0That will work with all mappings ERC20, TRC20, OMNI, ETH, TRX, Omni due to how safeMethods are used with `networks`. That is done on purpose, so that all the following usages work:\r\n\r\n```\r\nfetchDepositAddress ('USDT', {'network':'ETH'})\r\nfetchDepositAddress ('USDT', {'network':'ERC20'})\r\n```\r\n\r\n\r\nHope that answers your question, let us know if not.\r\n"
      },
      {
        "user": "krychla1",
        "created_at": "2021-12-01T13:39:37Z",
        "body": "FetchDepositAddress handles it completely differently, because the network isn't part of the request, it is just filtered from the response (from a quick look).\r\n\r\nHowever check the withdrawal function:\r\n```javascript\r\n        const networks = this.safeValue (this.options, 'networks', {});\r\n        let network = this.safeStringUpper (params, 'network'); // this line allows the user to specify either ERC20 or ETH\r\n        network = this.safeString (networks, network, network); // handle ETH>ERC20 alias\r\n        if (network !== undefined) {\r\n            request['chain'] = currency['id'] + '-' + network;\r\n            params = this.omit (params, 'network');\r\n        }\r\n        const query = this.omit (params, [ 'fee', 'password', 'pwd' ]);\r\n        if (!('pwd' in request)) {\r\n            throw new ExchangeError (this.id + ' withdraw() requires a password parameter or a pwd parameter, it must be the funding password, not the API passphrase');\r\n        }\r\n        const response = await this.privatePostAssetWithdrawal (this.extend (request, query));\r\n```\r\nThis allows you to use ERC20 as a network only because it allows everything to be used as networks.\r\n\r\nEDIT:\r\nexample\r\n```javascript\r\nexchange.withdraw ('USDT', network: \"weirdInvalidNetwork\")\r\n```"
      },
      {
        "user": "kroitor",
        "created_at": "2021-12-01T13:51:54Z",
        "body": "> This allows you to use ERC20 as a network only because it allows everything to be used as networks.\r\n\r\nYes, that is correct. We will not reject params-overrides, if the user intentionally supplies an identifier for some new blockchain that is not listed out in `networks`. The user will get an exception from the exchange if the supplied network is incorrect.\r\n\r\nThe unified identifier for ERC20 is `ERC20`, for TRC20 it is `TRC20`.\r\nCCXT will allow the user to supply unified networks as well as exchange-specific networks by design."
      }
    ]
  },
  {
    "number": 10495,
    "title": "what is the proper way to fetchfunctios with a single binance apikey",
    "created_at": "2021-11-05T19:03:13Z",
    "closed_at": "2021-12-14T21:47:00Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/10495",
    "body": "OS: Ubuntu 20.04\r\nProgramming Language version: Javascript Node js\r\nCCXT version: 1.60.10\r\n\r\nHow many cctx object I need to create to get all my positions. In the documentation to get the linear positions I need to create a \r\n`\r\n            exchangeusdm = new ccxt.binanceusdm\r\n`\r\n\r\nwhile for the coin base futures, I need to create a \r\n`\r\n           exchangecoinm = new ccxt.binancecoinm\r\n`\r\nI checked the code and I see that both extend from finance\r\nI am creating a code that needs to get all positions, balance, and all assets of a user\r\nmy questions are: \r\nDo I need to create both objects with the same API key to get the inverted and linear positions ?\r\nIs there a situation where I also need to create  the usual binance object\r\n`\r\n           exchangecoinm = new ccxt.binance\r\n`",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/10495/comments",
    "author": "israel-gonzalezmedina",
    "comments": [
      {
        "user": "ttodua",
        "created_at": "2021-12-14T21:46:13Z",
        "body": "At this moment, it seems to me the way (to create two separate objects), and as they inherit from binance, there is no need to create `new ccxt.binance` separately, as they will do everything whatever `binance` class can do. as you might seen in implementation, the `options` parts are only different in `binanceusdm/binancecoinm`:\r\n\r\nbinanceusdm:\r\n```\r\n            'options': {\r\n                'defaultType': 'future',\r\n                'marginTypes': {},\r\n                ...\r\n            },\r\n```\r\nbinancecoinm:\r\n```\r\n            'options': {\r\n                'defaultType': 'delivery',\r\n                ...\r\n            },\r\n```\r\n\r\nunfortunately, I can't see any simple way to initiate only one binance-object and manage switching from one to another type, because of the dependancy-chain (i.e. separate fetch-markets, permitted currencies, etc...), so viable way is to have 2 exchange objects.\r\n\r\nhowever, if you want to trade on spot too, then you will need 3rd initiated object (`new binance()`) as the above two only works with their fields and not on spot."
      },
      {
        "user": "kroitor",
        "created_at": "2021-12-15T02:20:05Z",
        "body": "@israel-gonzalezmedina I would highly recommend to avoid mixing the defaultType in the runtime.\r\n\r\nInstead, the recommended way of dealing with binance market types is to create one exchange instance per type, as you explained in your opening post.\r\n\r\n> Do I need to create both objects with the same API key to get the inverted and linear positions ?\r\n\r\nYes, they're not interchangeable on the same instance, cause they require preloading either this or that set of markets.\r\nYou have to use several instances of Binance:\r\n\r\n```JavaScript\r\nconst binance = new ccxt.binance()\r\nconst binanceusdm = new ccxt.binanceusdm()\r\nconst binancecoinm = new ccxt.binancecoinm()\r\n```\r\n\r\nor\r\n\r\n```JavaScript\r\nconst binance = new ccxt.binance({ 'options': { 'defaultType':spot' }})\r\nconst binanceusdm = new ccxt.binance({ 'options': { 'defaultType':future' }})\r\nconst binancecoinm = new ccxt.binance({ 'options': { 'defaultType':delivery' }})\r\n```\r\n\r\nHope that helps."
      }
    ]
  },
  {
    "number": 10439,
    "title": "ByBit Close Position",
    "created_at": "2021-11-02T12:27:58Z",
    "closed_at": "2021-11-02T22:12:27Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/10439",
    "body": "\r\n- OS: MacOs\r\n- Programming Language version: Python 3.9.4\r\n- CCXT version: 1.60.9\r\n\r\n```\r\nsymbol = 'SOLUSDT'\r\ntrade_res = exchange.create_order(symbol, amount=1, type='Market', side='Buy')\r\n```\r\n\r\nThe above snippet buys 1 SOL against USDT. When I try to close the position by placing a sell order, I see that ByBit placed another Short position on SOL without closing the Long one (2 positions appear in the console)\r\n\r\nHow do I close a current open position on ByBit using ccxt?\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/10439/comments",
    "author": "mhd-adam",
    "comments": [
      {
        "user": "elitwilliams",
        "created_at": "2021-11-02T18:36:55Z",
        "body": "You need to set the `reduce_only` param to `True` to place a closing order on Bybit. To my knowledge there is unfortunately no way to set this as the default behavior on Bybit, and you will need to track your position on your end or use a try/except to catch and re-place an order as opening if a closing order attempt fails, but of course this will count as 2 API requests.\r\n\r\n```\r\nsymbol = 'SOLUSDT'\r\ntrade_res = exchange.create_order(symbol, amount=1, type='Market', side='Buy', params={\"reduce_only\": True})\r\n```"
      }
    ]
  },
  {
    "number": 9886,
    "title": "How to set leverage for Binance SPOT Trades  ?",
    "created_at": "2021-08-27T14:21:56Z",
    "closed_at": "2021-08-27T14:23:58Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/9886",
    "body": "\r\n- OS: WIndows\r\n- Programming Language version: Python\r\n- CCXT version: 1.55.15\r\n   \r\ncode:\r\n              leverage=exchange.set_leverage(symbol='BTC/USDT, leverage=2)\r\n              print(lev)\r\n\r\nError :\r\n              binance setLeverage() supports linear and inverse contracts only\r\n\r\n\r\nNote: It's working fine for future or delivery. ( 'defaultType':  'delivery', # 'future', )\r\n\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/9886/comments",
    "author": "SreekanthAvala",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2021-08-27T14:23:58Z",
        "body": "You can't set the leverage on spot trades in general. Leverage is only available with futures and perpetuals (delivery, future), in other words, it requires a notion of margin. It is not a limitation of CCXT, though, that is just how exchanges work."
      }
    ]
  },
  {
    "number": 9880,
    "title": "Python ratelimiter broken",
    "created_at": "2021-08-26T09:34:50Z",
    "closed_at": "2021-08-26T09:48:10Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/9880",
    "body": "The python rateLimiter is broken in the newest version.\r\nI tested this on python 3.7 and 3.8 (Debian and CentOS)\r\n\r\nThe following snippet should return, but it is stuck after the first loop.\r\n\r\n```\r\nimport asyncio\r\nimport ccxt.async_support\r\n\r\n\r\nasync def main():\r\n    exchange1 = ccxt.async_support.hitbtc({\"enableRateLimit\": True})\r\n    exchange2 = ccxt.async_support.hitbtc({\"enableRateLimit\": True})\r\n    for i in range(0, 20):\r\n        await exchange1.throttle(exchange1.rateLimit)\r\n        await exchange2.throttle(exchange2.rateLimit)\r\n        print(\"Round done\")\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    asyncio.run(main())\r\n```",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/9880/comments",
    "author": "brandsimon",
    "comments": [
      {
        "user": "brandsimon",
        "created_at": "2021-08-26T09:40:38Z",
        "body": "The snippet works for binance, so I changed the rateLimit to 50 (binance has 50, hitbtc 1500).\r\nThis works, but instead of waiting 50ms, it waits 5 seconds."
      },
      {
        "user": "frosty00",
        "created_at": "2021-08-26T09:43:50Z",
        "body": "@brandsimon the usage is wrong it should be:\r\n\r\n```\r\nimport asyncio\r\nimport ccxt.async_support\r\n\r\n\r\nasync def main():\r\n    exchange1 = ccxt.async_support.hitbtc({\"enableRateLimit\": True})\r\n    exchange2 = ccxt.async_support.hitbtc({\"enableRateLimit\": True})\r\n    for i in range(0, 20):\r\n        await exchange1.throttle(1)\r\n        await exchange2.throttle(1)\r\n        print(\"Round done\")\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    asyncio.run(main())\r\n```"
      },
      {
        "user": "frosty00",
        "created_at": "2021-08-26T09:44:24Z",
        "body": "the argument exchange.rateLimit is deprecated now we have dynamic costs for calls in binance.js"
      },
      {
        "user": "kroitor",
        "created_at": "2021-08-26T09:44:25Z",
        "body": "@brandsimon the new version of `throttle()` accepts the call `cost` instead of `rateLimit`."
      },
      {
        "user": "kroitor",
        "created_at": "2021-08-26T09:48:10Z",
        "body": "```Python\r\nimport asyncio\r\nimport ccxt.async_support\r\n\r\nasync def main():\r\n    exchange1 = ccxt.async_support.hitbtc({\"enableRateLimit\": True})\r\n    exchange2 = ccxt.async_support.hitbtc({\"enableRateLimit\": True})\r\n    for i in range(0, 20):\r\n        await asyncio.gather(*[\r\n            exchange1.throttle(1),\r\n            exchange2.throttle(1),\r\n        ])\r\n        print(\"Round done\")\r\n\r\nif __name__ == \"__main__\":\r\n    asyncio.run(main())\r\n```\r\nThis snippet prints a line every 1.5 sec, according to hitbtc's rate limit setting."
      },
      {
        "user": "kroitor",
        "created_at": "2021-08-26T10:07:35Z",
        "body": "@brandsimon yes, moreover, enableRateLimit is true by default now."
      }
    ]
  },
  {
    "number": 9371,
    "title": "help authenticating to KuCoin Exchange using ccxtPro",
    "created_at": "2021-06-13T07:52:53Z",
    "closed_at": "2021-06-13T18:19:16Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/9371",
    "body": "Hello Guys, \r\n\r\ni tried to authenticate to Kucoin using ccxtPro but it doesn't work, can someone please correct what i'm doing wrong here ?\r\n\r\nhere is my code:\r\n\r\n```\r\nexchange_kucoin = ccxtpro.kucoin({\r\n    'apiKey': const.API_KEY,\r\n    'secret': const.API_SECRET,\r\n    'password': const.API_PASSPHRASE,\r\n    'enableRateLimit': True,\r\n    'headers': {\r\n        'KC-API-KEY': const.API_KEY,\r\n    }\r\n})\r\n```\r\ni have also tried this without the \"header\" but still the same issue\r\n\r\nbut when i try to run a function to get some informations about my account, i get this error: \r\n\r\n`kucoin KC-API-KEY not exists`\r\n\r\n\r\nthe ccxtpro version i'm using is: print(ccxtpro.__version__) ==> 0.7.19",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/9371/comments",
    "author": "korchix",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2021-06-13T12:46:20Z",
        "body": "@korchix have you tried recreating your API Key? If not, please, try with a fresh new keypair and let us know if that does not help."
      }
    ]
  },
  {
    "number": 9321,
    "title": "Transfer between Binance wallets return status, datetime and timestamp = None",
    "created_at": "2021-06-05T10:17:15Z",
    "closed_at": "2021-06-05T10:20:12Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/9321",
    "body": "Hello all,\r\n\r\nI noticed that transfer between Binance wallets return some missing information, please find an example:\r\n\r\n```\r\nb.transfer('USDT', 1, 'future', 'spot')\r\n\r\n{'info': {'tranId': '65052934028'},\r\n 'id': '65052934028',\r\n 'timestamp': None,\r\n 'datetime': None,\r\n 'currency': 'USDT',\r\n 'amount': 1,\r\n 'fromAccount': 'future',\r\n 'toAccount': 'spot',\r\n 'status': None}\r\n```\r\n\r\nAs you can see status, timestamp and datetime are set to None even when transfer is successful. It's a minor issue but it's useful to have these data in order to monitor transfers.\r\n\r\nBest,\r\nKinzowa\r\n\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/9321/comments",
    "author": "Kinzowa",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2021-06-05T10:20:12Z",
        "body": "Hi! The `info` structure contains the response from the exchange \"as is\", untouched: `'info': {'tranId': '65052934028'},` \u2190 there's no timestamp there, therefore it's not populated. This is documented throughout the Manual \u2013\u00a0not all exchanges will provide all the fields in all the structures. If you need a timestamp, you can just call `exchange.milliseconds()` or `exchange.iso8601(exchange.milliseconds())`. Hope that answers your question. Let us know if not."
      }
    ]
  },
  {
    "number": 9291,
    "title": "Bitvavo `watch_orders` with `newUpdates` not working",
    "created_at": "2021-05-30T12:56:01Z",
    "closed_at": "2021-05-31T11:36:02Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/9291",
    "body": "- OS: macOS 11.3.1\r\n- Programming Language version: 3.9.5\r\n- CCXT version: 1.50.66 (CCXT) / 0.7.10 (CCXT Pro)\r\n\r\n```\r\nbitvavo = ccxtpro.bitvavo({\"apiKey\": \"#####\", \"secret\": \"#####\", \"newUpdates\": True})\r\nawait bitvavo.authenticate()\r\nawait bitvavo.watch_orders('BTC/EUR')\r\n```\r\n\r\n```\r\n---------------------------------------------------------------------------\r\nAttributeError                            Traceback (most recent call last)\r\n<ipython-input-3-8cfabd3aa667> in <module>\r\n----> 1 await bitvavo.watch_orders('BTC/EUR')\r\n\r\n~/###/###/venv/lib/python3.9/site-packages/ccxtpro/bitvavo.py in watch_orders(self, symbol, since, limit, params)\r\n    384         orders = await self.watch(url, messageHash, request, subscriptionHash)\r\n    385         if self.newUpdates:\r\n--> 386             limit = orders.getLimit(symbol, limit)\r\n    387         return self.filter_by_symbol_since_limit(orders, symbol, since, limit, True)\r\n    388 \r\n\r\nAttributeError: 'list' object has no attribute 'getLimit'\r\n```",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/9291/comments",
    "author": "Matthias-Thul",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2021-05-31T05:04:48Z",
        "body": "I've just tried this snippet with new versions of both libs, and it works for me:\r\n\r\n```Python\r\nimport ccxtpro\r\nimport ccxt\r\nfrom asyncio import get_event_loop, gather\r\n\r\n\r\nprint('CCXT Version:', ccxt.__version__)\r\nprint('CCXT Pro Version:', ccxtpro.__version__)\r\n\r\n\r\nasync def watch_orders(exchange, symbol):\r\n    while True:\r\n        orders = await exchange.watch_orders(symbol)\r\n        now = exchange.iso8601(exchange.milliseconds())\r\n        for order in orders:\r\n            print(now, order['id'], order['symbol'], order['datetime'], order['status'])\r\n\r\n\r\nasync def create_and_cancel_orders(exchange, symbol):\r\n    for i in range(0, 10):\r\n        ticker = await exchange.fetch_ticker(symbol)\r\n        amount = 0.01\r\n        price = float(ticker['last']) * 0.7\r\n        order = await exchange.create_order(symbol, 'limit', 'buy', amount, price)\r\n        await exchange.sleep(5000)\r\n        order = await exchange.cancel_order(order['id'], symbol)\r\n        await exchange.sleep(5000)\r\n\r\n\r\nasync def main(id, symbol):\r\n    exchange = getattr(ccxtpro, id)({\r\n        'apiKey': 'YOUR_API_KEY',\r\n        'secret': 'YOUR_SECRET',\r\n        \"newUpdates\": True,\r\n    })\r\n    await exchange.load_markets()\r\n    # exchange.verbose = True\r\n    loops = [\r\n        watch_orders(exchange, symbol),\r\n        create_and_cancel_orders(exchange, symbol)\r\n    ]\r\n    await gather(*loops)\r\n    await exchange.close()\r\n\r\n\r\nloop = get_event_loop()\r\nloop.run_until_complete(main('bitvavo', 'ETH/EUR'))\r\n```\r\n\r\nIf that does not work for you, please paste your complete output and your complete code (without your keys)."
      }
    ]
  },
  {
    "number": 9207,
    "title": "FTX: Can't cancel opened Order / Can't get Order ID's of open Orders (PHP)",
    "created_at": "2021-05-18T20:15:36Z",
    "closed_at": "2021-05-18T20:33:44Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/9207",
    "body": "i can successfully create orders with :\r\n\r\n`$exchange->create_order($symbol, $type, $side, $amount, $price, $params);`\r\n```\r\nArray\r\n(\r\n    [info] => Array\r\n        (\r\n            [id] => 44022042\r\n            [market] => BTC-PERP\r\n            [future] => BTC-PERP\r\n            [side] => sell\r\n            [type] => take_profit\r\n            [orderPrice] => 48100.0\r\n            [triggerPrice] => 47000.0\r\n            [size] => 0.001\r\n            [status] => open\r\n            [createdAt] => 2021-05-18T20:09:03.654365+00:00\r\n            [triggeredAt] => \r\n            [orderId] => \r\n            [error] => \r\n            [reduceOnly] => \r\n            [trailValue] => \r\n            [trailStart] => \r\n            [cancelledAt] => \r\n            [cancelReason] => \r\n            [retryUntilFilled] => \r\n            [orderType] => limit\r\n        )\r\n\r\n    [id] => 44022042\r\n    [clientOrderId] => \r\n    [timestamp] => 1621368543654\r\n    [datetime] => 2021-05-18T20:09:03.654Z\r\n    [lastTradeTimestamp] => \r\n    [symbol] => BTC-PERP\r\n    [type] => take_profit\r\n    [timeInForce] => \r\n    [postOnly] => \r\n    [side] => sell\r\n    [price] => 47000\r\n    [stopPrice] => 47000\r\n    [amount] => 0.001\r\n    [cost] => \r\n    [average] => \r\n    [filled] => \r\n    [remaining] => \r\n    [status] => open\r\n    [fee] => \r\n    [trades] => \r\n)\r\n\r\n```\r\n\r\nbut if i want to close this order with\r\n`$exchange->cancel_order(44022042)`\r\n\r\n\r\ni get an error\r\n\r\n`ccxt\\OrderNotFound: ftx {\"success\":false,\"error\":\"Order not found\"}`\r\n\r\n\r\n\r\nalso \r\n\r\n`$exchange->fetch_open_orders() `returns an empty array even though i have open orders\r\n\r\n\r\n\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/9207/comments",
    "author": "hm291195",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2021-05-18T20:33:44Z",
        "body": "@hm291195 if you're canceling a conditional take_profit order, you have to add a `type` param override, otherwise it will attempt to cancel a regular order with that id instead of the conditional order:\r\n\r\n```PHP\r\n$exchange->cancel_order(44022042, null, array('type'=>'takeProfit'));\r\n```\r\n\r\nLet us know if that does not answer your question."
      },
      {
        "user": "hm291195",
        "created_at": "2021-05-18T20:39:51Z",
        "body": "ok this works.\r\n\r\nAnd regarding the second part - why does `$exchange->fetch_open_orders() `return an empty array even though i have open orders ? Is there also a param override neccessary ?\r\n\r\n\r\nLast but not least i just figured out another ambiguity:\r\n\r\nif i fetch my open positions with `$exchange->fetch_positions() `why does the array contain positions that are already closed ? Am i right, that the only way to find out my open positions is to check each key of the array if there is \"openSize\" which is then > 0 to find out if the position is still open or already closed ?"
      },
      {
        "user": "kroitor",
        "created_at": "2021-05-19T11:05:27Z",
        "body": "@hm291195 \r\n\r\n> And regarding the second part - why does $exchange->fetch_open_orders() return an empty array even though i have open orders ? Is there also a param override neccessary ?\r\n\r\nYes, you have to add a param override for conditionals: \r\n\r\n```PHP\r\n$since = null;\r\n$limit = null;\r\n$params = array('type'=>'takeProfit');\r\n$orders = $exchange->fetch_open_orders($symbol, $since, $limit, $params);\r\n```\r\n\r\n> Am i right, that the only way to find out my open positions is to check each key of the array if there is \"openSize\" which is then > 0 to find out if the position is still open or already closed ?\r\n\r\nYes, that is correct."
      }
    ]
  },
  {
    "number": 9188,
    "title": "What Time Does The Day Roll Over?",
    "created_at": "2021-05-16T09:57:11Z",
    "closed_at": "2021-05-16T10:07:26Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/9188",
    "body": "Quick question: When do daily 'candles' roll over in ccxt? I am pulling daily data on a US server and for my system I need to know when the date stamps roll over into the new day/date. My understanding thus far is that it happens at 0:00 GMT. \r\n\r\nIf correct then the roll over would be e.g. at 8:00pm in NYC, and 1:00am in London.\r\n\r\nCan you please confirm or correct?",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/9188/comments",
    "author": "mmehrle",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2021-05-16T10:07:26Z",
        "body": "Hi! Yes, all unified timestamps should be in UTC. Exchange-specific `info`s may have timestamps in other timezones, but CCXT converts them to UTC in the outer unified layer. If you find any inconsistencies, please let us know."
      },
      {
        "user": "mmehrle",
        "created_at": "2021-05-16T21:26:00Z",
        "body": "Follow up question. I'm setting up a cron job and my sys admin asked me if we are talking about UTC or GMT here. Because GMT accounts for DST while UTC does not. My 'guess' would be that exchanges use UTC but I just wanted to make sure.\r\n\r\nThanks in advance."
      }
    ]
  },
  {
    "number": 9103,
    "title": "exchange.timeframes['1d'] missing from ByBit",
    "created_at": "2021-05-01T10:27:21Z",
    "closed_at": "2021-05-01T19:44:12Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/9103",
    "body": "When i try using **exchange.timeframes['1d']** for ByBit exchange - i see this error: **[ExceptionsHandler] timeframe unit D is not supported**\r\n\r\n```typescript\r\n          for (const date of dates) {\r\n            await sleep(exchange.rateLimit); // milliseconds\r\n            const fData = await exchange.fetchOHLCV(\r\n              symbol,\r\n              exchange.timeframes['1d'],\r\n              exchange.parse8601(`${date}T00:00:00Z`),\r\n              1,\r\n            );\r\n```\r\nHow fix this problem, i need 1 day timeframe? I'm using last version of ccxt 1.49.21",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/9103/comments",
    "author": "wirwl",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2021-05-01T19:44:12Z",
        "body": "@wirwl you're sending `exchange.timeframes['1d']`, just send `'1d'` instead:\r\n\r\n```JavaScript\r\n            const fData = await exchange.fetchOHLCV(\r\n              symbol,\r\n              '1d', // \u2190-------------------------------------- HERE\r\n              exchange.parse8601(`${date}T00:00:00Z`),\r\n              1,\r\n            );\r\n```\r\n\r\nLet us know if that does not answer your question."
      }
    ]
  },
  {
    "number": 9046,
    "title": "Stale Price Feed from Binance USDT Futures & FTX",
    "created_at": "2021-04-22T08:03:42Z",
    "closed_at": "2021-05-04T23:30:02Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/9046",
    "body": "Hi Kroitor,\r\n\r\nI think I'm getting a stale/delayed price feed from Binance USDT Futures and FTX. I only need the Best Bid & Offer from each of the exchanges pushed in real-time (I don't need orderbooks). Sometimes the FTX price or the Binance price just stops updating. Is there anything in the code you can see that would be causing this?\r\n\r\nimport threading\r\nimport asyncio\r\nimport ccxtpro\r\nimport loggin_util\r\nfrom definitions.exchanges import Exchanges\r\nfrom definitions.trading_util import ConnectionState\r\nimport ccxtpro_exchanges\r\nimport definitions.app_values as apv\r\n\r\n\r\n# from principal import Principal\r\n\r\n\r\nclass DataFeedManager(threading.Thread):\r\n    def __init__(self, exchange: Exchanges, symbol_name: str, data_coin_command, print_info: bool,\r\n                 entry_delta: float, exit_delta: float, entry_size: float, _data_feed_stopped,\r\n                 _executing_methods_event, assigned_pair_id):\r\n        threading.Thread.__init__(self)\r\n        self.exchange = exchange\r\n        self.symbol_name = symbol_name\r\n        self.print_info = print_info\r\n        self.print_info = False  # for testing\r\n        self.bid = 0.0\r\n        self.ask = 0.0\r\n        self.entry_delta = entry_delta\r\n        self.exit_delta = exit_delta\r\n        self.entry_size = entry_size\r\n        self.logger = loggin_util.create_logger(__name__ + '_' + self.exchange.name + '_' +\r\n                                                self.symbol_name.replace('/', ''))\r\n        self.conn_state = ConnectionState.DISCONNECTED\r\n        self.data_coin_command = data_coin_command\r\n        self.data_feed_enabled = True\r\n        self.data_feed_stopped = _data_feed_stopped\r\n        self.executing_methods_event = _executing_methods_event\r\n        self.binance_pro = ccxtpro.binance({'enableRateLimit': True,\r\n                                            'options': {\r\n                                                'defaultType': 'future',\r\n                                            }})\r\n        self.ftx_pro = ccxtpro.ftx({'enableRateLimit': True})\r\n        self.assigned_pair_id = assigned_pair_id\r\n\r\n        # print(self.symbol_id.replace('/', ''))\r\n\r\n    async def get_tick(self):\r\n        exchange_switcher = {\r\n            Exchanges.binance: ccxtpro.binance({'enableRateLimit': True,\r\n                                                'apiKey': apv.binance_api_key,\r\n                                                'secret': apv.binance_secret_key,\r\n                                                'options': {\r\n                                                    'defaultType': 'future',\r\n                                                    'watchTicker': {\r\n                                                        'name': 'bookTicker'\r\n                                                    }\r\n                                                }}),\r\n            Exchanges.ftx: ccxtpro.ftx({'enableRateLimit': True}),\r\n        }\r\n        exchange = exchange_switcher.get(self.exchange)\r\n        while self.data_feed_stopped.wait():\r\n\r\n            if not self.data_feed_enabled:\r\n                print(\"Stopping Data Feed\")\r\n                self.data_feed_stopped.clear()\r\n                print(\"Data Feed Stopped? %s\" % self.data_feed_stopped)\r\n                break\r\n\r\n            if self.print_info: print(\"----------------------\")\r\n            if self.print_info: print(\"data_feed_enabled: %s\" % self.data_feed_enabled)\r\n            if self.print_info: print(exchange.id)\r\n            if self.print_info: print(\"Symbol: \", self.symbol_name)\r\n\r\n            try:\r\n                # order_book = await exchange.watch_order_book(self.symbol_name)\r\n                order_book = await exchange.watch_ticker(self.symbol_name)\r\n            except Exception as e:\r\n                self.conn_state = ConnectionState.DISCONNECTED\r\n                self.logger.error('Disconnected')\r\n                print(\"Exception: \", e)\r\n                continue\r\n            if self.conn_state == ConnectionState.DISCONNECTED:\r\n                self.logger.info('Connected')\r\n                self.conn_state = ConnectionState.CONNECTED\r\n\r\n            # self.bid = order_book['bids'][0][0] if len(order_book['bids']) > 0 else None\r\n            # self.ask = order_book['asks'][0][0] if len(order_book['asks']) > 0 else None\r\n            self.bid = order_book['bid'] if order_book['bid'] is not None else self.bid\r\n            self.ask = order_book['ask'] if order_book['ask'] is not None else self.ask\r\n            spread = (self.ask - self.bid) if (self.bid and self.ask) else None\r\n            mid = (self.bid + self.ask) / 2 if (self.bid and self.ask) else None\r\n            if self.print_info: print(\"bid: \", self.bid)\r\n            if self.print_info: print(\"ask: \", self.ask)\r\n            if self.print_info: print(\"spread: \", spread)\r\n            if self.print_info: print(\"mid: \", mid)\r\n            self.data_coin_command(self.symbol_name,\r\n                                   self.bid,\r\n                                   self.ask,\r\n                                   self.entry_delta,\r\n                                   self.exit_delta,\r\n                                   self.entry_size,\r\n                                   self.executing_methods_event,\r\n                                   self.assigned_pair_id)\r\n\r\n    def run(self):\r\n        asyncio.run(self.get_tick())",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/9046/comments",
    "author": "deceneucapital",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2021-04-22T08:17:36Z",
        "body": "Hi @deceneucapital !\r\n\r\nDo you have this issue with the most recent version of CCXT Pro + the following script:\r\n\r\n```Python\r\n# -*- coding: utf-8 -*-\r\n\r\nimport ccxtpro\r\nfrom asyncio import gather, get_event_loop\r\n\r\n\r\nasync def exchange_symbol_loop(exchange, symbol):\r\n    print('Starting the', exchange.id, 'symbol loop with', symbol)\r\n    while True:\r\n        try:\r\n            ticker = await exchange.watch_ticker(symbol)\r\n            now = exchange.milliseconds()\r\n            print(exchange.iso8601(now), exchange.id, symbol, ticker['bid'], ticker['ask'])\r\n        except Exception as e:\r\n            print(str(e))\r\n            # raise e  # uncomment to break all loops in case of an error in any one of them\r\n            break  # you can break just this one loop if it fails\r\n\r\n\r\nasync def exchange_loop(asyncio_loop, exchange_id, symbols):\r\n    print('Starting the', exchange_id, 'exchange loop with', symbols)\r\n    exchange = getattr(ccxtpro, exchange_id)({\r\n        'enableRateLimit': True,\r\n        'asyncio_loop': asyncio_loop,\r\n        'options': {\r\n            'defaultType': 'future',\r\n            'watchTicker': {\r\n                'name': 'bookTicker',\r\n            },\r\n        },\r\n    })\r\n    loops = [exchange_symbol_loop(exchange, symbol) for symbol in symbols]\r\n    await gather(*loops)\r\n    await exchange.close()\r\n\r\n\r\nasync def main(asyncio_loop):\r\n    exchanges = {\r\n        'ftx': ['BTC/USDT', 'ETH/BTC'],\r\n        'binance': ['BTC/USDT', 'ETH/BTC'],\r\n    }\r\n    loops = [exchange_loop(asyncio_loop, exchange_id, symbols) for exchange_id, symbols in exchanges.items()]\r\n    await gather(*loops)\r\n\r\n\r\nif __name__ == '__main__':\r\n    asyncio_loop = get_event_loop()\r\n    asyncio_loop.run_until_complete(main(asyncio_loop))\r\n```\r\n\r\nDoes it get stale?\r\n"
      }
    ]
  },
  {
    "number": 8921,
    "title": "Coinbasepro watch_orders() fails with TypeError: 'Unicode-objects must be encoded before hashing'",
    "created_at": "2021-04-10T05:03:12Z",
    "closed_at": "2021-04-10T08:26:42Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/8921",
    "body": "I'm having this problem only with coinbasepro and only in watch_orders(). It works with ftx, and both watch_orderbook and watch_orders work with coinbasepro. My keys and passphrase are stored as strings, and they are being converted to bytes at some point before reaching hmac()\r\n\r\n \r\n- OS: macOS Catalina\r\n- Programming Language version: Python 3.8.6\r\n- CCXT version :ccxt==1.45.74, ccxtpro==0.6.33\r\n-\r\n\r\n```\r\ndef listen(self, callback=(lambda x: None)):\r\n        loop = asyncio.get_event_loop()\r\n        loop.create_task(self.watch_orderbook(callback))\r\n        loop.create_task(self.watch_orders(callback))\r\n        loop.create_task(self.slowly_watch_balance())\r\n\r\n```\r\nI also modified the hmac method for some debugging output, which indicates the string and request are bytes\r\n```\r\n@staticmethod\r\n    def hmac(request, secret, algorithm=hashlib.sha256, digest='hex'):\r\n        print('SECRET IS ' + str(secret))\r\n        print('REQUEST IS ' + str(request))\r\n        print('ALGORITHM IS ' + str(algorithm))\r\n        h = hmac.new(secret, request, algorithm)\r\n        binary = h.digest()\r\n        if digest == 'hex':\r\n            return Exchange.binary_to_base16(binary)\r\n        elif digest == 'base64':\r\n            return Exchange.binary_to_base64(binary)\r\n        return binary\r\n```\r\n\r\n```\r\nSECRET IS b'\\xd3\\xe1!...omitted...x9a'\r\nREQUEST IS b'16...omitted...86GET/accounts'\r\nALGORITHM IS <built-in function openssl_sha256>\r\n```\r\n\r\nThe traceback for the error is:\r\n```\r\nTraceback (most recent call last):\r\n  File \"/Users/nnsk/Desktop/scrypto/addthistowrappers.py\", line 130, in watch_orders\r\n    self.orders = await self.client.watch_orders(symbol=self.symbol, limit=200)\r\n  File \"/usr/local/lib/python3.8/site-packages/ccxtpro/coinbasepro.py\", line 101, in watch_orders\r\n    authentication = self.authenticate()\r\n  File \"/usr/local/lib/python3.8/site-packages/ccxtpro/coinbasepro.py\", line 46, in authenticate\r\n    signature = self.hmac(payload, self.base64_to_binary(self.secret), hashlib.sha256, 'base64')\r\n  File \"/usr/local/lib/python3.8/site-packages/ccxt/base/exchange.py\", line 1112, in hmac\r\n    h = hmac.new(secret, request, algorithm)\r\n  File \"/usr/local/Cellar/python@3.8/3.8.6/Frameworks/Python.framework/Versions/3.8/lib/python3.8/hmac.py\", line 153, in new\r\n    return HMAC(key, msg, digestmod)\r\n  File \"/usr/local/Cellar/python@3.8/3.8.6/Frameworks/Python.framework/Versions/3.8/lib/python3.8/hmac.py\", line 88, in __init__\r\n    self.update(msg)\r\n  File \"/usr/local/Cellar/python@3.8/3.8.6/Frameworks/Python.framework/Versions/3.8/lib/python3.8/hmac.py\", line 96, in update\r\n    self.inner.update(msg)\r\nTypeError: Unicode-objects must be encoded before hashing\r\n```\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/8921/comments",
    "author": "nanaknihal",
    "comments": [
      {
        "user": "frosty00",
        "created_at": "2021-04-10T06:43:24Z",
        "body": "you need to update to the latest version of ccxtpro, this error has already been fixed"
      },
      {
        "user": "frosty00",
        "created_at": "2021-04-10T06:44:08Z",
        "body": "my current version is `0.6.47`"
      },
      {
        "user": "kroitor",
        "created_at": "2021-04-10T08:26:42Z",
        "body": "@nanaknihal please, let us know if you have the same issue with the most recent version of CCXT + CCXT Pro. Feel free to reopen it or just ask further questions if any."
      }
    ]
  },
  {
    "number": 8739,
    "title": "Is it safe to use prices from the orderdepths directly in regard of price precision",
    "created_at": "2021-03-28T20:10:02Z",
    "closed_at": "2021-03-28T20:11:39Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/8739",
    "body": "OS: Windows Server 2019 Datacenter\r\nProgramming Language version: Node.js 15.3.0\r\nCCXT version: 1.38.89\r\nExchange: All Exchanges\r\nMethod: precision and limits\r\n\r\nHello!\r\n\r\nI have a question about the precision when it comes to prices for a symbol when creating limit and marketorders.\r\n\r\nFor example we can get the orderbook like below:\r\n```\r\n(async () => {\r\nconst exchange = new ccxt.bitfinex({ enableRateLimit: true, agent, 'timeout': 10000 });\r\nconst orderbook = await exchange.fetchOrderBook(\"ETH/BTC\", 5);\r\nconsole.log(orderbook);\r\n})()\r\n```\r\nThis gives a structure like this with price and volume per orderdepth:\r\n```\r\n    [ 0.030365, 7.76077035 ],\r\n    [ 0.030366, 7 ],\r\n    [ 0.030368, 0.069 ],\r\n    [ 0.03037, 1.19718266 ],\r\n    [ 0.030376, 12 ]\r\n```\r\n\r\nMy question is how safe it would be to directly just use the price from any of the orderdepths when `createOrder(...)`\r\nWhat I mean, would it be safe to just take a price without using the `exchange.decimalToPrecision` to round it to correct precision.\r\n\r\nWould it be safe to just take the prices from the orderdepths from all exchanges or should one anyway use `exchange.decimalToPrecision` function for safety?\r\n\r\nThank you!\r\n\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/8739/comments",
    "author": "jackpotcityco",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2021-03-28T20:11:39Z",
        "body": "@jackpotcityco Hi! It should be safe to use those prices directly, CCXT will format those values according to exchange precision before sending them out. Let us know if you run into any issues with that."
      }
    ]
  },
  {
    "number": 8515,
    "title": "Currencies precision returning None [Binance, BitMEX]",
    "created_at": "2021-02-24T19:55:08Z",
    "closed_at": "2021-02-24T20:10:43Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/8515",
    "body": "- OS: Linux Ubuntu 18.04 LTS\r\n- Programming Language version: Python 3.9.1\r\n- CCXT version: 1.42.29\r\n\r\nWhen calling for the loaded currencies, the precision is returning None;\r\n```\r\nself._client.currencies.items()\r\n```\r\n\r\n```\r\n{'id': 'AAVE', 'numericId': None, 'code': 'AAVE', 'precision': None}\r\n```\r\n\r\nI think this started from around  1.42.18\r\nTested on Binance spot and BitMEX\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/8515/comments",
    "author": "cjdsellers",
    "comments": [
      {
        "user": "cjdsellers",
        "created_at": "2021-02-24T19:57:22Z",
        "body": "When running 1.42.18\r\n\r\n```\r\n{'id': 'AAVE', 'numericId': None, 'code': 'AAVE', 'precision': 8}\r\n```"
      },
      {
        "user": "kroitor",
        "created_at": "2021-02-24T20:02:07Z",
        "body": "@cjdsellers please, check with the most recent version:\r\n\r\n```shell\r\n~/ccxt $ python3 examples/py/cli.py binance currency AAVE\r\nPython v3.8.2\r\nCCXT v1.42.29\r\n{'code': 'AAVE', 'id': 'AAVE', 'numericId': None, 'precision': 8}\r\n```\r\n\r\n```Python\r\nimport ccxt\r\nprint('CCXT Version:', ccxt.__version__)\r\nexchange = ccxt.binance({'enableRateLimit': True})\r\nmarkets = exchange.load_markets()\r\ncurrency = exchange.currency('AAVE')\r\nprint(currency)\r\n```"
      },
      {
        "user": "cjdsellers",
        "created_at": "2021-02-24T20:03:56Z",
        "body": "Could be something in my code because I have a similar script to the above and thats working.\r\n\r\nShould a precision ever return None though? Below is latest for BitMEX\r\n\r\n```\r\n    \"TRX\": {\r\n        \"code\": \"TRX\",\r\n        \"id\": \"TRX\",\r\n        \"numericId\": null,\r\n        \"precision\": 1.0\r\n    },\r\n    \"UNI\": {\r\n        \"code\": \"UNI\",\r\n        \"id\": \"UNI\",\r\n        \"numericId\": null,\r\n        \"precision\": null\r\n    },\r\n    \"USD\": {\r\n        \"code\": \"USD\",\r\n        \"id\": \"USD\",\r\n        \"numericId\": null,\r\n        \"precision\": 0.01\r\n    },\r\n```"
      },
      {
        "user": "kroitor",
        "created_at": "2021-02-24T20:09:09Z",
        "body": "@cjdsellers that is possible, if there's no active market with the AAVE currency or the UNI currency to determine precision from there."
      },
      {
        "user": "cjdsellers",
        "created_at": "2021-02-24T20:09:37Z",
        "body": "I mean for `UNI` as above"
      },
      {
        "user": "kroitor",
        "created_at": "2021-02-24T20:09:52Z",
        "body": "@cjdsellers it's the same for UNI."
      }
    ]
  },
  {
    "number": 8503,
    "title": "Error 'finance' object has no attribute 'amount_to_lots'",
    "created_at": "2021-02-22T19:18:15Z",
    "closed_at": "2021-02-22T19:19:41Z",
    "labels": [
      "duplicate",
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/8503",
    "body": "- OS: running in docker file using image `python:3`\r\n- Programming Language version: running in docker file using image `python:3`\r\n- CCXT version: 1.42.18\r\n\r\n```\r\n def place_order(self, order, ticker):\r\n        try:\r\n            # load order info\r\n            symbol = order.symbol\r\n            bid, ask = ticker['bid'], ticker['ask']\r\n            buy = order.buy  # boolean representing buy/sell\r\n\r\n            exchange = load_exchange(order.exchange)\r\n            if buy:\r\n                if order.exchange == 'binance':\r\n                    price = float(order.buy_max)\r\n                elif order.exchange == 'bittrex':\r\n                    price = exchange.amount_to_precision(ask * 1.05)\r\n                order.amount = self.config.btc / price\r\n            else:  # sell\r\n                price = bid\r\n                revenue = order.amount * price\r\n                revenue -= order.amount * order.bought_at\r\n                logging.info(\"bought at: {0} - sold at {1}\".format(order.bought_at, price))\r\n                logging.info(\"total revenue of order: {0}\".format(revenue))\r\n\r\n            logging.info('amount: {0}'.format(order.amount))\r\n            amount = exchange.amount_to_lots(symbol, order.amount)\r\n            logging.info('amount(lots): {0}'.format(amount))\r\n            self.create_order_on_market(buy, order.exchange, symbol, price, amount)\r\n        except Exception as e:\r\n            logging.error(e)\r\n            self.pushover.send_pushover(\r\n                \"{0} order failed for {1} on {2} with error {3}\".format(\r\n                    'Buy' if buy else 'Sell', order.coin, order.exchange, e\r\n                )\r\n            )\r\n```\r\n```\r\n2021-02-22T19:06:02.159814831Z ERROR:root:'binance' object has no attribute 'amount_to_lots'\r\n```\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/8503/comments",
    "author": "dantheman0207",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2021-02-22T19:19:40Z",
        "body": "@dantheman0207 change `amount_to_lots` \u2192\u00a0`amount_to_precision` in your code. Let us know if that does not help."
      }
    ]
  },
  {
    "number": 8492,
    "title": "pip install ccxt failed => error: command 'arm-linux-gnueabihf-gcc' failed with exit status 1",
    "created_at": "2021-02-20T21:55:11Z",
    "closed_at": "2021-02-20T22:20:10Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/8492",
    "body": "I tried to install ccxt on Ubuntu 20.10 (GNU/Linux 5.8.0-1013-raspi armv7l) and go this error:\r\n\r\n```\r\nERROR: Command errored out with exit status 1:\r\n     command: /usr/bin/python3 -c 'import sys, setuptools, tokenize; sys.argv[0] = '\"'\"'/tmp/pip-install-wptrvtsv/pycares/setup.py'\"'\"'; __file__='\"'\"'/tmp/pip-install-wptrvtsv/pycares/setup.py'\"'\"';f=getattr(tokenize, '\"'\"'open'\"'\"', open)(__file__);code=f.read().replace('\"'\"'\\r\\n'\"'\"', '\"'\"'\\n'\"'\"');f.close();exec(compile(code, __file__, '\"'\"'exec'\"'\"'))' egg_info --egg-base /tmp/pip-pip-egg-info-6eg7h048\r\n         cwd: /tmp/pip-install-wptrvtsv/pycares/\r\n    Complete output (73 lines):\r\n      ERROR: Command errored out with exit status 1:\r\n       command: /usr/bin/python3 -u -c 'import sys, setuptools, tokenize; sys.argv[0] = '\"'\"'/tmp/pip-wheel-9vn7c6c_/cffi/setup.py'\"'\"'; __file__='\"'\"'/tmp/pip-wheel-9vn7c6c_/cffi/setup.py'\"'\"';f=getattr(tokenize, '\"'\"'open'\"'\"', open)(__file__);code=f.read().replace('\"'\"'\\r\\n'\"'\"', '\"'\"'\\n'\"'\"');f.close();exec(compile(code, __file__, '\"'\"'exec'\"'\"'))' bdist_wheel -d /tmp/pip-wheel-iv1tnu4e\r\n           cwd: /tmp/pip-wheel-9vn7c6c_/cffi/\r\n      Complete output (36 lines):\r\n      running bdist_wheel\r\n      running build\r\n      running build_py\r\n      creating build\r\n      creating build/lib.linux-armv7l-3.8\r\n      creating build/lib.linux-armv7l-3.8/cffi\r\n      copying cffi/backend_ctypes.py -> build/lib.linux-armv7l-3.8/cffi\r\n      copying cffi/recompiler.py -> build/lib.linux-armv7l-3.8/cffi\r\n      copying cffi/cparser.py -> build/lib.linux-armv7l-3.8/cffi\r\n      copying cffi/ffiplatform.py -> build/lib.linux-armv7l-3.8/cffi\r\n      copying cffi/model.py -> build/lib.linux-armv7l-3.8/cffi\r\n      copying cffi/vengine_gen.py -> build/lib.linux-armv7l-3.8/cffi\r\n      copying cffi/error.py -> build/lib.linux-armv7l-3.8/cffi\r\n      copying cffi/verifier.py -> build/lib.linux-armv7l-3.8/cffi\r\n      copying cffi/lock.py -> build/lib.linux-armv7l-3.8/cffi\r\n      copying cffi/api.py -> build/lib.linux-armv7l-3.8/cffi\r\n      copying cffi/cffi_opcode.py -> build/lib.linux-armv7l-3.8/cffi\r\n      copying cffi/__init__.py -> build/lib.linux-armv7l-3.8/cffi\r\n      copying cffi/setuptools_ext.py -> build/lib.linux-armv7l-3.8/cffi\r\n      copying cffi/vengine_cpy.py -> build/lib.linux-armv7l-3.8/cffi\r\n      copying cffi/commontypes.py -> build/lib.linux-armv7l-3.8/cffi\r\n      copying cffi/pkgconfig.py -> build/lib.linux-armv7l-3.8/cffi\r\n      copying cffi/_cffi_include.h -> build/lib.linux-armv7l-3.8/cffi\r\n      copying cffi/parse_c_type.h -> build/lib.linux-armv7l-3.8/cffi\r\n      copying cffi/_embedding.h -> build/lib.linux-armv7l-3.8/cffi\r\n      copying cffi/_cffi_errors.h -> build/lib.linux-armv7l-3.8/cffi\r\n      running build_ext\r\n      building '_cffi_backend' extension\r\n      creating build/temp.linux-armv7l-3.8\r\n      creating build/temp.linux-armv7l-3.8/c\r\n      arm-linux-gnueabihf-gcc -pthread -Wno-unused-result -Wsign-compare -DNDEBUG -g -fwrapv -O2 -Wall -g -fstack-protector-strong -Wformat -Werror=format-security -g -fwrapv -O2 -g -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -fPIC -DUSE__THREAD -DHAVE_SYNC_SYNCHRONIZE -I/usr/include/ffi -I/usr/include/libffi -I/usr/include/python3.8 -c c/_cffi_backend.c -o build/temp.linux-armv7l-3.8/c/_cffi_backend.o\r\n      c/_cffi_backend.c:15:10: fatal error: ffi.h: No such file or directory\r\n         15 | #include <ffi.h>\r\n            |          ^~~~~~~\r\n      compilation terminated.\r\n      error: command 'arm-linux-gnueabihf-gcc' failed with exit status 1\r\n      ----------------------------------------\r\n      ERROR: Failed building wheel for cffi\r\n    ERROR: Failed to build one or more wheels\r\n    Traceback (most recent call last):\r\n      File \"/usr/lib/python3/dist-packages/setuptools/installer.py\", line 128, in fetch_build_egg\r\n        subprocess.check_call(cmd)\r\n      File \"/usr/lib/python3.8/subprocess.py\", line 364, in check_call\r\n        raise CalledProcessError(retcode, cmd)\r\n    subprocess.CalledProcessError: Command '['/usr/bin/python3', '-m', 'pip', '--disable-pip-version-check', 'wheel', '--no-deps', '-w', '/tmp/tmpja9grf0o', '--quiet', 'cffi>=1.5.0']' returned non-zero exit status 1.\r\n    \r\n    The above exception was the direct cause of the following exception:\r\n    \r\n    Traceback (most recent call last):\r\n      File \"<string>\", line 1, in <module>\r\n      File \"/tmp/pip-install-wptrvtsv/pycares/setup.py\", line 15, in <module>\r\n        setup(name             = 'pycares',\r\n      File \"/usr/lib/python3/dist-packages/setuptools/__init__.py\", line 162, in setup\r\n        _install_setup_requires(attrs)\r\n      File \"/usr/lib/python3/dist-packages/setuptools/__init__.py\", line 157, in _install_setup_requires\r\n        dist.fetch_build_eggs(dist.setup_requires)\r\n      File \"/usr/lib/python3/dist-packages/setuptools/dist.py\", line 699, in fetch_build_eggs\r\n        resolved_dists = pkg_resources.working_set.resolve(\r\n      File \"/usr/lib/python3/dist-packages/pkg_resources/__init__.py\", line 779, in resolve\r\n        dist = best[req.key] = env.best_match(\r\n      File \"/usr/lib/python3/dist-packages/pkg_resources/__init__.py\", line 1064, in best_match\r\n        return self.obtain(req, installer)\r\n      File \"/usr/lib/python3/dist-packages/pkg_resources/__init__.py\", line 1076, in obtain\r\n        return installer(requirement)\r\n      File \"/usr/lib/python3/dist-packages/setuptools/dist.py\", line 758, in fetch_build_egg\r\n        return fetch_build_egg(self, req)\r\n      File \"/usr/lib/python3/dist-packages/setuptools/installer.py\", line 130, in fetch_build_egg\r\n        raise DistutilsError(str(e)) from e\r\n    distutils.errors.DistutilsError: Command '['/usr/bin/python3', '-m', 'pip', '--disable-pip-version-check', 'wheel', '--no-deps', '-w', '/tmp/tmpja9grf0o', '--quiet', 'cffi>=1.5.0']' returned non-zero exit status 1.\r\n    ----------------------------------------\r\nERROR: Command errored out with exit status 1: python setup.py egg_info Check the logs for full command output.\r\n```",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/8492/comments",
    "author": "theMoe",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2021-02-20T21:58:45Z",
        "body": "Try `apt install libffi-dev` or `sudo apt install libffi-dev` and then retry to install ccxt."
      }
    ]
  },
  {
    "number": 8379,
    "title": "Issue with timestamp parse of data feed needs help",
    "created_at": "2021-02-02T05:15:59Z",
    "closed_at": "2021-02-02T07:42:28Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/8379",
    "body": "Hi,\r\nI have some problems to read the timestamp from the datafeed download from CCXT. No matter what I tried, it can't parse the datetime info.\r\n\r\nPandas code:\r\n\r\n> dataframe = pandas.read_csv(\r\n        datapath,\r\n        skiprows=1,\r\n        header=1,\r\n        date_parser=parsedate,\r\n        parse_dates=True,\r\n        index_col=0,\r\n    )\r\n\r\n\r\n\r\ndata feed format:\r\n>  Timestamp,Open,High,Low,Close,Volume\r\n    1611658800000,32247.2,32249.98,32105.36,32139.29,616.047753\r\n    1611659700000,32139.29,32186.61,31807.19,31968.65,804.456726\r\n    1611660600000,31968.65,32048.88,31733.0,32040.8,680.101376\r\n  \r\nFirstly, pandas default date parser couldn't process it and returned error\r\n```\r\n  dt = tstamp.to_pydatetime()\r\nAttributeError: 'numpy.int64' object has no attribute 'to_pydatetime'\r\n```\r\n\r\nSecondly I defined a parser function but returned error :\r\n```\r\nValueError: year 53041 is out of range\r\n```\r\n\r\n parser function:\r\n\r\n>  def parsedate(timestamp):\r\n    if type(timestamp) is str: timestamp = int(timestamp)  # put up with timestamp being in string format\r\n    if timestamp > 1e10: timestamp // 1000 # put up with timestamp being in microseconds\r\n    return datetime.utcfromtimestamp(float(timestamp)).replace(tzinfo=tz.tzutc())\r\n\r\n\r\n- OS: Mac\r\n- Programming Language version: python3\r\n- CCXT version: newest\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/8379/comments",
    "author": "lifengmds",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2021-02-02T07:42:28Z",
        "body": "Hi!\r\n\r\nChange your date-parsing to convert milliseconds to datetime:\r\n\r\n```Python\r\ndef parsedate(timestamp):\r\n    return datetime.utcfromtimestamp(timestamp / 1000)\r\n```\r\n\r\nLet us know if that does not help."
      }
    ]
  },
  {
    "number": 8374,
    "title": "'ccxt' has no attribute ...",
    "created_at": "2021-01-31T14:47:44Z",
    "closed_at": "2021-01-31T14:58:16Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/8374",
    "body": "Something wrong, just installed ccxt and tried demo code to print ccxt.version or ccxt.exchanges, but doesn't work\r\n\r\n- OS:\r\n- Programming Language version: python 3.9.1\r\n- CCXT version: ccxt-1.41.31\r\n\r\n```\r\nimport ccxt\r\nprint(ccxt.exchanges) # print a list of all available exchange classes\r\n```\r\n\r\n```\r\nAttributeError: partially initialized module 'ccxt' has no attribute 'version' (most likely due to a circular import)\r\n```\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/8374/comments",
    "author": "lifengmds",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2021-01-31T14:49:11Z",
        "body": "@lifengmds do you have a filename `ccxt.py` in your project/folder? (that will cause conflicts like the above)"
      },
      {
        "user": "lifengmds",
        "created_at": "2021-01-31T14:58:00Z",
        "body": "> @lifengmds do you have a filename `ccxt.py` in your project/folder? (that will cause conflicts like the above)\r\n\r\noh, yes! that's why!!"
      },
      {
        "user": "lifengmds",
        "created_at": "2021-01-31T15:06:12Z",
        "body": "> @lifengmds do you have a filename `ccxt.py` in your project/folder? (that will cause conflicts like the above)\r\n\r\nI rename the file , and it's still the same error"
      },
      {
        "user": "kroitor",
        "created_at": "2021-01-31T15:06:52Z",
        "body": "@lifengmds how do you install it?"
      },
      {
        "user": "lifengmds",
        "created_at": "2021-01-31T15:08:04Z",
        "body": "> @lifengmds how do you install it?\r\n\r\npip3 install ccxt\r\n\r\nRequirement already satisfied: ccxt in /Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages (1.41.31)\r\nRequirement already satisfied: setuptools>=38.5.1 in /Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages (from ccxt) (49.2.1)\r\nRequirement already satisfied: yarl==1.1.0 in /Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages (from ccxt) (1.1.0)\r\nRequirement already satisfied: requests>=2.18.4 in /Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages (from ccxt) (2.25.1)\r\nRequirement already satisfied: certifi>=2018.1.18 in /Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages (from ccxt) (2020.12.5)\r\nRequirement already satisfied: aiodns<2.1,>=1.1.1 in /Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages (from ccxt) (2.0.0)\r\nRequirement already satisfied: cryptography>=2.6.1 in /Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages (from ccxt) (3.3.1)\r\nRequirement already satisfied: aiohttp<3.8,>=3.7.2 in /Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages (from ccxt) (3.7.3)\r\nRequirement already satisfied: multidict>=4.0 in /Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages (from yarl==1.1.0->ccxt) (5.1.0)\r\nRequirement already satisfied: idna>=2.0 in /Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages (from yarl==1.1.0->ccxt) (2.10)\r\nRequirement already satisfied: pycares>=3.0.0 in /Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages (from aiodns<2.1,>=1.1.1->ccxt) (3.1.1)\r\nRequirement already satisfied: async-timeout<4.0,>=3.0 in /Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages (from aiohttp<3.8,>=3.7.2->ccxt) (3.0.1)\r\nRequirement already satisfied: typing-extensions>=3.6.5 in /Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages (from aiohttp<3.8,>=3.7.2->ccxt) (3.7.4.3)\r\nRequirement already satisfied: chardet<4.0,>=2.0 in /Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages (from aiohttp<3.8,>=3.7.2->ccxt) (3.0.4)\r\nRequirement already satisfied: attrs>=17.3.0 in /Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages (from aiohttp<3.8,>=3.7.2->ccxt) (20.3.0)\r\nRequirement already satisfied: cffi>=1.12 in /Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages (from cryptography>=2.6.1->ccxt) (1.14.4)\r\nRequirement already satisfied: six>=1.4.1 in /Users/fng/Library/Python/3.9/lib/python/site-packages (from cryptography>=2.6.1->ccxt) (1.15.0)\r\nRequirement already satisfied: pycparser in /Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages (from cffi>=1.12->cryptography>=2.6.1->ccxt) (2.20)\r\nRequirement already satisfied: urllib3<1.27,>=1.21.1 in /Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages (from requests>=2.18.4->ccxt) (1.26.2)"
      },
      {
        "user": "kroitor",
        "created_at": "2021-01-31T15:10:17Z",
        "body": "@lifengmds what's the command you use to test it? What do you see if you run `ls -alh` in the same working directory?"
      },
      {
        "user": "kroitor",
        "created_at": "2021-01-31T15:12:03Z",
        "body": "@lifengmds try this short snippet (run `python3` and copypaste the snippet below):\r\n\r\n```Python\r\nimport ccxt\r\nprint('CCXT Version:', ccxt.__version__)\r\n```"
      },
      {
        "user": "kroitor",
        "created_at": "2021-01-31T15:22:22Z",
        "body": "@lifengmds this should work as well as the rest of it:\r\n\r\n```Python\r\nimport ccxt\r\nprint(ccxt.exchanges)\r\n```"
      }
    ]
  },
  {
    "number": 8366,
    "title": "Missing symbols on Binance",
    "created_at": "2021-01-29T17:10:43Z",
    "closed_at": "2021-01-29T17:38:52Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/8366",
    "body": "Hi there,\r\nthere seems to be missing symbols on Binance, specifically running `[s for s in exchange.symbols if 'BTC' in s]` in python returns only `['BTC/BUSD', 'BTC/USDT']`. The same holds for `[s for s in exchange.markets.keys() if 'BTC' in s]`. Other exchanges seem to be ok.\r\n\r\nccxt version: 1.41.19\r\npython: 3.8.7\r\nos: win 10",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/8366/comments",
    "author": "LukasUlrych",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2021-01-29T17:19:25Z",
        "body": "@LukasUlrych hi! Which specific market/symbol is missing?"
      },
      {
        "user": "LukasUlrych",
        "created_at": "2021-01-29T17:27:14Z",
        "body": "Well, `ADA/BTC`, `ETH/BTC`, `LTC/BTC` etc., pretty much any altcoin vs. BTC. I can see only USDT or BUSD pairs."
      },
      {
        "user": "LukasUlrych",
        "created_at": "2021-01-29T17:28:52Z",
        "body": "@kroitor I am not sure whether this is only local issue or not. I tried going back to version 1.41.10 and the symbols are all there. I noticed this after update today."
      },
      {
        "user": "kroitor",
        "created_at": "2021-01-29T17:31:09Z",
        "body": "@LukasUlrych always use the most recent version and make sure it's the most recent number by printing it in runtime (don't trust the pip output). Let me know if this does not help:\r\n\r\n```Python\r\nimport ccxt\r\nfrom pprint import pprint\r\nprint('CCXT Version:', ccxt.__version__)\r\nexchange = ccxt.binance({\r\n    'enableRateLimit': True,\r\n    'options': {'defaultType':'spot'},  # spot is the default\r\n})\r\nmarkets = exchange.load_markets()\r\npprint(exchange.symbols)\r\n```\r\n\r\n```Python\r\nimport ccxt\r\nfrom pprint import pprint\r\nprint('CCXT Version:', ccxt.__version__)\r\nexchange = ccxt.binance({\r\n    'enableRateLimit': True,\r\n    'options': {'defaultType':'future'},\r\n})\r\nmarkets = exchange.load_markets()\r\npprint(exchange.symbols)\r\n```\r\n\r\n```Python\r\nimport ccxt\r\nfrom pprint import pprint\r\nprint('CCXT Version:', ccxt.__version__)\r\nexchange = ccxt.binance({\r\n    'enableRateLimit': True,\r\n    'options': {'defaultType':'delivery'},\r\n})\r\nmarkets = exchange.load_markets()\r\npprint(exchange.symbols)\r\n```\r\n\r\n"
      },
      {
        "user": "LukasUlrych",
        "created_at": "2021-01-29T17:37:05Z",
        "body": "@kroitor Thank you, it helped! The issue seems to be that running just \r\n```\r\nexchange = ccxt.binance({\r\n    'enableRateLimit': True\r\n})\r\n```\r\ndefaults to defaultType = 'future' not defaultType = 'spot'."
      }
    ]
  },
  {
    "number": 8339,
    "title": "Inconsistent symbol names for Binance Futures",
    "created_at": "2021-01-24T17:00:22Z",
    "closed_at": "2021-01-25T20:58:26Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/8339",
    "body": "\r\n- OS: Linux\r\n- Programming Language version: Python 3.8.6 and Python 3.8.5\r\n- CCXT version: 1.40.83\r\n- \r\nCode:\r\n```\r\nexchange.load_markets()\r\nsymbols = exchange.symbols\r\nprint(symbols)\r\n```\r\nIn my workstation it gives: \r\n```\r\n['1INCHUSDT', 'AAVEUSDT', 'ADAUSDT', 'AKROUSDT', 'ALGOUSDT', 'ALPHAUSDT', 'ATOMUSDT', 'AVAXUSDT', 'AXSUSDT', 'BALUSDT', 'BANDUSDT', 'BATUSDT', 'BCHUSDT', 'BELUSDT', 'BLZUSDT', 'BNBUSDT', 'BTCBUSD', 'BTCUSDT', 'BZRXUSDT', 'CHZUSDT', 'COMPUSDT', 'CRVUSDT', 'CTKUSDT', 'CVCUSDT', 'DASHUSDT', 'DEFIUSDT', 'DOGEUSDT', 'DOTECOUSDT', 'DOTUSDT', 'EGLDUSDT', 'ENJUSDT', 'EOSUSDT', 'ETCUSDT', 'ETHUSDT', 'FILUSDT', 'FLMUSDT', 'FTMUSDT', 'GRTUSDT', 'HNTUSDT', 'ICXUSDT', 'IOSTUSDT', 'IOTAUSDT', 'KAVAUSDT', 'KNCUSDT', 'KSMUSDT', 'LINKUSDT', 'LRCUSDT', 'LTCUSDT', 'MATICUSDT', 'MKRUSDT', 'NEARUSDT', 'NEOUSDT', 'OCEANUSDT', 'OMGUSDT', 'ONTUSDT', 'QTUMUSDT', 'RENUSDT', 'RLCUSDT', 'RSRUSDT', 'RUNEUSDT', 'SKLUSDT', 'SNXUSDT', 'SOLUSDT', 'SRMUSDT', 'STORJUSDT', 'SUSHIUSDT', 'SXPUSDT', 'THETAUSDT', 'TOMOUSDT', 'TRBUSDT', 'TRXUSDT', 'UNIUSDT', 'VETUSDT', 'WAVESUSDT', 'XLMUSDT', 'XMRUSDT', 'XRPUSDT', 'XTZUSDT', 'YFIIUSDT', 'YFIUSDT', 'ZECUSDT', 'ZENUSDT', 'ZILUSDT', 'ZRXUSDT']\r\n\r\n```\r\nBut in the server (with same ccxt version but python 3.8.5) it gives:\r\n\r\n```\r\n['1INCH/USDT', 'AAVE/USDT', 'ADA/USDT', 'AKRO/USDT', 'ALGO/USDT', 'ALPHA/USDT', 'ATOM/USDT', 'AVAX/USDT', 'AXS/USDT', 'BAL/USDT', 'BAND/USDT', 'BAT/USDT', 'BCH/USDT', 'BEL/USDT', 'BLZ/USDT', 'BNB/USDT', 'BTC/BUSD', 'BTC/USDT', 'BZRX/USDT', 'CHZ/USDT', 'COMP/USDT', 'CRV/USDT', 'CTK/USDT', 'CVC/USDT', 'DASH/USDT', 'DEFI/USDT', 'DOGE/USDT', 'DOT/USDT', 'DOTECO/USDT', 'EGLD/USDT', 'ENJ/USDT', 'EOS/USDT', 'ETC/USDT', 'ETH/USDT', 'FIL/USDT', 'FLM/USDT', 'FTM/USDT', 'GRT/USDT', 'HNT/USDT', 'ICX/USDT', 'IOST/USDT', 'IOTA/USDT', 'KAVA/USDT', 'KNC/USDT', 'KSM/USDT', 'LINK/USDT', 'LRC/USDT', 'LTC/USDT', 'MATIC/USDT', 'MKR/USDT', 'NEAR/USDT', 'NEO/USDT', 'OCEAN/USDT', 'OMG/USDT', 'ONT/USDT', 'QTUM/USDT', 'REN/USDT', 'RLC/USDT', 'RSR/USDT', 'RUNE/USDT', 'SKL/USDT', 'SNX/USDT', 'SOL/USDT', 'SRM/USDT', 'STORJ/USDT', 'SUSHI/USDT', 'SXP/USDT', 'THETA/USDT', 'TOMO/USDT', 'TRB/USDT', 'TRX/USDT', 'UNI/USDT', 'VET/USDT', 'WAVES/USDT', 'XLM/USDT', 'XMR/USDT', 'XRP/USDT', 'XTZ/USDT', 'YFI/USDT', 'YFII/USDT', 'ZEC/USDT', 'ZEN/USDT', 'ZIL/USDT', 'ZRX/USDT']\r\n\r\n```\r\nThis is currently breaking my deployment, any idea how to fix?\r\n\r\nEdit:\r\n\r\nAlso on one place it's saying symbol is BTC/USDT and on another place it's saying the symbol is BTCUSDT:\r\n\r\n```\r\n'id': 'BTCUSDT',\r\n\t\t'lowercaseId': 'btcusdt',\r\n\t\t'symbol': 'BTC/USDT',\r\n\t\t'base': 'BTC',\r\n\t\t'quote': 'USDT',\r\n\t\t'baseId': 'BTC',\r\n\t\t'quoteId': 'USDT',\r\n\t\t'info': {\r\n\t\t\t'symbol': 'BTCUSDT',\r\n...\r\n\r\n```",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/8339/comments",
    "author": "projenix",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2021-01-24T18:19:21Z",
        "body": "Hi!\r\n\r\n> This is currently breaking my deployment, any idea how to fix?\r\n\r\nRun this on both of your machines and paste your runtime versions here please:\r\n\r\n```Python\r\nimport ccxt\r\nprint('CCXT Version:', ccxt.__version__)\r\n```\r\n\r\n"
      },
      {
        "user": "projenix",
        "created_at": "2021-01-25T20:22:58Z",
        "body": "Hey your intuition was correct!\r\n\r\nOn the workstation I've got version: 1.35.72\r\n\r\nWhereas on the server I've got version: 1.40.83\r\n\r\nSo I assume there was a change in symbol notation in CCXT, right? so is that change stable now, should I upgrade and stick to \"AAA/BBB\" notation from now on in all code?\r\n\r\nThanks a lot for your help,"
      },
      {
        "user": "kroitor",
        "created_at": "2021-01-25T20:58:26Z",
        "body": "@projenix \r\n\r\n> So I assume there was a change in symbol notation in CCXT, right? \r\n\r\nYes, Binance has updated their API recently.\r\n\r\n> so is that change stable now, should I upgrade and stick to \"AAA/BBB\" notation from now on in all code?\r\n\r\nThe unification of futures is a work in progress, so it may be subject to change, but we will of course do our best to avoid breaking changes, or will announce them beforehand.\r\n\r\nLet us know if that does not answer your question. Feel free to reopen it if needed or just ask further questions if any."
      }
    ]
  },
  {
    "number": 8310,
    "title": "Precision in markets where the buy order is given in quote currency",
    "created_at": "2021-01-19T13:50:26Z",
    "closed_at": "2021-01-19T13:54:13Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/8310",
    "body": "Hello,\r\n\r\nI have a question regarding the market precision dictionary in exchanges where the buy order amount must be provided in quote currency. \r\n\r\nEven if the buy amount must be provided in quote currency, the precision dictionary of these markets does not include the 'cost' key, which is basically the amount in quote currency. They only provide the 'amount' (the amount in base currency) and 'price' keys. Therefore, I do not understand which one should I pick (or transform) to check the precision of the market in quote currency.\r\n\r\nThis problem does not exist in exchanges where every (buy and sell) amount must be provided in base currency as the precision dictionary does include the 'amount' key which is expressed in base currency.\r\n\r\nThank you very much in advance,\r\n\r\nUnai\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/8310/comments",
    "author": "unaiasegi",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2021-01-19T13:54:13Z",
        "body": "Hi!\r\n\r\n> which one should I pick (or transform) to check the precision of the market in quote currency.\r\n\r\nBoth the price and the cost are usually expressed in the same currency, and have the same precision, so you can use the price precision to format your cost.\r\n\r\nLet us know if that does not answer your question."
      }
    ]
  },
  {
    "number": 8179,
    "title": "[binance] -2011 error handling",
    "created_at": "2020-12-30T11:36:45Z",
    "closed_at": "2020-12-30T11:55:23Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/8179",
    "body": "We currently have `'-2011': OrderNotFound` in binance.  This error happens when you use an orderId in a cancel operation, but that ID is not in the binance database yet.  Basically, it appears that the Rest API talks to a database that lags behind slightly, so the order is legitimate, but it's just not in the db yet.  Is OrderNotFound the correct thing to use?",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/8179/comments",
    "author": "npomfret",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2020-12-30T11:55:23Z",
        "body": "@npomfret \r\n> Is OrderNotFound the correct thing to use?\r\n\r\nYes, I think so. It literally tells the truth \u2013 the order is not found (yet).\r\n\r\nThe problem is that we can't distinguish the -2011 code when the order is not in the db but will be there eventually, from when the order will never be there \u2013 it's the same code in both cases.\r\n\r\nLet me know if that does not answer the question."
      }
    ]
  },
  {
    "number": 7996,
    "title": "[Binance] get X-MBX-USED-WEIGHT and X-MBX-ORDER-COUNT from http response headers",
    "created_at": "2020-11-19T14:53:21Z",
    "closed_at": "2020-11-19T15:02:56Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/7996",
    "body": "Hi,\r\n\r\nMay I know if ccxt supports getting http header from the response?\r\nI want to fetch some info from that header (as title).\r\n\r\nThanks,\r\nHien",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/7996/comments",
    "author": "nvhien1992",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2020-11-19T15:02:56Z",
        "body": "@nvhien1992 hi!\r\n\r\n> May I know if ccxt supports getting http header from the response?\r\n\r\nYes, the last received headers are stored in the `exchange.last_response_headers` property on the exchange instance:\r\n\r\n```\r\nconst response = await exchange.fetchTicker ('ETH/BTC')\r\nconsole.log (exchange.last_response_headers)\r\n```\r\n\r\nLet us know if that does not answer your question."
      }
    ]
  },
  {
    "number": 7979,
    "title": "Limit order always executes at maximum set limit price",
    "created_at": "2020-11-15T20:45:38Z",
    "closed_at": "2020-11-15T22:15:07Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/7979",
    "body": "There is smth I don't understand about limit orders and how they are executed on binance. I am led to believe that a limit order will execute at the limit set **_or better_**. But based on numerous tests, I see it always executes at the limit set, no matter how high it is set. Here is an example for a buy order, where I set the limit at 10% higher (which is ridiculously high just to make the point) than the ask price. \r\n\r\n```\r\nprice:\r\n{'ask': 0.003907, 'bid': 0.003904}\r\n\r\norders:\r\n[{'info': {'symbol': 'LTCBTC', 'orderId': 437641845, 'orderListId': -1, 'clientOrderId': 'some-id', 'transactTime': 1605473031619, 'price': '0.00429700', 'origQty': '0.65000000', 'executedQty': '0.65000000', 'cummulativeQuoteQty': '0.00253912', 'status': 'FILLED', 'timeInForce': 'GTC', 'type': 'LIMIT', 'side': 'BUY'}, 'id': '437641845', 'clientOrderId': 'fjkfdjfdjk', 'timestamp': 1605473031619, 'datetime': '2020-11-15T20:43:51.619Z', 'lastTradeTimestamp': None, 'symbol': 'LTC/BTC', 'type': 'limit', 'side': 'buy', 'price': 0.004297, 'amount': 0.65, 'cost': 0.00253912, 'average': 0.003906338461538462, 'filled': 0.65, 'remaining': 0.0, 'status': 'closed', 'fee': None, 'trades': None}]\r\n```\r\nask price: 0.003907\r\nexecuted price: 0.004297 -> 10% increase \r\n\r\nIs there smth I don't understand? ",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/7979/comments",
    "author": "mklosi",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2020-11-15T21:01:48Z",
        "body": "> Is there smth I don't understand?\r\n\r\nSee the `average` field, it contains the actual average executed price (0.003906338461538462). The `price` field will contain the ordered price value (0.004297). The `cost` field as reported by Binance (`cummulativeQuoteQty`) is supposedly lying, you might want to check that by verifying the prices and summing the costs of trades for this order (`fetchMyTrades`).\r\n\r\nDo you use the Binance testnet for the tests or do you test on the actual production server?\r\nDo you use the futures with leverage?"
      },
      {
        "user": "mklosi",
        "created_at": "2020-11-15T21:37:14Z",
        "body": "So here is another order and the corresponding trade. I see the price between the order and trade also differ by 10%: \r\n\r\norder: \r\n```\r\n[\r\n  {\r\n    \"info\": {\r\n      \"symbol\": \"XRPBTC\",\r\n      \"orderId\": 429308436,\r\n      \"orderListId\": -1,\r\n      \"clientOrderId\": \"...........\",\r\n      \"transactTime\": 1605475762844,\r\n      \"price\": \"0.00001850\",\r\n      \"origQty\": \"15.00000000\",\r\n      \"executedQty\": \"15.00000000\",\r\n      \"cummulativeQuoteQty\": \"0.00025230\",\r\n      \"status\": \"FILLED\",\r\n      \"timeInForce\": \"GTC\",\r\n      \"type\": \"LIMIT\",\r\n      \"side\": \"BUY\"\r\n    },\r\n    \"id\": \"429308436\",\r\n    \"clientOrderId\": \".................\",\r\n    \"timestamp\": 1605475762844,\r\n    \"datetime\": \"2020-11-15T21:29:22.844Z\",\r\n    \"lastTradeTimestamp\": \"None\",\r\n    \"symbol\": \"XRP/BTC\",\r\n    \"type\": \"limit\",\r\n    \"side\": \"buy\",\r\n    \"price\": 0.0000185,\r\n    \"amount\": 15.0,\r\n    \"cost\": 0.0002523,\r\n    \"average\": 0.00001682,\r\n    \"filled\": 15.0,\r\n    \"remaining\": 0.0,\r\n    \"status\": \"closed\",\r\n    \"fee\": \"None\",\r\n    \"trades\": \"None\"\r\n  }\r\n]\r\n```\r\n\r\ntrade: \r\n```\r\n[\r\n  {\r\n    \"info\": {\r\n      \"symbol\": \"XRPBTC\",\r\n      \"id\": 78434404,\r\n      \"orderId\": 429308436,\r\n      \"orderListId\": -1,\r\n      \"price\": \"0.00001682\",\r\n      \"qty\": \"15.00000000\",\r\n      \"quoteQty\": \"0.00025230\",\r\n      \"commission\": \"0.00010924\",\r\n      \"commissionAsset\": \"BNB\",\r\n      \"time\": 1605475762844,\r\n      \"isBuyer\": \"True\",\r\n      \"isMaker\": \"False\",\r\n      \"isBestMatch\": \"True\"\r\n    },\r\n    \"timestamp\": 1605475762844,\r\n    \"datetime\": \"2020-11-15T21:29:22.844Z\",\r\n    \"symbol\": \"XRP/BTC\",\r\n    \"id\": \"78434404\",\r\n    \"order\": \"429308436\",\r\n    \"type\": \"None\",\r\n    \"side\": \"buy\",\r\n    \"takerOrMaker\": \"taker\",\r\n    \"price\": 0.00001682,\r\n    \"amount\": 15.0,\r\n    \"cost\": 0.0002523,\r\n    \"fee\": {\r\n      \"cost\": 0.00010924,\r\n      \"currency\": \"BNB\"\r\n    }\r\n  }\r\n]\r\n```\r\n\r\n> Do you use the Binance testnet for the tests or do you test on the actual production server?\r\n\r\nI'm using the live server \r\n\r\n> Do you use the futures with leverage?\r\n\r\nI'm not currently using futures. \r\n"
      },
      {
        "user": "kroitor",
        "created_at": "2020-11-15T21:42:39Z",
        "body": "@mklosi on the XRP/BTC trade \u2013\u00a0I don't see a problem with this one, looks correct to me, what's wrong with it?"
      },
      {
        "user": "mklosi",
        "created_at": "2020-11-15T22:03:34Z",
        "body": "well, I'm wondering why the \"price\" reported by the \"order\" is 10% higher than the \"price\" reported by the \"trade\". 10% so happens to be what I've put as the price for the limit order -> ask price in the moment of trade + 10%. I am sure if I put a limit order at a price = ask_price + 50%, the order will report that high price. I don't want to test 50% though, since I already lost a bunch of money testing this :)      \r\n\r\nShouldn't the price reported by the \"order\" match that of the \"trade\"?\r\n\r\n"
      },
      {
        "user": "kroitor",
        "created_at": "2020-11-15T22:06:32Z",
        "body": "> Shouldn't the price reported by the \"order\" match that of the \"trade\"?\r\n\r\nNo, the price reported by the order\u00a0\u2013 is the price reported by the exchange, in this case, it's the price of your order upon placing it (the price you've ordered). The `average` price should match the average across trades. And the cost should match the sum of costs of trades. That is, because one order may be filled with more than one trade, depending on the orderbook depth."
      },
      {
        "user": "mklosi",
        "created_at": "2020-11-15T22:11:44Z",
        "body": "ok so in this case, since the order was filled all-in-once, the actual price that the order was filled at, is the \"average\" field. The \"price\" field is just an echo to the limit price I set when I placed the order, not the actual price that the order was executed at, correct? "
      },
      {
        "user": "kroitor",
        "created_at": "2020-11-15T22:15:07Z",
        "body": "> ok so in this case, since the order was filled all-in-once, the actual price that the order was filled at, is the \"average\" field. The \"price\" field is just an echo to the limit price I set when I placed the order, not the actual price that the order was executed at, correct?\r\n\r\nYes, that is correct, but only if the order was filled with a single trade at once. If it was filled with more than one trade, then the actual true filling price is the price of each trade. \r\n\r\nLet me know if that does not answer your question. Feel free to reopen this issue or just ask further questions, if any."
      }
    ]
  },
  {
    "number": 7961,
    "title": "FTX conditional order price update",
    "created_at": "2020-11-12T08:31:38Z",
    "closed_at": "2020-11-12T15:35:24Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/7961",
    "body": "Programming Language version: Python 3.7 ( 64bit)\r\nCCXT version: 1.37.59\r\nFTX market\r\n\r\nHi\r\nHow can i update the price of conditional trigger orders without delete it ?\r\nI am using the Stop limit order and try to update the price.\r\n\r\nThis is my place trigger method\r\n`                    side = input1\r\n                    stopPrice = input2\r\n                    quantity = input3\r\n                    orderid=0\r\n                    limitPrice=None\r\n                   `\r\n\r\n\r\n` orderid = self.exchange.createOrder(self.symbol, \"stop\", side, quantity, limitPrice, { \"triggerPrice\": stopPrice })[\"info\"][\"id\"]`",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/7961/comments",
    "author": "mlshin",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2020-11-12T15:35:24Z",
        "body": "1. update to CCXT 1.37.63+\r\n2. use `editOrder` like so:\r\n\r\n```Python\r\nfrom pprint import pprint\r\n\r\norder = self.exchange.create_order(self.symbol, \"stop\", side, quantity, limitPrice, { \"triggerPrice\": stopPrice })\r\n\r\nedited_order = self.exchange.edit_order(order['id'], order['symbol'], order['type'], order['side'], order['amount'], None, {\r\n    'triggerPrice': 12345.67,  # your new price here\r\n})\r\n\r\npprint(edited_order)\r\n```\r\n\r\nLet us know if that helps or not.\r\nThx!"
      },
      {
        "user": "mlshin",
        "created_at": "2020-11-12T15:55:54Z",
        "body": "> 1. update to CCXT 1.37.63+\r\n> 2. use `editOrder` like so:\r\n> \r\n> ```python\r\n> from pprint import pprint\r\n> \r\n> order = self.exchange.create_order(self.symbol, \"stop\", side, quantity, limitPrice, { \"triggerPrice\": stopPrice })\r\n> \r\n> edited_order = self.exchange.edit_order(order['id'], order['symbol'], order['type'], order['side'], order['amount'], None, {\r\n>     'triggerPrice': 12345.67,  # your new price here\r\n> })\r\n> \r\n> pprint(edited_order)\r\n> ```\r\n> \r\n> Let us know if that helps or not.\r\n> Thx!\r\n\r\nThank you for your support .\r\nCode is working without any error . The point is ID is changing after editing. I think this is happening on the server .\r\nin any way I can use this code .\r\nThanks."
      },
      {
        "user": "kroitor",
        "created_at": "2020-11-12T15:56:36Z",
        "body": "> I think this is happening on the server .\r\n\r\nYes, FTX will do cancel+create on the server, as documented in FTX's API docs."
      }
    ]
  },
  {
    "number": 7830,
    "title": "[binance] Is it possible to access coin-margined (delivery) futures?",
    "created_at": "2020-10-19T13:38:26Z",
    "closed_at": "2020-10-19T13:43:08Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/7830",
    "body": "I can access binance USDT futures with {'defaultType': 'future'}\r\nBut is it possible to access binance COIN futures ? (ex. BTCUSD Quarterly 1225)\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/7830/comments",
    "author": "takei0723",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2020-10-19T13:43:08Z",
        "body": "Yes:\r\n\r\n```Python\r\nimport ccxt\r\nfrom pprint import pprint\r\nprint('CCXT Version:', ccxt.__version__)\r\nexchange = ccxt.binance({\r\n    'enableRateLimit': True,\r\n    'options': {\r\n        'defaultType': 'delivery',\r\n    },\r\n})\r\nmarkets = exchange.load_markets()\r\npprint(exchange.symbols)\r\n```"
      }
    ]
  },
  {
    "number": 7507,
    "title": "Do the recent metainfo update PRs suggest incoming deprecation?",
    "created_at": "2020-08-24T10:27:20Z",
    "closed_at": "2020-08-24T11:14:29Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/7507",
    "body": "I noticed that @An-Net has updated many `has` dicts of different exchanges, sometimes e.g. adding `'fetchTicker': true` despite it already being defaulted in the Exchange base class. Does this mean there is a plan to default all to `False`? (I'm asking because in that case I'll have to make some changes in my own repos).",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/7507/comments",
    "author": "binares",
    "comments": [
      {
        "user": "frosty00",
        "created_at": "2020-08-24T11:00:38Z",
        "body": "Not necessarily, I would just say it is more complete to have all the `has` properties in the derived (subclass) exchange files."
      }
    ]
  },
  {
    "number": 7500,
    "title": " python No module named 'ccxt'\uff0cwhat should I do?",
    "created_at": "2020-08-22T16:48:44Z",
    "closed_at": "2020-08-22T17:26:31Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/7500",
    "body": "\r\nwhat should I do?\r\nIm win10 python 3.7.3,allredy install cctx1.0.0,but still No module named 'ccxt',help me!!\r\n\r\n- OS:win10\r\n- Programming Language version:python\r\n- CCXT version:1.0.0\r\n\r\nNo module named 'ccxt'\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/7500/comments",
    "author": "keyvin-wei",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2020-08-22T16:50:31Z",
        "body": "Which command do you use to install it? \r\n\r\nMake sure you do not confuse `cctx` (this is a wrong name, just a stub) with `ccxt` (this is the actual package name). "
      }
    ]
  },
  {
    "number": 7469,
    "title": "phemex decimal issue watch_order_book",
    "created_at": "2020-08-15T18:21:21Z",
    "closed_at": "2020-08-21T06:11:15Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/7469",
    "body": "- OS: macOS 10.13.6\r\n- Programming Language version: 3.6.0\r\n- CCXT version: ccxt 1.33.15 | ccxtpro 0.3.43\r\n\r\n```\r\nclient = ccxtpro.phemex()\r\nwhile True:\r\n    ccxt_orderbook = await client.watch_order_book(\r\n        \"ETH/USD\",\r\n        params={}\r\n    )\r\n```\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"execution.py\", line 1669, in subscribe_book\r\n    params={}\r\n  File \"python3.6/site-packages/ccxtpro/phemex.py\", line 280, in watch_order_book\r\n    await self.load_markets()\r\n  File \"python3.6/site-packages/ccxt/async_support/base/exchange.py\", line 180, in load_markets\r\n    raise e\r\n  File \"python3.6/site-packages/ccxt/async_support/base/exchange.py\", line 176, in load_markets\r\n    result = await self.markets_loading\r\n  File \"python3.6/site-packages/ccxt/async_support/base/exchange.py\", line 165, in load_markets_helper\r\n    currencies = await self.fetch_currencies()\r\n  File \"python3.6/site-packages/ccxt/async_support/phemex.py\", line 692, in fetch_currencies\r\n    maxAmount = float(self.decimal_to_precision(maxValueEv * precision, ROUND, 0.00000001, self.precisionMode))\r\n  File \"python3.6/site-packages/ccxt/base/decimal_to_precision.py\", line 74, in decimal_to_precision\r\n    missing = abs(dec) % precision_dec\r\ndecimal.InvalidOperation: [<class 'decimal.DivisionImpossible'>]\r\n```\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/7469/comments",
    "author": "jaseisen105",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2020-08-15T22:07:15Z",
        "body": "@jaseisen105 does this work on your side?\r\n\r\n```Python\r\nimport ccxt\r\n\r\nprint('CCXT Version:', ccxt.__version__)\r\n\r\nexchange = ccxt.phemex({\r\n    'enableRateLimit': True,\r\n})\r\n\r\nexchange.verbose = True\r\n\r\nexchange.load_markets()\r\n```"
      },
      {
        "user": "kroitor",
        "created_at": "2020-08-17T01:47:35Z",
        "body": "I don't have this issue in Python 3.6.9 and Python 3.7.2.\r\n\r\n```\r\nubuntu@ccxt:~/$ python3\r\nPython 3.6.9 (default, Jul 17 2020, 12:50:27)\r\n[GCC 8.4.0] on linux\r\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\r\n>>> import ccxt\r\n>>> exchange = ccxt.phemex({'enableRateLimit': True})\r\n>>> exchange.load_markets()\r\n{'BTC/USD': {'percentage': True, 'tierBased': False, 'taker': 0.0075, 'maker': -0...\r\n>>> ccxt.__version__\r\n'1.33.17'\r\n```\r\n\r\nI think it may be related to your Python version (3.6.0).\r\nDo you have the same issue if you upgrade to a newer Python version? Let us know if you can upgrade it to rule out version conflicts. In the meantime I will try to reproduce it on my side with 3.6.0."
      }
    ]
  },
  {
    "number": 7116,
    "title": "Kucoin fetchBalance method returning empty data",
    "created_at": "2020-06-14T01:34:20Z",
    "closed_at": "2020-06-14T01:40:11Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/7116",
    "body": "Hello,\r\nI have 2 accounts at Kucoin, when trying to call the fetchBalance method in one of them, the API returns the balance to me normally, but when calling this same method in another account, it returns me a json with empty data, why does this happen? I checked the Key / Secret / Phrase API and it is correct, because I am getting the status 200000\r\n\r\n- OS: CentOS 7\r\n- Programming Language version: JavaScript\r\n- CCXT version: 1.28.95\r\n\r\n```\r\nasync getBalance() {\r\n        let balance = []\r\n        try {\r\n            balance = await this.kucoin.fetchBalance()\r\n        } catch (e) {\r\n            let error = {\r\n                error: this.extractErrorMessage(e.message)\r\n            }\r\n            return error\r\n        }\r\n        return balance\r\n    }\r\n```\r\n\r\n```\r\n{ info: { code: '200000', data: [] },\r\n  free: {},\r\n  used: {},\r\n  total: {} }\r\n```\r\n\r\n\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/7116/comments",
    "author": "viniciussvl",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2020-06-14T01:35:30Z",
        "body": "Hi! Have you deposited to the \"empty\" account?"
      }
    ]
  },
  {
    "number": 7110,
    "title": "How to use test api?",
    "created_at": "2020-06-13T06:25:05Z",
    "closed_at": "2020-06-13T10:05:52Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/7110",
    "body": "Hi, I notice that many exchanges have test accounts or apis such as Bitmex, thus their ccxt exchange instance have test url too. So is there a way for ccxt to use the test api automatically, instead of any error of bad Apikey or something else?",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/7110/comments",
    "author": "monk-after-90s",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2020-06-13T10:05:52Z",
        "body": "```Python\r\nimport ccxt\r\nexchange = ccxt.bitmex({\r\n    'enableRateLimit': True,\r\n})\r\nexchange.set_sandbox_mode(True)\r\n```\r\n\r\nLet us know if that does not answer your question."
      }
    ]
  },
  {
    "number": 7033,
    "title": "How to get Huobi bid/ask price with watchTicker?",
    "created_at": "2020-05-28T13:16:00Z",
    "closed_at": "2020-05-28T13:34:22Z",
    "labels": [
      "question",
      "ws"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/7033",
    "body": "Language: Python\r\n\r\nHi @kroitor \r\nI have decided to purchase ccxpro!\r\n\r\nTwo things that I have noticed initially:\r\n-The repository cannot be installed using Poetry (pip works fine), it has an exit code 1.\r\n-Huobi `watch_ticker` is not returning the \"ask\" or \"bid\", which is a bummer since I bought CCXTPRO for that reason \ud83e\udd23 .\r\nI can use `watch_order_book`, but it will take me a lot of refactoring to do..\r\n\r\nIs it possible to add `\"ask\"/\"bid\"` to Huobipro? \r\n\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/7033/comments",
    "author": "Corfucinas",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2020-05-28T13:24:26Z",
        "body": "Hi @Corfucinas !\r\n\r\n> -The repository cannot be installed using Poetry (pip works fine), it has an exit code 1.\r\n\r\nWe haven't tested it with 3rd-party package managers, but will do our best to get there.\r\n\r\n> -Huobi watch_ticker is not returning the \"ask\" or \"bid\", which is a bummer since I bought CCXTPRO for that reason \ud83e\udd23 .\r\n> Is it possible to add \"ask\"/\"bid\" to Huobipro?\r\n\r\nUnfortunately, not, because Huobi Pro does not provide that information via the WS ticker, here's how a ticker update from Huobi looks like:\r\n\r\n```\r\n2020-05-28T13:19:20.960Z onMessage {\r\n  ch: 'market.btcusdt.detail',\r\n  ts: 1590671960809,\r\n  tick: {\r\n    id: 215837272868,\r\n    low: 9053.9,\r\n    high: 9450.01,\r\n    open: 9160.36,\r\n    close: 9399.88,\r\n    vol: 373216777.90379894,\r\n    amount: 40485.241497971125,\r\n    version: 215837272868,\r\n    count: 457796\r\n  }\r\n}\r\n```\r\n\r\n\u2191\u00a0No bid/ask there to derive that data from. So, the only way to track current market prices is to use the orderbook feed. Or fallback to `fetchTicker` over REST.\r\n\r\nIn general, not all exchanges will consider bid/ask a part of the ticker, most often the ticker is limited to the 24 OHLCV + last public trade price. The ticker itself is just a second-order statistical 24-hour calculation (derived data) from the first-order realtime data based on the orderbook+trades. You can derive the ticker info from the source data on the user side.\r\n\r\nLet me know if the above does not answer your questions."
      }
    ]
  },
  {
    "number": 6995,
    "title": "Binance watchOrders / watchBalance not returning a value immediately",
    "created_at": "2020-05-22T16:57:56Z",
    "closed_at": "2020-05-22T17:00:54Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/6995",
    "body": "I try to use `watchOrders()` and `watchBalance()` but both with node.js and in the browser, after connecting to the websocket for private methods, there does not seem to be any communication. When I change below method from `watchBalance()` to `fetchBalance()` it does work fine.\r\n\r\n- OS: macOS 10.15.4\r\n- Programming Language version: NodeJS v12.16.3\r\n- CCXT version: pro 0.2.13\r\n\r\n```JavaScript\r\n'use strict';\r\n\r\nconst ccxtpro = require('.');\r\n\r\n(async () => {\r\n\r\n    const exchange = new ccxtpro.binance({ enableRateLimit: true })\r\n\r\n    exchange.apiKey = 'x';\r\n    exchange.secret = 'x';\r\n\r\n\r\n    (async () => {\r\n\r\n        while (true) {\r\n            try {\r\n                const balance = await exchange.watchBalance()\r\n                console.log(balance)\r\n            } catch (e) {\r\n                console.log(e)\r\n            }\r\n        }\r\n\r\n    })()\r\n})()\r\n\r\n```\r\n\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/6995/comments",
    "author": "dsbaars",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2020-05-22T17:00:54Z",
        "body": "> there does not seem to be any communication.\r\n\r\nThe `watch*` methods only return a value when an update from the exchange comes in. When your balance changes \u2013\u00a0you will see a `watchBalance` response. This is how WebSocket feeds work \u2013\u00a0you get the updates in real-time, not the most recent historical state.\r\n\r\nTry launching a `watchBalance()` loop and change your balance by placing an order or by depositing/withdrawing/transferring (to trigger a change of your balance) \u2013\u00a0you will see the update returned from `watchBalance()`.\r\n\r\nLet us know if that does not answer your question."
      },
      {
        "user": "dsbaars",
        "created_at": "2020-05-22T17:45:18Z",
        "body": "Thanks, this explains a lot although this behaviour is different from the other exchanges I used with WebSockets.\r\nAfter subscribing with Kraken for example the first message is the current state, after that you will get updates. I think this is the same with BitMEX as well. \r\nI'll try to solve this by doing a single fetch call first."
      },
      {
        "user": "kroitor",
        "created_at": "2020-05-22T17:47:53Z",
        "body": "@dsbaars yep, Binance does not send-in a snapshot of balance upon connecting, while some other exchanges like Kraken, BitMEX do. Let me know if you have further issues or difficulties with it. Thx!"
      },
      {
        "user": "kroitor",
        "created_at": "2020-05-22T17:50:02Z",
        "body": "P.S. We will look into adding the balance snapshot to Binance, however, last time we've checked \u2013\u00a0there was no possibility to synchronize the RESTful balance response with the WS updates, because their RESTful endpoint for balance does not return a nonce/seq value that could be used for synchronization. So, it's up to the user to synchronize it, depending on the user's current state."
      }
    ]
  },
  {
    "number": 6993,
    "title": "How to use this.hmac for signature generation?",
    "created_at": "2020-05-22T16:08:56Z",
    "closed_at": "2020-05-22T17:24:03Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/6993",
    "body": "Hi,\r\n\r\nI'm trying to write the sign method to an exchange, yet without success.\r\nThe problem happens in the signature generation.\r\n\r\nIn javascript: \r\n\r\nfunction generateSignature(key, secret, nonce) {\r\n   var message = nonce + key; \r\n   var hash = CryptoJS.HmacSHA256(message, secret);\r\n   var hashInBase64 = CryptoJS.enc.Base64.stringify(hash);\r\n   return hashInBase64;\r\n}\r\n\r\nit works, but I'm in doubt how to write it with ccxt syntax. \r\nBased on the signature of other exchanges(I read binance, kraken, etc), I'm trying hash and hmac:\r\n\r\n         } else {\r\n             this.checkRequiredCredentials ();\r\n             const nonce = this.nonce ().toString ();\r\n             url += path;\r\n             const message = nonce + this.apiKey;\r\n             const hash = this.hash (this.encode (message), 'sha256', 'base64');\r\n             const signature = this.hmac (hash, this.encode (this.secret), 'sha256', 'base64');\r\n             headers = {\r\n                 'Content-Type': 'application/x-www-form-urlencoded',\r\n                 'key': this.apiKey,\r\n                 'nonce': nonce,\r\n                 'signature': signature,\r\n             };\r\n\r\nI'm getting: ccxt.base.errors.ExchangeNotAvailable: POST ...... 400 Bad Request {\"error\":true,\"data\":{\"message\":\"Invalid signature. Verify key and signature.\"}}\r\n\r\nCan anyone help me to translate the above generateSignature to the ccxt syntax?\r\n\r\nThank you.\r\n\r\nErico.",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/6993/comments",
    "author": "ericoacguedes",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2020-05-22T16:44:08Z",
        "body": "Non-CCXT:\r\n\r\n```JavaScript\r\nfunction generateSignature(key, secret, nonce) {\r\n   var message = nonce + key; \r\n   var hash = CryptoJS.HmacSHA256(message, secret);\r\n   var hashInBase64 = CryptoJS.enc.Base64.stringify(hash);\r\n   return hashInBase64;\r\n}\r\n```\r\n\r\n\u2193\r\n\r\nCCXT:\r\n\r\n```JavaScript\r\n    const message = nonce + this.apiKey;\r\n    const signature = this.hmac (this.encode (message), this.encode (this.secret), 'sha256', 'base64');\r\n    headers = {\r\n        'Content-Type': 'application/x-www-form-urlencoded',\r\n        'key': this.apiKey,\r\n        'nonce': nonce,\r\n        'signature': signature,\r\n    };\r\n```\r\n\r\nLet me know if that does not help."
      },
      {
        "user": "kroitor",
        "created_at": "2020-05-22T16:45:50Z",
        "body": "@ericoacguedes in other words, you don't need to `hash()` it in CCXT, just do `hmac()`. It would be great if you report back whether it solves the issue for you or not."
      }
    ]
  },
  {
    "number": 6961,
    "title": "Position Open Date",
    "created_at": "2020-05-17T13:59:44Z",
    "closed_at": "2020-05-17T17:08:42Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/6961",
    "body": "Hi guys, \r\nOn deribit, I would like to know the date (timestamp) a position has been opened at. \r\nI am aware I can get timestamp for trades, but is there any way to do the same for a position ?\r\nThanks in advance for any insight!\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/6961/comments",
    "author": "Thjdid",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2020-05-17T17:08:42Z",
        "body": "Hi!\r\n\r\n> I am aware I can get timestamp for trades, but is there any way to do the same for a position ?\r\n\r\nYour position is a cumulative result all your buy/sell orders. The position exists at zero if you haven't placed any orders. When you place an order your position grows from zero up, when you place an opposite order your position shrinks down to zero. It exists regardless of the size of the position (a zero position is also called a neutral position). Therefore a position is not supposed to have a timestamp, really. So, the opening timestamp of your position is the timestamp of your first order that changed your position.\r\n\r\nLet us know if that does not answer your question."
      }
    ]
  },
  {
    "number": 6903,
    "title": "{ ExchangeError: binanceus {\"code\":-1102,\"msg\":\"Mandatory parameter 'quantity' was not sent, was empty/null, or malformed.\"}",
    "created_at": "2020-05-07T13:25:29Z",
    "closed_at": "2020-05-07T14:20:46Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/6903",
    "body": "- OS: Windows 10\r\n- Programming Language version: Node Js\r\n- CCXT version: 6.14.4\r\n\r\nHello Igor,\r\n\r\ni am trying to edit an order initially placed as limit order to change it from limit to market order. I am receiving the error below:\r\n{ ExchangeError: binanceus {\"code\":-1102,\"msg\":\"Mandatory parameter 'quantity' was not sent, was empty/null, or malformed.\"}\r\n\r\nhere's my code snippet below:\r\n\r\ntry { myOrder = await exchange.editOrder(orderId, tradingPair, type, side, amount, price, {}); }\r\n\tcatch(err) {...}\r\n\r\nThanks in advance.\r\n\r\n\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/6903/comments",
    "author": "crossx4real",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2020-05-07T13:45:49Z",
        "body": "Hi!\r\n\r\nTry removing the `price` argument from there, as follows:\r\n\r\n```JavaScript\r\n// if it doesn't work uncomment the next line and paste your verbose request+response\r\n// exchange.verbose = true \r\ntry { myOrder = await exchange.editOrder(orderId, tradingPair, 'market', side, amount); }\r\ncatch(err) {...}\r\n```"
      }
    ]
  },
  {
    "number": 6765,
    "title": "Closing position on Bybit?",
    "created_at": "2020-04-09T20:38:45Z",
    "closed_at": "2020-04-09T20:50:16Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/6765",
    "body": "Hello, how to close open position using ccxt in bybit",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/6765/comments",
    "author": "antebw",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2020-04-09T20:50:16Z",
        "body": "Hi! To close an open position you should simply place an opposite basic order or a conditional order that will trigger your stop condition. So, if you have opened a position by buying some number of contracts \u2013\u00a0then your should sell the same number of contracts which will effectively reduce your open position to zero (thus closing it). Let us know if that does not answer the question."
      }
    ]
  },
  {
    "number": 6674,
    "title": "Unable to resolve module './js/btcchina.js'",
    "created_at": "2020-03-25T11:36:28Z",
    "closed_at": "2020-03-25T11:51:24Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/6674",
    "body": "- OS: Debian 10 android apk 29\r\n- Programming Language version: react-native 0.61.5\r\n- CCXT version: 1.24.96\r\n\r\n```\r\nSimply put var ccxt = require('ccxt'); into any module\r\n```\r\n\r\n```\r\n[Wed Mar 25 2020 11:31:13.196]  BUNDLE  ./index.js \r\n\r\nerror: Error: Unable to resolve module `./js/btcchina.js` from `node_modules/ccxt/ccxt.js`: \r\n\r\nNone of these files exist:\r\n  * node_modules/ccxt/js/btcchina.js(.native|.android.js|.native.js|.js|.android.json|.native.json|.json|.android.ts|.native.ts|.ts|.android.tsx|.native.tsx|.tsx)\r\n  * node_modules/ccxt/js/btcchina.js/index(.native|.android.js|.native.js|.js|.android.json|.native.json|.json|.android.ts|.native.ts|.ts|.android.tsx|.native.tsx|.tsx)\r\n    at ModuleResolver.resolveDependency (/home/marcel/ReactNative/FusionCommerce/node_modules/@react-native-community/cli/node_modules/metro/src/node-haste/DependencyGraph/ModuleResolution.js:163:15)\r\n    at ResolutionRequest.resolveDependency (/home/marcel/ReactNative/FusionCommerce/node_modules/@react-native-community/cli/node_modules/metro/src/node-haste/DependencyGraph/ResolutionRequest.js:52:18)\r\n    at DependencyGraph.resolveDependency (/home/marcel/ReactNative/FusionCommerce/node_modules/@react-native-community/cli/node_modules/metro/src/node-haste/DependencyGraph.js:287:16)\r\n    at Object.resolve (/home/marcel/ReactNative/FusionCommerce/node_modules/@react-native-community/cli/node_modules/metro/src/lib/transformHelpers.js:267:42)\r\n    at dependencies.map.result (/home/marcel/ReactNative/FusionCommerce/node_modules/@react-native-community/cli/node_modules/metro/src/DeltaBundler/traverseDependencies.js:434:31)\r\n    at Array.map (<anonymous>)\r\n    at resolveDependencies (/home/marcel/ReactNative/FusionCommerce/node_modules/@react-native-community/cli/node_modules/metro/src/DeltaBundler/traverseDependencies.js:431:18)\r\n    at /home/marcel/ReactNative/FusionCommerce/node_modules/@react-native-community/cli/node_modules/metro/src/DeltaBundler/traverseDependencies.js:275:33\r\n    at Generator.next (<anonymous>)\r\n    at asyncGeneratorStep (/home/marcel/ReactNative/FusionCommerce/node_modules/@react-native-community/cli/node_modules/metro/src/DeltaBundler/traverseDependencies.js:87:24)\r\n```\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/6674/comments",
    "author": "marcelcure",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2020-03-25T11:52:41Z",
        "body": "@marcelcure Let me know if you still have the same issue with version 1.24.97, it will arrive in 15 minutes. It will be great if you report back whether it helped or not. Also, you might want to rebuild your framework bundles to make sure that your version is up to date. Looking forward to hearing back from you! Thanks!"
      },
      {
        "user": "marcelcure",
        "created_at": "2020-03-25T13:37:08Z",
        "body": "I updated to 1.24.97 and to begin with I had the exact same error, so I deleted node_modules and rebuilt and now it is working perfectly. Thank you. Good job - very fast."
      }
    ]
  },
  {
    "number": 6550,
    "title": "I got \"amount is invalid\" error when i try to withdraw",
    "created_at": "2020-03-02T15:36:00Z",
    "closed_at": "2020-03-02T22:14:18Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/6550",
    "body": "- OS: Mac OS Catalina\r\n- Programming Language version: Node.js\r\n- CCXT version: 1.23.1\r\n- Exchange: Bitmex\r\n- Method: withdraw\r\n\r\nThis is my route:\r\n\r\n```\r\nrouter.post('/withdraw', async (req, res, next) => {\r\n  const {code, address, amount, otpToken, currency } = req.body;\r\n\r\n  const exchange = await new ccxt.bitmex();\r\n  exchange.apiKey = \"MY - KEY\";\r\n  exchange.secret = \"MY - SECRET\";\r\n\r\n  await exchange.withdraw (code, amount, address, tag = undefined, params = {}, otpToken)\r\n  .then((response) => console.log(res))\r\n  .catch(ex => console.log(ex))\r\n\r\n});\r\n```\r\n\r\nAnd this is what i am trying to post:\r\n\r\n{\r\n    \"address\": \"THE ADRESS\",\r\n    \"amount\": 0.0022,\r\n    \"code\": \"BTC\",\r\n    \"otpToken\": \"MY TOKEN\"\r\n}\r\n\r\nWhen i execute this route, i get this error:\r\nBadRequest: bitmex {\"error\":{\"message\":\"amount is invalid\",\"name\":\"HTTPError\"}}\r\n\r\nThe key and the secret are OK. The otpToken too. I can fetch everything.\r\nI\u00b4m new on this, and i can\u00b4t figure it out where is the error on my code.\r\n\r\nThank you!!\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/6550/comments",
    "author": "Nicour",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2020-03-02T19:31:20Z",
        "body": "Hi! \r\n\r\nI think BitMEX requires the amount in satoshis (an integer, not a floating point decimal). So, instead of `\"amount\": 0.0022` it should be `\"amount\": 220000`.\r\n\r\nLet me know if that does not help."
      }
    ]
  },
  {
    "number": 6546,
    "title": "Limited L2 orderbook does not produce consistent amount of results - CCXT PRO",
    "created_at": "2020-03-01T14:39:07Z",
    "closed_at": "2020-03-01T14:59:12Z",
    "labels": [
      "question",
      "ws"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/6546",
    "body": "- OS: Win10\r\n- Programming Language version: Python 3.8\r\n- CCXT version: 0.0.47\r\n- Exchange: Binance, WS\r\n\r\n```\r\nimport ccxtpro\r\nimport asyncio\r\n\r\nasync def main():\r\n    exchange = ccxtpro.binance({'enableRateLimit': True})\r\n    while True:\r\n        orderbook = await exchange.watch_order_book('ETH/BTC', 10) #INCONSISTENT, see below\r\n        print(len(orderbook['asks']), len(orderbook['bids']))\r\n\r\nasyncio.get_event_loop().run_until_complete(main())\r\n\r\n```\r\n\r\nResults:\r\n\r\n```\r\n10 10\r\n10 10\r\n10 9\r\n9 10\r\n10 10\r\n10 10\r\n10 10\r\n10 9\r\n10 10\r\n```\r\n\r\nand:\r\n```\r\n        orderbook = await exchange.watch_order_book('ETH/BTC', 1)\r\n        print(orderbook['asks'][0]), (orderbook['bids'][0])\r\n```\r\nProduces (after some correct results):\r\n```\r\n    print(orderbook['asks'][0]), (orderbook['bids'][0])\r\nIndexError: list index out of range\r\n```",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/6546/comments",
    "author": "1key",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2020-03-01T14:49:38Z",
        "body": "Technically, this is not fully a bug. What happens is that when you limit the orders in real-time mode by supplying the `limit` argument CCXT will only store up to `limit` orders. In some cases an order may be deleted from the book (when matched), so the exchange sends a zero delta and it is removed from the orderbook leaving just the 9 orders of 10 (until another one fills the gap). The responsibility of CCXT Pro in this case is to return immediately after receiving a \"delete\" command from the exchange (or any of \"delete\", \"update\", \"insert\" deltas).\r\n\r\nSo, from here, you have two options:\r\n\r\n- either expect the number of bids/asks to be less than or equal to `limit` in the result \r\n- or don't send `limit` (CCXT will keep the entire orderbook in memory) and just use python's array slicing like `[0:5]`\r\n\r\nAlso, Binance does support limited WS feeds for 5, 10 or 20 bidasks, however, when `limit` is sent to the exchange \u2013 it will rate-limit the feed by 100ms or 1000ms which is not good for real-time apps, therefore the `limit` is not sent to Binance in particular at this time, and all the limiting is done on the client-side in memory.\r\n\r\nWe will add this to the documentation shortly to avoid confusion.\r\n\r\nLet me know if that does not answer the question."
      },
      {
        "user": "kroitor",
        "created_at": "2020-03-01T14:59:12Z",
        "body": "@1key we will look into adding an option that would still store the entire orderbook and would always serve a number of bidasks as close as possible to `limit` , but in the general case an exchange orderbook may have less than any number of bid/asks (just like with fetchOrderBook over REST). So if the exchange is inactive, there may be very few or even zero orders on either side of the book. \r\n\r\nFeel free to reopen this if anything or just ask further questions if you have more. Thanks for the feedback!"
      }
    ]
  },
  {
    "number": 6499,
    "title": "how to make a stoploss in binance?",
    "created_at": "2020-02-18T05:31:28Z",
    "closed_at": "2020-02-21T11:09:05Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/6499",
    "body": "how can i make a stoplimit order in both futures and spot?\r\nfirst i fetch orderId and call \r\nbinance.fapiPrivate_post_order({type:\"STOP_MARKET/TAKE_PROFIT_MARKET\" }) \r\nis it right?? but don't i need orderId to match quantity for the exact order?\r\nand what about the spot trade stoplimit?\r\n\r\nthanks",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/6499/comments",
    "author": "doongzzi",
    "comments": [
      {
        "user": "lookis",
        "created_at": "2020-02-18T20:21:13Z",
        "body": "there is no stop market order in spot, only in futures.\r\nand stop order doesn't stop some particular order, so you don't need any orderid to \"stop\"\r\njust build the parameters with stop price and quantity in \"params\" manually, stop order isn't an unified order type in ccxt"
      }
    ]
  },
  {
    "number": 6252,
    "title": "[bitstamp] why is fetchOrder 'emulated'",
    "created_at": "2019-12-11T19:21:35Z",
    "closed_at": "2019-12-11T19:25:30Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/6252",
    "body": "`fetchOrder` in bitstamp It looks like a proper implementation, why is it market as 'emulated'?",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/6252/comments",
    "author": "npomfret",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2019-12-11T19:23:00Z",
        "body": "I think this is a leftover from an earlier version."
      },
      {
        "user": "npomfret",
        "created_at": "2019-12-11T19:25:52Z",
        "body": "Or perhaps the order isn't fully formed?  Does that count as 'emulated'?"
      },
      {
        "user": "kroitor",
        "created_at": "2019-12-11T19:28:10Z",
        "body": "> ok, will do a PR now, thanks.\r\n\r\nNo worries, I've already uploaded a fix ) The `'emulated'` value is only used in cases where a call is emulated via another endpoint for another call, if the endpoint in question is missing."
      },
      {
        "user": "kroitor",
        "created_at": "2019-12-11T19:30:36Z",
        "body": "@npomfret thx to you for pointing it out!\r\n\r\nNo objections whatsoever ) We already have a `fetchOrderStatus` wrapper in the base class anyway."
      }
    ]
  },
  {
    "number": 6148,
    "title": "no name module gdax() in ccxt ",
    "created_at": "2019-11-16T19:27:25Z",
    "closed_at": "2019-11-16T21:02:43Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/6148",
    "body": "import ccxt  # noqa: E402\r\n\r\nkraken = ccxt.kraken()\r\ngdax = gdax().ccxt\r\n\r\n\r\nI'd like work with this code part. Compiler cannot find function name as gdax(). Also I controlled the file, there is no function in the ccxt  master file. Has the function lost its continuity? How can I continue?",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/6148/comments",
    "author": "BahadirSoybakis",
    "comments": [
      {
        "user": "frosty00",
        "created_at": "2019-11-16T20:04:33Z",
        "body": "`gdax` is depreciated, please use `coinbasepro` instead )\r\n\r\nlet me know if you have any other issues"
      }
    ]
  },
  {
    "number": 6128,
    "title": "Anyone using Lykke?  Is it safe",
    "created_at": "2019-11-13T12:07:55Z",
    "closed_at": "2019-11-13T16:24:32Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/6128",
    "body": "Their private API doesn't use a private key (or nonce) so the sign method in ccxt doesn't actually sign anything.  The API Key just goes across the wire as a clear text header.",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/6128/comments",
    "author": "npomfret",
    "comments": [
      {
        "user": "KonstantinRyazantsev",
        "created_at": "2019-11-13T14:34:57Z",
        "body": "1. API key transmitted over HTTPS and the user can rotate key as often as needed. This is the same as Bearer token authentication.\r\n2. This API doesn't allow withdrawals. Withdrawals are possible only trading account using 2FA.\r\n\r\nSo seems all safe here."
      },
      {
        "user": "kroitor",
        "created_at": "2019-11-13T16:24:32Z",
        "body": "@npomfret there are other exchanges that do the same thing as well:\r\n- bitlish\r\n- cobinhood\r\n- rightbtc\r\n- virwox\r\n\r\nThese exchanges are relying on HTTPS. So, if your key leaks, you should change it immediately. Let me know if that does not answer the question."
      }
    ]
  },
  {
    "number": 6057,
    "title": "[question] rate limit error type?",
    "created_at": "2019-10-29T10:01:23Z",
    "closed_at": "2019-10-29T10:29:32Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/6057",
    "body": "Is the `DDoSProtection` network error the one to use if a _rate limit exceeded_ type error is encountered?",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/6057/comments",
    "author": "npomfret",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2019-10-29T10:04:41Z",
        "body": "In most cases we throw `DDoSProtection`, since the rate limit itself is for protection from abuse. We can subclass a specific type of `DDoSProtection` and call it `RateLimitExceeded` if that will help handle the exceptions better in userland. Do you need a more specific class of errors for these exceptions?"
      }
    ]
  },
  {
    "number": 6032,
    "title": "Passing keys to cli.py from keys.json",
    "created_at": "2019-10-24T10:09:15Z",
    "closed_at": "2019-10-24T10:14:54Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/6032",
    "body": "I've hunted for an answer. Using cli.py\r\n\r\nHow to pass keys from keys.json or keys.local.json to cli.py ? My below attempt failed. \r\n\r\n`    \"bitforex\":      { \"skip\": true },\r\n    \"bithumb\":       { \"skip\": true },\r\n    \"bitmex\":       {\"apiKey\": '****', \"secret\": '****'},\r\n    \"bitibu\":        { \"skip\": true },\r\n    \"bitkk\":         { \"skip\": true },\r\n`\r\n\r\n- OS: Ubuntu 18\r\n- Programming Language version: python\r\n- CCXT version: latest\r\n- Exchange: Bitmex\r\n- Method: keys\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/6032/comments",
    "author": "interzonez",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2019-10-24T10:14:54Z",
        "body": "@interzonez your attempt is almost correct, the contents of the file should be:\r\n\r\n```JavaScript\r\n{\r\n    \"bitmex\": {\"apiKey\": \"****\", \"secret\": \"****\"}\r\n}\r\n```\r\n\r\n\u2191 Use double quotes (`\"`) instead of single quotes (`'`) everywhere throughout the JSON file. \r\n\r\nThe two files work like this:\r\n\r\n- if `keys.local.json` is present, then\u00a0`cli.py` will load the keys from there\r\n- if `keys.local.json` is missing, `cli.py` will try to load the keys from `keys.json`, if it's present\r\n\r\nLet us know if that does not answer the question."
      },
      {
        "user": "kroitor",
        "created_at": "2019-10-24T13:16:23Z",
        "body": "> What's the difference between using keys.local.json and keys.json ?\r\n\r\n`keys.json` is used for shared keys that may be used on our Travis CI for private testing, so it is a part of the repo, and `keys.local.json` is your local override, that is not a part of the repo. I'd recommend to use `keys.local.json` for your personal keys and private testing."
      }
    ]
  },
  {
    "number": 5930,
    "title": "Oceanex API has different dynamics. Uses 2048 key.pem to generate key. How to get ccxt to work with oceanex?",
    "created_at": "2019-10-06T21:39:54Z",
    "closed_at": "2019-10-07T07:32:24Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/5930",
    "body": "Language: Python\r\nCCXT Version: Latest\r\nExchange: ccxt.oceanex()\r\n\r\nGeneral question, Ive successfully created a key on this exchange. Would like some guidance on what to place in the apiKey and secret attributes? Was the 2048 pem key placed as the apiKey attribute? \r\n\r\nThanks.",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/5930/comments",
    "author": "karlandoh",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2019-10-07T07:32:24Z",
        "body": "@karlandoh \r\n\r\n> Would like some guidance on what to place in the apiKey and secret attributes? Was the 2048 pem key placed as the apiKey attribute?\r\n\r\nYes, you should set the `apiKey` and the `secret` should be the full PEM, including the newlines and the RSA private key header/footer, as shown below:\r\n\r\nThis is how we tested this:\r\n\r\n```\r\n        \"apiKey\": \"ID3A7CE21239\",\r\n        \"secret\": \"-----BEGIN RSA PRIVATE KEY-----\\nMIIEpgIBAAKCAQEA3Mc4KehdS8hj1vieiT4P6gstimSARjTasYUw2QhNbHD1lAnh\\ngN92wjLRZvHhXdb6iO62kXJ5V+S5bGnPZTp5FwC/kFVGwHOEmG7Q6BJdLgsPmLF5\\nkBO1v9wIYJ3WuIB1JBaACPbuW/Qa1yTD+K089s0+XvRcbtLjYT/qH/sdHRujD0Kh\\nSJ8rKRy8V1i1lVV9rEHFvz9ZSauZ90mVXrvGCWWyDnsR76rWR/AXSXkKJnD+dESg\\n3X9JD+5C/Bhy1oI2DH12cpOswmWfHrnHwjuVArbJWUbFvF3cIoZO81lG7YUrei9q\\n9+4QTy1WxejALrOrImcpzGfL0lOugf/D9XNmrQIDAQABAoIBAQCRg3DeFjvfpf1A\\nA++h71jX3nQuodz16QI3PN0cPt+g2LbT0sthgGeqyYnA+y2aBwXDHepoKfYWWzdn\\nYDoEs0x6P9EC1WHjmH/NZESmoOvvW/T0pAzGTGdfRCv1WjLaujf7CCVtQyuJSdOi\\n96V+stfapx4zwYVmufKJ93FdkMn4kzQ25+5OP9Uk2gjZtuL12BbGZrVcFcJcNzLP\\nhcD354xO1iaZkrA6xHbx2gTPRLKZlqKs9G0OGX4Sh0ioAmUsBRaOHCdw3lxkb5Mc\\nUzLDve82kkLyKbZ+zuxUQiawHCl79UMwe9vODcvTk5dZvA+XuKTvFvkfWkH7yDlF\\ndyPfyzD1AoGBAPBb6WW8h4DVHHllqacwK5P6Rh80br1rwYc+IY/KeNLLJ1UQUDNN\\no0ISQXwivtRYrqOpRT3IdMIrudVZbtEEjI6j/1737nI/I+mPwguVZSfeJFklP5TU\\nmL1fDUWOibMnFsv3WyL/3bMPbxAwEBK/cLShbywSakkp3lcgT81JuO5vAoGBAOsl\\nHW0Ii2dgh2DPTJZmkWrf7Fl2QrwnuhvhrFkogz2kv2CIXMvuiDlDkwIBhGEpQLnq\\n4dY+uECvRalo0xNpvpehXzj/9zpFW/2RQOkQS/ykEwfl9Xdw2BirgLM7LWLVG2A9\\n1NGY6JpzbsVJ11F/EobZFgy1AnmSgsnbHwa4cMqjAoGBAM0AF1jGK2weV2LS6pfF\\n5eUYGKaUub6lITKQM1/IeLSQwMM0XrLjDNNVbrTJjaje2lSMEppXVf4l/SGSXYm4\\nL4mZJj2BiMW4RJD4I7BtgxE1zhqaQlhV2s/pOhCRObCrLi5YkkqPoC8QgtFzrMHQ\\ntffZmFAmhLBSHWiCDo4wyqHRAoGBAJfkq7No23P5mLmCbvigXMLqzqOjbsxX5TJp\\nfolBUDWbnDvhGgBpnvlOm0GqdTbGDReLkEJy1VaDYb5jBiX+Iq2UAgyx26N6dke/\\ncmyaqFsUKW7qrrtu20hkUIh2a4TyH/L1Pen+mhJbCmzKnBn6uZ79z+55ZpXdfDqk\\nHtCah9F9AoGBAO9x28be0Vum10DdyKzeKgIfLcdoSaP+S/Kmg3x3DnYbjM1DYWSL\\nwULNibKj7lInzMWHrFFX7699QM9U61AXBMeKucTHsa70qZ1xuuYjM5pWMuHNiDjj\\nop2PjLmtGBx0ZZcy2viShsGS1/mzTMH+9p0JNOsk/aUaQIng3R45ok9v\\n-----END RSA PRIVATE KEY-----\"\r\n```\r\n\r\n( \u2191\u00a0This particular key will not work, I've posted it here just to demonstrate the usage, however, it should work with your key).\r\n\r\nLet us know if that does not answer the question."
      }
    ]
  },
  {
    "number": 5550,
    "title": "question: coinfloor ledger parse",
    "created_at": "2019-07-18T15:36:46Z",
    "closed_at": "2019-07-18T15:51:30Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/5550",
    "body": "The Coinfloor transactions api returns trades and transactions.  When parsing a trade I'm facing with the following:\r\n\r\n         {\r\n             \"datetime\": \"2017-07-25 06:41:24\",\r\n             \"id\": 1500964884381265,\r\n             \"type\": 2,\r\n             \"xbt\": \"0.1000\",\r\n             \"xbt_eur\": \"2322.00\",\r\n             \"eur\": \"-232.20\",\r\n             \"fee\": \"0.00\",\r\n             \"order_id\": 84696745\r\n         }\r\n\r\nShould this result in 2 rows in the ledger (0.1BTC in and 232.2EUR out)?  If so, how do I implement that in `parseLedgerEntry`?",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/5550/comments",
    "author": "npomfret",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2019-07-18T15:48:26Z",
        "body": "> Should this result in 2 rows in the ledger (0.1BTC in and 232.2EUR out)?\r\n\r\nIdeally \u2013\u00a0it should yield two rows. However that comes at a cost of breaking `limit` in the edge cases with date-based pagination.\r\n\r\n> If so, how do I implement that in parseLedgerEntry?\r\n\r\nThere is more than one way to approach this, all of them ugly, but reliable:\r\n\r\n1. You could duplicate the entries and append a flag before passing them to parseLedger.\r\n2. You could return an array of entries from `parseLedgerEntry` and redefine `parseLedger` that would flatten the returned arrays into a single array.\r\n3. You could combine 1+2\r\n\r\nI'm more for 2, that would make the code more robust."
      },
      {
        "user": "npomfret",
        "created_at": "2019-07-18T15:53:45Z",
        "body": "@kroitor does this make sense:\r\n\r\n```\r\n    parseLedger (data, currency = undefined, since = undefined, limit = undefined, params = {}) {\r\n        let result = [];\r\n        const array = Object.values (data || []);\r\n        for (let i = 0; i < array.length; i++) {\r\n            const itemOrItems = this.extend (this.parseLedgerEntry (array[i], currency), params);\r\n            if (Array.isArray (itemOrItems)) {\r\n                for (let j = 0; i < itemOrItems.length; j++) {\r\n                    result.push (itemOrItems[j]);\r\n                }\r\n            } else {\r\n                result.push (itemOrItems);\r\n            }\r\n        }\r\n\r\n```"
      },
      {
        "user": "kroitor",
        "created_at": "2019-07-18T15:54:06Z",
        "body": "@npomfret we could also try to unify the flattening logic in the base methods, because that may be handy for implementing further enhancements. As you know, the exchanges are very inconsistent with how they call and structure various things..."
      }
    ]
  },
  {
    "number": 5516,
    "title": "Unable to fecth deposit address huobipro?",
    "created_at": "2019-07-15T11:49:11Z",
    "closed_at": "2019-07-15T12:55:52Z",
    "labels": [
      "duplicate",
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/5516",
    "body": "- OS: Any\r\n- Programming Language version: python3.6\r\n- CCXT version: 1.18.817\r\n- Exchange: huobipro\r\n- Method: fetchDepositAddress\r\n\r\n```bash\r\nTraceback (most recent call last):\r\n  File \"<input>\", line 1, in <module>\r\n  File \"/home/saurav/projects/computeex_django/env/lib/python3.6/site-packages/ccxt/huobipro.py\", line 823, in fetch_deposit_address\r\n    response = getattr(self, method)(self.extend(request, params))\r\n  File \"/home/saurav/projects/computeex_django/env/lib/python3.6/site-packages/ccxt/base/exchange.py\", line 423, in inner\r\n    return entry(_self, **inner_kwargs)\r\n  File \"/home/saurav/projects/computeex_django/env/lib/python3.6/site-packages/ccxt/base/exchange.py\", line 452, in request\r\n    return self.fetch2(path, api, method, params, headers, body)\r\n  File \"/home/saurav/projects/computeex_django/env/lib/python3.6/site-packages/ccxt/base/exchange.py\", line 448, in fetch2\r\n    return self.fetch(request['url'], request['method'], request['headers'], request['body'])\r\n  File \"/home/saurav/projects/computeex_django/env/lib/python3.6/site-packages/ccxt/base/exchange.py\", line 551, in fetch\r\n    self.handle_errors(response.status_code, response.reason, url, method, headers, http_response, json_response)\r\n  File \"/home/saurav/projects/computeex_django/env/lib/python3.6/site-packages/ccxt/huobipro.py\", line 948, in handle_errors\r\n    raise ExchangeError(feedback)\r\nccxt.base.errors.ExchangeError: huobipro {\"status\":\"error\",\"err-code\":\"login-required\",\"err-msg\":\"The account is not logged in, please log in and try again.\",\"data\":null}\r\n```\r\nMethods working:\r\nhuobipro.loadAccounts() \r\nhuobipro.fetchBalance()\r\n\r\n\r\n\r\nhuobipro.fetchDepositAddress(\"XRP\") is giving login-required error.",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/5516/comments",
    "author": "SauravKanchan",
    "comments": [
      {
        "user": "frosty00",
        "created_at": "2019-07-15T12:14:32Z",
        "body": "Please update CCXT, huobipro's `fetchDepositAddress` has been depreciated and they do not provide an API endpoint. The old code used an endpoint that was accessible from the browser but it now requires a session cookie (i.e. to be logged in)."
      }
    ]
  },
  {
    "number": 5359,
    "title": "Format sub-account Binance request",
    "created_at": "2019-06-25T12:58:21Z",
    "closed_at": "2019-06-25T13:39:38Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/5359",
    "body": "I'm looking into the Implicit API Methods of the manual but can't figure out how to call those sub-account functions for Binance.\r\n\r\nI thought it would be:\r\n\r\n`privateGetSubAccountList()\r\n`\r\n\r\nBut that doesn't work. Tried a few different ones but no luck. Any chance you could steer me in the right direction?\r\n\r\n\r\nLanguage: NodeJs\r\nExchange: Binance",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/5359/comments",
    "author": "charlie-eth",
    "comments": [
      {
        "user": "frosty00",
        "created_at": "2019-06-25T13:34:14Z",
        "body": "Hi there @calbertuk and thank you for using ccxt.\r\n\r\n> I'm looking into the Implicit API Methods of the manual but can't figure out how to call those sub-account functions for Binance.\r\n\r\nImplicit API methods are generated from the `exchange.api` property of an exchange instance. \r\n\r\nLooking at the `.api` of a binance object this is what I see:\r\n\r\n```\r\n  wapi:\r\n   { post: [ 'withdraw', 'sub-account/transfer' ],\r\n     get:\r\n      [ 'depositHistory',\r\n        'withdrawHistory',\r\n        'depositAddress',\r\n        'accountStatus',\r\n        'systemStatus',\r\n        'apiTradingStatus',\r\n        'userAssetDribbletLog',\r\n        'tradeFee',\r\n        'assetDetail',\r\n        'sub-account/list',\r\n        'sub-account/transfer/history',\r\n        'sub-account/assets' ] },\r\n```\r\n\r\nHence to generate the method that you want you need to join the parts of the endpoint you want. In this case I believe you are looking for `wapiGetSubAccountList`.\r\n\r\nNote that here the `-` is removed since it would be an invalid method in javascript otherwise. Let me know if you have any more questions : )"
      }
    ]
  },
  {
    "number": 5345,
    "title": "[therock] dealing with delisted currency",
    "created_at": "2019-06-23T17:34:27Z",
    "closed_at": "2019-06-23T19:03:00Z",
    "labels": [
      "enhancement",
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/5345",
    "body": "I'm getting this error when requesting withdrawals: `therock does not have currency code USD`.\r\n\r\nThat currency used to be supported.  Is there a recommended way to deal with this?  I'm thinking to just pass the `currency` directly.",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/5345/comments",
    "author": "npomfret",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2019-06-23T18:07:19Z",
        "body": "```Python\r\nexchange.currencies['USD'] = {\r\n    'id': 'USD',\r\n    'code': 'USD',\r\n}\r\nexchange.withdraw ('USD' ...\r\n```\r\n\r\nDoes this help?"
      },
      {
        "user": "kroitor",
        "created_at": "2019-06-23T18:19:46Z",
        "body": "Alternatively, we could add some switch or option across all exchanges, something like \"useCurrencyCodesAsIds\", that would skip the lookup in `this.currency()` base method. Easy to do, as we don't have to edit all exchanges."
      }
    ]
  },
  {
    "number": 5296,
    "title": "New Exchange: HollaEx",
    "created_at": "2019-06-14T01:19:09Z",
    "closed_at": "2020-03-05T05:22:12Z",
    "labels": [
      "question",
      "new exchange"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/5296",
    "body": "All endpoints added and tested. Failed test for Python, unsure why.\r\n\r\n```\r\n<type 'exceptions.KeyError'> 'hollaex' \r\n\r\n          File \"python/test/test.py\", line 403, in <module>\r\n            main()\r\n\r\n          File \"python/test/test.py\", line 380, in main\r\n            exchange = exchanges[argv.exchange] (explain @ run-tests.js:173)\r\n\r\n\r\nFAIL [\"hollaex\"] (run-tests.js:251)\r\n```\r\n\r\n\r\n\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/5296/comments",
    "author": "swkoyo",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2019-06-14T05:39:01Z",
        "body": "You can run that test with Python to see more details:\r\n\r\n```shell\r\n# in the ccxt folder\r\n$ npm run build\r\n$ python python/test/test.py hollaex --verbose\r\n```"
      },
      {
        "user": "swkoyo",
        "created_at": "2019-06-14T05:47:34Z",
        "body": "Thanks for the reply. Unfortunately, I'm still getting the same error messages...\r\n\r\n```\r\nroot@1b73c2b29588:/ccxt# python python/test/test.py hollaex --verbose\r\n<type 'exceptions.KeyError'> 'hollaex' \r\n\r\n  File \"python/test/test.py\", line 403, in <module>\r\n    main()\r\n\r\n  File \"python/test/test.py\", line 380, in main\r\n    exchange = exchanges[argv.exchange]\r\n\r\n<type 'exceptions.KeyError'> 'hollaex' \r\n\r\n  File \"python/test/test.py\", line 403, in <module>\r\n    main()\r\n\r\n  File \"python/test/test.py\", line 380, in main\r\n    exchange = exchanges[argv.exchange]\r\n```"
      },
      {
        "user": "kroitor",
        "created_at": "2019-06-14T05:48:23Z",
        "body": "@brandonkimmmm do you see that after running `npm run build`?"
      },
      {
        "user": "swkoyo",
        "created_at": "2019-06-14T05:48:26Z",
        "body": "JS and PHP are passing the tests. The only one not passing is Python. "
      },
      {
        "user": "kroitor",
        "created_at": "2019-06-14T05:48:48Z",
        "body": "@brandonkimmmm do you have a ccxt installed with pip globally? It can cause interference with the code of the tested `ccxt` package-folder (same name) going through the local tests. You can simply `pip uninstall` the global `ccxt` if that is the case."
      },
      {
        "user": "kroitor",
        "created_at": "2019-06-14T05:53:41Z",
        "body": "If a global `ccxt` is not installed on your system and you still get the error, but you can't run `npm run build` because you don't have `pandoc` \u2013 you can skip the build phase and just `npm run export-exchanges` \u2013\u00a0that should populate the local ccxt package-folder with hollaex and that should fix the KeyError."
      },
      {
        "user": "swkoyo",
        "created_at": "2019-06-14T05:54:23Z",
        "body": "@kroitor I'm running everything through the docker container and dont have ccxt installed globally"
      },
      {
        "user": "kroitor",
        "created_at": "2019-06-14T05:55:25Z",
        "body": "@brandonkimmmm then this should work:\r\n\r\n```\r\n# in ccxt repo folder\r\nnpm run export-exchanges\r\npython python/test/test.py hollaex --verbose\r\n```\r\n\r\nLet us know if that doesn't help."
      },
      {
        "user": "kroitor",
        "created_at": "2019-06-14T05:58:25Z",
        "body": "Also, before you run the tests, in order to test the private APIs, I suggest you to create a local `keys.local.json` file in the repo folder with your private key for testing the `fetchBalance`, `fetchOrder`, etc:\r\n\r\n`keys.local.json` in the repo root folder:\r\n\r\n```\r\n{\r\n    \"hollaex\": {\r\n        \"apiKey\": \"YOUR_API_KEY\",\r\n        \"secret\": \"YOUR_SECRET\"\r\n    }\r\n}\r\n```\r\n\r\n\u2191\u00a0and then run the tests after adding that file. That will make sure that all tests are fine indeed. No worries, it will not change or alter you balance in any way, all tests are non-intrusive."
      },
      {
        "user": "swkoyo",
        "created_at": "2019-06-14T06:07:22Z",
        "body": "@kroitor Hmmm, I followed the steps but am still getting the same error messages. \r\n\r\n```\r\nroot@1b73c2b29588:/ccxt# python python/test/test.py hollaex --verbose\r\n<type 'exceptions.KeyError'> 'hollaex' \r\n\r\n  File \"python/test/test.py\", line 403, in <module>\r\n    main()\r\n\r\n  File \"python/test/test.py\", line 380, in main\r\n    exchange = exchanges[argv.exchange]\r\n\r\n<type 'exceptions.KeyError'> 'hollaex' \r\n\r\n  File \"python/test/test.py\", line 403, in <module>\r\n    main()\r\n\r\n  File \"python/test/test.py\", line 380, in main\r\n    exchange = exchanges[argv.exchange]\r\n```\r\n\r\nI'm working on a fork of the repo that is `246 commits ahead, 371 commits behind ccxt:master.` Could this be a problem? Also, I had to `pip install tox` while inside the docker container. Not sure if that would affect anything. "
      },
      {
        "user": "kroitor",
        "created_at": "2019-06-14T06:24:19Z",
        "body": "@brandonkimmmm are you sure that:\r\n\r\n1. you did `npm run export-exchanges` before trying the tests?\r\n2. you did `pip list` and there's no `ccxt` there (if it's there, need to `pip uninstall ccxt` before running local tests)"
      },
      {
        "user": "swkoyo",
        "created_at": "2019-06-14T06:34:31Z",
        "body": "@kroitor I found the problem. I didn't have ccxt installed as a local package but it was present in the docker container. I'm getting the proper error messages now."
      },
      {
        "user": "kroitor",
        "created_at": "2019-06-14T06:54:49Z",
        "body": "> I didn't have ccxt installed as a local package but it was present in the docker container.\r\n\r\nYep, that's what I was asking about \u2013\u00a0if it was installed as a local package inside the environment (inside the docker container). Glad you've figured it out! Thx for the feedback!"
      },
      {
        "user": "swkoyo",
        "created_at": "2019-06-14T07:29:49Z",
        "body": "@kroitor Now all the tests are passing except for `--python3` tests. Not really getting any useful info either. \r\n\r\n```\r\nroot@e46c60995e4e:/ccxt# python3 python/test/test.py hollaex --verbose\r\n<class 'KeyError'> 'hollaex' \r\n\r\n  File \"python/test/test.py\", line 403, in <module>\r\n    main()\r\n\r\n  File \"python/test/test.py\", line 380, in main\r\n    exchange = exchanges[argv.exchange]\r\n\r\n<class 'KeyError'> 'hollaex' \r\n\r\n  File \"python/test/test.py\", line 403, in <module>\r\n    main()\r\n\r\n  File \"python/test/test.py\", line 380, in main\r\n    exchange = exchanges[argv.exchange]\r\n```\r\n```\r\nroot@e46c60995e4e:/ccxt# python3 -V\r\nPython 3.6.7\r\n```"
      },
      {
        "user": "kroitor",
        "created_at": "2019-06-14T07:32:23Z",
        "body": "@brandonkimmmm check if you have `pip3 list ccxt` as well, `python` and `python3` may be different as well as `pip` and `pip3`."
      },
      {
        "user": "lacksfish",
        "created_at": "2019-07-17T12:36:33Z",
        "body": "@kroitor @brandonkimmmm could you elaborate further what a mortal human has to do inside the docker container to get rid of the KeyError? All I really want to do is run the tests ...\r\n\r\n```\r\nFAILED exchangeName (Python): (explain @ run-tests.js:187)\r\n\r\n        <type 'exceptions.KeyError'> 'exchangeName' \r\n        \r\n          File \"python/test/test.py\", line 409, in <module>\r\n            main()\r\n        \r\n          File \"python/test/test.py\", line 386, in main\r\n            exchange = exchanges[argv.exchange] (explain @ run-tests.js:190)\r\n\r\nFAILED exchangeName (Python 2): (explain @ run-tests.js:187)\r\n\r\n        <type 'exceptions.KeyError'> 'exchangeName' \r\n        \r\n          File \"python/test/test.py\", line 409, in <module>\r\n            main()\r\n        \r\n          File \"python/test/test.py\", line 386, in main\r\n            exchange = exchanges[argv.exchange] (explain @ run-tests.js:190)\r\n\r\nFAILED exchangeName (Python 3): (explain @ run-tests.js:187)\r\n\r\n         (explain @ run-tests.js:190)\r\n\r\nWARN exchangeName (PHP): (explain @ run-tests.js:188)\r\n\r\n        string(11) \"./keys.json\"\r\n        PHP Notice:  Undefined index: exchangeName in /ccxt/php/test/test.php on line 230\r\n        PHP Warning:  A non-numeric value encountered in /ccxt/php/test/test.php on line 243\r\n        PHP Warning:  A non-numeric value encountered in /ccxt/php/test/test.php on line 243\r\n        0 (explain @ run-tests.js:190)\r\nFAIL [\"exchangeName\"] (run-tests.js:268)\r\nAll done, 1 failed (run-tests.js:273)\r\nnpm ERR! code ELIFECYCLE\r\nnpm ERR! errno 1\r\nnpm ERR! ccxt@1.18.941 test: `npm run build && node run-tests \"exchangeName\"`\r\nnpm ERR! Exit status 1\r\nnpm ERR! \r\nnpm ERR! Failed at the ccxt@1.18.941 test script.\r\nnpm ERR! This is probably not a problem with npm. There is likely additional logging output above.\r\n\r\n```"
      },
      {
        "user": "lacksfish",
        "created_at": "2019-07-17T12:42:41Z",
        "body": "From what I gathered, the docker is provided for ease of use, but what's the benefit if it does not work out of the box? I had to copy some commands from the travis script, and source the rest of the tricks and fixes from various issue threads... \r\n\r\nSo far I'm doing:\r\n\r\n```\r\nsudo -H pip3 install --upgrade setuptools pip wheel requests pyopenssl six tox twine setuptools web3 aiohttp requests cryptography pyopenssl\r\npip uninstall ccxt\r\n```\r\n\r\nto get the tests to work half-way"
      },
      {
        "user": "kroitor",
        "created_at": "2019-07-18T09:44:24Z",
        "body": "@lacksfish \r\n\r\n> could you elaborate further what a mortal human has to do inside the docker container to get rid of the KeyError?\r\n\r\nYou're running a wrong command. There's no exchange called `exchangeName`. The `exchangeName` is supposed to be substituted for a real exchange id by you, if you want to run the public tests."
      },
      {
        "user": "lacksfish",
        "created_at": "2019-07-18T10:27:45Z",
        "body": "I substituted the exchange I'm working on for \"exchangeName\". It is a placeholder only."
      },
      {
        "user": "kroitor",
        "created_at": "2019-07-18T11:40:56Z",
        "body": "@lacksfish then you need to make sure that the `npm run export-exchanges` stage was properly executed upon `npm run build`. And make sure that there's no globally installed previous version of ccxt with your `pip list`."
      }
    ]
  },
  {
    "number": 5260,
    "title": "Possible bug in commonCurrencies",
    "created_at": "2019-06-08T00:00:42Z",
    "closed_at": "2019-06-08T00:05:45Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/5260",
    "body": "- OS: *\r\n- Programming Language version: python\r\n- CCXT version: 1.18.593-643\r\n- Exchange: bitfinex\r\n- Method: commonCurrencies\r\n\r\nHi, I'm using the commonCurrencies in my code for margin trading on bitfinex. It think this has been broken in a recent release. You can see this the following way:\r\n\r\nif I do:\r\n```Python\r\nprint(str(ccxt.bitfinex.commonCurrencies.items()))\r\n```\r\nI get:\r\n```\r\ndict_items([('XBT', 'BTC'), ('BCC', 'BCH'), ('DRK', 'DASH'), ('BCHABC', 'BCH'), ('BCHSV', 'BSV')])\r\n```\r\n\r\nWhile this is not the list found in the bitfinex.py.. My guess is that this is Kraken (?)\r\n\r\nOr am I making a mistake somewhere? ",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/5260/comments",
    "author": "jdieks",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2019-06-08T00:05:45Z",
        "body": "> Or am I making a mistake somewhere?\r\n\r\nYes, the `commonCurrencies` is not a list of currencies for the exchange, it's a list of substitutions for for all the exchanges, which is inherited from the Exchange base class.\r\n\r\nIf you want to get a list of currencies for an exchange, you should check `.currencies` instead of `.commonCurrencies` after calling `load_markets()`:\r\n\r\n```Python\r\nfrom pprint import pprint\r\nimport ccxt\r\nexchange = ccxt.bitfinex({ 'enableRateLimit': True })\r\nexchange.load_markets()\r\npprint(exchange.currencies)\r\n```\r\n\r\nLet us know if that doesn't answer the question )"
      }
    ]
  },
  {
    "number": 5069,
    "title": "Bitfinex JS symbols.map is not a functiom",
    "created_at": "2019-05-07T04:46:35Z",
    "closed_at": "2019-05-07T05:06:02Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/5069",
    "body": "- OS: Javascript\r\n- Programming Language version: v11.13.0\r\n- CCXT version: latest\r\n- Exchange: bitfinex\r\n- Method: fetchTickers\r\n\r\nError: TypeError: symbols.map is not a function\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/5069/comments",
    "author": "ahmedbodi",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2019-05-07T04:57:00Z",
        "body": "@ahmedbodi can you please show your code to reproduce it? a full error stack and your verbose request/response? Can't reproduce it with the following code:\r\n\r\n```JavaScript\r\nconst ccxt = require ('ccxt')\r\nconst exchange = new ccxt.bitfinex ({ enableRateLimit: true })\r\n;(async () => {\r\n    const tickers = await exchange.fetchTickers ()\r\n   console.log (tickers)\r\n}) ()\r\n```"
      },
      {
        "user": "ahmedbodi",
        "created_at": "2019-05-07T04:57:55Z",
        "body": "```\r\nconst ccxt = require ('ccxt')\r\n\r\nlet clients = {}\r\n\r\nasync function fetchTickers(client, market)\r\n{\r\n    if (client.has['fetchTickers'])\r\n    {\r\n        try {\r\n            console.log(\"[\" + client.name + \"] Fetch \" + market + \" Tickers\");\r\n            ticker = await client.fetchTickers(market);\r\n        } catch (e) {\r\n            console.log(\"[\" + client.name + \"] Error Fetching \" + market + \" Tickers: \" + e);\r\n        }\r\n    }\r\n}\r\n\r\nasync function fetchOHLCVs(client, market)\r\n{\r\n    if (client.has['fetchOHLCV'])\r\n    {\r\n        try {\r\n            console.log(\"[\" + client.name + \"] Fetch \" + market + \" OHLCV\");\r\n            ohlcv = await client.fetchOHLCV(market);\r\n        } catch (e) {\r\n            console.log(\"[\" + client.name + \"] Error Fetching \" + market + \" OHLCV: \" + e);\r\n        }\r\n    }\r\n}\r\n\r\nasync function fetchOrderBooks(client, market)\r\n{\r\n    if (client.has['fetchOrderBook'])\r\n    {\r\n        try {\r\n            console.log(\"[\" + client.name + \"] Fetch \" + market + \" OrderBook\");\r\n            orderbook = await client.fetchOrderBook(market);\r\n        } catch (e) {\r\n            console.log(\"[\" + client.name + \"] Error Fetching \" + market + \"OrderBooks: \" + e);\r\n        }\r\n    }\r\n}\r\n\r\nasync function main()\r\n{\r\n    for (i in ccxt.exchanges)\r\n    {\r\n        // Create Exchange Client\r\n        exchange = ccxt.exchanges[i];\r\n        clients[exchange] = new ccxt[exchange]({'enableRateLimit': true});\r\n    }\r\n\r\n    // Setup Loops\r\n    while(true)\r\n    {\r\n        for (i in clients)\r\n        {\r\n            client = clients[i];\r\n\r\n            try {\r\n                // Load All Markets and currencies\r\n                markets = await client.loadMarkets();\r\n                currencies = client.currencies;\r\n            } catch (e) {\r\n                console.log(\"[\" + client.name + \"] Error: \" + e)\r\n            }\r\n\r\n            for (market in markets)\r\n            {\r\n                // Fetch Tickers\r\n                //await new Promise(resolve => setTimeout(() => resolve(fetchTickers(client, market)), 60));\r\n\r\n                // Fetch OHLCV\r\n                //await new Promise(resolve => setTimeout(() => resolve(fetchOHLCVs(client, market)), 60));\r\n\r\n                // Fetch OrderBook\r\n                //await new Promise(resolve => setTimeout(() => resolve(fetchOrderBooks(client, market)), 60));\r\n                await Promise.all([fetchTickers(client, market), fetchOHLCVs(client, market), fetchOrderBooks(client, market)]);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nmain()\r\n```"
      },
      {
        "user": "kroitor",
        "created_at": "2019-05-07T04:58:43Z",
        "body": "@ahmedbodi can you remove all the unnecessary parts? (make it the shortest possible snippet to reproduce the issue).\r\n\r\nDoes this work for you\r\n\r\n```JavaScript\r\nconst ccxt = require ('ccxt')\r\nconst exchange = new ccxt.bitfinex ({ enableRateLimit: true })\r\n;(async () => {\r\n    const tickers = await exchange.fetchTickers ()\r\n   console.log (tickers)\r\n}) ()\r\n```\r\n\r\n?"
      },
      {
        "user": "kroitor",
        "created_at": "2019-05-07T05:03:28Z",
        "body": "@ahmedbodi there's an error in your code, you're passing `market` to `fetchTickers` as the first argument, but it doesn't accept a `market` in the first argument:\r\n\r\n```JavaScript\r\n            ticker = await client.fetchTickers(market); //  \u2190 here\r\n            // should be \r\n            ticker = await client.fetchTickers();\r\n```\r\n\r\nThere are two methods:\r\n\r\n- `fetchTicker (symbol)` (for one symbol)\r\n- `fetchTickers ()` (for all symbols)\r\n\r\n\u2191 You're calling fetchTickers with a `market` argument which is a mistake."
      }
    ]
  },
  {
    "number": 5028,
    "title": "1M gives 1m results",
    "created_at": "2019-04-25T12:26:38Z",
    "closed_at": "2019-04-25T17:21:49Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/5028",
    "body": "Looks like 1M (monthly timeframes according to docs) gives the minutely interval (1m).\r\nThe demonstration below is done in the node command line and as you can see, the resulting OHLCV data is only 1 minute apart.\r\n\r\n- OS: OSX\r\n- Programming Language version: NodeJS v10.15.3\r\n- CCXT version: 1.18.489\r\n- Exchange: kraken\r\n- Method: fetch_ohlcv()\r\n\r\n```\r\n> var ccxt                  = require ('ccxt');\r\nundefined\r\n> var datasource = new ccxt['kraken']()\r\nundefined\r\n> var promise =  this.datasource.fetch_ohlcv(\"ETH/USD\", \"1M\", 1516150760000)\r\nundefined\r\n> promise\r\nPromise {\r\n  [ [ 1556151180000, 165.71, 165.86, 165.71, 165.86, 6.83113309 ],\r\n    [ 1556151240000, 165.87, 165.89, 165.82, 165.89, 93.13941199 ],\r\n    [ 1556151300000, 165.89, 166.71, 165.89, 166.32, 790.36810312 ],\r\n    [ 1556151360000, 166.32, 166.37, 166.3, 166.33, 131.81207007 ],\r\n    [ 1556151420000, 166.33, 166.33, 165.9, 165.94, 27.16285409 ],\r\n    [ 1556151480000, 165.94, 166.11, 165.89, 166.09, 8.02807113 ],\r\n    [ 1556151540000, 166.09, 166.21, 166.09, 166.21, 0.55489426 ],\r\n    [ 1556151600000, 166.21, 166.22, 166.2, 166.22, 5.37958814 ],\r\n    [ 1556151660000, 166.22, 166.22, 165.9, 165.9, 14.72007301 ],\r\n    [ 1556151720000, 165.97, 165.98, 165.89, 165.9, 7.15311929 ],\r\n    [ 1556151780000, 165.9, 166.02, 165.89, 165.97, 12.7562017 ],\r\n    [ 1556151840000, 165.97, 165.97, 165.8, 165.8, 6.21435547 ],\r\n    [ 1556151900000, 165.8, 165.8, 165.8, 165.8, 6.50588532 ],\r\n    [ 1556151960000, 165.8, 165.83, 165.65, 165.65, 21.70730336 ],\r\n    [ 1556152020000, 165.65, 165.66, 165.61, 165.66, 101.22979868 ],\r\n    [ 1556152080000, 165.71, 165.79, 165.65, 165.65, 63.29969223 ],\r\n    [ 1556152140000, 165.56, 165.69, 165.53, 165.57, 23.3977552 ],\r\n    [ 1556152200000, 165.57, 165.57, 165.55, 165.55, 4.78227673 ],\r\n    [ 1556152260000, 165.55, 165.56, 165.55, 165.55, 5.04401131 ],\r\n    [ 1556152320000, 165.55, 165.55, 165.5, 165.51, 77.24501892 ],\r\n    [ 1556152380000, 165.51, 165.51, 165.5, 165.5, 0.11443401 ],\r\n    [ 1556152440000, 165.5, 165.5, 165.5, 165.5, 3.71300558 ],\r\n    [ 1556152500000, 165.5, 165.56, 165.5, 165.52, 23.28890123 ],\r\n    [ 1556152560000, 165.65, 165.65, 165.6, 165.62, 21.24251921 ],\r\n    [ 1556152620000, 165.62, 165.73, 165.6, 165.6, 153.83321368 ],\r\n    [ 1556152680000, 165.6, 165.6, 165.55, 165.58, 254.47546306 ],\r\n    [ 1556152740000, 165.62, 165.64, 165.59, 165.64, 10.08461208 ],\r\n    [ 1556152800000, 165.64, 166, 165.55, 165.56, 682.23911942 ],\r\n    [ 1556152860000, 165.65, 165.65, 165.5, 165.53, 252.93628685 ],\r\n    [ 1556152920000, 165.52, 165.52, 164.74, 164.74, 187.74177186 ],\r\n    ... 620 more items ],\r\n  domain:\r\n   Domain {\r\n     domain: null,\r\n     _events:\r\n      [Object: null prototype] {\r\n        removeListener: [Function: updateExceptionCapture],\r\n        newListener: [Function: updateExceptionCapture],\r\n        error: [Function: debugDomainError] },\r\n     _eventsCount: 3,\r\n     _maxListeners: undefined,\r\n     members: [] } }\r\n> new Date(1556151180000)\r\n2019-04-25T00:13:00.000Z\r\n> new Date(1556151240000)\r\n2019-04-25T00:14:00.000Z\r\n```\r\n\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/5028/comments",
    "author": "nwocykra",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2019-04-25T17:20:14Z",
        "body": "@nwocykra kraken does not support the `1M` timeframe:\r\n\r\n```JavaScript\r\n> const ccxt = require ('ccxt')\r\nundefined\r\n> const exchange = new ccxt.kraken()\r\nundefined\r\n> console.log (exchange.timeframes)\r\n{ '1m': '1',\r\n  '5m': '5',\r\n  '15m': '15',\r\n  '30m': '30',\r\n  '1h': '60',\r\n  '4h': '240',\r\n  '1d': '1440',\r\n  '1w': '10080',\r\n  '2w': '21600' } // \u2190--------- no 1M here\r\n```\r\n\r\nWe will add a warning for this shortly. Let us know if that doesn't answer the question."
      }
    ]
  },
  {
    "number": 4828,
    "title": "The \"percentage\" is not returned for all exchanges in loadMarkets()",
    "created_at": "2019-03-13T17:44:19Z",
    "closed_at": "2019-03-13T20:09:17Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/4828",
    "body": "OS: Windows 10\r\nProgramming Language version: Node.js\r\nCCXT version: #465\r\nExchange: All Exchanges\r\nNode.js 11.9.0 installed\r\nMethod: exchange.loadMarkets()\r\n\r\nHello!\r\n\r\nI have a question about the **\"percentage\"** parameter when requesting:\r\n```javascript\r\nconst markets = await exchange.loadMarkets()\r\n```\r\nI could see that for some exchanges **\"percentage\"** is present in the returnd JSON and other exchanges not. If looking at the below example binance has **\"percentage\"** and coinex doesn't.\r\n\r\nFor coinex, this information is shown. Then I wonder how to think. Is this **\"percentage\"** or not. I am bit confused there?\r\n**\"taker\":0.001,\"maker\":0.001**\r\n\r\n**JSON for binance and coinex:**\r\n**coinex**\r\n\"BBN/BCH\":{\"limits\":{\"amount\":{\"min\":1},\"price\":{\"min\":1e-8}},\"precision\":{\"amount\":8,\"price\":8},\"taker\":0.001,\"maker\":0.001,\"id\":\"BBNBCH\",\"symbol\":\"BBN/BCH\",\"base\":\"BBN\",\"quote\":\"BCH\",\"baseId\":\"BBN\",\"quoteId\":\"BCH\",\"active\":true\r\n\r\n**binance**\r\n\"ETH/BTC\":{\"limits\":{\"amount\":{\"min\":0.001,\"max\":100000},\"price\":{},\"cost\":{\"min\":0.001}},\"precision\":{\"base\":8,\"quote\":8,\"amount\":3,\"price\":6},\"tierBased\":false,\"percentage\":true,\"taker\":0.001,\"maker\":0.001,\"id\":\"ETHBTC\",\"symbol\":\"ETH/BTC\",\"base\":\"ETH\",\"quote\":\"BTC\",\"baseId\":\"ETH\",\"quoteId\":\"BTC\"\r\n\r\n\r\n\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/4828/comments",
    "author": "jackpotcityco",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2019-03-13T20:09:17Z",
        "body": "> Then I wonder how to think. Is this \"percentage\" or not. I am bit confused there?\r\n\r\nIn general, it's always a percentage, unless percentage is defined (not undefined) and has a value of `false`. If you don't see it defined anywhere or it has a value different from `false`, then it's true. \r\n\r\nSo, in this particular case you can assume percentages safely.\r\n\r\nLet us know if that doesn't answer the question. We will unify this aspect with coinex and other exchanges, thx for reporting!"
      }
    ]
  },
  {
    "number": 4795,
    "title": "questions about order structure",
    "created_at": "2019-03-05T23:37:29Z",
    "closed_at": "2019-03-05T23:45:26Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/4795",
    "body": "Regarding the order `status`, the docs say:\r\n\r\n>     'status':     'open',         // 'open', 'closed', 'canceled'\r\n\r\nIf an order is partially filled and then cancelled, what should the status be?\r\n\r\nRegarding the `cost`:\r\n\r\n>     'cost':        0.076094524,   // 'filled' * 'price' (filling price used where available)\r\n\r\nIf the _filling price_ isn't available, should this field be left blank?  (I think it should)",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/4795/comments",
    "author": "npomfret",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2019-03-05T23:45:26Z",
        "body": "> If an order is partially filled and then cancelled, what should the status be?\r\n\r\n- `status == 'canceled'`\r\n- `filled > 0`\r\n- `filled < amount`\r\n\r\n> If the filling price isn't available, should this field be left blank? (I think it should)\r\n\r\nThe problem is 3/4 of exchanges do not actually return the filling price or assume filling price = limit price in their engines. So, we only fill it if\r\n- the exchange provides the actual cost in the response, so we don't have to calculate it\r\n- the exchange doesn't provide the actual cost from the API we use `filled * price` with the most accurate price available:\r\n  - if the exchange specifies the filling price \u2013 we use that\r\n  - otherwise we use the limit price from the exchange response\r\n\r\nLet us know if that doesn't answer your questions."
      },
      {
        "user": "kroitor",
        "created_at": "2019-03-06T08:23:16Z",
        "body": "> Do you mean the limit price the original order was set at? \r\n\r\nNope, when you query an order by id \u2013\u00a0you don't specify the price of the original order.\r\nSay, you `fetchOrder (someId)`. You get an order response from the exchange.\r\n\r\nIt could look like\r\n\r\n```JavaScript\r\n    ...\r\n    amount: 5,\r\n    price: 2, // this is the limit price, but we take it from this response, not from the original order\r\n    cost: 10,  // \u2190 this can be missing\r\n    filling_price: 2, // \u2190 this can be missing\r\n    ...\r\n```\r\n\r\n\u2191 If the cost and the filling price are both missing, then the only thing we can take for the cost is `amount * price`. In most cases exchanges won't provide any further detail. Otherwise you just don't rely on the order cost at all, and use `fetchMyTrades` or `fetchOrderTrades` to get the actual executed fills and filling prices/costs for your trades per order.\r\n\r\nIn other words, we don't use the params of the original order and we only use the values from the response, if those values are provided by the exchange. There's one special case that involves the `orders` cache, but very few exchanges actually implement it.\r\n\r\n> If so this could result in an inaccurate figure, no?\r\n\r\nYes, however, the figure will be as accurate as you can get from that endpoint of that exchange.\r\n\r\n"
      },
      {
        "user": "kroitor",
        "created_at": "2019-03-06T08:35:47Z",
        "body": "> For what it's worth I think leaving it blank, rather than potentially providing an inaccurate figure, is best.\r\n\r\nI totally agree on this, so, if you notice a lying cost somewhere, please do let us know."
      }
    ]
  },
  {
    "number": 4779,
    "title": "Question about: enableRateLimit': true",
    "created_at": "2019-03-03T23:25:59Z",
    "closed_at": "2019-03-04T13:32:15Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/4779",
    "body": "OS: Windows 10\r\nProgramming Language version: Node.js\r\nCCXT version: #465\r\nExchange: Binance\r\nNode.js 11.9.0 installed\r\nMethod: exchange.fetchOrderBook\r\n\r\nHello!\r\n\r\nI have a working code below to get the orderbooks for 3 symbols in a loop at Binance.\r\n\r\nMy question is about the ratelimit. I know Binance has 1200 requests/minute but I am a bit confused when I see the below ratelimit information.\r\n\r\n**Should I in my code use: 'enableRateLimit': true ?**\r\n\r\nenableRateLimit': true (Takes 3 seconds)\r\n**enableRateLimit': false (Takes 1 second) This is not a good id\u00e9a to do?**\r\n\r\nAssume that I only would run this code once every minute which would be clearly below 1200 requests/minute. Is there Also a limit as the manual says to ONLY do 1 HTTP requests per 2000 milliseconds as this also can get ones IP banned?\r\n\r\n\r\n`**\"rateLimits\": [{\r\n    \"rateLimitType\": \"REQUESTS\",\r\n    \"interval\": \"MINUTE\",\r\n    \"limit\": 1200\r\n  },**\r\n\r\n### _\"rateLimit: A request rate limit in milliseconds. Specifies the required minimal delay between two consequent HTTP requests to the same exchange\"_`\r\n\r\n```javascript\r\n'use strict';\r\nconst ccxt = require('ccxt');\r\nconst fs = require('fs');\r\nconst path = require('path');\r\n\r\n\r\nvar i;\r\nconst exchangename = \"binance\";\r\nconst exchange = new ccxt.binance({\r\n    'enableRateLimit': true\r\n});\r\n\r\n(async () => {\r\n    console.log(`start`);\r\n    const start = Date.now();\r\n\r\n\r\n    var orderbookPromises = []\r\n    var symbols = ['ETH/BTC', 'LTC/BTC', 'ZRX/ETH']\r\n    for (i = 0; i < symbols.length; i++) {\r\n\r\n        const symbol = symbols[i]\r\n        \r\n        try {\r\n                let tickerProcessing = new Promise(async (resolve) => {\r\n                    const orderbook = await exchange.fetchOrderBook(symbol, 5);\r\n\r\n                    const exchangename2 = exchangename + '#' + symbol.replace(\"/\", \"\")\r\n                    const dumpFile = path.join(__dirname, 'orderbooks', `${exchangename2}Orderbook.txt`);\r\n                await fs.promises.writeFile(dumpFile, JSON.stringify(orderbook));\r\n                resolve()\r\n            })\r\n            orderbookPromises.push(tickerProcessing)\r\n\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n\r\n    // wait for all of them to execute or fail\r\n    await Promise.all(orderbookPromises)\r\n\r\n\r\n    const end = Date.now();\r\n    console.log(`Done in ${(end - start) / 1000} seconds`);\r\n})();\r\n\r\n```\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/4779/comments",
    "author": "jackpotcityco",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2019-03-04T13:18:34Z",
        "body": "> Should I in my code use: 'enableRateLimit': true ?\r\n\r\nDepends on what your code does, of course. We can't answer what your code should do )\r\n\r\n> enableRateLimit': false (Takes 1 second) This is not a good id\u00e9a to do?\r\n\r\nIt's ok as long as you know what you're doing.\r\n\r\n> Assume that I only would run this code once every minute which would be clearly below 1200 requests/minute. \r\n\r\nIn that case, the above idea is ok.\r\n\r\n> Is there Also a limit as the manual says to ONLY do 1 HTTP requests per 2000 milliseconds as this also can get ones IP banned?\r\n\r\nNo, there is no such specific limit defined in the Manual. The Manual says that there's a default value for the rate limit, but the actual threshold value depends on the exchange in question. Each exchange has its own rate-limits. So, you should treat that value in a flexible way. The Manual also says that the default will be sub-optimal, so the user should tweak those values for the needs of his application.\r\n\r\nLet us know if that doesn't answer the question."
      }
    ]
  },
  {
    "number": 4684,
    "title": "Add fetchBalance on trade account Kucoin2",
    "created_at": "2019-02-18T15:29:43Z",
    "closed_at": "2019-02-18T15:52:36Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/4684",
    "body": "At the moment fetchBalance() on Kucoin2 (newly released platform) returns balance from main account with no option to get balance from the trade account. Could this be added please?",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/4684/comments",
    "author": "charlie-eth",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2019-02-18T15:53:57Z",
        "body": "@calbertuk you can choose whatever it is:\r\n\r\n```JavaScript\r\nfetchBalance ({'type': 'trade'}) // this is the default as of version 1.18.248\r\n```\r\n\r\nor\r\n\r\n```JavaScript\r\nfetchBalance ({'type': 'main'}) // this is the default prior to version 1.18.248\r\n```\r\n\r\nLet us know if that does not help."
      },
      {
        "user": "MarcelBeining",
        "created_at": "2019-02-18T16:31:08Z",
        "body": "Oh, no wonder, on pip, latest version is 1.18.247 ^^"
      }
    ]
  },
  {
    "number": 4637,
    "title": "Gemini fetchMyTrades requires symbol",
    "created_at": "2019-02-09T17:09:51Z",
    "closed_at": "2019-02-10T02:02:55Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/4637",
    "body": "Most exchanges use fetchMyTrades to obtain trades for all symbols. Gemini does not: a symbol is required. fetchMyTrades ought to behave uniformly for all exchanges.\r\n\r\nI've updated Gemini.js in two ways. First, the current fetchMyTrades has become fetchMyTradesBySymbol. I'm reasonably certain that is not a naming convention that will stay but its my initial suggestion. Second, I've created a new fetchMyTrades that iterates over the symbols at Gemini and calls fetchMyTradesBySymbol for each one. \r\n\r\nThis may not be ideal behavior as it will send in a number of REST API requests. I looked at the Gemini API specs here. It does indicate to provide a symbol but I have not tested out whether it works without one or not. I do have my own Gemini api js library so I can test it independently, but I may not be able to get to it too soon. \r\n\r\n@kroitor -- please advise if I ought to be raising issues for any/every potential pull request. I have a few more as I'm trying to get uniform access (esp via fetchMyTrades) for the exchanges that I use. Until I hear otherwise, I will raise as an issue first.",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/4637/comments",
    "author": "gRittyKitty",
    "comments": [
      {
        "user": "frosty00",
        "created_at": "2019-02-09T19:16:40Z",
        "body": "Hi @gRittyKitty,\r\n\r\n> Most exchanges use fetchMyTrades to obtain trades for all symbols. Gemini does not: a symbol is required. fetchMyTrades ought to behave uniformly for all exchanges.\r\n\r\nNope, sometimes `fetchMyTrades` requires a symbol. If you want to write code that is exchange agnostic you need to provide a symbol. \r\n\r\n>  Second, I've created a new fetchMyTrades that iterates over the symbols at Gemini and calls fetchMyTradesBySymbol for each one.\r\n\r\nThis is not allowed in the library because it breaks the rule \"one request per unified method\". The reason for this rule is that it allows people to write async python code that can do other stuff while it is waiting. Having 100 calls in one method would mean python would have to evaluate them all synchronously."
      },
      {
        "user": "kroitor",
        "created_at": "2019-02-10T02:02:55Z",
        "body": "Thx @frosty00 !\r\n\r\n@gRittyKitty \r\n\r\n> Is there a way to tell programmatically if fetchMyTrades needs a symbol or gets data for all symbols?\r\n\r\nWe don't have a full description of the schema yet, but we will have it hopefully soon. In the meantime the method will throw an `ArgumentsRequired` exception if it needs a symbol, so, you can catch that exception and try with a symbol then.\r\n\r\n```JavaScript\r\nlet trades = undefined\r\ntry {\r\n    trades = await exchange.fetchMyTrades ()\r\n} catch (e) {\r\n    if (e instanceof ccxt.ArgumentsRequired) {\r\n        trades = await exchange.fetchMyTrades (symbol)\r\n    } else {\r\n        throw e\r\n    }\r\n}\r\n```\r\n\r\nHope this helps.\r\n"
      },
      {
        "user": "jurgenmela28",
        "created_at": "2019-07-24T15:25:37Z",
        "body": "> Thx @frosty00 !\r\n> \r\n> @gRittyKitty\r\n> \r\n> > Is there a way to tell programmatically if fetchMyTrades needs a symbol or gets data for all symbols?\r\n> \r\n> We don't have a full description of the schema yet, but we will have it hopefully soon. In the meantime the method will throw an `ArgumentsRequired` exception if it needs a symbol, so, you can catch that exception and try with a symbol then.\r\n> \r\n> ```js\r\n> let trades = undefined\r\n> try {\r\n>     trades = await exchange.fetchMyTrades ()\r\n> } catch (e) {\r\n>     if (e instanceof ccxt.ArgumentsRequired) {\r\n>         trades = await exchange.fetchMyTrades (symbol)\r\n>     } else {\r\n>         throw e\r\n>     }\r\n> }\r\n> ```\r\n> \r\n> Hope this helps.\r\n\r\ncome on mate, we do not have problem how to handle errors...we want to fetch all them at the same time not by symbol param? any solution"
      },
      {
        "user": "kroitor",
        "created_at": "2019-07-24T15:29:34Z",
        "body": "@jurgenmela28\r\n\r\n> we want to fetch all them at the same time not by symbol param?\r\n\r\nYou should forward that question to the API devs of the exchange you're asking about. Because this is a requirement of the underlying exchange API, not a requirement of CCXT. Some exchanges will allow querying without a symbol (all trades at once), others will not tolerate that and will throw an error."
      }
    ]
  },
  {
    "number": 4601,
    "title": "fetchMinOrderAmounts is used in wrong location",
    "created_at": "2019-02-01T14:18:44Z",
    "closed_at": "2019-02-01T14:38:22Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/4601",
    "body": "You scrape the minOrderAmounts nicely fro kraken, but they are per currency, not per pair. As such I would expect them to be populated when I do a call to `fetchCurrencies`, and not in `fetchMarkets`.\r\n\r\n- Programming Language version: es6\r\n- CCXT version: 1.18.190\r\n- Exchange: kraken\r\n- Method: fetchMarkets\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/4601/comments",
    "author": "Morriz",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2019-02-01T14:38:22Z",
        "body": "@Morriz min order amount is actually a property of a market (pair), if you think of it, this is more flexible than having min order amount per currency. \r\n\r\nSome exchanges have min order amount that varies for the same currency in different pairs. It is really a per-market property, not a per-currency property, therefore we load it for markets, not for currencies.\r\n\r\nYou can't trade (place orders) with a single currency \u2013 orders are not compatible with single currencies logically. You can trade with a pair of currencies only. In that pair you order one currency for a promise to pay another currency. So min order amount is always related to one currency in a pair of currencies (logically). And putting min order amount into the currency structure would be a structural mistake that would allow to handle Kraken, but no other exchange. \r\n\r\nWe choose to go another way and we have min order amount in the market structure, which covers Kraken as well as the other exchanges, so it's more generic and versatile to have that property in the market structure, not in the currency structure. \r\n\r\nHope this answers your question, let me know if not."
      }
    ]
  },
  {
    "number": 4374,
    "title": "Python ujson has much better performance than the std json",
    "created_at": "2018-12-24T03:10:16Z",
    "closed_at": "2018-12-25T03:05:41Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/4374",
    "body": "Is it possible to use ujson(or yajl) instead of the std json in CCXT?\r\nThanks!\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/4374/comments",
    "author": "ngugcx",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2018-12-25T03:05:41Z",
        "body": "> Is it possible to use ujson(or yajl) instead of the std json in CCXT?\r\n\r\nSure!\r\n\r\nLet me know if this does not answer your question:\r\n\r\n```Python\r\nimport ccxt\r\nimport ujson\r\nexchange = ccxt.binance({\r\n    'parse_json': ujson.loads\r\n})\r\nprint(exchange.fetchTicker('ETH/BTC'))\r\n```"
      },
      {
        "user": "ngugcx",
        "created_at": "2018-12-26T03:49:36Z",
        "body": "Thanks! This works for normal exchanges.\r\nExchanges like cryptopia whose responses need to be normalized  before json-parsing will fail. "
      },
      {
        "user": "kroitor",
        "created_at": "2018-12-26T03:54:45Z",
        "body": "> Exchanges like cryptopia whose responses need to be normalized before json-parsing will fail.\r\n\r\nYep, but you can do a cryptopia-specific override in the same manner and fix the json before calling `loads`, basically, as long as you can override everything \u2013\u00a0this isn't an issue in CCXT )\r\n\r\n"
      }
    ]
  },
  {
    "number": 4361,
    "title": "Kucoin fetchClosedOrders returns order id not fill id",
    "created_at": "2018-12-19T19:45:56Z",
    "closed_at": "2018-12-19T19:51:07Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/4361",
    "body": "```\r\n{ info:\r\n   { coinType: 'KCS',\r\n     amount: 12.4203,\r\n     dealValue: 0.178902,\r\n     fee: 0.0124203,\r\n     dealDirection: 'SELL',\r\n     coinTypePair: 'ETH',\r\n     oid: '5a5475395e39307a6b8e7876',\r\n     dealPrice: 0.014404,\r\n     orderOid: '5a5475105e39307beec73298',\r\n     feeRate: 0.001,\r\n     createdAt: 1515484473000,\r\n     id: 575992,\r\n     direction: 'BUY',\r\n     status: 'closed' },\r\n  id: '5a5475105e39307beec73298',\r\n  timestamp: 1515484473000,\r\n  datetime: '2018-01-09T07:54:33.000Z',\r\n  lastTradeTimestamp: undefined,\r\n  symbol: 'KCS/ETH',\r\n  type: 'limit',\r\n  side: 'buy',\r\n  price: 0.014404,\r\n  amount: 12.4203,\r\n  cost: 0.178902,\r\n  filled: 12.4203,\r\n  remaining: 0,\r\n  status: 'closed',\r\n  fee: { cost: 0.0124203, rate: 0.001, currency: 'KCS' },\r\n  trades: undefined }\r\n {info:\r\n   { coinType: 'KCS',\r\n     amount: 1.3211,\r\n     dealValue: 0.01902912,\r\n     fee: 0.0013211,\r\n     dealDirection: 'BUY',\r\n     coinTypePair: 'ETH',\r\n     oid: '5a5475115e39307a6b8e786f',\r\n     dealPrice: 0.014404,\r\n     orderOid: '5a5475105e39307beec73298',\r\n     feeRate: 0.001,\r\n     createdAt: 1515484433000,\r\n     id: 575985,\r\n     direction: 'BUY',\r\n     status: 'closed' },\r\n  id: '5a5475105e39307beec73298',\r\n  timestamp: 1515484433000,\r\n  datetime: '2018-01-09T07:53:53.000Z',\r\n  lastTradeTimestamp: undefined,\r\n  symbol: 'KCS/ETH',\r\n  type: 'limit',\r\n  side: 'buy',\r\n  price: 0.014404,\r\n  amount: 1.3211,\r\n  cost: 0.01902912,\r\n  filled: 1.3211,\r\n  remaining: 0,\r\n  status: 'closed',\r\n  fee: { cost: 0.0013211, rate: 0.001, currency: 'KCS' },\r\n  trades: undefined }\r\n```\r\n\r\nThis means that the `id` for each trade will be duplicated. We need to use `info.oid`.",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/4361/comments",
    "author": "shortcircuit3",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2018-12-19T19:49:19Z",
        "body": "Are you sure it's `fetchMyTrades`? Looks like an array of orders to me) You probably mean `fetchClosedOrders`?"
      },
      {
        "user": "shortcircuit3",
        "created_at": "2018-12-19T19:51:37Z",
        "body": "@kroitor Youre right. my bad, it is fetchClosedOrders.\r\n\r\nThis is confusing that it returns the fills and were required to aggregate by id. Shouldn't we still use `oid`?"
      },
      {
        "user": "kroitor",
        "created_at": "2018-12-19T19:54:51Z",
        "body": "> This is confusing that it returns the fills and were required to aggregate by id. Shouldn't we still use oid?\r\n\r\nYes, but it is there for historical reasons mostly... It comes from the way the Kucoin API itself is structured.\r\n\r\nAnyways, for the orders `orderOid` should have the priority, and for the trades we have trade id `oid` and `orderOid` in the field order id. So everything was ok apparently, no? )"
      },
      {
        "user": "shortcircuit3",
        "created_at": "2018-12-19T19:57:32Z",
        "body": "Ok, I guess `fetchMyTrades` uses the same endpoint with the correct data. False alarm, just confusing. Thank you!"
      }
    ]
  },
  {
    "number": 4211,
    "title": "API Keys Setup - Any function to know exactly what parameter to pass",
    "created_at": "2018-11-22T14:05:29Z",
    "closed_at": "2018-11-22T14:10:49Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/4211",
    "body": "I have read the API Keys Setup wiki and understood there are parameters like apiKey, secret, uid and password, but not all exchange require all the parameter.\r\nIs there any function or method that will tell me exactly which parameter to pass for each exchange.\r\n\r\nSomething like:\r\n```\r\n$quoinex = new \\ccxt\\quoinex ();\r\n$quoinex->getParam(); // ------> This will return apiKey and secret\r\n$1btcxe = new \\ccxt\\1btcxe ();\r\n$1btcxe->getParam(); // -------> This will return only apiKey\r\n```\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/4211/comments",
    "author": "rohit1290",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2018-11-22T14:10:49Z",
        "body": "See the property named `requiredCredentials` on the exchange instance:\r\n\r\n```PHP\r\n$exchange = new \\ccxt\\quoinex ();\r\nvar_dump ($exchange->requiredCredentials);\r\n```\r\n\r\nLet us know if that does not answer your question."
      }
    ]
  },
  {
    "number": 4050,
    "title": "bittrex fetchDeposits returns no timestamp and datetime",
    "created_at": "2018-10-26T07:28:05Z",
    "closed_at": "2018-10-26T07:50:52Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/4050",
    "body": "- OS: Linux\r\n- Programming Language version: PHP\r\n- CCXT version: 1.17.421\r\n- Exchange: bittrex\r\n- Method: fetchDeposit\r\n\r\nThe only timestamp returned from the exchnage for withdrawals is in the 'LastUpdated' field. This should probably be used for the timestamp and datetime. The 'Opened' field that is used for Withdrawals is not available when fetching deposits",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/4050/comments",
    "author": "WoK-E",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2018-10-26T07:37:26Z",
        "body": "> The only timestamp returned from the exchnage for withdrawals is in the 'LastUpdated' field. This should probably be used for the timestamp and datetime. \r\n\r\nNope, unfortunately, we can't set that timestamp there, because it literally means the last updated timestamp, therefore it is in the transaction structure, in the `updated` field. We don't invent values where the exchange in question does not provide them. You can add that logic to your code in userland on client-side, namely, *\"consider `updated` for Bittrex deposits a `timestamp`\"*. But, unfortunately, this may not play well for all users equally. The other signifcant reason behind it is that the LastUpdated field can change, which should not happen to a unified `timestamp` (it should always be fixed, unchanging, if set).\r\n\r\n> The 'Opened' field that is used for Withdrawals is not available when fetching deposits\r\n\r\nRight, this is by design again, same reasoning basically. Anyways, they don't support any date-based pagination for deposits and withdrawals whatsoever.\r\n\r\nDoes the above answer your question? )\r\n\r\n"
      }
    ]
  },
  {
    "number": 3840,
    "title": "deployment error in a google / firebase cloud function",
    "created_at": "2018-09-13T12:03:17Z",
    "closed_at": "2018-09-13T12:10:41Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/3840",
    "body": "I'm unable to use ccxt in a cloud function.  When I start locally the deployment dies if I add the line `const cctx = require('cctx');`.  The same does not happen for other dependencies such as `const uuid = require('uuid');`\r\n\r\nI've added (both) packages to my _package.json_ file, run `npm install` and I can see them both in my _node_modules_ directory.  I've tried cleaning the cache.\r\n\r\n ```\r\n \"dependencies\": {\r\n    \"ccxt\": \"^1.17.283\",\r\n    \"firebase-admin\": \"^6.0.0\",\r\n    \"firebase-functions\": \"^2.0.5\",\r\n    \"uuid\": \"^3.3.2\"\r\n  },\r\n```\r\n\r\nHere's the error:\r\n\r\n```\r\n$ firebase serve  --only functions\r\n\r\n=== Serving from '/Users/crypro/projects/CrypPro-marketdata/firebase'...\r\n\r\ni  functions: Preparing to emulate functions.\r\n\u26a0  functions: Failed to load functions source code. Ensure that you have the latest SDK by running npm i --save firebase-functions inside the functions directory.\r\n\u26a0  functions: Error from emulator. Error parsing triggers: Cannot find module 'cctx'\r\n\r\nTry running \"npm install\" in your functions directory before deploying.\r\n```\r\n\r\nI'm using:\r\n\r\n```\r\n$ node --version\r\nv6.11.5\r\n$ npm --version\r\n6.4.1\r\n$ firebase --version\r\n4.2.1\r\n```\r\n\r\nI'm guessing there's something different between the _uuid_ npm package and the _ccxt_ one, but I've no idea what.\r\n\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/3840/comments",
    "author": "npomfret",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2018-09-13T12:07:29Z",
        "body": "> functions: Error from emulator. Error parsing triggers: Cannot find module 'cctx'\r\n\r\n\u2193\r\n\r\n```JavaScript\r\nconst cctx = require('cctx');\r\n// \u2191\u2191\u2191\u2191 cctX \u2192 ccXt \u2191\u2191\u2191\u2191 \r\n```"
      },
      {
        "user": "npomfret",
        "created_at": "2018-09-13T12:13:04Z",
        "body": "... as s side question, i get another error from firebase which looks like a javascript versioning issue.  Is the following syntax for a very modern version of javascript:\r\n\r\n```\r\nfirebase/functions/node_modules/ccxt/js/base/Exchange.js:438\r\n                    let partial = async params => this[methodName] (path, type, uppercaseMethod, params || {})\r\n                                        ^^^^^^\r\n\r\nSyntaxError: Unexpected identifier\r\n\r\n```"
      },
      {
        "user": "kroitor",
        "created_at": "2018-09-13T12:16:31Z",
        "body": "@npomfret the async syntax won't work with Node version < 7, unfortunately. Version 6 is too old. I suggest updating it, if possible."
      }
    ]
  },
  {
    "number": 3759,
    "title": "Exmo partial fill is considered as full fill.",
    "created_at": "2018-08-29T06:33:55Z",
    "closed_at": "2018-08-29T11:00:58Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/3759",
    "body": "When calling fetch order on Exmo on a partially filled order, CCXT seems to be tricked. It thinks the order is fully filled.\r\n\r\nOrder was a limit on 0.5 BTC.\r\n\r\n```\r\n{'id': '1139757129', 'datetime': '2018-08-24T17:13:24.000Z', 'timestamp': 1535130804000, 'lastTradeTimestamp': None, 'status': 'closed', 'symbol': 'BTC/USD', 'type': 'limit', 'side': 'sell', 'price': 6630.999999737207, 'cost': 252.32738738, 'amount': 0.03805269, 'filled': 0.03805269, 'remaining': 0.0, 'trades': [{'id': '67768715', 'info': {'trade_id': 67768715, 'date': 1535130804, 'type': 'sell', 'pair': 'BTC_USD', 'order_id': 1139757129, 'quantity': '0.03805269', 'price': '6630.99999999', 'amount': '252.32738738'}, 'timestamp': 1535130804000, 'datetime': '2018-08-24T17:13:24.000Z', 'symbol': 'BTC/USD', 'order': '1139757129', 'type': None, 'side': 'sell', 'price': 6630.99999999, 'amount': 0.03805269, 'cost': 252.32738738}], 'fee': {'cost': 0.0, 'currency': 'USD'}, 'info': {'type': 'sell', 'in_currency': 'USD', 'in_amount': '252.32738738', 'out_currency': 'BTC', 'out_amount': '0.03805269', 'trades': [{'trade_id': 67768715, 'date': 1535130804, 'type': 'sell', 'pair': 'BTC_USD', 'order_id': 1139757129, 'quantity': '0.03805269', 'price': '6630.99999999', 'amount': '252.32738738'}]}}\r\n```\r\n\r\nResponse for fetch order on exmo seems to be a long list rather than a single order. So it might actually explain why.\r\n\r\n\r\n\r\n- OS: Linux\r\n- CCXT version: 1.17.174 (very recent one given the fact that no code was updated for the past 2 months on EXMO).\r\n- Exchange: exmo\r\n- Method: fetch_order\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/3759/comments",
    "author": "philipperemy",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2018-08-29T10:41:02Z",
        "body": "@philipperemy it looks like an order with one filling trade to me:\r\n\r\n```\r\n{'amount': 0.03805269,   # \u2190------------------------------- ordered amount\r\n 'cost': 252.32738738,\r\n 'datetime': '2018-08-24T17:13:24.000Z',\r\n 'fee': {'cost': 0.0, 'currency': 'USD'},\r\n 'filled': 0.03805269,   # \u2190------------------------------- filled amount\r\n 'id': '1139757129',\r\n 'info': {'in_amount': '252.32738738',\r\n          'in_currency': 'USD',\r\n          'out_amount': '0.03805269',\r\n          'out_currency': 'BTC',\r\n          'trades': [{'amount': '252.32738738',\r\n                      'date': 1535130804,\r\n                      'order_id': 1139757129,\r\n                      'pair': 'BTC_USD',\r\n                      'price': '6630.99999999',\r\n                      'quantity': '0.03805269',\r\n                      'trade_id': 67768715,\r\n                      'type': 'sell'}],\r\n          'type': 'sell'},\r\n 'lastTradeTimestamp': None,\r\n 'price': 6630.999999737207,\r\n 'remaining': 0.0,\r\n 'side': 'sell',\r\n 'status': 'closed',\r\n 'symbol': 'BTC/USD',\r\n 'timestamp': 1535130804000,\r\n 'trades': [{'amount': 0.03805269, # \u2190------------------------------- filled amount\r\n             'cost': 252.32738738,\r\n             'datetime': '2018-08-24T17:13:24.000Z',\r\n             'id': '67768715',\r\n             'info': {'amount': '252.32738738',\r\n                      'date': 1535130804,\r\n                      'order_id': 1139757129,\r\n                      'pair': 'BTC_USD',\r\n                      'price': '6630.99999999',\r\n                      'quantity': '0.03805269',\r\n                      'trade_id': 67768715,\r\n                      'type': 'sell'},\r\n             'order': '1139757129',\r\n             'price': 6630.99999999,\r\n             'side': 'sell',\r\n             'symbol': 'BTC/USD',\r\n             'timestamp': 1535130804000,\r\n             'type': None}],\r\n 'type': 'limit'}\r\n>>>\r\n```\r\n\r\n\u2191 The ordered amount is completely filled with that trade. How do you tell it's still open?"
      }
    ]
  },
  {
    "number": 3746,
    "title": "bitflyer markets are missing baseId and quoteId fields",
    "created_at": "2018-08-27T09:50:00Z",
    "closed_at": "2018-08-27T22:44:37Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/3746",
    "body": "For example:\r\n\r\n```\r\n\"BCH/BTC\": {\r\n    \"precision\": {\r\n      \"price\": 8,\r\n      \"amount\": 8,\r\n      \"cost\": 8\r\n    },\r\n    \"taker\": 0.0025,\r\n    \"maker\": 0.0025,\r\n    \"id\": \"BCH_BTC\",\r\n    \"symbol\": \"BCH/BTC\",\r\n    \"base\": \"BCH\",\r\n    \"quote\": \"BTC\",\r\n    \"type\": \"spot\",\r\n    \"spot\": true,\r\n    \"future\": false,\r\n    \"info\": {\r\n      \"product_code\": \"BCH_BTC\"\r\n    }\r\n  }\r\n```\r\n\r\n\r\n\r\n[EDIT] ... I now see that they are missing missing from most implementations.  Is that expected?",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/3746/comments",
    "author": "npomfret",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2018-08-27T22:44:32Z",
        "body": ">  I now see that they are missing missing from most implementations. Is that expected?\r\n\r\nMostly, yes, because we've started adding baseId and quoteId not very long ago. You should not rely on the fields that aren't documented in the Manual, really. We hope to add them throughout the entire library, everywhere, if possible. Added them to bitflyer as well. Let us know if that does not answer the question."
      }
    ]
  },
  {
    "number": 3623,
    "title": "Duplicate information returned by fetch_markets() ",
    "created_at": "2018-08-11T10:06:37Z",
    "closed_at": "2018-08-11T11:38:51Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/3623",
    "body": "I notice duplicate informations in the object returned by `fetch_markets()`, for example the fees here at BitMEX. What is the reason for this and which one should I use ? same on all exchanges I've checked.\r\n\r\n```\r\n'id': 'LTCU18',\r\n   'symbol': 'LTCU18',\r\n   'base': 'LTC',\r\n   ...\r\n   'taker': 0.0025,        <------ taker fee here\r\n   'maker': -0.0005,\r\n   'type': 'future',\r\n   'spot': False,\r\n   'swap': False,\r\n   'future': True,\r\n   'prediction': False,\r\n   'info': {'symbol': 'LTCU18',\r\n    'rootSymbol': 'LTC',\r\n    ...\r\n    'deleverage': True,\r\n    'makerFee': -0.0005,\r\n    'takerFee': 0.0025,        <------ taker fee here\r\n    'settlementFee': 0,\r\n    ...\r\n    'settledPrice': None,\r\n    'timestamp': '2018-08-10T23:59:45.000Z'}\r\n```",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/3623/comments",
    "author": "Kinzowa",
    "comments": [
      {
        "user": "npomfret",
        "created_at": "2018-08-11T10:22:28Z",
        "body": "I believe this is intentional.  The `info` section appears to be the raw / unparsed data from the exchange.  Useful to have sometimes, not in others.  You could just disregard or delete it if you don't want it."
      }
    ]
  },
  {
    "number": 3616,
    "title": "Retrieve response headers",
    "created_at": "2018-08-10T10:00:06Z",
    "closed_at": "2018-08-10T16:45:09Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/3616",
    "body": "Is it possible to retrieve the response headers on both good and false api calls you make for Bitmex?\r\n\r\n```\r\n{\r\n  \"date\": \"Fri, 10 Aug 2018 09:54:59 GMT\",\r\n  \"content-encoding\": \"gzip\",\r\n  \"x-powered-by\": \"Profit\",\r\n  \"etag\": \"W/\\\"2-l9Fw4VUO7kr8CvBlt4zaMCqXZ0w\\\"\",\r\n  \"x-ratelimit-remaining\": \"149\",\r\n  \"content-type\": \"application/json; charset=utf-8\",\r\n  \"status\": \"200\",\r\n  \"x-ratelimit-reset\": \"1533894900\",\r\n  \"x-ratelimit-limit\": \"150\",\r\n  \"strict-transport-security\": \"max-age=31536000; includeSubDomains\"\r\n}\r\n```",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/3616/comments",
    "author": "p0ntsNL",
    "comments": [
      {
        "user": "creslinux",
        "created_at": "2018-08-10T14:46:02Z",
        "body": "I think the response headers are available for the last request in your exchange object. \r\n\r\nTake a look in, if named your object exchange object `ccxt`: \r\n`ccxt.last_response_headers._store`"
      }
    ]
  },
  {
    "number": 3573,
    "title": "Bitmex fetch_ohlcv return only old data from 2015",
    "created_at": "2018-08-06T12:11:33Z",
    "closed_at": "2018-08-06T12:23:09Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/3573",
    "body": "- OS: Mac OS\r\n- Programming Language version: php 7.2\r\n- CCXT version: 1.14.62\r\n- Exchange: Bitmex\r\n- Method: fetch_ohlcv\r\n\r\n\r\nHi! I try get OHLC data from Bitmex with since = null and get always old data, between September 25, 2015, September 29, 2015. If I try use since, I don't receive any data or segment between September 25, 2015, September 29, 2015\r\n\r\n`require_once \"vendor/autoload.php\";`\r\n`$exchange  = new \\ccxt\\bitmex  (array ('apiKey' => 'xxx','secret'=>'yyy'));`\r\n`$limit = 100;`\r\n`$since = $exchange->milliseconds()-$limit*60*1000;`\r\n`$symbol = 'BTC/USD';`\r\n`$timeframe = '1h';`\r\n`$params = array('partial'=> False);`\r\n`$ohlcv = $exchange->fetch_ohlcv('BTC/USD', '1h', $since);`\r\n`print_r($ohlcv);`\r\n\r\nEmpty date!\r\n\r\nif calculate $since like\r\n`$since = microtime()-1000*60*60*24;`\r\nreceive segment between September 25, 2015, September 29, 2015 \r\n\r\n`{`\r\n`     0: {`\r\n`          0: \"2015-09-25T13:00:00.000Z\",`\r\n`          1: \"239.99\",`\r\n`          2: \"239.99\",`\r\n`          3: \"237.36\",`\r\n`          4: \"237.45\",`\r\n`          5: \"11501\"`\r\n`     },`\r\n`     1: {`\r\n`          0: \"2015-09-25T14:00:00.000Z\",`\r\n`          1: \"237.45\",`\r\n`          2: \"237.05\",`\r\n`          3: \"236.08\",`\r\n`          4: \"236.08\",`\r\n`          5: \"22625\"`\r\n`     },`\r\n`     2: {`\r\n`          0: \"2015-09-25T15:00:00.000Z\",`\r\n`          1: \"236.08\",`\r\n`          2: \"236.52\",`\r\n`          3: \"236.1\",`\r\n`          4: \"236.34\",`\r\n`          5: \"17434\"`\r\n`     },`\r\n`     3: {`\r\n`          0: \"2015-09-25T16:00:00.000Z\",`\r\n`          1: \"236.34\",`\r\n`          2: \"236.13\",`\r\n`          3: \"235.44\",`\r\n`          4: \"235.71\",`\r\n`          5: \"26900\"`\r\n`     }`\r\n`...`\r\n\r\n\r\n\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/3573/comments",
    "author": "lliypuk",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2018-08-06T12:23:09Z",
        "body": "You're not calculating your $since value correctly. It has to be in **milliseconds** in UTC.\r\n\r\n```PHP\r\n$since = $exchange->milliseconds()-$limit*60*1000;  // why only 60 seconds (60000 milliseconds) here?\r\n```\r\n\r\n\u2191 You're fetching 1h candles starting from 60 seconds (1 minute) ago? One hour has not passed yet since last 60 seconds, so it will reply with zero hourly-candles (an empty array).\r\n\r\nThis is not a correct way of calculating the since argument, either, because it will use microseconds instead of milliseconds:\r\n\r\n```PHP\r\n$since = microtime()-1000*60*60*24;  // why microtime here?\r\n```\r\n\r\nCorrect ways of setting the since are shown below:\r\n\r\n```PHP\r\nmbp:ccxt igorkroitor$ php -a\r\nInteractive shell\r\nphp > include_once ('./ccxt.php')\r\nphp > ;\r\nphp > date_default_timezone_set ('UTC');\r\nphp > $id = '\\\\ccxt\\\\bitmex';\r\nphp > $exchange = new $id ();\r\nphp > $limit = 100;\r\nphp > $hour_duration_in_milliseconds = 60 * 60 * 1000; // not 60 * 1000, but 60 * 60 * 1000 !\r\nphp > $since = $exchange->milliseconds () - $limit * $hour_duration_in_milliseconds;\r\nphp > $ohlcvs = $exchange->fetch_ohlcv ('BTC/USD', '1h', $since);\r\nphp > echo $exchange->iso8601($ohlcvs[0][0]) . \"\\n\"; // print first candle timestamp as a string\r\n2018-08-02T09:00:00.000Z\r\n```\r\n\r\n\u2191 100 hours ago, exactly.\r\n\r\nIf you omit the `$since` argument, it will output 100 candles from the beginning of their trading that was in 2015...\r\n\r\n```PHP\r\nphp > $ohlcvs = $exchange->fetch_ohlcv ('BTC/USD', '1h');\r\nphp > echo $exchange->iso8601($ohlcvs[0][0]) . \"\\n\"; // print first candle timestamp as a string\r\n2015-09-25T12:00:00.000Z\r\nphp >\r\n```\r\n\r\nIn other words, you should pay more attention to you basic milliseconds-arithmetics.\r\n\r\nHope this answers your question. Let us know if not."
      },
      {
        "user": "lliypuk",
        "created_at": "2018-08-06T13:03:20Z",
        "body": "Thanks for your answer, you are right, I took mistake with calculate milliseconds in hour. Now I use this code: \r\n`$exchange = new \\ccxt\\bitmex (array ('apiKey' => 'xxx','secret'=>'yyy'));`\r\n` $limit = 100;`\r\n` $hour_duration_in_milliseconds = 60 * 60 * 1000; `\r\n` $since = $exchange->milliseconds () - $limit * $hour_duration_in_milliseconds;`\r\n` $ohlcvs = $exchange->fetch_ohlcv ('BTC/USD', '1h', $since);`\r\n `var_dump($ohlcvs);`\r\n\r\nand it is always empty too. I don't understand what do wrong"
      },
      {
        "user": "kroitor",
        "created_at": "2018-08-06T13:10:24Z",
        "body": "@lliypuk try this:\r\n\r\n```PHP\r\nmbp:ccxt igorkroitor$ php -a\r\nInteractive shell\r\n\r\nphp > date_default_timezone_set ('UTC');  // \u2190-------------- required, as documented in the Manual!\r\nphp > include_once ('./ccxt.php');\r\nphp > $id = '\\\\ccxt\\\\bitmex';\r\nphp > $exchange = new $id ();\r\nphp > $since = $exchange->milliseconds() - 100 * 60 * 60 * 1000; // 100 hours\r\nphp > $ohlcvs = $exchange->fetch_ohlcv('BTC/USD', '1h', $since);\r\nphp > echo $exchange->iso8601($ohlcvs[0][0]) . \"\\n\"; // print first candle timestamp as a string\r\n2018-08-02T10:00:00.000Z\r\nphp >\r\n```\r\n\r\n\u2191 Do you get a different result with that code?"
      },
      {
        "user": "lliypuk",
        "created_at": "2018-08-06T14:06:48Z",
        "body": "It is really strange, but yes. This is my code:\r\n\r\n`date_default_timezone_set ('UTC'); `\r\n`include_once ('/vendor/ccxt/ccxt.php');`\r\n`$id = '\\\\ccxt\\\\bitmex';`\r\n`$exchange = new $id ();`\r\n`$since = $exchange->milliseconds() - 100 * 60 * 60 * 1000;`\r\n`$ohlcvs = $exchange->fetch_ohlcv('BTC/USD', '1h', $since);`\r\n`var_dump($ohlcvs);`\r\n`echo $exchange->iso8601($ohlcvs[0][0]) . \"\\n\";`\r\n\r\nand var_dump is `array(0) { }`\r\n... Any ideas? "
      },
      {
        "user": "kroitor",
        "created_at": "2018-08-06T14:11:45Z",
        "body": "@lliypuk ok then, let's try updating to the most recent version of CCXT first. Is it still empty with 1.17.83?"
      }
    ]
  },
  {
    "number": 3479,
    "title": "`cost_to_precision()` uses `markets[symbol]['precision']['price']`?",
    "created_at": "2018-07-24T16:57:01Z",
    "closed_at": "2018-07-24T17:00:30Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/3479",
    "body": "Is this a typo on line 903 of `ccxt/python/ccxt/base/exchange.py`?\r\n\r\n```\r\n    def cost_to_precision(self, symbol, cost):\r\n        return ('{:.' + str(self.markets[symbol]['precision']['price']) + 'f}').format(float(cost))\r\n\r\n```\r\nI would have expected it to be:\r\n\r\n```\r\n    def cost_to_precision(self, symbol, cost):\r\n        return ('{:.' + str(self.markets[symbol]['precision']['cost']) + 'f}').format(float(cost))\r\n```\r\n\r\nThis is a genuine question. I could imagine scenarios where it could be intentional.",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/3479/comments",
    "author": "mkoistinen",
    "comments": [
      {
        "user": "mkoistinen",
        "created_at": "2018-07-24T16:57:57Z",
        "body": "```\r\n    costToPrecision (symbol, cost) {\r\n        return parseFloat (cost).toFixed (this.markets[symbol].precision.price)\r\n    }\r\n```\r\nSame in the JS version (not surprisingly)"
      },
      {
        "user": "kroitor",
        "created_at": "2018-07-24T16:58:26Z",
        "body": "No it's not a typo, because exchanges will very rarely provide cost precision. Think logically, cost is `amount * price` that is the same units as price (represented in the same currency, therefore  both `cost` and `price` have that currency's precision)."
      }
    ]
  },
  {
    "number": 3455,
    "title": "Bittrex / python fetch_orders() method gone ..?",
    "created_at": "2018-07-21T20:06:26Z",
    "closed_at": "2018-07-21T20:11:47Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/3455",
    "body": "Language: Python 3.6\r\nCCXT version: 1.12+ (including newest version 1.16.80)\r\nExchange: Bittrex\r\n\r\nThe fetch_orders method for Bittrex seems to have disappeared at some point after v1.11.180 (I tried to upgrade). Seems like a pretty important method for a fairly well-used exchange... ",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/3455/comments",
    "author": "skeebuzz",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2018-07-21T20:11:47Z",
        "body": "@skeebuzz they didn't have it from the very beginning, the old `fetchOrders` was only returning closed orders, so it was removed in favor of `fetchClosedOrders`. Bittrex has `fetchOpenOrders`, `fetchClosedOrders` and the `has` property, according to the Manual. Hope this answers your question."
      }
    ]
  },
  {
    "number": 3263,
    "title": "Setting API and Secret Key in PHP version havig no effect",
    "created_at": "2018-06-26T16:48:35Z",
    "closed_at": "2018-06-26T21:43:04Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/3263",
    "body": "Hi,\r\nAfter creating account and keys for 1Broker, bitbox , coinspot and cointiger exchanges,  I followed the manual for setting these Api key and secret  but still receive the error message from API asking for API key.\r\nFor quick testing I set it like below...Is there a known issue on Php or i am missing something?\r\n\r\n       $string_exchange = '\\\\ccxt\\\\' . $id;\r\n        $ccxt_exchange = new $string_exchange();\r\n\r\n        $exchangeAPI = new ExchangeAPIKey();\r\n        $apiKey = $exchangeAPI->getApiKey($id);\r\n        $secretKey = $exchangeAPI->getSecretKey($id);\r\n        echo ' ApiKey '.$apiKey;\r\n        echo ' SecretKey '.$secretKey;\r\n        if(!empty($apiKey) && !empty($secretKey)){\r\n            $ccxt_exchange->apiKey = $apiKey;\r\n            $ccxt_exchange->secret = $secretKey;\r\n        }else if(!empty($apiKey)){\r\n            $ccxt_exchange->apiKey = $apiKey;\r\n        }\r\n\r\nSetting my keys this way seems having no effect on loadmarket call...or maybe i miss some sleep\r\n\r\n- OS:\r\n- Programming Language version:\r\n- CCXT version: 1.44.211\r\n- Method: loadmarket",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/3263/comments",
    "author": "davemg3",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2018-06-26T17:03:09Z",
        "body": "```PHP\r\n$id = '_1broker';\r\n$onebroker = '\\\\ccxt\\\\' . $id;\r\n$exchange = new $onebroker ();\r\n$exchange->apiKey = 'YOUR_API_KEY';\r\n// $exchange->secret = 'YOUR_SECRET'; // _1broker requires apiKey only\r\n$exchange->load_markets();\r\necho print_r ($exchange->symbols, true) . \"\\n\";\r\n```\r\n\r\n\u2191 If this does work and your code does not, then the reason is in your code, not in the library..."
      }
    ]
  },
  {
    "number": 3206,
    "title": "Bitrrex wallet status not good fetchCurrencies",
    "created_at": "2018-06-21T09:31:03Z",
    "closed_at": "2018-06-21T10:41:55Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/3206",
    "body": "\r\n- Ubuntu\r\n- Python: 3.5\r\n- CCXT version: 1.14.189\r\n- Exchange: bittrex\r\n- Method: fetchCurrencies()\r\n\r\nFor example\r\n\r\n```bit.fetchCurrencies()['CANN']``` has de following output: \r\n\r\n``` {'code': 'CANN', 'fee': 0.2, 'status': 'ok', 'precision': 8, 'limits': {'amount': {'max': 100000000.0, 'min': 1e-08}, 'withdraw': {'max': 100000000.0, 'min': 0.2}, 'price': {'max': 100000000.0, 'min': 1e-08}, 'cost': {'max': None, 'min': None}}, 'info': {'MinConfirmation': 300, 'Notice': 'Automated Maintenance.', 'Currency': 'CANN', 'TxFee': 0.2, 'IsActive': False, 'CurrencyLong': 'CannabisCoin', 'BaseAddress': None, 'CoinType': 'BITCOIN'}, 'address': None, 'type': 'BITCOIN', 'active': False, 'name': 'CannabisCoin', 'id': 'CANN'} ```\r\n\r\nAs you can see the wallet is in Automated Maintance and 'IsActive'  is False while the unified status is 'ok'\r\n\r\nI would expect that the status would change to 'disabled' because you cannot withdraw or deposit this coin at the moment\r\n\r\n\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/3206/comments",
    "author": "fonzmeister",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2018-06-21T10:41:55Z",
        "body": "> I would expect that the status would change to 'disabled' because you cannot withdraw or deposit this coin at the moment\r\n\r\nThe `status` is deprecated there, so you should look into the `active` flag instead:\r\n\r\n```Python\r\n{'active': False,  # \u2190----------------------------- this one\r\n 'address': None,\r\n 'code': 'CANN',\r\n 'fee': 0.2,\r\n 'id': 'CANN',\r\n 'info': {'BaseAddress': None,\r\n          'CoinType': 'BITCOIN',\r\n          'Currency': 'CANN',\r\n          'CurrencyLong': 'CannabisCoin',\r\n          'IsActive': False,\r\n          'MinConfirmation': 300,\r\n          'Notice': 'Automated Maintenance.',\r\n          'TxFee': 0.2},\r\n 'limits': {'amount': {'max': 100000000.0, 'min': 1e-08},\r\n            'cost': {'max': None, 'min': None},\r\n            'price': {'max': 100000000.0, 'min': 1e-08},\r\n            'withdraw': {'max': 100000000.0, 'min': 0.2}},\r\n 'name': 'CannabisCoin',\r\n 'precision': 8,\r\n 'status': 'ok',\r\n 'type': 'BITCOIN'}\r\n```\r\n\r\nLet us know if it does not answer your question. Thx!"
      },
      {
        "user": "fonzmeister",
        "created_at": "2018-06-21T14:06:11Z",
        "body": "Thank you, that works perfectly.\r\nHowever, I don't think it works on poloniex though\r\n\r\nfor example:\r\n```polo.fetchCurrencies()['STEEM']```\r\n\r\ngives as output: \r\n```{'name': 'STEEM', 'active': True, 'fee': 0.01, 'info': {'disabled': 1, 'name': 'STEEM', 'txFee': '0.01000000', 'frozen': 0, 'delisted': 0, 'minConf': 50, 'depositAddress': 'poloniex', 'id': 281}, 'code': 'STEEM', 'id': 'STEEM', 'limits': {'withdraw': {'max': 100000000.0, 'min': '0.01000000'}, 'price': {'max': 100000000.0, 'min': 1e-08}, 'amount': {'max': 100000000.0, 'min': 1e-08}, 'cost': {'max': None, 'min': None}}, 'precision': 8}```\r\n\r\nThe wallet is disabled as is shown in the info part of the dict. however. Active is True"
      }
    ]
  },
  {
    "number": 2896,
    "title": "huobipro withdraw return api-signature-not-valid error",
    "created_at": "2018-05-19T18:43:10Z",
    "closed_at": "2018-05-20T04:03:55Z",
    "labels": [
      "duplicate",
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/2896",
    "body": "- OS: Win10\r\n- Programming Language version: Python 3.5.4\r\n- CCXT version: 1.14.25\r\n- Exchange: huobipro\r\n- Method: withdraw\r\n\r\nWhen I tested huobipro withdraw, I got 'signature not valid' response as below:\r\n\r\n> ccxt.base.errors.ExchangeError: huobipro {\"err-msg\":\"Signature not valid: \\u6821\\u9a8c\\u5931\\u8d25\",\"status\":\"error\",\"data\":null,\"err-code\":\"api-signature-not-valid\"}\r\n\r\nMeanwhile, huobipro fetch_balance worked fine. So I think it is not a key pair issue. And I also tested withdraw same target address by other market, it also worked fine. So the address should be good.\r\n\r\nAttach my testing code below, hope it will help:\r\n\r\n    f_m = \"huobipro\"\r\n    t_m = \"okex\" \r\n    currency = \"ZEC\"\r\n\r\n    exchange = getattr(ccxt, f_m)({'apiKey': apiconfig['key'], 'secret': apiconfig['secret'], 'nonce': ccxt.Exchange.milliseconds})\r\n    addresses = get_market_addresses(t_m) #get addresses map\r\n    exchange.load_markets()\r\n    response = exchange.fetch_balance()\r\n    print(response) #fetch balance, worked\r\n    response = exchange.withdraw(currency, 1, addresses[currency]['address'], 'Test withdraw', {})\r\n    print(response) #withdraw, failed\r\n\r\nAttach traceback:\r\n\r\n> Traceback (most recent call last):\r\n  File \"testing2.py\", line 36, in <module>\r\n    withdraw_test()\r\n  File \"testing2.py\", line 33, in withdraw_test\r\n    response = exchange.withdraw(currency, 1, addresses[currency]['address'], 'Test withdraw', {})\r\n  File \"C:\\Users\\Administrator\\AppData\\Local\\Programs\\Python\\Python35\\lib\\site-packages\\ccxt\\huobipro.py\", line 661, in withdraw\r\n    response = self.privatePostDwWithdrawApiCreate(self.extend(request, params))\r\n  File \"C:\\Users\\Administrator\\AppData\\Local\\Programs\\Python\\Python35\\lib\\site-packages\\ccxt\\base\\exchange.py\", line 306, in request\r\n    return self.fetch2(path, api, method, params, headers, body)\r\n  File \"C:\\Users\\Administrator\\AppData\\Local\\Programs\\Python\\Python35\\lib\\site-packages\\ccxt\\base\\exchange.py\", line 303, in fetch2\r\n    return self.fetch(request['url'], request['method'], request['headers'], request['body'])\r\n  File \"C:\\Users\\Administrator\\AppData\\Local\\Programs\\Python\\Python35\\lib\\site-packages\\ccxt\\base\\exchange.py\", line 383, in fetch\r\n    self.handle_errors(response.status_code, response.reason, url, method, None, self.last_http_response)\r\n  File \"C:\\Users\\Administrator\\AppData\\Local\\Programs\\Python\\Python35\\lib\\site-packages\\ccxt\\huobipro.py\", line 727, in handle_errors\r\n    raise ExchangeError(feedback)\r\nccxt.base.errors.ExchangeError: huobipro {\"err-msg\":\"Signature not valid: \\u6821\\u9a8c\\u5931\\u8d25\",\"data\":null,\"err-code\":\"api-signature-not-valid\",\"status\":\"error\"}\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/2896/comments",
    "author": "radarxc",
    "comments": [
      {
        "user": "radarxc",
        "created_at": "2018-05-20T01:48:11Z",
        "body": "I find when I change withdraw's 'tag' parameter as None, this issue is fixed. I am not sure what happen, but it works fine on other market with tag parameter."
      },
      {
        "user": "kroitor",
        "created_at": "2018-05-20T04:03:55Z",
        "body": "@radarxc you're not using the withdraw method properly. The `tag` is not an arbitrary user string, it is a wallet identifier which should only be set if you're withdrawing a currency that requires the tag for addressing. Let us know if it does not answer your question."
      }
    ]
  },
  {
    "number": 2644,
    "title": "prompt working in file not working",
    "created_at": "2018-04-22T19:10:18Z",
    "closed_at": "2018-04-22T21:44:29Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/2644",
    "body": "\r\n- OS: Ubuntu 16.04.4 LTS\r\n- Programming Language version: Python 3.5.2\r\n- CCXT version: 1.13.32\r\n- Exchange: All\r\n- Method: ccxt.exchanges\r\n\r\nI installed it like this:\r\npip install ccxt\r\n\r\nimport ccxt\r\nprint(ccxt.exchanges)\r\n\r\nIt's working in a prompt. But not in a Python file.\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/2644/comments",
    "author": "joosthoeks",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2018-04-22T19:22:29Z",
        "body": "What's your:\r\n- `python --version`\r\n- `pip --version`\r\n\r\nDo you have `python3 --version` in your system ?\r\n\r\n> But not in a Python file.\r\n\r\nMost likely you should have installed it with `sudo pip install ccxt`.\r\n\r\nLet us know if this does not help."
      },
      {
        "user": "joosthoeks",
        "created_at": "2018-04-22T19:40:37Z",
        "body": "My python --version\r\nPython 2.7.12\r\nMy python3 --version\r\nPython 3.5.2\r\nMy pip --version\r\npip 10.0.1 from /usr/local/lib/python3.5/dist-packages/pip (python 3.5)\r\nMy pip3 --version\r\npip 10.0.1 from /usr/local/lib/python3.5/dist-packages/pip (python 3.5)\r\n\r\nIf I install it with sudo pip install ccxt it makes no difference. I tried both Python versions."
      },
      {
        "user": "kroitor",
        "created_at": "2018-04-22T19:54:01Z",
        "body": "Ok, when you say it's not working in a file \u2013\u00a0what output do you see?"
      },
      {
        "user": "joosthoeks",
        "created_at": "2018-04-22T20:00:23Z",
        "body": "Output:\r\nTraceback (most recent call last):\r\n  File \"ccxt.py\", line 1, in <module>\r\n    import ccxt\r\n  File \"/home/joost/ccxt.py\", line 2, in <module>\r\n    print(ccxt.exchanges)\r\nAttributeError: module 'ccxt' has no attribute 'exchanges'\r\n"
      },
      {
        "user": "kroitor",
        "created_at": "2018-04-22T20:13:41Z",
        "body": "Have you tried renaming ccxt.py to any other filename (and deleting the ccxt.pyc)?"
      }
    ]
  },
  {
    "number": 2630,
    "title": "Bittex fetchOrders not supported yet. ",
    "created_at": "2018-04-20T11:16:32Z",
    "closed_at": "2018-04-20T11:25:29Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/2630",
    "body": "Hi @kroitor,\r\n\r\nWith updated version i get this error: \r\n`Bittex fetchOrders not supported yet. `\r\n\r\nSome versions ago it was working fine.\r\nAny info?\r\n\r\n- OS: \r\n- Programming Language version: JS\r\n- CCXT version: 1.13.10\r\n- Exchange: Bittrex\r\n- Method: fetchOrders\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/2630/comments",
    "author": "morzyns",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2018-04-20T11:25:29Z",
        "body": "@morzyns Hi! Yes, it was emulated earlier, but it used a call to `fetchClosedOrders` or `fetchOpenOrders` internally, so you should use one of the two latter methods. Because it was removed, the version of ccxt was updated to 1.13+. Unfortunately, Bittrex does not have an endpoint to fetch them all in one go, so the earlier implementation of fetchOrders was not working properly and returned just the closed orders instead.\r\n\r\nLet us know if this does not answer your question."
      }
    ]
  },
  {
    "number": 2619,
    "title": "Gdax Sandbox Authentication Error",
    "created_at": "2018-04-19T08:08:52Z",
    "closed_at": "2018-04-19T14:13:38Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/2619",
    "body": "Hi, \r\nI'm trying to use the api with the Gdax Sandbox, but I get an \"Invalid API Key\" error.\r\n\r\nTo use the sandbox I have changed this line in the code (line 478 in gdax.py):\r\n\r\nFrom: \r\n`url = self.urls['api'] + request `\r\nto:\r\n`url = self.urls['test'] + request `\r\n\r\nIt's weird because I get the error using the sandbox credentials, but if I put the real credentials I get no error. It is like if my change int he code has no effect at all.\r\n\r\nProbably it is just a newbie mistake from me, but I'm stucked with this. \r\n\r\nI'm using python on Ubuntu.\r\n\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/2619/comments",
    "author": "jebesen",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2018-04-19T14:13:38Z",
        "body": "Hi!\r\n\r\n> Probably it is just a newbie mistake from me, but I'm stucked with this.\r\n\r\n1. For using your live credentials with the live exchange, you don't need to do anything (use it as you would use any other exchange):\r\n\r\n```Python\r\ngdax = ccxt.gdax({\r\n    'apiKey': 'YOUR_LIVE_KEY',\r\n    'secret': 'YOUR_LIVE_SECRET',\r\n})\r\n\r\n# your code goes here...\r\n```\r\n\r\n2. For using your sandbox credentials with the exchange sandbox, do the following:\r\n\r\n```Python\r\ngdax = ccxt.gdax({\r\n    'apiKey': 'YOUR_SANDBOX_KEY',\r\n    'secret': 'YOUR_SANDBOX_SECRET',\r\n})\r\ngdax.urls['api'] = gdax.urls['test']  # \u2190 add just this line to your code (don't edit `gdax.py`)\r\n\r\n# your code goes here...\r\n```\r\n\r\nGDAX uses different accounting databases for sandbox accounts vs regular accounts, therefore you can't use a sandbox account with a live exchange and vice versa.\r\n\r\nLet us know if this does not answer your question. Thx!"
      }
    ]
  },
  {
    "number": 2579,
    "title": "Is there any way to set the price to 'ask' using bittrex exchange?",
    "created_at": "2018-04-16T00:17:53Z",
    "closed_at": "2018-04-16T04:02:51Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/2579",
    "body": "- OS: ubuntu\r\n- Programming Language version: python\r\n- CCXT version: last\r\n- Exchange: bittrex\r\n- Method: execute_order\r\n\r\nSince bittrex only has limit order types there is not way to set a market order. \r\nBut, if I want to be sure that the order is executed, is there any way to set the price to the 'ask' amount in the order_book, without requesting the full order_book previously?\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/2579/comments",
    "author": "fedecaccia",
    "comments": [
      {
        "user": "arielorvits",
        "created_at": "2018-04-16T00:22:59Z",
        "body": "U can request only part of order book.\r\nU can use ticker instead of order book.\r\nnote that sometimes ticker isn't updated enough.\r\nnote that u can't be sure order executed without verifying, since until u send the order - maybe the first 'ask' already sold"
      },
      {
        "user": "kroitor",
        "created_at": "2018-04-16T04:02:51Z",
        "body": "@fedecaccia if I get you correctly, you actually want a market order (*\"Ask\"* means buy for best available price, that is market price and up). \r\n\r\nDespite that Bittrex does not support market orders directly, there's still a way to simulate them, you just need to place the order at a price close to zero or at a very high price, depending on the direction of your order. \r\n\r\nThink what would the exchange do, if you sell 1 BTC for a price of $1. A normal exchange will not sell your bitcoin for a dollar, because there exist bidders in the orderbook that are willing to pay you more ($8000 or more) for your bitcoin. \r\n\r\nSo, a normal exchange will start closing your order for best price for you from the top of the opposite orderbook stack, if you are doing it far worse than current market price. \r\n\r\nIf you wanted the opposite, to buy 1 BTC for a market price, you would then put your bid at a price of $1million for one bitcoin, and a normal exchange will then sell a bitcoin to you from a seller that is willing to take less than $1million from you  and will sell for the market price at around $8000. So, if you are selling, sell for a very low price, if you are buying, then buy for a very high price \u2013\u00a0in both cases you will get the actual market price from a normal exchange.\r\n\r\n**WARNING: Whenever I say \"normal exchange\" I'd suggest you to test if the exchange in question is \"normal\" with a very small amount than is not significant to lose, to make sure. Not all exchanges work normally, but most of the major ones are ok. Anyway, use this method at your own risk and do the testing!**\r\n\r\nHope this answers your question.\r\n\r\n"
      }
    ]
  },
  {
    "number": 2368,
    "title": "Couldn't get timestamp in `fetch_order_book` method",
    "created_at": "2018-03-28T06:34:36Z",
    "closed_at": "2018-03-28T06:42:09Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/2368",
    "body": "- OS: mac os\r\n- Programming Language version: python\r\n- CCXT version: 1.12.17 \r\n- Exchange: all exchange\r\n- Method: fetch_order_book\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/2368/comments",
    "author": "taish",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2018-03-28T06:42:09Z",
        "body": "We don't set it if a corresponding value is not provided by the exchange in question. You can get the last date from headers in the following way:\r\n```Python\r\nimport ccxt\r\nexchange = ccxt.kraken()\r\nexchange.fetch_order_book('ETH/BTC')\r\nprint(exchange.last_response_headers['Date'])\r\n```\r\nHope it answers your question. Thx!"
      }
    ]
  },
  {
    "number": 2365,
    "title": "How to check whether new candle formed?",
    "created_at": "2018-03-27T07:33:41Z",
    "closed_at": "2018-03-27T14:47:11Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/2365",
    "body": "- OS: Windows 10\r\n- Programming Language version: Node JS 9.0\r\n- CCXT version: \r\n- Exchange: binance\r\n- Method: fetchOHLCV\r\n\r\non init of my script I going to fetch some quantity of candles,\r\nlater i will call another method periodically\r\n\r\nhow can I check - is new candle now forming, so I need to do something with already formed data. how to check it ?\r\nFor instance, I will use 1-hour timeframe, execute function every minute, how han I check that new candle starts?\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/2365/comments",
    "author": "aav80",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2018-03-27T14:44:40Z",
        "body": "> For instance, I will use 1-hour timeframe, execute function every minute, how han I check that new candle starts?\r\n\r\nA new hourly candle starts when a new UTC hour starts...\r\n\r\n```\r\n15:00-16:00 candle 123\r\n16:00-17:00 candle 124\r\n17:00-18:00 candle 125..\r\n...\r\n```\r\n\r\nSo, each new hourly candle starts on the edge of two consecutive clock hours. The new hourly candle is formed everytime a new hour starts.\r\n\r\nAll timestamps in ccxt are **UTC epoch in milliseconds**. \r\n\r\nHope it answers your question, let us know if not. Feel free to reopen it if needed or just ask further questions, if any. Thx!"
      },
      {
        "user": "kroitor",
        "created_at": "2018-03-27T17:10:35Z",
        "body": "> I have another candle-related question, is there any method which is called when new candle is formed, which I can inherite, or some way to run function only 1 time and right the moment, when candle starts?\r\n\r\nThere's no such method in the library, because it isn't related to the library itself, but mostly related to setting up proper timing for events in your program. This is usually done in userland. \r\n\r\nThink differently: no two events in the world are simultaneous. When you set a timer for 16:00, and it is triggered, it does not necessarily mean that the actual time is 16:00. May be +/- microsecond offset there... And if you request a candle then, the server may have it's own clock which is not in sync with yours, so the server clock may show 15:59 at that moment. \r\n\r\nI guess, Einstein and Heisenberg in their theories claim that no two events can be measured precisely in time-space... So, you should not rely on the clocks, you should instead think of a solution that would work either way. \r\n\r\nThus, instead of waiting an hour for the next candle to arrive and then checking, you check every **half an hour** (or as frequently as you need) if the new candle has arrived or not and base all your further behaviour on that."
      }
    ]
  },
  {
    "number": 2254,
    "title": "Bitmex: fetch_ohlcv optional parameters",
    "created_at": "2018-03-14T03:10:31Z",
    "closed_at": "2018-03-14T03:22:22Z",
    "labels": [
      "duplicate",
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/2254",
    "body": "- OS: Windows\r\n- Programming Language version: Python 3.6\r\n- CCXT version: 1.11.77\r\n- Exchange: Bitmex\r\n- Method: fetch_ohlcv()\r\n\r\nHi! \r\n  The Bitmex API supports returning only completed candles. However the CCXT library hard codes the request to return partial candles. I guess this is for unification of the method between exchanges?!?\r\n\r\nIs it possible to support specifying the `partial` parameter during the method call? This would be very useful. Perhaps it can be sent in the `params` dict and a check be made to see if `partial` exists? If not, use your default which is `True`?\r\n\r\nHere is the bitmex snippet below. \r\n\r\n```\r\ndef fetch_ohlcv(self, symbol, timeframe='1m', since=None, limit=100, params={}):\r\n        self.load_markets()\r\n        # send JSON key/value pairs, such as {\"key\": \"value\"}\r\n        # filter by individual fields and do advanced queries on timestamps\r\n        # filter = {'key': 'value'}\r\n        # send a bare series(e.g. XBU) to nearest expiring contract in that series\r\n        # you can also send a timeframe, e.g. XBU:monthly\r\n        # timeframes: daily, weekly, monthly, quarterly, and biquarterly\r\n        market = self.market(symbol)\r\n        request = {\r\n            'symbol': market['id'],\r\n            'binSize': self.timeframes[timeframe],\r\n            'partial': True,     # True == include yet-incomplete current bins\r\n            'count': limit,      # default 100, max 500\r\n```\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/2254/comments",
    "author": "Dave-Vallance",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2018-03-14T03:22:22Z",
        "body": "Hi!\r\n\r\n```Python\r\n# create the exchange\r\nimport ccxt \r\nbitmex = ccxt.bitmex()\r\n\r\n# params:\r\nsymbol = 'BTC/USD'\r\ntimeframe = '1m'\r\nsince = None\r\nlimit = 100\r\nparams = {'partial': False}  # \u2190-------------  here you go\r\n\r\n# the call:\r\ncandles = bitmex.fetch_ohlcv(symbol, timeframe, since, limit, params)\r\nprint(bitmex.iso8601(candles[len(candles)-1][0]))\r\n```\r\n\r\nLet us know if it does not help."
      },
      {
        "user": "Dave-Vallance",
        "created_at": "2018-03-14T06:56:24Z",
        "body": "Hi @kroitor \r\n\r\nI took a look at the example. Unfortunately for me, the parameter does not seem to override the bitmex `partial` parameter.\r\n\r\nI extended your example code a little to test.\r\n\r\n```\r\nimport ccxt\r\nimport time\r\nbitmex = ccxt.bitmex()\r\n\r\n\r\n# params:\r\nsymbol = 'BTC/USD'\r\ntimeframe = '1m'\r\nsince = None\r\nlimit = 100\r\nparams = {'partial': False, 'reverse':True}  # \u2190-------------  here you go\r\n\r\n\r\n\r\nwhile True:\r\n    # the call:\r\n    candles = bitmex.fetch_ohlcv(symbol, timeframe, since, limit, params)\r\n    print('{}: O: {} H: {} L:{} C:{}'.format(\r\n        bitmex.iso8601(candles[0][0]),\r\n        candles[0][1],\r\n        candles[0][2],\r\n        candles[0][3],\r\n        candles[0][4]))\r\n    time.sleep(3)\r\n```\r\n\r\nThis is the output: \r\n```\r\n2018-03-14T06:50:00.000Z: O: 9105 H: 9105 L:9104.5 C:9105\r\n2018-03-14T06:50:00.000Z: O: 9105 H: 9105 L:9104.5 C:9105\r\n2018-03-14T06:50:00.000Z: O: 9105 H: 9105 L:9104.5 C:9105\r\n2018-03-14T06:50:00.000Z: O: 9105 H: 9105 L:9104.5 C:9105\r\n2018-03-14T06:50:00.000Z: O: 9105 H: 9105 L:9104.5 C:9105\r\n2018-03-14T06:50:00.000Z: O: 9105 H: 9105 L:9104.5 C:9105\r\n2018-03-14T06:50:00.000Z: O: 9105 H: 9105 L:9104.5 C:9105\r\n2018-03-14T06:50:00.000Z: O: 9105 H: 9105 L:9104.5 C:9104.5\r\n2018-03-14T06:50:00.000Z: O: 9105 H: 9105 L:9104 C:9104\r\n2018-03-14T06:50:00.000Z: O: 9105 H: 9105 L:9100.5 C:9100.5\r\n2018-03-14T06:50:00.000Z: O: 9105 H: 9105 L:9100.5 C:9103\r\n2018-03-14T06:50:00.000Z: O: 9105 H: 9105 L:9100.5 C:9103\r\n```\r\n\r\nHere we can see that partial candle data is being delivered. The low and close starts to change towards the end even though the timestamp is the same. \r\n\r\nPerhaps I am missing something obvious? Apologies if that is the case. \r\n\r\nI appreciate your feedback!"
      },
      {
        "user": "kroitor",
        "created_at": "2018-03-14T07:09:01Z",
        "body": "```Python\r\n# -*- coding: utf-8 -*-\r\n\r\nimport ccxt\r\nimport time\r\nbitmex = ccxt.bitmex()\r\n\r\n\r\n# params:\r\nsymbol = 'BTC/USD'\r\ntimeframe = '1m'\r\nlimit = 100\r\nparams = {'partial': False}  # \u2190--------  no reversal\r\n\r\nwhile True:\r\n\r\n    # pay attention to since with respect to limit if you're doing it in a loop\r\n    since = bitmex.milliseconds () - limit * 60 * 1000 \r\n\r\n    candles = bitmex.fetch_ohlcv(symbol, timeframe, since, limit, params)\r\n    num_candles = len(candles)\r\n    print('{}: O: {} H: {} L:{} C:{}'.format(\r\n        bitmex.iso8601(candles[num_candles - 1][0]),\r\n        candles[num_candles - 1][1],\r\n        candles[num_candles - 1][2],\r\n        candles[num_candles - 1][3],\r\n        candles[num_candles - 1][4]))\r\n    time.sleep(5)\r\n```\r\n\r\n```\r\nmbp:python igorkroitor$ python bitmex-fetch-ohlcv-with-extra-params.py\r\n2018-03-14T07:05:00.000Z: O: 9151 H: 9151.5 L:9139.5 C:9139.5\r\n2018-03-14T07:05:00.000Z: O: 9151 H: 9151.5 L:9139.5 C:9139.5\r\n2018-03-14T07:05:00.000Z: O: 9151 H: 9151.5 L:9139.5 C:9139.5\r\n2018-03-14T07:05:00.000Z: O: 9151 H: 9151.5 L:9139.5 C:9139.5\r\n2018-03-14T07:05:00.000Z: O: 9151 H: 9151.5 L:9139.5 C:9139.5\r\n2018-03-14T07:05:00.000Z: O: 9151 H: 9151.5 L:9139.5 C:9139.5\r\n2018-03-14T07:05:00.000Z: O: 9151 H: 9151.5 L:9139.5 C:9139.5\r\n2018-03-14T07:05:00.000Z: O: 9151 H: 9151.5 L:9139.5 C:9139.5\r\n2018-03-14T07:05:00.000Z: O: 9151 H: 9151.5 L:9139.5 C:9139.5\r\n2018-03-14T07:05:00.000Z: O: 9151 H: 9151.5 L:9139.5 C:9139.5\r\n2018-03-14T07:05:00.000Z: O: 9151 H: 9151.5 L:9139.5 C:9139.5\r\n2018-03-14T07:05:00.000Z: O: 9151 H: 9151.5 L:9139.5 C:9139.5\r\n2018-03-14T07:06:00.000Z: O: 9139.5 H: 9146 L:9139.5 C:9146\r\n2018-03-14T07:06:00.000Z: O: 9139.5 H: 9146 L:9139.5 C:9146\r\n2018-03-14T07:06:00.000Z: O: 9139.5 H: 9146 L:9139.5 C:9146\r\n2018-03-14T07:06:00.000Z: O: 9139.5 H: 9146 L:9139.5 C:9146\r\n2018-03-14T07:06:00.000Z: O: 9139.5 H: 9146 L:9139.5 C:9146\r\n2018-03-14T07:06:00.000Z: O: 9139.5 H: 9146 L:9139.5 C:9146\r\n2018-03-14T07:06:00.000Z: O: 9139.5 H: 9146 L:9139.5 C:9146\r\n2018-03-14T07:06:00.000Z: O: 9139.5 H: 9146 L:9139.5 C:9146\r\n2018-03-14T07:06:00.000Z: O: 9139.5 H: 9146 L:9139.5 C:9146\r\n2018-03-14T07:06:00.000Z: O: 9139.5 H: 9146 L:9139.5 C:9146\r\n2018-03-14T07:06:00.000Z: O: 9139.5 H: 9146 L:9139.5 C:9146\r\n2018-03-14T07:07:00.000Z: O: 9146 H: 9146 L:9140 C:9141\r\n2018-03-14T07:07:00.000Z: O: 9146 H: 9146 L:9140 C:9141\r\n2018-03-14T07:07:00.000Z: O: 9146 H: 9146 L:9140 C:9141\r\n2018-03-14T07:07:00.000Z: O: 9146 H: 9146 L:9140 C:9141\r\n2018-03-14T07:07:00.000Z: O: 9146 H: 9146 L:9140 C:9141\r\n2018-03-14T07:07:00.000Z: O: 9146 H: 9146 L:9140 C:9141\r\n2018-03-14T07:07:00.000Z: O: 9146 H: 9146 L:9140 C:9141\r\n...\r\n```\r\n\r\nDoes this solve your issue?"
      },
      {
        "user": "Dave-Vallance",
        "created_at": "2018-03-14T08:47:55Z",
        "body": "Hi @kroitor \r\n\r\nThanks, you are awesome! That does work. Great solution. \r\n\r\nIf I am reading it correctly, you are just taking the second to last timestamp in the list right? So does that mean the `partial` parameter is not affecting the results? (since partial results are still obtained).    "
      },
      {
        "user": "kroitor",
        "created_at": "2018-03-14T08:52:55Z",
        "body": "> If I am reading it correctly, you are just taking the second to last timestamp in the list right? \r\n\r\nNo, you're not reading it correctly, i'm taking the last candle, because all indexes in an array are zero based. Thus:\r\n\r\n- candles[0] = first element\r\n- candles[1] = second element\r\n- candles[num_candles-1] = last element\r\n\r\nThis is the very basics of any programming course.\r\n\r\n> So does that mean the partial parameter is not affecting the results? (since partial results are still obtained).\r\n\r\nNope, the code above demonstrates exactly the opposite: the partial results are **not obtained** due to `{'partial': False}`, as the **last candle is not changing** over time.\r\n\r\n"
      },
      {
        "user": "goorooau",
        "created_at": "2018-06-01T08:15:14Z",
        "body": "I found I had to use `{'partial': 0}` rather than using the boolean False. It then did not show the current incomplete candle data... not sure if it's an issue on my machine or not.\r\nPython 2.7, Win10 64bit Pro, latest ccxt ver. Bitmex."
      },
      {
        "user": "xmatthias",
        "created_at": "2018-08-13T11:10:01Z",
        "body": "does `'partial': False` or `'partial': 0` work reliably against all exchanges or is this bitmex specific?\r\n\r\nif it's working against all exchanges ... i think it's missing from the documentation ..."
      },
      {
        "user": "kroitor",
        "created_at": "2018-08-13T15:21:02Z",
        "body": "> does 'partial': False or 'partial': 0 work reliably against all exchanges or is this bitmex specific?\r\n\r\nIt is BitMEX-specific."
      }
    ]
  },
  {
    "number": 2134,
    "title": "inconsistent timeframes format ",
    "created_at": "2018-03-06T07:20:37Z",
    "closed_at": "2018-03-06T08:13:43Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/2134",
    "body": "The issue is that the format of the exchange property timeframes is NOT consistent. \r\n```\r\nexchange_ids = ['binance', 'bitfinex', 'hitbtc', 'kucoin', 'kraken', 'poloniex', 'gdax', 'gemini', 'huobipro', 'okex']\r\nexchanges = [getattr(ccxt, str.lower())() for str in exchange_ids]\r\n[print(ex.timeframes) for ex in exchanges if hasattr(ex, 'timeframes')]\r\n```\r\n\r\nThe above code prints out some examples in the following:\r\n```\r\n{'1m': '1m', '3m': '3m', '5m': '5m', '15m': '15m', '30m': '30m', '1h': '1h', '2h': '2h', '4h': '4h', '6h': '6h', '8h': '8h', '12h': '12h', '1d': '1d', '3d': '3d', '1w': '1w', '1M': '1M'}\r\n{'1m': '1m', '5m': '5m', '15m': '15m', '30m': '30m', '1h': '1h', '3h': '3h', '6h': '6h', '12h': '12h', '1d': '1D', '1w': '7D', '2w': '14D', '1M': '1M'}\r\n{'1m': '1', '5m': '5', '15m': '15', '30m': '30', '1h': '60', '8h': '480', '1d': 'D', '1w': 'W'}\r\n{'1m': '1', '5m': '5', '15m': '15', '30m': '30', '1h': '60', '4h': '240', '1d': '1440', '1w': '10080', '2w': '21600'}\r\n{'5m': 300, '15m': 900, '30m': 1800, '2h': 7200, '4h': 14400, '1d': 86400}\r\n{'1m': 60, '5m': 300, '15m': 900, '30m': 1800, '1h': 3600, '2h': 7200, '4h': 14400, '12h': 43200, '1d': 86400, '1w': 604800, '1M': 2592000, '1y': 31536000}\r\n{'1m': '1min', '5m': '5min', '15m': '15min', '30m': '30min', '1h': '60min', '1d': '1day', '1w': '1week', '1M': '1mon', '1y': '1year'}\r\n{'1m': '1min', '3m': '3min', '5m': '5min', '15m': '15min', '30m': '30min', '1h': '1hour', '2h': '2hour', '4h': '4hour', '6h': '6hour', '12h': '12hour', '1d': '1day', '3d': '3day', '1w': '1week'}\r\n```\r\n\r\n\r\n`timeframes` is a hash and the values of it do not follow a format across exchanges. For example, some are like '1m' or '5m' that are no different from the keys. Some others are the actual duration in seconds which arguably is the desired format. Some others are just more descriptive keys such as '1min', '1day' and etc. \r\n\r\n\r\n- OS: \r\nOSX 10.13.3\r\n\r\n- Programming Language version: \r\nPython 3.6.4\r\n\r\n- CCXT version:\r\n1.10.760\r\n\r\n- Exchange:\r\nbinance\r\nbitfinex\r\nhitbtc\r\nkucoin\r\nkraken\r\npoloniex\r\ngdax\r\ngemini\r\nhuobipro\r\nokex\r\n\r\n- Method:\r\nthe property timeframes\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/2134/comments",
    "author": "ws2367",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2018-03-06T08:13:43Z",
        "body": "`timeframes` is a hash, where keys are unified and values are exchange-specific, so, I don't see any inconsistencies. You should not rely on the values under the keys and their formats, as they are exchange-specific. The keys are exchange-agnostic and unified and can be safely used across exchanges, namely, the \"1m\", \"5m\", \"15m\", \"1h\", and so on \u2013 those are standardized. So, there isn't an issue here, it's a matter of interpretation. If you need to get the duration in seconds, use the parseTimeframe/parse_timeframe method. Hope it helps. Let us know if it does not answer your question. Thx!"
      }
    ]
  },
  {
    "number": 2044,
    "title": "Binance receiving error code -2015 while using API keys",
    "created_at": "2018-02-25T09:09:25Z",
    "closed_at": "2018-02-25T13:36:59Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/2044",
    "body": "Hi,\r\n \r\nI have created a new Binance account and set its API keys (read info, enable trading, IP access unrestricted).\r\nWhile trying to connect to my account programmaticly using CCXT, I get the following authorization error: `ccxt.base.errors.ExchangeError: binance: unknown error code: {\"code\":-2015,\"msg\":\"Invalid API-key, IP, or permissions for action.\"}`\r\nOS: Ubuntu 16 (happens on windows as well)\r\nProgramming language: Python 3.5 \r\nCCXT version: 1.10.1178\r\n\r\nWhen using `python-binance` library, I successfully connect to my account.\r\n\r\nThe code I use:\r\n```\r\nfrom binance.client import Client\r\nimport json\r\nimport ccxt\r\n\r\ndata = json.load(open('binance_auth.json'))\r\n\r\nclient = Client(\r\n    data['secret'],\r\n    data['key'])\r\n\r\napi = {\r\n                'apiKey': data['key'],\r\n                'secret': data['secret'],\r\n                'password': None,\r\n      }\r\nccxtBinance = ccxt.binance(api)\r\n\r\nprint(\"python-binance=\", client.get_account()) # succeeds\r\nprint (\"ccxt=\",ccxtBinance.fetchBalance())     # fails\r\n```\r\n\r\nThanks,\r\nLena",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/2044/comments",
    "author": "lenak25",
    "comments": [
      {
        "user": "mkutny",
        "created_at": "2018-02-25T09:58:51Z",
        "body": "Try the following:\r\n\r\n```javascript\r\napi = {\r\n                'apiKey': data['secret'],\r\n                'secret': data['key'],\r\n      }\r\n```\r\n"
      },
      {
        "user": "lenak25",
        "created_at": "2018-02-25T11:22:44Z",
        "body": "Thanks @mkutny, it works for this account.\r\nI have another Binance account (which was opened a while ago) and I had no problems to connect to it with my original code. Any reason why for some accounts the API key and secret should be swapped, while for others not? Will there be a common solution for all?\r\nThanks,\r\nLena  "
      },
      {
        "user": "mkutny",
        "created_at": "2018-02-25T12:56:06Z",
        "body": "> Any reason why for some accounts the API key and secret should be swapped, while for others not?\r\n\r\nThey should NEVER be swapped. You just happened to mix them in your `binance_auth.json`.\r\n\r\n> I have another Binance account (which was opened a while ago) and I had no problems to connect to it with my original code.\r\n\r\nYour `python-binance` won't work with that pair."
      }
    ]
  },
  {
    "number": 2043,
    "title": "futures with different contracts",
    "created_at": "2018-02-25T08:30:31Z",
    "closed_at": "2018-02-25T15:54:53Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/2043",
    "body": "When fetching the ticker or order book of BTC/USD (exchange: okex), I can only get the weekly futures contract. How can I get biweekly and quarterly contract? Or it is currently impossible in ccxt api?\r\n\r\nThx. \r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/2043/comments",
    "author": "ABO3",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2018-02-25T15:54:52Z",
        "body": "> Or it is currently impossible in ccxt api?\r\n\r\nIt is possible:\r\n\r\n```JavaScript\r\n\r\nconst limit = undefined\r\n\r\n// this week\r\nokex.fetchTicker('BTC/USD', {'contract_type': 'this_week'})\r\nokex.fetchOrderBookr('BTC/USD', limit, {'contract_type': 'this_week'})\r\n\r\n// next week\r\nokex.fetchTicker('BTC/USD', {'contract_type': 'next_week'})\r\nokex.fetchOrderBookr('BTC/USD', limit, {'contract_type': 'next_week'})\r\n\r\n// quarter\r\nokex.fetchTicker('BTC/USD', {'contract_type': 'quarter'})\r\nokex.fetchOrderBookr('BTC/USD', limit, {'contract_type': 'quarter'})\r\n```\r\n\r\nUse the `contract_type` extra parameter. Let us know if it does not help.\r\n\r\n*UPD: edited fetchOrderBook call signatures"
      },
      {
        "user": "kroitor",
        "created_at": "2018-02-25T15:59:57Z",
        "body": "@ABO3 sorry, there was a typo in my previous answer, I've corrected it. With fetchOrderBook, the extra params dictionary is the third argument, whereas the second argument is the order book depth limit (can be set to None/undefined if not needed). But the answer itself isn't changed significantly, you should still use extra params for exchange-specific things."
      }
    ]
  },
  {
    "number": 1831,
    "title": "Kucoin fetchOrder only working for open orders",
    "created_at": "2018-02-08T13:33:37Z",
    "closed_at": "2018-02-09T00:03:35Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/1831",
    "body": "Hi,\r\n\r\nI was just checking kucoin fetchOrder which was added short while ago. But it does return OrderNotFound exception for closed order.\r\n\r\nWorks for Open orders as expected...\r\n\r\nIs this expected ?",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/1831/comments",
    "author": "dnld23",
    "comments": [
      {
        "user": "hippylover",
        "created_at": "2018-02-08T14:30:09Z",
        "body": "It's because the api of kucoin doens't return a result if your order is taken or canceled. Perhaps kucoin has a \"get all orders, open or closed\" call which could be used to simulate a call like this i dont remember(it would be more expensive for exchange and user though but not sure that matters). What i do is run a fetchorder and if i get an error i run fetchclosedorders and extract the relevant order."
      },
      {
        "user": "hippylover",
        "created_at": "2018-02-08T14:32:12Z",
        "body": "You are using old ccxt version Sarona(well, atleast if you are using python it should work. Idk about other languages)."
      },
      {
        "user": "dnld23",
        "created_at": "2018-02-08T14:39:26Z",
        "body": "@hippylover yes, i asked about it and if there is no solution, i will do same way as you mention. Its just more expensive, i dont know how sensitive kucoin is for api calls..."
      },
      {
        "user": "hippylover",
        "created_at": "2018-02-08T14:55:00Z",
        "body": "It should be fine as you would be running fetchorder most of the time and fetchclosed order only when the order has been taken. What i meant by expensive is if say if fetchorder is replaced by this possible \"get all orders\" call(im feeling too lazy today to check if this even exists) then more data would be downloaded and maybe the exchange has different api limits for it, i don't know."
      },
      {
        "user": "Sarona93",
        "created_at": "2018-02-08T17:51:10Z",
        "body": "@hippylover , yes, I just used the last version and \"fetch_order()\" was implemented there,\r\nThank you."
      },
      {
        "user": "wannesdemaeght",
        "created_at": "2018-02-08T18:37:03Z",
        "body": "fetchOrder should work on all orders for kucoin, open or closed, but sometimes their API is quirky.\r\nI've had orders return a 404 not found for days, and then when rechecked later, they do work.\r\n\r\nAs you have figured out, one workaround is to do fetchClosedOrders, which does return all orders.\r\n\r\nConcerning the  rate limit: afaik, kucoin has not implemented a limit yet."
      }
    ]
  },
  {
    "number": 1795,
    "title": "Please help ",
    "created_at": "2018-02-06T18:34:34Z",
    "closed_at": "2018-02-06T19:14:15Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/1795",
    "body": "Hi everyone, im a newbie in js and i need your help.So this is my code and the main problem is that it doesnt return me eth and btc balances, just says promise pending and after gives me al info about balance on every currency \r\n\r\n```\r\nlet finalamountbinance\r\nlet getbalancebinance = async() => {\r\n    let count=0;\r\n    let balance\r\n    try{\r\n        balance = await binance.fetchBalance()\r\n        console.log(balance)\r\n    }\r\n    catch(BaseError){\r\n        getbalancebinance()\r\n    }\r\n    if(count==0){\r\n        finalamountbinance = balance.BTC.free\r\n        count++\r\n        final=0\r\n    }\r\n    if(count==1){\r\n        finalamountbinance = balance.ETH.free\r\n        count--\r\n        final=0\r\n    }\r\n}\r\nlet getbalanceyobit = async() => {\r\n    let balance\r\n    try{\r\n        balance = await yobit.fetchBalance()\r\n        console.log(yobit)\r\n    }\r\n    catch(BaseError){\r\n        getbalanceyobit()\r\n    }\r\n    return balance\r\n}\r\n\r\nfunction bot(){\r\n    getbalancebinance()\r\n    console.log(finalamountbinance)\r\n    getbalancebinance()\r\n    console.log(finalamountbinance)\r\n}\r\n\r\nbot()\r\n```",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/1795/comments",
    "author": "artbred",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2018-02-06T19:14:15Z",
        "body": "A straightforward answer to your question:\r\n\r\n```JavaScript\r\nlet finalamountbinance\r\nlet getbalancebinance = async() => {\r\n    let count=0;\r\n    let balance\r\n    try{\r\n        balance = await binance.fetchBalance()\r\n        console.log(balance)\r\n    }\r\n    catch(BaseError){\r\n        getbalancebinance()\r\n    }\r\n    if(count==0){\r\n        finalamountbinance = balance.BTC.free\r\n        count++\r\n        final=0\r\n    }\r\n    if(count==1){\r\n        finalamountbinance = balance.ETH.free\r\n        count--\r\n        final=0\r\n    }\r\n}\r\nlet getbalanceyobit = async() => {\r\n    let balance\r\n    try{\r\n        balance = await yobit.fetchBalance()\r\n        console.log(yobit)\r\n    }\r\n    catch(BaseError){\r\n        getbalanceyobit()\r\n    }\r\n    return balance\r\n}\r\n\r\n;(async function bot(){\r\n    await getbalancebinance()\r\n    console.log(finalamountbinance)\r\n    await getbalancebinance()\r\n    console.log(finalamountbinance)\r\n}) ()\r\n```\r\n\r\nHowever, I'm not responsible for the code quality, you need to practice more with general JS and JS promises."
      }
    ]
  },
  {
    "number": 1738,
    "title": "Hitbtc2 empty AVH market, payinEnabled, payoutEnabled, crypto and other fields missing",
    "created_at": "2018-02-02T20:03:20Z",
    "closed_at": "2018-02-02T20:09:15Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/1738",
    "body": "I found this error with Hitbtc2 (but not Hitbtc):\r\n\r\nFile \"/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/ccxt/base/exchange.py\", line 844, in load_markets\r\n    currencies = self.fetch_currencies()\r\n  File \"/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/ccxt/hitbtc2.py\", line 616, in fetch_currencies\r\n    payin = currency['payinEnabled']",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/1738/comments",
    "author": "alexlacey",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2018-02-02T20:09:15Z",
        "body": "Yep, for some reason their API started reporting this empty currency: `{\"id\":\"AVH\",\"fullName\":\"Animation Vision Cash\"}` but ccxt version 1.10.978 that is capable of handling it has already arrived, please update and retry once again. Let us know if this does not solve the issue for you. Thx!\r\n"
      }
    ]
  },
  {
    "number": 1733,
    "title": "[Bug] Bittrex OHLCV not realtime?",
    "created_at": "2018-02-02T14:56:43Z",
    "closed_at": "2018-02-02T15:02:15Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/1733",
    "body": "Here's how I'm doing the OHLCV requests:\r\n```\r\n  new ccxt[exchange]().fetchOHLCV(\r\n    'ETH/BTC\", \r\n    '1m',\r\n    undefined\r\n  )\r\n\r\n```\r\n\r\nAnd, here's the output for 3 exchange (binance, bittrex, okex):\r\n```\r\nokex:\r\nFri Feb 02 2018 21:52:00 GMT+0700 (+07) (printCurrent @ index.mjs:32)\r\n\r\nbinance\r\n Fri Feb 02 2018 21:52:00 GMT+0700 (+07) (printCurrent @ index.mjs:32)\r\n\r\nbittrex\r\nFri Feb 02 2018 21:49:00 GMT+0700 (+07) (printCurrent @ index.mjs:32)\r\n```\r\n\r\nNotice how bittrex is lagging? I kept on running the script for a while, and bittrex OHLCV was consistently 3-4 min lagging behind.\r\nIs this a bug in my code, or a bug in the library?",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/1733/comments",
    "author": "ghost",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2018-02-02T15:02:15Z",
        "body": "> Is this a bug in my code, or a bug in the library?\r\n\r\nThis is neither a bug in your code, nor a bug in the library. It's just how Bittrex works, and you can enable verbose mode (pass the `{'verbose': True}` to the constructor params), and check their URLs and reported values yourself. Bittrex does not have an official OHLCV API endpoint at all, and we use their undocumented v2.0 endpoint for that. Hope it answers your question. Thx!"
      }
    ]
  },
  {
    "number": 1522,
    "title": "hasFetchOHLCV result different from exchange.has for multiple exchanges",
    "created_at": "2018-01-27T00:01:17Z",
    "closed_at": "2018-01-27T00:04:43Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/1522",
    "body": "- OS: Windows 10\r\n- Programming Language version: Python 3.6.4\r\n- CCXT version: 1.10.854\r\n- Exchange: bittrex, gdax, maybe others\r\n- Method: hasFetchOHLCV\r\n```\r\nPython 3.6.4 (v3.6.4:d48eceb, Dec 19 2017, 06:54:40) [MSC v.1900 64 bit (AMD64)] on win32\r\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\r\n>>> import ccxt\r\n>>> bittrex = getattr(ccxt, 'bittrex')({'verbose': True})\r\n>>> bittrex.hasFetchOHLCV\r\nFalse\r\n>>> bittrex.has.get('fetchOHLCV')\r\nTrue\r\n>>> gdax = getattr(ccxt, 'gdax')({'verbose': True})\r\n>>> gdax.hasFetchOHLCV\r\nFalse\r\n>>> gdax.has.get('fetchOHLCV')\r\nTrue```",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/1522/comments",
    "author": "justinxjx",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2018-01-27T00:04:43Z",
        "body": "The `hasFetchOHLCV` is now deprecated (as well as other properties alike). The new metainfo interface is contained within `.has = { }` dictionary. We are removing the outdated properties for more order. Let us know if you find some exchanges with incorrect values in their `.has = { }` property. We will update them appropriately. Hope it answers your question."
      }
    ]
  },
  {
    "number": 1432,
    "title": "HitBTC -> hitbtc $order $amount should be evenly divisible by lot unit size of 1000",
    "created_at": "2018-01-22T20:55:48Z",
    "closed_at": "2018-01-22T21:01:16Z",
    "labels": [
      "duplicate",
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/1432",
    "body": "Hi, im getting the following error when executing a limit sell order on HitBTC:\r\n\r\n`$hitbtc->createLimitSellOrder('XVG/BTC', '210.49790575916', '0.00000955');`\r\n\r\n`hitbtc $order $amount should be evenly divisible by lot unit size of 1000`\r\n\r\nHow should I interpret this? Which should be divisible by 1000, the total amount of the order? In this specific trade, the trade amount would be 0.002010255 BTC. What should my trade amount be for this trade to continue?\r\n\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/1432/comments",
    "author": "darthf1",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2018-01-22T21:01:16Z",
        "body": "When you submit an order you pass the amount and the price.\r\n\r\n```\r\n$hitbtc->createLimitSellOrder($symbol, $amount, $price);\r\n```\r\n\r\nIn this specific trade the amount is 210.497905575916\r\n\r\n```\r\n$hitbtc->load_markets();\r\necho $hitbtc->markets[$symbol]['lot'] . \"'\\n\";\r\n```\r\n\r\nThe amount should be divisible by lot size.\r\nLet us know if this does not answer your question."
      },
      {
        "user": "darthf1",
        "created_at": "2018-01-22T21:03:58Z",
        "body": "Thanks for your reply! Does this mean the minimal trade amount should be 1000, instead of 210? So I can only sell 1000, 2000, 3000 etc XVG?"
      },
      {
        "user": "kroitor",
        "created_at": "2018-01-22T21:10:16Z",
        "body": "@darthf1 is your version up to date? The error message has changed now. Can you update and try again? The lot size is 1 for XVG/BTC, so your amounts should be 239, 240, 241..."
      },
      {
        "user": "darthf1",
        "created_at": "2018-01-22T21:29:15Z",
        "body": "I checked `composer.lock` and I am at `1.10.809`.\r\n\r\nGot the same error with the same trade.\r\n`hitbtc $order $amount should be evenly divisible by lot unit size of 1000`\r\n\r\n"
      },
      {
        "user": "kroitor",
        "created_at": "2018-01-22T21:32:09Z",
        "body": "@darthf1 yes, sorry, I was looking at Binance instead of HitBTC. With HitBTC the lot size for XVG/BTC is indeed 1000, so, yes, 1000, 2000, 3000, etc."
      }
    ]
  },
  {
    "number": 1368,
    "title": "Quoinex exchange id wrong in manual",
    "created_at": "2018-01-19T15:14:32Z",
    "closed_at": "2018-01-19T15:24:36Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/1368",
    "body": "Hi, \r\n\r\nper the manual, the id of Quoinex is \"quoinex\"\r\n\r\nHowever, using this code\r\n`let Quoinex = new ccxt.quoinex ({apiKey: API.Quoinex.Key, secret: API.Quoinex.Secret})`\r\n\r\nresults in this error: \r\n\r\n> TypeError: ccxt.quoinex is not a constructor\r\n>     at c:\\Trader\\Logic\\Test.js:68:22\r\n>     at FSReqWrap.readFileAfterClose [as oncomplete] (fs.js:511:3)\r\n\r\nIf I use \"new ccxt.quoine\", it does work.\r\n\r\nSo manual is wrong, (but I would actually prefer the naming to be per the manual, \"quoinex\")\r\n\r\nSo, do I change my code, or do you change yours?",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/1368/comments",
    "author": "wannesdemaeght",
    "comments": [
      {
        "user": "Deathamns",
        "created_at": "2018-01-19T15:20:20Z",
        "body": "It was renamed recently #1311. `quoinex` is the correct one, just make sure you're using a newer version of the library."
      }
    ]
  },
  {
    "number": 1345,
    "title": "Question for selling an altcoin for bitcoin",
    "created_at": "2018-01-17T18:44:46Z",
    "closed_at": "2018-01-17T19:13:21Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/1345",
    "body": "OS:Linux\r\nProgramming Language version:Python\r\nCCXT version:1.10.586\r\nExchange:bleutrade\r\nMethod:create_limit_buy_order\r\n\r\nI want to sell an alt coin for bitcoin but calling create_limit_sell_order or create_limit_buy_order raise the exception of insufficient funds\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/1345/comments",
    "author": "chatzich",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2018-01-17T18:47:42Z",
        "body": "Do you have sufficient funds to place the order? The exception states it clearly, you need to have `amount * price + fee` on your balance to place the order."
      },
      {
        "user": "chatzich",
        "created_at": "2018-01-17T18:51:18Z",
        "body": "(amountOfBtc I want to buy)*priceOfAltcoinInBtc + fee right?"
      },
      {
        "user": "kroitor",
        "created_at": "2018-01-17T18:53:09Z",
        "body": "Which symbol (market, pair) are you trading?"
      },
      {
        "user": "chatzich",
        "created_at": "2018-01-17T18:55:14Z",
        "body": "I want to convert VRC to BTC\r\n"
      },
      {
        "user": "kroitor",
        "created_at": "2018-01-17T19:03:21Z",
        "body": "Ok, the symbol is `VRC/BTC`, and the amount is always on the left (before the slash), the price is on the right (after the slash).\r\n\r\nTherefore, the amount is in VRC. And the price is in BTC.\r\n\r\nSo,\r\n\r\n> (amountOfBtc I want to buy)*priceOfAltcoinInBtc + fee right?\r\n\r\nWrong )\r\n\r\nThe correct version is:\r\n\r\n```amount of VRC you want to buy * price of 1 VRC in BTC + fee```\r\n\r\nDoes this answer your question?"
      },
      {
        "user": "chatzich",
        "created_at": "2018-01-17T19:07:44Z",
        "body": "I want to buy BTC with the amount of VRC "
      },
      {
        "user": "kroitor",
        "created_at": "2018-01-17T19:09:35Z",
        "body": "@ironexmaiden as far as I know, their API does not allow that. You can only buy and sell VRC for BTC, not vice versa. But, hey, when you buy BTC for VRC and you know the amount of VRC, it means, you're just selling VRC for BTC, right? )"
      },
      {
        "user": "kroitor",
        "created_at": "2018-01-17T19:13:09Z",
        "body": "@ironexmaiden \r\n\r\nYou can't do this:\r\n\r\n- *I want to buy BTC with the amount of VRC*\r\n\r\nBut you can do this:\r\n\r\n- *I want to sell the amount VRC for BTC*\r\n\r\nAnd it's the same thing, you just need to be exact in sides and terms."
      },
      {
        "user": "chatzich",
        "created_at": "2018-01-17T19:16:27Z",
        "body": "How can I achieve this @kroitor ? with create_limit_sell_order? I have thought that this function is selling BTC for the altcoin in  the trade symbol i.e VRC/BTC sells BTC for VRC"
      },
      {
        "user": "kroitor",
        "created_at": "2018-01-17T19:20:20Z",
        "body": "@ironexmaiden \r\n\r\n> with create_limit_sell_order?\r\n\r\nYes\r\n\r\n> I have thought that this function is selling BTC for the altcoin in the trade symbol i.e VRC/BTC sells BTC for VRC\r\n\r\nIt's vice-versa: sells VRC for BTC.\r\n\r\n```\r\n base \u2192 VRC/BTC \u2190 quote\r\n```\r\n\r\n- create_limit_buy_order = you buy the base currency (VRC) and give (pay) quote currency (BTC)\r\n- create_limit_sell_order = you sell the base currency (VRC) and receive the quote currency (BTC)\r\n- amount is always in base currency (VRC)\r\n- price is always in quote currency (BTC)\r\n"
      }
    ]
  },
  {
    "number": 1097,
    "title": "How to determine if bittrex's specific wallet is offline or under maintainance",
    "created_at": "2018-01-06T21:01:00Z",
    "closed_at": "2018-01-06T21:07:37Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/1097",
    "body": "Hello,\r\nIs there a way to check if a wallet on bittrex is offline or under maintainance etc?\r\n\r\nI used cctx.bittrex.load_markets() for ['FCT/BTC'] and returns \"active\":true even though the wallet is currently offline",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/1097/comments",
    "author": "chatzich",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2018-01-06T21:07:37Z",
        "body": "Hi!\r\n\r\n```Python\r\nimport ccxt\r\nimport pprint\r\nexchange = ccxt.bittrex ()\r\nexchange.load_markets()\r\npprint(exchange.currencies['FCT'])\r\npprint(exchange.currencies['FCT']['active'])\r\n```"
      },
      {
        "user": "chatzich",
        "created_at": "2018-01-06T21:10:52Z",
        "body": "Thank you ! But why ['FCT/BTC'] active returns true?"
      },
      {
        "user": "kroitor",
        "created_at": "2018-01-06T21:11:18Z",
        "body": "@ironexmaiden because it is allowed for trading (you can't fund it, but you can trade it).\r\n  "
      }
    ]
  },
  {
    "number": 1085,
    "title": "Flip XRP on The rock",
    "created_at": "2018-01-06T01:24:24Z",
    "closed_at": "2018-01-07T13:05:02Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/1085",
    "body": "How can I flip EUR/XRP to XRP/EUR on TheRock trading\r\n- OS: any\r\n- Programming Language: python\r\n- CCXT version: latest master\r\n- Exchange: Therock\r\n- Method: fetch_l2_order_book\r\n\r\nCould you suggest me a way to flip the order book to align it with other exchanges ?\r\nactually therock publish data in EUR/XRP and BTC/XRP while the rest of the exchanges are in XRP/EUR do you have any strategy to flip the api ? (order_book would be the first but also the rest of the APIs)\r\nI could then implement it and send you a PR.\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/1085/comments",
    "author": "marcobazzani",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2018-01-06T01:48:05Z",
        "body": "> How can I flip EUR/XRP to XRP/EUR on TheRock trading\r\n\r\nYou can't really do that, because EUR and XRP base/quote positions are not interchangeable, therefore the exchanges' policies for fees and tokens in general aren't \"flippable\" (can't reflect them, because this is not an ideal mirror, we have to account for conversion rates and liquidity, globally).\r\n\r\n> Could you suggest me a way to flip the order book to align it with other exchanges ?\r\n\r\nThis is a way to flip the price quickly, without accounting for the above important aspects:\r\n\r\n```\r\nprice = 1 / price\r\n```\r\n\r\n```JavaScript\r\nmbp:ccxt igorkroitor$ node examples/js/cli therock fetchTicker EUR/XRP\r\n{      symbol:   \"EUR/XRP\",\r\n    timestamp:    1515202347379,\r\n     datetime:   \"2018-01-06T01:32:27.379Z\",\r\n         high:    0.55,\r\n          low:    0.4,\r\n          bid:    0.47,\r\n          ask:    0.48,\r\n         vwap:    undefined,\r\n         open:    0.44,\r\n        close:    0.48,\r\n        first:    undefined,\r\n         last:    0.48,\r\n       change:    undefined,\r\n   percentage:    undefined,\r\n      average:    undefined,\r\n   baseVolume:    230192.46,\r\n  quoteVolume:    107757.9509,\r\n         info: {          date: \"2018-01-06T02:32:27.379+01:00\",\r\n                       fund_id: \"EURXRP\",\r\n                           bid:  0.47,\r\n                           ask:  0.48,\r\n                          last:  0.48,\r\n                          open:  0.44,\r\n                         close:  0.48,\r\n                           low:  0.4,\r\n                          high:  0.55,\r\n                        volume:  107757.9509,\r\n                 volume_traded:  230192.46                       } }\r\n```\r\n```shell\r\nmbp:ccxt igorkroitor$ echo \"scale=8; 1/0.48\" | bc\r\n2.08333333\r\n```\r\n\r\n2.083 ~ XRP/EUR... This is **very roughly** (I warned you).\r\n\r\n```\r\nmbp:ccxt igorkroitor$ node examples/js/cli cex fetchTicker XRP/EUR\r\n...\r\n         last:    2.17,\r\n...\r\n```\r\n\r\n> do you have any strategy to flip the api ?\r\n\r\nYes, the strategy is to touch the prices and amounts (volumes) as little as possible in the library and do as much as possible on top of it. Therefore we don't flip them in the base code.\r\n\r\n> I could then implement it and send you a PR.\r\n\r\nI think this affects some delicate aspects of estimating values for tokens (especially the fee schedules) and it is likely better to leave it in the userland. In other words, we let the user decide. We would be happy for all contributions from you, but we have concerns which aren't easily resolvable on this particular proposal (it would require a significant rework at the very least + all of the above).\r\n\r\nLet me know if this answers your question. Thx!\r\n  "
      },
      {
        "user": "kroitor",
        "created_at": "2018-01-07T13:05:02Z",
        "body": "@marcobazzani what I wanted to say is that when you reverse the sides of the pair you can introduce some unwanted side-effects. For example, some exchanges have different fees on the buy and sell sides. Also, holding a value of M xrp worth of N euro is not the same as holding N euro in the first place \u2013 when flipping sides you have to account for added risks of holding this or that coin. Some exchanges freeze some pairs and funding occasionally. So, in general, it's not always a strict conversion ratio of 1/x, especially, if you are trading against multiple exchanges. Hope it helps."
      }
    ]
  },
  {
    "number": 1056,
    "title": "What does edit order do",
    "created_at": "2018-01-03T21:29:06Z",
    "closed_at": "2018-01-03T22:00:28Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/1056",
    "body": "Can someone please explain what does edit order do? And how does it work (an example)?\r\n\r\nI did not find any information about it in the manual. \r\n\r\nThank you so much for this awesome tool!\r\n  ",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/1056/comments",
    "author": "hunsnowboarder",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2018-01-03T21:37:43Z",
        "body": "Some exchanges support *canceling+placing a new order* in one call (poloniex). For other exchanges that don't support that, the editOrder call will emulate it in two separate calls (cancel, then place new), effectively replacing or *editing* the old order. Let me know if this answers your question.\r\n  "
      },
      {
        "user": "kroitor",
        "created_at": "2018-01-03T21:46:39Z",
        "body": "This is the default implementation:\r\n\r\n```Python\r\n    def edit_order(self, id, symbol, *args):\r\n        if not self.enableRateLimit:\r\n            raise ExchangeError(self.id + ' edit_order() requires enableRateLimit = true')\r\n        self.cancel_order(id, symbol)\r\n        return self.create_order(symbol, *args)\r\n```\r\n\r\nAs you can see, it accepts the id + all params from `create_order()`: \r\n```\r\ndef create_order(self, symbol, type, side, amount, price=None, params={}):\r\n```\r\n\r\nSo the full ordered set of **positional** arguments for `edit_order()` is:\r\n- id\r\n- symbol\r\n- type\r\n- side\r\n- amount\r\n- price\r\n- params\r\n\r\nDoes this help?\r\n  "
      },
      {
        "user": "kroitor",
        "created_at": "2018-01-03T21:58:24Z",
        "body": "> Just a question out of curiosity. Why is the symbol a required parameter? \r\n\r\nBecause they have separate databases with unsynchronized ids between the databases, so you can't mix one id with the other database, if you don't know the symbol.\r\n\r\n> The order id should definitely identify the order. \r\n\r\nOnly if all your orders in the engine use the same linear id space. But this is often **not the case**. \r\n\r\n> I suppose this is an expectation from the exchange just for double checking the command.\r\n\r\nIf you think in terms of scalability and load-balancing, this can make sense. Separate clusters for separate pairs and for unrelated orders = no accidental interference = a more reliable exchange.\r\n  "
      }
    ]
  },
  {
    "number": 932,
    "title": "Tracking all order books simultaneously",
    "created_at": "2017-12-22T07:58:51Z",
    "closed_at": "2017-12-22T22:18:19Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/932",
    "body": "Is it possible to read the order book for every coin on binance simultaneously, or do I need to loop through to get each one?\r\n\r\n- OS: Macook\r\n- Language: Python\r\n- CCXT version:\r\n- Exchange: Binance\r\n- Method: \r\n\r\n```\r\nbook = exchange.fetch_order_book('Symbol') vs. book = exchange.fetch_order_book(<all_coins>)\r\n```",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/932/comments",
    "author": "ghost",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2017-12-22T08:23:56Z",
        "body": "> Is it possible to read the order book for every coin on binance simultaneously, or do I need to loop through to get each one?\r\n\r\nIt is not possible with REST, you need to run a loop over them to get each one. With WS this may be possible, we are working on unifying WS right now. Let me know if this answers your question or not. Thx!"
      }
    ]
  },
  {
    "number": 893,
    "title": "bitstamp createOrder type limit throws \"under 5$ Order\" exception",
    "created_at": "2017-12-18T21:39:45Z",
    "closed_at": "2017-12-18T22:09:03Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/893",
    "body": "createLimitBuyOrder is also broken on bitstamp.\r\n\r\n- exchange.createOrder ('BTC/USD', 'limit', 'buy', '0.001', '20.00') -> doesn't work\r\n- exchange.createOrder ('BTC/USD', 'market', 'buy', '0.001') -> works fine\r\n\r\ni don't know how to fix it myself, sorry.",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/893/comments",
    "author": "jom1337",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2017-12-18T21:50:30Z",
        "body": "Let's see... you're buying BTC 0.001 for a price of $20 per BTC, that is:\r\n\r\n`$20 * 0.001 = $0.020` \r\n\r\nwhich is obviously less that $5. Pure arithmetics...\r\n\r\nYour BTC/USD order should be worth more than $5 in total. \r\n\r\n> i don't know how to fix it myself, sorry.\r\n\r\nOne solution I would propose is to not submit orders that are too small, because most exchanges will forbid *dust trade* (orders of very tiny amounts)."
      }
    ]
  },
  {
    "number": 772,
    "title": "XMR (Monero) Withdrawal and Payment ID example",
    "created_at": "2017-12-07T00:27:11Z",
    "closed_at": "2017-12-07T00:36:53Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/772",
    "body": "Hello!\r\n\r\nMany (all?) exchanges require both wallet + payment ID to deposit XMR (Monero).\r\nTherefore, once withdrawing you should specify both wallet address and payment id. I failed to find a code example for payment id param:\r\n`exchange.withdraw (currency, amount, address, params = {})`\r\n\r\nCould you please help it?\r\n\r\nThank you in advance,\r\n\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/772/comments",
    "author": "Fcl69",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2017-12-07T00:29:12Z",
        "body": "@Fcl69 it is exchange-specific currently, we don't have this particular aspect of XMR unified yet. However, we have started a major rework of currencies, so we hope to support for that soon. In the meantime, you will have to look up the name of that param in exchanges' docs. We will notify you on progress. Let me know if the above does not answer your question. Thx!"
      },
      {
        "user": "Fcl69",
        "created_at": "2017-12-07T00:33:07Z",
        "body": "Ok, got it. So... just to confirm. Here's what binance API says, for example:\r\n> addressTag | STRING | NO | Secondary address identifier for coins like XRP,XMR etc.\r\n\r\nDoes it mean my code should look like that:\r\n`exchange.withdraw ('XMR', 1, 'address', params = {addressTag='payment_id'})`\r\n?"
      },
      {
        "user": "kroitor",
        "created_at": "2017-12-07T00:35:33Z",
        "body": "@Fcl69 \r\n\r\n> Does it mean my code should look like that:\r\n> exchange.withdraw ('XMR', 1, 'address', params = {addressTag='payment_id'})\r\n\r\nAlmost, the exact meaning is:\r\n\r\n```Python\r\nexchange.withdraw ('XMR', 1, 'address', {'addressTag': 'payment_id'})\r\n```"
      }
    ]
  },
  {
    "number": 746,
    "title": "pip install on Mac: Permission denied",
    "created_at": "2017-12-04T16:32:43Z",
    "closed_at": "2017-12-04T16:37:53Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/746",
    "body": "When I install ccxd on command line of Mac, I got a message like a following.\r\nHow can I install ccxt? \r\n\r\npip install ccxt\r\n\r\n\r\nCollecting ccxt\r\n\r\n  Using cached ccxt-1.10.282-py2.py3-none-any.whl\r\nRequirement already satisfied: setuptools in /System/Library/Frameworks/Python.framework/Versions/2.7/Extras/lib/python (from ccxt)\r\nInstalling collected packages: ccxt\r\nException:\r\nTraceback (most recent call last):\r\n  File \"/Library/Python/2.7/site-packages/pip-9.0.1-py2.7.egg/pip/basecommand.py\", line 215, in main\r\n    status = self.run(options, args)\r\n  File \"/Library/Python/2.7/site-packages/pip-9.0.1-py2.7.egg/pip/commands/install.py\", line 342, in run\r\n    prefix=options.prefix_path,\r\n  File \"/Library/Python/2.7/site-packages/pip-9.0.1-py2.7.egg/pip/req/req_set.py\", line 784, in install\r\n    **kwargs\r\n  File \"/Library/Python/2.7/site-packages/pip-9.0.1-py2.7.egg/pip/req/req_install.py\", line 851, in install\r\n    self.move_wheel_files(self.source_dir, root=root, prefix=prefix)\r\n  File \"/Library/Python/2.7/site-packages/pip-9.0.1-py2.7.egg/pip/req/req_install.py\", line 1064, in move_wheel_files\r\n    isolated=self.isolated,\r\n  File \"/Library/Python/2.7/site-packages/pip-9.0.1-py2.7.egg/pip/wheel.py\", line 345, in move_wheel_files\r\n    clobber(source, lib_dir, True)\r\n  File \"/Library/Python/2.7/site-packages/pip-9.0.1-py2.7.egg/pip/wheel.py\", line 316, in clobber\r\n    ensure_dir(destdir)\r\n  File \"/Library/Python/2.7/site-packages/pip-9.0.1-py2.7.egg/pip/utils/__init__.py\", line 83, in ensure_dir\r\n    os.makedirs(path)\r\n  File \"/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/os.py\", line 157, in makedirs\r\n    mkdir(name, mode)\r\nOSError: [Errno 13] Permission denied: '/Library/Python/2.7/site-packages/ccxt'",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/746/comments",
    "author": "kangilrhee",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2017-12-04T16:34:22Z",
        "body": "Have you tried `sudo pip install ccxt` ?"
      }
    ]
  },
  {
    "number": 625,
    "title": "'master' has been diverged",
    "created_at": "2017-11-18T06:09:06Z",
    "closed_at": "2017-11-18T11:28:35Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/625",
    "body": "Hi, git noticed that we diverged after 1.10.148 and I'm unable to merge.\r\n\r\n30+ commits are missing from upstream.\r\n\r\nIs it known and I should just reset or it's something unexpected?",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/625/comments",
    "author": "mkutny",
    "comments": [
      {
        "user": "xpl",
        "created_at": "2017-11-18T10:43:39Z",
        "body": "We had to revert some commits yesterday, while trying to figure out a mysterious issue with GitHub showing a wrong username under commits made by our Travis CI deploy script.\r\n\r\nIt turned out it was not related to our recent changes at all, and was a GitHub issue actually (someone managed to link travis@travis-ci.org email with their GitHub account, so every commit made with this email in the `Author` field was erroneously shown as if it was made by that user). Since then, it has been resolved successfully."
      }
    ]
  },
  {
    "number": 566,
    "title": "About cancellation of orders",
    "created_at": "2017-11-14T09:34:02Z",
    "closed_at": "2017-11-14T10:55:06Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/566",
    "body": "How to find the hang order? How else to cancel the order?",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/566/comments",
    "author": "gavin369",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2017-11-14T10:39:55Z",
        "body": "@gavin369 can you put your question in a few more words, please? \r\n\r\n> How to find the hang order?\r\n\r\nIf your order request failed with unknown order status, you can check your open / closed orders (where implemented) like so:\r\n\r\n```\r\nawait exchange.fetchOrders (symbol, params)\r\n// or\r\nawait exchange.fetchClosedOrders (symbol, params)\r\nawait exchange.fetchOpenOrders (symbol, params)\r\n```\r\n\r\nBut for now, the above method is not implemented for HuobiPro (it will be soon, see more about it here: #71). In the meantime you can use their custom API for fetching orders:\r\n\r\n```\r\nawait exchange.loadMarkets ()\r\nawait exchange.privateGetOrderOrders ({\r\n    'symbol': exchange.markets['ETH/BTC'].id\r\n    'states': [\r\n        'pre-submitted',\r\n        'submitted',\r\n        'partial-filled',\r\n        'partial-canceled',\r\n        'filled',\r\n        'canceled',\r\n    ].join (',')\r\n})\r\n```\r\n\r\n> How else to cancel the order?\r\n\r\n```\r\nawait exchange.cancelOrder (orderId)\r\n```\r\n\r\n> How to write code?\r\n\r\nUhm... Sorry?"
      }
    ]
  },
  {
    "number": 527,
    "title": "Exchanges not returning response dictionary of requests",
    "created_at": "2017-11-09T18:59:41Z",
    "closed_at": "2017-11-09T20:40:13Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/527",
    "body": "Hi,\r\n\r\nI trade with some exchanges and regularly, for some buy, sell ou tranfers requests, my order is placed but no response dictionary is returned, so I do not know if the order was really placed. Is there anything I can do about it, or it's a problem with the exchange's server that happens sometimes?\r\n\r\nThanks fou your support.",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/527/comments",
    "author": "Felipe-Mangueira",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2017-11-09T19:01:26Z",
        "body": "@Felipe-Mangueira hi! Do you mean that you place those orders with ccxt? Or in general?"
      },
      {
        "user": "Felipe-Mangueira",
        "created_at": "2017-11-09T19:54:11Z",
        "body": "Yes @kroitor, I place all those orders with ccxt."
      },
      {
        "user": "Felipe-Mangueira",
        "created_at": "2017-11-09T19:56:50Z",
        "body": "This happens recurrently with Kraken and sometimes with Mercado Bitcoin. With Bitfinex and others I have tested, it happened just a few times, but it happened anyway."
      },
      {
        "user": "kroitor",
        "created_at": "2017-11-09T20:20:55Z",
        "body": "@Felipe-Mangueira with Kraken it's a usual thing, it has been under huge load for past few months... They barely can handle it. In general, a request to create an order can fail, and in that case you should recover and check the open / closed orders and trades to find out whether it was accepted or not and whether the exchange managed to close (fill) it or not, while you were recovering. There's no other way to workaround this problem, unfortunately. We also see those timeouts all the time and we have to keep all state in the local memory in order to recover from http failures. We believe it's a globally-fair issue that is appearing in all clients. It's just how exchanges work. Does this answer your question?"
      },
      {
        "user": "kroitor",
        "created_at": "2017-11-09T20:40:13Z",
        "body": "@Felipe-Mangueira ok... you can also try increasing timeout for Kraken if you can tolerate that in your logic. We had to raise it up to 20 seconds, because Kraken takes 15 seconds just to open an order sometimes... Let us know if you have any other questions. Thx!"
      },
      {
        "user": "Felipe-Mangueira",
        "created_at": "2017-11-09T20:51:12Z",
        "body": "I have already changed the timeout for Kraken, @kroitor , but not always the exchange returns a timeout error, and when it returns, it doesn't mean the order was not placed, and I have to check it out anyway.\r\n\r\nOk, no problem. I appreciate your tips, anyway."
      }
    ]
  },
  {
    "number": 486,
    "title": "Binance: publicGetMarketIdHours",
    "created_at": "2017-11-07T12:35:42Z",
    "closed_at": "2017-11-07T14:03:57Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/486",
    "body": "````\r\nhours = 8  # \u2190 your timeframe\r\ntopia.load_markets()\r\n\r\nfor symbol in btccoins:\r\n    market = topia.market(symbol)\r\n    response = topia.publicGetMarketIdHours(topia.extend({\r\n        'id': market['id'],\r\n        'hours': hours,\r\n    }))\r\n    time.sleep(delay)\r\n    ticker = topia.parse_ticker(response['Data'], market)  # How to be sure it returns the 8h past hour market?\r\n    # do whatever you need with the ticker...\r\n    datetime = ticker['datetime']\r\n    timestamp = ticker['timestamp']\r\n    open = ticker['open']\r\n    close = ticker['close']\r\n    print(close, datetime, timestamp)\r\n````\r\nthat's the result: -> timestamp is not 8h ago so how can I know it actually represents the 8h past hours timeframe?\r\n\r\n1.814e-05 2017-11-07T12:32:59.000Z 1510057979383\r\n1.209e-05 2017-11-07T12:33:01.000Z 1510057981017\r\n4.15e-05 2017-11-07T12:33:02.000Z 1510057982474\r\n1.07e-06 2017-11-07T12:33:04.000Z 1510057983791\r\n0.00105061 2017-11-07T12:33:05.000Z 1510057985092\r\n\r\nI'm sorry if I did something wrong in advance. I'm really trying to get this sorted out. thanks\r\n\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/486/comments",
    "author": "saianwork",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2017-11-07T13:00:31Z",
        "body": "If you look at timestamps you are getting, you will immediately see that those represent current datetime in UTC. When the ticker is returned, the timestamp shows the time when it was generated, not the start of your timeframe. So it will always show approximately current time. Your ticker was generated now, and its values show last 8 hours of history. The beginning of your timeframe isn't indicated anywhere.\r\n\r\n> so how can I know it actually represents the 8h past hours timeframe?\r\n\r\nAsk Binance if they really report true data for the last 8 hours or not? We don't change it on the fly. You get it as is. I hope it answers your question."
      }
    ]
  },
  {
    "number": 414,
    "title": "problem with exchange.parse8601()",
    "created_at": "2017-10-28T15:24:37Z",
    "closed_at": "2017-10-29T15:24:43Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/414",
    "body": "Hi, this problem happens randomly so I'm not sure if it has something to do with ccxt itself or if it may be a race condition in my threaded program. From time to time, not always, when I call exchange.parse8601(), it shows the following exception:\r\n\r\n```\r\nException in thread Thread-24:\r\nTraceback (most recent call last):\r\n  File \"/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/threading.py\", line 810, in __bootstrap_inner\r\n    self.run()\r\n  File \"/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/threading.py\", line 763, in run\r\n    self.__target(*self.__args, **self.__kwargs)\r\n  File \"nemesis2.py\", line 437, in stream_ohlcv\r\n    from___ = exchange.parse8601(from__) \r\n  File \"/Library/Python/2.7/site-packages/ccxt/exchange.py\", line 589, in parse8601\r\n    dt = datetime.datetime.strptime(string, \"%Y%m%d%H%M%S.%fZ\")\r\nAttributeError: 'module' object has no attribute '_strptime'\r\n```\r\n\r\nMy code is as follows (I'm using relativedelta to extract the last 100 candles since the last time):\r\n\r\n```\r\nnow = datetime.datetime.now()\r\nfrom_ = now - relativedelta (minutes=100)\r\nfrom__='{:%Y-%m-%d %H:%M:%S}'.format(from_)\r\nfrom___ = exchange.parse8601(from__)\r\ndata = exchange.fetch_ohlcv(\"ETH/USD\", \"5m\", from___)\r\n```",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/414/comments",
    "author": "werewere",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2017-10-28T15:34:06Z",
        "body": "Hi, @werewere !\r\n\r\nWhy do you use parse8601 there at all? You don't need to convert a number (a time value) to a string just to parse it back to a number. Try this:\r\n\r\n```Python\r\n_5m_candle = 5 * 60 * 1000  # 5 minutes * 60 seconds * 1000 ms\r\ndata = exchange.fetch_ohlcv(\"ETH/USD\", \"5m\", exchange.milliseconds () - _5m_candle * 100)\r\n```"
      },
      {
        "user": "kroitor",
        "created_at": "2017-10-28T17:14:38Z",
        "body": "Can you paste the shortest possible snippet that is short enough for posting, but works (can be launched) and reproduces/demonstrates the problematic case or the error?"
      },
      {
        "user": "werewere",
        "created_at": "2017-10-28T17:51:55Z",
        "body": "Yep, you're right. I was doing it more complicated than needed! Your solution is much more elegant.\r\n\r\nRegarding the shortest snippet, here goes it (well, its not the shortest-shortest, but I wanted to keep some info). I'm keeping my (bad) number->string->number design to keep it real. It fails about 1/10 times (anyway I just removed the parse8601 method thanks to your solution, so I'm putting it here just for debugging purposes in case it may be some bug in ccxt):\r\n\r\n```\r\nimport ccxt\r\nimport time\r\nimport threading\r\nimport datetime\r\nfrom dateutil.relativedelta import *\r\n\r\nexchange   = ccxt.poloniex({\r\n    'apiKey': 'KEY',\r\n    'secret': 'SECRET',\r\n})\r\nclass Feed (object):\r\n\r\n    def __init__(self, instruments=[\"ETH/BTC\", \"XRP/BTC\", \"BCH/BTC\"]):\r\n        self.candles=[\"5m\", \"15m\", \"1d\"]\r\n        self.candle_dict = {}\r\n        self.lock = threading.Lock()\r\n\r\n        for instrument in instruments: #1 thread per pair\r\n            thread = threading.Thread(target=self.stream_ohlcv, args=(instrument,))\r\n            thread.daemon = True\r\n            thread.start()\r\n\r\n    def stream_ohlcv(self, instrument=\"ETH/BTC\"):\r\n        while 1:\r\n                try:\r\n                        for candle in self.candles:\r\n                            now = datetime.datetime.utcnow()\r\n\r\n                            if candle == \"1m\":\r\n                                from_ = now - relativedelta (minutes=100)\r\n                            elif candle==\"5m\":\r\n                                from_ = now - relativedelta (minutes=500)\r\n                            elif candle==\"1h\":\r\n                                from_ = now - relativedelta (hours=100)\r\n                            elif candle==\"1d\":\r\n                                from_ = now - relativedelta (days=100)\r\n\r\n                            from__='{:%Y-%m-%d %H:%M:%S}'.format(from_)\r\n\r\n                            from___ = exchange.parse8601(from__) \r\n\r\n                            data = exchange.fetch_ohlcv(instrument, candle, from___)\r\n                            #do things with data\r\n\r\n                except ccxt.RequestTimeout as e: \r\n                    print(type(e).__name__, e.args, 'Request Timeout (ignoring)')\r\n                except ccxt.ExchangeNotAvailable as e:\r\n                    print(type(e).__name__, e.args, 'Exchange Not Available due to downtime or maintenance (ignoring)')\r\n                except ccxt.AuthenticationError as e:\r\n                    print(type(e).__name__, e.args, 'Authentication Error (missing API keys, ignoring)')\r\n\r\n                time.sleep(5)\r\n\r\nfeed = Feed([\"ETH/BTC\", \"XRP/BTC\", \"BCH/BTC\"])\r\ntime.sleep(10000)\r\n```"
      },
      {
        "user": "kroitor",
        "created_at": "2017-10-29T05:19:44Z",
        "body": "@werewere no matter what I do, I can't get an error from this:\r\n\r\n```Python\r\nimport ccxt\r\nimport time\r\nimport threading\r\nimport datetime\r\n\r\ndurations = {\r\n    '5m':       5 * 60 * 1000,\r\n    '15m':     15 * 60 * 1000,\r\n    '1d': 24 * 60 * 60 * 1000,\r\n}\r\n\r\nclass Feed (object):\r\n\r\n    def __init__(self, instruments=[\"ETH/BTC\", \"XRP/BTC\", \"BCH/BTC\"]):\r\n        self.candles=[\"5m\", \"15m\", \"1d\"]\r\n\r\n        for instrument in instruments: #1 thread per pair\r\n            thread = threading.Thread(target=self.stream_ohlcv, args=(instrument,))\r\n            thread.daemon = True\r\n            thread.start()\r\n\r\n    def stream_ohlcv(self, instrument=\"ETH/BTC\"):\r\n\r\n        exchange = ccxt.poloniex({'enableRateLimit': True})\r\n\r\n        while 1:\r\n                try:\r\n                    for candle in self.candles:\r\n                        from_ = durations[candle] * 100\r\n                        data = exchange.fetch_ohlcv(instrument, candle, exchange.milliseconds() - from_)\r\n                        print (exchange.iso8601 (from_), candle, instrument)\r\n                        #do things with data\r\n\r\n                except ccxt.RequestTimeout as e:\r\n                    print(type(e).__name__, e.args, 'Request Timeout (ignoring)')\r\n                except ccxt.ExchangeNotAvailable as e:\r\n                    print(type(e).__name__, e.args, 'Exchange Not Available due to downtime or maintenance (ignoring)')\r\n\r\nfeed = Feed([\"ETH/BTC\", \"XRP/BTC\", \"BCH/BTC\"])\r\ntime.sleep(10000)\r\n```\r\n\r\nThis is the same snippet as yours, but there are a few differences:\r\n\r\n1. In your original example you loop through candles= [ '5m', '15m', '1d' ] (\u2190 no 1m interval here), whereas in your if/else you check for 1m, 5m, 1h, 1d (\u2190 no 15m interval here)...\r\n\r\n2. time.sleep was 5 seconds, which is an overkill, you don't need to sleep that much. In fact, you don't need to sleep at all, if you enableRateLimit in Python 2.7. To avoid conflicts we instantiate the non-authenticated exchange in each thread (no need to authenticate for OHLCVs).\r\n\r\n3. I removed the dateutil from there to make it shorter.\r\n\r\n4. This isn't a good design to poll for many symbols from one exchange. Because your poll requests can interfere with each other, ruining the rate limiter schedule. Most of the time you don't want to launch many threads per exchange, and you need only one thread per exchange. I'd suggest to rethink it. Consider this: your exchange allows 1 request per limited time. And you are launching many threads each doing 1 request per limited time. That is definitely more than 1 request per limit. Therefore this design fails because of a threading conflict.\r\n\r\n5. What's even more strange to me is that you are continuously polling for the SAME candles, you shift by a few seconds (1 candle forward) and then fetch a hundred candles in the past. So 99 of your 100 candles are always repeating. You don't need to do it that way, moreover, you don't need to fetch history every second, because you can fetch it once per hour.\r\n\r\nAnyway, with your snippet or with this one, I was not able to reproduce your error, not even once in 40 launches. Are you sure, this is really the place that is causing trouble and not some other place in your code?"
      }
    ]
  },
  {
    "number": 379,
    "title": "fetch_ohlcv since problem",
    "created_at": "2017-10-23T20:25:01Z",
    "closed_at": "2017-10-23T20:34:58Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/379",
    "body": "Hi, I'm not sure if this is a bug or a feature; the following code won't work:\r\n\r\n```\r\nsince=int(datetime.datetime.strptime('2017-10-23 00:00:00', '%Y-%m-%d %H:%M:%S').strftime(\"%s\"))\r\nohlc=polo.fetch_ohlcv(\"ETH/BTC\", '5m', since)\r\n```\r\nIt is needed to do the following: \r\n```\r\nsince=int(datetime.datetime.strptime('2017-10-23 00:00:00', '%Y-%m-%d %H:%M:%S').strftime(\"%s\"))\r\nsince *=1000\r\nohlc=polo.fetch_ohlcv(\"ETH/BTC\", '5m', since)\r\n```\r\nI found this because checking the ccxt source code, I saw that (in Poloniex at least) the start time was calculated doing:\r\n\r\n`'start': int(since / 1000),`\r\n\r\nMay be this is due to an old problem in Poloniex (I'm just guessing) and then Poloniex fixed the problem but the ccxt code still has the old workaround?. Anyway, this is not a problem, I can just multiply, but I'm not sure if I'm missing something.",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/379/comments",
    "author": "werewere",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2017-10-23T20:30:11Z",
        "body": "Hi, @werewere ! \r\n\r\nNope, it's not a bug, the library works with all timestamps as milliseconds, everywhere. So, yes, you can just do `ohlc=polo.fetch_ohlcv(\"ETH/BTC\", '5m', since * 1000)`. \r\n\r\nMilliseconds are chosen for portability and cross-exchange compatibility, don't forget that Poloniex is not the only exchange that implements the since param and fetch_ohlcv. There are other exchanges as well, and most of the time a common subset of milliseconds-range covers all needs for all exchanges, whereas seconds-based ranges are sometimes not sufficiently precise.\r\n\r\nI hope this reply answers your question, I'd close this issue for now.\r\n\r\nThx!"
      },
      {
        "user": "kroitor",
        "created_at": "2017-10-23T21:21:03Z",
        "body": "@werewere bitfinex v2 already supports OHLCV btw ;) And, hopefully, both of Bitfinex v1 and v2 will support it soon ;)"
      },
      {
        "user": "kroitor",
        "created_at": "2017-10-23T22:17:35Z",
        "body": "@werewere as of version 1.9.237 you can use Bitfinex v1 to fetch_ohlcv() as well ;) Cheers!"
      },
      {
        "user": "xgdgsc",
        "created_at": "2017-11-19T06:36:23Z",
        "body": "Has the since API changed? `bar_list=bitmex.fetch_ohlcv('XBTZ17', '1m', since='2017-11-08 00:01:44')` works in version `'1.9.39'` but not in version `'1.10.171'`."
      },
      {
        "user": "kroitor",
        "created_at": "2017-11-19T06:43:51Z",
        "body": "@xgdgsc it accepts an integer number of milliseconds for consistency across the majority of exchanges, so you can call it like so:\r\n\r\n```Python\r\nbar_list=bitmex.fetch_ohlcv('XBTZ17', '1m', since=bitmex.parse8601('2017-11-08 00:01:44'))\r\n```"
      }
    ]
  }
]