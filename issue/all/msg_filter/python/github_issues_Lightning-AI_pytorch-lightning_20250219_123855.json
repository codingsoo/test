[
  {
    "number": 20086,
    "title": "module statistics has no attribute mean",
    "created_at": "2024-07-15T07:18:01Z",
    "closed_at": "2024-07-15T11:51:42Z",
    "labels": [
      "question",
      "ver: 2.2.x"
    ],
    "url": "https://github.com/Lightning-AI/pytorch-lightning/issues/20086",
    "body": "### Bug description\r\n\r\nWhen updating to the new PyTorch-lightning version 2.3.3 and using the MlFlowLogger as logger arg in the trainer I\u2018m getting the error trace (see error section)\r\n\r\n\r\n### What version are you seeing the problem on?\r\n\r\nmaster\r\n\r\n### How to reproduce the bug\r\n\r\n_No response_\r\n\r\n### Error messages and logs\r\n\r\n```\r\ntrain.py 9 <module>\r\nimport mlflow.pytorch\r\n \r\n__init__.py 1190 <module>\r\nfrom mlflow.pytorch._lightning_autolog import MlflowModelCheckpointCallback  # noqa: F401\r\n \r\n_lightning_autolog.py 24 <module>\r\nimport pytorch_lightning as pl\r\n \r\n__init__.py 27 <module>\r\nfrom pytorch_lightning.callbacks import Callback  # noqa: E402\r\n \r\n__init__.py 29 <module>\r\nfrom pytorch_lightning.callbacks.pruning import ModelPruning\r\n \r\npruning.py 32 <module>\r\nfrom pytorch_lightning.core.module import LightningModule\r\n \r\n__init__.py 16 <module>\r\nfrom pytorch_lightning.core.module import LightningModule\r\n \r\nmodule.py 62 <module>\r\nfrom pytorch_lightning.loggers import Logger\r\n \r\n__init__.py 14 <module>\r\nfrom pytorch_lightning.loggers.comet import CometLogger\r\n \r\ncomet.py 30 <module>\r\nfrom pytorch_lightning.loggers.logger import Logger, rank_zero_experiment\r\n \r\nlogger.py 103 <module>\r\ndefault_func: Callable[[Sequence[float]], float] = statistics.mean,\r\n \r\nAttributeError:\r\nmodule 'statistics' has no attribute 'mean'\r\n\r\n```\r\n\r\n\r\n### Environment\r\n\r\n<details>\r\n  <summary>Current environment</summary>\r\n\r\n```\r\n#- PyTorch Lightning Version (e.g., 1.5.0): 2.3.3\r\n#- PyTorch Version (e.g., 2.0): 2.3.1\r\n#- Python version (e.g., 3.9): 3.11\r\n#- OS (e.g., Linux): MacOS Sonoma 14.5\r\n#- CUDA/cuDNN version:\r\n#- GPU models and configuration:\r\n#- How you installed Lightning(`conda`, `pip`, source): pip\r\n```\r\n\r\n</details>\r\n\r\n\r\n### More info\r\n\r\n_No response_",
    "comments_url": "https://api.github.com/repos/Lightning-AI/pytorch-lightning/issues/20086/comments",
    "author": "FabianKuon",
    "comments": [
      {
        "user": "awaelchli",
        "created_at": "2024-07-15T10:28:22Z",
        "body": "Hey @FabianKuon \r\nThe statistics module is a standard module in Python and it definitely has a mean function. Could you please check that you don't have a different statistics module in the python path? For example, if you have a `statistics.py` module in your code, it would cause a collision with the standard library package. In this case, please rename or delete it. "
      },
      {
        "user": "FabianKuon",
        "created_at": "2024-07-15T11:51:42Z",
        "body": "@awaelchli thank you very much for your quick response. You\u2018re right I do have a statistics.py file in my repo. Renaming that solved the issue. \r\n\r\nOnce again thank you very much "
      }
    ]
  },
  {
    "number": 20020,
    "title": "Teardown trying to copy \"meta\" tensors",
    "created_at": "2024-06-27T08:19:33Z",
    "closed_at": "2024-06-27T21:48:58Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/Lightning-AI/pytorch-lightning/issues/20020",
    "body": "### Bug description\n\nI've got a model template that I'm using with torch.vmap, and to use it I need to store a meta model in my lightning module. However lightning keeps trying to copy the meta model to devices / during teardown etc... This results in an error for the meta tensor, since it does not have a copy method. Any good way to work around this?\r\n\r\nThis code generates my MLP's template, and during any lightning method that copies things, it dies when ```self.base_model.copy()``` or ```self.base_model.to(\"device\")``` is called.\r\n\r\n```python\r\nself.base_model = copy.deepcopy(self.mlp)\r\nself.base_model.to('meta')\r\n```\n\n### What version are you seeing the problem on?\n\nv2.2\n\n### How to reproduce the bug\n\n```python\nRun any lightning model with a meta model as a lightning property\r\n\r\n\r\nself.base_model = copy.deepcopy(self.mlp)\r\nself.base_model.to('meta')\n```\n\n\n### Error messages and logs\n\n```\r\nNotImplementedError: Cannot copy out of meta tensor; no data!\r\n```\r\n\n\n### Environment\n\n<details>\r\n  <summary>Current environment</summary>\r\n\r\n```\r\n#- Lightning Component (e.g. Trainer, LightningModule, LightningApp, LightningWork, LightningFlow):\r\n#- PyTorch Lightning Version (e.g., 1.5.0): 2.2\r\n#- Lightning App Version (e.g., 0.5.2): \r\n#- PyTorch Version (e.g., 2.0): 2.2\r\n#- Python version (e.g., 3.9): 3.10\r\n#- OS (e.g., Linux): Windows\r\n#- CUDA/cuDNN version: 12.1\r\n#- GPU models and configuration: 3090\r\n#- How you installed Lightning(`conda`, `pip`, source): conda\r\n#- Running environment of LightningApp (e.g. local, cloud): local\r\n```\r\n\r\n</details>\r\n\n\n### More info\n\n_No response_",
    "comments_url": "https://api.github.com/repos/Lightning-AI/pytorch-lightning/issues/20020/comments",
    "author": "kvndhrty",
    "comments": [
      {
        "user": "awaelchli",
        "created_at": "2024-06-27T18:35:26Z",
        "body": "Hey @kvndhrty \r\nI think a pretty easy way to work around this is to not register your meta-template model as a submodule. You can easily do that by packing it into a list:\r\n```py\r\ndef __init__(self):\r\n    super().__init__()\r\n    with torch.device(\"meta\"):\r\n        self._template_model = [TemplateModel()]\r\n        \r\n    # then access it like so in your other code: \r\n    self._template_model[0]\r\n    \r\n    # ... or write a getter to return you the template model without indexing\r\n```\r\n\r\nI think that the assumption Lightning makes about your model not being on the meta device after training is a reasonable one. Even so before training, since eventually Lightning moves the model to GPU before training. I think it would become quite complex if we had to add logic to ignore such submodules on the meta-device. More so, it would be error-prone, because meta-device initialization is needed for large model training.\r\nSo I would like to suggest we don't treat this as a bug.\r\n\r\nOne other thing you could do is ask yourself whether it is even necessary to have your template model as an attribute at all. Since the creation on meta-device is basically free, you could also just do that on-the-fly whenever you need that. Get the properties you need and store them somewhere. Then you don't need to keep that template model around.\r\n    "
      }
    ]
  },
  {
    "number": 19252,
    "title": "lighting.pytorch IS NOT pytorch_lightning",
    "created_at": "2024-01-09T11:29:48Z",
    "closed_at": "2024-01-11T11:26:39Z",
    "labels": [
      "question",
      "ver: 2.0.x",
      "package"
    ],
    "url": "https://github.com/Lightning-AI/pytorch-lightning/issues/19252",
    "body": "### Bug description\n\nDocumentation mentions that `pytorch_lightning` is now `lightning`, and that the old API can be found at `lightning_pytorch`.\r\n\r\nAnd yet, if you do:\r\n\r\n```python\r\nimport lightning.pytorch as pl\r\nfrom pytorch_lightning import LightningModule\r\n\r\nclass MyModel(LightningModule):\r\n    pass\r\n\r\nmodel = MyModel()\r\ntrainer = pl.Trainer()\r\ntrainer.fit(model)\r\n```\r\nthis still won't work, you will get:\r\n\r\n```\r\nTypeError: `model` must be a `LightningModule` or `torch._dynamo.OptimizedModule`, got `LightningModule`\r\n```\r\n\r\nbecause the `Trainer` was imported from `lightning.pytorch`, while the model is a `LightningModule` from `pytorch_lightning`. Are they the same or not?\r\n\r\nWhy can't we \"mix\" them?\r\n\r\nThis is sometimes necessary when working with other packages where some rely on `lightning` or `lightning.pytorch`, and other rely on `pytorch_lightning`.\n\n### What version are you seeing the problem on?\n\nv2.0\n\n### How to reproduce the bug\n\n```python\nimport lightning.pytorch as pl\r\nfrom pytorch_lightning import LightningModule\r\n\r\nclass MyModel(LightningModule):\r\n    pass\r\n\r\nmodel = MyModel()\r\ntrainer = pl.Trainer()\r\ntrainer.fit(model)\n```\n\n\n### Error messages and logs\n\n```\r\n# Error messages and logs here please\r\n```\r\n\n\n### Environment\n\n<details>\r\n  <summary>Current environment</summary>\r\n\r\n```\r\n#- Lightning Component (e.g. Trainer, LightningModule, LightningApp, LightningWork, LightningFlow):\r\n#- PyTorch Lightning Version (e.g., 1.5.0):\r\n#- Lightning App Version (e.g., 0.5.2):\r\n#- PyTorch Version (e.g., 2.0):\r\n#- Python version (e.g., 3.9):\r\n#- OS (e.g., Linux):\r\n#- CUDA/cuDNN version:\r\n#- GPU models and configuration:\r\n#- How you installed Lightning(`conda`, `pip`, source):\r\n#- Running environment of LightningApp (e.g. local, cloud):\r\n```\r\n\r\n</details>\r\n\n\n### More info\n\n_No response_",
    "comments_url": "https://api.github.com/repos/Lightning-AI/pytorch-lightning/issues/19252/comments",
    "author": "svnv-svsv-jm",
    "comments": [
      {
        "user": "awaelchli",
        "created_at": "2024-01-09T12:54:51Z",
        "body": "Hi @svnv-svsv-jm \r\n\r\n> because the Trainer was imported from lightning.pytorch, while the model is a LightningModule from pytorch_lightning. Are they the same or not?\r\n> \r\n> Why can't we \"mix\" them?\r\n\r\nThey are two different packages, with the same source code and the only difference is the imports. But Python doesn't know that, so you can't mix them together in the same source code. If you import LightningModule from one package, but the Trainer from the other one, it won't work. They are not meant to be interchangeable. \r\n\r\n> This is sometimes necessary when working with other packages where some rely on lightning or lightning.pytorch, and other rely on pytorch_lightning.\r\n\r\nIt's not possible to mix them. You will have to rewrite the code so that all of it is only from one package.\r\n\r\n\r\n\r\n"
      },
      {
        "user": "awaelchli",
        "created_at": "2024-01-10T10:41:16Z",
        "body": "We don't maintain two copies of the code. We maintain lightning (see the content in GitHub here) and generate the pytorch_lightning package automatically. \r\n\r\nThat there are two packages is a consequence of the decision to rename the package from pytorch-lightning to lightning. "
      }
    ]
  },
  {
    "number": 19119,
    "title": "StagedFinetuning.finetune_function() missing 1 required positional argument: 'opt_idx'",
    "created_at": "2023-12-06T10:50:14Z",
    "closed_at": "2023-12-10T00:26:53Z",
    "labels": [
      "question",
      "waiting on author",
      "callback: finetuning",
      "ver: 2.1.x"
    ],
    "url": "https://github.com/Lightning-AI/pytorch-lightning/issues/19119",
    "body": "### Bug description\r\n\r\nFinetunning with a pytorch_lightning Trainer does not work now.\r\nThe call to `self.finetune_function()` should pass the `opt_idx` as the last parameter.\r\nLine 313 in `pytorch_lightning/callbacks/finetuning.py`.\r\nAfter that fix, finetuning works again.\r\n\r\n\r\n### What version are you seeing the problem on?\r\n\r\nv2.1\r\n\r\n### How to reproduce the bug\r\n\r\n```python\r\nRunning a baseline training run.\r\nI am using a `StagedFinetuning` finetuning object, not sure if that is related.\r\nUsing training with a simple data loader: num_workers=1, batch_size=1\r\n```\r\n\r\n\r\n### Error messages and logs\r\n\r\nMain error message:\r\n```StagedFinetuning.finetune_function() missing 1 required positional argument: 'opt_idx'```\r\n\r\nDetailed trace:\r\n```\r\n  File \"/home/rob/projects/model-training/model_training/training/train.py\", line 83, in main\r\n    trainer.fit(model, dl_train, val_dataloaders=[dl_val])\r\n  File \"/home/rob/.cache/pypoetry/virtualenvs/model-training-799lC6_n-py3.10/lib/python3.10/site-packages/pytorch_lightning/trainer/trainer.py\", line 544, in fit\r\n    call._call_and_handle_interrupt(\r\n  File \"/home/rob/.cache/pypoetry/virtualenvs/model-training-799lC6_n-py3.10/lib/python3.10/site-packages/pytorch_lightning/trainer/call.py\", line 44, in _call_and_handle_interrupt\r\n    return trainer_fn(*args, **kwargs)\r\n  File \"/home/rob/.cache/pypoetry/virtualenvs/model-training-799lC6_n-py3.10/lib/python3.10/site-packages/pytorch_lightning/trainer/trainer.py\", line 580, in _fit_impl\r\n    self._run(model, ckpt_path=ckpt_path)\r\n  File \"/home/rob/.cache/pypoetry/virtualenvs/model-training-799lC6_n-py3.10/lib/python3.10/site-packages/pytorch_lightning/trainer/trainer.py\", line 989, in _run\r\n    results = self._run_stage()\r\n  File \"/home/rob/.cache/pypoetry/virtualenvs/model-training-799lC6_n-py3.10/lib/python3.10/site-packages/pytorch_lightning/trainer/trainer.py\", line 1035, in _run_stage\r\n    self.fit_loop.run()\r\n  File \"/home/rob/.cache/pypoetry/virtualenvs/model-training-799lC6_n-py3.10/lib/python3.10/site-packages/pytorch_lightning/loops/fit_loop.py\", line 201, in run\r\n    self.on_advance_start()\r\n  File \"/home/rob/.cache/pypoetry/virtualenvs/model-training-799lC6_n-py3.10/lib/python3.10/site-packages/pytorch_lightning/loops/fit_loop.py\", line 341, in on_advance_start\r\n    call._call_callback_hooks(trainer, \"on_train_epoch_start\")\r\n  File \"/home/rob/.cache/pypoetry/virtualenvs/model-training-799lC6_n-py3.10/lib/python3.10/site-packages/pytorch_lightning/trainer/call.py\", line 208, in _call_callback_hooks\r\n    fn(trainer, trainer.lightning_module, *args, **kwargs)\r\n  File \"/home/rob/.cache/pypoetry/virtualenvs/model-training-799lC6_n-py3.10/lib/python3.10/site-packages/pytorch_lightning/callbacks/finetuning.py\", line 313, in on_train_epoch_start\r\n    self.finetune_function(pl_module, trainer.current_epoch, optimizer)\r\nTypeError: StagedFinetuning.finetune_function() missing 1 required positional argument: 'opt_idx'\r\n```\r\n\r\n### Environment\r\n\r\n<details>\r\n  <summary>Current environment</summary>\r\n\r\nOnly installed the \"pytorch-lightning\" pip package, not \"lightning\".\r\n\r\n```\r\n#- Lightning Component:  Trainer\r\n#- PyTorch Lightning Version (e.g., 1.5.0): 2.1.2\r\n#- Lightning App Version (e.g., 0.5.2): NA\r\n#- PyTorch Version (e.g., 2.0): 2.1.1\r\n#- Python version (e.g., 3.9): 3.10\r\n#- OS (e.g., Linux): Linux, Ubuntu 22.04, kernel 6.2.0-37-generic #38~22.04.1-Ubuntu SMP PREEMPT_DYNAMIC Thu Nov  2 18:01:13 UTC 2 x86_64 x86_64 x86_64 GNU/Linux\r\n#- CUDA/cuDNN version: 12.2\r\n#- GPU models and configuration: Nvidia GTX 1050 Ti 4 GiB\r\n#- How you installed Lightning(`conda`, `pip`, source): poetry (pip install)\r\n#- Running environment of LightningApp (e.g. local, cloud): local\r\n```\r\n\r\n</details>\r\n\r\n\r\n### More info\r\n\r\n_No response_",
    "comments_url": "https://api.github.com/repos/Lightning-AI/pytorch-lightning/issues/19119/comments",
    "author": "robwijnhoven",
    "comments": [
      {
        "user": "robwijnhoven",
        "created_at": "2023-12-06T11:02:57Z",
        "body": "Downgraded pytorch-lightning to 2.1.1 to be in sync with the pytorch version, but no effect there.\r\n"
      },
      {
        "user": "awaelchli",
        "created_at": "2023-12-06T15:05:55Z",
        "body": "@robwijnhoven You can remove `opt_idx` from your `finetune_function` definition. If this doesn't work, please share your entire `StagedFinetuning` implementation. Thanks"
      }
    ]
  },
  {
    "number": 18975,
    "title": "Training a simple XOR network yields incorrect, undeterministic behaviour",
    "created_at": "2023-11-09T10:17:57Z",
    "closed_at": "2023-11-10T12:10:01Z",
    "labels": [
      "question",
      "ver: 2.1.x"
    ],
    "url": "https://github.com/Lightning-AI/pytorch-lightning/issues/18975",
    "body": "### Bug description\n\nHi, I am trying to train a simple DNN to solve the XOR problem. This can be trivially solved with a pure torch implementation. I cannot replicate the same simple model in lightning. Instead the trained model oscillates between different states, never managing to correctly produce XOR.\n\n### What version are you seeing the problem on?\n\nv2.1\n\n### How to reproduce the bug\n\n```python\n# import libraries\r\nimport torch\r\nimport torch.nn as nn\r\nfrom torch.autograd import Variable\r\n\r\n\r\nclass XOR(nn.Module):\r\n    def __init__(self):\r\n        super(XOR, self).__init__()\r\n        self.linear_sigmoid_stack = nn.Sequential(\r\n            nn.Linear(2, 2),\r\n            nn.Sigmoid(),\r\n            nn.Linear(2, 1)\r\n        )\r\n\r\n    def forward(self, x):\r\n        return self.linear_sigmoid_stack(x)\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    # create data\r\n    Xs = torch.Tensor([[0., 0.],\r\n                       [0., 1.],\r\n                       [1., 0.],\r\n                       [1., 1.]])\r\n\r\n    y = torch.Tensor([0., 1., 1., 0.]).reshape(Xs.shape[0], 1)\r\n\r\n    xor_network = XOR()\r\n\r\n    epochs = 1000\r\n    mseloss = nn.MSELoss()\r\n    optimizer = torch.optim.Adam(xor_network.parameters(), lr=0.03)\r\n    all_losses = []\r\n    current_loss = 0\r\n    plot_every = 50\r\n\r\n    for epoch in range(epochs):\r\n\r\n        # input training example and return the prediction\r\n        yhat = xor_network.forward(Xs)\r\n\r\n        # calculate MSE loss\r\n        loss = mseloss(yhat, y)\r\n\r\n        # backpropogate through the loss gradiants\r\n        loss.backward()\r\n\r\n        # update model weights\r\n        optimizer.step()\r\n\r\n        # remove current gradients for next iteration\r\n        optimizer.zero_grad()\r\n\r\n        # append to loss\r\n        current_loss += loss\r\n        if epoch % plot_every == 0:\r\n            all_losses.append(current_loss / plot_every)\r\n            current_loss = 0\r\n\r\n        # print progress\r\n        if epoch % 500 == 0:\r\n            print(f'Epoch: {epoch} completed')\r\n```\r\n\r\nI tried to use Lightning to simplify away the boilerplate code like so:\r\n```\r\nimport torch\r\nfrom torch import nn\r\nimport torch.nn.functional as F\r\nimport lightning as L\r\nfrom torch.utils.data import TensorDataset, DataLoader\r\n\r\n\r\nclass XORNetwork(L.LightningModule):\r\n    def __init__(self):\r\n        super(XORNetwork, self).__init__()\r\n        self.linear_sigmoid_stack = nn.Sequential(\r\n            nn.Linear(2, 2),\r\n            nn.Sigmoid(),\r\n            nn.Linear(2, 1)\r\n        )\r\n\r\n    def training_step(self, batch, batch_idx):\r\n        # training_step defines the train loop.\r\n        x, y = batch\r\n        yhat = self.forward(x)\r\n        loss = F.mse_loss(yhat, y)\r\n        return loss\r\n\r\n    def forward(self, x):\r\n        return self.linear_sigmoid_stack(x)\r\n\r\n    def configure_optimizers(self):\r\n        optimizer = torch.optim.Adam(self.parameters(), lr=1e-3)\r\n        return optimizer\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    X = torch.Tensor([[0., 0.], [0., 1.], [1., 0], [1., 1]])\r\n    labels = torch.Tensor([0., 1., 1., 0])\r\n    dataset = TensorDataset(X, labels)\r\n    dataloader = DataLoader(dataset, batch_size=1, shuffle=True)\r\n\r\n    xor_network = XORNetwork()\r\n\r\n    # train model\r\n    trainer = L.Trainer(max_epochs=500, accelerator=\"cpu\")\r\n    trainer.fit(model=xor_network, train_dataloaders=dataloader)\r\n\r\n    xor_network.eval()\r\n    with torch.no_grad():\r\n        test_output = xor_network(X)\r\n        print(test_output.round())\r\n```\n```\n\n\n### Error messages and logs\n\n_No response_\n\n### Environment\n\n<details>\r\n  <summary>Current environment</summary>\r\n\r\n* CUDA:\r\n\t- GPU:               None\r\n\t- available:         False\r\n\t- version:           None\r\n* Lightning:\r\n\t- lightning:         2.1.1\r\n\t- lightning-utilities: 0.9.0\r\n\t- pytorch-lightning: 2.1.1\r\n\t- torch:             2.1.0\r\n\t- torchmetrics:      1.2.0\r\n* Packages:\r\n\t- aiohttp:           3.8.6\r\n\t- aiosignal:         1.3.1\r\n\t- async-timeout:     4.0.3\r\n\t- attrs:             23.1.0\r\n\t- certifi:           2023.7.22\r\n\t- charset-normalizer: 3.3.2\r\n\t- filelock:          3.13.1\r\n\t- frozenlist:        1.4.0\r\n\t- fsspec:            2023.10.0\r\n\t- idna:              3.4\r\n\t- jinja2:            3.1.2\r\n\t- lightning:         2.1.1\r\n\t- lightning-utilities: 0.9.0\r\n\t- markupsafe:        2.1.3\r\n\t- mpmath:            1.3.0\r\n\t- multidict:         6.0.4\r\n\t- networkx:          3.2.1\r\n\t- numpy:             1.26.1\r\n\t- packaging:         23.2\r\n\t- pip:               22.3.1\r\n\t- pytorch-lightning: 2.1.1\r\n\t- pyyaml:            6.0.1\r\n\t- requests:          2.31.0\r\n\t- setuptools:        65.5.1\r\n\t- sympy:             1.12\r\n\t- torch:             2.1.0\r\n\t- torchmetrics:      1.2.0\r\n\t- tqdm:              4.66.1\r\n\t- typing-extensions: 4.8.0\r\n\t- urllib3:           2.0.7\r\n\t- wheel:             0.38.4\r\n\t- yarl:              1.9.2\r\n* System:\r\n\t- OS:                Darwin\r\n\t- architecture:\r\n\t\t- 64bit\r\n\t\t- \r\n\t- processor:         arm\r\n\t- python:            3.10.13\r\n\t- release:           23.0.0\r\n\t- version:           Darwin Kernel Version 23.0.0: Fri Sep 15 14:41:34 PDT 2023; root:xnu-10002.1.13~1/RELEASE_ARM64_T8103\r\n\r\n</details>\r\n\n\n### More info\n\n_No response_",
    "comments_url": "https://api.github.com/repos/Lightning-AI/pytorch-lightning/issues/18975/comments",
    "author": "Fohlen",
    "comments": [
      {
        "user": "awaelchli",
        "created_at": "2023-11-09T13:59:33Z",
        "body": "@Fohlen In your Lightning code,\r\n\r\n1. You didn't choose the same learning rate. Make it 0.03 in both cases.\r\n2. You didn't run for the same number of epochs. Make it 1000 in both cases.\r\n\r\nAnd in the raw PyTorch code you are missing the test code:\r\n\r\n```py\r\n    xor_network.eval()\r\n    with torch.no_grad():\r\n        test_output = xor_network(Xs)\r\n        print(test_output.round())\r\n```\r\n\r\nTo make both of them the same, the hyperparameters need to be the same of course. Can you try again? I get the correct predictions (i.e. 0 1 1 0) after these fixes. \r\n\r\nIn addition, to make it fully deterministic you can set the seed \r\n\r\n```py\r\nL.seed_everything(0)\r\n```"
      },
      {
        "user": "Fohlen",
        "created_at": "2023-11-10T12:10:01Z",
        "body": "Hi @awaelchli, this indeed produces the correct result. I can get the code to converge correctly within 100 epochs or less with pure Torch, any idea why that wouldn't be the case with lightning?"
      },
      {
        "user": "awaelchli",
        "created_at": "2023-11-10T12:32:37Z",
        "body": "> I can get the code to converge correctly within 100 epochs or less with pure Torch\r\n\r\nThe code that you posted can't actually converge in 100 epochs. Please share what you changed to make that possible. "
      },
      {
        "user": "Fohlen",
        "created_at": "2023-11-10T17:07:55Z",
        "body": "Sorry for the imprecise wording. After some experimentation with epochs I could produce the correct result at `epoch=250` (not convergence). However, this appears to be extremely sensitive to the seed one uses when training. I find this interesting. According to the Deep Learning book, the correct weights should be learned with a single pass of this network. However, this behaviour is not lightning-specific. Thanks for your help, I will keep on digging in torch to find out the reason for this behaviour \ud83d\udc4d "
      }
    ]
  },
  {
    "number": 18890,
    "title": "ModuleNotFoundError: No module named 'lightning' in lightning container image",
    "created_at": "2023-10-30T07:58:12Z",
    "closed_at": "2023-11-04T14:29:38Z",
    "labels": [
      "question",
      "ver: 2.1.x"
    ],
    "url": "https://github.com/Lightning-AI/pytorch-lightning/issues/18890",
    "body": "### Bug description\n\n`lightning.pytorch` module is installed in lightning container images as pytorch_lightning, thus it is not compatible with the documentation. \r\n\r\nIn order for import to work in a container image, the import should be of the following form:\r\n\r\n```python\r\nfrom lightning.pytorch.loggers import CSVLogger\r\n```\r\n\r\nWhile the documentation states:\r\n\r\n```python\r\nfrom pytorch_lightning.loggers import CSVLogger\r\n```\n\n### What version are you seeing the problem on?\n\nv2.1\n\n### How to reproduce the bug\n\n```python\ndocker run -it --rm pytorchlightning/pytorch_lightning:latest-py3.10-torch2.0-cuda12.0.1\r\npython -c \"from lightning.pytorch.loggers import CSVLogger\"\n```\n\n\n### Error messages and logs\n\n```\r\nTraceback (most recent call last):\r\n  File \"<string>\", line 1, in <module>\r\nModuleNotFoundError: No module named 'lightning'\r\n```\r\n\n\n### Environment\n\n<details>\r\n  <summary>Current environment</summary>\r\n\r\n* CUDA:\r\n        - GPU:               None\r\n        - available:         False\r\n        - version:           11.7\r\n* Lightning:\r\n        - lightning-utilities: 0.9.0\r\n        - pytorch-lightning: 2.1.0rc0\r\n        - torch:             2.0.1\r\n        - torchmetrics:      1.0.3\r\n* Packages:\r\n        - absl-py:           2.0.0\r\n        - aiohttp:           3.8.5\r\n        - aiosignal:         1.3.1\r\n        - antlr4-python3-runtime: 4.9.3\r\n        - anyio:             3.7.1\r\n        - async-timeout:     4.0.3\r\n        - attrs:             23.1.0\r\n        - cachetools:        5.3.1\r\n        - certifi:           2019.11.28\r\n        - chardet:           3.0.4\r\n        - charset-normalizer: 3.3.0\r\n        - click:             8.1.7\r\n        - cloudpickle:       2.2.1\r\n        - cmake:             3.27.6\r\n        - coloredlogs:       15.0.1\r\n        - contourpy:         1.1.1\r\n        - coverage:          7.3.1\r\n        - cycler:            0.12.0\r\n        - dbus-python:       1.2.16\r\n        - deepspeed:         0.9.3\r\n        - docstring-parser:  0.15\r\n        - exceptiongroup:    1.1.3\r\n        - fastapi:           0.103.2\r\n        - filelock:          3.12.4\r\n        - flatbuffers:       23.5.26\r\n        - fonttools:         4.43.0\r\n        - frozenlist:        1.4.0\r\n        - fsspec:            2023.9.2\r\n        - google-auth:       2.23.2\r\n        - google-auth-oauthlib: 1.0.0\r\n        - grpcio:            1.59.0\r\n        - h11:               0.14.0\r\n        - hjson:             3.1.0\r\n        - humanfriendly:     10.0\r\n        - hydra-core:        1.3.2\r\n        - idna:              2.8\r\n        - importlib-resources: 6.1.0\r\n        - iniconfig:         2.0.0\r\n        - jinja2:            3.1.2\r\n        - joblib:            1.3.2\r\n        - jsonargparse:      4.25.0\r\n        - kiwisolver:        1.4.5\r\n        - lightning-utilities: 0.9.0\r\n        - lit:               17.0.2\r\n        - markdown:          3.4.4\r\n        - markdown-it-py:    3.0.0\r\n        - markupsafe:        2.1.3\r\n        - matplotlib:        3.7.3\r\n        - mdurl:             0.1.2\r\n        - mpmath:            1.3.0\r\n        - multidict:         6.0.4\r\n        - networkx:          3.1\r\n        - ninja:             1.11.1\r\n        - numpy:             1.26.0\r\n        - nvidia-cublas-cu11: 11.10.3.66\r\n        - nvidia-cuda-cupti-cu11: 11.7.101\r\n        - nvidia-cuda-nvrtc-cu11: 11.7.99\r\n        - nvidia-cuda-runtime-cu11: 11.7.99\r\n        - nvidia-cudnn-cu11: 8.5.0.96\r\n        - nvidia-cufft-cu11: 10.9.0.58\r\n        - nvidia-curand-cu11: 10.2.10.91\r\n        - nvidia-cusolver-cu11: 11.4.0.1\r\n        - nvidia-cusparse-cu11: 11.7.4.91\r\n        - nvidia-nccl-cu11:  2.14.3\r\n        - nvidia-nvtx-cu11:  11.7.91\r\n        - oauthlib:          3.2.2\r\n        - omegaconf:         2.3.0\r\n        - onnx:              1.14.1\r\n        - onnxruntime:       1.16.0\r\n        - packaging:         23.1\r\n        - pandas:            2.1.1\r\n        - pillow:            10.0.1\r\n        - pip:               23.2.1\r\n        - pluggy:            1.3.0\r\n        - protobuf:          4.24.3\r\n        - psutil:            5.9.5\r\n        - py-cpuinfo:        9.0.0\r\n        - pyasn1:            0.5.0\r\n        - pyasn1-modules:    0.3.0\r\n        - pydantic:          1.10.13\r\n        - pygments:          2.16.1\r\n        - pygobject:         3.36.0\r\n        - pyparsing:         3.1.1\r\n        - pytest:            7.4.0\r\n        - pytest-cov:        4.1.0\r\n        - pytest-random-order: 1.1.0\r\n        - pytest-rerunfailures: 12.0\r\n        - pytest-timeout:    2.1.0\r\n        - python-apt:        2.0.1+ubuntu0.20.4.1\r\n        - python-dateutil:   2.8.2\r\n        - pytorch-lightning: 2.1.0rc0\r\n        - pytz:              2023.3.post1\r\n        - pyyaml:            6.0.1\r\n        - requests:          2.22.0\r\n        - requests-oauthlib: 1.3.1\r\n        - requests-unixsocket: 0.2.0\r\n        - rich:              13.5.3\r\n        - rsa:               4.9\r\n        - scikit-learn:      1.3.1\r\n        - scipy:             1.11.3\r\n        - setuptools:        59.5.0\r\n        - six:               1.14.0\r\n        - sniffio:           1.3.0\r\n        - starlette:         0.27.0\r\n        - sympy:             1.12\r\n        - tensorboard:       2.14.1\r\n        - tensorboard-data-server: 0.7.1\r\n        - tensorboardx:      2.6.2.2\r\n        - threadpoolctl:     3.2.0\r\n        - tomli:             2.0.1\r\n        - torch:             2.0.1\r\n        - torchmetrics:      1.0.3\r\n        - tqdm:              4.66.1\r\n        - triton:            2.0.0\r\n        - typeshed-client:   2.4.0\r\n        - typing-extensions: 4.7.1\r\n        - tzdata:            2023.3\r\n        - urllib3:           1.25.8\r\n        - uvicorn:           0.23.2\r\n        - werkzeug:          3.0.0\r\n        - wget:              3.2\r\n        - wheel:             0.41.2\r\n        - yarl:              1.9.2\r\n* System:\r\n        - OS:                Linux\r\n        - architecture:\r\n                - 64bit\r\n                - \r\n        - processor:         x86_64\r\n        - python:            3.10.13\r\n        - release:           5.3.0-28-generic\r\n        - version:           #30~18.04.1-Ubuntu SMP Fri Jan 17 06:14:09 UTC 2020\r\n\r\n</details>\n\n### More info\n\n_No response_",
    "comments_url": "https://api.github.com/repos/Lightning-AI/pytorch-lightning/issues/18890/comments",
    "author": "GuyPozner",
    "comments": [
      {
        "user": "awaelchli",
        "created_at": "2023-10-30T13:56:30Z",
        "body": "Hey @GuyPozner \r\n\r\nTo use the `import lightning.x.y` import, you need to install the lightning package: `pip install lightning`\r\nIf you want to use the `import pytorch_lightning.x.y` style, you need to install `pip install pytorch-lightning`\r\n\r\nYou can't mix and match them. Our documentation exclusively uses the new package imports with lightning. That's the new and recommended way. "
      },
      {
        "user": "GuyPozner",
        "created_at": "2023-10-30T14:19:38Z",
        "body": "Hi @awaelchli,\r\nThanks for the fast response, I understood that. What I am thinking, is that if this is the recommended way to import, it should work as expected with the containers images that gets released. what do you think? have you reproduced the issue?"
      },
      {
        "user": "awaelchli",
        "created_at": "2023-10-30T14:20:31Z",
        "body": "Sorry, which container images are you talking about?"
      },
      {
        "user": "GuyPozner",
        "created_at": "2023-10-31T07:05:18Z",
        "body": "this container image: pytorchlightning/pytorch_lightning:latest-py3.10-torch2.0-cuda12.0.1\r\n\r\nBut I think that this is true for every container image.\r\n\r\nThanks for the fix :)"
      }
    ]
  },
  {
    "number": 18589,
    "title": "Can't seem to change distributed backend to gloo on Windows",
    "created_at": "2023-09-19T14:08:12Z",
    "closed_at": "2023-09-19T18:28:28Z",
    "labels": [
      "question",
      "strategy: ddp",
      "ver: 2.1.x"
    ],
    "url": "https://github.com/Lightning-AI/pytorch-lightning/issues/18589",
    "body": "### Bug description\r\n\r\nI am trying to run a training module with CUDA using PyTorch Lightning, but Lightning keeps trying to use NCCL. I have tried every solution I have found online, from specifying it in the code to prepending `PL_TORCH_DISTRIBUTED_BACKEND=gloo` to the laucnh command in the terminal, but Lightning still seems to try to use NCCL. I have verified that gloo is available for use in my system. Any help would be greatly appreciated.\r\n\r\n### What version are you seeing the problem on?\r\n\r\nmaster\r\n\r\n### How to reproduce the bug\r\n\r\n```python\r\nos.environ[\"PL_TORCH_DISTRIBUTED_BACKEND\"] = \"gloo\"\r\nmy_data = MyDataModule(args...)\r\nmy_model = MyModel(args...)\r\ntrainer = Trainer()\r\ntrainer.fit(my_model, my_data.train_dataloader, my_data.val_dataloader)\r\n\r\n# also pops up when running PL_TORCH_DISTRIBUTED_BACKEND=gloo python train.py\r\n```\r\n\r\n\r\n### Error messages and logs\r\n\r\n```\r\n$ PL_TORCH_DISTRIBUTED_BACKEND=gloo python train.py\r\nC:\\Users\\user\\AppData\\Local\\anaconda3\\envs\\env\\Lib\\site-packages\\torchaudio\\backend\\utils.py:74: UserWarning: No audio backend is available.\r\n  warnings.warn(\"No audio backend is available.\")\r\nGPU available: True (cuda), used: True\r\nTPU available: False, using: 0 TPU cores\r\nIPU available: False, using: 0 IPUs\r\nHPU available: False, using: 0 HPUs\r\nC:\\Users\\user\\AppData\\Local\\anaconda3\\envs\\env\\Lib\\site-packages\\pytorch_lightning\\trainer\\connectors\\logger_connector\\logger_connector.py:67: UserWarnin\r\ng: Starting from v1.9.0, `tensorboardX` has been removed as a dependency of the `pytorch_lightning` package, due to potential conflicts with other packages in the\r\nML ecosystem. For this reason, `logger=True` will use `CSVLogger` as the default logger, unless the `tensorboard` or `tensorboardX` packages are found. Please `pip\r\n install lightning[extra]` or one of them to enable TensorBoard support by default\r\n  warning_cache.warn(\r\nC:\\Users\\user\\AppData\\Local\\anaconda3\\envs\\env\\Lib\\site-packages\\pytorch_lightning\\loops\\utilities.py:72: PossibleUserWarning: `max_epochs` was not set.\r\nSetting it to 1000 epochs. To train without an epoch limit, set `max_epochs=-1`.\r\n  rank_zero_warn(\r\nC:\\Users\\user\\AppData\\Local\\anaconda3\\envs\\env\\Lib\\site-packages\\pytorch_lightning\\trainer\\configuration_validator.py:69: UserWarning: You passed in a `v\r\nal_dataloader` but have no `validation_step`. Skipping val loop.\r\n  rank_zero_warn(\"You passed in a `val_dataloader` but have no `validation_step`. Skipping val loop.\")\r\nInitializing distributed: GLOBAL_RANK: 0, MEMBER: 1/2\r\n[W C:\\cb\\pytorch_1000000000000\\work\\torch\\csrc\\distributed\\c10d\\socket.cpp:601] [c10d] The client socket has failed to connect to [system.intranet.company.ne\r\nt]:52432 (system error: 10049 - The requested address is not valid in its context.).\r\nC:\\Users\\user\\AppData\\Local\\anaconda3\\envs\\env\\Lib\\site-packages\\torchaudio\\backend\\utils.py:74: UserWarning: No audio backend is available.\r\n  warnings.warn(\"No audio backend is available.\")\r\nInitializing distributed: GLOBAL_RANK: 1, MEMBER: 2/2\r\n[W C:\\cb\\pytorch_1000000000000\\work\\torch\\csrc\\distributed\\c10d\\socket.cpp:601] [c10d] The client socket has failed to connect to [system.intranet.company.ne\r\nt]:52432 (system error: 10049 - The requested address is not valid in its context.).\r\n[W C:\\cb\\pytorch_1000000000000\\work\\torch\\csrc\\distributed\\c10d\\socket.cpp:601] [c10d] The client socket has failed to connect to [system.intranet.company.ne\r\nt]:52432 (system error: 10049 - The requested address is not valid in its context.).\r\n[W C:\\cb\\pytorch_1000000000000\\work\\torch\\csrc\\distributed\\c10d\\socket.cpp:601] [c10d] The client socket has failed to connect to [system.intranet.company.ne\r\nt]:52432 (system error: 10049 - The requested address is not valid in its context.).\r\n\r\n-------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\ntrain.py 62 <module>\r\ntrainer.fit(my_model, my_data.train_dataloader, my_data.val_dataloader)\r\n\r\ntrainer.py 532 fit\r\n\r\n-------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\ntrain.py 62 <module>\r\ntrainer.fit(my_model, my_data.train_dataloader, my_data.val_dataloader)\r\n\r\ntrainer.py 532 fit\r\ncall._call_and_handle_interrupt(\r\n\r\ncall.py 42 _call_and_handle_interrupt\r\ncall._call_and_handle_interrupt(\r\n\r\ncall.py 42 _call_and_handle_interrupt\r\nreturn trainer.strategy.launcher.launch(trainer_fn, *args, trainer=trainer, **kwargs)\r\n\r\nsubprocess_script.py 93 launch\r\nreturn trainer.strategy.launcher.launch(trainer_fn, *args, trainer=trainer, **kwargs)\r\n\r\nreturn function(*args, **kwargs)\r\nsubprocess_script.py 93 launch\r\n\r\ntrainer.py 571 _fit_impl\r\nself._run(model, ckpt_path=ckpt_path)\r\n\r\ntrainer.py 938 _run\r\nself.strategy.setup_environment()\r\n\r\nddp.py 143 setup_environment\r\nreturn function(*args, **kwargs)\r\n\r\ntrainer.py 571 _fit_impl\r\nself._run(model, ckpt_path=ckpt_path)\r\n\r\ntrainer.py 938 _run\r\nself.strategy.setup_environment()\r\nself.setup_distributed()\r\n\r\n\r\nddp.py 143 setup_environment\r\nddp.py 191 setup_distributed\r\n_init_dist_connection(self.cluster_environment, self._process_group_backend, timeout=self._timeout)\r\n\r\ndistributed.py 258 _init_dist_connection\r\nself.setup_distributed()\r\n\r\ntorch.distributed.init_process_group(torch_distributed_backend, rank=global_rank, world_size=world_size, **kwargs)\r\nddp.py 191 setup_distributed\r\n\r\ndistributed_c10d.py 907 init_process_group\r\n_init_dist_connection(self.cluster_environment, self._process_group_backend, timeout=self._timeout)\r\n\r\ndistributed.py 258 _init_dist_connection\r\ntorch.distributed.init_process_group(torch_distributed_backend, rank=global_rank, world_size=world_size, **kwargs)\r\n\r\ndistributed_c10d.py 907 init_process_group\r\ndefault_pg = _new_process_group_helper(\r\n\r\ndistributed_c10d.py 1013 _new_process_group_helper\r\nraise RuntimeError(\"Distributed package doesn't have NCCL \" \"built in\")\r\n\r\nRuntimeError:\r\nDistributed package doesn't have NCCL built in\r\ndefault_pg = _new_process_group_helper(\r\n\r\ndistributed_c10d.py 1013 _new_process_group_helper\r\nraise RuntimeError(\"Distributed package doesn't have NCCL \" \"built in\")\r\n\r\nRuntimeError:\r\nDistributed package doesn't have NCCL built in\r\n```\r\n\r\n\r\n### Environment\r\n\r\n<details>\r\n  <summary>Current environment</summary>\r\n\r\n* CUDA:\r\n        - GPU:\r\n                - NVIDIA TITAN X (Pascal)\r\n                - NVIDIA GeForce GTX 970\r\n        - available:         True\r\n        - version:           11.8\r\n* Lightning:\r\n        - lightning:         2.0.8\r\n        - lightning-cloud:   0.5.37\r\n        - lightning-utilities: 0.9.0\r\n        - pytorch-lightning: 2.0.8\r\n        - pytorchvideo:      0.1.5\r\n        - torch:             2.0.1\r\n        - torchaudio:        2.0.2\r\n        - torchmetrics:      1.1.1\r\n        - torchvision:       0.15.2\r\n* Packages:\r\n        - aiofiles:          22.1.0\r\n        - aiohttp:           3.8.5\r\n        - aiosignal:         1.3.1\r\n        - aiosqlite:         0.18.0\r\n        - annotated-types:   0.5.0\r\n        - ansicon:           1.89.0\r\n        - anyio:             3.5.0\r\n        - argon2-cffi:       21.3.0\r\n        - argon2-cffi-bindings: 21.2.0\r\n        - arrow:             1.2.3\r\n        - asttokens:         2.0.5\r\n        - async-timeout:     4.0.3\r\n        - attrs:             22.1.0\r\n        - av:                10.0.0\r\n        - babel:             2.11.0\r\n        - backcall:          0.2.0\r\n        - backoff:           2.2.1\r\n        - beautifulsoup4:    4.12.2\r\n        - bleach:            4.1.0\r\n        - blessed:           1.20.0\r\n        - boto3:             1.28.42\r\n        - botocore:          1.31.42\r\n        - bottleneck:        1.3.5\r\n        - brotlipy:          0.7.0\r\n        - certifi:           2023.7.22\r\n        - cffi:              1.15.1\r\n        - charset-normalizer: 2.0.4\r\n        - click:             8.1.7\r\n        - colorama:          0.4.6\r\n        - comm:              0.1.2\r\n        - contourpy:         1.0.5\r\n        - croniter:          1.4.1\r\n        - cryptography:      41.0.2\r\n        - cycler:            0.11.0\r\n        - dateutils:         0.6.12\r\n        - debugpy:           1.6.7\r\n        - decorator:         5.1.1\r\n        - deepdiff:          6.4.1\r\n        - deeplake:          3.6.23\r\n        - defusedxml:        0.7.1\r\n        - dill:              0.3.7\r\n        - einops:            0.6.1\r\n        - entrypoints:       0.4\r\n        - executing:         0.8.3\r\n        - fastapi:           0.103.1\r\n        - fastjsonschema:    2.16.2\r\n        - filelock:          3.12.3\r\n        - fonttools:         4.25.0\r\n        - frozenlist:        1.4.0\r\n        - fsspec:            2023.9.0\r\n        - fvcore:            0.1.5.post20221221\r\n        - h11:               0.14.0\r\n        - huggingface-hub:   0.17.1\r\n        - humbug:            0.3.2\r\n        - idna:              3.4\r\n        - inquirer:          3.1.3\r\n        - iopath:            0.1.10\r\n        - ipykernel:         6.25.0\r\n        - ipython:           8.12.2\r\n        - ipython-genutils:  0.2.0\r\n        - ipywidgets:        8.0.4\r\n        - itsdangerous:      2.1.2\r\n        - jedi:              0.18.1\r\n        - jinja2:            3.1.2\r\n        - jinxed:            1.2.0\r\n        - jmespath:          1.0.1\r\n        - joblib:            1.2.0\r\n        - json5:             0.9.6\r\n        - jsonschema:        4.17.3\r\n        - jupyter:           1.0.0\r\n        - jupyter-client:    7.4.9\r\n        - jupyter-console:   6.6.3\r\n        - jupyter-core:      5.3.0\r\n        - jupyter-events:    0.6.3\r\n        - jupyter-server:    1.23.4\r\n        - jupyter-server-fileid: 0.9.0\r\n        - jupyter-server-ydoc: 0.8.0\r\n        - jupyter-ydoc:      0.2.4\r\n        - jupyterlab:        3.6.3\r\n        - jupyterlab-pygments: 0.1.2\r\n        - jupyterlab-server: 2.22.0\r\n        - jupyterlab-widgets: 3.0.5\r\n        - kiwisolver:        1.4.4\r\n        - lightning:         2.0.8\r\n        - lightning-cloud:   0.5.37\r\n        - lightning-utilities: 0.9.0\r\n        - llvmlite:          0.40.0\r\n        - lxml:              4.9.2\r\n        - markdown-it-py:    3.0.0\r\n        - markupsafe:        2.1.1\r\n        - matplotlib:        3.7.2\r\n        - matplotlib-inline: 0.1.6\r\n        - mdurl:             0.1.2\r\n        - mistune:           0.8.4\r\n        - mkl-fft:           1.3.6\r\n        - mkl-random:        1.2.2\r\n        - mkl-service:       2.4.0\r\n        - mpmath:            1.3.0\r\n        - multidict:         6.0.4\r\n        - multiprocess:      0.70.15\r\n        - munkres:           1.1.4\r\n        - nbclassic:         0.5.5\r\n        - nbclient:          0.5.13\r\n        - nbconvert:         6.5.4\r\n        - nbformat:          5.7.0\r\n        - nest-asyncio:      1.5.6\r\n        - networkx:          3.1\r\n        - notebook:          6.5.4\r\n        - notebook-shim:     0.2.2\r\n        - numba:             0.57.0\r\n        - numcodecs:         0.11.0\r\n        - numexpr:           2.8.4\r\n        - numpy:             1.24.3\r\n        - ordered-set:       4.1.0\r\n        - packaging:         23.1\r\n        - pandas:            2.0.3\r\n        - pandocfilters:     1.5.0\r\n        - parameterized:     0.9.0\r\n        - parso:             0.8.3\r\n        - pathos:            0.3.1\r\n        - pickleshare:       0.7.5\r\n        - pillow:            9.4.0\r\n        - pip:               23.2.1\r\n        - platformdirs:      3.10.0\r\n        - ply:               3.11\r\n        - portalocker:       2.7.0\r\n        - pox:               0.3.3\r\n        - ppft:              1.7.6.7\r\n        - pretty-errors:     1.2.25\r\n        - prometheus-client: 0.14.1\r\n        - prompt-toolkit:    3.0.36\r\n        - psutil:            5.9.0\r\n        - pure-eval:         0.2.2\r\n        - pycparser:         2.21\r\n        - pydantic:          2.1.1\r\n        - pydantic-core:     2.4.0\r\n        - pygments:          2.15.1\r\n        - pyjwt:             2.8.0\r\n        - pyopenssl:         23.2.0\r\n        - pyparsing:         3.0.9\r\n        - pyqt5:             5.15.7\r\n        - pyqt5-sip:         12.11.0\r\n        - pyrsistent:        0.18.0\r\n        - pysocks:           1.7.1\r\n        - python-dateutil:   2.8.2\r\n        - python-editor:     1.0.4\r\n        - python-json-logger: 2.0.7\r\n        - python-multipart:  0.0.6\r\n        - pytorch-lightning: 2.0.8\r\n        - pytorchvideo:      0.1.5\r\n        - pytz:              2022.7\r\n        - pywin32:           305.1\r\n        - pywinpty:          2.0.10\r\n        - pyyaml:            6.0\r\n        - pyzmq:             23.2.0\r\n        - qtconsole:         5.4.2\r\n        - qtpy:              2.2.0\r\n        - readchar:          4.0.5\r\n        - regex:             2023.8.8\r\n        - requests:          2.31.0\r\n        - rfc3339-validator: 0.1.4\r\n        - rfc3986-validator: 0.1.1\r\n        - rich:              13.5.2\r\n        - s3transfer:        0.6.2\r\n        - safetensors:       0.3.3\r\n        - scikit-learn:      1.2.2\r\n        - scipy:             1.11.1\r\n        - send2trash:        1.8.0\r\n        - setuptools:        68.0.0\r\n        - sip:               6.6.2\r\n        - six:               1.16.0\r\n        - sniffio:           1.2.0\r\n        - soupsieve:         2.4\r\n        - stack-data:        0.2.0\r\n        - starlette:         0.27.0\r\n        - starsessions:      1.3.0\r\n        - sympy:             1.11.1\r\n        - tabulate:          0.9.0\r\n        - termcolor:         2.3.0\r\n        - terminado:         0.17.1\r\n        - threadpoolctl:     2.2.0\r\n        - tinycss2:          1.2.1\r\n        - tokenizers:        0.13.3\r\n        - toml:              0.10.2\r\n        - torch:             2.0.1\r\n        - torchaudio:        2.0.2\r\n        - torchmetrics:      1.1.1\r\n        - torchvision:       0.15.2\r\n        - tornado:           6.3.2\r\n        - tqdm:              4.65.0\r\n        - traitlets:         5.7.1\r\n        - transformers:      4.33.1\r\n        - typing-extensions: 4.7.1\r\n        - tzdata:            2023.3\r\n        - urllib3:           1.26.16\r\n        - uvicorn:           0.23.2\r\n        - wcwidth:           0.2.5\r\n        - webencodings:      0.5.1\r\n        - websocket-client:  0.58.0\r\n        - websockets:        11.0.3\r\n        - wheel:             0.38.4\r\n        - widgetsnbextension: 4.0.5\r\n        - win-inet-pton:     1.1.0\r\n        - y-py:              0.5.9\r\n        - yacs:              0.1.8\r\n        - yarl:              1.9.2\r\n        - ypy-websocket:     0.8.2\r\n* System:\r\n        - OS:                Windows\r\n        - architecture:\r\n                - 64bit\r\n                - WindowsPE\r\n        - processor:         Intel64 Family 6 Model 85 Stepping 4, GenuineIntel\r\n        - python:            3.11.4\r\n        - release:           10\r\n        - version:           10.0.19041\r\n\r\n</details>\n\ncc @justusschock @awaelchli",
    "comments_url": "https://api.github.com/repos/Lightning-AI/pytorch-lightning/issues/18589/comments",
    "author": "amansingh427",
    "comments": [
      {
        "user": "awaelchli",
        "created_at": "2023-09-19T17:27:00Z",
        "body": "Hey @amansingh427 \r\nIn the latest Lightning versions, the backend can no longer be set through the environment variable `PL_TORCH_DISTRIBUTED_BACKEND`. You can set it like so:\r\n\r\n```py\r\nfrom lightning.pytorch.strategies import DDPStrategy\r\n\r\ntrainer = Trainer(strategy=DDPStrategy(process_group_backend=\"gloo\"), ...)\r\n```"
      }
    ]
  },
  {
    "number": 18378,
    "title": "Fabric cannot launch with specified gpu indices",
    "created_at": "2023-08-24T00:21:36Z",
    "closed_at": "2023-08-24T12:48:57Z",
    "labels": [
      "question",
      "3rd party",
      "fabric",
      "ver: 2.0.x"
    ],
    "url": "https://github.com/Lightning-AI/pytorch-lightning/issues/18378",
    "body": "### Bug description\n\nHi,\r\n\r\nI launch fabric with specified gpu indices, and get RuntineError messges as follows.\r\nHow can I solve this issue? Thanks.\r\n\r\nSoftware version:\r\n```\r\ndeepspeed 0.10.0\r\nlightning 2.0.7\r\npytorch 2.0.1\r\npython 3.10.9\r\n```\r\n\r\nThe code looks like:\r\n```python\r\nimport lightning as L\r\nfabric = L.Fabric(accelerator=\"cuda\", devices=\"0,1,4,5\", strategy='deepspeed')\r\nfabric.launch()\r\n```\r\n\r\nThe error messges and logs is:\r\n```\r\n[2023-08-24 07:56:20,780] [INFO] [real_accelerator.py:133:get_accelerator] Setting ds_accelerator to cuda (auto detect)\r\nTraceback (most recent call last):\r\n  File \"/home/xxx/test_fab.py\", line 45, in <module>\r\n    fabric.launch()\r\n  File \"/home/xxx/miniconda310/envs/ml/lib/python3.10/site-packages/lightning/fabric/fabric.py\", line 687, in launch\r\n    return self._strategy.launcher.launch(function, *args, **kwargs)\r\n  File \"/home/xxx/miniconda310/envs/ml/lib/python3.10/site-packages/lightning/fabric/strategies/launchers/subprocess_script.py\", line 92, in launch\r\n    return function(*args, **kwargs)\r\n  File \"/home/xxx/miniconda310/envs/ml/lib/python3.10/site-packages/lightning/fabric/fabric.py\", line 776, in _run_with_setup\r\n    self._strategy.setup_environment()\r\n  File \"/home/xxx/miniconda310/envs/ml/lib/python3.10/site-packages/lightning/fabric/strategies/ddp.py\", line 113, in setup_environment\r\n    self._setup_distributed()\r\n  File \"/home/xxx/miniconda310/envs/ml/lib/python3.10/site-packages/lightning/fabric/strategies/deepspeed.py\", line 579, in _setup_distributed\r\n    _validate_device_index_selection(self.parallel_devices)\r\n  File \"/home/xxx/miniconda310/envs/ml/lib/python3.10/site-packages/lightning/fabric/strategies/deepspeed.py\", line 821, in _validate_device_index_selection\r\n    raise RuntimeError(\r\nRuntimeError: The selected device indices [0, 1, 4, 5] don't match the local rank values of processes. If you need to select GPUs at a specific index, set the `CUDA_VISIBLE_DEVICES` environment variable instead. For example: `CUDA_VISIBLE_DEVICES=0,1,4,5`.\r\n```\r\n\n\n### What version are you seeing the problem on?\n\nv2.0\n\n### How to reproduce the bug\n\n_No response_\n\n### Error messages and logs\n\n_No response_\n\n### Environment\n\n<details>\r\n  <summary>Current environment</summary>\r\n\r\n```\r\n#- Lightning Component (e.g. Trainer, LightningModule, LightningApp, LightningWork, LightningFlow):\r\n#- PyTorch Lightning Version (e.g., 1.5.0):\r\n#- Lightning App Version (e.g., 0.5.2):\r\n#- PyTorch Version (e.g., 2.0):\r\n#- Python version (e.g., 3.9): \r\n#- OS (e.g., Linux):\r\n#- CUDA/cuDNN version:\r\n#- GPU models and configuration:\r\n#- How you installed Lightning(`conda`, `pip`, source):\r\n#- Running environment of LightningApp (e.g. local, cloud):\r\n```\r\n\r\n</details>\r\n\n\n### More info\n\n_No response_\n\ncc @carmocca @justusschock @awaelchli",
    "comments_url": "https://api.github.com/repos/Lightning-AI/pytorch-lightning/issues/18378/comments",
    "author": "seraphzl",
    "comments": [
      {
        "user": "awaelchli",
        "created_at": "2023-08-24T01:28:38Z",
        "body": "@seraphzl This is expected, and is not supported by DeepSpeed. The error comes directly from Fabric and is informing you about the limitation. In addition, it suggests how you can select the devices via the environment variable. If you read the error message carefully:\r\n\r\n```\r\nRuntimeError: The selected device indices [0, 1, 4, 5] don't match the local rank values of processes. If you need to select GPUs at a specific index, set the `CUDA_VISIBLE_DEVICES` environment variable instead. For example: `CUDA_VISIBLE_DEVICES=0,1,4,5`.\r\n```\r\n\r\nSo basically you remove the setting for `devices=[0, 1, 4, 5]` and launch with `CUDA_VISIBLE_DEVICES=0,1,4,5 python train.py`. Please let me know if that works.\r\n"
      },
      {
        "user": "seraphzl",
        "created_at": "2023-08-24T13:55:21Z",
        "body": "> @seraphzl This is expected, and is not supported by DeepSpeed. The error comes directly from Fabric and is informing you about the limitation. In addition, it suggests how you can select the devices via the environment variable. If you read the error message carefully:\r\n> \r\n> ```\r\n> RuntimeError: The selected device indices [0, 1, 4, 5] don't match the local rank values of processes. If you need to select GPUs at a specific index, set the `CUDA_VISIBLE_DEVICES` environment variable instead. For example: `CUDA_VISIBLE_DEVICES=0,1,4,5`.\r\n> ```\r\n> \r\n> So basically you remove the setting for `devices=[0, 1, 4, 5]` and launch with `CUDA_VISIBLE_DEVICES=0,1,4,5 python train.py`. Please let me know if that works.\r\n\r\n@awaelchli Using the CUDA_VISIBLE_DEVICES environment setting to launch the training works. Thank you for reply."
      }
    ]
  },
  {
    "number": 18170,
    "title": "Basic ProgressBar does not work",
    "created_at": "2023-07-26T21:40:27Z",
    "closed_at": "2023-07-27T11:20:36Z",
    "labels": [
      "question",
      "progress bar: tqdm",
      "ver: 2.0.x"
    ],
    "url": "https://github.com/Lightning-AI/pytorch-lightning/issues/18170",
    "body": "### Bug description\r\n\r\nVersion of `pytorch_lightning==2.0.6`, `tqdm==4.65.0`\r\nI want to display the training progress of my models and the basic ProgressBar from pytorch_lightning.callbacks does not work (nothing shows up).\r\nHowever, when I switched to RichProgressBar, the rich progress bar shows up.\r\n\r\n### What version are you seeing the problem on?\r\n\r\nv2.0\r\n\r\n### How to reproduce the bug\r\n\r\n`python\r\npytorch_lightning.callbacks import ProgressBar` does not show up anything.\r\n\r\n`from pytorch_lightning.callbacks import RichProgressBar` can show the training progress.\r\n\r\n\r\n### Error messages and logs\r\n\r\n\r\nNothing shows up for ```ProgressBar```.\r\n\r\n### Environment\r\n`pytorch_lightning==2.0.6`\r\n`tqdm==4.65.0`\r\n\r\n### More info\r\nRunning things in a Linux environment, with an A40 GPU.\n\ncc @awaelchli",
    "comments_url": "https://api.github.com/repos/Lightning-AI/pytorch-lightning/issues/18170/comments",
    "author": "dnaihao",
    "comments": [
      {
        "user": "awaelchli",
        "created_at": "2023-07-26T22:22:25Z",
        "body": "Hi @dnaihao \r\n\r\nYou don't need to import the progress bar if you want to use tqdm. It gets enabled by default if you just run the Trainer :)\r\nThe reason why you don't see anything is because you accidentally imported the base class, but you probably wanted to import `pytorch_lightning.callbacks import TQDMProgressBar`. (But again, it is the default, so it's not necessary technically). \r\n\r\nLet me know if that resolves your problem :)"
      },
      {
        "user": "awaelchli",
        "created_at": "2023-07-27T11:20:36Z",
        "body": "Yes, you are right, in previous versions prior to 2.0, ProgressBar was the tqdm-version. Later, the name of the base class was changed from ProgressBarBase to just ProgressBar #17058. Apologies if this caused confusion!"
      }
    ]
  },
  {
    "number": 18135,
    "title": "_PrefetchDataFetcher ignores prefetch_factor",
    "created_at": "2023-07-21T21:34:48Z",
    "closed_at": "2023-07-24T15:11:19Z",
    "labels": [
      "question",
      "data handling",
      "ver: 2.0.x"
    ],
    "url": "https://github.com/Lightning-AI/pytorch-lightning/issues/18135",
    "body": "### Bug description\r\n\r\nNo matter what prefetch_factor is set for the `DataLoader` in a `LightningDataModule` wrapper, when the `_PrefetchDataFetcher` is initialized, the value is always reset to 1.\r\n\r\n\r\n\r\n### What version are you seeing the problem on?\r\n\r\nv2.0\r\n\n\ncc @justusschock @awaelchli",
    "comments_url": "https://api.github.com/repos/Lightning-AI/pytorch-lightning/issues/18135/comments",
    "author": "botcs",
    "comments": [
      {
        "user": "awaelchli",
        "created_at": "2023-07-23T18:56:39Z",
        "body": "@botcs The prefetching done in the trainer is independent of the prefetching in the DataLoader. The trainer prefetches 1 batch just to know in advance whether the data loader is exhausted or not, that's all. But of course, you can set any value for `DataLoader(prefetch_factor=N)` and this will be handled by PyTorch. Let me know if you have any questions."
      }
    ]
  },
  {
    "number": 16970,
    "title": "Start training using CLI on Slurm cluster",
    "created_at": "2023-03-06T16:12:59Z",
    "closed_at": "2023-04-14T08:48:10Z",
    "labels": [
      "bug",
      "question",
      "won't fix",
      "waiting on author",
      "lightningcli"
    ],
    "url": "https://github.com/Lightning-AI/pytorch-lightning/issues/16970",
    "body": "### Bug description\r\n\r\nHi,\r\nIm trying to run a simple pytorch lightning model training on mnist data using the pytorch CLI (with yaml config) as a slurm job.\r\n\r\n### How to reproduce the bug\r\nIm starting the slurm job using: `sbatch train_submit.sh`\r\ntrain_submit.sh:\r\n``` bash\r\n#!/bin/bash -l\r\n\r\n# SLURM SUBMIT SCRIPT\r\n#SBATCH --nodes=1             # This needs to match Trainer(num_nodes=...)\r\n#SBATCH --ntasks-per-node=1   # This needs to match Trainer(devices=...)\r\n#SBATCH --cpus-per-task=5\r\n#SBATCH --mem-per-cpu=5240\r\n#SBATCH --gpus=1\r\n#SBATCH --time=01:00:00\r\n#SBATCH --mail-type=BEGIN,END\r\n\r\n# activate conda env\r\n# source activate $1\r\n\r\n# debugging flags (optional)\r\n# export NCCL_DEBUG=INFO\r\n# export PYTHONFAULTHANDLER=1\r\n\r\n# on your cluster you might need these:\r\n# set the network interface\r\n# export NCCL_SOCKET_IFNAME=^docker0,lo\r\n\r\n# might need the latest CUDA\r\n# module load NCCL/2.4.7-1-cuda.10.0\r\n\r\n# run script from above\r\nsrun python3 cli_test.py fit --config config.yaml\r\n```\r\nconfig.yaml file:\r\n```\r\nseed_everything_default: null\r\ntrainer:\r\n  accelerator: gpu\r\n  limit_train_batches: 100\r\n  max_epochs: 500\r\n  devices: 1\r\n  logger: true\r\n  callbacks:\r\n    - class_path: pytorch_lightning.callbacks.ModelCheckpoint\r\n      init_args:\r\n        save_top_k: 1\r\n        monitor: 'val_loss'\r\n        mode: min\r\n        filename: 'vit-best'\r\n    - class_path: pytorch_lightning.callbacks.ModelCheckpoint\r\n      init_args:\r\n        save_last: true\r\n        filename: 'vit-last'\r\nckpt_path: null\r\nlog_dir: /cluster/dir/to/log\r\n```\r\n\r\ncli_test.py:\r\n```\r\n# main.py\r\nfrom pytorch_lightning.cli import LightningCLI\r\n\r\nimport os\r\nfrom torch import optim, nn, utils, Tensor\r\nfrom torchvision.datasets import MNIST\r\nfrom torchvision.transforms import ToTensor\r\nimport pytorch_lightning as pl\r\n\r\n# define any number of nn.Modules (or use your current ones)\r\nencoder = nn.Sequential(nn.Linear(28 * 28, 64), nn.ReLU(), nn.Linear(64, 3))\r\ndecoder = nn.Sequential(nn.Linear(3, 64), nn.ReLU(), nn.Linear(64, 28 * 28))\r\n\r\n\r\n# define the LightningModule\r\nclass LitAutoEncoder(pl.LightningModule):\r\n    def __init__(self, encoder, decoder):\r\n        super().__init__()\r\n        self.encoder = encoder\r\n        self.decoder = decoder\r\n\r\n    def training_step(self, batch, batch_idx):\r\n        # training_step defines the train loop.\r\n        # it is independent of forward\r\n        x, y = batch\r\n        x = x.view(x.size(0), -1)\r\n        z = self.encoder(x)\r\n        x_hat = self.decoder(z)\r\n        loss = nn.functional.mse_loss(x_hat, x)\r\n        # Logging to TensorBoard (if installed) by default\r\n        self.log(\"train_loss\", loss)\r\n        return loss\r\n\r\n    def configure_optimizers(self):\r\n        optimizer = optim.Adam(self.parameters(), lr=1e-3)\r\n        return optimizer\r\n\r\n\r\nclass MNISTDataModule(pl.LightningDataModule):\r\n    def __init__(self, data_dir: str = os.getcwd(), batch_size: int = 32):\r\n        super().__init__()\r\n        self.data_dir = data_dir\r\n        self.batch_size = batch_size\r\n\r\n    def setup(self, stage: str):\r\n        self.mnist_test = MNIST(self.data_dir, train=False)\r\n        self.mnist_predict = MNIST(self.data_dir, train=False)\r\n        mnist_full = MNIST(self.data_dir, train=True)\r\n        self.mnist_train, self.mnist_val = random_split(mnist_full, [55000, 5000])\r\n\r\n    def train_dataloader(self):\r\n        return DataLoader(self.mnist_train, batch_size=self.batch_size)\r\n\r\n    def val_dataloader(self):\r\n        return DataLoader(self.mnist_val, batch_size=self.batch_size)\r\n\r\n    def test_dataloader(self):\r\n        return DataLoader(self.mnist_test, batch_size=self.batch_size)\r\n\r\n\r\ndef cli_main():\r\n    cli = LightningCLI(LitAutoEncoder, MNISTDataModule)\r\n    # note: don't call fit!!\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    cli_main()\r\n```\r\n\r\n\r\n### Error messages and logs\r\n\r\nslurm-9842342.out (File where std:output is printed)\r\n```\r\n2023-03-06 17:02:07.694344: I tensorflow/core/util/util.cc:169] oneDNN custom operations are on. You may see slightly different numerical results due to floating-point round-off errors from different computation orders. To turn them off, set the environment variable `TF_ENABLE_ONEDNN_OPTS=0`.\r\nusage: cli_test.py [-h] [-c CONFIG] [--print_config ^H[=flags]]\r\n                   {fit,validate,test,predict,tune} ...\r\ncli_test.py: error: 'Configuration check failed :: No action for destination key \"seed_everything_default\" to check its value.'\r\nsrun: error: eu-g2-16: task 0: Exited with exit code 2\r\n```\r\n\r\n\r\n### Environment\r\n\r\n<details>\r\n  <summary>Current environment</summary>\r\n\r\n```\r\n* CUDA:\r\n        - GPU:\r\n                - NVIDIA GeForce GTX 1080 Ti\r\n        - available:         True\r\n        - version:           11.3\r\n* Lightning:\r\n        - lightning-utilities: 0.7.1\r\n        - pytorch-ignite:    0.4.10\r\n        - pytorch-lightning: 1.9.4\r\n        - pytorch3dunet:     1.3.3\r\n        - torch:             1.11.0+cu113\r\n        - torch-cluster:     1.6.0\r\n        - torch-fidelity:    0.3.0\r\n        - torch-geometric:   2.0.4\r\n        - torch-scatter:     2.0.9\r\n        - torch-sparse:      0.6.13\r\n        - torch-spline-conv: 1.2.1\r\n        - torchaudio:        0.11.0+cu113\r\n        - torchmetrics:      0.11.3\r\n        - torchvision:       0.12.0+cu113\r\n* Packages:\r\n        - absl-py:           1.0.0\r\n        - accesscontrol:     5.3.1\r\n        - acquisition:       4.10\r\n        - affine:            2.3.1\r\n        - aiohttp:           3.8.1\r\n        - aiohttp-cors:      0.7.0\r\n        - aioredis:          2.0.1\r\n        - aiosignal:         1.2.0\r\n        - alabaster:         0.7.12\r\n        - alembic:           1.8.1\r\n        - amply:             0.1.5\r\n        - aniso8601:         9.0.1\r\n        - anndata:           0.8.0\r\n        - antlr4-python3-runtime: 4.9.3\r\n        - anyio:             3.6.1\r\n        - app-model:         0.1.1\r\n        - appdirs:           1.4.4\r\n        - apptools:          5.1.0\r\n        - argcomplete:       2.0.0\r\n        - argh:              0.26.2\r\n        - argon2:            0.1.10\r\n        - argon2-cffi:       21.3.0\r\n        - argon2-cffi-bindings: 21.2.0\r\n        - arviz:             0.12.1\r\n        - ase:               3.22.1\r\n        - asn1crypto:        1.5.1\r\n        - astor:             0.8.1\r\n        - asttokens:         2.0.5\r\n        - astunparse:        1.6.3\r\n        - async-generator:   1.10\r\n        - async-timeout:     4.0.2\r\n        - atomicwrites:      1.4.0\r\n        - attrs:             21.4.0\r\n        - audioread:         2.1.9\r\n        - authencoding:      4.3\r\n        - autopage:          0.5.1\r\n        - autopep8:          1.6.0\r\n        - aws-requests-auth: 0.4.3\r\n        - babel:             2.10.1\r\n        - backcall:          0.2.0\r\n        - beautifulsoup4:    4.11.1\r\n        - bidict:            0.22.0\r\n        - bids-validator:    1.9.3\r\n        - biopython:         1.79\r\n        - bitstring:         3.1.9\r\n        - black:             22.3.0\r\n        - bleach:            5.0.0\r\n        - blessings:         1.7\r\n        - blurhash:          1.1.4\r\n        - bokeh:             2.4.3\r\n        - boost:             0.1\r\n        - boto3:             1.23.10\r\n        - botocore:          1.26.10\r\n        - bottleneck:        1.3.4\r\n        - btrees:            4.10.0\r\n        - build:             0.10.0\r\n        - cachetools:        5.2.0\r\n        - cachey:            0.2.1\r\n        - cellmodeller:      b-v4.3-42-g96ab099-\r\n        - certifi:           2022.5.18.1\r\n        - certipy:           0.1.3\r\n        - cffi:              1.15.0\r\n        - cftime:            1.6.0\r\n        - chainer:           7.8.1\r\n        - chameleon:         3.10.1\r\n        - chardet:           4.0.0\r\n        - charset-normalizer: 2.0.12\r\n        - chex:              0.1.3\r\n        - clang:             14.0\r\n        - click:             8.1.3\r\n        - click-plugins:     1.1.1\r\n        - cligj:             0.7.2\r\n        - clikit:            0.6.2\r\n        - cloudpickle:       2.1.0\r\n        - cmaes:             0.9.1\r\n        - cmake:             3.24.1.1\r\n        - cmd2:              2.4.1\r\n        - codecov:           2.1.12\r\n        - colorama:          0.4.4\r\n        - coloredlogs:       15.0.1\r\n        - colorful:          0.5.4\r\n        - colorlog:          6.6.0\r\n        - colorlover:        0.3.0\r\n        - colormath:         3.0.0\r\n        - commonmark:        0.9.1\r\n        - configargparse:    1.5.3\r\n        - configobj:         5.0.6\r\n        - configparser:      5.2.0\r\n        - connection-pool:   0.0.3\r\n        - contextlib2:       21.6.0\r\n        - coverage:          6.4\r\n        - crashtest:         0.3.1\r\n        - cryptography:      38.0.4\r\n        - cucim:             23.2.0\r\n        - cufflinks:         0.17.3\r\n        - cupy-cuda11x:      11.1.0\r\n        - cutadapt:          4.0\r\n        - cutensor:          1.6.0.3\r\n        - cvxopt:            1.3.0\r\n        - cvxpy:             1.2.1\r\n        - cycler:            0.11.0\r\n        - cython:            0.29.30\r\n        - dask:              2022.5.2\r\n        - databricks-cli:    0.17.4\r\n        - datasets:          2.5.1\r\n        - datetime:          4.4\r\n        - datrie:            0.8.2\r\n        - deap:              1.3.1\r\n        - debtcollector:     2.5.0\r\n        - debugpy:           1.6.0\r\n        - decorator:         5.1.1\r\n        - deepdiff:          5.8.1\r\n        - defusedxml:        0.7.1\r\n        - deprecated:        1.2.13\r\n        - deprecation:       2.1.0\r\n        - descartes:         1.1.0\r\n        - dill:              0.3.5.1\r\n        - distributed:       2022.5.2\r\n        - distro:            1.8.0\r\n        - dm-tree:           0.1.7\r\n        - dnaio:             0.9.0\r\n        - dnspython:         2.2.1\r\n        - docker:            6.0.1\r\n        - docker-pycreds:    0.4.0\r\n        - docopt:            0.6.2\r\n        - docstring-parser:  0.15\r\n        - documenttemplate:  4.0\r\n        - docutils:          0.17.1\r\n        - dpath:             2.0.6\r\n        - easydict:          1.9\r\n        - ecos:              2.0.10\r\n        - einops:            0.4.1\r\n        - entrypoints:       0.4\r\n        - envisage:          6.0.1\r\n        - ephem:             4.1.3\r\n        - esda:              2.4.1\r\n        - et-xmlfile:        1.1.0\r\n        - etils:             0.8.0\r\n        - eventlet:          0.33.1\r\n        - evo:               1.18.1\r\n        - executing:         0.8.3\r\n        - extensionclass:    4.6\r\n        - extras:            1.0.0\r\n        - fasteners:         0.17.3\r\n        - fastjsonschema:    2.15.3\r\n        - fastprogress:      1.0.2\r\n        - fastrlock:         0.8\r\n        - filelock:          3.7.0\r\n        - findlibs:          0.0.2\r\n        - fiona:             1.8.22\r\n        - fire:              0.5.0\r\n        - flask:             2.1.2\r\n        - flask-cors:        3.0.10\r\n        - flask-json:        0.3.4\r\n        - flask-restplus:    0.13.0\r\n        - flask-restx:       0.5.1\r\n        - flatbuffers:       1.12\r\n        - flit:              3.7.1\r\n        - flit-core:         3.7.1\r\n        - flowvision:        0.2.0\r\n        - follicle-tracker:  0.1.dev221+gc3cd246\r\n        - fonttools:         4.33.3\r\n        - freetype-py:       2.3.0\r\n        - frozenlist:        1.3.0\r\n        - fsspec:            2022.5.0\r\n        - funcsigs:          1.0.2\r\n        - future:            0.18.2\r\n        - futurist:          2.4.1\r\n        - gast:              0.4.0\r\n        - gdown:             4.4.0\r\n        - geopandas:         0.12.2\r\n        - gevent:            21.12.0\r\n        - giddy:             2.3.3\r\n        - gitdb:             4.0.9\r\n        - gitdb2:            4.0.2\r\n        - gitpython:         3.1.27\r\n        - gmpy2:             2.1.5\r\n        - google-api-core:   2.8.1\r\n        - google-auth:       2.6.6\r\n        - google-auth-oauthlib: 0.4.6\r\n        - google-pasta:      0.2.0\r\n        - googleapis-common-protos: 1.56.2\r\n        - googledrivedownloader: 0.4\r\n        - gpaw:              22.8.0\r\n        - gprmax:            3.1.4\r\n        - gpustat:           0.6.0\r\n        - grabbit:           0.2.6\r\n        - graphtools:        1.5.2\r\n        - greenlet:          1.1.2\r\n        - grpcio:            1.46.3\r\n        - gunicorn:          20.1.0\r\n        - h3:                3.7.4\r\n        - h5py:              3.7.0\r\n        - haversine:         2.5.1\r\n        - hdbscan:           0.8.29\r\n        - heapdict:          1.0.1\r\n        - hiredis:           2.0.0\r\n        - hsluv:             5.0.3\r\n        - html5lib:          1.1\r\n        - httpstan:          4.8.2\r\n        - huggingface-hub:   0.7.0\r\n        - humanfriendly:     10.0\r\n        - hydra-core:        1.2.0\r\n        - hyperopt:          0.2.7\r\n        - idna:              3.3\r\n        - ifcfg:             0.22\r\n        - imagecodecs:       2023.1.23\r\n        - imageio:           2.19.3\r\n        - imageio-ffmpeg:    0.4.7\r\n        - imagesize:         1.3.0\r\n        - importlib-metadata: 4.11.4\r\n        - importlib-resources: 5.7.1\r\n        - in-n-out:          0.1.7\r\n        - inequality:        1.0.0\r\n        - iniconfig:         1.1.1\r\n        - install:           1.3.5\r\n        - iopath:            0.1.6\r\n        - ipdb:              0.13.9\r\n        - ipykernel:         6.13.0\r\n        - ipython:           8.4.0\r\n        - ipython-genutils:  0.2.0\r\n        - ipywidgets:        7.7.0\r\n        - isal:              0.11.1\r\n        - iso3166:           2.0.2\r\n        - iso8601:           1.0.2\r\n        - isodate:           0.6.1\r\n        - iteration-utilities: 0.11.0\r\n        - itk:               5.3.0\r\n        - itk-core:          5.3.0\r\n        - itk-filtering:     5.3.0\r\n        - itk-io:            5.3.0\r\n        - itk-numerics:      5.3.0\r\n        - itk-registration:  5.3.0\r\n        - itk-segmentation:  5.3.0\r\n        - itsdangerous:      2.1.2\r\n        - jax:               0.3.23\r\n        - jaxlib:            0.3.22+cuda11.cudnn82\r\n        - jedi:              0.18.1\r\n        - jeepney:           0.8.0\r\n        - jieba:             0.42.1\r\n        - jinja2:            3.1.2\r\n        - jmespath:          1.0.0\r\n        - joblib:            1.1.0\r\n        - json-tricks:       3.16.1\r\n        - json5:             0.9.8\r\n        - jsonargparse:      4.20.0\r\n        - jsonlines:         1.2.0\r\n        - jsonpickle:        2.2.0\r\n        - jsonpointer:       2.3\r\n        - jsonschema:        4.5.1\r\n        - jupyter:           1.0.0\r\n        - jupyter-client:    7.3.1\r\n        - jupyter-console:   6.4.3\r\n        - jupyter-contrib-core: 0.3.3\r\n        - jupyter-core:      4.10.0\r\n        - jupyter-highlight-selected-word: 0.2.0\r\n        - jupyter-server:    1.17.0\r\n        - jupyter-telemetry: 0.1.0\r\n        - jupyterlab:        3.4.2\r\n        - jupyterlab-pygments: 0.2.2\r\n        - jupyterlab-server: 2.14.0\r\n        - jupyterlab-widgets: 1.1.0\r\n        - keras:             2.9.0\r\n        - keras-preprocessing: 1.1.2\r\n        - keyring:           23.5.1\r\n        - kiwisolver:        1.4.2\r\n        - lazy-object-proxy: 1.7.1\r\n        - libclang:          14.0.1\r\n        - libpysal:          4.6.2\r\n        - lightning-utilities: 0.7.1\r\n        - llvmlite:          0.38.1\r\n        - lmdb:              1.4.0\r\n        - locket:            1.0.0\r\n        - logutils:          0.3.5\r\n        - loompy:            3.0.7\r\n        - lxml:              4.8.0\r\n        - lz4:               4.0.1\r\n        - lzstring:          1.0.4\r\n        - mageck:            0.5.9.4\r\n        - magicgui:          0.7.0\r\n        - mako:              1.2.0\r\n        - mapclassify:       2.4.3\r\n        - markdown:          3.3.7\r\n        - markupsafe:        2.1.1\r\n        - marshmallow:       3.18.0\r\n        - mastodon.py:       1.8.0\r\n        - matplotlib:        3.5.2\r\n        - matplotlib-inline: 0.1.3\r\n        - mccabe:            0.7.0\r\n        - mercantile:        1.2.1\r\n        - mgwr:              2.1.2\r\n        - mistune:           0.8.4\r\n        - mlflow:            2.2.1\r\n        - mock:              4.0.3\r\n        - monai:             1.1.0\r\n        - more-itertools:    8.13.0\r\n        - mpi4py:            3.1.4\r\n        - mpmath:            1.2.1\r\n        - msgpack:           1.0.3\r\n        - multidict:         6.0.2\r\n        - multimapping:      4.1\r\n        - multipart:         0.2.4\r\n        - multiprocess:      0.70.13\r\n        - multiqc:           1.13\r\n        - munch:             2.5.0\r\n        - mypy-extensions:   0.4.3\r\n        - napari:            0.4.17\r\n        - napari-console:    0.0.7\r\n        - napari-plugin-engine: 0.2.0\r\n        - napari-svg:        0.1.6\r\n        - natsort:           8.1.0\r\n        - nbclassic:         0.3.7\r\n        - nbclient:          0.6.3\r\n        - nbconvert:         6.5.0\r\n        - nbformat:          5.4.0\r\n        - nbsphinx:          0.8.8\r\n        - nest-asyncio:      1.5.5\r\n        - netaddr:           0.8.0\r\n        - netcdf4:           1.5.8\r\n        - netifaces:         0.11.0\r\n        - networkx:          2.8.2\r\n        - nibabel:           3.2.2\r\n        - ninja:             1.11.1\r\n        - nipy:              0.5.0\r\n        - nltk:              3.7\r\n        - nni:               2.10\r\n        - nose:              1.3.7\r\n        - nose-timer:        1.0.1\r\n        - notebook:          6.4.11\r\n        - notebook-shim:     0.1.0\r\n        - npe2:              0.6.2\r\n        - nptyping:          2.5.0\r\n        - num2words:         0.5.10\r\n        - numba:             0.55.2\r\n        - numexpr:           2.8.1\r\n        - numpy:             1.22.4\r\n        - numpy-groupies:    0.9.16\r\n        - numpy-quaternion:  2022.4.2\r\n        - numpydoc:          1.5.0\r\n        - nvidia-ml-py3:     7.352.0\r\n        - oauthlib:          3.2.0\r\n        - omegaconf:         2.2.2\r\n        - opencensus:        0.9.0\r\n        - opencensus-context: 0.1.2\r\n        - opencv-contrib-python: 4.5.5.64\r\n        - opencv-python:     4.5.5.64\r\n        - openpyxl:          3.0.10\r\n        - openseespy:        3.3.0.1.1\r\n        - openseespylinux:   3.4.0.1\r\n        - openslide-python:  1.1.2\r\n        - opt-einsum:        3.3.0\r\n        - optax:             0.1.2\r\n        - optuna:            3.1.0\r\n        - ordered-set:       4.1.0\r\n        - os-service-types:  1.7.0\r\n        - oslo.i18n:         5.1.0\r\n        - osmnx:             1.2.2\r\n        - osqp:              0.6.2.post5\r\n        - ovary-analysis:    0.0.3\r\n        - overpy:            0.6\r\n        - packaging:         21.3\r\n        - pamela:            1.0.0\r\n        - pandas:            1.4.2\r\n        - pandas-datareader: 0.10.0\r\n        - pandoc:            2.2\r\n        - pandocfilters:     1.5.0\r\n        - parso:             0.8.3\r\n        - partd:             1.2.0\r\n        - paste:             3.5.0\r\n        - pastedeploy:       2.1.1\r\n        - pastel:            0.2.1\r\n        - pathos:            0.2.9\r\n        - pathspec:          0.9.0\r\n        - pathtools:         0.1.2\r\n        - patsy:             0.5.2\r\n        - pbr:               5.9.0\r\n        - persistence:       3.3\r\n        - persistent:        4.9.0\r\n        - pert:              2019.11\r\n        - pexpect:           4.8.0\r\n        - pickleshare:       0.7.5\r\n        - pillow:            9.1.1\r\n        - pint:              0.19.2\r\n        - pip:               22.2.2\r\n        - pkginfo:           1.8.2\r\n        - plac:              1.3.5\r\n        - platformdirs:      2.5.2\r\n        - plotly:            5.8.0\r\n        - pluggy:            1.0.0\r\n        - plumbum:           1.7.2\r\n        - ply:               3.11\r\n        - pointpats:         2.2.0\r\n        - pooch:             1.6.0\r\n        - portalocker:       2.4.0\r\n        - pox:               0.3.1\r\n        - ppft:              1.7.6.5\r\n        - prettytable:       3.3.0\r\n        - prometheus-client: 0.14.1\r\n        - promise:           2.3\r\n        - prompt-toolkit:    3.0.29\r\n        - protobuf:          3.19.4\r\n        - psutil:            5.9.1\r\n        - psygnal:           0.8.1\r\n        - ptyprocess:        0.7.0\r\n        - pulp:              2.6.0\r\n        - pure-eval:         0.2.2\r\n        - py:                1.11.0\r\n        - py-spy:            0.3.12\r\n        - py4design:         0.28\r\n        - py4j:              0.10.9.5\r\n        - pyarrow:           9.0.0\r\n        - pyasn1:            0.4.8\r\n        - pyasn1-modules:    0.2.8\r\n        - pybind11:          2.9.2\r\n        - pybis:             1.35.2\r\n        - pybufrkit:         0.2.19\r\n        - pycocotools:       2.0.4\r\n        - pycodestyle:       2.8.0\r\n        - pycollada:         0.7.2\r\n        - pycparser:         2.21\r\n        - pydantic:          1.10.5\r\n        - pydicom:           2.3.1\r\n        - pydot:             1.4.2\r\n        - pyepsg:            0.4.0\r\n        - pyface:            7.4.1\r\n        - pyfaidx:           0.6.4\r\n        - pyflakes:          2.5.0\r\n        - pyglet:            1.5.26\r\n        - pygments:          2.12.0\r\n        - pygsp:             0.5.1\r\n        - pygsti:            0.9.10.1\r\n        - pyinotify:         0.9.6\r\n        - pyjwt:             2.6.0\r\n        - pylev:             1.4.0\r\n        - pymeshfix:         0.16.2\r\n        - pymf:              0.1.9\r\n        - pymongo:           4.1.1\r\n        - pynrrd:            1.0.0\r\n        - pyomo:             6.4.1\r\n        - pyopencl:          2022.1.5\r\n        - pyopengl:          3.1.6\r\n        - pyopenssl:         22.1.0\r\n        - pyparsing:         3.0.9\r\n        - pyperclip:         1.8.2\r\n        - pyproj:            3.4.1\r\n        - pyproject-hooks:   1.0.0\r\n        - pypsa:             0.19.3\r\n        - pyqt5:             5.15.6\r\n        - pyqt5-qt5:         5.15.2\r\n        - pyqt5-sip:         12.10.1\r\n        - pyro4:             4.82\r\n        - pyrsistent:        0.18.1\r\n        - pysam:             0.19.1\r\n        - pyshp:             2.3.0\r\n        - pysimdjson:        3.2.0\r\n        - pysocks:           1.7.1\r\n        - pystan:            3.5.0\r\n        - pytest:            7.1.2\r\n        - python-dateutil:   2.8.2\r\n        - python-engineio:   4.3.2\r\n        - python-gettext:    4.0\r\n        - python-json-logger: 2.0.4\r\n        - python-louvain:    0.16\r\n        - python-magic:      0.4.27\r\n        - python-socketio:   5.6.0\r\n        - pythonwebhdfs:     0.2.3\r\n        - pytoml:            0.1.21\r\n        - pytomlpp:          1.0.11\r\n        - pytools:           2022.1.9\r\n        - pytorch-ignite:    0.4.10\r\n        - pytorch-lightning: 1.9.4\r\n        - pytorch3dunet:     1.3.3\r\n        - pytz:              2022.1\r\n        - pyutilib:          6.0.0\r\n        - pyutillib:         0.3.0\r\n        - pyvista:           0.38.3\r\n        - pywavelets:        1.3.0\r\n        - pyxlsb:            1.0.9\r\n        - pyyaml:            6.0\r\n        - pyzmq:             23.0.0\r\n        - qdldl:             0.1.5.post2\r\n        - qtconsole:         5.3.0\r\n        - qtpy:              2.1.0\r\n        - quantecon:         0.5.3\r\n        - querystring-parser: 1.2.4\r\n        - quilt3:            5.0.0\r\n        - rasterio:          1.3.6\r\n        - rasterstats:       0.18.0\r\n        - ratelimiter:       1.2.0.post0\r\n        - rdflib:            6.1.1\r\n        - readme-renderer:   35.0\r\n        - recommonmark:      0.7.1\r\n        - redis:             4.3.1\r\n        - rednose:           1.3.0\r\n        - regex:             2022.4.24\r\n        - reportlab:         3.6.9\r\n        - repoze.lru:        0.7\r\n        - requests:          2.28.2\r\n        - requests-futures:  1.0.0\r\n        - requests-oauthlib: 1.3.1\r\n        - requests-toolbelt: 0.9.1\r\n        - requests-unixsocket: 0.3.0\r\n        - requestsexceptions: 1.4.0\r\n        - resampy:           0.2.2\r\n        - responses:         0.18.0\r\n        - restrictedpython:  5.3a1.dev0\r\n        - retry:             0.9.2\r\n        - retrying:          1.3.3\r\n        - rfc3986:           2.0.0\r\n        - rich:              12.4.4\r\n        - rich-click:        1.5.2\r\n        - roman:             3.3\r\n        - rosbags:           0.9.11\r\n        - routes:            2.5.1\r\n        - rsa:               4.8\r\n        - rtree:             1.0.0\r\n        - ruamel.yaml:       0.17.21\r\n        - ruamel.yaml.clib:  0.2.6\r\n        - rvlib:             0.0.6\r\n        - s3transfer:        0.5.2\r\n        - salib:             1.4.5\r\n        - schema:            0.7.5\r\n        - scikit-build:      0.16.7\r\n        - scikit-fmm:        2022.3.26\r\n        - scikit-image:      0.19.2\r\n        - scikit-learn:      1.1.1\r\n        - scipy:             1.8.1\r\n        - scons:             4.4.0\r\n        - scooby:            0.7.1\r\n        - scs:               3.2.0\r\n        - seaborn:           0.11.2\r\n        - secretstorage:     3.3.2\r\n        - semver:            2.13.0\r\n        - send2trash:        1.8.0\r\n        - sentence-transformers: 2.2.0\r\n        - sentencepiece:     0.1.96\r\n        - sentry-sdk:        1.5.12\r\n        - serpent:           1.40\r\n        - setproctitle:      1.2.3\r\n        - setuptools:        58.1.0\r\n        - setuptools-scm:    6.4.2\r\n        - shap:              0.41.0\r\n        - shapely:           1.8.5.post1\r\n        - shortuuid:         1.0.9\r\n        - simplegeneric:     0.8.1\r\n        - simplejson:        3.17.6\r\n        - six:               1.16.0\r\n        - slicer:            0.0.7\r\n        - smart-open:        6.0.0\r\n        - smmap:             5.0.0\r\n        - smmap2:            3.0.1\r\n        - snakemake:         7.8.0\r\n        - sniffio:           1.2.0\r\n        - snowballstemmer:   2.2.0\r\n        - snuggs:            1.4.7\r\n        - sortedcontainers:  2.4.0\r\n        - soupsieve:         2.3.2.post1\r\n        - spaghetti:         1.6.5\r\n        - spectra:           0.0.11\r\n        - spglm:             1.0.8\r\n        - sphinx:            4.5.0\r\n        - sphinxcontrib-applehelp: 1.0.2\r\n        - sphinxcontrib-devhelp: 1.0.2\r\n        - sphinxcontrib-htmlhelp: 2.0.0\r\n        - sphinxcontrib-jsmath: 1.0.1\r\n        - sphinxcontrib-qthelp: 1.0.3\r\n        - sphinxcontrib-serializinghtml: 1.1.5\r\n        - sphinxcontrib-websupport: 1.2.4\r\n        - spint:             1.0.7\r\n        - spreg:             1.2.4\r\n        - spvcm:             0.3.0\r\n        - sqlalchemy:        1.4.37\r\n        - sqlparse:          0.4.2\r\n        - stack-data:        0.2.0\r\n        - staticmap:         0.5.5\r\n        - statsd:            3.3.0\r\n        - statsmodels:       0.13.2\r\n        - stevedore:         3.5.0\r\n        - stopit:            1.1.2\r\n        - subprocess32:      3.5.4\r\n        - superqt:           0.4.1\r\n        - svg.path:          6.0\r\n        - sympy:             1.10.1\r\n        - tables:            3.7.0\r\n        - tabulate:          0.8.9\r\n        - tasklogger:        1.1.2\r\n        - tblib:             1.7.0\r\n        - tempita:           0.5.2\r\n        - tenacity:          8.0.1\r\n        - tensorboard:       2.9.0\r\n        - tensorboard-data-server: 0.6.1\r\n        - tensorboard-plugin-wit: 1.8.1\r\n        - tensorboardx:      2.5\r\n        - tensorflow-estimator: 2.9.0\r\n        - tensorflow-gpu:    2.9.1\r\n        - tensorflow-io-gcs-filesystem: 0.26.0\r\n        - termcolor:         1.1.0\r\n        - terminado:         0.15.0\r\n        - terminaltables:    3.1.10\r\n        - termstyle:         0.1.11\r\n        - testpath:          0.6.0\r\n        - testresources:     2.0.1\r\n        - texttable:         1.6.4\r\n        - theano:            1.0.5\r\n        - theano-pymc:       1.1.2\r\n        - threadpoolctl:     3.1.0\r\n        - tifffile:          2022.5.4\r\n        - timezonefinder:    6.0.0\r\n        - tinycss2:          1.1.1\r\n        - tokenizers:        0.12.1\r\n        - toml:              0.10.2\r\n        - tomli:             2.0.1\r\n        - tomli-w:           1.0.0\r\n        - tomlkit:           0.11.0\r\n        - toolz:             0.11.2\r\n        - toposort:          1.7\r\n        - torch:             1.11.0+cu113\r\n        - torch-cluster:     1.6.0\r\n        - torch-fidelity:    0.3.0\r\n        - torch-geometric:   2.0.4\r\n        - torch-scatter:     2.0.9\r\n        - torch-sparse:      0.6.13\r\n        - torch-spline-conv: 1.2.1\r\n        - torchaudio:        0.11.0+cu113\r\n        - torchmetrics:      0.11.3\r\n        - torchvision:       0.12.0+cu113\r\n        - tornado:           6.1\r\n        - tqdm:              4.64.0\r\n        - traitlets:         5.2.1.post0\r\n        - traits:            6.3.2\r\n        - traitsui:          7.3.1\r\n        - transaction:       3.0.1\r\n        - transformers:      4.19.2\r\n        - trimesh:           3.12.5\r\n        - twine:             4.0.1\r\n        - typeguard:         2.13.3\r\n        - typer:             0.7.0\r\n        - typeshed-client:   2.2.0\r\n        - typing-extensions: 4.2.0\r\n        - urllib3:           1.26.9\r\n        - utm:               0.7.0\r\n        - velocyto:          0.17.17\r\n        - vine:              5.0.0\r\n        - vispy:             0.11.0\r\n        - vtk:               9.2.6\r\n        - waitress:          2.1.1\r\n        - wandb:             0.12.17\r\n        - wcwidth:           0.2.5\r\n        - webargs:           8.2.0\r\n        - webencodings:      0.5.1\r\n        - webob:             1.8.7\r\n        - websocket:         0.2.1\r\n        - websocket-client:  1.3.2\r\n        - websockets:        10.4\r\n        - webtest:           3.0.0\r\n        - werkzeug:          2.1.2\r\n        - wget:              3.2\r\n        - wheel:             0.37.1\r\n        - widgetsnbextension: 3.6.0\r\n        - wntr:              0.4.1\r\n        - wrapt:             1.14.1\r\n        - wsgiproxy2:        0.5.1\r\n        - wsme:              0.11.0\r\n        - xarray:            2022.3.0\r\n        - xarray-einstats:   0.2.2\r\n        - xlrd:              2.0.1\r\n        - xlsxwriter:        3.0.3\r\n        - xlwt:              1.3.0\r\n        - xmlrunner:         1.7.7\r\n        - xopen:             1.5.0\r\n        - xxhash:            3.0.0\r\n        - xyzservices:       2022.4.0\r\n        - yacs:              0.1.8\r\n        - yappi:             1.3.5\r\n        - yarl:              1.7.2\r\n        - yaspin:            2.1.0\r\n        - yte:               1.4.0\r\n        - z3c.pt:            3.3.1\r\n        - zc.lockfile:       2.0\r\n        - zconfig:           3.6.0\r\n        - zexceptions:       4.2\r\n        - zict:              2.2.0\r\n        - zipp:              3.8.0\r\n        - zodb:              5.7.0\r\n        - zodbpickle:        2.3\r\n        - zope:              5.5.1\r\n        - zope.annotation:   4.7.0\r\n        - zope.browser:      2.4\r\n        - zope.browsermenu:  4.4\r\n        - zope.browserpage:  4.4.0\r\n        - zope.browserresource: 4.4\r\n        - zope.cachedescriptors: 4.3.1\r\n        - zope.component:    5.0.1\r\n        - zope.configuration: 4.4.1\r\n        - zope.container:    4.5.0\r\n        - zope.contentprovider: 4.2.1\r\n        - zope.contenttype:  4.5.0\r\n        - zope.datetime:     4.3.0\r\n        - zope.deferredimport: 4.4\r\n        - zope.deprecation:  4.4.0\r\n        - zope.dottedname:   4.3\r\n        - zope.event:        4.5.0\r\n        - zope.exceptions:   4.5\r\n        - zope.filerepresentation: 5.0.0\r\n        - zope.globalrequest: 1.5\r\n        - zope.hookable:     5.1.0\r\n        - zope.i18n:         4.9.0\r\n        - zope.i18nmessageid: 5.0.1\r\n        - zope.interface:    5.4.0\r\n        - zope.lifecycleevent: 4.4\r\n        - zope.location:     4.2\r\n        - zope.pagetemplate: 4.6.0\r\n        - zope.processlifetime: 2.3.0\r\n        - zope.proxy:        4.5.0\r\n        - zope.ptresource:   4.3.0\r\n        - zope.publisher:    6.1.0\r\n        - zope.schema:       6.2.0\r\n        - zope.security:     5.3\r\n        - zope.sequencesort: 4.2\r\n        - zope.site:         4.5.0\r\n        - zope.size:         4.3\r\n        - zope.structuredtext: 4.4\r\n        - zope.tal:          4.5\r\n        - zope.tales:        5.1\r\n        - zope.testbrowser:  5.6.1\r\n        - zope.testing:      4.10\r\n        - zope.traversing:   4.4.1\r\n        - zope.viewlet:      4.3\r\n        - zstandard:         0.17.0\r\n* System:\r\n        - OS:                Linux\r\n        - architecture:\r\n                - 64bit\r\n                - ELF\r\n        - processor:         \r\n        - python:            3.10.4\r\n        - version:           #1 SMP Tue Nov 8 15:48:59 UTC 2022\r\n```\r\n\r\n</details>\r\n\r\n\r\n### More info\r\n\r\n_No response_\n\ncc @carmocca @mauvilsa",
    "comments_url": "https://api.github.com/repos/Lightning-AI/pytorch-lightning/issues/16970/comments",
    "author": "leopold-franz",
    "comments": [
      {
        "user": "awaelchli",
        "created_at": "2023-03-06T20:33:15Z",
        "body": "Hey, I think the problem is that these keys in the config.yaml are not allowed:\r\n\r\n```\r\nseed_everything_default: null\r\nlog_dir: /cluster/dir/to/log\r\n```\r\n\r\nThey don't match anything in the Trainer. \r\n\r\nPerhaps it should be \r\n```\r\nseed_everything: false\r\ntrainer:\r\n    default_root_dir:  \"/cluster/dir/to/log\"\r\n    ...\r\n```"
      }
    ]
  },
  {
    "number": 16654,
    "title": "dependencies issue working with torch and pytorch_lightning. ",
    "created_at": "2023-02-06T17:16:02Z",
    "closed_at": "2023-02-06T21:09:20Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/Lightning-AI/pytorch-lightning/issues/16654",
    "body": "### Bug description\n\nI have trouble getting all needed packages to be compatible to run ResNet transfer learning. I trying the import from one of the sample lightening notebooks anf got error. And then trying to install the recommended packages got following incompatibility issue.       \r\ncommand: \r\n`! pip install --quiet \"torchmetrics>=0.7, <0.12\" \"seaborn\" \"ipython[notebook]>=8.0.0, <8.9.0\" \"pytorch-lightning>=1.4, <1.9\" \"torchmetrics >=0.11.0\" \"setuptools==65.6.3\" \"pandas\" \"torchvision\" \"torch>=1.8.1, <1.14.0\"\r\n`\r\nIssue: \r\n```\r\nERROR: pip's dependency resolver does not currently take into account all the packages that are installed. This behaviour is the source of the following dependency conflicts.\r\nthinc 8.0.1 requires pydantic<1.8.0,>=1.7.1, but you have pydantic 1.10.4 which is incompatible.\r\nspacy 3.0.1 requires pydantic<1.8.0,>=1.7.1, but you have pydantic 1.10.4 which is incompatible.\r\nlightning 1.9.0.dev0 requires lightning-utilities<1.0,>=0.4.2, but you have lightning-utilities 0.3.0 which is incompatible.\r\nconda-repo-cli 1.0.27 requires clyent==1.2.1, but you have clyent 1.2.2 which is incompatible.\r\nconda-repo-cli 1.0.27 requires nbformat==5.4.0, but you have nbformat 5.7.0 which is incompatible.\r\n```\n\n### How to reproduce the bug\n\n_No response_\n\n### Error messages and logs\n\n```\r\n# Error messages and logs here please\r\n```\r\n\n\n### Environment\n\n<details>\r\n  <summary>Current environment</summary>\r\n\r\n```\r\n#- Lightning Component (e.g. Trainer, LightningModule, LightningApp, LightningWork, LightningFlow):\r\n#- PyTorch Lightning Version (e.g., 1.5.0):\r\n#- Lightning App Version (e.g., 0.5.2):\r\n#- PyTorch Version (e.g., 2.0):\r\n#- Python version (e.g., 3.9):\r\n#- OS (e.g., Linux):\r\n#- CUDA/cuDNN version:\r\n#- GPU models and configuration:\r\n#- How you installed Lightning(`conda`, `pip`, source):\r\n#- Running environment of LightningApp (e.g. local, cloud):\r\n```\r\n\r\n</details>\r\n\n\n### More info\n\n_No response_",
    "comments_url": "https://api.github.com/repos/Lightning-AI/pytorch-lightning/issues/16654/comments",
    "author": "nkay28",
    "comments": [
      {
        "user": "awaelchli",
        "created_at": "2023-02-06T20:40:16Z",
        "body": "@nkay28 You have torchmetrics specified twice, once with torchmetrics>=0.7, <0.12 and once with torchmetrics >=0.11.0. Also, I suggest to remove setuptools==65.6.3 which could limit the pip dep resolver. "
      }
    ]
  },
  {
    "number": 16102,
    "title": "Torch sees GPU but does not use it",
    "created_at": "2022-12-17T17:36:44Z",
    "closed_at": "2022-12-18T20:54:37Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/Lightning-AI/pytorch-lightning/issues/16102",
    "body": "### Bug description\n\nWhen I use ``torch.cuda.device_count()``\r\nit returns 1, which is correct\r\nBut then when using Lightning, it shows this in terminal\r\n``LOCAL_RANK: 0 - CUDA_VISIBLE_DEVICES: [0]\r\n``\n\n### How to reproduce the bug\n\n_No response_\n\n### Error messages and logs\n\n```\r\n# Error messages and logs here please\r\n```\r\n\n\n### Environment\n\n<details>\r\n  <summary>Current environment</summary>\r\n\r\n```\r\n#- Lightning Component (e.g. Trainer, LightningModule, LightningApp, LightningWork, LightningFlow):\r\n#- PyTorch Lightning Version (e.g., 1.5.0):\r\n#- Lightning App Version (e.g., 0.5.2):\r\n#- PyTorch Version (e.g., 1.10):\r\n#- Python version (e.g., 3.9):\r\n#- OS (e.g., Linux):\r\n#- CUDA/cuDNN version:\r\n#- GPU models and configuration:\r\n#- How you installed Lightning(`conda`, `pip`, source):\r\n#- Running environment of LightningApp (e.g. local, cloud):\r\n```\r\n\r\n</details>\r\n\n\n### More info\n\n_No response_",
    "comments_url": "https://api.github.com/repos/Lightning-AI/pytorch-lightning/issues/16102/comments",
    "author": "ThatGuyCalledJesse",
    "comments": [
      {
        "user": "awaelchli",
        "created_at": "2022-12-18T20:47:01Z",
        "body": "@ThatGuyCalledJesse That's correct. If you have one GPU, then Lightning can only use one and that's device with index 0. \r\nIf you had multiple GPUs, it would show:\r\n\r\n`LOCAL_RANK: 0 - CUDA_VISIBLE_DEVICES: [0, 1]`\r\n\r\netc.\r\n"
      },
      {
        "user": "yotamcons",
        "created_at": "2023-11-20T11:09:29Z",
        "body": "I made the same mistake, thank you for asking.\r\nWhat bothered me was the \"local rank\" which i couldn't figure out. This calls for better logging, especially in the uncomfortable new filed of gpu computations."
      }
    ]
  },
  {
    "number": 15973,
    "title": "access to the last training epoch that triggered early stopping",
    "created_at": "2022-12-09T01:07:08Z",
    "closed_at": "2022-12-14T02:50:04Z",
    "labels": [
      "question",
      "callback: early stopping"
    ],
    "url": "https://github.com/Lightning-AI/pytorch-lightning/issues/15973",
    "body": "### Description & Motivation\r\n\r\nI wish there was a method to access when the last training epoch number was. The max_training_epoch differs from the last training epoch resulting from the early stopping.\n\ncc @borda @carmocca @awaelchli",
    "comments_url": "https://api.github.com/repos/Lightning-AI/pytorch-lightning/issues/15973/comments",
    "author": "jaeho3690",
    "comments": [
      {
        "user": "awaelchli",
        "created_at": "2022-12-13T04:38:37Z",
        "body": "Hi @jaeho3690 \r\nIs this what you are looking for?\r\n\r\n```py\r\nprint(trainer.early_stopping_callback.stopped_epoch)\r\n\r\n```"
      }
    ]
  },
  {
    "number": 14199,
    "title": "on_save_checkpoint runs multiple times on DDP",
    "created_at": "2022-08-14T13:42:46Z",
    "closed_at": "2022-08-14T18:23:13Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/Lightning-AI/pytorch-lightning/issues/14199",
    "body": "## \ud83d\udc1b Bug\r\n\r\non_save_checkpoint handler of the LightningModule runs once per GPU when running on multiple GPUs with `strategy=dpp`. This can have unwanted side effects when saving additional checkpoint information.\r\n\r\nIs there a way to make this run only the master? \r\n\r\nIs this the expected behavior? I would think the former would be the more common use case.\r\n\r\n### To Reproduce\r\n\r\n```py\r\nfrom transformers import AutoModel\r\nfrom pytorch_lightning import LightningModule\r\n\r\nclass BoringModel(LightningModule):\r\n    def __init__(self,  model_name, save_path):\r\n        super().__init__()\r\n        self.save_hyperparameters()\r\n        self.model = AutoModel.from_pretained(self.hparams.model_name)\r\n\r\n    def forward(self, pixel_values):\r\n        outputs = self.model(pixel_values=pixel_values)\r\n        return outputs\r\n\r\n    def training_step(self, batch, batch_idx):\r\n        loss = self(batch).sum()\r\n        self.log(\"train_loss\", loss)\r\n        return {\"loss\": loss}\r\n\r\n    def validation_step(self, batch, batch_idx):\r\n        loss = self(batch).sum()\r\n        self.log(\"valid_loss\", loss)\r\n\r\n    def test_step(self, batch, batch_idx):\r\n        loss = self(batch).sum()\r\n        self.log(\"test_loss\", loss)\r\n\r\n    def configure_optimizers(self):\r\n        return torch.optim.SGD(self.layer.parameters(), lr=0.1)\r\n\r\n    def on_save_checkpoint(self, checkpoint):\r\n        print(\"Saving model latest checkpoint in HF format..\")\r\n        self.model.save_pretrained(self.hparams.save_path)\r\n```\r\n\r\n- Lightning Component (e.g. Trainer, LightningModule):\r\n- PyTorch Lightning Version  1.6.4\r\n- OS (e.g., Linux): Linux\r\n- CUDA/cuDNN version: 11.3\r\n- GPU models and configuration:  8xT4\r\n- Any other relevant information:\r\n",
    "comments_url": "https://api.github.com/repos/Lightning-AI/pytorch-lightning/issues/14199/comments",
    "author": "jordanparker6",
    "comments": [
      {
        "user": "awaelchli",
        "created_at": "2022-08-14T18:20:49Z",
        "body": "> Is this the expected behavior?\r\n\r\nYes, it definitely is. \r\n\r\n> This can have unwanted side effects when saving additional checkpoint information.\r\n\r\nWhat for example? Can you give an example?\r\n`on_save_checkpoint`'s primary use is to modify the dictionary checkpoint before it gets saved. Whether all ranks do something with this dictionary or not is up to the implementation in the strategy. Example: Sharded models may want to save a portion of the weights on each rank. \r\n\r\n> Is there a way to make this run only the master?\r\n\r\n```py\r\ndef on_save_checkpoint(self, checkpoint):\r\n        if self.global_rank == 0:\r\n            # run only on rank 0\r\n```"
      },
      {
        "user": "awaelchli",
        "created_at": "2022-08-14T18:23:13Z",
        "body": "Closing the issue as behavior is expected. In general, all hooks need to run on all ranks. \r\n\r\nIf you are looking to save only on one rank, this can be accounted for by:\r\n\r\n```py\r\ndef on_save_checkpoint(self, checkpoint):\r\n        if self.global_rank == 0:\r\n            print(\"Saving model latest checkpoint in HF format..\")\r\n            self.model.save_pretrained(self.hparams.save_path)\r\n```"
      }
    ]
  },
  {
    "number": 13360,
    "title": "Using Dataloader in pytorch_lightning when using DDP training?",
    "created_at": "2022-06-22T06:51:21Z",
    "closed_at": "2022-08-01T14:32:41Z",
    "labels": [
      "question",
      "won't fix",
      "distributed",
      "data handling"
    ],
    "url": "https://github.com/Lightning-AI/pytorch-lightning/issues/13360",
    "body": "My computer has 2 gpus and I have some problems:\r\n1. First, I used Pytorch\r\nI have 10 images, I created distributed dataloader (using sampler) follow Pytorch instruction, batchsize = 4, gpu=2.\r\n=> So with each gpu, length of batch0 is 4 and length of batch1 is 4. Sampler added 2 to batch1 to make batchsize = 4.\r\nI trained with ddp_spawn with pytorch code and everything is ok.\r\n\r\n2. Next, I used Pytorch Lightning\r\nI also use 10 images, I created dataloader (Normal Dataloader) follow Pytorch Instruction, batchsize =4, gpu=2\r\n=> so with each gpu, length of batch0 is 4 and length of batch1 is 1.\r\n\r\nNow, I want to use pytorch lightning but I want batchsize=4 same distributed sampler when working with pytorchlightning. How should I do?\r\n\r\nThanks\n\ncc @awaelchli @rohitgr7 @akihironitta @justusschock @ninginthecloud @otaj",
    "comments_url": "https://api.github.com/repos/Lightning-AI/pytorch-lightning/issues/13360/comments",
    "author": "NguyenDuyDuc1491995",
    "comments": [
      {
        "user": "rohitgr7",
        "created_at": "2022-06-22T10:22:49Z",
        "body": "> So with each gpu, length of batch0 is 4 and length of batch1 is 4. Sampler added 2 to batch1 to make batchsize = 4.\r\n\r\nthat makes total batches to be processed = 16, which seems incorrect.\r\nPL uses distributed sampler internally so it should be `batch0=4` and `batch1=1` on each GPU."
      },
      {
        "user": "NguyenDuyDuc1491995",
        "created_at": "2022-06-22T16:50:56Z",
        "body": "The problem is when I train semantic segmentation DeepLabV3 by pytorchlightning\r\nBatch0 =4 is ok, but batch1=1 is error. Because the batch is 1 so there is a problem with batchnorm.\r\n\r\nBut I used distributed dataloader with sampler in pytorch and I saw it will create batch0=4 and batch1=4 ( it will take 3 more images) so I wonder if I can create a distributed dataloader as same as above in pytorch lightning?"
      },
      {
        "user": "awaelchli",
        "created_at": "2022-06-22T17:21:49Z",
        "body": "The distributed sampler has nothing to do with batching. It only ensures that each GPU gets the same amount of samples and since your dataset of 10 images is divisible by 2, that's never a problem. \r\n\r\nTo avoid uneven batch sizes, just set `drop_last=True` in the dataloader and then you are guaranteed to get the batch size 4 for each batch. This is the same in PyTorch and PL, there should be no difference. "
      }
    ]
  },
  {
    "number": 12943,
    "title": "Distribution not moved to correct device",
    "created_at": "2022-05-01T04:06:14Z",
    "closed_at": "2022-06-23T04:17:41Z",
    "labels": [
      "question",
      "won't fix"
    ],
    "url": "https://github.com/Lightning-AI/pytorch-lightning/issues/12943",
    "body": "## \ud83d\udc1b Bug\r\n\r\nI'm attempting to port a variational auto-encoder to use `torch.distributions`. I noticed that when I define a `torch.distributions.Distribution` as a module parameter - for example the `prior` in the example below - it doesn't get moved to the correct device. I'm fairly certain this is because you call `module.apply()` with a lambda in order to recursively move modules to the specific device - unfortunately a Distribution is not a module but it does hold tensors so this strategy fails in this edge case.\r\n\r\n### To Reproduce\r\n\r\n```\r\nimport os\r\n\r\nimport torch\r\nfrom torch.utils.data import DataLoader, Dataset\r\n\r\nfrom pytorch_lightning import LightningModule, Trainer\r\n\r\nfrom torch.distributions import MultivariateNormal\r\n\r\nclass RandomDataset(Dataset):\r\n    def __init__(self, size, length):\r\n        self.len = length\r\n        self.data = torch.randn(length, size)\r\n\r\n    def __getitem__(self, index):\r\n        return self.data[index]\r\n\r\n    def __len__(self):\r\n        return self.len\r\n\r\n\r\nclass BoringModel(LightningModule):\r\n    def __init__(self):\r\n        super().__init__()\r\n        self.layer = torch.nn.Linear(32, 2)\r\n\r\n        latent_dim=2\r\n        self.prior = MultivariateNormal(\r\n\t\t\ttorch.zeros(latent_dim), \r\n\t\t\tscale_tril=torch.diag(torch.ones(latent_dim)))\r\n\r\n    def forward(self, x):\r\n        assert self.prior.loc.device == x.device, \"incorrect device\"\r\n        return self.layer(x)\r\n\r\n    def training_step(self, batch, batch_idx):\r\n        loss = self(batch).sum()\r\n        self.log(\"train_loss\", loss)\r\n        return {\"loss\": loss}\r\n\r\n    def validation_step(self, batch, batch_idx):\r\n        loss = self(batch).sum()\r\n        self.log(\"valid_loss\", loss)\r\n\r\n    def test_step(self, batch, batch_idx):\r\n        loss = self(batch).sum()\r\n        self.log(\"test_loss\", loss)\r\n\r\n    def configure_optimizers(self):\r\n        return torch.optim.SGD(self.layer.parameters(), lr=0.1)\r\n\r\n\r\ndef run():\r\n    train_data = DataLoader(RandomDataset(32, 64), batch_size=2)\r\n    val_data = DataLoader(RandomDataset(32, 64), batch_size=2)\r\n    test_data = DataLoader(RandomDataset(32, 64), batch_size=2)\r\n\r\n    model = BoringModel()\r\n    trainer = Trainer(\r\n        gpus=1,\r\n        default_root_dir=os.getcwd(),\r\n        limit_train_batches=1,\r\n        limit_val_batches=1,\r\n        limit_test_batches=1,\r\n        num_sanity_val_steps=0,\r\n        max_epochs=1,\r\n        enable_model_summary=False,\r\n    )\r\n    trainer.fit(model, train_dataloaders=train_data, val_dataloaders=val_data)\r\n    trainer.test(model, dataloaders=test_data)\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    run()\r\n```\r\n\r\n### Expected behavior\r\n\r\n<!-- FILL IN -->\r\n\r\n### Environment\r\n\r\n* CUDA:\r\n        - GPU:\r\n                - NVIDIA GeForce RTX 3090\r\n                - NVIDIA GeForce RTX 3090\r\n        - available:         True\r\n        - version:           11.1\r\n* Packages:\r\n        - numpy:             1.22.3\r\n        - pyTorch_debug:     False\r\n        - pyTorch_version:   1.9.1+cu111\r\n        - pytorch-lightning: 1.6.1\r\n        - tqdm:              4.64.0\r\n* System:\r\n        - OS:                Linux\r\n        - architecture:\r\n                - 64bit\r\n                - ELF\r\n        - processor:         x86_64\r\n        - python:            3.8.10\r\n        - version:           #121-Ubuntu SMP Thu Mar 24 16:04:27 UTC 2022",
    "comments_url": "https://api.github.com/repos/Lightning-AI/pytorch-lightning/issues/12943/comments",
    "author": "david-waterworth",
    "comments": [
      {
        "user": "rohitgr7",
        "created_at": "2022-05-02T18:59:20Z",
        "body": "anything that is not `nn.Module` or registered under buffer will not be moved to the device. Here the `LightningModule` follow the steps of `nn.Module` so even if you do this:\r\n```py\r\nclass BoringModel(nn.Module):  # <- using `nn.Module` here\r\n    def __init__(self):\r\n        super().__init__()\r\n        self.layer = torch.nn.Linear(32, 2)\r\n\r\n        latent_dim=2\r\n        self.prior = MultivariateNormal(\r\n\t\t\ttorch.zeros(latent_dim), \r\n\t\t\tscale_tril=torch.diag(torch.ones(latent_dim)))\r\n\r\nmodel = BoringModel()\r\nmodel.cuda()\r\n```\r\n`model.prior` will stay on the CPU.\r\n\r\nI'd suggest doing\r\n```py\r\nclass LitModel(LightningModule):\r\n    def on_fit_start(self):\r\n        self.prior = MultivariateNormal(\r\n            torch.zeros(latent_dim, device=self.device), \r\n            scale_tril=torch.diag(torch.ones(latent_dim, device=self.device))\r\n        )\r\n\r\n```\r\n"
      },
      {
        "user": "rohitgr7",
        "created_at": "2022-05-03T09:14:05Z",
        "body": "then you need to define it under `on_test_start/on_validation_start` as well. To make sure they are saved in the checkpoint, maybe try registering them as a buffer so that they are moved to the correct devices as well as saved to the checkpoint."
      }
    ]
  },
  {
    "number": 8559,
    "title": "Wandblogger not logging train loss after every step",
    "created_at": "2021-07-26T13:30:21Z",
    "closed_at": "2021-07-26T14:30:23Z",
    "labels": [
      "help wanted",
      "question",
      "logger"
    ],
    "url": "https://github.com/Lightning-AI/pytorch-lightning/issues/8559",
    "body": "## \ud83d\udc1b Bug\r\n\r\nI am using wandb with Pytorch Lightning. I am logging train/loss, val/loss, train/metric, val/metric. Everything is logged properly to wandb dashboard except the **train/loss** (after every step).\r\n\r\nHere's the main lightning module:\r\n\r\n`class ImageClassification(pl.LightningModule):\r\n    def __init__(self, model):\r\n        super().__init__()\r\n        self.model = model\r\n        self.criterion = nn.BCEWithLogitsLoss()\r\n        self.lr = CFG['lr']\r\n    \r\n    def forward(self, x):\r\n        output = self.model(x)\r\n        return output\r\n    \r\n    def configure_optimizers(self):\r\n        self.optimizer = torch.optim.AdamW(self.model.parameters(), lr=CFG['lr'])\r\n        return self.optimizer\r\n    \r\n    def training_step(self, batch, batch_idx):\r\n        images, targets = batch['image'], batch['target']\r\n        output = self.model(images)\r\n        loss = self.criterion(output.view(-1), targets)\r\n        \r\n        self.log('train/loss', loss, logger=True)  # the thing that is not being logged\r\n\r\n        try:\r\n            auc = roc_auc_score(targets.detach().cpu(), output.sigmoid().detach().cpu())\r\n            self.log(\"train/auc\", auc, prog_bar=True, logger=True)\r\n        except:\r\n            pass\r\n        \r\n        return {\r\n            \"loss\": loss,\r\n            \"predictions\": output,\r\n            \"targets\" : targets\r\n        }\r\n    \r\n    def training_epoch_end(self, outputs):\r\n\r\n        preds = []\r\n        targets = []\r\n\r\n        for output in outputs:\r\n            preds += output['predictions']\r\n            targets += output['targets']\r\n        \r\n        targets = torch.stack(targets)\r\n        preds = torch.stack(preds)\r\n\r\n        train_auc = roc_auc_score(targets.detach().cpu(), preds.sigmoid().detach().cpu())\r\n        self.log(\"train/auc_epoch\", train_auc,logger=True)\r\n    \r\n    def validation_step(self, batch, batch_idx):\r\n        images, targets = batch['image'], batch['target']\r\n        output = self.model(images)\r\n        loss = self.criterion(output.view(-1), targets)\r\n\r\n        self.log('val/loss', loss,prog_bar=True, logger=True)\r\n\r\n        return {\r\n            \"predictions\": output,\r\n            \"targets\": targets\r\n        }\r\n    \r\n    def validation_epoch_end(self, outputs):\r\n\r\n        preds = []\r\n        targets = []\r\n\r\n        for output in outputs:\r\n            preds += output['predictions']\r\n            targets += output['targets']\r\n        \r\n        targets = torch.stack(targets)\r\n        preds = torch.stack(preds)\r\n    \r\n        val_auc = roc_auc_score(targets.detach().cpu(), preds.sigmoid().detach().cpu())\r\n        self.log(\"val/auc_epoch\", val_auc,prog_bar=True,logger=True)\r\n    \r\n    def test_step(self, batch, batch_idx):\r\n        images = batch['image']\r\n        output = self.model(images)\r\n        return output`",
    "comments_url": "https://api.github.com/repos/Lightning-AI/pytorch-lightning/issues/8559/comments",
    "author": "Gladiator07",
    "comments": [
      {
        "user": "awaelchli",
        "created_at": "2021-07-26T13:41:38Z",
        "body": "is the logging interval small enough? I.e., `Trainer(log_every_n_step=n)` where n must be smaller than `len(dataloader)`. "
      },
      {
        "user": "awaelchli",
        "created_at": "2021-07-26T14:23:47Z",
        "body": "```python\r\ntry:\r\n        auc = roc_auc_score(targets.detach().cpu(), output.sigmoid().detach().cpu())\r\n        self.log(\"train/auc\", auc, prog_bar=True, logger=True)\r\n    except:\r\n        pass\r\n```\r\n\r\nIf an exception raises here, it will be silently ignored and nothing gets logged. Please try to remove the try-except block here and see if it raises an exception."
      }
    ]
  },
  {
    "number": 7775,
    "title": "training_epoch_end called before all steps of epoch were completed. always at about 0.25 size of steps.",
    "created_at": "2021-05-31T07:10:17Z",
    "closed_at": "2021-06-01T09:40:40Z",
    "labels": [
      "help wanted",
      "question",
      "working as intended"
    ],
    "url": "https://github.com/Lightning-AI/pytorch-lightning/issues/7775",
    "body": "## \ud83d\udc1b Bug\r\n\r\n```bash\r\nGPU available: False, used: False\r\nTPU available: None, using: 0 TPU cores\r\nValidation sanity check:   0%|          | 0/2 [00:00<?, ?it/s]\r\n  | Name                | Type                 | Params\r\n-------------------------------------------------------------\r\n\r\n-------------------------------------------------------------\r\n\r\nEpoch 0:   0%|          | 0/13 [00:00<?, ?it/s] \r\nEpoch 0:  23%|\u2588\u2588\u258e       | 3/13 [01:38<05:27, 32.75s/it, loss=4.73, v_num=7]\r\n// training_epoch_end:  outputs = [{'loss': tensor(6.4593)}, {'loss': tensor(5.7653)}, {'loss': tensor(1.9642)}]\r\n\r\nValidating: 0it [00:00, ?it/s]\r\nValidating:   0%|          | 0/10 [00:00<?, ?it/s]\r\nEpoch 0:  38%|\u2588\u2588\u2588\u258a      | 5/13 [01:48<02:54, 21.78s/it, loss=4.73, v_num=7]\r\nEpoch 0:  46%|\u2588\u2588\u2588\u2588\u258c     | 6/13 [01:59<02:19, 19.91s/it, loss=4.73, v_num=7]\r\nEpoch 0:  54%|\u2588\u2588\u2588\u2588\u2588\u258d    | 7/13 [02:10<01:51, 18.58s/it, loss=4.73, v_num=7]\r\nEpoch 0:  62%|\u2588\u2588\u2588\u2588\u2588\u2588\u258f   | 8/13 [02:20<01:27, 17.60s/it, loss=4.73, v_num=7]\r\nEpoch 0:  69%|\u2588\u2588\u2588\u2588\u2588\u2588\u2589   | 9/13 [02:31<01:07, 16.83s/it, loss=4.73, v_num=7]\r\nEpoch 0:  77%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258b  | 10/13 [02:42<00:48, 16.21s/it, loss=4.73, v_num=7]\r\nEpoch 0:  85%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258d | 11/13 [02:52<00:31, 15.71s/it, loss=4.73, v_num=7]\r\nEpoch 0:  92%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258f| 12/13 [03:04<00:15, 15.34s/it, loss=4.73, v_num=7]\r\nEpoch 0: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 13/13 [03:15<00:00, 15.00s/it, loss=4.73, v_num=7]\r\nEpoch 0: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 13/13 [03:16<00:00, 15.15s/it, loss=4.73, v_num=7]\r\nEpoch 1:  23%|\u2588\u2588\u258e       | 3/13 [01:42<05:42, 34.24s/it, loss=3.39, v_num=7]\r\n// training_epoch_end:  outputs = [{'loss': tensor(2.6766)}, {'loss': tensor(2.3010)}, {'loss': tensor(1.1722)}]\r\nEpoch 1:  31%|\u2588\u2588\u2588       | 4/13 [01:48<04:04, 27.22s/it, loss=3.39, v_num=7]\r\nValidating: 0it [00:00, ?it/s]\r\nEpoch 1:  38%|\u2588\u2588\u2588\u258a      | 5/13 [02:02<03:15, 24.42s/it, loss=3.39, v_num=7]\r\nCompleted 6.8 MiB/327.9 MiB (48.7 KiB/s) with 2 file(s) remaining\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nEpoch 1: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 13/13 [03:48<00:00, 17.54s/it, loss=3.39, v_num=7]\r\nEpoch 2:  23%|\u2588\u2588\u258e       | 3/13 [01:44<05:47, 34.72s/it, loss=2.72, v_num=7]\r\nNUM EL TRAINING: 3   [{'loss': tensor(1.2504)}, {'loss': tensor(1.4905)}, {'loss': tensor(1.4158)}]\r\nEpoch 2:  31%|\u2588\u2588\u2588       | 4/13 [01:49<04:07, 27.48s/it, loss=2.72, v_num=7]\r\nValidating: 0it [00:00, ?it/s]\r\nEpoch 2: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 13/13 [03:50<00:00, 17.75s/it, loss=2.72, v_num=7]\r\nEpoch 3:  23%|\u2588\u2588\u258e       | 3/13 [01:43<05:46, 34.62s/it, loss=2.27, v_num=7]\r\n//training_epoch_end:   outputs = [{'loss': tensor(0.6632)}, {'loss': tensor(0.9215)}, {'loss': tensor(1.1396)}]\r\nEpoch 3:  31%|\u2588\u2588\u2588       | 4/13 [01:49<04:06, 27.41s/it, loss=2.27, v_num=7]\r\nValidating: 0it [00:00, ?it/s]\r\n```\r\n\r\n\r\n - PyTorch Version (e.g., 1.0):\r\n - OS (e.g., Linux): mac Catalina (this happens on all environments , linux etc)\r\n - How you installed PyTorch (`conda`, `pip`, source): pip\r\n - Build command you used (if compiling from source):\r\n - Python version: 3.7\r\n - CUDA/cuDNN version:\r\n - GPU models and configuration: happens also with 0 gpus.\r\n - Any other relevant information:\r\n",
    "comments_url": "https://api.github.com/repos/Lightning-AI/pytorch-lightning/issues/7775/comments",
    "author": "ganitps",
    "comments": [
      {
        "user": "awaelchli",
        "created_at": "2021-05-31T11:47:30Z",
        "body": "As of now, `training_epoch_end` runs before validation starts (validation runs outside the training epoch). The progress bar just shows the combined training + validation steps. So this is fine and you get all the steps for the training epoch.\r\n\r\nAfter #7357, `training_epoch_end` will run after the last validation loop each epoch. \r\nHope this clears it up :) "
      },
      {
        "user": "ganitps",
        "created_at": "2021-05-31T12:44:23Z",
        "body": "Thanks @awaelchli  for your reply\r\nThis is not what I understood form the documentation:\r\n\r\n// the pseudocode for these calls\r\n```\r\ntrain_outs = []\r\nfor train_batch in train_data:\r\n        out = training_step(train_batch)\r\n        train_outs.append(out)\r\ntraining_epoch_end(train_outs)\r\n\r\n```\r\n\r\nSo If I want to take actions when epoch ends I must do it in the last training step? (training_step_end())\r\nCan I take the latest version After #7357?"
      },
      {
        "user": "awaelchli",
        "created_at": "2021-05-31T13:53:00Z",
        "body": "No this is still all good. The pseudo code is correct, all outputs from training_step get passed into training_epoch_end. You get as many outputs as training steps. In your case, there seems to be three training steps, so you get 3 outputs, correct? And that's when the training epoch ends and the validation starts. "
      },
      {
        "user": "ganitps",
        "created_at": "2021-05-31T14:29:49Z",
        "body": "No... I have 13 steps.\r\ntraining_epoch_end called after the third one... with 3 outputs..."
      },
      {
        "user": "awaelchli",
        "created_at": "2021-05-31T14:38:36Z",
        "body": "> No... I have 13 steps.\r\n\r\nHow do you know?\r\nHave you printed `len(dataloader)`? Have you set `limit_train_batches=13`?\r\nFrom the output you shared it just looks like you have 3 training steps and 10 validation steps. \r\n\r\nMaybe I can help better if you try to explain what you want to achieve. "
      }
    ]
  },
  {
    "number": 6104,
    "title": "Early stopping on custom metric without validation_step",
    "created_at": "2021-02-20T16:19:44Z",
    "closed_at": "2021-02-23T18:18:41Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/Lightning-AI/pytorch-lightning/issues/6104",
    "body": "#### What is your question?\r\n\r\nI have a metric that I can only define using every predictions on the validation split, so I cannot use `validation_step` since it only operates on batches of data.\r\nI have a callback that computes and log this metric in `on_train_epoch_end`. \r\nI am not executing the validation loop because it's useless in my case.\r\nMy question is: How can I properly use the EarlyStopping callback ? (Same question for ModelCheckpoint)\r\n\r\n#### What have you tried?\r\nI have tried manually calling `pl_module.on_validation_epoch_end()` in my callback but it doesn't seem to work because EarlyStopping never stops the model even though the patience should have dropped to 0.\r\n\r\n#### What's your environment?\r\n\r\n - OS: Kubuntu 20.04\r\n - Packaging: pip\r\n - Version: 1.1.4\r\n",
    "comments_url": "https://api.github.com/repos/Lightning-AI/pytorch-lightning/issues/6104/comments",
    "author": "Inspirateur",
    "comments": [
      {
        "user": "carmocca",
        "created_at": "2021-02-21T00:37:08Z",
        "body": "If I understood you correctly, you just need to make sure to create your instance as:\r\n\r\n`EarlyStopping(monitor=\"your_metric\")`\r\n\r\nAnd then, in your LightningModule's `on_validation_epoch_end` do `self.log(\"your_metric\", value)`"
      },
      {
        "user": "Inspirateur",
        "created_at": "2021-02-23T18:18:41Z",
        "body": "Seems like that works, thank you.\r\nI just had to define an empty `validation_step` method in my lightning module so the fake validation would be quick."
      }
    ]
  },
  {
    "number": 5705,
    "title": "Why do some metrics require `num_classes=1` for binary classification?",
    "created_at": "2021-01-29T13:16:35Z",
    "closed_at": "2021-02-04T23:34:33Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/Lightning-AI/pytorch-lightning/issues/5705",
    "body": "## \u2753 Why do some metrics require `num_classes=1` for binary classification?\r\n\r\n#### What is your question?\r\n\r\nWhy do some metrics require the argument `num_classes=1` for binary classification (and some don't) to give the correct results?\r\n\r\nI find it rather unintuitively to calculate Recall/Precision/F1 with the argument `num_classes=1` for a binary classification, whereas e.g. ConfusionMatrix requires `num_classes=2` in the same situation.\r\n\r\nFurthermore, using Recall/Precision/F1 with `num_classes=2` for a binary classification gives wrong results - so this also might be considered a bug-report.\r\n\r\nIt took me quite some time to figure out, why calculated metrics are different from what I calculated by hand from the confusion matrix.\r\n\r\n#### Code\r\n\r\n```python\r\nimport torch\r\nfrom pytorch_lightning import metrics\r\n\r\n# example data\r\npreds = [0] * 200 + [1] * 30 + [0] * 10 + [1] * 20\r\ntargets = [0] * 200 + [1] * 30 + [1] * 10 + [0] * 20\r\n\r\npreds = torch.tensor(preds)\r\ntargets = torch.tensor(targets)\r\n\r\n# define method for printing metrics\r\n\r\n\r\ndef _print_some_metrics(preds, targets, num_classes):\r\n    precision = metrics.classification.Precision(num_classes=num_classes)\r\n    recall = metrics.classification.Recall(num_classes=num_classes)\r\n    f1 = metrics.classification.F1(num_classes=num_classes)\r\n\r\n    accuracy = metrics.classification.Accuracy()\r\n    avg_precision = metrics.classification.AveragePrecision(\r\n        num_classes=1)\r\n    confusion_matrix = metrics.ConfusionMatrix(num_classes=2)\r\n\r\n    # print results\r\n    print(\"Precision:\\n{}\\n\".format(precision(preds, targets)))\r\n    print(\"Recall:\\n{}\\n\".format(recall(preds, targets)))\r\n    print(\"F1:\\n{}\\n\".format(f1(preds, targets)))\r\n\r\n    print(\"AVG Precision:\\n{}\\n\".format(avg_precision(preds, targets)))\r\n    print(\"Accuracy:\\n{}\\n\".format(accuracy(preds, targets)))\r\n    print(\"ConfMat:\\n{}\\n\".format(confusion_matrix(preds, targets)))\r\n\r\n\r\n_print_some_metrics(preds, targets, num_classes=1)\r\n_print_some_metrics(preds, targets, num_classes=2)\r\n```\r\n\r\nResults in\r\n\r\n> $ _print_some_metrics(preds, targets, num_classes=1)\r\n> Precision:\r\n> 0.6000000238418579\r\n> \r\n> Recall:\r\n> 0.75\r\n> \r\n> F1:\r\n> 0.6666666865348816\r\n> \r\n> AVG Precision:\r\n> 0.48846155405044556\r\n> \r\n> Accuracy:\r\n> 0.8846153616905212\r\n> \r\n> ConfMat:\r\n> tensor([[200.,  20.],\r\n>         [ 10.,  30.]])\r\n> \r\n> \r\n> $ _print_some_metrics(preds, targets, num_classes=2)\r\n> Precision:\r\n> 0.8846153616905212\r\n> \r\n> Recall:\r\n> 0.8846153616905212\r\n> \r\n> F1:\r\n> 0.8846153616905212\r\n> \r\n> AVG Precision:\r\n> 0.48846155405044556\r\n> \r\n> Accuracy:\r\n> 0.8846153616905212\r\n> \r\n> ConfMat:\r\n> tensor([[200.,  20.],\r\n>         [ 10.,  30.]])\r\n\r\nAs one can see, Precision/Recall/F1 give different (wrong) results when setting `num_classes=2` in a binary classification.\r\nAveragePrecision doesn't even work with the binary usecase when setting `num_classes=2` whereas ConfusionMatrix doesn't work when setting `num_classes=1`.\r\n\r\nI wonder if there is a specific reason why one would set `num_classes=1` in a binary classification (where actually 2 classes exist).\r\n\r\nWouldn't it be more straightforward to set `num_classes=2` for binary classification for all metrics?\r\n",
    "comments_url": "https://api.github.com/repos/Lightning-AI/pytorch-lightning/issues/5705/comments",
    "author": "kapsner",
    "comments": [
      {
        "user": "SkafteNicki",
        "created_at": "2021-01-30T18:18:55Z",
        "body": "So I can try to clarify this a bit:\r\n* we are aware of this, and many of these metrics have already been changed on the `release/1.2-dev` branch. For example will your example with `precision = metrics.classification.Precision(num_classes=2)` give an error because input tensors are clearly binary but the class was initialized with `num_classes=2`.\r\n* confusion matrix needs `num_classes=2` for binary problems, because we to know the size of the tensor that we should allocate \r\n* the difference between specifying `num_classes=1` or `num_classes=2` really comes down to if you want to calculate the score on only the positive class (this is probably what you want) or both classes (which really does not make sense for binary problems, because many of the scores reduce to the same then).\r\n"
      },
      {
        "user": "SkafteNicki",
        "created_at": "2021-02-01T13:33:42Z",
        "body": "so the usecase could be that the user wants set `average=None` to get the score for each class. Again in that case we kind of need to now the size of the tensor that we should allocate (the metric states)."
      }
    ]
  },
  {
    "number": 5636,
    "title": "Understanding accumulate_grad_batches  parameter? ",
    "created_at": "2021-01-24T10:10:44Z",
    "closed_at": "2021-01-24T18:19:21Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/Lightning-AI/pytorch-lightning/issues/5636",
    "body": "I am very new to PL. As far as I understand **accumulate_grad_batches** works similar to  **'gradient_accumulation_steps'** , where the main task is to increase the effective batch size.  But I do not see any change in training epoch step count when increasing the  **accumulate_grad_batches** parameters.\r\n\r\nLet's say, I have a dataset of 1000 examples and my batch_size is one and I only use a single GPU. So in this case, if I use the value 2  for the **accumulate_grad_batches**,  the number of steps for an epoch should be shown as 500 (logger). But I still see 1000.\r\n\r\nIs it a bug or PL doesn't divide the number of steps when showing in the log?",
    "comments_url": "https://api.github.com/repos/Lightning-AI/pytorch-lightning/issues/5636/comments",
    "author": "shamanez",
    "comments": [
      {
        "user": "rohitgr7",
        "created_at": "2021-01-24T13:16:39Z",
        "body": "total step count will remain the same since it refers to total batches, but internally `optimizer/scheduler.step` is updated accordingly. You can check `self.global_step` with and without accumulation."
      }
    ]
  },
  {
    "number": 5552,
    "title": "How to iterate over training set AGAIN on training epoch end?",
    "created_at": "2021-01-18T07:57:20Z",
    "closed_at": "2021-01-19T11:09:43Z",
    "labels": [
      "question",
      "waiting on author"
    ],
    "url": "https://github.com/Lightning-AI/pytorch-lightning/issues/5552",
    "body": "## \u2753 Questions and Help\r\n\r\n<!-- If you still can't find what you need: -->\r\n\r\n#### What is your question?\r\n\r\nHow to iterate over training set AGAIN on training epoch end or on validation epoch start?\r\nI have a model that works as expected on MNIST, but for my unique data, val_loss<train_loss for all samples.\r\nI have no idea what causes this, and it is too suspicious to allow me to go on.\r\n\r\n*I want to do a validation step on training data, in eval mode*\r\n\r\nI hope it will ease my mind.\r\n\r\n#### Code\r\nWell, if I had code for how to correctly do this I wouldn't ask :)\r\n\r\n#### What have you tried?\r\nThis doesn't sound like a standard use case, not even sure that's supported.\r\n\r\n#### What's your environment?\r\n\r\n - OS: [e.g. iOS, Linux, Win] Win\r\n - Packaging [e.g. pip, conda] Pip\r\n - Version [e.g. 0.5.2.1] 1.1.4\r\n",
    "comments_url": "https://api.github.com/repos/Lightning-AI/pytorch-lightning/issues/5552/comments",
    "author": "noamzilo",
    "comments": [
      {
        "user": "tchaton",
        "created_at": "2021-01-18T08:33:00Z",
        "body": "Hey @noamzilo,\r\n\r\nIf you have a `val_dataloader`, the entire dataset of validation will be used once the latest batch of your train_dataset would be reached.\r\n\r\nTherefore, you can compare your metrics at this point in epoch_end hooks.\r\n\r\nBest,\r\nT.C"
      },
      {
        "user": "awaelchli",
        "created_at": "2021-01-18T08:37:18Z",
        "body": "It is not an accident that PyTorch is in the name of PyTorchLightning :)) \r\nYou can just do it as you would in PyTorch:\r\n\r\n```python\r\nself.eval()\r\nfor idx, batch in enumerate(self.train_dataloader()):\r\n    # do what you have to do\r\n```\r\n\r\n"
      }
    ]
  },
  {
    "number": 5550,
    "title": "on_train_epoch_end vs training_epoch_end",
    "created_at": "2021-01-17T21:37:32Z",
    "closed_at": "2021-01-18T16:55:52Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/Lightning-AI/pytorch-lightning/issues/5550",
    "body": "## \u2753 Questions and Help\r\n\r\nWhat is the difference between on_train_epoch_end and training_epoch_end? For what applications should we use each?\r\n\r\n\r\n",
    "comments_url": "https://api.github.com/repos/Lightning-AI/pytorch-lightning/issues/5550/comments",
    "author": "Bajo1994",
    "comments": [
      {
        "user": "tchaton",
        "created_at": "2021-01-18T08:45:53Z",
        "body": "Hey @Bajo1994,\r\n\r\n* `training_epoch_end` will be used for the user to aggregate the outputs from training_step at the end of an epoch.\r\n\r\nExample.\r\n```\r\n    def training_step(self, batch, batch_idx):\r\n        output = self.layer(batch)\r\n        loss = self.loss(batch, output)\r\n        return {\"loss\": loss}\r\n\r\n    def training_step_end(self, training_step_outputs):\r\n        return training_step_outputs\r\n\r\n    def training_epoch_end(self, outputs) -> None:\r\n        torch.stack([x[\"loss\"] for x in outputs]).mean()\r\n```\r\n\r\n* on_train_epoch_end is a hook. It would be used to add extra logic to control the behaviour of the model.\r\nBut it is left to the user to choice how he wants to use it :)\r\n\r\nI hope it helps !\r\n\r\nBest,\r\nT.C \r\n\r\n"
      }
    ]
  },
  {
    "number": 5454,
    "title": "Validation step is ignored when using DataModule",
    "created_at": "2021-01-11T00:49:13Z",
    "closed_at": "2021-01-12T01:34:15Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/Lightning-AI/pytorch-lightning/issues/5454",
    "body": "#### What is your question?\r\nHi, guys!\r\nI created my own DataModule and loading it to the trainer. However, it appears that the \"fit\" is skipping the validation step.\r\nHow can I ensure that the code runs through the validation step too?\r\n\r\n#### Code\r\n```\r\nclass DataModule(pl.LightningDataModule):\r\n    def __init__(self, batch_size=25, seed=0):\r\n    # def __init__(self, dataset, batch_size=25, seed=0):\r\n        super().__init__()\r\n        self.dataset = dataset\r\n        self.batch_size = batch_size\r\n        self.seed = seed\r\n        self.split = [801, 100, 100]\r\n        # self.transform = torchvision.transforms.ToTensor()\r\n\r\n    def setup(self, stage=None):\r\n        # train/valid/test split\r\n        # and assign to use in dataloaders via self\r\n        train_set, valid_set, test_set = torch.utils.data.random_split(self.dataset, self.split, generator=torch.Generator().manual_seed(self.seed))\r\n\r\n        if stage == 'fit' or stage is None:\r\n\r\n            self.train_set = train_set\r\n            self.valid_set = valid_set\r\n\r\n        if stage == 'test' or stage is None:\r\n            self.test_set = test_set\r\n\r\n    def train_dataloader(self):\r\n        return torch.utils.data.DataLoader(self.train_set, batch_size=self.batch_size, shuffle=True)\r\n\r\n    def valid_dataloader(self):\r\n        return torch.utils.data.DataLoader(self.valid_set, batch_size=self.batch_size, shuffle=False)\r\n\r\n    def test_dataloader(self):\r\n        return torch.utils.data.DataLoader(self.test_set, batch_size=self.batch_size, shuffle=False)\r\n\r\nclass LitReg(pl.LightningModule):\r\n    def __init__(self, in_dims, out_dims, lr=2e-4, max_dict={}):\r\n        super().__init__()\r\n        self.in_size = in_dims\r\n        self.out_size = out_dims\r\n        self.lr = lr\r\n        self.max_dict = max_dict\r\n\r\n        # model\r\n        self.model = nn.Sequential(\r\n            nn.Linear(self.in_size, self.in_size),\r\n\r\n            nn.LeakyReLU(0.02),\r\n\r\n            nn.Linear(self.in_size, self.out_size)\r\n        )\r\n\r\n        self.model.apply(self.weights_init)\r\n\r\n    def forward(self, data):\r\n        out = self.model(data)\r\n        return out\r\n\r\n    def training_step(self, batch, batch_idx):\r\n        x, y, l_rate = batch\r\n        pred_y = self.model(x)\r\n        train_loss = F.mse_loss(pred_y, y) \r\n\r\n        self.log('train_loss', train_loss, prog_bar=True)\r\n        return train_loss\r\n\r\n    def validation_step(self, batch, batch_idx):\r\n        self._shared_eval(batch, batch_idx, 'val')\r\n\r\n    def test_step(self, batch, batch_idx):\r\n        self._shared_eval(batch, batch_idx, 'test')\r\n\r\n    def _shared_eval(self, batch, batch_idx, prefix):\r\n        x, y, l_rate = batch\r\n        pred_y = self.model(x)\r\n\r\n        loss = F.mse_loss(pred_y, y) \r\n        self.log(f'{prefix}_loss', loss, prog_bar=True)\r\n        return loss\r\n\r\n    def configure_optimizers(self):\r\n        optimizer = torch.optim.Adam(self.parameters(), self.lr)\r\n        return optimizer\r\n\r\n    def weights_init(self, m):\r\n        if isinstance(m, nn.Conv2d) or isinstance(m, nn.ConvTranspose2d):\r\n            torch.nn.init.normal_(m.weight, 0.0, 0.02)\r\n        if isinstance(m, nn.BatchNorm2d) or isinstance(m, nn.BatchNorm1d):\r\n            torch.nn.init.normal_(m.weight, 0.0, 0.02)\r\n            torch.nn.init.constant_(m.bias, 0)\r\n        if isinstance(m, nn.Linear):\r\n            torch.nn.init.normal_(m.weight, 0.0, 0.02)\r\n            torch.nn.init.constant_(m.bias, 0)\r\n```\r\n#### What have you tried?\r\nPlacing breakpoints to debug in VSCode, but all in vain.\r\nAlso accessed both valid and test datasets and loaders. All looks set.\r\nWhat is working? If I load the data the following way.\r\n```\r\n    **train_loader = DataLoader(X_train, batch_size=args.batch_size)\r\n    val_loader = DataLoader(X_val, batch_size=args.batch_size)\r\n    test_loader = DataLoader(X_test, batch_size=args.batch_size)\r\n\r\n    trainer.fit(model, train_loader, val_loader)**\r\n```\r\n\r\n#### What's your environment?\r\n\r\n - OS: Win\r\n - Packaging pip\r\n - Version 1.1.3\r\n\r\nThank you for your attention!",
    "comments_url": "https://api.github.com/repos/Lightning-AI/pytorch-lightning/issues/5454/comments",
    "author": "ncuxomun",
    "comments": [
      {
        "user": "s-rog",
        "created_at": "2021-01-11T03:35:03Z",
        "body": "```\r\n    def validation_step(self, batch, batch_idx):\r\n        return self._shared_eval(batch, batch_idx, 'val')\r\n```\r\nYou forgot return!"
      },
      {
        "user": "ncuxomun",
        "created_at": "2021-01-11T17:20:23Z",
        "body": "> ```\r\n>     def validation_step(self, batch, batch_idx):\r\n>         return self._shared_eval(batch, batch_idx, 'val')\r\n> ```\r\n> \r\n> You forgot return!\r\n\r\nThanks for the remark! I corrected the mistake. But I still get the same output, i.e. the validation step is skipped. Is there anything else that I am missing?"
      },
      {
        "user": "ncuxomun",
        "created_at": "2021-01-12T00:33:25Z",
        "body": "Thanks for re-opening it. I was looking your your earlier comment))\r\nYes, it is connected via the shared function here. I also tried without it, that is enabling both val and test function, and disabling the the shared one.\r\nNo, the script does not not run with the validation progress bar. It displays \"loss\" and \"train_loss\" only. Another observation is that what I did include \"return\" and \"fit by trainer.fit(model, datamodule=dm), the training took more epochs, ignoring the early stopping callback (which is honored when I don't work with datamodule)."
      },
      {
        "user": "s-rog",
        "created_at": "2021-01-12T00:45:23Z",
        "body": "Could you try initializing the dataset in datamodules setup instead of passing it in as an arg?\r\n\r\nAlso could you check the length of the datasets before and after splitting? I suspect validation is not getting any data."
      },
      {
        "user": "ncuxomun",
        "created_at": "2021-01-12T01:20:05Z",
        "body": "Cool, thanks for suggestions. Here's what I did:\r\n1. Dataset was moved into prepare_data, where it was initialized.\r\n2. Then I placed a breakpoint into the dataset to check its dimensions. This prompted the following warning, which I did not see before: \r\n_\"UserWarning: you defined a validation_step but have no val_dataloader. Skipping validation loop warnings.warn(*args, *kwargs)_\"\r\n3. Then, I renamed \"_valid_dataloader_\" into \"**val_dataloader**\", re-ran then case and all progress bar values were displayed as required. \r\nIt was my bad, I should have called that function precisely as the said in the docs. One thing that is surprising is that this \"skipping\" part was not a big deal when I was loading the train_dataloader and val_dataloader individually instead of datamodule. Do you know what could be the issue?\r\nPlease feel free to close the issue if you think so.\r\nOnce again, thanks a lot for responding and giving suggestions that helped resolve the issue."
      }
    ]
  },
  {
    "number": 5129,
    "title": "How to forbid save optimizer's state \uff1f",
    "created_at": "2020-12-14T15:12:33Z",
    "closed_at": "2020-12-15T02:59:44Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/Lightning-AI/pytorch-lightning/issues/5129",
    "body": "Sometime's it's time-consuming.",
    "comments_url": "https://api.github.com/repos/Lightning-AI/pytorch-lightning/issues/5129/comments",
    "author": "Maybewuss",
    "comments": [
      {
        "user": "DuinoDu",
        "created_at": "2020-12-14T15:47:55Z",
        "body": "Set `save_weights_only=True` in ModelCheckpoint."
      }
    ]
  },
  {
    "number": 4947,
    "title": "How to log more than one metrics in logger?",
    "created_at": "2020-12-02T15:31:25Z",
    "closed_at": "2020-12-02T16:01:52Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/Lightning-AI/pytorch-lightning/issues/4947",
    "body": "I want to log two metircs.What should i do?\r\nself.log('my_loss', loss, on_step=True, on_epoch=True, prog_bar=True, logger=True) \r\nThis can only log one metrics.",
    "comments_url": "https://api.github.com/repos/Lightning-AI/pytorch-lightning/issues/4947/comments",
    "author": "zhhao1",
    "comments": [
      {
        "user": "ydcjeff",
        "created_at": "2020-12-02T15:33:51Z",
        "body": "@7zhanghao  You can just write another log.\r\n```py\r\n self.log('another_loss', loss, on_step=True, on_epoch=True, prog_bar=True, logger=True)\r\n```"
      },
      {
        "user": "zhutmost",
        "created_at": "2020-12-02T15:50:54Z",
        "body": "@7zhanghao You can use `self.log_dict`"
      }
    ]
  },
  {
    "number": 4940,
    "title": "typeError unexpected closure",
    "created_at": "2020-12-01T21:24:10Z",
    "closed_at": "2020-12-02T11:21:45Z",
    "labels": [
      "question",
      "waiting on author"
    ],
    "url": "https://github.com/Lightning-AI/pytorch-lightning/issues/4940",
    "body": "## \u2753 Questions and Help\r\n\r\nI am using pytorch 1.6 and pytorch lightning 1.0.8.\r\n\r\nBefore I upgrade my pytorch-lighing from 1.0.2 to 1.0.8, everything works fine, today I upgrade to 1.0.8 to try some new metrics, but got this error. \r\n\r\n    main()\r\n  File \"main.py\", line 68, in main\r\n    trainer.fit(model, trainloader, evalloader)\r\n  File \"/home/yikuan/anaconda/envs/py3/lib/python3.7/site-packages/pytorch_lightning/trainer/trainer.py\", line 444, in fit\r\n    results = self.accelerator_backend.train()\r\n  File \"/home/yikuan/anaconda/envs/py3/lib/python3.7/site-packages/pytorch_lightning/accelerators/gpu_accelerator.py\", line 63, in train\r\n    results = self.train_or_test()\r\n  File \"/home/yikuan/anaconda/envs/py3/lib/python3.7/site-packages/pytorch_lightning/accelerators/accelerator.py\", line 74, in train_or_test\r\n    results = self.trainer.train()\r\n  File \"/home/yikuan/anaconda/envs/py3/lib/python3.7/site-packages/pytorch_lightning/trainer/trainer.py\", line 493, in train\r\n    self.train_loop.run_training_epoch()\r\n  File \"/home/yikuan/anaconda/envs/py3/lib/python3.7/site-packages/pytorch_lightning/trainer/training_loop.py\", line 561, in run_training_epoch\r\n    batch_output = self.run_training_batch(batch, batch_idx, dataloader_idx)\r\n  File \"/home/yikuan/anaconda/envs/py3/lib/python3.7/site-packages/pytorch_lightning/trainer/training_loop.py\", line 728, in run_training_batch\r\n    self.optimizer_step(optimizer, opt_idx, batch_idx, train_step_and_backward_closure)\r\n  File \"/home/yikuan/anaconda/envs/py3/lib/python3.7/site-packages/pytorch_lightning/trainer/training_loop.py\", line 470, in optimizer_step\r\n    optimizer, batch_idx, opt_idx, train_step_and_backward_closure\r\n  File \"/home/yikuan/anaconda/envs/py3/lib/python3.7/site-packages/pytorch_lightning/accelerators/accelerator.py\", line 130, in optimizer_step\r\n    using_lbfgs=is_lbfgs\r\n  File \"/home/yikuan/anaconda/envs/py3/lib/python3.7/site-packages/pytorch_lightning/core/lightning.py\", line 1270, in optimizer_step\r\n    optimizer.step(closure=optimizer_closure)\r\n  File \"/home/yikuan/anaconda/envs/py3/lib/python3.7/site-packages/torch/optim/lr_scheduler.py\", line 67, in wrapper\r\n    return wrapped(*args, **kwargs)\r\n  File \"/home/yikuan/anaconda/envs/py3/lib/python3.7/site-packages/torch/autograd/grad_mode.py\", line 15, in decorate_context\r\n    return func(*args, **kwargs)\r\nTypeError: step() got an unexpected keyword argument 'closure'\r\n(py3) yikuan@deepmedicine:~/project/version_control/HiBEHRT-BYOL$ TypeError: step() got an unexpected keyword argument 'closure'",
    "comments_url": "https://api.github.com/repos/Lightning-AI/pytorch-lightning/issues/4940/comments",
    "author": "yikuanli",
    "comments": [
      {
        "user": "ananyahjha93",
        "created_at": "2020-12-02T08:48:19Z",
        "body": "Which optimizer and scheduler are you using? If you are using a custom optimizer, you need to update the code of the ```step()``` function to take in a closure. PyTorch optimizer class implements the step method with the closure parameter in the latest version."
      },
      {
        "user": "ananyahjha93",
        "created_at": "2020-12-02T11:19:44Z",
        "body": "Oh, if you were using the LARS wrapper form bolts, then the latest version has the step method taking in a closure. That should solve it.\r\n\r\nShould I close this issue then?"
      }
    ]
  },
  {
    "number": 4874,
    "title": "Metric Reset",
    "created_at": "2020-11-26T17:37:30Z",
    "closed_at": "2020-11-28T22:40:39Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/Lightning-AI/pytorch-lightning/issues/4874",
    "body": "How can I manually reset a metric? \r\nOr metric states are reset to default values after calling the `compute()` method?",
    "comments_url": "https://api.github.com/repos/Lightning-AI/pytorch-lightning/issues/4874/comments",
    "author": "celsofranssa",
    "comments": [
      {
        "user": "awaelchli",
        "created_at": "2020-11-27T06:12:39Z",
        "body": "`metric.compute()` resets the state. This is usually done after an epoch."
      }
    ]
  },
  {
    "number": 4711,
    "title": "How to monitor more than one quantity?",
    "created_at": "2020-11-17T12:41:15Z",
    "closed_at": "2020-11-18T00:18:14Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/Lightning-AI/pytorch-lightning/issues/4711",
    "body": "What i do if i want to monitor more than one quantity?",
    "comments_url": "https://api.github.com/repos/Lightning-AI/pytorch-lightning/issues/4711/comments",
    "author": "zhhao1",
    "comments": [
      {
        "user": "carmocca",
        "created_at": "2020-11-17T13:59:23Z",
        "body": "You can pass multiple `ModelCheckpoint` callbacks to the trainer callback list\r\n\r\n```python\r\nTrainer(callbacks=[ModelCheckpoint(monitor=\"a\"), ModelCheckpoint(monitor=\"b\")])\r\n```\r\n\r\nhowever, this is not fully supported and the saved checkpoints will contain the state for only one of the `ModelCheckpoint`s\r\n\r\nDuplicate of #2908"
      }
    ]
  },
  {
    "number": 4646,
    "title": "Loading samples to RAM with DDP.",
    "created_at": "2020-11-12T21:06:02Z",
    "closed_at": "2020-11-13T10:41:38Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/Lightning-AI/pytorch-lightning/issues/4646",
    "body": "## \u2753 Questions and Help\r\n\r\n#### What is your question?\r\n\r\nI'm facing an IO bottleneck that can be fixed with a custom `torch.utils.data.Dataset` that loads each sample to RAM. Then training goes fast as I don't need to read my samples (images) from disk (slow). Everything works well with when I'm using 1 GPU, but I'm a bit lost when I switch to multiple GPUs with DDP.\r\n\r\nDDP divides the samples to each GPU and I'm wondering when/where I should load my samples to RAM so that each process only loads its own partition of the samples?\r\n\r\n#### Code\r\n\r\n```\r\nclass RAMDataset(data.Dataset):\r\n    def __init__(self, paths,labels,transform):\r\n        \"\"\"Dataset that loads all samples to RAM.\"\"\"\r\n        self.paths = paths\r\n        self.labels = labels\r\n        self.transform = transform\r\n\r\n    def __len__(self):\r\n        return len(self.samples)\r\n\r\n    def load_to_RAM(self):\r\n        self.images = []\r\n        for path in self.paths:\r\n            with open(path, \"rb\") as f:\r\n                str_encode = f.read()\r\n                nparr = np.frombuffer(str_encode, np.uint8)\r\n                self.images.append(cv2.imdecode(nparr, cv2.IMREAD_COLOR))\r\n\r\n    def __getitem__(self, index):\r\n        # Run self.load_to_RAM() first!\r\n        image = self.transform(self.images[index])\r\n        label = self.labels[index]\r\n        return image, label\r\n```\r\n\r\n#### What have you tried?\r\n\r\nWith 1 GPU `self.load_to_RAM()` can be excecuted as soon as the Dataset has been created.\r\n\r\n```\r\ndataset = RAMDataset(paths,labels)\r\ndataset.load_to_RAM()\r\nloader = DataLoader(dataset,...)\r\ntrainer.fit(model,loader)\r\n```\r\n\r\nBut obviously this would load the samples `num_gpus` times to the RAM of the node.\r\n\r\nI quickly tried to call `self.train_dataloader.dataset.load_to_RAM()`on the hook `setup()` but got the following error...\r\n```\r\nAttributeError: '_PatchDataLoader' object has no attribute 'dataset'\r\n```\r\n..and I'm 99% this solution would also load all of the samples to RAM.\r\n\r\n#### Possible solution?\r\n\r\n1. Find out which process (which GPU and which node) is currently running.\r\n2. Get the allocated slice of the samples for this process.\r\n3. Load only that slice of the `self.paths` to RAM.\r\n\r\nTried to go through the source code but couldn't find out how I could implement this.\r\n",
    "comments_url": "https://api.github.com/repos/Lightning-AI/pytorch-lightning/issues/4646/comments",
    "author": "jopo666",
    "comments": [
      {
        "user": "s-rog",
        "created_at": "2020-11-13T00:27:32Z",
        "body": "The OS should automatically cache the dataset after the first epoch (assuming you have enough ram) so you shouldn't need to do this.\r\n\r\nI'm actually not sure if distributed sampler shards the same data/item on the same GPU through different epochs... but that's more of a pytorch question than a lightning one."
      },
      {
        "user": "jopo666",
        "created_at": "2020-11-13T07:55:29Z",
        "body": "I do have enough RAM if I manage to divide my data to multiple nodes. If the `BasicDataset()` below is cached after the first epoch wouldn't that mean only the labels and paths are cached? What I would want is that the loaded images are cached. I'll look into PyTorch and see if the same data/items are kept for each epoch.\r\n\r\n```\r\nclass BasicDataset(data.Dataset):\r\n    def __init__(self, paths,labels,transform):\r\n        self.paths = paths\r\n        self.labels = labels\r\n\r\n    def __getitem__(self, index):\r\n        image = load(self.paths[index]) # This is my bottleneck.\r\n        label = self.labels[index]\r\n        return image, label\r\n```"
      },
      {
        "user": "s-rog",
        "created_at": "2020-11-13T08:01:31Z",
        "body": "Ah you're doing cross node DDP, I was referring to single node above... I'm afraid I don't have much experience with multi node DDP.\r\n\r\nBut if each node gets the same subset of data every epoch, the OS should cache the files all the same (without needing `load_to_RAM`) after the first epoch since you have enough RAM."
      },
      {
        "user": "jopo666",
        "created_at": "2020-11-13T08:06:21Z",
        "body": "Would the actual loaded images be cached even though they are loaded inside `__getitem__()` and not just the whole `Dataset` object with only the `paths` to these files?"
      },
      {
        "user": "s-rog",
        "created_at": "2020-11-13T08:29:08Z",
        "body": "Yes, this is not stored in your program/script memory but instead it's simply file caching at the system level.\r\n\r\nI use Ubuntu but this should be the same for other linux ditros unless some memory/caching settings have been changed/limited. You can look at the cache part of your ram usage in htop as your data is loaded into memory during the first epoch."
      }
    ]
  },
  {
    "number": 4607,
    "title": "How to change the Datamodule during training with a callback?",
    "created_at": "2020-11-10T15:59:21Z",
    "closed_at": "2020-12-13T17:55:10Z",
    "labels": [
      "question",
      "won't fix",
      "data handling"
    ],
    "url": "https://github.com/Lightning-AI/pytorch-lightning/issues/4607",
    "body": "#### What is your question?\r\nHow to change the Datamodule during training with a callback?\r\nMore details:\r\nI am looking for a way to reinitialized my Datamodule with different parameter, I am currently sending the height of my images as argument to my datamodule and I want to change this height at some point during training, the simple way is to call trainer.fit multiple times with different datamodules, but I am wondering is there a way to do this on callback, in the same way as you do when you change the optimizer or lr_scheduler?\r\n\r\n\r\nSomething similar to this:\r\n```\r\ndef on_train_epoch_start(self, trainer, pl_module):\r\n            sch = optim.lr_scheduler.StepLR(optimizer, 1, 0.96)\r\n            scheduler = {\r\n                'scheduler': sch,\r\n                'interval': interval,  # or 'step'\r\n                'monitor': 'train_loss',\r\n                'reduce_on_plateau': False,\r\n                'frequency': 1,\r\n            }\r\n            trainer.lr_schedulers = trainer.configure_schedulers([scheduler])\r\n```",
    "comments_url": "https://api.github.com/repos/Lightning-AI/pytorch-lightning/issues/4607/comments",
    "author": "MohammedAljahdali",
    "comments": [
      {
        "user": "MohammedAljahdali",
        "created_at": "2020-12-13T17:55:10Z",
        "body": "Answer from @teddykoker:\r\n \r\n\r\n> I have done this using a callback:\r\n> ```\r\n> class Scheduler(pl.Callback):\r\n>     def _prepare_epoch(self, trainer, model, epoch):\r\n>         phase = ... \r\n>         trainer.datamodule.set_phase(phase)\r\n> \r\n>     def on_epoch_end(self, trainer, model):\r\n>         self._prepare_epoch(trainer, model, trainer.current_epoch + 1)\r\n> \r\n> class Data(pl.LightningDataModule):\r\n>     def set_phase(self, phase: dict):\r\n>         self.size = phase.get(\"size\", self.size)\r\n>         train_transforms = T.Compose(\r\n>             [\r\n>                 T.RandomResizedCrop(self.size, scale=(self.min_scale, 1.0)),\r\n>                 T.RandomHorizontalFlip(),\r\n>                 T.ToTensor(),\r\n>                 normalize,\r\n>             ]\r\n>         )\r\n>         self.train_ds = ImageFolder(self.train_dir, transform=train_transforms)\r\n> \r\n>        \r\n>     def train_dataloader(self):\r\n>         train_dl = DataLoader(\r\n>             self.train_ds,\r\n>             batch_size=self.batch_size,\r\n>             shuffle=True,\r\n>             num_workers=self.num_workers,\r\n>             pin_memory=True,\r\n>         )\r\n>         return train_dl\r\n> ```\r\n> Its important to note:\r\n> \r\n> 1. You can access your datamodule from a callback using trainer.datamodule\r\n> 2. In order to have train_dataloader(), val_dataloader() called every epoch, you must set reload_dataloaders_every_epoch=True in your trainer.\r\n\r\nThank you @teddykoker for the help. "
      }
    ]
  },
  {
    "number": 4604,
    "title": "How to load to from a checkpoint to same device when pretrained encoder was used",
    "created_at": "2020-11-10T14:35:57Z",
    "closed_at": "2020-11-12T12:17:42Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/Lightning-AI/pytorch-lightning/issues/4604",
    "body": "## \u2753 Questions and Help \r\n\r\nI implemented a `ClassificationNet` (see below) that's using a pretrained encoder. After training, I'm trying to load it to CPU using `ClassificationNet.load_from_checkpoint(pth, map_location=torch.device(\"cpu\")`, but since `map_location` in `get_encoder` is `None`, the encoder tries to load to GPU. How can I inform `get_encoder` to load to the same `map_location`? \r\nSince I just started using Lightning, I guess there's a much smarter way to circumvent this situation altogether -- I look forward to your suggestions :) Thanks!\r\n\r\n#### Code\r\n``` python\r\nclass ClassificationNet(LightningModule):\r\n    ...\r\n    self.encoder = get_encoder(pretrained=True)\r\n\r\nget_encoder(pretrained=False, map_location=None):\r\n    model = FancyModel()\r\n    if pretrained:\r\n        ckpt_data = torch.utils.model_zoo.load_url(url, map_location=map_location)\r\n    ....\r\n```\r\n\r\n - OS: Manjaro Linux\r\n - Version 1.0.5",
    "comments_url": "https://api.github.com/repos/Lightning-AI/pytorch-lightning/issues/4604/comments",
    "author": "hakanyi",
    "comments": [
      {
        "user": "rohitgr7",
        "created_at": "2020-11-11T20:50:04Z",
        "body": "one solution can be having an additional argument for it.\r\n```python\r\nclass ClassificationNet(LightningModule):\r\n    def __init__(self, encoder_map_location, ...):\r\n        self.encoder = get_encoder(pretrained=True, map_location=encoder_map_location)\r\n```\r\n```python\r\nClassificationNet.load_from_checkpoint(pth, map_location=torch.device(\"cpu\"), encoder_map_location=torch.device(\"cpu\"))\r\n```\r\n\r\nor maybe without an additional argument. Not sure about this one though. But should work.\r\n```python\r\nclass ClassificationNet(LightningModule):\r\n    def __init__(self, ...):\r\n        ....\r\n    \r\n    def setup(self, stage):\r\n        self.encoder = get_encoder(pretrained=True, map_location=self.device)\r\n```\r\n```python\r\nClassificationNet.load_from_checkpoint(pth, map_location=torch.device(\"cpu\"))\r\n```"
      }
    ]
  },
  {
    "number": 4465,
    "title": "How to save the latest and best checkpoint?",
    "created_at": "2020-11-01T10:25:10Z",
    "closed_at": "2020-11-01T12:01:07Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/Lightning-AI/pytorch-lightning/issues/4465",
    "body": "I can set a checkpoing callback to save best model, but I also want it save the latest model, so that i can `resume_from_checkpoint` from latest checkpoint. how to do this?",
    "comments_url": "https://api.github.com/repos/Lightning-AI/pytorch-lightning/issues/4465/comments",
    "author": "xiadingZ",
    "comments": [
      {
        "user": "ydcjeff",
        "created_at": "2020-11-01T11:56:07Z",
        "body": "@xiadingZ  There is `save_last` parameter in ModelCheckpoint that saves the last epoch"
      }
    ]
  },
  {
    "number": 4135,
    "title": "Accuracy metric number of classes warning question",
    "created_at": "2020-10-14T04:26:41Z",
    "closed_at": "2020-10-14T16:15:35Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/Lightning-AI/pytorch-lightning/issues/4135",
    "body": "For context, I'm running a heavy multi-label classification model with small batches (~10 elements) and a large number of classes (~50 classes). While training I'm getting this warning on **accuracy** metric calculation:\r\n\r\n> You have set 32 number of classes which is different from predicted (6) and target (28) number of classes\r\n\r\nShould I be worried? I'm not sure why this should be a warning. \r\nI keep wondering why is it bad having fewer classes in predicted output compared with the expected number of classes.",
    "comments_url": "https://api.github.com/repos/Lightning-AI/pytorch-lightning/issues/4135/comments",
    "author": "Vichoko",
    "comments": [
      {
        "user": "SkafteNicki",
        "created_at": "2020-10-14T11:19:44Z",
        "body": "Which version of lightning are you using?\r\nWe did a revamp of metrics lately and the class based `Accuracy` metric does not throw this warning anymore (functional still does).\r\nIt was originally put in place to warn users that we estimated a different number of labels (from pred and target) than what the user provided, and it could mean that your output was biased and not estimating values within the hole label space. That said, it does not necessarily means that there is anything wrong with your model."
      }
    ]
  },
  {
    "number": 3803,
    "title": "Access metrics in custom callbacks",
    "created_at": "2020-10-02T19:05:49Z",
    "closed_at": "2020-10-04T02:43:34Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/Lightning-AI/pytorch-lightning/issues/3803",
    "body": "## \u2753 Questions and Help\r\n\r\nI have found it useful/helpful to sometimes access metrics in custom callbacks. In v0.9.0 this works using something like this:\r\n\r\n```\r\ndef training_step(self, batch, batch_idx):\r\n    return {\"loss\": self._step(batch)}\r\n\r\ndef validation_step(self, batch, batch_idx):\r\n    return {\"val_loss\": self._step(batch)}\r\n\r\ndef training_epoch_end(self, outputs):\r\n    # ...\r\n    return {\"interesting_key_train\": interesting_value}\r\n\r\ndef validation_epoch_end(self, outputs):\r\n    # ...\r\n    return {\"interesting_key_val\": interesting_value}\r\n```\r\n\r\nThe setup allows for the values returned in the `_epoch_end` methods to be accessed via `trainer.callback_metrics`. As such, a callback could use these values, e.g.\r\n\r\n```\r\nclass CustomCallback(Callback):\r\n\r\n    def on_validation_end(self, trainer, pl_module):\r\n        metrics = trainer.callback_metrics\r\n        interesting_value = metrics[\"interesting_key_train\"]\r\n```\r\n\r\nWhen using the current master branch, the above approach is possible for values returned in `validation_epoch_end` but no longer possible for `training_epoch_end` as setting a return value in `training_epoch_end` raises the exception,\r\n\r\n```\r\nMisconfigurationException: training_epoch_end expects a return of None. HINT: remove the return statement in training_epoch_end\r\n```\r\n\r\nAdditionally the values stored in `trainer.callback_metrics` have changed. Using the example above, in v0.9.0, it is `{\"loss\": ..., \"interesting_key_train\": ..., \"interesting_key_val\": ...}` and on master it is simply `{\"interesting_key_val\": ...}`.\r\n\r\nWhat is the intended way to access metrics (in particular from the training loop) in callbacks?",
    "comments_url": "https://api.github.com/repos/Lightning-AI/pytorch-lightning/issues/3803/comments",
    "author": "pbmstrk",
    "comments": [
      {
        "user": "ananthsub",
        "created_at": "2020-10-03T22:32:34Z",
        "body": "> When using the current master branch, the above approach is possible for values returned in validation_epoch_end but no longer possible for training_epoch_end as setting a return value in training_epoch_end raises the exception,\r\n\r\nCan you use `self.log(\"interesting_key_train\", interesting_value)`? \r\n\r\nThough there does seem to be an issue with accessing metrics on epoch end on master @williamFalcon "
      },
      {
        "user": "pbmstrk",
        "created_at": "2020-10-03T23:32:48Z",
        "body": "`self.log` works on master, I had tried it earlier today and run into issues but these seem to be resolved now."
      }
    ]
  },
  {
    "number": 3698,
    "title": "How to keep some LightningModule's parameters on cpu when using CUDA devices for training",
    "created_at": "2020-09-28T11:46:05Z",
    "closed_at": "2020-10-18T08:56:21Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/Lightning-AI/pytorch-lightning/issues/3698",
    "body": "## \u2753 Questions and Help\r\n\r\n\r\n#### What is your question?\r\nI tried to transform my code into Lightning yesterday, but the CUDA OOM error occurred. My model has a very large parameter ```nn.Embedding(24000000, 128)``` (more than 22GB), which obviously exceeds the memory of my CUDA device. I implemented two classes to sovle this problem in my torch_version code, the pseudo code is as follows:\r\n\r\n#### PyTorch Code\r\n```python\r\nclass Emb(nn.Module):\r\n        def __init__(self):\r\n                xxxxxx # some init operations\r\n                self.emb = nn.Emebdding(24000000, 128)\r\n        def forward(self, idx):\r\n                return self.emb(idx)\r\n\r\nclass MyModule(nn.Module):\r\n        def __init__(self):\r\n                xxxxxx # some init operations\r\n                self.calculation = some_calculation()\r\n        def forward(self, input):\r\n                out = self.calculation(input)\r\n                return out\r\n\r\n# train part:\r\nget_emb = Emb()\r\nmodel = MyModule()\r\nmodel = model.cuda()\r\noptimizer = some_optimizer([{\"params\": e.parameters}, {\"params\": model.parametersba}], lr=1e-3)\r\nloss_metric = some_loss()\r\nfor epo in epoch:\r\n        for x, y in dataloader:\r\n                embs = get_emb(x.cpu()).cuda()\r\n                out = model(embs)\r\n                loss = loss_metric(out, y)\r\n                optimizer.zero_grad()\r\n                loss.backward()\r\n                optimizer.step()\r\n```\r\nThe torch_version code above keeps the nn.Embedding on cpu and ensures that the optimization of training is completed on CUDA devices. But I don't know how to achieve this via pytorch_lightning, because the entire 'training' part is encapsulated in training_step. The PL code  is as follows:\r\n\r\n#### PL Code\r\n```python\r\nclass MyModule(pl.LightningModule):\r\n        def __init__(self):\r\n                xxxxxx # some init operations\r\n                self.calculation = some_calculation()\r\n                self.emb = nn.Embedding(24000000, 128)\r\n                self.loss_metric = some_loss()\r\n        def training_step(self, batch, batch_idx):\r\n                x, y = batch\r\n                embs = self.emb(x)\r\n                out = self.calculation(embs)\r\n                return {\"loss\": self.loss_metric(out, y)}\r\n\r\n# train part\r\nmodel = MyModule()\r\ntrainer = pl.Trainer(gpus=-1)\r\ntrainer.fit(model, dataloader)\r\n```\r\nSo, is there any recommended way to keep a part of the LightningModule's parameters on cpu when using CUDA devices for training? \r\n\r\n#### What's your environment?\r\n\r\n - OS: Ubuntu 16.04.6 LTS\r\n - CUDA: version 10.2, 2080Ti\r\n - Version 0.9.0\r\n",
    "comments_url": "https://api.github.com/repos/Lightning-AI/pytorch-lightning/issues/3698/comments",
    "author": "David-AJ",
    "comments": [
      {
        "user": "rohitgr7",
        "created_at": "2020-09-28T20:35:35Z",
        "body": "if you do this:\r\n```python\r\nclass MyModule(pl.LightningModule):\r\n        def __init__(self):\r\n                xxxxxx # some init operations\r\n                self.calculation = some_calculation()\r\n                self.emb = [nn.Embedding(24000000, 128)]\r\n                self.loss_metric = some_loss()\r\n        def forward(self, input):\r\n                x, y = input\r\n                embs = self.emb[0](x.cpu()).to(self.device)\r\n                out = self.calculation(embs)\r\n                return {\"loss\": self.loss_metric(out, y)}\r\n```\r\nit should work I guess. Can't think of a better solution than this :sweat_smile: "
      },
      {
        "user": "David-AJ",
        "created_at": "2020-09-29T03:39:41Z",
        "body": "> if you do this:\r\n> \r\n> ```python\r\n> class MyModule(pl.LightningModule):\r\n>         def __init__(self):\r\n>                 xxxxxx # some init operations\r\n>                 self.calculation = some_calculation()\r\n>                 self.emb = [nn.Embedding(24000000, 128)]\r\n>                 self.loss_metric = some_loss()\r\n>         def forward(self, input):\r\n>                 x, y = input\r\n>                 embs = self.emb[0](x.cpu()).to(self.device)\r\n>                 out = self.calculation(embs)\r\n>                 return {\"loss\": self.loss_metric(out, y)}\r\n> ```\r\n> \r\n> it should work I guess. Can't think of a better solution than this \ud83d\ude05\r\n\r\n@rohitgr7 Really?! In this case, will the self.emb be saved in ckpt along with other parameters of ```MyModule```? Sorry, I just noticed that I had a typo in the PL Code: ```forward(self, input) -> training_step(self, batch, batch_idx)```"
      },
      {
        "user": "rohitgr7",
        "created_at": "2020-09-29T07:48:51Z",
        "body": "Yeah, won't save. Didnt think of that. If any module in the lightning has a `.to` method then it will be moved to device. Somehow need to think of a way to override this `.to` method for embeddings."
      },
      {
        "user": "David-AJ",
        "created_at": "2020-09-30T03:23:40Z",
        "body": "@rohitgr7 I tried to use ```self.emb = nn.Embedding(24000000, 128).cpu()``` in lightning code, but it failed. Actually, it is very common in recommendation system to use this kind of large-scale embedding as the trainable weight of the model. For example, the sparse features of User Id (more than 24000000) can be represented by a dense embedding matrix. So is there any possible to implement this operation in Pytorch-Lightning? "
      },
      {
        "user": "rohitgr7",
        "created_at": "2020-09-30T20:35:33Z",
        "body": "Looked at PyTorch source code. Found something. Can you try this?  @David-AJ\r\n```python\r\n\r\nclass SpecialEmbedding(nn.Module):\r\n        def __init__(self, fin, fout):\r\n                self.emb = nn.Embedding(fin, fout)\r\n\r\n        def _apply(self, fn):\r\n                return self\r\n\r\n        def forward(self, x):\r\n                return self.emb(x)\r\n\r\nclass MyModule(pl.LightningModule):\r\n        def __init__(self):\r\n                xxxxxx # some init operations\r\n                self.calculation = some_calculation()\r\n                self.emb = SpecialEmbedding(24000000, 128)\r\n                self.loss_metric = some_loss()\r\n\r\n        def training_step(self, batch, batch_idx):\r\n                x, y = batch\r\n                embs = self.emb(x.cpu()).to(self.device)\r\n                out = self.calculation(embs)\r\n                return {\"loss\": self.loss_metric(out, y)}\r\n\r\n# train part\r\nmodel = MyModule()\r\ntrainer = pl.Trainer(gpus=-1)\r\ntrainer.fit(model, dataloader)\r\n```"
      },
      {
        "user": "David-AJ",
        "created_at": "2020-10-09T06:50:50Z",
        "body": "@rohitgr7 Thanks for your kindly help! But this ```SpecialEmbedding ```code failed again \ud83d\ude05\r\nthe error message is as follows:\r\n```bash\r\nTraceback (most recent call last):\r\n  File \"debug.py\", line 742, in <module>\r\n    trainer.fit(model)\r\n  File \"/opt/conda/envs/rapids/lib/python3.6/site-packages/pytorch_lightning/trainer/states.py\", line 48, in wrapped_fn\r\n    result = fn(self, *args, **kwargs)\r\n  File \"/opt/conda/envs/rapids/lib/python3.6/site-packages/pytorch_lightning/trainer/trainer.py\", line 1064, in fit\r\n    results = self.accelerator_backend.train()\r\n  File \"/opt/conda/envs/rapids/lib/python3.6/site-packages/pytorch_lightning/accelerators/dp_backend.py\", line 97, in train\r\n    results = self.trainer.run_pretrain_routine(model)\r\n  File \"/opt/conda/envs/rapids/lib/python3.6/site-packages/pytorch_lightning/trainer/trainer.py\", line 1239, in run_pretrain_routine\r\n    self.train()\r\n  File \"/opt/conda/envs/rapids/lib/python3.6/site-packages/pytorch_lightning/trainer/training_loop.py\", line 394, in train\r\n    self.run_training_epoch()\r\n  File \"/opt/conda/envs/rapids/lib/python3.6/site-packages/pytorch_lightning/trainer/training_loop.py\", line 491, in run_training_epoch\r\n    batch_output = self.run_training_batch(batch, batch_idx)\r\n  File \"/opt/conda/envs/rapids/lib/python3.6/site-packages/pytorch_lightning/trainer/training_loop.py\", line 844, in run_training_batch\r\n    self.hiddens\r\n  File \"/opt/conda/envs/rapids/lib/python3.6/site-packages/pytorch_lightning/trainer/training_loop.py\", line 1015, in optimizer_closure\r\n    hiddens)\r\n  File \"/opt/conda/envs/rapids/lib/python3.6/site-packages/pytorch_lightning/trainer/training_loop.py\", line 1197, in training_forward\r\n    output = self.model(*args)\r\n  File \"/opt/conda/envs/rapids/lib/python3.6/site-packages/torch/nn/modules/module.py\", line 722, in _call_impl\r\n    result = self.forward(*input, **kwargs)\r\n  File \"/opt/conda/envs/rapids/lib/python3.6/site-packages/pytorch_lightning/overrides/data_parallel.py\", line 70, in forward\r\n    \"them on device: {}\".format(self.src_device_obj, t.device))\r\nRuntimeError: module must have its parameters and buffers on device cuda:0 (device_ids[0]) but found one of them on device: cpu\r\n```\r\nIt seems that pytorch_lightning forces the parameters of a module to be set on the same device?"
      },
      {
        "user": "rohitgr7",
        "created_at": "2020-10-09T19:58:46Z",
        "body": "not 100% sure why is this `RuntimeError` should be raised. @awaelchli any suggestions on how to make this work/?\r\n\r\nActually now I also want to know if this is the right way or not or there is another way around since it seems super useful.\r\n\r\n@David-AJ is it working on a single GPU device with no distributed backend?"
      },
      {
        "user": "David-AJ",
        "created_at": "2020-10-10T03:35:22Z",
        "body": "> not 100% sure why is this `RuntimeError` should be raised. @awaelchli any suggestions on how to make this work/?\r\n> \r\n> Actually now I also want to know if this is the right way or not or there is another way around since it seems super useful.\r\n> \r\n> @David-AJ is it working on a single GPU device with no distributed backend?\r\n\r\nHi @rohitgr7, I tried to run this code on a single GPU and the ```RuntimeError``` was raised again."
      },
      {
        "user": "awaelchli",
        "created_at": "2020-10-11T16:15:24Z",
        "body": "do you want to train the embedding layer or is it pretrained?\r\nIf you want to train it, I'm afraid you can't have it on cpu while also using DP. The error you got above is because DataParallel detects that. "
      },
      {
        "user": "David-AJ",
        "created_at": "2020-10-12T02:58:01Z",
        "body": "@awaelchli Yes, I want to train it, how about using DDP or any other distributed backend? Actually @rohitgr7\u2018s first solution ```self.emb = [nn.Embedding(24000000, 128)]``` could make ```self.emb``` on CPU while training with DP, but in that case the ```self.emb``` won't be saved in the ckpt, nor can be loaded using load_from_checkpoint. Could this problem be solved by overriding the ```on_save_checkpoint``` and ```on_load_checkpoint```?"
      },
      {
        "user": "awaelchli",
        "created_at": "2020-10-12T03:01:40Z",
        "body": "> `self.emb = [nn.Embedding(24000000, 128)]`\r\n\r\n\ud83e\udd23  this is a funny trick. Very creative. Yeah, this makes torch unaware of this module, and keeps it on the cpu. \r\n\r\n> Could this problem be solved by overriding the on_save_checkpoint and on_load_checkpoint?\r\n\r\nYes, I think that would do the trick!\r\nBut will this this embedding layer not be a huge bottleneck? You will need to transfer all outputs to the GPU and this blocks execution."
      },
      {
        "user": "David-AJ",
        "created_at": "2020-10-12T03:18:03Z",
        "body": "@awaelchli \r\n\r\n> But will this this embedding layer not be a huge bottleneck? You will need to transfer all outputs to the GPU and this blocks execution.\r\n\r\nLooks like I have no choice\ud83e\udd23 otherwise I have to train all the module on the cpu, don't know which one could be faster. The application scenario is in the recommendation system, and in fact the number of users and items far exceeds 24 million, all these ID sparse features should be represented by the embedding layer and trained in the module. Do you have any other suggestions on how to make it faster?"
      },
      {
        "user": "awaelchli",
        "created_at": "2020-10-17T14:22:54Z",
        "body": "> Could this problem be solved by overriding the on_save_checkpoint and on_load_checkpoint?\r\n\r\nyes. I would do it this way. grab the state dict of the embedding layer and add it to the checkpoint dict. when loading, you do the opposite and read the state dict. \r\n\r\n> Do you have any other suggestions on how to make it faster?\r\n\r\nsorry, nothing comes to my mind :("
      },
      {
        "user": "David-AJ",
        "created_at": "2020-10-18T08:56:00Z",
        "body": "I modified my code like this:\r\n```python\r\nclass MyModule(pl.LightningModule):\r\n        def __init__(self):\r\n                xxxxxx # some init operations\r\n                self.calculation = some_calculation()\r\n                self.emb = [nn.Embedding(24000000, 128)]\r\n                self.loss_metric = some_loss()\r\n\r\n        def training_step(self, batch, batch_idx):\r\n                x, y = batch\r\n                embs = self.emb[0](x.cpu()).to(self.device)\r\n                out = self.calculation(embs)\r\n                return {\"loss\": self.loss_metric(out, y)}\r\n\r\n        def on_save_checkpoint(self, checkpoint):\r\n                checkpoint[\"emb\"] = self.emb\r\n\r\n        def on_load_checkpoint(self, checkpoint):\r\n                self.emb = checkpoint[\"emb\"]\r\n```\r\nIt works! Thank you @rohitgr7 and @awaelchli!"
      }
    ]
  },
  {
    "number": 3696,
    "title": "How to set default EarlyStopping patience?",
    "created_at": "2020-09-28T06:21:06Z",
    "closed_at": "2020-09-28T20:03:18Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/Lightning-AI/pytorch-lightning/issues/3696",
    "body": "Is it possible to set the default EarlyStopping patience without creating a custom early stopping callback? \r\n\r\nInstead of writing:\r\n```\r\ntrainer = pl.Trainer(early_stop_callback=EarlyStopping(patience=XXX))\r\n```\r\n\r\nI'd like to overwrite the default patience directly and then use EvalResult(early_stop_on=...). ",
    "comments_url": "https://api.github.com/repos/Lightning-AI/pytorch-lightning/issues/3696/comments",
    "author": "chrismaliszewski",
    "comments": [
      {
        "user": "rohitgr7",
        "created_at": "2020-09-28T19:45:19Z",
        "body": "No. Any problem with using a custom callback??"
      }
    ]
  },
  {
    "number": 3473,
    "title": "Correct way of implementing early stopping",
    "created_at": "2020-09-12T10:24:28Z",
    "closed_at": "2020-09-12T13:57:42Z",
    "labels": [
      "question",
      "design"
    ],
    "url": "https://github.com/Lightning-AI/pytorch-lightning/issues/3473",
    "body": "I am trying to implement early stopping on my LSTM classifier.Running the script on colab GPU environment. Here's the code\r\n\r\n```python\r\n!pip install pytorch-lightning torchtext \r\nimport os\r\nimport torch\r\nimport torch.nn as nn\r\nimport torch.nn.functional as F\r\nfrom torch.utils.data import DataLoader\r\nimport pytorch_lightning as pl\r\nfrom torch.utils.data import random_split\r\nfrom torchtext import data, datasets\r\nfrom torch.nn.utils.rnn import pack_padded_sequence\r\nfrom pytorch_lightning.metrics import functional as FM\r\nfrom pytorch_lightning.callbacks import EarlyStopping\r\n\r\n#### set up fields\r\nTEXT = data.Field(lower=True, include_lengths=True, batch_first=True)\r\nLABEL = data.Field(sequential=False)\r\n\r\n##### make splits for data\r\ntrain, test = datasets.IMDB.splits(TEXT, LABEL)\r\n\r\n##### build the vocabulary\r\nTEXT.build_vocab(train)\r\nLABEL.build_vocab(train)\r\n\r\n#### make iterator for splits\r\ntrain_iter, test_iter = data.BucketIterator.splits(\r\n    (train, test), batch_size=100, device=0)\r\n\r\nclass LightningLSTM(pl.LightningModule):\r\n  def __init__(self, embedd_dim, hidden_size, output_dim, vocab_size, **kwargs):\r\n    super().__init__()\r\n    self.embedd_dim = embedd_dim\r\n    self.hidden_size = hidden_size\r\n    self.output_dim = output_dim\r\n    self.vocab_size = vocab_size\r\n    self.embedding = nn.Embedding(self.vocab_size, self.embedd_dim)\r\n    self.lstm = nn.LSTM(self.embedd_dim, self.hidden_size, batch_first=True, **kwargs)\r\n    self.linear = nn.Linear(self.hidden_size, self.output_dim)\r\n    self.softmax = nn.Softmax(1)\r\n\r\n  def forward(self, x, lengths):\r\n    output = self.embedding(x)\r\n    packed_output = pack_padded_sequence(output, lengths.cpu().numpy(), batch_first=True, enforce_sorted=False)\r\n    output, (ht, ct) = self.lstm(packed_output)\r\n    output = self.linear(ht).squeeze(0)\r\n    return output\r\n\r\n  def configure_optimizers(self):\r\n    optimizer = torch.optim.Adam(self.parameters(), lr=1e-3)\r\n    return optimizer\r\n\r\n  def validation_step(self, batch, batch_idx):\r\n    x, l, y = *batch.text, batch.label\r\n    y-=1\r\n    y_hat = self(x, l)\r\n    loss = F.cross_entropy(y_hat, y)\r\n    y_pred = torch.argmax(self.softmax(y_hat),1)\r\n    result = pl.EvalResult(checkpoint_on=loss, early_stop_on=loss)\r\n    acc = FM.accuracy(y_pred, y, num_classes=self.output_dim)\r\n    result.log('val_loss', loss, prog_bar=True, on_step=True)\r\n    result.log('val_acc', acc, prog_bar=True, on_step=True)\r\n    return result\r\n\r\n  def training_step(self, batch, batch_idx):\r\n    x, l, y = *batch.text, batch.label\r\n    y-=1\r\n    y_hat = self(x, l)\r\n    loss = F.cross_entropy(y_hat, y)\r\n    y_pred = torch.argmax(self.softmax(y_hat),1)\r\n    result = pl.EvalResult(checkpoint_on=loss)\r\n    acc = FM.accuracy(y_pred, y, num_classes=self.output_dim)\r\n    result = pl.TrainResult(minimize=loss)\r\n    result.log('loss', loss)\r\n    result.log('train_acc', acc)\r\n    return result\r\n\r\nEMBEDDING_DIM = 200\r\nVOCAB_SIZE = len(TEXT.vocab)\r\nOUTPUT_DIM = 2 #two labels - positive and negative\r\nHIDDEN_SIZE = 1024\r\nmodel = LightningLSTM(EMBEDDING_DIM, HIDDEN_SIZE, OUTPUT_DIM, VOCAB_SIZE)\r\n\r\nearly_stopping = EarlyStopping('val_loss', patience=3, mode='min')\r\ntrainer = pl.Trainer(gpus=1, max_epochs=10, early_stop_callback=early_stopping)\r\ntrainer.fit(model, train_iter, test_iter) `\r\n```\r\nThis is the output + warning I get when I start the training - \r\n\r\n\r\n``` \r\nGPU available: True, used: True\r\nTPU available: False, using: 0 TPU cores\r\nCUDA_VISIBLE_DEVICES: [0]\r\n/usr/local/lib/python3.6/dist-packages/pytorch_lightning/utilities/distributed.py:37: UserWarning: Could not log computational graph since the `model.example_input_array` attribute is not set or `input_array` was not given\r\n  warnings.warn(*args, **kwargs)\r\n\r\n  | Name      | Type      | Params\r\n----------------------------------------\r\n0 | embedding | Embedding | 50 M  \r\n1 | lstm      | LSTM      | 5 M   \r\n2 | linear    | Linear    | 2 K   \r\n3 | softmax   | Softmax   | 0     \r\nEpoch 5: 100%\r\n500/500 [02:07<00:00, 3.91it/s, loss=0.105, v_num=3, step_val_loss=1.06, step_val_acc=0.71, epoch_val_loss=0.748, epoch_val_acc=0.763]\r\n/usr/local/lib/python3.6/dist-packages/pytorch_lightning/utilities/distributed.py:37: UserWarning: \r\n                    When using EvalResult(early_stop_on=X) or TrainResult(early_stop_on=X) the\r\n                    'monitor' key of EarlyStopping has no effect.\r\n                    Remove EarlyStopping(monitor='val_early_stop_on) to fix')\r\n                \r\n  warnings.warn(*args, **kwargs)\r\nSaving latest checkpoint..\r\n\r\n1\r\n ```\r\n\r\nIf I don't specifically mention `early_stop_on = loss` in the EvalResult initialization (in the validation_step method), the trainer keeps training it for the max number of epochs specified. Also, I do not get the warning when I remove the `early_stop_on` parameter. Early stopping works fine when I include the parameter.\r\n\r\nI am confused about what is the right way to implement early stopping.  `early_stopping = EarlyStopping('val_loss', patience=3, mode='min')` this line seems to implement early stopping as well. But doesn't work unless I explicitly mention in the EvalResult object.\r\n\r\nCan anyone point out if I am missing something?\r\n\r\nThanks!\r\n\r\n\r\n\r\n\r\n",
    "comments_url": "https://api.github.com/repos/Lightning-AI/pytorch-lightning/issues/3473/comments",
    "author": "DhruvilKarani",
    "comments": [
      {
        "user": "awaelchli",
        "created_at": "2020-09-12T13:32:17Z",
        "body": "Yes, currently you need to do it this way. The result object was meant to make early stopping etc. easier, but currently if you use a custom callback, you need to add that key manually. We will iterate on this and are currently discussing ways to make configuration of these callbacks easier and more intuitive. part of discussion is here #3286 "
      }
    ]
  },
  {
    "number": 3009,
    "title": "how to show estimated total training time in progress bar?",
    "created_at": "2020-08-16T17:57:11Z",
    "closed_at": "2020-10-25T06:02:05Z",
    "labels": [
      "question",
      "won't fix"
    ],
    "url": "https://github.com/Lightning-AI/pytorch-lightning/issues/3009",
    "body": "how to show estimated total training time in progress bar?",
    "comments_url": "https://api.github.com/repos/Lightning-AI/pytorch-lightning/issues/3009/comments",
    "author": "aiyolo",
    "comments": [
      {
        "user": "awaelchli",
        "created_at": "2020-08-16T18:45:18Z",
        "body": "I once made a progress bar for myself which shows the total epochs and the estimated time. I'll share it here. \r\nYou can simply pass it to the Trainer like so:\r\n`Trainer(callbacks=[GlobalProgressBar()])`\r\nHowever, this will not show the old progress bar and we currently do not support multiple progress bar callbacks, but I will think of a solution for this.\r\nIn the meantime, I hope this is of any help. \r\n\r\n\r\n```python\r\nimport importlib.util\r\nimport sys\r\n\r\nfrom pytorch_lightning.callbacks.progress import ProgressBarBase\r\n\r\n# check if ipywidgets is installed before importing tqdm.auto\r\n# to ensure it won't fail and a progress bar is displayed\r\nif importlib.util.find_spec('ipywidgets') is not None:\r\n    from tqdm.auto import tqdm\r\nelse:\r\n    from tqdm import tqdm\r\n\r\n\r\nclass GlobalProgressBar(ProgressBarBase):\r\n\r\n    def __init__(self, process_position: int = 0):\r\n        super().__init__()\r\n        self._process_position = process_position\r\n        self._enabled = True\r\n        self.main_progress_bar = None\r\n\r\n    def __getstate__(self):\r\n        # can't pickle the tqdm objects\r\n        state = self.__dict__.copy()\r\n        state['main_progress_bar'] = None\r\n        return state\r\n\r\n    @property\r\n    def process_position(self) -> int:\r\n        return self._process_position\r\n\r\n    def disable(self) -> None:\r\n        self._enabled = False\r\n\r\n    def enable(self) -> None:\r\n        self._enabled = True\r\n\r\n    def on_train_start(self, trainer, pl_module):\r\n        super().on_train_start(trainer, pl_module)\r\n        self.main_progress_bar = tqdm(\r\n            desc='Total Epochs',\r\n            initial=trainer.current_epoch,\r\n            total=trainer.max_epochs,\r\n            position=(2 * self.process_position),\r\n            disable=False,\r\n            leave=True,\r\n            dynamic_ncols=True,\r\n            file=sys.stdout,\r\n            smoothing=0,\r\n        )\r\n\r\n    def on_train_end(self, trainer, pl_module):\r\n        self.main_progress_bar.close()\r\n\r\n    def on_epoch_end(self, trainer, pl_module):\r\n        self.main_progress_bar.update(1)\r\n\r\n```"
      },
      {
        "user": "zxvix",
        "created_at": "2022-09-06T10:08:13Z",
        "body": "I'll share my solution in case anyone finds it useful. It simply adds a total remaining time field in the current progress bar. Use it by replacing `RichProgressBar` with `BetterProgressBar`.\r\n```python\r\nimport re\r\nfrom datetime import timedelta\r\nfrom typing import Union\r\n\r\nfrom pytorch_lightning.callbacks.progress.rich_progress import RichProgressBar\r\nfrom rich.progress import ProgressColumn\r\nfrom rich.style import Style\r\nfrom rich.text import Text\r\n\r\nclass RemainingTimeColumn(ProgressColumn):\r\n    \"\"\"Show total remaining time in training\"\"\"\r\n\r\n    max_refresh = 1.0\r\n\r\n    def __init__(self, style: Union[str, Style]) -> None:\r\n        self.style = style\r\n        self.estimated_time_per_epoch = None\r\n        super().__init__()\r\n\r\n    def render(self, task) -> Text:\r\n        if 'Epoch' in task.description:\r\n            # fetch current epoch number from task description\r\n            m = re.search(r'Epoch (\\d+)/(\\d+)', task.description)\r\n            current_epoch, total_epoch = int(m.group(1)), int(m.group(2))\r\n\r\n            elapsed = task.finished_time if task.finished else task.elapsed\r\n            remaining = task.time_remaining\r\n            \r\n            if remaining:\r\n                time_per_epoch = elapsed + remaining\r\n                if self.estimated_time_per_epoch is None:\r\n                    self.estimated_time_per_epoch = time_per_epoch\r\n                else:\r\n                    # smooth the time_per_epoch estimation\r\n                    self.estimated_time_per_epoch = 0.99 * self.estimated_time_per_epoch + 0.01 * time_per_epoch\r\n\r\n                remaining_total = self.estimated_time_per_epoch * (total_epoch - current_epoch - 1) + remaining\r\n\r\n                return Text(f\"{timedelta(seconds=int(remaining_total))}\", style=self.style)\r\n            \r\n        else:\r\n            return Text(\"\")\r\n\r\n\r\nclass BetterProgressBar(RichProgressBar):\r\n    def configure_columns(self, trainer) -> list:\r\n        columns = super().configure_columns(trainer)\r\n        columns.insert(4, RemainingTimeColumn(style=self.theme.time))\r\n        return columns\r\n```"
      }
    ]
  },
  {
    "number": 2984,
    "title": "CrossEntropyLoss with weights",
    "created_at": "2020-08-15T02:46:24Z",
    "closed_at": "2020-08-15T09:49:13Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/Lightning-AI/pytorch-lightning/issues/2984",
    "body": "I need weights in CrossEntropyLoss (actually multiple, but the same issue).  The documentation talks about tensors copied from other tensors, but there is no tensor to copy from in the init.  So I'm stuck.\r\nTo make the weights unquestionably simple, I use ones.\r\n\r\n```\r\nclass JJG_Transformer(pl.LightningModule):\r\n\r\n    def __init__(self, alphanet_plus_2, letter_weights_per_position):\r\n        super(JJG_Transformer, self).__init__()\r\n        self.criterions = []\r\n        for weight in self.letter_weights_per_position:\r\n            weight = torch.ones((94))\r\n            self.criterions.append( torch.nn.CrossEntropyLoss(weight=weight) )\r\n    def validation_step(self, batch, batch_idx):\r\n        batch_im, batch_true_value_NT, batch_letter_transformer_input = batch\r\n        out_NTA = self(batch_im, batch_letter_transformer_input)\r\n        loss0 = self.criterions[0](out_NTA[:,0,:], batch_true_value_NT[:,0])\r\n        loss1 = self.criterions[1](out_NTA[:,1,:], batch_true_value_NT[:,1])\r\n        loss = loss0 + loss1\r\n        tensorboard_logs = {'val_loss': loss, 'val_loss0': loss0, 'val_loss1':loss1}\r\n        return {'val_loss': loss, 'log': tensorboard_logs}\r\n\r\n```\r\n\r\n  ```\r\nFile \"/home/john/Documents/GitHub/Offline_Handwriting_Recognition/Solutions/Aug2020_simple_transformer/src/kiss_transformer.py\", line 254, in <module>\r\n    trainer.fit(model, train_dataloader=train_loader, val_dataloaders=val_loader)\r\n  File \"/opt/conda/lib/python3.7/site-packages/pytorch_lightning/trainer/states.py\", line 34, in wrapped_fn\r\n    result = fn(self, *args, **kwargs)\r\n  File \"/opt/conda/lib/python3.7/site-packages/pytorch_lightning/trainer/trainer.py\", line 1017, in fit\r\n    self.accelerator_backend.train(model)\r\n  File \"/opt/conda/lib/python3.7/site-packages/pytorch_lightning/accelerators/ddp_backend.py\", line 56, in train\r\n    self.ddp_train(process_idx=self.task_idx, mp_queue=None, model=model)\r\n  File \"/opt/conda/lib/python3.7/site-packages/pytorch_lightning/accelerators/ddp_backend.py\", line 219, in ddp_train\r\n    results = self.trainer.run_pretrain_routine(model)\r\n  File \"/opt/conda/lib/python3.7/site-packages/pytorch_lightning/trainer/trainer.py\", line 1196, in run_pretrain_routine\r\n    self._run_sanity_check(ref_model, model)\r\n  File \"/opt/conda/lib/python3.7/site-packages/pytorch_lightning/trainer/trainer.py\", line 1229, in _run_sanity_check\r\n    eval_results = self._evaluate(model, self.val_dataloaders, max_batches, False)\r\n  File \"/opt/conda/lib/python3.7/site-packages/pytorch_lightning/trainer/evaluation_loop.py\", line 325, in _evaluate\r\n    output = self.evaluation_forward(model, batch, batch_idx, dataloader_idx, test_mode)\r\n  File \"/opt/conda/lib/python3.7/site-packages/pytorch_lightning/trainer/evaluation_loop.py\", line 609, in evaluation_forward\r\n    output = model(*args)\r\n  File \"/opt/conda/lib/python3.7/site-packages/torch/nn/modules/module.py\", line 722, in _call_impl\r\n    result = self.forward(*input, **kwargs)\r\n  File \"/opt/conda/lib/python3.7/site-packages/pytorch_lightning/overrides/data_parallel.py\", line 160, in forward\r\n    output = self.module.validation_step(*inputs[0], **kwargs[0])\r\n  File \"/home/john/Documents/GitHub/Offline_Handwriting_Recognition/Solutions/Aug2020_simple_transformer/src/kiss_transformer.py\", line 128, in validation_step\r\n    loss0 = self.criterions[0](out_NTA[:,0,:], batch_true_value_NT[:,0])\r\n  File \"/opt/conda/lib/python3.7/site-packages/torch/nn/modules/module.py\", line 722, in _call_impl\r\n    result = self.forward(*input, **kwargs)\r\n  File \"/opt/conda/lib/python3.7/site-packages/torch/nn/modules/loss.py\", line 948, in forward\r\n    ignore_index=self.ignore_index, reduction=self.reduction)\r\n  File \"/opt/conda/lib/python3.7/site-packages/torch/nn/functional.py\", line 2422, in cross_entropy\r\n    return nll_loss(log_softmax(input, 1), target, weight, None, ignore_index, None, reduction)\r\n  File \"/opt/conda/lib/python3.7/site-packages/torch/nn/functional.py\", line 2218, in nll_loss\r\n    ret = torch._C._nn.nll_loss(input, target, weight, _Reduction.get_enum(reduction), ignore_index)\r\nRuntimeError: Expected object of device type cuda but got device type cpu for argument #3 'weight' in call to _thnn_nll_loss_forward\r\nTraceback (most recent call last):\r\n  File \"kiss_transformer.py\", line 254, in <module>\r\n    trainer.fit(model, train_dataloader=train_loader, val_dataloaders=val_loader)\r\n  File \"/opt/conda/lib/python3.7/site-packages/pytorch_lightning/trainer/states.py\", line 34, in wrapped_fn\r\n    result = fn(self, *args, **kwargs)\r\n  File \"/opt/conda/lib/python3.7/site-packages/pytorch_lightning/trainer/trainer.py\", line 1030, in fit\r\n    results = self.accelerator_backend.spawn_ddp_children(model)\r\n  File \"/opt/conda/lib/python3.7/site-packages/pytorch_lightning/accelerators/ddp_backend.py\", line 118, in spawn_ddp_children\r\n    results = self.ddp_train(local_rank, mp_queue=None, model=model, is_master=True)\r\n  File \"/opt/conda/lib/python3.7/site-packages/pytorch_lightning/accelerators/ddp_backend.py\", line 219, in ddp_train\r\n    results = self.trainer.run_pretrain_routine(model)\r\n  File \"/opt/conda/lib/python3.7/site-packages/pytorch_lightning/trainer/trainer.py\", line 1196, in run_pretrain_routine\r\n    self._run_sanity_check(ref_model, model)\r\n  File \"/opt/conda/lib/python3.7/site-packages/pytorch_lightning/trainer/trainer.py\", line 1229, in _run_sanity_check\r\n    eval_results = self._evaluate(model, self.val_dataloaders, max_batches, False)\r\n  File \"/opt/conda/lib/python3.7/site-packages/pytorch_lightning/trainer/evaluation_loop.py\", line 325, in _evaluate\r\n    output = self.evaluation_forward(model, batch, batch_idx, dataloader_idx, test_mode)\r\n  File \"/opt/conda/lib/python3.7/site-packages/pytorch_lightning/trainer/evaluation_loop.py\", line 609, in evaluation_forward\r\n    output = model(*args)\r\n  File \"/opt/conda/lib/python3.7/site-packages/torch/nn/modules/module.py\", line 722, in _call_impl\r\n    result = self.forward(*input, **kwargs)\r\n  File \"/opt/conda/lib/python3.7/site-packages/pytorch_lightning/overrides/data_parallel.py\", line 160, in forward\r\n    output = self.module.validation_step(*inputs[0], **kwargs[0])\r\n  File \"kiss_transformer.py\", line 128, in validation_step\r\n    loss0 = self.criterions[0](out_NTA[:,0,:], batch_true_value_NT[:,0])\r\n  File \"/opt/conda/lib/python3.7/site-packages/torch/nn/modules/module.py\", line 722, in _call_impl\r\n    result = self.forward(*input, **kwargs)\r\n  File \"/opt/conda/lib/python3.7/site-packages/torch/nn/modules/loss.py\", line 948, in forward\r\n    ignore_index=self.ignore_index, reduction=self.reduction)\r\n  File \"/opt/conda/lib/python3.7/site-packages/torch/nn/functional.py\", line 2422, in cross_entropy\r\n    return nll_loss(log_softmax(input, 1), target, weight, None, ignore_index, None, reduction)\r\n  File \"/opt/conda/lib/python3.7/site-packages/torch/nn/functional.py\", line 2218, in nll_loss\r\n    ret = torch._C._nn.nll_loss(input, target, weight, _Reduction.get_enum(reduction), ignore_index)\r\nRuntimeError: Expected object of device type cuda but got device type cpu for argument #3 'weight' in call to _thnn_nll_loss_forward\r\n```\r\n\r\n```\r\ntrainer = pl.Trainer( gpus=[0, 1],  \r\n                accumulate_grad_batches=16, \r\n                max_epochs=500, \r\n                check_val_every_n_epoch=1, \r\n                distributed_backend='ddp', \r\n```\r\n\r\npl__version__ 0.9.0rc12\r\n",
    "comments_url": "https://api.github.com/repos/Lightning-AI/pytorch-lightning/issues/2984/comments",
    "author": "johngrabner",
    "comments": [
      {
        "user": "sykrn",
        "created_at": "2020-08-15T06:57:00Z",
        "body": "I think you just need to use `.cuda()` for the weight or criterion."
      },
      {
        "user": "awaelchli",
        "created_at": "2020-08-15T09:49:13Z",
        "body": "@sykrn is on the right track. \r\nThe problem is that your criterion is in a list. nn.Module does not recognize submodules in lists. \r\nYou solve your problem by using ModuleList: \r\n\r\n```python \r\n\r\nself.criterions = nn.ModuleList()  # this is the fix\r\n\r\nfor weight in self.letter_weights_per_position:\r\n    weight = torch.ones((94))\r\n    self.criterions.append( torch.nn.CrossEntropyLoss(weight=weight) )\r\n```\r\nnow your criterions (and tensors within it) will be automatically moved to the right device!"
      },
      {
        "user": "awaelchli",
        "created_at": "2020-08-15T22:31:32Z",
        "body": "It means:\r\n\r\n```python\r\nclass Wrong(nn.Module):\r\n\r\n    def __init__(self)\r\n        super().init()\r\n        self.list = [CrossEntropyLoss()]\r\n\r\nw = Wrong()\r\nw.children() # no children\r\n```\r\nvs.\r\n```python\r\nclass Right(nn.Module):\r\n\r\n    def __init__(self)\r\n        super().init()\r\n        self.list = nn.ModuleList([CrossEntropyLoss()])\r\n\r\nr = Right()\r\nr.children() # correctly returns the cross entropy module\r\n```\r\n\r\nOperations like model.to('cuda') will also recursively operate on all submodules (children and their children etc.). But a Python list for example is not considered a submodule, because it's not an instance of nn.Module"
      }
    ]
  },
  {
    "number": 2928,
    "title": "is limit_train_batches shuffle or random",
    "created_at": "2020-08-12T08:13:07Z",
    "closed_at": "2020-08-13T10:30:14Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/Lightning-AI/pytorch-lightning/issues/2928",
    "body": "hi, I am using limit_train_batches . If it is set, is it means a subdataset of whole train dataset ? similar with torch.utils.data.random_split",
    "comments_url": "https://api.github.com/repos/Lightning-AI/pytorch-lightning/issues/2928/comments",
    "author": "qmpzzpmq",
    "comments": [
      {
        "user": "ydcjeff",
        "created_at": "2020-08-12T09:09:10Z",
        "body": "Yes, it is a subset of the train dataset\r\nBut, it doesn't similar with `random_split`"
      },
      {
        "user": "qmpzzpmq",
        "created_at": "2020-08-12T10:08:17Z",
        "body": "@ydcjeff I mean, is it random?"
      },
      {
        "user": "ydcjeff",
        "created_at": "2020-08-12T10:30:59Z",
        "body": "I think it is not random. It is the first `limit_train_batches` of the train dataset."
      },
      {
        "user": "awaelchli",
        "created_at": "2020-08-12T15:20:47Z",
        "body": "Yes exactly, @ydcjeff is right. It will fetch batches from the dataloader until it reaches that amount, so your dataset and dataloader settings regarding shuffling will be respected. "
      },
      {
        "user": "adosar",
        "created_at": "2024-03-24T20:10:31Z",
        "body": "> @awaelchli @ydcjeff thx\r\n\r\nWhat if the dataloader uses `shuffle == True`?"
      }
    ]
  },
  {
    "number": 2888,
    "title": "Understanding the Progress Bar",
    "created_at": "2020-08-08T14:01:20Z",
    "closed_at": "2020-08-08T14:42:38Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/Lightning-AI/pytorch-lightning/issues/2888",
    "body": "I train on MNIST with data loaders defined below (full train / test sets with `batch_size=128`).  \r\n`'val_check_interval': 0.1`, so per training epoch, I have 10 validation runs.  \r\n\r\nNow:\r\n- 10000 (test) images / 128 (batch_size) = 78.125, so steps such as 54/79 do make sense.  \r\n- 60000 (train) images / 128 (batch_size) = 468.75, so I'd expect something like 120/469.  \r\n\r\nWhat is the \"1259\" representing in the progress bar? I can observe in tensorboard, that the epoch number goes up at exactly 459.\r\n```\r\nValidating:  68%|\u2588\u2588\u2588\u2588\u2588\u2588\u258a   | 54/79 [00:08<00:03,  6.57it/s]\r\nEpoch 4:  78%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258a  | 976/1259 [04:01<01:09,  4.05it/s, loss=19279.273, v_num=0]\r\n```\r\n\r\n#### Code\r\n##### Data Loaders\r\n```python\r\n    def train_dataloader(self) -> DataLoader:\r\n        \"\"\"Pytorch-lightning function.\"\"\"\r\n        transform = torchvision.transforms.Compose([torchvision.transforms.Resize((32, 32)),\r\n                                                    torchvision.transforms.ToTensor()])\r\n        train_set = torchvision.datasets.MNIST(root=DATA_DIR_PATH / 'mnist_data',\r\n                                               train=True,\r\n                                               download=True,\r\n                                               transform=transform)\r\n        return DataLoader(train_set,\r\n                          batch_size=128,\r\n                          shuffle=True,\r\n                          num_workers=0)\r\n\r\n    def val_dataloader(self) -> DataLoader:\r\n        \"\"\"Pytorch-lightning function.\"\"\"\r\n        transform = torchvision.transforms.Compose([torchvision.transforms.Resize((32, 32)),\r\n                                                    torchvision.transforms.ToTensor()])\r\n        val_set = torchvision.datasets.MNIST(root=DATA_DIR_PATH / 'mnist_data',\r\n                                             train=False,\r\n                                             download=True,\r\n                                             transform=transform)\r\n        return DataLoader(val_set,\r\n                          batch_size=128,\r\n                          shuffle=False,\r\n                          num_workers=0)\r\n```\r\n#### What's your environment?\r\n - OS: Ubuntu 20.04\r\n - Packaging: pipenv\r\n - Lightning Version: 0.8.5\r\n",
    "comments_url": "https://api.github.com/repos/Lightning-AI/pytorch-lightning/issues/2888/comments",
    "author": "matthaeusheer",
    "comments": [
      {
        "user": "rohitgr7",
        "created_at": "2020-08-08T14:16:28Z",
        "body": "It's 79*10 (10 times validation per epoch) + 469(train batches) = 1259. The progress bar contains both train and validation steps."
      }
    ]
  },
  {
    "number": 2666,
    "title": "Plotting learning rate from a lr_scheduler via a Callback",
    "created_at": "2020-07-21T23:00:50Z",
    "closed_at": "2020-08-05T07:35:41Z",
    "labels": [
      "feature",
      "good first issue",
      "question"
    ],
    "url": "https://github.com/Lightning-AI/pytorch-lightning/issues/2666",
    "body": "I think the title explains a lot. But let me elaborate, I have a LightningModule which has a configure_optimizers method returns an optimizer and a scheduler. Later in a Callback I have a `on_batch_end` function in which I try to log the learning rate.\r\n\r\nOf course if the scheduler was accessible as a class member, we could `self.scheduler.get_lr()` on it and use the value to plot. Since this is not how it has been implemented, I am wondering how to do this?\r\n\r\nWould appreciate any pointers.\r\nPytorchLightning - 0.8.5\r\n",
    "comments_url": "https://api.github.com/repos/Lightning-AI/pytorch-lightning/issues/2666/comments",
    "author": "bhashithe",
    "comments": [
      {
        "user": "s-rog",
        "created_at": "2020-07-22T00:29:35Z",
        "body": "If you have the same lr throughout the network (single param group) you can get it from:\r\n`self.trainer.optimizers[0].param_groups[0]['lr']`\r\nchange the indexing based on your optimizer and param configuration."
      },
      {
        "user": "bhashithe",
        "created_at": "2020-07-22T01:04:56Z",
        "body": "That worked, even if i have multiple groups does it work the same if I do something like this?\r\n\r\n`{f'lr_group{i}': param['lr'] for i, param in enumerate(self.trainer.optimizers[0].param_groups}`"
      },
      {
        "user": "rohitgr7",
        "created_at": "2020-07-22T04:49:59Z",
        "body": "There is a `LearningRateLogger` callback in lightning."
      },
      {
        "user": "SkafteNicki",
        "created_at": "2020-08-05T05:58:02Z",
        "body": "As @rohitgr7 mention, the `LearningRateLogger` which can be imported as `from pytorch_lightning.callbacks import LearningRateLogger` should be able to do what you ask for."
      }
    ]
  },
  {
    "number": 2451,
    "title": "how to use custom dataset in pytorch-lightning module as I am encountering an error \"AttributeError: 'str' object has no attribute 'size'\"",
    "created_at": "2020-07-01T13:42:42Z",
    "closed_at": "2020-07-30T21:51:56Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/Lightning-AI/pytorch-lightning/issues/2451",
    "body": "## \u2753 Questions and Help\r\n\r\n\r\n\r\n#### how to use custom dataset in pytorch-lightning module as I am encountering an error \"AttributeError: 'str' object has no attribute 'size'\"?\r\n\r\n#### Code\r\n\r\n\r\nclass CustomDataset(Dataset):\r\n       def read_data_set(self):\r\n       all_img_files = []\r\n       all_labels = []\r\n\r\n    class_names = os.walk(self.data_set_path).__next__()[1]\r\n    \r\n    for index, class_name in enumerate(class_names):\r\n        label = index\r\n        img_dir = os.path.join(self.data_set_path, class_name)\r\n        img_files = os.walk(img_dir).__next__()[2]\r\n        \r\n        \r\n        for img_file in img_files:\r\n            img_file = os.path.join(img_dir, img_file)\r\n            img = Image.open(img_file)\r\n            if img is not None:\r\n                all_img_files.append(img_file)\r\n                all_labels.append(label)\r\n                \r\n    return all_img_files, all_labels, len(all_img_files), len(class_names)\r\n\r\ndef __init__(self, data_set_path, transforms=None):\r\n    self.data_set_path = data_set_path\r\n    self.image_files_path, self.labels, self.length, self.num_classes = self.read_data_set()\r\n    self.transforms = transforms\r\n    \r\ndef __getitem__(self, index):\r\n    image = Image.open(self.image_files_path[index])\r\n    image = image.convert(\"RGB\")\r\n    \r\n    if self.transforms is not None:\r\n        image = self.transforms(image)\r\n        \r\n    return {'image': image, 'label': self.labels[index]}\r\n\r\ndef __len__(self):\r\n    return self.length\r\nclass MNISTClassifier(LightningModule):\r\ndef init(self):\r\nsuper(MNISTClassifier, self).init()\r\nself.layer_1 = torch.nn.Linear(28*28, 128)\r\nself.layer_2 = torch.nn.Linear(128, 256)\r\nself.layer_3 = torch.nn.Linear(256, 10)\r\n\r\ndef forward(self, x):\r\n    batch_size, channels, width, height = x.size()\r\n    \r\n    #(b_s, 1, 28, 28)\r\n    x = x.view(batch_size, -1)\r\n    \r\n    #layer1\r\n    x = self.layer_1(x)\r\n    x = torch.relu(x)\r\n    \r\n    #layer2\r\n    x = self.layer_2(x)\r\n    x = torch.relu(x)\r\n    \r\n    #layer3\r\n    x = self.layer_3()\r\n    \r\n    #probability distribution over labels\r\n    x = torch.log_softmax(x, dim = 1)\r\n    \r\n    return x\r\n\r\n\r\ndef cross_entropy_loss(self, logits, labels):\r\n    return F.null_loss(logits, labels)\r\n\r\n\r\ndef training_step(self, train_batch, batch_idx):\r\n    x, y = train_batch\r\n    logits = self.forward(x.size())\r\n    loss = self.cross_entropy_loss(logits, y)\r\n    \r\n    logs = {'train_loss': loss}\r\n    return {'loss': loss, 'log':logs}\r\n\r\n\r\n\r\n\r\ndef test_step(self, test_batch, batch_idx):\r\n    x, y = test_batch\r\n    logits = self.forward(x.size())\r\n    loss = self.cross_entropy_loss(logits, y)\r\n    \r\n    logs = {'test_loss:': loss}\r\n    return {'val_loss': loss, 'log':logs}\r\n\r\n \r\ndef train_dataloader(self):\r\n    dataset = CustomDataset(data_set_path='./files/MNIST/mnist_png/mnist_png/training/', transforms=transforms.ToTensor())\r\n    train_loader = DataLoader(dataset, batch_size=32, num_workers=4, shuffle=True)\r\n    return train_loader\r\n\r\n\r\n\r\ndef test_dataloader(self):\r\n    dataset = CustomDataset(data_set_path='files/MNIST/mnist_png/mnist_png/testing/', transforms=transforms.ToTensor())\r\n    test_loader = DataLoader(dataset, batch_size=32, num_workers=4)\r\n    return test_loader\r\n                       \r\ndef configure_optimizers(self):\r\n    optimizer = torch.optim.Adam(self.parameters(),lr=1e-3)\r\n    return optimizer\r\nmodel = MNISTClassifier()\r\ntrainer = pl.Trainer(gpus=1, max_epochs=1)\r\ntrainer.fit(model)\r\n\r\n\r\n\r\n#### What have you tried?\r\nI am getting an error as follows:\r\nAttributeError Traceback (most recent call last)\r\nin ()\r\n8 model = MNISTClassifier()\r\n9 trainer = pl.Trainer(gpus=1, max_epochs=1)\r\n---> 10 trainer.fit(model)\r\n\r\n~/anaconda3/envs/DL_ALL2/lib/python3.6/site-packages/pytorch_lightning/trainer/trainer.py in fit(self, model, train_dataloader, val_dataloaders)\r\n763\r\n764 elif self.single_gpu:\r\n--> 765 self.single_gpu_train(model)\r\n766\r\n767 elif self.use_tpu: # pragma: no-cover\r\n\r\n~/anaconda3/envs/DL_ALL2/lib/python3.6/site-packages/pytorch_lightning/trainer/distrib_parts.py in single_gpu_train(self, model)\r\n490 self.optimizers = optimizers\r\n491\r\n--> 492 self.run_pretrain_routine(model)\r\n493\r\n494 def tpu_train(self, tpu_core_idx, model):\r\n\r\n~/anaconda3/envs/DL_ALL2/lib/python3.6/site-packages/pytorch_lightning/trainer/trainer.py in run_pretrain_routine(self, model)\r\n911\r\n912 # CORE TRAINING LOOP\r\n--> 913 self.train()\r\n914\r\n915 def test(self, model: Optional[LightningModule] = None, test_dataloaders: Optional[DataLoader] = None):\r\n\r\n~/anaconda3/envs/DL_ALL2/lib/python3.6/site-packages/pytorch_lightning/trainer/training_loop.py in train(self)\r\n345 # RUN TNG EPOCH\r\n346 # -----------------\r\n--> 347 self.run_training_epoch()\r\n348\r\n349 # update LR schedulers\r\n\r\n~/anaconda3/envs/DL_ALL2/lib/python3.6/site-packages/pytorch_lightning/trainer/training_loop.py in run_training_epoch(self)\r\n417 # RUN TRAIN STEP\r\n418 # ---------------\r\n--> 419 _outputs = self.run_training_batch(batch, batch_idx)\r\n420 batch_result, grad_norm_dic, batch_step_metrics, batch_output = _outputs\r\n421\r\n\r\n~/anaconda3/envs/DL_ALL2/lib/python3.6/site-packages/pytorch_lightning/trainer/training_loop.py in run_training_batch(self, batch, batch_idx)\r\n594\r\n595 # calculate loss\r\n--> 596 loss, batch_output = optimizer_closure()\r\n597\r\n598 # check if loss or model weights are nan\r\n\r\n~/anaconda3/envs/DL_ALL2/lib/python3.6/site-packages/pytorch_lightning/trainer/training_loop.py in optimizer_closure()\r\n558 opt_idx, self.hiddens)\r\n559 else:\r\n--> 560 output_dict = self.training_forward(split_batch, batch_idx, opt_idx, self.hiddens)\r\n561\r\n562 # format and reduce outputs accordingly\r\n\r\n~/anaconda3/envs/DL_ALL2/lib/python3.6/site-packages/pytorch_lightning/trainer/training_loop.py in training_forward(self, batch, batch_idx, opt_idx, hiddens)\r\n724 batch = self.transfer_batch_to_gpu(batch, gpu_id)\r\n725 args[0] = batch\r\n--> 726 output = self.model.training_step(*args)\r\n727\r\n728 # TPU support\r\n\r\nin training_step(self, train_batch, batch_idx)\r\n36 def training_step(self, train_batch, batch_idx):\r\n37 x, y = train_batch\r\n---> 38 logits = self.forward(x.size())\r\n39 loss = self.cross_entropy_loss(logits, y)\r\n40\r\n\r\nAttributeError: 'str' object has no attribute 'size'   \r\n\r\n#### What's your environment?\r\n\r\n - OS: Ubuntu 18.04\r\n",
    "comments_url": "https://api.github.com/repos/Lightning-AI/pytorch-lightning/issues/2451/comments",
    "author": "drone-vision",
    "comments": [
      {
        "user": "rohitgr7",
        "created_at": "2020-07-01T17:09:05Z",
        "body": "@tanubapun You are sending `x.size()` in `self.forward(x.size())`. It should be `self.forward(x)`"
      },
      {
        "user": "drone-vision",
        "created_at": "2020-07-01T18:21:36Z",
        "body": "Thanks @rohitgr7 for your response. I have changed the code to  self.forward(x) still got the same error.\r\n\r\n---------------------------------------------------------------------------\r\nAttributeError                            Traceback (most recent call last)\r\n<ipython-input-8-bb768fd558f0> in <module>()\r\n      8 model = MNISTClassifier()\r\n      9 trainer = pl.Trainer(gpus=1, max_epochs=1)\r\n---> 10 trainer.fit(model)\r\n\r\n~/anaconda3/envs/DL_ALL2/lib/python3.6/site-packages/pytorch_lightning/trainer/trainer.py in fit(self, model, train_dataloader, val_dataloaders)\r\n    763 \r\n    764         elif self.single_gpu:\r\n--> 765             self.single_gpu_train(model)\r\n    766 \r\n    767         elif self.use_tpu:  # pragma: no-cover\r\n\r\n~/anaconda3/envs/DL_ALL2/lib/python3.6/site-packages/pytorch_lightning/trainer/distrib_parts.py in single_gpu_train(self, model)\r\n    490             self.optimizers = optimizers\r\n    491 \r\n--> 492         self.run_pretrain_routine(model)\r\n    493 \r\n    494     def tpu_train(self, tpu_core_idx, model):\r\n\r\n~/anaconda3/envs/DL_ALL2/lib/python3.6/site-packages/pytorch_lightning/trainer/trainer.py in run_pretrain_routine(self, model)\r\n    911 \r\n    912         # CORE TRAINING LOOP\r\n--> 913         self.train()\r\n    914 \r\n    915     def test(self, model: Optional[LightningModule] = None, test_dataloaders: Optional[DataLoader] = None):\r\n\r\n~/anaconda3/envs/DL_ALL2/lib/python3.6/site-packages/pytorch_lightning/trainer/training_loop.py in train(self)\r\n    345                 # RUN TNG EPOCH\r\n    346                 # -----------------\r\n--> 347                 self.run_training_epoch()\r\n    348 \r\n    349                 # update LR schedulers\r\n\r\n~/anaconda3/envs/DL_ALL2/lib/python3.6/site-packages/pytorch_lightning/trainer/training_loop.py in run_training_epoch(self)\r\n    417             # RUN TRAIN STEP\r\n    418             # ---------------\r\n--> 419             _outputs = self.run_training_batch(batch, batch_idx)\r\n    420             batch_result, grad_norm_dic, batch_step_metrics, batch_output = _outputs\r\n    421 \r\n\r\n~/anaconda3/envs/DL_ALL2/lib/python3.6/site-packages/pytorch_lightning/trainer/training_loop.py in run_training_batch(self, batch, batch_idx)\r\n    594 \r\n    595                 # calculate loss\r\n--> 596                 loss, batch_output = optimizer_closure()\r\n    597 \r\n    598                 # check if loss or model weights are nan\r\n\r\n~/anaconda3/envs/DL_ALL2/lib/python3.6/site-packages/pytorch_lightning/trainer/training_loop.py in optimizer_closure()\r\n    558                                                                     opt_idx, self.hiddens)\r\n    559                         else:\r\n--> 560                             output_dict = self.training_forward(split_batch, batch_idx, opt_idx, self.hiddens)\r\n    561 \r\n    562                         # format and reduce outputs accordingly\r\n\r\n~/anaconda3/envs/DL_ALL2/lib/python3.6/site-packages/pytorch_lightning/trainer/training_loop.py in training_forward(self, batch, batch_idx, opt_idx, hiddens)\r\n    724             batch = self.transfer_batch_to_gpu(batch, gpu_id)\r\n    725             args[0] = batch\r\n--> 726             output = self.model.training_step(*args)\r\n    727 \r\n    728         # TPU support\r\n\r\n<ipython-input-7-375f2fcd6b89> in training_step(self, train_batch, batch_idx)\r\n     36     def training_step(self, train_batch, batch_idx):\r\n     37         x, y = train_batch\r\n---> 38         logits = self.forward(x)\r\n     39         loss = self.cross_entropy_loss(logits, y)\r\n     40 \r\n\r\n<ipython-input-7-375f2fcd6b89> in forward(self, x)\r\n      8 \r\n      9     def forward(self, x):\r\n---> 10         batch_size, channels, width, height = x.size()\r\n     11 \r\n     12         #(b_s, 1, 28, 28)\r\n\r\nAttributeError: 'str' object has no attribute 'size'"
      },
      {
        "user": "rohitgr7",
        "created_at": "2020-07-01T18:28:19Z",
        "body": "@tanubapun Can you share the whole code in a notebook or colab or just LightningModule you created again after you made changes?"
      },
      {
        "user": "drone-vision",
        "created_at": "2020-07-01T18:50:10Z",
        "body": "Sure @rohitgr7 \r\nthis is the lightning module I am using\r\n\r\nclass MNISTClassifier(LightningModule):\r\n    def __init__(self):\r\n        super(MNISTClassifier, self).__init__()\r\n        self.layer_1 = torch.nn.Linear(28*28, 128)\r\n        self.layer_2 = torch.nn.Linear(128, 256)\r\n        self.layer_3 = torch.nn.Linear(256, 10)\r\n        \r\n        \r\n    def forward(self, x):\r\n        batch_size, channels, width, height = x.size()\r\n        \r\n        #(b_s, 1, 28, 28)\r\n        x = x.view(batch_size, -1)\r\n        \r\n        #layer1\r\n        x = self.layer_1(x)\r\n        x = torch.relu(x)\r\n        \r\n        #layer2\r\n        x = self.layer_2(x)\r\n        x = torch.relu(x)\r\n        \r\n        #layer3\r\n        x = self.layer_3()\r\n        \r\n        #probability distribution over labels\r\n        x = torch.log_softmax(x, dim = 1)\r\n        \r\n        return x\r\n    \r\n    \r\n    def cross_entropy_loss(self, logits, labels):\r\n        return F.null_loss(logits, labels)\r\n    \r\n    \r\n    def training_step(self, train_batch, batch_idx):\r\n        x, y = train_batch\r\n        logits = self.forward(x)\r\n        loss = self.cross_entropy_loss(logits, y)\r\n        \r\n        logs = {'train_loss': loss}\r\n        return {'loss': loss, 'log':logs}\r\n    \r\n    \r\n    \r\n    def test_step(self, test_batch, batch_idx):\r\n        x, y = test_batch\r\n        logits = self.forward(x)\r\n        loss = self.cross_entropy_loss(logits, y)\r\n        \r\n        logs = {'test_loss:': loss}\r\n        return {'val_loss': loss, 'log':logs}\r\n    \r\n\r\n    def train_dataloader(self):\r\n        dataset = CustomDataset(data_set_path='./files/MNIST/mnist_png/mnist_png/training/', transforms=transforms.ToTensor())\r\n        train_loader = DataLoader(dataset, batch_size=32, num_workers=4, shuffle=True)\r\n        return train_loader\r\n\r\n    \r\n    def test_dataloader(self):\r\n        dataset = CustomDataset(data_set_path='files/MNIST/mnist_png/mnist_png/testing/', transforms=transforms.ToTensor())\r\n        test_loader = DataLoader(dataset, batch_size=32, num_workers=4)\r\n        return test_loader\r\n                           \r\n    def configure_optimizers(self):\r\n        optimizer = torch.optim.Adam(self.parameters(),lr=1e-3)\r\n        return optimizer\r\n        "
      },
      {
        "user": "rohitgr7",
        "created_at": "2020-07-01T19:04:48Z",
        "body": "@tanubapun In `__getitem__` of your `CustomDataset` you are returning `{'image': image, 'label': self.labels[index]}` but you are using `x, y = train_batch`. Your `train_batch` is still a `dict` here just that pytorch `collate_fn` create a batch in the values of this dict. Either return `image, self.labels[index]` or use `x, y= train_batch['image'], train_batch['label']`. Also change in `validation_step` and `test_step` accordingly.\r\n"
      }
    ]
  },
  {
    "number": 2404,
    "title": "Will load_from_checkpoint load Huggingface models as well? ",
    "created_at": "2020-06-28T20:12:31Z",
    "closed_at": "2020-07-01T09:13:57Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/Lightning-AI/pytorch-lightning/issues/2404",
    "body": "#### What is your question?\r\n\r\nJust wanted to know will using the `load_from_checkpoint` for a `LightningModule` load the state_dict for the **HuggingFace** models as well?\r\n\r\nEg: for the given example in the docs, will state_dict be loaded for `BertModel.from_pretrained` thing as well? \r\nIdeally, `load_from_checkpoint` should load state_dict for Bert as well like `BertModel.from_pretrained(same_checkpoint)` would do.\r\n\r\n#### Code\r\n```\r\nclass BertMNLIFinetuner(LightningModule):\r\n\r\n    def __init__(self):\r\n        super().__init__()\r\n\r\n        self.bert = BertModel.from_pretrained('bert-base-cased', output_attentions=True)\r\n        self.W = nn.Linear(bert.config.hidden_size, 3)\r\n        self.num_classes = 3\r\n\r\n\r\n    def forward(self, input_ids, attention_mask, token_type_ids):\r\n\r\n        h, _, attn = self.bert(input_ids=input_ids,\r\n                         attention_mask=attention_mask,\r\n                         token_type_ids=token_type_ids)\r\n\r\n        h_cls = h[:, 0]\r\n        logits = self.W(h_cls)\r\n        return logits, attn\r\n``` ",
    "comments_url": "https://api.github.com/repos/Lightning-AI/pytorch-lightning/issues/2404/comments",
    "author": "vibhavagarwal5",
    "comments": [
      {
        "user": "dscarmo",
        "created_at": "2020-06-28T21:26:32Z",
        "body": "When working with the Hugging Face library i just store the model string (in this case best-base-cased) as an hparam."
      },
      {
        "user": "vibhavagarwal5",
        "created_at": "2020-06-28T22:00:54Z",
        "body": "Sure, that is fine. I think you misunderstood my question. Will the state_dict from the checkpoint (using `load_from_checkpoint`) load the bert model as well or not? Or will I have to load it explicitly using `model.from_pretrained(checkpoint_path)` ?"
      },
      {
        "user": "awaelchli",
        "created_at": "2020-06-28T22:17:10Z",
        "body": "I don't know this Bert stuff , but if it helps:\r\n`Model.load_from_checkpoint()` will init your model with the args and kwargs from the checkpoint and then call `model.load_state_dict` to load the model weights as you would do in pure PyTorch.\r\nSo, if your` self.bert` is a `nn.Module` , then that will have the parameters loaded as well. "
      },
      {
        "user": "dscarmo",
        "created_at": "2020-06-28T22:20:43Z",
        "body": "Oh now i understand. The updated weights of your whole trained lightning module (including bert since it is a nn.Module) will be loaded. Now I am just wondering if init's `from_pretrained`  will overwrite your trained weights? \r\n\r\nI hope PL will only load the trained weights after init runs."
      },
      {
        "user": "awaelchli",
        "created_at": "2020-06-28T22:33:56Z",
        "body": "yes, so the from_pretrained will run first and load your pretrained weights (since it's in the init). and then the load_state dict will overwrite them again with the weights from the checkpoint. \r\n\r\nI encourage you to make a sanity check and not blindly believe me :), for example, you could load your checkpoint manually and replace all weights with ones and then save it again. Then load the checkpoint again using pytorch lightning and print the weights of the loaded model."
      },
      {
        "user": "vibhavagarwal5",
        "created_at": "2020-06-29T04:52:30Z",
        "body": "My guess is the same that after from_pretrained weights are loaded, checkpoints weights override them.  Which makes sense. "
      },
      {
        "user": "vibhavagarwal5",
        "created_at": "2020-06-29T04:56:17Z",
        "body": "Another doubt, do the checkpoints save all sorts of callbacks as well? Coz I don't see it in the dict keys when I do torch.load(chckpoint). "
      },
      {
        "user": "awaelchli",
        "created_at": "2020-06-29T05:04:13Z",
        "body": "we do that for early stopping and model checkpoint (see v0.8.2), but not for your custom callbacks. We recently discussed how to do that, here is an open discussion #2401 . "
      },
      {
        "user": "vibhavagarwal5",
        "created_at": "2020-06-29T05:17:51Z",
        "body": "v.0.8.2 is not released yet right? "
      }
    ]
  },
  {
    "number": 2370,
    "title": "Access the logging directory through LightningModule or Trainer",
    "created_at": "2020-06-26T09:25:06Z",
    "closed_at": "2020-06-27T12:26:34Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/Lightning-AI/pytorch-lightning/issues/2370",
    "body": "Is there a way to access the current logging directory (e.g., lightning_logs/version_x)? I've searched the documentation and the source code but haven't found a solution yet.\r\n\r\nI want to save some intermediate raw tensors to that directory.\r\n\r\nThanks,\r\nDavid",
    "comments_url": "https://api.github.com/repos/Lightning-AI/pytorch-lightning/issues/2370/comments",
    "author": "DavidRuhe",
    "comments": [
      {
        "user": "rohitgr7",
        "created_at": "2020-06-26T20:35:57Z",
        "body": "For tensorboard I think you can use `self.logger.log_dir`, not sure about others. I think this property should be present for all the available loggers if possible."
      }
    ]
  },
  {
    "number": 2310,
    "title": "how to train a network that doesn't require any training data",
    "created_at": "2020-06-21T22:46:58Z",
    "closed_at": "2020-06-23T18:46:56Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/Lightning-AI/pytorch-lightning/issues/2310",
    "body": "The Wake-Sleep algorithm doesn't require any data during the sleep phase (effectively it generates it's own data). pytorch-lightning, however, appears to require a `train_dataloader()` method.\r\n\r\nThe only way I have to make pytorch-lightning run at all (for this admitted unusual case) is to specify some dummy dataset in `train_dataloader`, and then to ignore the data that gets passed to `training_step`. But I don't like that cycles are spent iterating through irrelevant data then. Is there a more elegant way?\r\n\r\nI considered defining my own custom `DataLoader` that returns the simulated data that the sleep phase uses, but this started seeming like even more of a hack than the previous solution. After all, my \"dataloader\" doesn't load any data; it effectively generates new data every \"epoch\". It's seems unnatural to split the sleep phase updates in this way.\r\n\r\nIs there a more straightforward way in lightning to train a network that doesn't require any data? Thanks!",
    "comments_url": "https://api.github.com/repos/Lightning-AI/pytorch-lightning/issues/2310/comments",
    "author": "jeff-regier",
    "comments": [
      {
        "user": "awaelchli",
        "created_at": "2020-06-23T17:00:36Z",
        "body": "Why is it not possible for you to write a Dataset class that generates the data? You mention you already have code for generating the data, so why not wrap it into a Dataset class?"
      },
      {
        "user": "jeff-regier",
        "created_at": "2020-06-23T18:46:56Z",
        "body": "I had been concerned that the Dataset class would shuffle the data unnecessarily, thus slowing down training. But an `IterableDataset` seems to work: the `__iter__` method is overridden to return an iterator that yields a whole batch at once. Maybe this is the best way."
      },
      {
        "user": "awaelchli",
        "created_at": "2020-06-23T18:53:43Z",
        "body": "No, that is simply not true. The Dataloader is doing the batching and shuffling, not the dataset. Besides, shuffling does not slow training down. If your dataset has an undefined or infinite length, use the IterableDataset, otherwise use the regular Dataset class. Once you have that, just pass it to the Dataloader. All of this is regular PyTorch :)"
      }
    ]
  },
  {
    "number": 2308,
    "title": "How to make inference right",
    "created_at": "2020-06-21T19:30:23Z",
    "closed_at": "2020-06-24T22:31:40Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/Lightning-AI/pytorch-lightning/issues/2308",
    "body": "Hello everyone. I'm new to pytorch-lightning, but already excited with this framework. It's very convenient to train my models using lightning. Now my usecase is: I have trained my model and want to do inference on my test data and get results (for example, in csv format). I'd like to do my inference pytorch-lightning-way. What is the best practice to do it?   \r\n\r\n### Before asking:   \r\n1. search the issues.   \r\n2. search the docs.    \r\n\r\n#### What's your environment?\r\n\r\n - OS: [Linux]\r\n - Packaging [pip]\r\n - Version [0.8.1]\r\n",
    "comments_url": "https://api.github.com/repos/Lightning-AI/pytorch-lightning/issues/2308/comments",
    "author": "Podidiving",
    "comments": [
      {
        "user": "versatran01",
        "created_at": "2020-06-24T16:10:14Z",
        "body": "My understanding is that you just load the module and call freeze() on it and use it as any nn.Module"
      },
      {
        "user": "rohitgr7",
        "created_at": "2020-06-24T19:50:09Z",
        "body": "You don't need to freeze(). Just run with `torch.no_grad()` or set `torch.set_grad_enabled(False)`."
      },
      {
        "user": "Podidiving",
        "created_at": "2020-06-24T20:01:59Z",
        "body": "I think, one of the coolest features of lightning is that your don\u2019t need to specify your device (devices)\nIf you using LightningModule as plain nn.Module you should transfer your model and batches on devices manually, am I right? \nSo, I have my trained model. I\u2019d like to make inference on test data. I can define test_step and aggregate results in on_test_epoch_end, but I cannot run Trainer without train stage. Can I get around this somehow?"
      },
      {
        "user": "rohitgr7",
        "created_at": "2020-06-24T20:08:49Z",
        "body": "`test_step` and `test_epoch_end` are called with `trainer.test()`. AFAIK, these methods are used just to evaluate your test dataset and not return any logits. If you want to do just this evaluation, you don't have to do the transfer of model or batches. But I think if you want to get the logits from the model you need to do it manually just like a vanilla PyTorch model."
      },
      {
        "user": "Podidiving",
        "created_at": "2020-06-24T20:16:58Z",
        "body": "Ok, thanks, didn\u2019t know about `test` method! I think, if you want to make some kind of submission data, you can return logits from `test_step` method in dict object, and then aggregate and save them in `test_epoch_end`  "
      }
    ]
  },
  {
    "number": 2263,
    "title": "Full batch training",
    "created_at": "2020-06-19T06:19:52Z",
    "closed_at": "2020-06-19T12:27:00Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/Lightning-AI/pytorch-lightning/issues/2263",
    "body": "## \u2753 Questions and Help\r\n\r\nFor smaller datasets, it makes sense to do full batch training, not minibatch. How do you implement fullbatch training in pytorch lightning, given that train and validation might be different sizes?\r\n",
    "comments_url": "https://api.github.com/repos/Lightning-AI/pytorch-lightning/issues/2263/comments",
    "author": "turian",
    "comments": [
      {
        "user": "williamFalcon",
        "created_at": "2020-06-19T06:28:02Z",
        "body": "what do you mean by full batch training?\r\n\r\nThis is not lightning specific though... this is pytorch\r\n\r\n```\r\nDataloader(..., batch_size=1)\r\nDataloader(..., batch_size=32)\r\nDataloader(..., batch_size=len(dataset))\r\n```"
      }
    ]
  },
  {
    "number": 2179,
    "title": "train_percent_check as a method for reducing train data size.",
    "created_at": "2020-06-14T09:54:51Z",
    "closed_at": "2020-06-15T17:27:34Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/Lightning-AI/pytorch-lightning/issues/2179",
    "body": "## \u2753 Question\r\n\r\n<!-- If you still can't find what you need: -->\r\n\r\n#### What is your question?\r\nWhen we use `train_percent_check=x` while training does it uses the same x per cent of data in every epoch?\r\nCan it be used as a method for making total data size short during training? \r\n\r\n#### Code\r\n\r\n`Trainer(gpus=4,max_epochs=20,train_percent_check=.2,log_gpu_memory=True,weights_summary=None)`\r\n\r\n\r\n",
    "comments_url": "https://api.github.com/repos/Lightning-AI/pytorch-lightning/issues/2179/comments",
    "author": "Nilanshrajput",
    "comments": [
      {
        "user": "awaelchli",
        "created_at": "2020-06-15T05:34:43Z",
        "body": "> When we use train_percent_check=x while training does it uses the same x per cent of data in every epoch?\r\n\r\nYes, if you set shuffle=False in your dataloader, otherwise it will sample a different subset of data every epoch.\r\n\r\n> Can it be used as a method for making total data size short during training?\r\n\r\nYes, that's what it is meant for. You can for example use it to sanity check that your model can overfit to the data.\r\n\r\n"
      },
      {
        "user": "Nilanshrajput",
        "created_at": "2020-06-15T10:39:28Z",
        "body": "What I meant was, even id don't put shuffle=False, defining a train_percent should shuffle into that first x per cent of training data every epoch. So essentially it's like our training data is cut off to x per cent, and everything else remain the same."
      },
      {
        "user": "awaelchli",
        "created_at": "2020-06-15T10:45:30Z",
        "body": "Yes exactly, `train_percent_check=0.5` means use 50% of the dataset in the train_dataloader, for example. And this will be 50% every epoch."
      }
    ]
  },
  {
    "number": 2102,
    "title": "Validation step metrics not logged",
    "created_at": "2020-06-07T05:28:55Z",
    "closed_at": "2020-08-16T18:30:40Z",
    "labels": [
      "question",
      "won't fix"
    ],
    "url": "https://github.com/Lightning-AI/pytorch-lightning/issues/2102",
    "body": "## \u2753 Questions and Help\r\n\r\nIt seems like data output in the `validation_step` does not get logged to tensorboard, it needs to be aggregated first in the `validation_epoch_end`, which is not the case for `training_step`.\r\n\r\nThe below would only show `val_loss` and only aggregated but all of `mae`, `mape` etc from every iteration.\r\n\r\nAs a workaround I could explicitly log, but how do I get the current iteration in the callbacks I only see how to get the current epoch.\r\n\r\n```\r\n    def step(self, y_hat, y, mode='train'):\r\n        loss = F.mse_loss(y_hat, y)\r\n        mae = F.l1_loss(y_hat, y)\r\n        mape = median_absolute_percentage_error(y_hat, y)\r\n        r2 = r2_score(y_hat, y)\r\n        out = {'loss': loss, 'mae': mae, 'mape': mape, 'R2': r2}\r\n        if mode=='train':\r\n            out['log'] = out.copy()\r\n            return out\r\n        elif mode =='val':\r\n            out = {f'{mode}_{k}': v for k,v in out.items()}\r\n            out['log'] = out.copy()\r\n            return out\r\n        else:\r\n            raise Exception('Unsupported mode')\r\n    def validation_step(self, batch, batch_idx):\r\n        x, y = batch\r\n        y_hat = self(x)\r\n        return self.step(y_hat, y, 'val')\r\n\r\n    def validation_epoch_end(self, outputs):\r\n        avg_loss = torch.stack([x['val_loss'] for x in outputs]).mean()\r\n        avg_loss = torch.stack([x['val_loss'] for x in outputs]).mean()\r\n        tensorboard_logs = {'val_loss': avg_loss}\r\n        return {'val_loss': avg_loss, 'log': tensorboard_logs}\r\n```",
    "comments_url": "https://api.github.com/repos/Lightning-AI/pytorch-lightning/issues/2102/comments",
    "author": "feribg",
    "comments": [
      {
        "user": "awaelchli",
        "created_at": "2020-06-07T18:28:38Z",
        "body": "you can get the current step with `self.global_step` or self.trainer.global_step\r\n\r\nyes, it's true you can manually log it yourself, but there is a reason why we don't log each step of the validation, because the loggers (all as far as I know) use a global step for logging, and this means if your training epoch has n bathces, and your validation has m batches, after the first epoch you will log\r\nn + m steps for training + validation and then your training loss will contingue with step n+m+1 instead of n+1 for epoch 2. You will see a  big jump in the visualization.\r\n\r\nTensorBoard is too limited, you cannot set the abscissa to anything else than the step (as far as I know). Therefore logging validation step makes no sense."
      },
      {
        "user": "feribg",
        "created_at": "2020-06-07T22:34:09Z",
        "body": "To your point re the step # being inconsistent, I'm not sure why that would be the case when the `val` metrics are always prefixed with `val_` so you will get `m` number of `val_...` metric for each validatio epoch, right? I'm struggling to understand where the mixup between train and valid comes into play when they are namespaced differently  and stored as different metrics?"
      },
      {
        "user": "awaelchli",
        "created_at": "2020-06-07T22:53:09Z",
        "body": "epoch 1 starts\r\nbatch 1: train_loss = ... gloabal_step = 1\r\nbatch 2: train_loss = ... gloabal_step = 2\r\nbatch 3: train_loss = ... gloabal_step = 3\r\nvalidation starts\r\nbatch 1: val_loss = ... gloabal_step = 4\r\nbatch 2: val_loss = ... gloabal_step = 5\r\nepoch 2 starts\r\nbatch 1: train_loss = ... **gloabal_step =6**\r\nbatch 2: train_loss = ... **gloabal_step = 7**\r\nbatch 3: train_loss = ... **gloabal_step = 8**\r\n\r\ntry it yourself :)\r\n\r\nthis is a limitation of the loggers, which cannot log to the past history, only at the current global step."
      },
      {
        "user": "awaelchli",
        "created_at": "2020-06-07T23:08:38Z",
        "body": "why do you need to log every validation step anyway? it's not going to tell you much about your validation results"
      }
    ]
  },
  {
    "number": 2045,
    "title": "2 optimizers : skip updates for the second optim",
    "created_at": "2020-06-01T22:16:04Z",
    "closed_at": "2020-06-02T19:00:01Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/Lightning-AI/pytorch-lightning/issues/2045",
    "body": "## \u2753 Questions and Help\r\n\r\n#### What is your question?\r\nI have a model with 2 optimizers : one for the backbone weight and second for \"backbone support\" weights. However, 2nd optimizer should only accumulate grads through the whole epoch and perform one update at the epoch end. \r\n\r\nLightning keeps asking for an output for the 2nd optimizer, but there is nothing to output in addition to the first optimizer results. How can I bypass this ?\r\n\r\n#### Code\r\nHere are defined the training_step and optimizer_step functions to illustrate my issue.\r\n```\r\ndef training_step(self, batch, batch_idx, optimizer_idx):\r\n        if optimizer_idx == 0:\r\n            images, target = batch\r\n            output = self(images)\r\n            loss_val = F.cross_entropy(output, target)\r\n            acc1, acc5 = self.__accuracy(output, target, topk=(1, 5))\r\n            weight_cons, act_cons, weight_p_c_cons = self.normalized_consumption()\r\n\r\n            tqdm_dict = {'Loss/train_loss': loss_val, \r\n                        'Acc/acc1': acc1,\r\n                        'Acc/acc5': acc5,}\r\n            output = OrderedDict({\r\n                'loss': loss_val,\r\n                'Loss/loss': loss_val,\r\n                'Acc/acc1': acc1,\r\n                'Acc/acc5': acc5,\r\n                'progress_bar': tqdm_dict,\r\n                'log': tqdm_dict\r\n            })\r\n            return output\r\n     if optimizer_idx == 1:\r\n         # Do nothing ?\r\n\r\ndef optimizer_step(self, current_epoch, batch_nb, optimizer, optimizer_i, second_order_closure=None):\r\n        if optimizer_i == 0:\r\n            optimizer.step()\r\n            optimizer.zero_grad()\r\n\r\n        # update 2nd optimizer at the end of the epoch\r\n        if optimizer_i == 1 and self.__nbbatch -1 <= batch_nb:\r\n            optimizer.step()\r\n            optimizer.zero_grad()\r\n```\r\n<!-- Please paste a code snippet if your question requires it! -->   \r\n\r\n#### What have you tried?\r\nI tried to pass an empty output dict in training_step if the optimizer_idx == 1. However, Lightning complains that the dict is empty (`trainer/logging.py:106` -> `Nonetype has no attribute 'items'`)\r\n#### What's your environment?\r\n\r\n - OS: Linux\r\n - Packaging pip\r\n - Version 0.7.5\r\n",
    "comments_url": "https://api.github.com/repos/Lightning-AI/pytorch-lightning/issues/2045/comments",
    "author": "sebastienwood",
    "comments": [
      {
        "user": "williamFalcon",
        "created_at": "2020-06-01T22:18:20Z",
        "body": "override the backward pass. \r\ncheck the current batch idx and don\u2019t apply the backward step until the end of the epoch"
      },
      {
        "user": "sebastienwood",
        "created_at": "2020-06-02T19:00:01Z",
        "body": "I managed to make it works thanks :) \r\nI had to also return a dummy `loss` for the 2nd optimizer that lightning really wanted to have (as usual in an ordered dict)\r\n\r\nAs a side note, a strange issue (that has probably nothing to do with Lightning) is that a custom function stopped receiving the backward call when using two optimizers. "
      }
    ]
  },
  {
    "number": 1988,
    "title": "Stopping the code along with a graceful shutdown.",
    "created_at": "2020-05-28T16:12:51Z",
    "closed_at": "2020-05-29T07:27:22Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/Lightning-AI/pytorch-lightning/issues/1988",
    "body": "##\r\nIs there a way to stop the training in the model when some criteria are satisfied. Something along the lines:\r\n```\r\nclass myCallback(Callback):\r\n    def __init__(self):\r\n        ...\r\n    def on_epoch_end(self, trainer, pl_module):\r\n        if criteria:\r\n            model.stop_training = True # stops the training; need help here\r\n```\r\nNote that I also want to have the early stopping feature where the 'val_loss' is monitored but want to stop running the code if some other criteria is satisfied. Also, is my method of having this feature in the callback module correct or should I inherit the early stopping criteria?",
    "comments_url": "https://api.github.com/repos/Lightning-AI/pytorch-lightning/issues/1988/comments",
    "author": "nsidn98",
    "comments": [
      {
        "user": "awaelchli",
        "created_at": "2020-05-28T22:44:58Z",
        "body": "You could raise KeyboardInterrupt, this will lead to a graceful shutdown. There is some work in progress in this PR:\r\n#1631 \r\nBut it should already work if you raise it from within your code"
      }
    ]
  },
  {
    "number": 1982,
    "title": "Is there a way to make the Trainer skip loading optimizer from a checkpoint?",
    "created_at": "2020-05-28T12:01:42Z",
    "closed_at": "2020-05-29T10:41:30Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/Lightning-AI/pytorch-lightning/issues/1982",
    "body": "Use case is if I want to load a model's weights but reset the the optimizer state. Is there a flag I can pass that skips loading the optimizer?",
    "comments_url": "https://api.github.com/repos/Lightning-AI/pytorch-lightning/issues/1982/comments",
    "author": "nihalsid",
    "comments": [
      {
        "user": "awaelchli",
        "created_at": "2020-05-28T22:50:59Z",
        "body": "There is no flag but you could implement the model hook on_load_checkpoint and reset the optimizer yourself."
      },
      {
        "user": "colllin",
        "created_at": "2021-10-19T01:20:30Z",
        "body": "Can you clarify how to accomplish this?  I'd need to save a reference to the optimizer within `configure_optimizers`, e.g. `self.optim = whatever; return self.optim`, right?  Then in `on_load_checkpoint`, I'd... need to manually clear the optimizer state?  Is that easy to do?  If I'm understanding correctly, I can't simply re-init a fresh optimizer, since I already returned it from `configure_optimizers` and a reference was saved somewhere."
      },
      {
        "user": "colllin",
        "created_at": "2021-10-19T01:29:17Z",
        "body": "I think you can accomplish it this way without needing to know any of the optimizer's implementation details:\r\n```\r\n    # in your lightning module...\r\n    def on_load_checkpoint(self, checkpoint):\r\n        fresh_optimizer = Adam(...)\r\n        self.my_optimizer.load_state_dict(fresh_optimizer.state_dict())\r\n```"
      },
      {
        "user": "colllin",
        "created_at": "2021-10-19T01:52:47Z",
        "body": "I think I was confused about the difference between `Trainer(resume_from_checkpoint=\"...\")` vs. `LitModule.load_from_checkpoint(\"...\")`, and the docs could probably be improved here.\r\n\r\nIt appears that `LightningModule.load_from_checkpoint` doesn't even instantiate your optimizers, because only the `Trainer` does that.  Therefore, I believe:\r\n- you MUST use the Trainer's `resume_from_checkpoint` arg if you want to re-load the optimizer state (and other training state), and \r\n- you NEED NOT WORRY about accidentally loading other training state when calling `LightningModule.load_from_checkpoint`, because the lightning module isn't responsible for training state in the first place.\r\n\r\nPlease help me out if I didn't arrive at the correct conclusion."
      },
      {
        "user": "YJ-20",
        "created_at": "2024-03-19T01:30:29Z",
        "body": "If you want to reset the optimizer state in `lightning`, you can use `on_load_checkpoint` as like this.\r\n```python\r\ndef on_load_checkpoint(self, checkpoint):\r\n    checkpoint[\"optimizer_states\"] = []\r\n```"
      },
      {
        "user": "marz869",
        "created_at": "2024-03-22T17:08:12Z",
        "body": "> I think I was confused about the difference between `Trainer(resume_from_checkpoint=\"...\")` vs. `LitModule.load_from_checkpoint(\"...\")`, and the docs could probably be improved here.\r\n> \r\n> It appears that `LightningModule.load_from_checkpoint` doesn't even instantiate your optimizers, because only the `Trainer` does that. Therefore, I believe:\r\n> \r\n>     * you MUST use the Trainer's `resume_from_checkpoint` arg if you want to re-load the optimizer state (and other training state), and\r\n> \r\n>     * you NEED NOT WORRY about accidentally loading other training state when calling `LightningModule.load_from_checkpoint`, because the lightning module isn't responsible for training state in the first place.\r\n> \r\n> \r\n> Please help me out if I didn't arrive at the correct conclusion.\r\n\r\n@colllin LightningModule.load_from_checkpoint re_load optimizer, but resume_from_checkpoint, reload epoch and global step...and reset the optimizer!! So if I have a checkpoint with all states(lr scheduler, epoch, global step, ...) if I do LightningModule.load_from_checkpoint, it re_loads optimizer, lr scheduler and optimizer works as I expect, but epoch and global step is set to 0. And if in the next line I load checkpoints again in trainer.fit, then I can continue training the model from last epoch, but optimizer is reset, and lr_scheduler does not work at all!!"
      }
    ]
  },
  {
    "number": 1980,
    "title": "Collect all  losses into a list?",
    "created_at": "2020-05-28T10:09:45Z",
    "closed_at": "2020-05-29T23:08:56Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/Lightning-AI/pytorch-lightning/issues/1980",
    "body": "What's the easiest way to return a list with all my losses in it? Note: I don't want to log it, but I want to have a list that I can plot in altair after training is done.\r\n\r\nCurrently, I'm maintaining a list outside the lightning module:\r\n\r\n```\r\nlosses = [] # <-- this one\r\n...\r\n\r\nclass MyModule(LightningModule):\r\n    def validation_epoch_end(self, outputs):\r\n            avg_loss = torch.stack([ x['val_loss'] for x in outputs ]).mean()\r\n            correct = sum([ x['correct'] for x in outputs])\r\n            accuracy = float(correct) / len(outputs)\r\n            losses.append(avg_loss)   # <--- append to outside var here\r\n            \r\n            return {'avg_loss' : avg_loss, 'accuracy': accuracy, 'log' : {'val_loss': avg_loss, 'accuracy': accuracy}}\r\n```\r\n\r\nIs there a \"lightning\" way of doing this?",
    "comments_url": "https://api.github.com/repos/Lightning-AI/pytorch-lightning/issues/1980/comments",
    "author": "drozzy",
    "comments": [
      {
        "user": "awaelchli",
        "created_at": "2020-05-28T22:53:41Z",
        "body": "Why not save it into an attribute self.losses and then have it accessible via model.losses from outside?"
      }
    ]
  },
  {
    "number": 1979,
    "title": "Dynamically change optimizer frequency",
    "created_at": "2020-05-28T08:42:13Z",
    "closed_at": "2020-05-28T12:09:29Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/Lightning-AI/pytorch-lightning/issues/1979",
    "body": "## \u2753 Questions and Help\r\n\r\n#### What is your question?\r\nI have a WGAN and the ratio between iterations on the discriminator and on the generator is fixed at 5:1. I accomplished this by passing the frequency parameter in the `configure_optimizers` method\r\n```\r\nres_1 = {\r\n            'optimizer': optimizer_d,\r\n            'frequency': 5,\r\n            'lr_scheduler': scheduler_d\r\n        }\r\n```\r\nsame for generator\r\n```\r\nres_2 = {\r\n            'optimizer': optimizer_g,\r\n            'frequency': 1, \r\n            'lr_scheduler': scheduler_g\r\n        }\r\n```\r\n\r\nHow can I dynamically change the `frequency` parameter, such that for the first `n` iterations I have a frequency `x` and after I have a frequency `y`.\r\n\r\n#### Code\r\n\r\nDon't know how to do it.\r\n\r\n#### What have you tried?\r\n\r\n#### What's your environment?\r\n\r\n - OS: OS independent\r\n - Packaging: pip\r\n - Version: 0.7.6\r\n",
    "comments_url": "https://api.github.com/repos/Lightning-AI/pytorch-lightning/issues/1979/comments",
    "author": "lucadiliello",
    "comments": [
      {
        "user": "SkafteNicki",
        "created_at": "2020-05-28T12:04:45Z",
        "body": "There is no official way of doing this. However, this can be achieved using a `Callback` to change the `Trainer` attribute `optimizer_frequencies`. So if you define callback like this:\r\n```\r\nclass DynamicOptimizerFrequency(Callback):\r\n    def on_epoch_end(self, trainer, model):\r\n           if trainer.current_epoch >10:\r\n               trainer.optimizer_frequency = [3,1]\r\n           if trainer.current_epoch > 20:\r\n               trainer.optimizer_frequency = [2,1]\r\n```\r\nwhere you change the code to however dynamically you want to change the frequencies. "
      }
    ]
  },
  {
    "number": 1930,
    "title": "How to access training and validation losses from callbacks? ",
    "created_at": "2020-05-23T08:45:53Z",
    "closed_at": "2020-05-23T18:52:35Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/Lightning-AI/pytorch-lightning/issues/1930",
    "body": "For example, if my validation_epoch_end in the trainer returns {'avg_loss':loss, 'log':logs}, how to get the loss value from a callback method like:def on_validation_end(trainer, pl_module)?",
    "comments_url": "https://api.github.com/repos/Lightning-AI/pytorch-lightning/issues/1930/comments",
    "author": "NagarajSMurthy",
    "comments": [
      {
        "user": "MaharshiYeluri01",
        "created_at": "2020-05-23T16:00:43Z",
        "body": "you can access the current epoch variables from trainer.callback_metrics\r\n/looks something like below\r\n{'epoch': 4,\r\n 'loss': tensor(0.4924, device='cuda:0'),\r\n 'train_loss': tensor(0.4924, device='cuda:0'),\r\n 'val_auc': tensor(0.7359, dtype=torch.float64),\r\n 'val_loss': tensor(0.7714, device='cuda:0')}"
      }
    ]
  },
  {
    "number": 1002,
    "title": "Validation step isn't being ran ",
    "created_at": "2020-03-02T04:22:38Z",
    "closed_at": "2020-03-02T23:38:10Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/Lightning-AI/pytorch-lightning/issues/1002",
    "body": "## \u2753 Questions and Help\r\n\r\n#### What is your question?\r\nI have been trying to get the trainer to call the validation_step function but it doesn't seem to ever get called.  I assume I am missing something obvious but have looking at the tutorials and docs I haven't been able to find the obvious.  The code for the model and trainer are below.  What might I be missing?  Thank you for the help!\r\n\r\n#### Code\r\n```\r\nclass SegModel(pl.LightningModule):\r\n    def __init__(self, batch_size, lr):\r\n        super(SegModel, self).__init__()\r\n        self.batch_size = batch_size\r\n        self.learning_rate = lr\r\n        self.net = UNet(num_classes=1)\r\n        self.transform = transforms.Compose([\r\n            transforms.ToTensor()\r\n        ])\r\n        self.trainset = Stacker(input_images, truth_images, transform=self.transform)\r\n        self.validset = Stacker(input_images, truth_images, transform=self.transform)\r\n        self.testset = Stacker(input_images, truth_images, transform=self.transform)\r\n    \r\n    def forward(self, x):\r\n        return self.net(x)\r\n    \r\n    def training_step(self, batch, batch_nb):\r\n        img, mask = batch\r\n        img = img.float()\r\n        mask = mask.long()\r\n        out = self.forward(img)\r\n        loss_val = dice_loss(mask, out)\r\n        return {'loss': loss_val, 'log': {'train_loss': loss_val}}\r\n    \r\n    def validation_step(self, batch, batch_nb):\r\n        print(\"RUNNING VALIDATION\")\r\n        img, mask = batch\r\n        img = img.float()\r\n        mask = mask.long()\r\n        out = self.forward(img)\r\n        loss_val = dice_loss(mask, out)\r\n        return {'val_loss': loss_val, \r\n                'val_dice': dice(out, mask),\r\n                'val_iou': IoU(out, mask)\r\n               }\r\n    \r\n    def test_step(self, batch, batch_nb):\r\n        img, mask = batch\r\n        img = img.float()\r\n        mask = mask.long()\r\n        out = self.forward(img)\r\n        loss_val = dice_loss(mask, out)\r\n        return {'test_loss': loss_val, \r\n                'test_dice': dice(out, mask),\r\n                'test_iou': IoU(out, mask)\r\n               }\r\n    \r\n    def validation_end(self, outputs):\r\n        if len(outputs)==0: return {}\r\n        val_loss_mean = torch.stack([x['val_loss'] for x in outputs]).mean()\r\n        val_dice_mean = torch.stack([x['val_dice'] for x in outputs]).mean()\r\n        val_iou_mean = torch.stack([x['val_iou'] for x in outputs]).mean()\r\n        return {'val_loss': val_loss_mean,\r\n                'log': {\r\n                    'val_loss': val_loss_mean,\r\n                    'val_dice': val_dice_mean,\r\n                    'val_iou': val_iou_mean\r\n                }}\r\n\r\n    def test_end(self, outputs):\r\n        if len(outputs)==0: return {}\r\n        test_loss_mean = torch.stack([x['test_loss'] for x in outputs]).mean()\r\n        test_dice_mean = torch.stack([x['test_dice'] for x in outputs]).mean()\r\n        test_iou_mean = torch.stack([x['test_iou'] for x in outputs]).mean()\r\n        print(test_dice_mean, test_iou_mean)\r\n        return {'test_loss': test_loss_mean,\r\n                'log': {\r\n                    'test_loss': test_loss_mean,\r\n                    'test_dice': test_dice_mean,\r\n                    'test_iou': test_iou_mean\r\n                }}\r\n    \r\n    def configure_optimizers(self):\r\n        opt = torch.optim.Adam(self.net.parameters(), lr=self.learning_rate)\r\n        sch = torch.optim.lr_scheduler.CosineAnnealingLR(opt, T_max=10)\r\n        return [opt], [sch]\r\n\r\n    @pl.data_loader\r\n    def train_dataloader(self):\r\n        return DataLoader(self.trainset, batch_size=self.batch_size, shuffle=True)\r\n\r\n    @pl.data_loader\r\n    def valid_dataloader(self):\r\n        return DataLoader(self.validset, batch_size=self.batch_size, shuffle=False)\r\n      \r\n    @pl.data_loader\r\n    def test_dataloader(self):\r\n        return DataLoader(self.testset, batch_size=self.batch_size, shuffle=False)\r\n\r\nmodel = SegModel(1, 0.001)\r\n\r\ntrainer = pl.Trainer(\r\n    gpus=[0], \r\n    early_stop_callback=None, \r\n    max_epochs=40,\r\n    check_val_every_n_epoch=1,\r\n)\r\n\r\ntrainer.fit(model)\r\n```\r\n\r\n#### What's your environment?\r\n\r\n - OS: Windows\r\n - Packaging: conda\r\n - Version: 0.6.1\r\n",
    "comments_url": "https://api.github.com/repos/Lightning-AI/pytorch-lightning/issues/1002/comments",
    "author": "RyMo95",
    "comments": [
      {
        "user": "jeremyjordan",
        "created_at": "2020-03-02T22:04:51Z",
        "body": "Hi @RyMo95 , I believe the issue is that your method is not named correctly. \r\n\r\n`valid_dataloader` -> `val_dataloader` should resolve this, please let me know if that doesn\u2019t work!"
      }
    ]
  },
  {
    "number": 877,
    "title": "How do I test before any training?",
    "created_at": "2020-02-17T06:34:46Z",
    "closed_at": "2020-02-17T09:40:20Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/Lightning-AI/pytorch-lightning/issues/877",
    "body": "## \u2753 Questions and Help\r\n\r\nI am now migrating some of my previous works into lightning. I wish to see if it is able to reproduce my previous results or not. But the doc implies that all the testing has to be performed after training or after loading the previous lightning training state, which I do not have either.\r\n\r\nSo How can I test before training?\r\n\r\n#### Code\r\n\r\n```python\r\n\r\n    trainer = Trainer(logger=logger, max_epochs=5, gpus=[3], distributed_backend=None)\r\n    hparams = HParams(fold=fold, model=model_name, batch_size=8, num_workers=16)\r\n    system = MySYS(hparams, trainer)\r\n\r\n    system.model.load_state_dict(torch.load(state_dict))\r\n    trainer.test()\r\n```\r\nIt cannot work since the trainer does not initialize at all.\r\n\r\n#### What have you tried?\r\nI found inside the code for testing:\r\n```python\r\n\r\n    def test(self, model=None):\r\n        r\"\"\"\r\n\r\n        Separates from fit to make sure you never run on your test set until you want to.\r\n\r\n        Args:\r\n            model (LightningModule): The model to test.\r\n\r\n        Example::\r\n\r\n            # Option 1\r\n            # run test after fitting\r\n            trainer = Trainer()\r\n            model = LightningModule()\r\n\r\n            trainer.fit()\r\n            trainer.test()\r\n\r\n            # Option 2\r\n            # run test from a loaded model\r\n            model = LightningModule.load_from_checkpoint('path/to/checkpoint.ckpt')\r\n            trainer = Trainer()\r\n            trainer.test(model)\r\n        \"\"\"\r\n        self.testing = True\r\n        if model is not None:\r\n            self.fit(model)\r\n        else:\r\n            self.run_evaluation(test=True)\r\n```\r\nWhich requires to fit the model that I do not understand at all. Why a fitting is required inside training code? If for the purpose of initialization, can't we just put some init code here?",
    "comments_url": "https://api.github.com/repos/Lightning-AI/pytorch-lightning/issues/877/comments",
    "author": "shijianjian",
    "comments": [
      {
        "user": "festeh",
        "created_at": "2020-02-17T07:18:03Z",
        "body": "If you dig a bit deeper into the sources, you'll find that `fit` actually calls `evaluate` and do not fit a model if `testing` flag is True. So you can run `trainer.test(system)`, it should probably work."
      }
    ]
  },
  {
    "number": 690,
    "title": "How to make test_end() return metrics ",
    "created_at": "2020-01-15T17:47:23Z",
    "closed_at": "2020-01-21T12:31:16Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/Lightning-AI/pytorch-lightning/issues/690",
    "body": "I have searched through the docs / Google as well as looked through the source code.\r\n\r\nIt seems like test_end() returns nothing (it has no `return` in the function). I was wondering if I was missing something really obvious. \r\n\r\nI would simply like to return the metrics of the test end.",
    "comments_url": "https://api.github.com/repos/Lightning-AI/pytorch-lightning/issues/690/comments",
    "author": "Laksh1997",
    "comments": [
      {
        "user": "matthew-z",
        "created_at": "2020-01-19T14:09:06Z",
        "body": "You may try this:\r\n\r\n```py\r\nclass MyModel(pl.LightningModule):\r\n  def __init__(self, ...):\r\n    self.test_result = None\r\n  def test_end(self, outputs):\r\n    self.test_result = get_eval_metrics(outputs)\r\n\r\nmodel = MyModel()\r\ntrainer.test(model)\r\nprint(model.test_result)\r\n```\r\n\r\n"
      }
    ]
  },
  {
    "number": 477,
    "title": "About the Weight Initialization in PL",
    "created_at": "2019-11-08T02:28:25Z",
    "closed_at": "2019-11-08T13:53:58Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/Lightning-AI/pytorch-lightning/issues/477",
    "body": "Hi,\r\n\r\nI am tring to use BERT for a project. The pretrained BERT model is part of my model. I am wondering how will PL initialize the model weights. Will it overwrite the pretrained BERT weights?\r\n\r\nThanks.",
    "comments_url": "https://api.github.com/repos/Lightning-AI/pytorch-lightning/issues/477/comments",
    "author": "magic282",
    "comments": [
      {
        "user": "williamFalcon",
        "created_at": "2019-11-08T02:33:44Z",
        "body": "lightning doesn\u2019t do any magic like this under the hood. you control all the weights and what gets initiated "
      },
      {
        "user": "magic282",
        "created_at": "2019-11-08T04:36:13Z",
        "body": "I see. So where should I do the weight initialization step if I want to follow the PL design idea? In the `__init__` of `pl.LightningModule`?"
      },
      {
        "user": "williamFalcon",
        "created_at": "2019-11-08T13:53:42Z",
        "body": "This is up to you and you should follow standard PyTorch guidelines.\r\nNormally it's done in ```__init__```"
      }
    ]
  },
  {
    "number": 10285,
    "title": "UserWarning: you defined a validation_step but have no val_dataloader. Skipping val loop",
    "created_at": "2021-11-01T05:06:39Z",
    "closed_at": "2021-12-08T11:31:38Z",
    "labels": [
      "bug",
      "help wanted",
      "won't fix"
    ],
    "url": "https://github.com/Lightning-AI/pytorch-lightning/issues/10285",
    "body": "## \ud83d\udc1b Bug\r\n\r\nUsing pytorch-lightning 1.5.0rc1, I will get UserWarning:\r\n```\r\npytorch_lightning/trainer/configuration_validator.py:156: UserWarning: you defined a validation_step but have no val_dataloader. Skipping val loop\r\n  rank_zero_warn(f\"you defined a {step_name} but have no {loader_name}. Skipping {stage} loop\")\r\n```\r\nBut with pytorch-lightning 1.4.9, there is no such warning.\r\n\r\n<!-- A clear and concise description of what the bug is. -->\r\n\r\n### To Reproduce\r\n```\r\nimport torch\r\nfrom torch import nn\r\nfrom collections import OrderedDict\r\nimport pytorch_lightning as pl\r\n\r\nfrom torch.utils.data import DataLoader, TensorDataset\r\n\r\n\r\nclass TestLrModule(pl.LightningModule):\r\n    def __init__(self, input_size, hidden_size):\r\n        super(TestLrModule, self).__init__()\r\n        self._fc = OrderedDict([\r\n            ('fc0', nn.Linear(input_size, hidden_size)),\r\n            ('tan0', nn.ReLU()),\r\n            ('fc1', nn.Linear(hidden_size, 1)),\r\n        ])\r\n        self.fc = nn.Sequential(self._fc)\r\n        self._loss_fn = nn.MSELoss()\r\n\r\n    def forward(self, x):\r\n        y = self.fc(x)\r\n        return y.squeeze(dim=1)\r\n\r\n    def training_step(self, batch, batch_idx):\r\n        x, y = batch\r\n        y_hat = self.forward(x)\r\n        return self._loss_fn(y_hat, y)\r\n\r\n    def training_epoch_end(self, outputs):\r\n        loss = torch.mean(torch.stack([x['loss'] for x in outputs]))\r\n        self.log('train_loss', loss, on_epoch=True)\r\n\r\n    def validation_step(self, batch, batch_idx):\r\n        x, y = batch\r\n        y_hat = self.forward(x)\r\n        return self._loss_fn(y_hat, y)\r\n\r\n    def validation_epoch_end(self, outputs):\r\n        loss = torch.mean(torch.stack(outputs))\r\n        self.log('val_loss', loss, on_epoch=True)\r\n\r\n    def configure_optimizers(self):\r\n        return torch.optim.Adam(self.parameters(), lr=2e-3, weight_decay=1e-4)\r\n\r\n\r\nsample, feature = 4000, 10\r\nrx, ry = torch.rand(sample, feature), torch.rand(sample)\r\ntest_sample = int(sample * 0.2)\r\ntest_rx, test_ry = torch.rand(test_sample, feature), torch.rand(test_sample)\r\n\r\ntrain_data = DataLoader(TensorDataset(rx, ry), batch_size=32, num_workers=2)\r\nvalid_data = DataLoader(TensorDataset(test_rx, test_ry), batch_size=32, num_workers=2)\r\n\r\nm = TestLrModule(rx.shape[1], 16)\r\ntrainer = pl.Trainer(max_epochs=20)\r\ntrainer.fit(m, train_data, valid_data)\r\n```\r\n\r\n### Environment\r\n\r\n- PyTorch Version  1.8.0\r\n- Python version: 3.8.5\r\n- OS (e.g., Linux): linux\r\n\r\n",
    "comments_url": "https://api.github.com/repos/Lightning-AI/pytorch-lightning/issues/10285/comments",
    "author": "7starsea",
    "comments": [
      {
        "user": "rohitgr7",
        "created_at": "2021-11-01T09:14:50Z",
        "body": "it was fixed recently. Can you try master?"
      },
      {
        "user": "7starsea",
        "created_at": "2021-11-01T13:33:53Z",
        "body": "Thanks. With the master version, the ```UserWarning: you defined a validation_step but have no val_dataloader``` disappears. \r\n\r\nBy the way, I am not sure should I take care of the following ```UserWarning```:\r\n```configuration_validator.py:102: UserWarning: When using `Trainer(accumulate_grad_batches != 1)` and overriding `LightningModule.optimizer_{step,zero_grad}`, the hooks will not be called on every batch (rather, they are called on every optimization step).```\r\n\r\nThe sample code is like\r\n```\r\nclass TestLrModule(pl.LightningModule):\r\n    # standard training/validation_step here\r\n    def optimizer_zero_grad(self, epoch, batch_idx, optimizer, optimizer_idx):\r\n        optimizer.zero_grad(set_to_none=True)\r\n\r\ntrainer = pl.Trainer(max_epochs=max_epochs, callbacks=[early_stop_callback],\r\n                          check_val_every_n_epoch=4, accumulate_grad_batches=6)\r\n```\r\n\r\nThanks."
      },
      {
        "user": "rohitgr7",
        "created_at": "2021-12-08T11:31:38Z",
        "body": "@7starsea apologies for the late reply. While accumulating, optimization doesn't happen at every step thus optimizer_step won't be called right after every training batch but only when the accumulation interval is complete. This is just a warning for the user to make sure they write their own custom logic within the `optimizer_step` taking the accumulation flag, set inside Trainer, into consideration."
      }
    ]
  },
  {
    "number": 9697,
    "title": "IsADirectoryError: [Errno 21] Is a directory: '/home/pc/SR/dC/1-Data_Preparation'",
    "created_at": "2021-09-25T04:04:35Z",
    "closed_at": "2021-09-27T07:14:18Z",
    "labels": [
      "bug",
      "help wanted"
    ],
    "url": "https://github.com/Lightning-AI/pytorch-lightning/issues/9697",
    "body": "I am using **Jupyter Lab Server**. It has pre-installed tf2.3_py3.6 kernel installed in it. It has 2 GPUS in it.\r\n\r\nPyTorch Lightning Version (e.g., 1.3.0): '1.4.6'\r\nPyTorch Version (e.g., 1.8): '1.6.0+cu101'\r\nPython version: 3.6\r\nOS (e.g., Linux): system='Linux'\r\nCUDA/cuDNN version: 11.2\r\nGPU models and configuration: Mentioned below\r\nHow you installed PyTorch (conda, pip, source): pip\r\n\r\n\r\nNVIDIA-SMI 460.91.03    Driver Version: 460.91.03    CUDA Version: 11.2     |\r\n|-------------------------------+----------------------+----------------------+\r\n| GPU  Name        Persistence-M| Bus-Id        Disp.A | Volatile Uncorr. ECC |\r\n| Fan  Temp  Perf  Pwr:Usage/Cap|         Memory-Usage | GPU-Util  Compute M. |\r\n|                               |                      |               MIG M. |\r\n|===============================+======================+======================|\r\n|   0  Tesla V100-SXM2...  Off  | 00000000:62:00.0 Off |                    0 |\r\n| N/A   36C    P0    57W / 300W |   2842MiB / 32510MiB |      0%      Default |\r\n|                               |                      |                  N/A |\r\n+-------------------------------+----------------------+----------------------+\r\n|   1  Tesla V100-SXM2...  Off  | 00000000:89:00.0 Off |                    0 |\r\n| N/A   32C    P0    43W / 300W |      3MiB / 32510MiB |      0%      Default |\r\n|                               |                      |                  N/A |\r\n+-------------------------------+----------------------+----------------------+\r\n                                                                              \r\n+-----------------------------------------------------------------------------+\r\n| Processes:                                                                  |\r\n|  GPU   GI   CI        PID   Type   Process name                  GPU Memory |\r\n|        ID   ID                                                   Usage      |\r\n|=============================================================================|\r\n+-----------------------------------------------------------------------------+\r\n\r\nI have trained a model, and saved the best model.\r\n\r\n```\r\nclass SRTagger(pl.LightningModule):\r\n\r\n  def __init__(self, n_classes: int, n_training_steps=None, n_warmup_steps=None):\r\n    super().__init__()\r\n    self.bert = BertModel.from_pretrained(BERT_MODEL_NAME, return_dict=True)\r\n    self.classifier = nn.Linear(self.bert.config.hidden_size, n_classes)\r\n    self.n_training_steps = n_training_steps\r\n    self.n_warmup_steps = n_warmup_steps\r\n    self.criterion = nn.BCELoss()\r\n\r\n  def forward(self, input_ids, attention_mask, labels=None):\r\n    output = self.bert(input_ids, attention_mask=attention_mask)\r\n    output = self.classifier(output.pooler_output)\r\n    output = torch.sigmoid(output)    \r\n    loss = 0\r\n    if labels is not None:\r\n        loss = self.criterion(output, labels)\r\n    return loss, output\r\n\r\n  def training_step(self, batch, batch_idx):\r\n    input_ids = batch[\"input_ids\"]\r\n    attention_mask = batch[\"attention_mask\"]\r\n    labels = batch[\"labels\"]\r\n    loss, outputs = self(input_ids, attention_mask, labels)\r\n    self.log(\"train_loss\", loss, prog_bar=True, logger=True)\r\n    return {\"loss\": loss, \"predictions\": outputs, \"labels\": labels}\r\n\r\n  def validation_step(self, batch, batch_idx):\r\n    input_ids = batch[\"input_ids\"]\r\n    attention_mask = batch[\"attention_mask\"]\r\n    labels = batch[\"labels\"]\r\n    loss, outputs = self(input_ids, attention_mask, labels)\r\n    self.log(\"val_loss\", loss, prog_bar=True, logger=True)\r\n    return loss\r\n\r\n  def test_step(self, batch, batch_idx):\r\n    input_ids = batch[\"input_ids\"]\r\n    attention_mask = batch[\"attention_mask\"]\r\n    labels = batch[\"labels\"]\r\n    loss, outputs = self(input_ids, attention_mask, labels)\r\n    self.log(\"test_loss\", loss, prog_bar=True, logger=True)\r\n    return loss\r\n\r\n  def training_epoch_end(self, outputs):\r\n    \r\n    labels = []\r\n    predictions = []\r\n    for output in outputs:\r\n      for out_labels in output[\"labels\"].detach().cpu():\r\n        labels.append(out_labels)\r\n      for out_predictions in output[\"predictions\"].detach().cpu():\r\n        predictions.append(out_predictions)\r\n\r\n    labels = torch.stack(labels).int()\r\n    predictions = torch.stack(predictions)\r\n\r\n    for i, name in enumerate(LABEL_COLUMNS):\r\n      class_roc_auc = auroc(predictions[:, i], labels[:, i])\r\n      self.logger.experiment.add_scalar(f\"{name}_roc_auc/Train\", class_roc_auc, self.current_epoch)\r\n\r\n\r\n  def configure_optimizers(self):\r\n\r\n    optimizer = optim.RAdam(self.parameters(), lr=2e-5)\r\n\r\n    scheduler = get_linear_schedule_with_warmup(\r\n      optimizer,\r\n      num_warmup_steps=self.n_warmup_steps,\r\n      num_training_steps=self.n_training_steps\r\n    )\r\n\r\n    return dict(\r\n      optimizer=optimizer,\r\n      lr_scheduler=dict(\r\n        scheduler=scheduler,\r\n        interval='step'\r\n      )\r\n    )\r\n\r\n```\r\n**After training, I want to load my best model without training it again**\r\n\r\n\r\n```\r\ncheckpoint_callback = ModelCheckpoint(\r\n  dirpath=\"checkpoints\",\r\n  filename=\"best-checkpoint\",\r\n  save_top_k=1,\r\n  verbose=True,\r\n  monitor=\"val_loss\",\r\n  mode=\"min\"\r\n)\r\n\r\nlogger = TensorBoardLogger(\"lightning_logs\", name=\"SReply\")\r\n\r\n# And early stopping triggers when the loss hasn't improved for the last \r\n# 2 epochs (you might want to remove/reconsider this when training on real-world projects):\r\n\r\n\r\nearly_stopping_callback = EarlyStopping(monitor='val_loss', patience=2)\r\n# We can start the training process:\r\n# checkpoint_callback supports only a bool value. If set to True, it will create a model checkpoint\r\n# instance internally, but if you want to assign your own custom instance then pass it within callbacks:\r\n\r\ntrainer = pl.Trainer(\r\n  logger=logger,\r\n  callbacks=[early_stopping_callback,checkpoint_callback],\r\n  max_epochs=N_EPOCHS,\r\n  gpus=1,\r\n  progress_bar_refresh_rate=50,\r\n  amp_level='O3'\r\n  )\r\n\r\ntrained_model = SRTagger.load_from_checkpoint(trainer.checkpoint_callback.best_model_path,n_classes=len(LABEL_COLUMNS))\r\ntrained_model.eval()\r\ntrained_model.freeze()\r\n```\r\n\r\n\r\n**Error**\r\n\r\n\r\n```\r\n---------------------------------------------------------------------------\r\nIsADirectoryError                         Traceback (most recent call last)\r\n/usr/local/bin/kernel-launchers/python/scripts/launch_ipykernel.py in <module>\r\n----> 1 trained_model = SRTagger.load_from_checkpoint(trainer.checkpoint_callback.best_model_path,n_classes=len(LABEL_COLUMNS))\r\n      2 trained_model.eval()\r\n      3 trained_model.freeze()\r\n\r\n~/.local/lib/python3.6/site-packages/pytorch_lightning/core/saving.py in load_from_checkpoint(cls, checkpoint_path, map_location, hparams_file, strict, **kwargs)\r\n    129             checkpoint = pl_load(checkpoint_path, map_location=map_location)\r\n    130         else:\r\n--> 131             checkpoint = pl_load(checkpoint_path, map_location=lambda storage, loc: storage)\r\n    132 \r\n    133         if hparams_file is not None:\r\n\r\n~/.local/lib/python3.6/site-packages/pytorch_lightning/utilities/cloud_io.py in load(path_or_url, map_location)\r\n     30         return torch.hub.load_state_dict_from_url(str(path_or_url), map_location=map_location)\r\n     31     fs = get_filesystem(path_or_url)\r\n---> 32     with fs.open(path_or_url, \"rb\") as f:\r\n     33         return torch.load(f, map_location=map_location)\r\n     34 \r\n\r\n~/.local/lib/python3.6/site-packages/fsspec/spec.py in open(self, path, mode, block_size, cache_options, **kwargs)\r\n    980                 autocommit=ac,\r\n    981                 cache_options=cache_options,\r\n--> 982                 **kwargs,\r\n    983             )\r\n    984             if not ac and \"r\" not in mode:\r\n\r\n~/.local/lib/python3.6/site-packages/fsspec/implementations/local.py in _open(self, path, mode, block_size, **kwargs)\r\n    143         if self.auto_mkdir and \"w\" in mode:\r\n    144             self.makedirs(self._parent(path), exist_ok=True)\r\n--> 145         return LocalFileOpener(path, mode, fs=self, **kwargs)\r\n    146 \r\n    147     def touch(self, path, **kwargs):\r\n\r\n~/.local/lib/python3.6/site-packages/fsspec/implementations/local.py in __init__(self, path, mode, autocommit, fs, compression, **kwargs)\r\n    234         self.compression = get_compression(path, compression)\r\n    235         self.blocksize = io.DEFAULT_BUFFER_SIZE\r\n--> 236         self._open()\r\n    237 \r\n    238     def _open(self):\r\n\r\n~/.local/lib/python3.6/site-packages/fsspec/implementations/local.py in _open(self)\r\n    239         if self.f is None or self.f.closed:\r\n    240             if self.autocommit or \"w\" not in self.mode:\r\n--> 241                 self.f = open(self.path, mode=self.mode)\r\n    242                 if self.compression:\r\n    243                     compress = compr[self.compression]\r\n\r\nIsADirectoryError: [Errno 21] Is a directory: '/home/pc/SR/dC/1-Data_Preparation'\r\n```\r\n\r\n**This error. comes when I try to load my model second time after closing and reopening the jupyter notebook. I run the code except training it.**\r\n\r\n\r\n\r\n",
    "comments_url": "https://api.github.com/repos/Lightning-AI/pytorch-lightning/issues/9697/comments",
    "author": "pratikchhapolika",
    "comments": [
      {
        "user": "ananthsub",
        "created_at": "2021-09-25T04:27:46Z",
        "body": "> This error. comes when I try to load my model second time after closing and reopening the jupyter notebook. I run the code except training it.\r\n\r\nDid you confirm that the directory `'/home/pc/SR/dC/1-Data_Preparation'` exists? "
      },
      {
        "user": "pratikchhapolika",
        "created_at": "2021-09-25T04:34:33Z",
        "body": "> > This error. comes when I try to load my model second time after closing and reopening the jupyter notebook. I run the code except training it.\r\n> \r\n> Did you confirm that the directory `'/home/pc/SR/dC/1-Data_Preparation'` exists?\r\n\r\nYes I am inside this directory : `'/home/pc/SR/dC/1-Data_Preparation'` and when I do\"\r\n\r\n`!ls '/home/pc/SR/dC/1-Data_Preparation/checkpoints`\r\n\r\nI get :  **best-checkpoint.ckpt**"
      },
      {
        "user": "rohitgr7",
        "created_at": "2021-09-27T06:04:15Z",
        "body": "```py\r\ntrainer = pl.Trainer(\r\n  logger=logger,\r\n  callbacks=[early_stopping_callback,checkpoint_callback],\r\n  max_epochs=N_EPOCHS,\r\n  gpus=1,\r\n  progress_bar_refresh_rate=50,\r\n  amp_level='O3'\r\n  )\r\n\r\ntrained_model = SRTagger.load_from_checkpoint(trainer.checkpoint_callback.best_model_path,n_classes=len(LABEL_COLUMNS))\r\ntrained_model.eval()\r\n```\r\nyou have created a new trainer instance and using a new checkpoint instance.. so `best_model_path` doesn't exist at this point."
      },
      {
        "user": "pratikchhapolika",
        "created_at": "2021-09-27T06:41:53Z",
        "body": "> ```python\r\n> trainer = pl.Trainer(\r\n>   logger=logger,\r\n>   callbacks=[early_stopping_callback,checkpoint_callback],\r\n>   max_epochs=N_EPOCHS,\r\n>   gpus=1,\r\n>   progress_bar_refresh_rate=50,\r\n>   amp_level='O3'\r\n>   )\r\n> \r\n> trained_model = SRTagger.load_from_checkpoint(trainer.checkpoint_callback.best_model_path,n_classes=len(LABEL_COLUMNS))\r\n> trained_model.eval()\r\n> ```\r\n> \r\n> you have created a new trainer instance and using a new checkpoint instance.. so `best_model_path` doesn't exist at this point.\r\n\r\nSo what solution do you suggest?"
      },
      {
        "user": "rohitgr7",
        "created_at": "2021-09-27T07:01:21Z",
        "body": "you can just pass the path of the best checkpoint as a string or maybe extract it from one of your saved checkpoints to reload it correctly."
      },
      {
        "user": "pratikchhapolika",
        "created_at": "2021-09-27T07:14:10Z",
        "body": "> you can just pass the path of the best checkpoint as a string or maybe extract it from one of your saved checkpoints to reload it correctly.\r\n\r\nSRTagger.load_from_checkpoint(\"path_to_cpkt_file\",n_classes=len(LABEL_COLUMNS))\r\ntrained_model.eval()\r\n\r\nClosing it."
      }
    ]
  },
  {
    "number": 9488,
    "title": "Getting error with Pytorch lightning when passing model checkpoint",
    "created_at": "2021-09-13T14:43:28Z",
    "closed_at": "2021-09-13T17:52:04Z",
    "labels": [
      "bug",
      "help wanted"
    ],
    "url": "https://github.com/Lightning-AI/pytorch-lightning/issues/9488",
    "body": "I am training a multi-label classification problem using Hugging face models.\r\n\r\nI am using `Pytorch lightning` to train the model.\r\n \r\n\r\nHere is the code:\r\n\r\nAnd early stopping triggers when the loss hasn't improved for the last \r\n\r\n    early_stopping_callback = EarlyStopping(monitor='val_loss', patience=2)\r\n\r\nWe can start the training process:\r\n\r\n\r\n    checkpoint_callback = ModelCheckpoint(\r\n      dirpath=\"checkpoints\",\r\n      filename=\"best-checkpoint\",\r\n      save_top_k=1,\r\n      verbose=True,\r\n      monitor=\"val_loss\",\r\n      mode=\"min\"\r\n    )\r\n\r\n\r\n    trainer = pl.Trainer(\r\n      logger=logger,\r\n      callbacks=[early_stopping_callback],\r\n      max_epochs=N_EPOCHS,\r\n     checkpoint_callback=checkpoint_callback,\r\n      gpus=1,\r\n      progress_bar_refresh_rate=30\r\n    )\r\n    # checkpoint_callback=checkpoint_callback,\r\n\r\nAs soon as I run this, I get error:\r\n\r\n\r\n    ~/.local/lib/python3.6/site-packages/pytorch_lightning/trainer/connectors/callback_connector.py in _configure_checkpoint_callbacks(self, checkpoint_callback)\r\n         75             if isinstance(checkpoint_callback, Callback):\r\n         76                 error_msg += \" Pass callback instances to the `callbacks` argument in the Trainer constructor instead.\"\r\n    ---> 77             raise MisconfigurationException(error_msg)\r\n         78         if self._trainer_has_checkpoint_callbacks() and checkpoint_callback is False:\r\n         79             raise MisconfigurationException(\r\n    \r\n    MisconfigurationException: Invalid type provided for checkpoint_callback: Expected bool but received <class 'pytorch_lightning.callbacks.model_checkpoint.ModelCheckpoint'>. Pass callback instances to the `callbacks` argument in the Trainer constructor instead.\r\n\r\n\r\n**How can I fix this issue?**",
    "comments_url": "https://api.github.com/repos/Lightning-AI/pytorch-lightning/issues/9488/comments",
    "author": "pratikchhapolika",
    "comments": [
      {
        "user": "rohitgr7",
        "created_at": "2021-09-13T14:53:17Z",
        "body": "`checkpoint_callback` supports only a bool value. If set to True, it will create a model checkpoint instance internally, but if you want to assign your own custom instance then pass it within callbacks:\r\n```py\r\ntrainer = Trainer(callbacks=[checkpoint_callback, early_stopping_callback], ...)\r\n```"
      }
    ]
  },
  {
    "number": 9176,
    "title": "on_save_checkoint never called",
    "created_at": "2021-08-28T15:11:45Z",
    "closed_at": "2021-08-29T00:01:00Z",
    "labels": [
      "bug",
      "help wanted"
    ],
    "url": "https://github.com/Lightning-AI/pytorch-lightning/issues/9176",
    "body": "## \ud83d\udc1b Bug\r\n\r\nI wrote a `Callback` class and found `on_save_checkpoint` had never been called\r\n\r\n### To Reproduce\r\n\r\nMy callback class:\r\n```\r\nfrom pytorch_lightning.callbacks import Callback\r\nfrom os.path import join\r\nimport torch\r\nimport os\r\nimport pytorch_lightning as pl\r\nfrom typing import Dict, Any, Optional\r\n\r\n\r\nclass JitSave(Callback):\r\n\r\n    def __init__(self):\r\n        self.outputs = None\r\n        self.n_dataloaders = None\r\n\r\n    def on_save_checkpoint(\r\n        self, trainer: 'pl.Trainer', pl_module: 'pl.LightningModule', checkpoint: Dict[\r\n                str, Any]\r\n    ) -> dict:\r\n        # Torch.jit.save\r\n        jit_model_dir = join(\r\n            join(os.getcwd(), \"checkpoints\"), f\"jit_{self.logger[0].version}\" + \"{}.pt\"\r\n        )\r\n        torch.jit.save(self.model.cpu().to_torchscript(), jit_model_dir.format(\"cpu\"))\r\n        torch.jit.save(self.model.to_torchscript(), jit_model_dir.format(\"gpu\"))\r\n        print(f\"torch.jit.save path :\\n{jit_model_dir}\")\r\n        # return {\"jitsave_path\": jit_model_dir}\r\n        return checkpoint\r\n\r\n    def setup(self, trainer: 'pl.Trainer', pl_module: 'pl.LightningModule', stage: Optional[str] = None) -> None:\r\n        self.n_dataloaders = len(pl_module.val_dataloader())\r\n\r\n    def _reset(self):\r\n        self.outputs = [[] for _ in range(self.n_dataloaders)]\r\n\r\n    def on_epoch_start(self, trainer: 'pl.Trainer', pl_module: 'pl.LightningModule') -> None:\r\n        self._reset()\r\n\r\n    def on_validation_epoch_end(self, trainer: 'pl.Trainer', pl_module: 'pl.LightningModule') -> None:\r\n        for dataloader_idx, output in enumerate(self.outputs):\r\n            pass\r\n```\r\n`on_validation_epoch_end` works but on_save_checkpoint not.\r\n\r\nThis is my `ModelCheckpoint`:\r\n\r\n```\r\nmodel_checkpoint:\r\n  _target_: pytorch_lightning.callbacks.ModelCheckpoint\r\n  monitor: \"val/f1\" # name of the logged metric which determines when model isimproving\r\n  mode: \"max\" # can be \"max\" or \"min\"\r\n  save_top_k: 1 # save k best models (determined by above metric)\r\n  save_last: False # additionaly always save model from last epoch\r\n  verbose: False\r\n  dirpath: \"checkpoints/\"\r\n  filename: \"epoch_{epoch:03d}\"\r\n  auto_insert_metric_name: False\r\n  save_weights_only: True\r\n```\r\n\r\nCallbacks are passed to the trainer:\r\n\r\n```\r\ncallbacks: List[Callback] = []\r\n    if \"callbacks\" in config:\r\n        for _, cb_conf in config.callbacks.items():\r\n            if \"_target_\" in cb_conf:\r\n                log.info(f\"Instantiating callback <{cb_conf._target_}>\")\r\n                callbacks.append(hydra.utils.instantiate(cb_conf))\r\n```\r\n\r\n```\r\ntrainer: Trainer = hydra.utils.instantiate(\r\n        config.trainer, callbacks=callbacks, logger=logger, _convert_=\"partial\"\r\n    )\r\n```\r\n\r\n\r\n### Expected behavior\r\n\r\n`on_save_checkpoint` should be called.\r\n\r\n### Environment\r\n\r\n* CUDA:\r\n        - GPU:\r\n                - GeForce RTX 2080 Ti\r\n        - available:         True\r\n        - version:           10.2\r\n* Packages:\r\n        - numpy:             1.19.5\r\n        - pyTorch_debug:     False\r\n        - pyTorch_version:   1.9.0+cu102\r\n        - pytorch-lightning: 1.4.2\r\n        - tqdm:              4.62.1\r\n* System:\r\n        - OS:                Linux\r\n        - architecture:\r\n                - 64bit\r\n                - ELF\r\n        - processor:         x86_64\r\n        - python:            3.8.10\r\n        - version:           #60~20.04.1-Ubuntu SMP Thu May 6 09:52:46 UTC 2021",
    "comments_url": "https://api.github.com/repos/Lightning-AI/pytorch-lightning/issues/9176/comments",
    "author": "zhiyuanpeng",
    "comments": [
      {
        "user": "ananthsub",
        "created_at": "2021-08-28T17:14:14Z",
        "body": "you're specifying `save_weights_only=True` so no callback states are added to the checkpoint. this means the callback's `on_save_checkpoint` is never called"
      }
    ]
  },
  {
    "number": 9155,
    "title": "AttributeError: Can't pickle local object when attempting multi-GPU training",
    "created_at": "2021-08-27T00:24:54Z",
    "closed_at": "2021-08-27T18:42:58Z",
    "labels": [
      "bug",
      "help wanted",
      "priority: 1"
    ],
    "url": "https://github.com/Lightning-AI/pytorch-lightning/issues/9155",
    "body": "## \ud83d\udc1b Bug\r\n\r\nRunning the provided script with multiple GPUs causes the following error:\r\n```\r\n$ python pickle_test.py\r\n.../lib/python3.8/site-packages/pytorch_lightning/trainer/connectors/accelerator_connector.py:746: UserWarning: You requested multiple GPUs but did not specify a backend, e.g. `Trainer(accelerator=\"dp\"|\"ddp\"|\"ddp2\")`. Setting `accelerator=\"ddp_spawn\"` for you.\r\n  rank_zero_warn(\r\nGPU available: True, used: True\r\nTPU available: False, using: 0 TPU cores\r\nIPU available: False, using: 0 IPUs\r\n.../lib/python3.8/site-packages/pytorch_lightning/trainer/configuration_validator.py:99: UserWarning: you passed in a val_dataloader but have no validation_step. Skipping val loop\r\n  rank_zero_warn(f\"you passed in a {loader_name} but have no {step_name}. Skipping {stage} loop\")\r\nLOCAL_RANK: 0 - CUDA_VISIBLE_DEVICES: [0,1]\r\nTraceback (most recent call last):\r\n  File \"pickle_test.py\", line 81, in <module>\r\n    test_x(tmpdir)\r\n  File \"pickle_test.py\", line 77, in test_x\r\n    trainer.fit(model=model, datamodule=dm)\r\n  File \".../lib/python3.8/site-packages/pytorch_lightning/trainer/trainer.py\", line 553, in fit\r\n    self._run(model)\r\n  File \".../lib/python3.8/site-packages/pytorch_lightning/trainer/trainer.py\", line 918, in _run\r\n    self._dispatch()\r\n  File \".../lib/python3.8/site-packages/pytorch_lightning/trainer/trainer.py\", line 986, in _dispatch\r\n    self.accelerator.start_training(self)\r\n  File \".../lib/python3.8/site-packages/pytorch_lightning/accelerators/accelerator.py\", line 92, in start_training\r\n    self.training_type_plugin.start_training(trainer)\r\n  File \".../lib/python3.8/site-packages/pytorch_lightning/plugins/training_type/ddp_spawn.py\", line 158, in start_training\r\n    mp.spawn(self.new_process, **self.mp_spawn_kwargs)\r\n  File \".../lib/python3.8/site-packages/torch/multiprocessing/spawn.py\", line 230, in spawn\r\n    return start_processes(fn, args, nprocs, join, daemon, start_method='spawn')\r\n  File \".../lib/python3.8/site-packages/torch/multiprocessing/spawn.py\", line 179, in start_processes\r\n    process.start()\r\n  File \".../lib/python3.8/multiprocessing/process.py\", line 121, in start\r\n    self._popen = self._Popen(self)\r\n  File \".../lib/python3.8/multiprocessing/context.py\", line 283, in _Popen\r\n    return Popen(process_obj)\r\n  File \".../lib/python3.8/multiprocessing/popen_spawn_posix.py\", line 32, in __init__\r\n    super().__init__(process_obj)\r\n  File \".../lib/python3.8/multiprocessing/popen_fork.py\", line 19, in __init__\r\n    self._launch(process_obj)\r\n  File \".../lib/python3.8/multiprocessing/popen_spawn_posix.py\", line 47, in _launch\r\n    reduction.dump(process_obj, fp)\r\n  File \".../lib/python3.8/multiprocessing/reduction.py\", line 60, in dump\r\n    ForkingPickler(file, protocol).dump(obj)\r\nAttributeError: Can't pickle local object 'LightningDataModule.from_datasets.<locals>.train_dataloader'\r\n```\r\n\r\n### To Reproduce\r\n\r\nThe following script causes the bug:\r\n```python\r\nimport pytorch_lightning as pl\r\nfrom pytorch_lightning import LightningDataModule\r\nfrom torch.nn import functional as F\r\nfrom torchvision import transforms\r\nfrom torchvision.datasets import MNIST\r\n\r\ntmpdir = '../../data'\r\n\r\n\r\ndef mnist(root: str, normalize: bool = False):\r\n    tlist = [transforms.ToTensor()]\r\n\r\n    if normalize:\r\n        tlist.append(transforms.Normalize((0.5,), (0.5,)))\r\n\r\n    transform = transforms.Compose(tlist)\r\n\r\n    trainset = MNIST(root=root, train=True, download=True, transform=transform)\r\n    testset = MNIST(root=root, train=False, download=True, transform=transform)\r\n    return trainset, testset\r\n\r\n\r\ndef mnist_datamodule(data_path: str, batch_size: int, num_workers: int):\r\n    train, val = mnist(data_path, normalize=True)\r\n    return LightningDataModule.from_datasets(train, val, None, batch_size=batch_size, num_workers=num_workers)\r\n\r\n\r\nimport torch\r\nfrom pytorch_lightning import LightningModule\r\n\r\n\r\nclass BoringModel(LightningModule):\r\n\r\n    def __init__(self):\r\n        super().__init__()\r\n        self.fc1 = torch.nn.Linear(28 * 28, 32)\r\n        self.fc2 = torch.nn.Linear(32, 10)\r\n\r\n    def forward(self, x):\r\n        x = torch.flatten(x, 1)\r\n        x = F.sigmoid(self.fc1(x))\r\n        x = F.softmax(self.fc2(x))\r\n        return x\r\n\r\n    def training_step(self, batch, batch_idx):\r\n        x, y = batch\r\n        y_hat = self(x)\r\n        loss = F.cross_entropy(y_hat, y)\r\n        return loss\r\n\r\n    def training_step_end(self, training_step_outputs):\r\n        return training_step_outputs\r\n\r\n    def training_epoch_end(self, outputs) -> None:\r\n        torch.stack([x[\"loss\"] for x in outputs]).mean()\r\n\r\n    def configure_optimizers(self):\r\n        optimizer = torch.optim.SGD(self.parameters(), lr=0.01)\r\n        lr_scheduler = torch.optim.lr_scheduler.StepLR(optimizer, step_size=1)\r\n        return [optimizer], [lr_scheduler]\r\n\r\n\r\ndef test_x(tmpdir):\r\n    # init model\r\n    model = BoringModel()\r\n\r\n    # Initialize a trainer\r\n    trainer = pl.Trainer(\r\n        max_epochs=1,\r\n        progress_bar_refresh_rate=20,\r\n        gpus=2\r\n    )\r\n\r\n    dm = mnist_datamodule(tmpdir, 16, 1)\r\n\r\n    # Train the model \u26a1\r\n    trainer.fit(model=model, datamodule=dm)\r\n\r\n\r\nif __name__ == '__main__':\r\n    test_x(tmpdir)\r\n```\r\n\r\n### Expected behavior\r\n\r\n<!-- FILL IN -->\r\n\r\n### Environment\r\n\r\nRunning on a SLURM cluster\r\n- PyTorch Lightning Version (e.g., 1.3.0): 1.4.1\r\n- PyTorch Version (e.g., 1.8): 1.9.0\r\n- Python version: 3.8.0\r\n- OS (e.g., Linux): Linux HPCC\r\n- CUDA/cuDNN version: 10.1\r\n- GPU models and configuration: 2x 2080\r\n- How you installed PyTorch (`conda`, `pip`, source): conda\r\n",
    "comments_url": "https://api.github.com/repos/Lightning-AI/pytorch-lightning/issues/9155/comments",
    "author": "import-antigravity",
    "comments": [
      {
        "user": "awaelchli",
        "created_at": "2021-08-27T11:26:21Z",
        "body": "@import-antigravity this is because `LightningModule.from_datasets` patches out the data loader methods. \r\nYou will have to select `accelerator=\"ddp\"` as a workaround."
      }
    ]
  },
  {
    "number": 8823,
    "title": "Allow `--gpus=None` to be specified on the CLI.",
    "created_at": "2021-08-10T03:30:58Z",
    "closed_at": "2021-08-10T16:32:13Z",
    "labels": [
      "feature",
      "help wanted"
    ],
    "url": "https://github.com/Lightning-AI/pytorch-lightning/issues/8823",
    "body": "Currently specifying `--gpus=None` breaks the utils.argparse logic. I want to allow the string None to be a valid option. In other words, I want the user to be able to explicitly specify the default value for this argument, which is currently not possible.\r\n\r\nWhy? In my workflow I customized my argparser. This caused the `--gpus` argument to default to something non-None. Then, for whatever reason, my nvidia drivers stopped working (as they sometimes do), so I wanted to fallback on the CPU. When I tried to set `--gpus=None` argparse balked at me because it was not a valid gpu option. But removing the `--gpus` option no longer defaulted to None. Therefore, there was no way for the user to overwrite my short-sighted defaults and simply get the CPU.\r\n\r\nIf the only way to set the value of an argument is by removing the specification, then that can cause issues like the one I had. Regardless, I think it is good design such that you can always _change_ the value of an argument to achieve a particular funtionality. \r\n\r\nAs an example say I have a script:\r\n\r\n```bash\r\npython fit.py \\\r\n    --gpus=1 \\\r\n    --num_workers=2 \r\n```\r\n\r\nthe diff from the above to the CPU version where it removes the line:\r\n\r\n```bash\r\npython fit.py \\\r\n    --num_workers=2 \r\n```\r\n\r\nno longer gives a reader any indication that a --gpus option was ever there, or is something that could be specified and changed, whereas \r\n\r\n```bash\r\npython fit.py \\\r\n    --gpus=None \\\r\n    --num_workers=2 \r\n```\r\n\r\nPreserves the original `--gpus` arg as something important that this script might vary. (It also makes it much eaiser to futher parametarize that argument in bash itself). I believe that having the option to simply change the value rather than being forced to remove the entire line is desirable. ",
    "comments_url": "https://api.github.com/repos/Lightning-AI/pytorch-lightning/issues/8823/comments",
    "author": "Erotemic",
    "comments": [
      {
        "user": "awaelchli",
        "created_at": "2021-08-10T07:01:35Z",
        "body": "@Erotemic in your use case what is the advantage of None over just setting gpus=0?\r\n\r\nNote we don't have parsing for \"None\" in other trainer arguments."
      },
      {
        "user": "Erotemic",
        "created_at": "2021-08-10T16:32:10Z",
        "body": "Well, now I feel silly.\r\n\r\nI'm so used to setting the specific device I want to use, I didn't even consider that. It still feels a little weird that the user can't set the argument explicitly to the default, but as long as 0 is effectively the default, then I'm happy enough to close the issue and PR. No need to add complexity when its not needed."
      }
    ]
  },
  {
    "number": 8678,
    "title": "multigpu ddp: Code after fit executed many times",
    "created_at": "2021-08-02T13:28:33Z",
    "closed_at": "2021-08-03T08:37:52Z",
    "labels": [
      "bug",
      "help wanted",
      "distributed",
      "priority: 1"
    ],
    "url": "https://github.com/Lightning-AI/pytorch-lightning/issues/8678",
    "body": "## \ud83d\udc1b Bug\r\n\r\nAfter training model with the Trainer.fit on 4-gpu machine with the accelerator=\"ddp\", my code which goes after that executed 3 (?) times. \r\nI receive 2 exceptions \"FileNotFoundError\" and then printing of successful weights saving.\r\n\r\n\r\n\r\n### To Reproduce\r\n\r\n```py\r\n....\r\ntrainer = pl.Trainer(\r\n    gpus=-1,\r\n    precision=16 if train_opt.get(\"fp16\", False) else 32,\r\n    accelerator=\"ddp\",\r\n    accumulate_grad_batches=train_opt.get(\"grad_accum\", 1),\r\n    max_epochs=train_opt.get(\"epochs\", 20),\r\n    default_root_dir=train_opt.get(\"root_dir\", None),\r\n    callbacks=callbacks,\r\n    logger=logger,\r\n    log_every_n_steps=1,\r\n)\r\n....\r\ntrainer.fit(model, dataloaders[0], dataloaders[1])\r\nif trainer.state.status != TrainerStatus.FINISHED:\r\n    raise InterruptedError()\r\n\r\npath = checkpoint_callback.best_model_path\r\n\r\nos.makedirs(os.path.dirname(target_path), exist_ok=True)\r\nmodel.load_state_dict(torch.load(str(path))[\"state_dict\"])\r\ntorch.save(model.model.state_dict(), target_path)\r\n```\r\n\r\n### Expected behavior\r\n\r\nA single execution of the code after trainer.fit\r\n\r\n### Environment\r\n\r\n* CUDA:\r\n\t- GPU:\r\n\t\t- Tesla V100-SXM2-16GB\r\n\t\t- Tesla V100-SXM2-16GB\r\n\t\t- Tesla V100-SXM2-16GB\r\n\t\t- Tesla V100-SXM2-16GB\r\n\t- available:         True\r\n\t- version:           10.1\r\n* Packages:\r\n\t- numpy:             1.18.5\r\n\t- pyTorch_debug:     False\r\n\t- pyTorch_version:   1.6.0\r\n\t- pytorch-lightning: 1.4.0rc0\r\n\t- tqdm:              4.61.2\r\n* System:\r\n\t- OS:                Linux\r\n\t- architecture:\r\n\t\t- 64bit\r\n\t\t- \r\n\t- processor:         x86_64\r\n\t- python:            3.7.7\r\n\t- version:           #1 SMP Tue May 11 20:50:07 UTC 2021\r\n\r\n",
    "comments_url": "https://api.github.com/repos/Lightning-AI/pytorch-lightning/issues/8678/comments",
    "author": "johngull",
    "comments": [
      {
        "user": "tchaton",
        "created_at": "2021-08-03T08:36:48Z",
        "body": "Dear @johngull,\r\n\r\nThis is an expected behaviour.\r\n\r\nUsing accelerator `ddp, this will create multiple independent processes and you script will be run `world_size` times.\r\n\r\n```py\r\n....\r\ntrainer = pl.Trainer(\r\n    gpus=-1,\r\n    precision=16 if train_opt.get(\"fp16\", False) else 32,\r\n    accelerator=\"ddp\",\r\n    accumulate_grad_batches=train_opt.get(\"grad_accum\", 1),\r\n    max_epochs=train_opt.get(\"epochs\", 20),\r\n    default_root_dir=train_opt.get(\"root_dir\", None),\r\n    callbacks=callbacks,\r\n    logger=logger,\r\n    log_every_n_steps=1,\r\n)\r\n....\r\ntrainer.fit(model, dataloaders[0], dataloaders[1])\r\n\r\n#\u00a0You should manipulate checkpoints only on rank 0 :)\r\nif trainer.is_global_zero:\r\n    path = checkpoint_callback.best_model_path\r\n    os.makedirs(os.path.dirname(target_path), exist_ok=True)\r\n    model.load_state_dict(torch.load(str(path))[\"state_dict\"])\r\n    torch.save(model.model.state_dict(), target_path)\r\n```\r\n\r\nBest,\r\nT.C"
      },
      {
        "user": "johngull",
        "created_at": "2021-08-03T08:45:12Z",
        "body": "Hello @tchaton,\r\n\r\nThank you a lot for the clarification and the tip on how to fix it.\r\nI have several questions here.\r\n\r\n- Shall I wrap everything else before trainer.fit also?\r\n- Is there another acceleration method that is faster than data-parallel but doesn't have such behavior?\r\n\r\nThanks.\r\n"
      },
      {
        "user": "tchaton",
        "created_at": "2021-08-03T13:57:50Z",
        "body": "Hey @tchaton,\r\n\r\nMy pleasure :)\r\n\r\n`Shall I wrap everything else before trainer.fit also?`\r\n\r\nThe processes are being created on `trainer.fit` call, therefore the trainer isn't aware of its rank before. Alternatively, you could use `ddp_spawn`.\r\n\r\nYes, `ddp_spawn`.\r\n\r\nBest,\r\nT.C"
      }
    ]
  },
  {
    "number": 8351,
    "title": "_pickle.PicklingError: Can't pickle <class 'TypeError'>: it's not the same object as builtins.TypeError",
    "created_at": "2021-07-09T11:40:19Z",
    "closed_at": "2021-08-29T18:20:37Z",
    "labels": [
      "bug",
      "help wanted",
      "won't fix",
      "waiting on author"
    ],
    "url": "https://github.com/Lightning-AI/pytorch-lightning/issues/8351",
    "body": "## \ud83d\udc1b Bug\r\n\r\nEncountering the following issue:\r\n```\r\nTraceback (most recent call last):\r\n  File \"/import/linux/python/3.8.2/lib/python3.8/multiprocessing/queues.py\", line 239, in _feed\r\n    obj = _ForkingPickler.dumps(obj)\r\n  File \"/import/linux/python/3.8.2/lib/python3.8/multiprocessing/reduction.py\", line 51, in dumps\r\n    cls(buf, protocol).dump(obj)\r\n_pickle.PicklingError: Can't pickle <class 'TypeError'>: it's not the same object as builtins.TypeError\r\nTraceback (most recent call last):\r\n  File \"/import/linux/python/3.8.2/lib/python3.8/multiprocessing/queues.py\", line 239, in _feed\r\n    obj = _ForkingPickler.dumps(obj)\r\n  File \"/import/linux/python/3.8.2/lib/python3.8/multiprocessing/reduction.py\", line 51, in dumps\r\n    cls(buf, protocol).dump(obj)\r\n_pickle.PicklingError: Can't pickle <class 'TypeError'>: it's not the same object as builtins.TypeError\r\n```\r\n\r\n* This happens when using just 1 GPU without multi-gpu\r\n* I have manually pickled my model, data loader and all modules and have fixed any issues\r\n\r\n - PyTorch Lightning Version 1.3.8\r\n - PyTorch Version 1.9\r\n - Python version: 3.8.2\r\n - OS: Linux\r\n - CUDA/cuDNN version: cuda/10.2-cudnn7.5.1\r\n - GPU models and configuration:\r\n - How you installed PyTorch: pip\r\n",
    "comments_url": "https://api.github.com/repos/Lightning-AI/pytorch-lightning/issues/8351/comments",
    "author": "cyrusvahidi",
    "comments": [
      {
        "user": "awaelchli",
        "created_at": "2021-07-09T14:54:31Z",
        "body": "Add \r\n\r\n```\r\nif __name__ == \"__main__\" \r\n```\r\n\r\nwhere your entry point to the script is. \r\nChances are high you get this because you have num_workers > 0 in your DataLoader."
      },
      {
        "user": "awaelchli",
        "created_at": "2021-07-09T17:56:28Z",
        "body": "@rastegah sorry for the standard answer but this was my best guess. \r\nIt looks like you are not posting the full error stack trace so we don't know where this is originating from. And without a code sample it will also be hard to know what's going on. "
      },
      {
        "user": "cyrusvahidi",
        "created_at": "2021-07-14T10:17:34Z",
        "body": "Here is the entry point to the script: \r\n```\r\nimport fire\r\nimport os\r\nimport gin\r\n\r\nfrom dptm.model import lightning_run\r\nfrom dptm.utils import gin_register_and_parse\r\n\r\n@gin.configurable\r\ndef run_train(gin_file: str = \"gin/dptm.gin\"):\r\n    gin_config_path = os.path.join(os.getcwd(), gin_file)\r\n    gin_register_and_parse(gin_config_path)\r\n\r\n    lightning_run(gin_config_path)\r\n\r\ndef main():\r\n  fire.Fire(run_train)\r\n\r\nif __name__ == \"__main__\":\r\n    main()\r\n```\r\n\r\n```\r\n@gin.configurable\r\ndef lightning_run(gin_config: str = None,\r\n                  n_epochs: float = 50, \r\n                  batch_size: float = 1, \r\n                  patience: int = 5,\r\n                  log: bool = False,\r\n                  data_module: Callable = LitDataModule):\r\n    dataset = LitDataModule()\r\n\r\n    model = LitModule()\r\n\r\n    # Initialize a trainer\r\n    logger = init_logger(gin_config) if log else None\r\n    trainer = pl.Trainer(gpus=1,\r\n                                   max_epochs=n_epochs,\r\n                                   progress_bar_refresh_rate=20, \r\n                                   logger=logger)\r\n\r\n    # Train the model \u26a1\r\n    trainer.fit(model, dataset)\r\n    trainer.test(model)\r\n```\r\n\r\nAnd the stack trace occurs during validation sanity check:\r\n\r\n`Validation sanity check: 0it [00:00, ?it/s]Traceback (most recent call last):\r\n  File \"/import/linux/python/3.8.2/lib/python3.8/multiprocessing/queues.py\", line 239, in _feed\r\n    obj = _ForkingPickler.dumps(obj)\r\n  File \"/import/linux/python/3.8.2/lib/python3.8/multiprocessing/reduction.py\", line 51, in dumps\r\n    cls(buf, protocol).dump(obj)\r\n_pickle.PicklingError: Can't pickle <class 'TypeError'>: it's not the same object as builtins.TypeError\r\nTraceback (most recent call last):\r\n  File \"/import/linux/python/3.8.2/lib/python3.8/multiprocessing/queues.py\", line 239, in _feed\r\n    obj = _ForkingPickler.dumps(obj)\r\n  File \"/import/linux/python/3.8.2/lib/python3.8/multiprocessing/reduction.py\", line 51, in dumps\r\n    cls(buf, protocol).dump(obj)\r\n_pickle.PicklingError: Can't pickle <class 'TypeError'>: it's not the same object as builtins.TypeError`\r\n\r\nI've spent hours trying to locate the issue. Manually pickled all modules and data modules. I'm usually an analogous environment and setup to other projects that do not encounter this error."
      },
      {
        "user": "awaelchli",
        "created_at": "2021-07-14T10:23:22Z",
        "body": "Can you set `num_workers=0` just to make sure this is not due to the multiprocessing in dataloaders?\r\nAnd are you 100% sure this is the full stack trace?\r\nThere is nothing more above ` Validation sanity check: 0it [00:00, ?it/s]Traceback (most recent call last): File`?"
      },
      {
        "user": "cyrusvahidi",
        "created_at": "2021-07-14T11:44:53Z",
        "body": "Setting `num_workers=0` does work now! Any idea how to resolve this? "
      },
      {
        "user": "awaelchli",
        "created_at": "2021-07-14T15:03:09Z",
        "body": "Yes, that means you have somewhere a non-picklable object that gets accessed or imported in the code that runs in the worker processes. That's usually everything inside your dataset code and everything that gets imported there. PyTorch / Python will pickle all these objects to recreate the state in spawned processes. You would run into this issue even without Lightning I'm pretty sure. \r\nTo test it, simply do this: \r\n\r\n```python\r\ndef main():\r\n\r\n    dataset = MyDaset(...)\r\n    dataloader = DataLoader(..., num_workers=2)\r\n    data = next(iter(dataloader))\r\n    \r\n    # comment out all Lightning code\r\n    # trainer.fit()\r\n```\r\n    \r\nand if you run into a pickle error we know for sure what's the problem."
      }
    ]
  },
  {
    "number": 7726,
    "title": "on_load_checkpoint never called",
    "created_at": "2021-05-26T14:09:10Z",
    "closed_at": "2021-05-26T14:55:00Z",
    "labels": [
      "bug",
      "help wanted",
      "priority: 1",
      "priority: 2"
    ],
    "url": "https://github.com/Lightning-AI/pytorch-lightning/issues/7726",
    "body": "## \ud83d\udc1b Bug\r\n\r\nI am a new user of PL, so this may be an error of API comprehension on my side.\r\n\r\nI fail to get anything done on the loading of the checkpoint when I resume:\r\n\r\n## Please reproduce using the BoringModel\r\n```python\r\nimport pytorch_lightning as pl\r\nfrom pytorch_lightning.callbacks import ModelCheckpoint\r\nimport torch\r\n\r\n\r\nclass Solver(pl.LightningModule):\r\n    def __init__(self,):\r\n        super(Solver, self).__init__()\r\n        dx = 10\r\n        dy = 1\r\n        n = 100\r\n        self.model = torch.nn.Linear(dx, dy)\r\n        self.dataset = list(zip(torch.rand(n, dx), torch.rand(n, dy)))\r\n\r\n    def train_dataloader(self):\r\n        return torch.utils.data.DataLoader(self.dataset, batch_size=10)\r\n\r\n    def val_dataloader(self):\r\n        return torch.utils.data.DataLoader(self.dataset, batch_size=10)\r\n\r\n    def configure_optimizers(self,):\r\n        return torch.optim.Adam(self.model.parameters(), lr=1e-3)\r\n\r\n    def _step(self, batch):\r\n        x, y = batch\r\n        y_hat = self.model(x)\r\n        return torch.nn.functional.mse_loss(y_hat, y)\r\n\r\n    def training_step(self, batch, batch_idx):\r\n        return self._step(batch)\r\n\r\n    def validation_step(self, batch, batch_idx):\r\n        self._step(batch)\r\n\r\n\r\nclass Checkpoint(ModelCheckpoint):\r\n    def on_load_checkpoint(self, trainer, pl_module, checkpoint):\r\n        print(\"loading...\")\r\n        import pdb # <----------------- Never called?\r\n\r\n        pdb.set_trace()\r\n        foo = checkpoint['bar']\r\n\r\n    def on_save_checkpoint(self, trainer, pl_module, checkpoint):\r\n        print(\"saving...\")\r\n        checkpoint[\"foo\"] = \"bar\"\r\n\r\n\r\nsolver = Solver()\r\ncheckpoint = Checkpoint(dirpath=\"./\", save_last=True)\r\ntrainer = pl.Trainer(callbacks=[checkpoint], max_epochs=3)\r\ntrainer.fit(solver)\r\n\r\ntrainer = pl.Trainer(\r\n    callbacks=[checkpoint], resume_from_checkpoint=\"last.ckpt\", max_epochs=5\r\n)\r\ntrainer.fit(solver)\r\n\r\n```\r\n\r\n### Environment\r\n```\r\n* CUDA:\r\n        - GPU:\r\n                - Quadro GP100\r\n                - Quadro GP100\r\n        - available:         True\r\n        - version:           10.2\r\n* Packages:\r\n        - numpy:             1.19.2\r\n        - pyTorch_debug:     False\r\n        - pyTorch_version:   1.8.1+cu102\r\n        - pytorch-lightning: 1.3.2\r\n        - tqdm:              4.50.2\r\n* System:\r\n        - OS:                Linux\r\n        - architecture:\r\n                - 64bit\r\n                - ELF\r\n        - processor:         x86_64\r\n        - python:            3.8.5\r\n        - version:           #57-Ubuntu SMP Thu Oct 15 10:57:00 UTC 2020\r\n```\r\n",
    "comments_url": "https://api.github.com/repos/Lightning-AI/pytorch-lightning/issues/7726/comments",
    "author": "kingjr",
    "comments": [
      {
        "user": "tchaton",
        "created_at": "2021-05-26T14:50:24Z",
        "body": "Dear @kingjr,\r\n\r\nThis is working.\r\n\r\nExplanation: `on_load_checkpoint` is called only if `on_save_checkpoint` returned something which isn't None. \r\n\r\n```\r\nfrom typing import Callable\r\nimport pytorch_lightning as pl\r\nfrom pytorch_lightning.callbacks import ModelCheckpoint, Callback\r\nimport torch\r\n\r\n\r\nclass Solver(pl.LightningModule):\r\n    def __init__(self,):\r\n        super(Solver, self).__init__()\r\n        dx = 10\r\n        dy = 1\r\n        n = 100\r\n        self.model = torch.nn.Linear(dx, dy)\r\n        self.dataset = list(zip(torch.rand(n, dx), torch.rand(n, dy)))\r\n\r\n    def train_dataloader(self):\r\n        return torch.utils.data.DataLoader(self.dataset, batch_size=10)\r\n\r\n    def val_dataloader(self):\r\n        return torch.utils.data.DataLoader(self.dataset, batch_size=10)\r\n\r\n    def configure_optimizers(self,):\r\n        return torch.optim.Adam(self.model.parameters(), lr=1e-3)\r\n\r\n    def _step(self, batch):\r\n        x, y = batch\r\n        y_hat = self.model(x)\r\n        return torch.nn.functional.mse_loss(y_hat, y)\r\n\r\n    def training_step(self, batch, batch_idx):\r\n        return self._step(batch)\r\n\r\n    def validation_step(self, batch, batch_idx):\r\n        self._step(batch)\r\n\r\n\r\nclass Checkpoint(ModelCheckpoint):\r\n    def on_load_checkpoint(self, trainer, pl_module, checkpoint):\r\n        print(\"loading...\")\r\n        import pdb; pdb.set_trace()\r\n        foo = checkpoint['bar']\r\n\r\n    def on_save_checkpoint(self, trainer, pl_module, checkpoint):\r\n        print(\"saving...\")\r\n        checkpoint[\"foo\"] = \"bar\"\r\n        return checkpoint\r\n\r\n\r\nsolver = Solver()\r\ncheckpoint = Checkpoint(dirpath=\"./\", save_last=True)\r\ntrainer = pl.Trainer(callbacks=[checkpoint], max_epochs=3)\r\ntrainer.fit(solver)\r\n\r\ntrainer = pl.Trainer(\r\n    callbacks=[checkpoint], resume_from_checkpoint=\"last.ckpt\", max_epochs=5\r\n)\r\ntrainer.fit(solver)\r\n```"
      }
    ]
  },
  {
    "number": 7544,
    "title": "Training fails at the end of the epoch when returning None in the training step",
    "created_at": "2021-05-14T09:17:48Z",
    "closed_at": "2021-05-14T13:32:46Z",
    "labels": [
      "bug",
      "help wanted"
    ],
    "url": "https://github.com/Lightning-AI/pytorch-lightning/issues/7544",
    "body": "## \ud83d\udc1b Bug\r\n\r\nSometimes my training loss in a batch is nan. Hence, I return None as loss so that the model will not backpropagate through it as suggested here: #4956. It works fine during the epoch; however, the code fails at the end of the epoch in the function reduce_across_time (line 532).\r\n\r\n```python\r\n           if isinstance(value, list):\r\n                value = torch.tensor(value)\r\n```\r\n\r\nIn case of None, value will be equal to [None] and torch cannot create a proper tensor out of it (*** RuntimeError: Could not infer dtype of NoneType)\r\n\r\nIs it me doing something wrong, or is it a bug in Lightning? Is there any workaround?\r\n\r\nPytorch Version \r\npytorch-lightning-1.3.1\r\ntorch 1.8.1+cu11\r\npython 3.7.9",
    "comments_url": "https://api.github.com/repos/Lightning-AI/pytorch-lightning/issues/7544/comments",
    "author": "TommasoBendinelli",
    "comments": [
      {
        "user": "TommasoBendinelli",
        "created_at": "2021-05-14T10:41:40Z",
        "body": "Sure, this reproduce the bug\r\n```python\r\nimport os\r\nimport random\r\n\r\nimport torch\r\nfrom torch.utils.data import DataLoader, Dataset\r\n\r\nfrom pytorch_lightning import LightningModule, Trainer\r\n\r\n\r\nclass RandomDataset(Dataset):\r\n\r\n    def __init__(self, size, length):\r\n        self.len = length\r\n        self.data = torch.randn(length, size)\r\n\r\n    def __getitem__(self, index):\r\n        return self.data[index]\r\n\r\n    def __len__(self):\r\n        return self.len\r\n\r\n\r\nclass BoringModel(LightningModule):\r\n\r\n    def __init__(self):\r\n        super().__init__()\r\n        self.layer = torch.nn.Linear(32, 2)\r\n\r\n    def forward(self, x):\r\n        return self.layer(x)\r\n\r\n    def training_step(self, batch, batch_idx):\r\n        loss = self(batch).sum()\r\n        if batch_idx == 2:\r\n            loss = None\r\n        self.log(\"train_loss\", loss)\r\n        return loss\r\n\r\n    def validation_step(self, batch, batch_idx):\r\n        loss = self(batch).sum()\r\n        self.log(\"valid_loss\", loss)\r\n\r\n    def test_step(self, batch, batch_idx):\r\n        loss = self(batch).sum()\r\n        self.log(\"test_loss\", loss)\r\n\r\n    def configure_optimizers(self):\r\n        return torch.optim.SGD(self.layer.parameters(), lr=0.1)\r\n\r\n\r\ndef run():\r\n    train_data = DataLoader(RandomDataset(32, 64), batch_size=2)\r\n    val_data = DataLoader(RandomDataset(32, 64), batch_size=2)\r\n    test_data = DataLoader(RandomDataset(32, 64), batch_size=2)\r\n\r\n    model = BoringModel()\r\n    trainer = Trainer(\r\n        default_root_dir=os.getcwd(),\r\n        limit_train_batches=5,\r\n        limit_val_batches=1,\r\n        num_sanity_val_steps=0,\r\n        max_epochs=10,\r\n        weights_summary=None,\r\n    )\r\n    trainer.fit(model, train_dataloader=train_data, val_dataloaders=val_data)\r\n    trainer.test(model, test_dataloaders=test_data)\r\n\r\n\r\nif __name__ == '__main__':\r\n    run()\r\n```"
      },
      {
        "user": "rohitgr7",
        "created_at": "2021-05-14T10:53:36Z",
        "body": "I think its because of this\r\n```python\r\nif batch_idx == 2:\r\n    loss = None\r\nself.log(\"train_loss\", loss)\r\n```\r\n`None` values are being logged and stored here which are then accumulated at epoch end which is then throwing this error.\r\nThis should work\r\n```python\r\nif batch_idx == 2:\r\n    loss = None\r\nelse:\r\n    self.log(\"train_loss\", loss)\r\n```\r\nor lightning should handle this internally?"
      },
      {
        "user": "TommasoBendinelli",
        "created_at": "2021-05-14T11:01:04Z",
        "body": "Ahh, I see, it makes sense.  When averaging the loss across multiple batches, how does lightning handles the fact that a batch was skipped due to the loss being None? Does it simply not include it in the average? "
      },
      {
        "user": "awaelchli",
        "created_at": "2021-05-14T11:08:32Z",
        "body": "Sorry, had to delete my answer and double check but yes, it averages only over the metrics logged, not over all training_steps. "
      },
      {
        "user": "rohitgr7",
        "created_at": "2021-05-14T11:13:16Z",
        "body": "to be specific it does weighted average by default using batch_size. In your case, it hasn't reached up till that point because this error is thrown while converting the logs list to PyTorch tensor and since it contains NaN values, it is throwing the error. Ideally, if a batch is skipped then it shouldn't contribute while aggregating the results so you can have an else statement there which will just work fine."
      }
    ]
  },
  {
    "number": 6778,
    "title": "No TPU devices were found.",
    "created_at": "2021-04-01T05:38:18Z",
    "closed_at": "2021-04-02T05:16:18Z",
    "labels": [
      "bug",
      "help wanted"
    ],
    "url": "https://github.com/Lightning-AI/pytorch-lightning/issues/6778",
    "body": "Thanks for great framework.  \r\nI tried to train with tpu (Google Cloud Platform Environment). I encounter error like this:\r\n```\r\nkaki_ai@kaki-ins:~/kopite-bot$ python3 train_blender.py\r\n16:14:31 | Overriding opt[\"no_cuda\"] to True (previously: False)\r\n16:14:31 | Loading model with `--beam-block-full-context false`\r\n16:14:31 | loading dictionary from /home/kaki_ai/ParlAI/data/models/blender/blender_90M/model.dict\r\n16:14:31 | num words = 54944\r\n16:14:32 | DEPRECATED: XLM should only be used for backwards compatibility, as it involves a less-stable layernorm operation.\r\n16:14:33 | Total parameters: 87,508,992 (87,508,992 trainable)\r\n16:14:33 | Loading existing model params from /home/kaki_ai/ParlAI/data/models/blender/blender_90M/model\r\nTraceback (most recent call last):\r\n  File \"train_blender.py\", line 47, in <module>\r\n    val_dataloader=test_loader,\r\n  File \"/home/kaki_ai/kopite-bot/training/lightning_base.py\", line 135, in fit\r\n    accumulate_grad_batches=self.accumulate_grad_batches,\r\n  File \"/opt/conda/lib/python3.7/site-packages/pytorch_lightning/trainer/connectors/env_vars_connector.py\", line 39, in insert_env_defaults\r\n    return fn(self, **kwargs)\r\n  File \"/opt/conda/lib/python3.7/site-packages/pytorch_lightning/trainer/trainer.py\", line 321, in __init__\r\n    replace_sampler_ddp, deterministic, precision, amp_backend, amp_level, plugins\r\n  File \"/opt/conda/lib/python3.7/site-packages/pytorch_lightning/trainer/connectors/accelerator_connector.py\", line 91, in __init__\r\n    self.tpu_cores = device_parser.parse_tpu_cores(tpu_cores)\r\n  File \"/opt/conda/lib/python3.7/site-packages/pytorch_lightning/utilities/device_parser.py\", line 113, in parse_tpu_cores\r\n    raise MisconfigurationException('No TPU devices were found.')\r\npytorch_lightning.utilities.exceptions.MisconfigurationException: No TPU devices were found.\r\n```\r\n\r\nIf you have any doubts, please help me. Thank you!",
    "comments_url": "https://api.github.com/repos/Lightning-AI/pytorch-lightning/issues/6778/comments",
    "author": "sooftware",
    "comments": [
      {
        "user": "kaushikb11",
        "created_at": "2021-04-01T06:50:27Z",
        "body": "Hi @sooftware,\r\nDid you export the env variables required to connect to TPU? TPU_IP_ADDRESS & XRT_TPU_CONFIG.\r\n\r\nIf yes, could you try the master and update us on it? We pushed an update last night #6767. Thanks!"
      },
      {
        "user": "sooftware",
        "created_at": "2021-04-02T00:22:40Z",
        "body": "I set `export XRT_TPU_CONFIG=\"tpu_worker;0;$TPU_IP_ADDRESS:xxxx\"` and It works. Thank you!"
      }
    ]
  },
  {
    "number": 6421,
    "title": "trainer.test is breaking when a model is not passed",
    "created_at": "2021-03-08T21:56:10Z",
    "closed_at": "2021-03-25T16:23:02Z",
    "labels": [
      "bug",
      "help wanted",
      "priority: 0"
    ],
    "url": "https://github.com/Lightning-AI/pytorch-lightning/issues/6421",
    "body": "From the docs:\r\n\r\n```\r\n# (1) load the best checkpoint automatically (lightning tracks this for you)\r\ntrainer.test()\r\n```\r\n\r\nTrainer.test should use the best checkpoint when a model isn't provided, and currently, that doesn't work.",
    "comments_url": "https://api.github.com/repos/Lightning-AI/pytorch-lightning/issues/6421/comments",
    "author": "edenlightning",
    "comments": [
      {
        "user": "awaelchli",
        "created_at": "2021-03-08T23:27:30Z",
        "body": "Here is an example that shows that it works:\r\n\r\n```python\r\nfrom argparse import ArgumentParser\r\n\r\nimport torch\r\nfrom torch.nn import functional as F\r\n\r\nimport pytorch_lightning as pl\r\nfrom pl_examples.basic_examples.mnist_datamodule import MNISTDataModule\r\nfrom pytorch_lightning import Trainer\r\n\r\n\r\nclass LitClassifier(pl.LightningModule):\r\n\r\n    def __init__(self, hidden_dim=128, learning_rate=1e-3):\r\n        super().__init__()\r\n        self.save_hyperparameters()\r\n\r\n        self.l1 = torch.nn.Linear(28 * 28, self.hparams.hidden_dim)\r\n        self.l2 = torch.nn.Linear(self.hparams.hidden_dim, 10)\r\n\r\n    def forward(self, x):\r\n        x = x.view(x.size(0), -1)\r\n        x = torch.relu(self.l1(x))\r\n        x = torch.relu(self.l2(x))\r\n        return x\r\n\r\n    def training_step(self, batch, batch_idx):\r\n        x, y = batch\r\n        y_hat = self(x)\r\n        loss = F.cross_entropy(y_hat, y)\r\n        return loss\r\n\r\n    def validation_step(self, batch, batch_idx):\r\n        x, y = batch\r\n        y_hat = self(x)\r\n        loss = F.cross_entropy(y_hat, y)\r\n        self.log('valid_loss', loss)\r\n\r\n    def test_step(self, batch, batch_idx):\r\n        x, y = batch\r\n        y_hat = self(x)\r\n        loss = F.cross_entropy(y_hat, y)\r\n        self.log('test_loss', loss)\r\n\r\n    def on_test_start(self):\r\n        checkpoint = torch.load(self.trainer.checkpoint_callback.best_model_path)\r\n        assert torch.allclose(checkpoint[\"state_dict\"][\"l1.weight\"], self.l1.weight)\r\n        assert torch.abs(self.l1.weight).sum().item() > 0\r\n\r\n    def configure_optimizers(self):\r\n        return torch.optim.Adam(self.parameters(), lr=self.hparams.learning_rate)\r\n\r\n    @staticmethod\r\n    def add_model_specific_args(parent_parser):\r\n        parser = ArgumentParser(parents=[parent_parser], add_help=False)\r\n        parser.add_argument('--hidden_dim', type=int, default=128)\r\n        parser.add_argument('--learning_rate', type=float, default=0.0001)\r\n        return parser\r\n\r\n\r\ndef cli_main():\r\n    pl.seed_everything(1234)\r\n    parser = ArgumentParser()\r\n    parser = pl.Trainer.add_argparse_args(parser)\r\n    parser = LitClassifier.add_model_specific_args(parser)\r\n    parser = MNISTDataModule.add_argparse_args(parser)\r\n    args = parser.parse_args()\r\n\r\n    dm = MNISTDataModule.from_argparse_args(args)\r\n\r\n    model = LitClassifier(args.hidden_dim, args.learning_rate)\r\n    trainer = Trainer(\r\n        max_epochs=2,\r\n        limit_train_batches=1,\r\n        limit_val_batches=1,\r\n    )\r\n    trainer.fit(model, datamodule=dm)\r\n\r\n    # erase model weight\r\n    torch.fill_(model.l1.weight.data, 0)\r\n    assert torch.abs(model.l1.weight).sum().item() == 0\r\n    trainer.test()\r\n    assert torch.abs(model.l1.weight).sum().item() > 0\r\n\r\n\r\nif __name__ == '__main__':\r\n    cli_main()\r\n\r\n```\r\n\r\nIf you look at the assertion there in on_test_start, the weights are correctly loaded.\r\nPlease let me know under what circumstances it doesn't work. A reproducible example would be very much appreciated. Feel free to take my code and modify it."
      }
    ]
  },
  {
    "number": 5897,
    "title": "Auto_scale_batch_size fails for to bigger batch sizes, cuDNN failure",
    "created_at": "2021-02-10T08:51:55Z",
    "closed_at": "2021-02-15T15:44:41Z",
    "labels": [
      "bug",
      "help wanted"
    ],
    "url": "https://github.com/Lightning-AI/pytorch-lightning/issues/5897",
    "body": "## \ud83d\udc1b Bug\r\n\r\n<!-- A clear and concise description of what the bug is. -->\r\nI'm using a pre-trained ResNet50 on 224x224 images with 16-bit precision, I wanted to test the auto_scale_batch_size functionality.\r\n\r\nThe output in the terminal is the following:\r\nGPU available: True, used: True\r\nTPU available: None, using: 0 TPU cores\r\nLOCAL_RANK: 0 - CUDA_VISIBLE_DEVICES: [0]\r\nUsing native 16bit precision.\r\nBatch size 2 succeeded, trying batch size 4\r\nBatch size 4 succeeded, trying batch size 8\r\nBatch size 8 succeeded, trying batch size 16\r\nBatch size 16 succeeded, trying batch size 32\r\nBatch size 32 succeeded, trying batch size 64\r\nBatch size 64 succeeded, trying batch size 128\r\nBatch size 128 succeeded, trying batch size 256\r\n\r\nAll good till then. On batch size 256 the GPU's memory certainly is not sufficient and it fails on a 2d convolution.\r\nThe auto_scaling should be aborted at this point and the batch_size fixed to 128.\r\nInstead the script fails with the message \"RuntimeError: Unable to find a valid cuDNN algorithm to run convolution\".\r\n\r\n### To Reproduce\r\nI'm not doing anything exceptional:\r\n1. Parsing arguments with \"--auto_scale_batch_size\", \"true\"\r\n2. Initiating model, datamodule and trainer using the parsed arguments\r\n3. trainer.tune(model, dm)\r\n\r\n### Question\r\nIs this a problem on the Pytorch Lightning side not capturing the exception or is this anyhow linked to Cuda and installing a different version could be enough?\r\n\r\n\r\n### Environment\r\n1x GeForce RTX 2080Ti\r\nUbuntu 20.10\r\nPython 3.8.5\r\nPytorch Lightning 1.1.8\r\nPytorch 1.7.1\r\nCuda 11.2\r\nEnv created with miniconda, packages installed with pip\r\n",
    "comments_url": "https://api.github.com/repos/Lightning-AI/pytorch-lightning/issues/5897/comments",
    "author": "FlorianMF",
    "comments": [
      {
        "user": "justusschock",
        "created_at": "2021-02-10T08:56:45Z",
        "body": "Hi @FlorianMF,\r\n\r\nHave you tried to run that network with batchsize 256 without the auto_scaling? Because we don't do anything special on the convolutional side and this seems to be a bug in PyTorch.\r\n\r\nAlso could you try with `torch.backends.cudnn.benchmark = True` and/or `torch.backends.cudnn.enabled = False`? "
      },
      {
        "user": "FlorianMF",
        "created_at": "2021-02-10T09:22:45Z",
        "body": "Hi @justusschock, \r\nI get the same error without auto_scaling for a batch_size=256, as well when adding 'torch.backends.cudnn.benchmark = True' at the top of the script.\r\nWhen adding \"torch.backends.cudnn.enabled = False\" the error message \"RuntimeError: CUDA out of memory\" confirms my assumption.\r\n\r\nSo, am I 'forced' to use 'auto_scale_batch_size' once to get the maximum batch size and then rerun the script without the flag? I think your goal proposing this functionality is that this is not needed though.\r\n"
      },
      {
        "user": "justusschock",
        "created_at": "2021-02-10T10:03:05Z",
        "body": "No, usually you don't have to rerun it. But with torch.backends.cudnn.enabled = False, PyTorch will use some other algorithm for convolutions, which may be more memory demanding. So for some reason there seems to be a bug within PyTorch for the cudnn convolution. Our tuner only listens to the `Runtime: CUDA out of memory`-Error as everything else could also be a user-error.\r\n\r\nUnfortunately there is nothing else we can do on that"
      },
      {
        "user": "FlorianMF",
        "created_at": "2021-02-10T10:24:26Z",
        "body": "You're right. The error is captured when 'torch.backends.cudnn.enabled = False' is added at the top and the script continues."
      }
    ]
  },
  {
    "number": 5672,
    "title": "Calling trainer.fit fails with: AttributeError: 'dict' object has no attribute 'pretty'",
    "created_at": "2021-01-27T07:03:05Z",
    "closed_at": "2021-02-02T16:40:21Z",
    "labels": [
      "bug",
      "help wanted",
      "waiting on author",
      "3rd party"
    ],
    "url": "https://github.com/Lightning-AI/pytorch-lightning/issues/5672",
    "body": "## \ud83d\udc1b Bug\r\n```\r\ndataset = MNIST(os.getcwd(), download=True, transform=transforms.ToTensor())\r\ntrain, val = random_split(dataset, [55000, 5000])\r\n\r\nautoencoder = LitAutoEncoder()\r\ntrainer = pl.Trainer()\r\ntrainer.fit(autoencoder, DataLoader(train))\r\n```\r\n\r\nCalling trainer.fit fails with AttributeError: 'dict' object has no attribute 'pretty'\r\n\r\n\r\n## To Reproduce\r\n\r\n```\r\nGPU available: True, used: False\r\nTPU available: None, using: 0 TPU cores\r\n/home/nithin/.pyenv/versions/3.7.3/lib/python3.7/site-packages/pytorch_lightning/utilities/distributed.py:50: UserWarning: GPU available but not used. Set the --gpus flag when calling the script.\r\n  warnings.warn(*args, **kwargs)\r\n---------------------------------------------------------------------------\r\nAttributeError                            Traceback (most recent call last)\r\n<ipython-input-9-ec8282b1f4ec> in <module>\r\n      4 autoencoder = LitAutoEncoder()\r\n      5 trainer = pl.Trainer()\r\n----> 6 trainer.fit(autoencoder, DataLoader(train))\r\n\r\n~/.pyenv/versions/3.7.3/lib/python3.7/site-packages/pytorch_lightning/trainer/trainer.py in fit(self, model, train_dataloader, val_dataloaders, datamodule)\r\n    508         self.call_hook('on_fit_start')\r\n    509 \r\n--> 510         results = self.accelerator_backend.train()\r\n    511         self.accelerator_backend.teardown()\r\n    512 \r\n\r\n~/.pyenv/versions/3.7.3/lib/python3.7/site-packages/pytorch_lightning/accelerators/accelerator.py in train(self)\r\n     54 \r\n     55     def train(self):\r\n---> 56         self.trainer.setup_trainer(self.trainer.model)\r\n     57         return self.train_or_test()\r\n     58 \r\n\r\n~/.pyenv/versions/3.7.3/lib/python3.7/site-packages/pytorch_lightning/trainer/trainer.py in setup_trainer(self, model)\r\n    442             self.logger.log_hyperparams(ref_model.hparams_initial)\r\n    443             self.logger.log_graph(ref_model)\r\n--> 444             self.logger.save()\r\n    445 \r\n    446         # wait for all to join if on distributed\r\n\r\n~/.pyenv/versions/3.7.3/lib/python3.7/site-packages/pytorch_lightning/utilities/distributed.py in wrapped_fn(*args, **kwargs)\r\n     38     def wrapped_fn(*args, **kwargs):\r\n     39         if rank_zero_only.rank == 0:\r\n---> 40             return fn(*args, **kwargs)\r\n     41 \r\n     42     return wrapped_fn\r\n\r\n~/.pyenv/versions/3.7.3/lib/python3.7/site-packages/pytorch_lightning/loggers/tensorboard.py in save(self)\r\n    234         # save the metatags file if it doesn't exist\r\n    235         if not self._fs.isfile(hparams_file):\r\n--> 236             save_hparams_to_yaml(hparams_file, self.hparams)\r\n    237 \r\n    238     @rank_zero_only\r\n\r\n~/.pyenv/versions/3.7.3/lib/python3.7/site-packages/pytorch_lightning/core/saving.py in save_hparams_to_yaml(config_yaml, hparams)\r\n    386         with fs.open(config_yaml, \"w\", encoding=\"utf-8\") as fp:\r\n    387             try:\r\n--> 388                 OmegaConf.save(hparams, fp)\r\n    389                 return\r\n    390             except (UnsupportedValueType, ValidationError):\r\n\r\n~/.pyenv/versions/3.7.3/lib/python3.7/site-packages/omegaconf/omegaconf.py in save(config, f, resolve)\r\n    268         :param resolve: True to save a resolved config (defaults to False)\r\n    269         \"\"\"\r\n--> 270         data = config.pretty(resolve=resolve)\r\n    271         if isinstance(f, (str, pathlib.Path)):\r\n    272             with io.open(os.path.abspath(f), \"w\", encoding=\"utf-8\") as file:\r\n\r\nAttributeError: 'dict' object has no attribute 'pretty'\r\n\r\n```\r\n## Expected behavior\r\n\r\nCalling **trainer.fit(autoencoder, DataLoader(train))** should train MNIST classifier without errors.\r\n\r\n## Environment\r\n\r\n* CUDA:\r\n\t- GPU:\r\n\t\t- GeForce GTX 1050 Ti\r\n\t- available:         True\r\n\t- version:           10.2\r\n* Packages:\r\n\t- numpy:             1.19.5\r\n\t- pyTorch_debug:     False\r\n\t- pyTorch_version:   1.7.1\r\n\t- pytorch-lightning: 1.1.6\r\n\t- tqdm:              4.50.0\r\n* System:\r\n\t- OS:                Linux\r\n\t- architecture:\r\n\t\t- 64bit\r\n\t\t- \r\n\t- processor:         x86_64\r\n\t- python:            3.7.3\r\n\t- version:           #70~18.04.1-Ubuntu SMP Tue Jan 12 17:18:00 UTC 2021\r\n\r\n### Additional context\r\n\r\nThe program was running on **jupyter notebook**.\r\n",
    "comments_url": "https://api.github.com/repos/Lightning-AI/pytorch-lightning/issues/5672/comments",
    "author": "nithinivi",
    "comments": [
      {
        "user": "omry",
        "created_at": "2021-01-28T05:03:29Z",
        "body": "Try to upgrade to OmegaConf 2.0, you have an incompatible version installed."
      },
      {
        "user": "Borda",
        "created_at": "2021-01-29T21:04:31Z",
        "body": "@nithinivi what OmegaConf are you using?"
      },
      {
        "user": "nithinivi",
        "created_at": "2021-01-30T03:52:21Z",
        "body": "@Borda @omry The version number of OmegaConf  is  2.0.0"
      },
      {
        "user": "omry",
        "created_at": "2021-01-30T09:21:02Z",
        "body": "@nithinivi,\r\n\r\nconfig.pretty() is deprecated in OmegaConf 2.0 and the source code no longer contain calls to it.\r\nThe stack trace is definitely not from OmegaConf 2.0. If you think this is wrong please provide repro instructions from scratch (including the creation of a virtualenv or a conda environment).\r\n\r\nBy the way, please upgrade to latest OmegaConf 2.0 release (currently 2.0.6)."
      },
      {
        "user": "nithinivi",
        "created_at": "2021-02-01T06:31:32Z",
        "body": "I created a new conda env and installed the torch and pytorch-ligthing.\r\nTried out the same code and the issue was not reproduced. So I do believe this was a issues with the environment setup and it's not using OmegaConf 2.0.\r\n\r\nI have installed python using **pyenv**  and executing the code in a jupyter notebook."
      },
      {
        "user": "roytseng-tw",
        "created_at": "2021-02-02T15:26:32Z",
        "body": "I had the same issue with omegaconf 2.0.1rc11.\r\nAfter update to the latest version 2.0.6, the issue is gone."
      }
    ]
  },
  {
    "number": 5641,
    "title": "Log fails: \"Tensors must be CUDA and dense\" with multi-GPUs using ddp",
    "created_at": "2021-01-24T21:26:14Z",
    "closed_at": "2021-01-25T18:30:45Z",
    "labels": [
      "bug",
      "help wanted"
    ],
    "url": "https://github.com/Lightning-AI/pytorch-lightning/issues/5641",
    "body": "## \ud83d\udc1b Bug\r\n\r\n<!-- A clear and concise description of what the bug is. -->\r\nI'm encountering the following error when running my code (see below) with multi-GPUs (single GPU and CPU works fine). `accelerator` used is `ddp`.\r\n```\r\nline 117, in test_epoch_end\r\nwork = _default_pg.allreduce([tensor], opts)\r\nRuntimeError: self.log(\"avg_test_acc\", avg_test_acc, sync_dist=True)Tensors must be CUDA and dense\r\n```\r\nHowever, when I remove the `sync_dist=True` all goes well.\r\n\r\n\r\n\r\n<!-- Please paste your BoringModel colab link here. -->\r\n\r\n### To Reproduce\r\nThe code, at it's core, looks like this:\r\n```\r\nimport pytorch_lightning as pl\r\nimport torch\r\nfrom torchvision import datasets, transforms\r\nfrom torch.utils.data import DataLoader\r\nfrom torch.autograd import Variable\r\nfrom argparse import ArgumentParser\r\nfrom pytorch_lightning.metrics.functional import accuracy\r\nfrom torch.nn import functional as F\r\nfrom argparse import ArgumentParser\r\nimport mlflow\r\nfrom data_loading.data_loader import MNISTDataModule\r\nfrom model.model import LightningMNISTClassifier\r\nimport os\r\n\r\nclass MNISTDataModule(pl.LightningDataModule):\r\n    def __init__(self, **kwargs):\r\n        super(MNISTDataModule, self).__init__()\r\n        self.df_train = None\r\n        self.df_test = None\r\n        self.train_data_loader = None\r\n        self.test_data_loader = None\r\n        self.args = kwargs\r\n\r\n        # transforms for images\r\n        self.transform = transforms.Compose(\r\n            [transforms.ToTensor(), transforms.Normalize((0.1307,), (0.3081,))]\r\n        )\r\n\r\n    def setup(self, stage=None):\r\n        self.df_train = datasets.MNIST(\r\n            \"dataset\", download=True, train=True, transform=self.transform\r\n        )\r\n        self.df_test = datasets.MNIST(\r\n            \"dataset\", download=True, train=False, transform=self.transform\r\n        )\r\n\r\n    def train_dataloader(self):\r\n        return DataLoader(\r\n            self.df_train, batch_size=self.args['training_batch_size'], num_workers=self.args[\"num_workers\"], shuffle=True\r\n        )\r\n\r\n    def test_dataloader(self):\r\n        return DataLoader(\r\n            self.df_test, batch_size=self.args['test_batch_size'], num_workers=self.args[\"num_workers\"], shuffle=False\r\n        )\r\nclass LightningMNISTClassifier(pl.LightningModule):\r\n    def __init__(self, len_test_set: int, **kwargs):\r\n        super(LightningMNISTClassifier, self).__init__()\r\n        self.optimizer = None\r\n        self.conv1 = torch.nn.Conv2d(1, 32, 3, 1)\r\n        self.conv2 = torch.nn.Conv2d(32, 64, 3, 1)\r\n        self.dropout1 = torch.nn.Dropout2d(0.25)\r\n        self.fc1 = torch.nn.Linear(9216, 128)\r\n        self.dropout2 = torch.nn.Dropout2d(0.25)\r\n        self.fc2 = torch.nn.Linear(128, 10)\r\n        self.args = kwargs\r\n        self.len_test_set = len_test_set\r\n\r\n    @staticmethod\r\n    def add_model_specific_args(parent_parser):\r\n        parser = ArgumentParser(parents=[parent_parser], add_help=False)\r\n        parser.add_argument(\"--num_workers\", type=int, default=3, metavar=\"N\", help=\"number of workers (default: 3)\")\r\n        parser.add_argument(\"--lr\", type=float, default=0.01, help=\"learning rate (default: 0.01)\")\r\n        parser.add_argument('--training-batch-size', type=int, default=64, help='Input batch size for training')\r\n        parser.add_argument('--test-batch-size', type=int, default=1000, help='Input batch size for testing')\r\n\r\n        return parser\r\n\r\n    def forward(self, x):\r\n        x = F.relu(self.conv1(x))\r\n        x = F.relu(self.conv2(x))\r\n        x = F.max_pool2d(x, 2)\r\n        x = torch.flatten(self.dropout1(x), 1)\r\n        x = F.relu(self.fc1(x))\r\n        x = self.dropout2(x)\r\n        x = self.fc2(x)\r\n        output = F.log_softmax(x, dim=1)\r\n\r\n        return output\r\n\r\n    def cross_entropy_loss(self, logits, labels):\r\n        return F.nll_loss(logits, labels)\r\n\r\n    def training_step(self, train_batch, batch_idx):\r\n        x, y = train_batch\r\n        logits = self.forward(x)\r\n        loss = self.cross_entropy_loss(logits, y)\r\n        return {\"loss\": loss}\r\n\r\n    def training_epoch_end(self, training_step_outputs):\r\n        train_avg_loss = torch.stack([train_output[\"loss\"] for train_output in training_step_outputs]).mean()\r\n        self.log(\"train_loss\", train_avg_loss)\r\n\r\n    def test_step(self, test_batch, batch_idx):\r\n        \"\"\"\r\n        Predicts on the test dataset to compute the current accuracy of the model.\r\n\r\n        :param test_batch: Batch data\r\n        :param batch_idx: Batch indices\r\n\r\n        :return: output - Testing accuracy\r\n        \"\"\"\r\n\r\n        x, y = test_batch\r\n        output = self.forward(x)\r\n        _, y_hat = torch.max(output, dim=1)\r\n        test_acc = accuracy(y_hat.cpu(), y.cpu())\r\n        # sum up batch loss\r\n        data, target = Variable(x), Variable(y)\r\n        test_loss = F.nll_loss(output, target, reduction='sum').data.item()\r\n        # get the index of the max log-probability\r\n        pred = output.data.max(1)[1]\r\n        correct = pred.eq(target.data).cpu().sum().item()\r\n        return {\"test_acc\": test_acc, \"test_loss\": test_loss, \"correct\": correct}\r\n\r\n    def test_epoch_end(self, outputs):\r\n        \"\"\"\r\n        Computes average test accuracy score\r\n\r\n        :param outputs: outputs after every epoch end\r\n\r\n        :return: output - average test loss\r\n        \"\"\"\r\n        avg_test_acc = torch.stack([test_output[\"test_acc\"] for test_output in outputs]).mean()\r\n        avg_test_loss = sum([test_output[\"test_loss\"] for test_output in outputs])/self.len_test_set\r\n        test_correct = sum([test_output[\"correct\"] for test_output in outputs])\r\n        self.log(\"avg_test_acc\", avg_test_acc, sync_dist=True)\r\n        self.log(\"avg_test_loss\", avg_test_loss, sync_dist=True)\r\n        self.log(\"test_correct\", test_correct, sync_dist=True)\r\n\r\n    def prepare_data(self):\r\n        \"\"\"\r\n        Prepares the data for training and prediction\r\n        \"\"\"\r\n        return {}\r\n\r\n    def configure_optimizers(self):\r\n        \"\"\"\r\n        Initializes the optimizer and learning rate scheduler\r\n\r\n        :return: output - Initialized optimizer and scheduler\r\n        \"\"\"\r\n        self.optimizer = torch.optim.Adam(self.parameters())\r\n        return [self.optimizer]\r\n\r\nif __name__ == \"__main__\":\r\n\r\n    parser = ArgumentParser(description=\"PyTorch Autolog Mnist Example\")\r\n    use_cuda = torch.cuda.is_available()\r\n    device = torch.device(\"cuda\" if use_cuda else \"cpu\")\r\n\r\n    parser = pl.Trainer.add_argparse_args(parent_parser=parser)\r\n    parser = LightningMNISTClassifier.add_model_specific_args(parent_parser=parser)\r\n\r\n    mlflow.pytorch.autolog()\r\n    # parse cli arguments\r\n    args = parser.parse_args()\r\n    dict_args = vars(args)\r\n\r\n    set_general_random_seeds(dict_args['general_seed'])\r\n    set_pytorch_random_seeds(dict_args['pytorch_seed'], True)\r\n\r\n    if \"accelerator\" in dict_args and dict_args[\"accelerator\"] == \"None\":\r\n        dict_args[\"accelerator\"] = None\r\n\r\n    dm = MNISTDataModule(**dict_args)\r\n\r\n    dm.prepare_data()\r\n    dm.setup(stage=\"fit\")\r\n    model = LightningMNISTClassifier(len_test_set=len(dm.df_test), **dict_args)\r\n    trainer = pl.Trainer.from_argparse_args(args)\r\n     \r\n\r\n    trainer.deterministic = True\r\n    trainer.benchmark = False\r\n    trainer.fit(model, dm)\r\n    trainer.test()\r\n```\r\n\r\n### Expected behavior\r\n\r\n<!-- FILL IN -->\r\nTrain and test successfully without mentioned error above when using multiple GPUs (like it runs successfully on single GPU and CPU).\r\n\r\n### Environment\r\n\r\n* CUDA \r\n\t* GPU:\r\n\t\t* NVIDIA [Tesla V100 PCIe 32GB] \r\n\t* available: True\r\n\t* Version 11.2\r\n* Packages\r\n\t* cudatoolkit=10.1\r\n\t* numpy                     =1.19.1\r\n\t* torchvision             =  0.7.0 \r\n\t* pytorch-lightning=1.1.5\r\n\t* pycuda=2019.1.2\r\n\t* python=3.8.2\r\n\t* pytorch=1.6.0\r\n\t\r\n\r\n - OS: Linux Ubuntu Ubuntu 18.04.3 LTS\r\n\r\n",
    "comments_url": "https://api.github.com/repos/Lightning-AI/pytorch-lightning/issues/5641/comments",
    "author": "Imipenem",
    "comments": [
      {
        "user": "awaelchli",
        "created_at": "2021-01-25T01:38:22Z",
        "body": "Remove the .cpu() call \r\n`correct = pred.eq(target.data).cpu().sum().item()`\r\nshould be \r\n`correct = pred.eq(target.data).sum()`"
      },
      {
        "user": "awaelchli",
        "created_at": "2021-01-25T01:40:28Z",
        "body": "And if you want to compute accuracy on multi gpu correctly, I recommend directly using the Accuracy metric (from pytorch_lightning.metrics)"
      }
    ]
  },
  {
    "number": 5572,
    "title": "When overwriting the setup() function in the LightningDataModule, it is forced to add an unnecessary parameter.",
    "created_at": "2021-01-19T14:10:32Z",
    "closed_at": "2021-01-19T14:38:56Z",
    "labels": [
      "bug",
      "help wanted"
    ],
    "url": "https://github.com/Lightning-AI/pytorch-lightning/issues/5572",
    "body": "## \ud83d\udc1b Bug\r\n\r\n<!-- A clear and concise description of what the bug is. -->\r\n\r\n## When overwriting the setup() function in the LightningDataModule, it is forced to add an unnecessary parameter.\r\n\r\n<!-- FILL IN -->\r\n\r\n### Environment\r\n\r\n - PyTorch Version (e.g., 1.0):1.7\r\n - OS (e.g., Linux):Windows\r\n - How you installed PyTorch (`conda`, `pip`, source):pip\r\n - Python version:3.6.12\r\n - CUDA/cuDNN version:11.0\r\n - GPU models and configuration: \r\n - Any other relevant information: def setup(self)\r\n\r\n### Additional context\r\n\r\nI have to add another argument to setup(self) for it to work, such as setup(self,a), which I won't actually use at all.\r\n",
    "comments_url": "https://api.github.com/repos/Lightning-AI/pytorch-lightning/issues/5572/comments",
    "author": "Toyhom",
    "comments": [
      {
        "user": "rohitgr7",
        "created_at": "2021-01-19T14:36:44Z",
        "body": "the other parameter refers to `stage` which can be 'fit'(called with `trainer.fit`) or 'test'(called with `trainer.test`). Using this you can avoid loading both train & val and test data all at once.\r\nsomething like:\r\n```python\r\ndef setup(self, stage):\r\n    if stage == 'fit':  # will be 'fit' when calling trainer.fit()\r\n        # load train & val data only\r\n    elif stage == 'test':  # will be 'test' when calling trainer.test()\r\n        # load test data only\r\n```"
      }
    ]
  },
  {
    "number": 5027,
    "title": "On \"import pytorch-lightning\": AttributeError: python: undefined symbol: THCudaHalfTensor_normall",
    "created_at": "2020-12-08T19:40:09Z",
    "closed_at": "2020-12-09T14:56:05Z",
    "labels": [
      "help wanted",
      "priority: 1"
    ],
    "url": "https://github.com/Lightning-AI/pytorch-lightning/issues/5027",
    "body": "## \ud83d\udc1b Bug\r\n\r\n<!-- A clear and concise description of what the bug is. -->\r\nSimply by importing pytorch-lightning, I receive the following error: `AttributeError: python: undefined symbol: THCudaHalfTensor_normall`\r\n\r\nTraceback:\r\n```\r\nTraceback (most recent call last):\r\n  File \"test.py\", line 1, in <module>\r\n    import pytorch_lightning\r\n  File \"/data/nv419/anaconda3/lib/python3.7/site-packages/pytorch_lightning/__init__.py\", line 56, in <module>\r\n    from pytorch_lightning import metrics\r\n  File \"/data/nv419/anaconda3/lib/python3.7/site-packages/pytorch_lightning/metrics/__init__.py\", line 14, in <module>\r\n    from pytorch_lightning.metrics.metric import Metric\r\n  File \"/data/nv419/anaconda3/lib/python3.7/site-packages/pytorch_lightning/metrics/metric.py\", line 26, in <module>\r\n    from pytorch_lightning.utilities.apply_func import apply_to_collection\r\n  File \"/data/nv419/anaconda3/lib/python3.7/site-packages/pytorch_lightning/utilities/__init__.py\", line 25, in <module>\r\n    from apex import amp\r\n  File \"/data/nv419/anaconda3/lib/python3.7/site-packages/apex-0.1-py3.7-linux-x86_64.egg/apex/__init__.py\", line 12, in <module>\r\n    from . import optimizers\r\n  File \"/data/nv419/anaconda3/lib/python3.7/site-packages/apex-0.1-py3.7-linux-x86_64.egg/apex/optimizers/__init__.py\", line 2, in <module>\r\n    from .fp16_optimizer import FP16_Optimizer\r\n  File \"/data/nv419/anaconda3/lib/python3.7/site-packages/apex-0.1-py3.7-linux-x86_64.egg/apex/optimizers/fp16_optimizer.py\", line 8, in <module>\r\n    lib.THCudaHalfTensor_normall.argtypes=[ctypes.c_void_p, ctypes.c_void_p]\r\n  File \"/data/nv419/anaconda3/lib/python3.7/ctypes/__init__.py\", line 377, in __getattr__\r\n    func = self.__getitem__(name)\r\n  File \"/data/nv419/anaconda3/lib/python3.7/ctypes/__init__.py\", line 382, in __getitem__\r\n    func = self._FuncPtr((name_or_ordinal, self))\r\nAttributeError: python: undefined symbol: THCudaHalfTensor_normall\r\n```\r\n\r\n### To Reproduce\r\n`import pytorch-lightning`\r\n\r\n### Expected behavior\r\nFor pytorch-lightning to import and be used correctly\r\n\r\n### Environment\r\n* CUDA:\r\n        - GPU:\r\n                - Tesla V100-PCIE-32GB\r\n                - Tesla V100-PCIE-32GB\r\n                - GeForce RTX 2080 Ti\r\n                - GeForce RTX 2080 Ti\r\n                - GeForce RTX 2080 Ti\r\n                - GeForce RTX 2080 Ti\r\n                - GeForce RTX 2080 Ti\r\n                - GeForce RTX 2080 Ti\r\n                - GeForce RTX 2080 Ti\r\n                - GeForce RTX 2080 Ti\r\n        - available:         True\r\n        - version:           10.1\r\n* Packages:\r\n        - numpy:             1.17.2\r\n        - pyTorch_debug:     False\r\n        - pyTorch_version:   1.6.0+cu101\r\n        - tqdm:              4.54.1\r\n* System:\r\n        - OS:                Linux\r\n        - architecture:\r\n                - 64bit\r\n                -\r\n        - processor:         x86_64\r\n        - python:            3.7.4\r\n        - version:           #59~18.04.1-Ubuntu SMP Wed Oct 21 12:14:56 UTC 2020\r\n\r\n### Additional context\r\npytorch-lightning version is 1.0.8 (couldn't import it in obviously...)\r\n",
    "comments_url": "https://api.github.com/repos/Lightning-AI/pytorch-lightning/issues/5027/comments",
    "author": "nihirv",
    "comments": [
      {
        "user": "awaelchli",
        "created_at": "2020-12-09T03:04:09Z",
        "body": "From your error message it looks like you have apex installed. \r\nTry to import apex: \r\n`from apex import amp`\r\nand you will probably see the same error. Check your apex installation, maybe it is incompatible with your pytorch version or it wasn't correctly compiled. "
      },
      {
        "user": "nihirv",
        "created_at": "2020-12-09T14:56:05Z",
        "body": "> From your error message it looks like you have apex installed.\r\n> Try to import apex:\r\n> `from apex import amp`\r\n> and you will probably see the same error. Check your apex installation, maybe it is incompatible with your pytorch version or it wasn't correctly compiled.\r\n\r\nThis was the issue! Fixed it by uninstalling apex (`pip uninstall apex`). Thanks!\r\n\r\nClosing the issue\r\n"
      }
    ]
  },
  {
    "number": 4653,
    "title": "accumulate_grad_batches ignores last batches in epoch if number of steps is not divisible by accumulate_grad_batches?",
    "created_at": "2020-11-13T09:39:10Z",
    "closed_at": "2020-11-13T11:00:50Z",
    "labels": [
      "bug",
      "help wanted"
    ],
    "url": "https://github.com/Lightning-AI/pytorch-lightning/issues/4653",
    "body": "Suppose I have accumulate_grad_batches=256 and number of steps in my epoch is 260. Loss is updated only on step number 256 every epoch. I suppose it means that the last 4 batches grads are ignored. Is that correct?",
    "comments_url": "https://api.github.com/repos/Lightning-AI/pytorch-lightning/issues/4653/comments",
    "author": "Vozf",
    "comments": [
      {
        "user": "ydcjeff",
        "created_at": "2020-11-13T10:31:27Z",
        "body": "I suppose we do not ignore for last batches. Can you share a minimal example if it's not working?"
      },
      {
        "user": "Vozf",
        "created_at": "2020-11-13T10:32:54Z",
        "body": "So what is done with last 6 batches? Is it aggreagated over 6 batches instead of asked 256?"
      },
      {
        "user": "ydcjeff",
        "created_at": "2020-11-13T10:36:18Z",
        "body": "We call `.backward` and `optimizer.step` `optimizer.zero_grad()` for the last 4 batches."
      },
      {
        "user": "Vozf",
        "created_at": "2020-11-13T10:44:52Z",
        "body": "So first you accumulate 256 batches and call backward and then you accumulate 4 batches and call backward, correct?"
      },
      {
        "user": "ydcjeff",
        "created_at": "2020-11-13T10:59:08Z",
        "body": "Yep we accumulate 256 if possible and accumulate the rest of batches if it's not divisible by 256"
      }
    ]
  },
  {
    "number": 4238,
    "title": "Metrics do not support multilabel tasks.",
    "created_at": "2020-10-19T18:00:26Z",
    "closed_at": "2020-10-22T16:13:54Z",
    "labels": [
      "bug",
      "help wanted"
    ],
    "url": "https://github.com/Lightning-AI/pytorch-lightning/issues/4238",
    "body": "## \ud83d\udc1b Bug\r\n\r\nScikit-learn metrics deal well will multilabel tasks, but this doesn't seem to be supported in Pytorch-Lightning metrics.  There is this #3350 , but it seems to confuse multiclass with multilabel (multiple values to predict). \r\n\r\n### To Reproduce\r\nGiven predictions tensor: \r\n```\r\ntensor([[0., 0.],\r\n              [0., 0.],\r\n              [0., 0.],\r\n              [0., 0.],\r\n              [0., 0.],\r\n              [0., 0.],\r\n              [0., 0.],\r\n              [0., 0.]])\r\n```\r\nand labels tensor:\r\n ```\r\ntensor([[1, 0],\r\n              [1, 0],\r\n              [1, 0],\r\n              [1, 0],\r\n              [1, 0],\r\n              [1, 0],\r\n              [1, 0],\r\n              [1, 0]])\r\n\r\n```\r\nThe call to `f1_score(met_preds,labels, class_reduction='macro')` yields `tensor(0.3333)`, because it flattens the tensors and macro-averages per class.\r\n\r\n### Expected behavior\r\n\r\nI would expect it to be consistent with the call to\r\n`sk_f1_score(labels.numpy(), met_preds.numpy(), average='macro')`, which yields `0.0`, because it treats each column separately and macro-averages them per task.\r\n\r\nThis discrepancy also occurs for other metrics. For example sklearn deals with multilabel accuracy by using subset accuracy (0 here), but PL produces an accuracy score of 0.5.\r\n\r\n### Environment\r\n - PyTorch Version : 1.6\r\n - OS (e.g., Linux): OSX\r\n - How you installed PyTorch (`conda`, `pip`, source): conda\r\n - Python version: 3.7.8\r\n- Pytorch-Lightning version : 1.0.2\r\n\r\n",
    "comments_url": "https://api.github.com/repos/Lightning-AI/pytorch-lightning/issues/4238/comments",
    "author": "jdhorwood",
    "comments": [
      {
        "user": "teddykoker",
        "created_at": "2020-10-20T22:51:12Z",
        "body": "Could you try the class interface? We have tested multilabel f1 with the class metrics, I think we are in the process of making sure we have the same functionality for functional"
      },
      {
        "user": "SkafteNicki",
        "created_at": "2020-10-21T07:46:51Z",
        "body": "As @teddykoker stated we are in the process of unifying the metrics class based metrics with the functional metrics (starting with all the regression metrics here #4166 ). Until then, please use the `Fbeta` metric (however, note that there is currently a bug in that metric, that should be taken care of by this PR #4183 ):\r\n```\r\nmetric = Fbeta(beta=1.0, multilabel=True, average='macro)\r\nmetric(preds, target)\r\n>>> tensor(0.)\r\n```"
      },
      {
        "user": "SkafteNicki",
        "created_at": "2020-10-22T16:13:49Z",
        "body": "Yes, let's close it. I will unify fbeta functional and class metric within a couple of days, so functional also support multilabel. "
      }
    ]
  },
  {
    "number": 4079,
    "title": "ModelCheckpoint save_function() not set?",
    "created_at": "2020-10-11T15:29:35Z",
    "closed_at": "2020-10-11T15:37:26Z",
    "labels": [
      "bug",
      "help wanted"
    ],
    "url": "https://github.com/Lightning-AI/pytorch-lightning/issues/4079",
    "body": "I am training a PL model using the following code snippet:\r\n\r\n```python\r\n    # logger\r\n    tb_logger = pl_loggers.TensorBoardLogger(cfg.logs.path, name='rnn_exp')\r\n\r\n    # checkpoint callback\r\n    checkpoint_callback = ModelCheckpoint(\r\n        filepath=cfg.checkpoint.path + \"encoder_rnn{epoch:02d}\",\r\n        save_top_k=1,\r\n        mode=\"min\" # monitor is defined in val_step: EvalResult(checkpoint_on=val_loss)\r\n    )\r\n\r\n    # early stopping callback\r\n    early_stopping_callback = EarlyStopping(\r\n        monitor=\"val_loss\",\r\n        patience=cfg.val.patience,\r\n        mode=\"min\"\r\n    )\r\n\r\n    tokenizer = ...\r\n    dm = MyDataModule(cfg, tokenizer)\r\n\r\n    model = RNNEncoder(cfg)\r\n\r\n    trainer = Trainer(\r\n        fast_dev_run=False,\r\n        max_epochs=cfg.train.max_epochs,\r\n        gpus=1,\r\n        logger=tb_logger,\r\n        callbacks=[checkpoint_callback, early_stopping_callback]\r\n    )\r\n\r\n    # training\r\n    dm.setup('fit')\r\n    trainer.fit(model, datamodule=dm)\r\n```\r\n\r\nHowever, after the first epoch, the model presents the following error, probably when calling the model checkpoint callback:\r\n\r\n```python\r\n    trainer.fit(model, datamodule=dm)\r\n  File \"/home/celso/projects/venvs/semantic_code_search/lib/python3.7/site-packages/pytorch_lightning/trainer/states.py\", line 48, in wrapped_fn\r\n    result = fn(self, *args, **kwargs)\r\n  File \"/home/celso/projects/venvs/semantic_code_search/lib/python3.7/site-packages/pytorch_lightning/trainer/trainer.py\", line 1073, in fit\r\n    results = self.accelerator_backend.train(model)\r\n  File \"/home/celso/projects/venvs/semantic_code_search/lib/python3.7/site-packages/pytorch_lightning/accelerators/gpu_backend.py\", line 51, in train\r\n    results = self.trainer.run_pretrain_routine(model)\r\n  File \"/home/celso/projects/venvs/semantic_code_search/lib/python3.7/site-packages/pytorch_lightning/trainer/trainer.py\", line 1239, in run_pretrain_routine\r\n    self.train()\r\n  File \"/home/celso/projects/venvs/semantic_code_search/lib/python3.7/site-packages/pytorch_lightning/trainer/training_loop.py\", line 394, in train\r\n    self.run_training_epoch()\r\n  File \"/home/celso/projects/venvs/semantic_code_search/lib/python3.7/site-packages/pytorch_lightning/trainer/training_loop.py\", line 516, in run_training_epoch\r\n    self.run_evaluation(test_mode=False)\r\n  File \"/home/celso/projects/venvs/semantic_code_search/lib/python3.7/site-packages/pytorch_lightning/trainer/evaluation_loop.py\", line 603, in run_evaluation\r\n    self.on_validation_end()\r\n  File \"/home/celso/projects/venvs/semantic_code_search/lib/python3.7/site-packages/pytorch_lightning/trainer/callback_hook.py\", line 176, in on_validation_end\r\n    callback.on_validation_end(self, self.get_model())\r\n  File \"/home/celso/projects/venvs/semantic_code_search/lib/python3.7/site-packages/pytorch_lightning/utilities/distributed.py\", line 27, in wrapped_fn\r\n    return fn(*args, **kwargs)\r\n  File \"/home/celso/projects/venvs/semantic_code_search/lib/python3.7/site-packages/pytorch_lightning/callbacks/model_checkpoint.py\", line 380, in on_validation_end\r\n    self._do_check_save(filepath, current, epoch, trainer, pl_module)\r\n  File \"/home/celso/projects/venvs/semantic_code_search/lib/python3.7/site-packages/pytorch_lightning/callbacks/model_checkpoint.py\", line 421, in _do_check_save\r\n    self._save_model(filepath, trainer, pl_module)\r\n  File \"/home/celso/projects/venvs/semantic_code_search/lib/python3.7/site-packages/pytorch_lightning/callbacks/model_checkpoint.py\", line 212, in _save_model\r\n    raise ValueError(\".save_function() not set\")\r\nValueError: .save_function() not set\r\n\r\n```\r\nCould you tell me if I forgot to configure something?\r\n",
    "comments_url": "https://api.github.com/repos/Lightning-AI/pytorch-lightning/issues/4079/comments",
    "author": "celsofranssa",
    "comments": [
      {
        "user": "awaelchli",
        "created_at": "2020-10-11T15:33:26Z",
        "body": "currently you need to set the ModelCheckpoint via `Trainer(checkpoint_callback=...)`\r\n#3990 will enable passing it to callbacks"
      }
    ]
  },
  {
    "number": 3752,
    "title": "Default reduction always applied by `Metric`, even when requesting `'none'` reduction",
    "created_at": "2020-09-30T19:46:37Z",
    "closed_at": "2020-10-05T14:13:24Z",
    "labels": [
      "bug",
      "help wanted"
    ],
    "url": "https://github.com/Lightning-AI/pytorch-lightning/issues/3752",
    "body": "## \ud83d\udc1b Bug\r\n\r\n<!-- A clear and concise description of what the bug is. -->\r\nMetric reduction doesn't behave the same between the functional and class API when using `reduction='none'`. The functional API applies no reduction as expected, but the class API seems to apply the default reduction regardless.\r\n\r\nI haven't investigated the code yet to find the specific cause of the bug, so I'm not sure how widespread this bug is, but I've encountered it using both the `DiceCoefficient` and my own implementation of the differentiable dice, inheriting from `TensorMetric`.\r\n\r\n### To Reproduce\r\n\r\nGiven a pair of `pred` and `target`, I get the following behavior with 3 class + background segmentation data:\r\n```python\r\n>>> from pytorch_lightning.metrics import DiceCoefficient\r\n>>> from pytorch_lightning.metrics.functional import dice_score\r\n>>> DiceCoefficient(reduction=\"none\")(pred, target)\r\ntensor(0.0800)\r\n>>> dice_score(pred, target, reduction=\"none\")\r\ntensor([0.0876, 0.0937, 0.0586], device='cuda:0')\r\n```\r\nwhere I would have expected both version to give the same result.\r\n\r\nThe class API seems to apply the default reduction of `'elementwise_mean'` even though I requested `'none'`, since:\r\n```python\r\n>>> dice_score(x_hat, x, reduction=\"none\").mean()\r\ntensor(0.0800, device='cuda:0')\r\n```\r\n\r\n### Expected behavior\r\nReduction behavior should be consistent between class and functional API, and to behave like the current functional API.\r\n\r\n### Environment\r\nI just now installed Lightning from Git to ensure that it's not a bug that's already been solved since the last release.\r\n\r\n* CUDA:\r\n        - GPU: TITAN Xp\r\n        - available:         True\r\n        - version:           10.2\r\n* Packages:\r\n        - numpy:             1.19.2\r\n        - pyTorch_debug:     False\r\n        - pyTorch_version:   1.6.0\r\n        - pytorch-lightning: 0.9.1rc4\r\n        - tqdm:              4.49.0\r\n* System:\r\n        - OS:                Linux\r\n        - architecture: 64bit, ELF\r\n        - processor:         x86_64\r\n        - python:            3.8.5\r\n        - version:           #51~18.04.1-Ubuntu SMP Sat Sep 5 14:35:50 UTC 2020\r\n",
    "comments_url": "https://api.github.com/repos/Lightning-AI/pytorch-lightning/issues/3752/comments",
    "author": "nathanpainchaud",
    "comments": [
      {
        "user": "SkafteNicki",
        "created_at": "2020-10-05T13:44:51Z",
        "body": "Hi @nathanpainchaud, running your code example on master produces the correct result (your issue was probably solved by PR #3517). Could you please try upgrading?"
      }
    ]
  },
  {
    "number": 3738,
    "title": "RuntimeError: Input and hidden tensors are not at the same device, found",
    "created_at": "2020-09-30T08:05:07Z",
    "closed_at": "2020-09-30T12:34:03Z",
    "labels": [
      "bug",
      "help wanted"
    ],
    "url": "https://github.com/Lightning-AI/pytorch-lightning/issues/3738",
    "body": "## \ud83d\udc1b Bug\r\n\r\nI train LSTM for character level  text generation. At first I initialize hidden and cell with zeros using `torch.zeros`. Unfortunately this tensors are defaultly assigned to the cpu so I get the following error while training\r\n\r\n```python\r\nRuntimeError: Input and hidden tensors are not at the same device, found input tensor at cuda:0 and hidden tensor at cpu\r\n```\r\n\r\n### To Reproduce\r\n\r\n#### Model\r\n\r\n```python\r\nclass RNN(pl.LightningModule):\r\n    lr = 0.0005\r\n\r\n    def __init__(self, input_size, hidden_size, embeding_size, n_categories, n_layers, output_size, p):\r\n        super().__init__()\r\n\r\n        self.criterion = nn.CrossEntropyLoss()\r\n        \r\n        self.n_layers = n_layers\r\n        self.hidden_size = hidden_size\r\n        \r\n        \r\n        self.embeding = nn.Embedding(input_size+n_categories, embeding_size)\r\n        self.lstm = nn.LSTM(embeding_size+n_categories, hidden_size, n_layers, dropout=p)\r\n        self.out_fc = nn.Linear(hidden_size, output_size)\r\n        \r\n        self.dropout = nn.Dropout(p)\r\n        \r\n\r\n    def forward(self, batch_of_category, batch_of_letter, hidden, cell):\r\n        ## letter level operations\r\n        \r\n        embeding = self.dropout(self.embeding(batch_of_letter))\r\n        category_plus_letter = torch.cat((batch_of_category, embeding), 1)\r\n\r\n        #sequence_length = 1\r\n        category_plus_letter = category_plus_letter.unsqueeze(1)\r\n        \r\n        out, (hidden, cell) = self.lstm(category_plus_letter, (hidden, cell))\r\n        out = self.out_fc(out)\r\n        out = out.squeeze(1)\r\n        \r\n        return out, (hidden, cell)\r\n        \r\n\r\n    def configure_optimizers(self):\r\n        optimizer = Adam(self.parameters(), self.lr)\r\n        scheduler = lr_scheduler.StepLR(optimizer, step_size=7, gamma=0.1)\r\n\r\n        return [optimizer], [scheduler]\r\n\r\n    def training_step(self, batch, batch_idx):\r\n        item_dict = batch\r\n        loss = 0\r\n        batch_of_category = item_dict[\"category_tensors\"]\r\n\r\n        #we loop over letters, single batch at the time \r\n        \r\n        hidden = torch.zeros(self.n_layers, 1, self.hidden_size).cuda()\r\n        cell = torcAh.zeros(self.n_layers, 1, self.hidden_size).cuda()\r\n        \r\n        for t in range(item_dict[\"input_tensors\"].size(1)):\r\n            batch_of_letter = item_dict[\"input_tensors\"][:, t]\r\n            \r\n            output, (hidden, cell) = self(batch_of_category, batch_of_letter, hidden, cell)\r\n            \r\n            loss += criterion(output, item_dict[\"target_tensors\"][:, t])\r\n\r\n        loss = loss/(t+1)\r\n\r\n\r\n        tensorboard_logs = {'train_loss': loss}\r\n\r\n        return {'loss': loss, 'log': tensorboard_logs}\r\n    \r\n    \r\n    def init_hidden(self, batch_size):\r\n        hidden = torch.zeros(self.n_layers, batch_size, self.hidden_size)\r\n        cell = torch.zeros(self.n_layers, batch_size, self.hidden_size)\r\n        \r\n        return hidden, cell\r\n```\r\n\r\n#### Batch\r\n\r\n```\r\n(['Russian', 'English', 'Russian', 'English'],\r\n ['Piskarenkov', 'Clarkson', 'Pochkaev', 'Woods'],\r\n tensor([[0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],\r\n         [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.],\r\n         [0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],\r\n         [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.]]),\r\n tensor([[42,  9, 19, 11,  1, 18,  5, 14, 11, 15, 22],\r\n         [29, 12,  1, 18, 11, 19, 15, 14,  0,  0,  0],\r\n         [42, 15,  3,  8, 11,  1,  5, 22,  0,  0,  0],\r\n         [49, 15, 15,  4, 19,  0,  0,  0,  0,  0,  0]]),\r\n tensor([[ 9, 19, 11,  1, 18,  5, 14, 11, 15, 22, 59],\r\n         [12,  1, 18, 11, 19, 15, 14, 59,  0,  0,  0],\r\n         [15,  3,  8, 11,  1,  5, 22, 59,  0,  0,  0],\r\n         [15, 15,  4, 19, 59,  0,  0,  0,  0,  0,  0]]))\r\n```\r\n\r\n#### Trainer \r\n\r\n```python\r\ndm = NamesDatamodule(1)\r\n\r\nrnn_model = RNN(input_size=ds.n_tokens,\r\n            hidden_size=256,\r\n            embeding_size = 128, \r\n            n_layers=2,    \r\n            n_categories=ds.n_categories,\r\n            output_size=ds.n_tokens,\r\n            p=0.3)\r\n\r\n\r\ntrainer = Trainer(max_epochs=3, \r\n                  logger=None,\r\n                  gpus=1,\r\n                  early_stop_callback=False,\r\n                  checkpoint_callback=False,\r\n                  )\r\n\r\ntrainer.fit(rnn_model, dm)\r\n```\r\n\r\n### Expected behavior\r\n\r\nHidden values should automatically be assigned to the `device`\r\n\r\n### Environment\r\n\r\nGoogle Colab\r\n\r\n - Pytroch 1.6.0+cu101\r\n - Lightning 0.9.1rc3\r\n - Python version:\r\n - GPU models and configuration: single colab GPU\r\n\r\n### Additional context\r\n\r\nProblem can be solved by adding `.cuda()` to the variables but it is not a solution that I think should be necessary \r\n",
    "comments_url": "https://api.github.com/repos/Lightning-AI/pytorch-lightning/issues/3738/comments",
    "author": "tugot17",
    "comments": [
      {
        "user": "rohitgr7",
        "created_at": "2020-09-30T10:00:04Z",
        "body": "Try changing to\r\n```python\r\nhidden = torch.zeros(self.n_layers, 1, self.hidden_size)..to(self.device)\r\ncell = torch.zeros(self.n_layers, 1, self.hidden_size).to(self.device)\r\n```"
      },
      {
        "user": "tugot17",
        "created_at": "2020-09-30T11:55:25Z",
        "body": "@rohitgr7 Yeah, this fixes the problem, however I'm not entirely sure it will also work in case if I used more then a single machine to train the model "
      },
      {
        "user": "rohitgr7",
        "created_at": "2020-09-30T12:02:18Z",
        "body": "`self.device` will always give you the device for the current process(ddp) or current batch(dp) being executed."
      }
    ]
  },
  {
    "number": 3634,
    "title": "AttributeError: 'dict' object has no attribute 'callback_metrics' when using validation_epoch_end callbac",
    "created_at": "2020-09-23T22:46:59Z",
    "closed_at": "2020-09-25T20:03:31Z",
    "labels": [
      "bug",
      "help wanted",
      "waiting on author"
    ],
    "url": "https://github.com/Lightning-AI/pytorch-lightning/issues/3634",
    "body": "## \ud83d\udc1b Bug\r\n\r\nHello.  I am  trying to setup the early stop callback, and according to the warning that I get I need to use the validation_epoch_end callback. When I do that, I get the following error:\r\n\r\n```\r\nAttributeError                            Traceback (most recent call last)\r\n\r\n<ipython-input-25-9cbc4363b76a> in <module>()\r\n     10 \r\n     11 # Train the model \u26a1\r\n---> 12 trainer.fit(model)\r\n\r\n10 frames\r\n\r\n/usr/local/lib/python3.6/dist-packages/pytorch_lightning/trainer/evaluation_loop.py in __update_callback_metrics(self, eval_results, using_eval_result)\r\n    419             if isinstance(eval_results, list):\r\n    420                 for eval_result in eval_results:\r\n--> 421                     self.callback_metrics = eval_result.callback_metrics\r\n    422             else:\r\n    423                 self.callback_metrics = eval_results.callback_metrics\r\n\r\nAttributeError: 'dict' object has no attribute 'callback_metrics'\r\n```\r\n\r\n``` python\r\nclass MyNN(pl.LightningModule):\r\n    def __init__(self, input_size=3, seq_len=107, pred_len=68, hidden_size=50, num_layers=1, dropout=0, lr=1e-2):\r\n        super().__init__()\r\n        \r\n        self.pred_len = pred_len\r\n        \r\n        self.lr = lr\r\n        \r\n        self.rnn = nn.LSTM(\r\n            input_size=input_size, \r\n            hidden_size=hidden_size, \r\n            num_layers=num_layers, \r\n            dropout=dropout, \r\n            bidirectional=True,\r\n            batch_first=True\r\n        )\r\n        \r\n        self.linear = nn.Linear(hidden_size*2, 5)\r\n\r\n        self.example_input_array = torch.Tensor(np.zeros(input_size).reshape(1, 1, -1))\r\n    \r\n    def forward(self, X):\r\n        lstm_output, (hidden_state, cell_state) = self.rnn(X)\r\n        \r\n        labels = self.linear(lstm_output[:, :self.pred_len, :])\r\n        \r\n        return labels\r\n    \r\n    def training_step(self, batch, batch_nb):\r\n        x, y = batch\r\n        loss = scoring(self(x.float()), y.float())\r\n\r\n\r\n        result = pl.TrainResult(minimize=loss)\r\n        result.log('train_loss', loss, logger=True)\r\n        return result\r\n    \r\n    def validation_step(self, batch, batch_idx):\r\n        x, y = batch\r\n        logits = self(x.float())\r\n        loss = scoring(logits, y)\r\n\r\n        result = pl.EvalResult(checkpoint_on=loss)\r\n        result.log('val_loss', loss)\r\n        return result\r\n\r\n    def configure_optimizers(self):\r\n        return torch.optim.Adam(self.parameters(), lr=self.lr)\r\n    \r\n    def val_dataloader(self):\r\n        return DataLoader(MyValSet(), batch_size=64)\r\n    \r\n    def train_dataloader(self):\r\n        return DataLoader(MyDataset(), batch_size=64, shuffle=True)\r\n\r\n\r\n    def training_epoch_end(self, outputs):\r\n        #  the function is called after every epoch is completed\r\n\r\n        # calculating average loss  \r\n        avg_loss = outputs[\"train_loss\"].mean()\r\n\r\n        # creating log dictionary\r\n        tensorboard_logs = {'train_loss': avg_loss}\r\n\r\n        epoch_dictionary={\r\n            # required\r\n            'train_loss': avg_loss,\r\n            \r\n            # for logging purposes\r\n            'log': tensorboard_logs}\r\n\r\n        return epoch_dictionary\r\n\r\n    def validation_epoch_end(self, outputs):\r\n        #  the function is called after every epoch is completed\r\n\r\n        # calculating average loss  \r\n        avg_loss = outputs[\"val_loss\"].mean()\r\n\r\n        tensorboard_logs = {'val_loss': avg_loss}\r\n        \r\n        epoch_dictionary={\r\n            # required\r\n            'val_loss': avg_loss,\r\n            \r\n            # for logging purposes\r\n            'log': tensorboard_logs}\r\n\r\n        return epoch_dictionary\r\n```\r\n\r\nand my training loop is:\r\n\r\n```python\r\nLEARNING_RATE = 1e-3\r\nNUM_LAYERS = 2\r\nDROPOUT = 0.1\r\nHIDDEN_SIZE = 100\r\nEPOCHS = 100\r\n\r\n# Initialize a trainer\r\ntrainer = pl.Trainer(gpus=1, max_epochs=EPOCHS, progress_bar_refresh_rate=20, early_stop_callback=True, auto_lr_find=True)\r\nmodel = MyNN(num_layers=NUM_LAYERS, dropout=DROPOUT)\r\n\r\n# Train the model \u26a1\r\ntrainer.fit(model)\r\n```\r\n\r\nI am using Google Colab, with the following versions:\r\n```\r\npytorch-lightning==0.9.0\r\ntorch==1.6.0+cu101\r\n```\r\n\r\nAm I doing something wrong, or what is the issue here? \r\nThank you! :)\r\n",
    "comments_url": "https://api.github.com/repos/Lightning-AI/pytorch-lightning/issues/3634/comments",
    "author": "djrmarques",
    "comments": [
      {
        "user": "awaelchli",
        "created_at": "2020-09-24T22:34:42Z",
        "body": "Pretty sure the problem is, you cannot mix results objects in your step methods with dict in your epoch_end methods. \r\nUse either dicts everywhere or results everywhere, but not both. Let me know if that solves your problem. \r\n\r\nYou mention colab, if you need further help, mind sharing the colab link so we can have a look help you better."
      },
      {
        "user": "awaelchli",
        "created_at": "2020-09-24T22:53:24Z",
        "body": "oh, sorry, did not read the first sentence in your message. \r\nFor early stopping, use this\r\n\r\n```python\r\n    def validation_step(self, batch, batch_idx):\r\n        x, y = batch\r\n        logits = self(x.float())\r\n        loss = scoring(logits, y)\r\n\r\n        result = pl.EvalResult(checkpoint_on=loss, early_stop_on=loss)  # <--- add this\r\n        result.log('val_loss', loss)\r\n        return result\r\n```\r\nThere should be no need for the validation_epoch_end, you can savely remove it. the validation loss will be reduced and logged automatically at the end of epoch."
      },
      {
        "user": "djrmarques",
        "created_at": "2020-09-25T20:03:31Z",
        "body": "So I ended up putting it all into dictionaries and it worked. \r\n\r\nBut before that I tried to use the results object in both the validation and train set, and the model was running, but for some reason the train_loss was not logging on tensorboard, but maybe I was doing something wrong. I will leave it for now like this, because I want to finish my model, but after that I will try to set up the results object and see if all goes well. \r\n\r\nThank you! "
      }
    ]
  },
  {
    "number": 3430,
    "title": "Issue with trainer.test in \"ddp\" distributed mode",
    "created_at": "2020-09-09T20:36:18Z",
    "closed_at": "2020-09-10T16:21:19Z",
    "labels": [
      "bug",
      "help wanted"
    ],
    "url": "https://github.com/Lightning-AI/pytorch-lightning/issues/3430",
    "body": "Hi -\r\n\r\nI have the following pseudo code workflow:\r\n\r\n> trainer = Trainer(distributed_backend='ddp', ...)\r\nmodel = new custom LightningModule\r\ntrainer.fit(model, ...)\r\nmodel.freeze()\r\ntrain.test(model, ...)\r\n\r\nThe error that I get is this:\r\n\r\n`AssertionError: DistributedDataParallel is not needed when a module doesn't have any parameter that requires a gradient.`\r\n\r\nWhat is the best way to address this?\r\n\r\nThanks very much,\r\nGriffin\r\n",
    "comments_url": "https://api.github.com/repos/Lightning-AI/pytorch-lightning/issues/3430/comments",
    "author": "griff4692",
    "comments": [
      {
        "user": "rohitgr7",
        "created_at": "2020-09-09T20:51:45Z",
        "body": "That is a PyTorch `AssertionError`. Try it without calling `model.freeze()`?"
      }
    ]
  },
  {
    "number": 3426,
    "title": "Model checkpoint not saving hyperparameters correctly",
    "created_at": "2020-09-09T17:13:40Z",
    "closed_at": "2020-09-09T20:44:07Z",
    "labels": [
      "bug",
      "help wanted"
    ],
    "url": "https://github.com/Lightning-AI/pytorch-lightning/issues/3426",
    "body": "When using the ModelCheckpoint, my hyperparameters are not being saved with the checkpoints.  So I get an AttributeError when attempting to load from checkpoints.\r\n\r\nTo reproduce:\r\n```\r\nimport pytorch_lightning as pl\r\nfrom torch.utils.data import DataLoader\r\nfrom torchvision.datasets import MNIST\r\nfrom torchvision import transforms\r\nimport torch\r\nimport torch.nn.functional as F\r\nimport argparse\r\nfrom bunch import Bunch\r\n\r\nimport pytorch_lightning as pl\r\nclass LitModel(pl.LightningModule):\r\n\r\n    def __init__(self, args):\r\n        super().__init__()\r\n        self.l1 = torch.nn.Linear(28 * 28, 10)\r\n        print('args:', args)\r\n        print(args.to_print)\r\n\r\n    def forward(self, x):\r\n        return torch.relu(self.l1(x.view(x.size(0), -1)))\r\n\r\n    def training_step(self, batch, batch_idx):\r\n        x, y = batch\r\n        y_hat = self(x)\r\n        loss = F.cross_entropy(y_hat, y)\r\n        return pl.TrainResult(loss)\r\n\r\n    def configure_optimizers(self):\r\n        return torch.optim.Adam(self.parameters(), lr=0.02)\r\n\r\n    \r\ntrain_loader = DataLoader(MNIST(os.getcwd(), download=True, transform=transforms.ToTensor()))\r\ncheckpoint_callback = pl.callbacks.ModelCheckpoint(\r\n        os.path.join(os.getcwd(), 'chkpts'),\r\n        save_top_k=1,\r\n        verbose=True,\r\n        monitor='loss',\r\n        mode='min'\r\n    )\r\ntrainer = pl.Trainer(checkpoint_callback=checkpoint_callback,\r\n                    train_percent_check=0.1,\r\n                    val_percent_check=0,\r\n                    max_epochs=1)\r\n\r\nhparams = argparse.Namespace()\r\nhparams.to_print = 'foo'\r\nmodel = LitModel(hparams)\r\n\r\ntrainer.fit(model, train_loader)\r\n\r\nmod = LitModel.load_from_checkpoint(ckpt_path)\r\n```\r\n\r\nProduces the following Error:\r\n\r\n```\r\n---------------------------------------------------------------------------\r\nAttributeError                            Traceback (most recent call last)\r\n<ipython-input-38-868d05212321> in <module>\r\n     49 trainer.fit(model, train_loader)\r\n     50 \r\n---> 51 mod = LitModel.load_from_checkpoint(ckpt_path)\r\n\r\n~/miniconda3/envs/camtraps/lib/python3.6/site-packages/pytorch_lightning/core/saving.py in load_from_checkpoint(cls, checkpoint_path, map_location, hparams_file, strict, *args, **kwargs)\r\n    151         checkpoint[cls.CHECKPOINT_HYPER_PARAMS_KEY].update(kwargs)\r\n    152 \r\n--> 153         model = cls._load_model_state(checkpoint, *args, strict=strict, **kwargs)\r\n    154         return model\r\n    155 \r\n\r\n~/miniconda3/envs/camtraps/lib/python3.6/site-packages/pytorch_lightning/core/saving.py in _load_model_state(cls, checkpoint, strict, *cls_args, **cls_kwargs)\r\n    188             cls_args, cls_kwargs = [], {}\r\n    189 \r\n--> 190         model = cls(*cls_args, **cls_kwargs)\r\n    191         # load the state_dict on the model automatically\r\n    192         model.load_state_dict(checkpoint['state_dict'], strict=strict)\r\n\r\n<ipython-input-38-868d05212321> in __init__(self, args)\r\n     15         self.l1 = torch.nn.Linear(28 * 28, 10)\r\n     16         print('args:', args)\r\n---> 17         print(args.to_print)\r\n     18 \r\n     19     def forward(self, x):\r\n\r\nAttributeError: 'dict' object has no attribute 'to_print'\r\n```\r\n\r\nThe print statements indicate that `args` is an empty dict when attempting to load from checkpoint. \r\n\r\nWhen inspecting the checkpoint\r\n```\r\nckpt_path = os.path.join(os.getcwd(), '_ckpt_epoch_0.ckpt')\r\nckpt = torch.load(ckpt_path)\r\nprint(ckpt.keys())\r\n```\r\n\r\nI get the following:\r\n```\r\ndict_keys(['epoch', 'global_step', 'pytorch-lightning_version', 'checkpoint_callback_best_model_score', 'checkpoint_callback_best_model_path', 'optimizer_states', 'lr_schedulers', 'state_dict'])\r\n```\r\n\r\nMy understanding is there should be a `hyper_parameters` in the checkpoint.\r\n\r\n\r\nSystem:\r\n- PyTorch Version 1.3.1\r\n- pytorch-lightning: 0.9.0 installed conda\r\n- OS: Ubuntu 18.04\r\n- Python 3.6",
    "comments_url": "https://api.github.com/repos/Lightning-AI/pytorch-lightning/issues/3426/comments",
    "author": "davidwhealey",
    "comments": [
      {
        "user": "rohitgr7",
        "created_at": "2020-09-09T19:29:10Z",
        "body": "you need to call `self.save_hyperparameters()` in `__init__` to make it work."
      }
    ]
  },
  {
    "number": 3113,
    "title": "TypeError in closure_loss = closure_loss / self.accumulate_grad_batches for Cross_entropy loss",
    "created_at": "2020-08-23T14:55:43Z",
    "closed_at": "2020-08-24T18:43:38Z",
    "labels": [
      "bug",
      "help wanted"
    ],
    "url": "https://github.com/Lightning-AI/pytorch-lightning/issues/3113",
    "body": "## \ud83d\udc1b Bug\r\n\r\n\r\n```\r\n/usr/local/lib/python3.6/dist-packages/pytorch_lightning/trainer/training_loop.py in optimizer_closure(self, split_batch, batch_idx, opt_idx, optimizer, hiddens)\r\n   1055         # (if accumulate_grad_batches = 1 no effect)\r\n   1056         closure_loss = training_step_output.minimize if is_result_obj else training_step_output.batch_loss\r\n-> 1057         closure_loss = closure_loss / self.accumulate_grad_batches\r\n   1058 \r\n   1059         # the loss will get scaled for amp. avoid any modifications to it\r\n\r\nTypeError: unsupported operand type(s) for /: 'NoneType' and 'int'\r\n```\r\n#### Code sample\r\n\r\n```\r\nclass CustomModel(pl.LightningModule):\r\n\r\n    def __init__(self):\r\n        super().__init__()\r\n        self.cnn_model = nn.Sequential(\r\n            nn.Conv2d(1, 6, kernel_size = 5),\r\n            nn.ReLU(),\r\n            nn.AvgPool2d(2, stride = 2),\r\n            nn.Conv2d(6, 16, kernel_size = 5),\r\n            nn.ReLU(),\r\n            nn.AvgPool2d(2, stride = 2),\r\n            nn.Conv2d(16,32,kernel_size = 5),\r\n            nn.ReLU(),\r\n            nn.AvgPool2d(2, stride = 2))\r\n\r\n        self.fc_model = nn.Sequential(\r\n            nn.Linear(2592, 1024), # (N, 2592) -> (N, 1024)\r\n            nn.ReLU(),\r\n            nn.Linear(1024, 30))  # (N, 1024)  -> (N, 30)) #30 classes\r\n\r\n    def forward(self, x):\r\n        x = self.cnn_model(x)\r\n        # print(x.shape) \r\n        x = x.view(x.size(0), -1)\r\n        # print(x.shape)    \r\n        x = self.fc_model(x)\r\n        # print(x.shape)\r\n        return x\r\n\r\n    def training_step(self, batch, batch_idx):\r\n        x, y = batch\r\n        y_hat = self.forward(x)\r\n        loss = F.cross_entropy(y_hat, y)\r\n        # acc = FM.accuracy(y_hat, y)\r\n        result = pl.TrainResult()\r\n        print('f')\r\n        return result\r\n\r\n    def validation_step(self, batch, batch_idx):\r\n        x, y = batch\r\n        y_hat = self.forward(x)\r\n        loss = F.cross_entropy(y_hat, y)\r\n        acc = FM.accuracy(y_hat, y)\r\n        result = pl.EvalResult(checkpoint_on=loss)\r\n        result.log('val_loss', loss, prog_bar=True)\r\n        result.log('val_acc', acc, prog_bar=True)\r\n        print('f')\r\n        return result\r\n\r\n    def configure_optimizers(self):\r\n        optimizer = torch.optim.Adam(self.parameters(), lr=0.001)\r\n        return optimizer\r\n\r\n    def train_dataloader(self):\r\n        train_loader = DataLoader(dataset=train_dataset, shuffle=True, batch_size=32)\r\n        # print(\"Length of the train_loader:\", len(train_loader))\r\n        return train_loader\r\n\r\n    def val_dataloader(self):\r\n        return DataLoader(dataset=val_dataset, shuffle=False, batch_size=32)\r\n```\r\n\r\nThe error occurs when I am fitting the model to train. Using lightning 0.9.0 on colab. I am loading dataset by mounting drive and using torchvision datasets.ImageFolder function.",
    "comments_url": "https://api.github.com/repos/Lightning-AI/pytorch-lightning/issues/3113/comments",
    "author": "srijansingh53",
    "comments": [
      {
        "user": "rohitgr7",
        "created_at": "2020-08-23T15:47:18Z",
        "body": "changing `result = pl.TrainResult()` to `result = pl.TrainResult(minimize=loss)` is all you need."
      }
    ]
  },
  {
    "number": 2939,
    "title": "mlflow checkpoints in the wrong location ",
    "created_at": "2020-08-12T22:58:48Z",
    "closed_at": "2020-08-15T10:54:07Z",
    "labels": [
      "bug",
      "help wanted"
    ],
    "url": "https://github.com/Lightning-AI/pytorch-lightning/issues/2939",
    "body": "I'm not sure if I'm doing something wrong, I'm using mlflow instead of tensorboard as a logger. I've used the defaults i.e.\r\n\r\n```\r\nmlflow = loggers.MLFlowLogger()\r\ntrainer = pl.Trainer.from_argparse_args(args, logger=mlflow)\r\n```\r\n\r\nI'm ending up with the following folder structure\r\n\r\n\\mlflow\r\n\\mlflow\\1\r\n\\mlflow\\1\\\\{guid}\\artifacts\r\n\\mlflow\\1\\\\{guid}\\metrics\r\n\\mlflow\\1\\\\{guid}\\params\r\n\\mlflow\\1\\\\{guid}\\meta.yaml\r\n**\\1\\\\{guid}\\checkpoints**\r\n\r\ni.e. the checkpoints are in the wrong location, they should be in the `\\mlflow` folder. \r\n\r\nPerhaps this is an mlflow rather than pytorch-lightning issue? \r\n\r\nI'm using pytorch-lightning 0.8.5 on macos running in python 3.7.6\r\n",
    "comments_url": "https://api.github.com/repos/Lightning-AI/pytorch-lightning/issues/2939/comments",
    "author": "david-waterworth",
    "comments": [
      {
        "user": "Borda",
        "created_at": "2020-08-13T06:30:27Z",
        "body": "@david-waterworth mind try the latest 0.9rc12?"
      },
      {
        "user": "awaelchli",
        "created_at": "2020-08-14T06:15:19Z",
        "body": "It was fixed here: #2502 \r\nThe checkpoints subfolder will go here: `mlflow\\1{guid}\\checkpoints`, is that what you want @david-waterworth ?\r\n"
      }
    ]
  },
  {
    "number": 2679,
    "title": "Default checkpoint location problematic when using docker ",
    "created_at": "2020-07-23T17:53:41Z",
    "closed_at": "2020-08-11T14:11:44Z",
    "labels": [
      "bug",
      "help wanted"
    ],
    "url": "https://github.com/Lightning-AI/pytorch-lightning/issues/2679",
    "body": "The default behavior of `ModelCheckpoint` is to use `os.getcwd()`. Outside my docker container, this ended up being the same directory where my tensorboard logs were saved (e.g. `/my/dir/tb_logs/default/version_0/checkpoints/`).  But inside the docker container, it saved to the internal working directory (e.g. `/home/default/version_0/checkpoints/`). Since this location disappeared along with the container, the checkpoint was gone, and there was no warning raised to explain why.\r\n\r\nRequiring a checkpoint directory isn't desirable, but I'd like to help others avoid this grief in the future. Is there a better way to infer a default location than `os.getcwd()`? Something as simple as a print statement with the checkpoint location would have saved me a lot of time troubleshooting.\r\n",
    "comments_url": "https://api.github.com/repos/Lightning-AI/pytorch-lightning/issues/2679/comments",
    "author": "drStacky",
    "comments": [
      {
        "user": "awaelchli",
        "created_at": "2020-08-08T05:21:33Z",
        "body": "You can set the `default_root_dir` arg in the Trainer. Is that what you want? Otherwise there is an option verbose in the ModelCheckpoint callback which, when turned on, should print the file path everytime it saves."
      },
      {
        "user": "drStacky",
        "created_at": "2020-08-11T14:11:44Z",
        "body": "Somehow I misread the explanation of `default_root_dir`. I thought it only changed the name of the `default` directory, not the whole path. This is exactly what I needed. Thanks!"
      }
    ]
  },
  {
    "number": 2670,
    "title": "bug in pytorch_lightning.metrics.functional.auroc",
    "created_at": "2020-07-22T09:40:31Z",
    "closed_at": "2020-08-03T22:29:51Z",
    "labels": [
      "bug",
      "help wanted"
    ],
    "url": "https://github.com/Lightning-AI/pytorch-lightning/issues/2670",
    "body": "the code:\r\n```\r\ndef validation_epoch_end(self, outputs):\r\n        .........\r\n        print(total_y_hat.device)\r\n        print(total_y_true.device)\r\n        print(total_y_hat)\r\n        print(total_y_true)\r\n        print(total_y_hat.shape)\r\n        print(total_y_true.shape)\r\n        auc_score = auroc(total_y_hat, total_y_true)\r\n```\r\nthe output is:\r\n```\r\nGet data done!\r\nValidation sanity check:  50%|\u2588\u2588\u2588\u2588\u2588     | 1/2 [00:00<00:00,  1.06it/s]\r\n\r\ncuda:0\r\ncuda:0\r\ntensor([0.5084, 0.5084, 0.5084,  ..., 0.5084, 0.5084, 0.5084], device='cuda:0')\r\ntensor([0., 0., 0.,  ..., 0., 0., 0.], device='cuda:0')\r\ntorch.Size([16384])\r\ntorch.Size([16384])\r\nTraceback (most recent call last):\r\n  File \"lighting_sales.py\", line 443, in <module>\r\n    main(hparams)\r\n  File \"lighting_sales.py\", line 392, in main\r\n    trainer.fit(model)\r\n  File \"/opt/conda/lib/python3.7/site-packages/pytorch_lightning/trainer/trainer.py\", line 918, in fit\r\n    self.single_gpu_train(model)\r\n  File \"/opt/conda/lib/python3.7/site-packages/pytorch_lightning/trainer/distrib_parts.py\", line 176, in single_gpu_train\r\n    self.run_pretrain_routine(model)\r\n  File \"/opt/conda/lib/python3.7/site-packages/pytorch_lightning/trainer/trainer.py\", line 1076, in run_pretrain_routine\r\n    False)\r\n  File \"/opt/conda/lib/python3.7/site-packages/pytorch_lightning/trainer/evaluation_loop.py\", line 330, in _evaluate\r\n    eval_results = model.validation_epoch_end(outputs)\r\n  File \"lighting_sales.py\", line 252, in validation_epoch_end\r\n    auc_score = auroc(total_y_hat, total_y_true)\r\n  File \"/opt/conda/lib/python3.7/site-packages/pytorch_lightning/metrics/functional/classification.py\", line 817, in auroc\r\n    return _auroc(pred=pred, target=target, sample_weight=sample_weight, pos_label=pos_label)\r\n  File \"/opt/conda/lib/python3.7/site-packages/pytorch_lightning/metrics/functional/classification.py\", line 766, in new_func\r\n    x, y = func_to_decorate(*args, **kwargs)[:2]\r\n  File \"/opt/conda/lib/python3.7/site-packages/pytorch_lightning/metrics/functional/classification.py\", line 815, in _auroc\r\n    return roc(pred, target, sample_weight, pos_label)\r\n  File \"/opt/conda/lib/python3.7/site-packages/pytorch_lightning/metrics/functional/classification.py\", line 553, in roc\r\n    pos_label=pos_label)\r\n  File \"/opt/conda/lib/python3.7/site-packages/pytorch_lightning/metrics/functional/classification.py\", line 504, in _binary_clf_curve\r\n    torch.tensor([target.size(0) - 1])])\r\nRuntimeError: All input tensors must be on the same device. Received cuda:0 and cpu\r\n```\r\n          \r\n           ",
    "comments_url": "https://api.github.com/repos/Lightning-AI/pytorch-lightning/issues/2670/comments",
    "author": "BeHappyForMe",
    "comments": [
      {
        "user": "ydcjeff",
        "created_at": "2020-07-22T11:19:04Z",
        "body": "That bug is fixed on master. See #2657 "
      },
      {
        "user": "awaelchli",
        "created_at": "2020-07-22T20:31:02Z",
        "body": "Does it work with master branch? If not, do you use the functional or module interface for the metric?"
      },
      {
        "user": "edenlightning",
        "created_at": "2020-08-03T22:29:51Z",
        "body": "@BeHappyForMe I'm closing this but please open if still experiencing this with master."
      }
    ]
  },
  {
    "number": 2538,
    "title": "tensor_metric decorator does not let you return Tuple or List ouputs",
    "created_at": "2020-07-07T10:51:10Z",
    "closed_at": "2020-07-07T13:17:24Z",
    "labels": [
      "bug",
      "help wanted"
    ],
    "url": "https://github.com/Lightning-AI/pytorch-lightning/issues/2538",
    "body": "## \ud83d\udc1b Bug\r\n\r\nWhen creating a metric function that returns multiple outputs in the form of a Tuple or List the metric class complains that it can't convert a Tuple or List to a tensor, even though the contents of the Tuple/List are tensors.\r\n\r\n### To Reproduce\r\n\r\nAn example of this would be a function  to return the topk accuracy \r\n\r\n```\r\n\r\n    @tensor_metric()\r\n    def accuracy(output, target, topk=(1,)):\r\n        \"\"\"Computes the precision@k for the specified values of k\"\"\"\r\n\r\n        maxk = max(topk)\r\n        batch_size = target.size(0)\r\n    \r\n        _, pred = output.topk(maxk, 1, True, True)\r\n        pred = pred.t()\r\n        correct = pred.eq(target.view(1, -1).expand_as(pred))\r\n    \r\n        res = []\r\n        for k in topk:\r\n            correct_k = correct[:k].view(-1).float().sum(0)\r\n            res.append(correct_k.mul_(100.0 / batch_size))\r\n        return res\r\n\r\n    def training_step(self, batch, batch_idx):\r\n        x, y = batch\r\n        y_hat = self(x)\r\n        loss = F.cross_entropy(y_hat, y)\r\n        acc = self.accuracy(y_hat, y, topk=(1, 5))\r\n\r\n```\r\n\r\n### Error Output\r\n\r\n```\r\n\r\nEpoch 1:   0%|          | 0/1876 [00:00<?, ?it/s] Traceback (most recent call last):\r\n  File \"/home/local/CORP/dbyrne/Documents/Projects/RL/pytorch-lightning-bolts/pl_bolts/models/mnist_module.py\", line 138, in <module>\r\n    trainer.fit(model)\r\n  File \"/home/local/CORP/dbyrne/anaconda3/envs/core_rl/lib/python3.7/site-packages/pytorch_lightning/trainer/trainer.py\", line 912, in fit\r\n    self.dp_train(model)\r\n  File \"/home/local/CORP/dbyrne/anaconda3/envs/core_rl/lib/python3.7/site-packages/pytorch_lightning/trainer/distrib_parts.py\", line 258, in dp_train\r\n    self.run_pretrain_routine(model)\r\n  File \"/home/local/CORP/dbyrne/anaconda3/envs/core_rl/lib/python3.7/site-packages/pytorch_lightning/trainer/trainer.py\", line 1093, in run_pretrain_routine\r\n    self.train()\r\n  File \"/home/local/CORP/dbyrne/anaconda3/envs/core_rl/lib/python3.7/site-packages/pytorch_lightning/trainer/training_loop.py\", line 375, in train\r\n    self.run_training_epoch()\r\n  File \"/home/local/CORP/dbyrne/anaconda3/envs/core_rl/lib/python3.7/site-packages/pytorch_lightning/trainer/training_loop.py\", line 458, in run_training_epoch\r\n    _outputs = self.run_training_batch(batch, batch_idx)\r\n  File \"/home/local/CORP/dbyrne/anaconda3/envs/core_rl/lib/python3.7/site-packages/pytorch_lightning/trainer/training_loop.py\", line 634, in run_training_batch\r\n    loss, batch_output = optimizer_closure()\r\n  File \"/home/local/CORP/dbyrne/anaconda3/envs/core_rl/lib/python3.7/site-packages/pytorch_lightning/trainer/training_loop.py\", line 598, in optimizer_closure\r\n    output_dict = self.training_forward(split_batch, batch_idx, opt_idx, self.hiddens)\r\n  File \"/home/local/CORP/dbyrne/anaconda3/envs/core_rl/lib/python3.7/site-packages/pytorch_lightning/trainer/training_loop.py\", line 754, in training_forward\r\n    output = self.model(*args)\r\n  File \"/home/local/CORP/dbyrne/anaconda3/envs/core_rl/lib/python3.7/site-packages/torch/nn/modules/module.py\", line 550, in __call__\r\n    result = self.forward(*input, **kwargs)\r\n  File \"/home/local/CORP/dbyrne/anaconda3/envs/core_rl/lib/python3.7/site-packages/pytorch_lightning/overrides/data_parallel.py\", line 65, in forward\r\n    outputs = self.parallel_apply(replicas, inputs, kwargs)\r\n  File \"/home/local/CORP/dbyrne/anaconda3/envs/core_rl/lib/python3.7/site-packages/pytorch_lightning/overrides/data_parallel.py\", line 69, in parallel_apply\r\n    return parallel_apply(replicas, inputs, kwargs, self.device_ids[:len(replicas)])\r\n  File \"/home/local/CORP/dbyrne/anaconda3/envs/core_rl/lib/python3.7/site-packages/pytorch_lightning/overrides/data_parallel.py\", line 209, in parallel_apply\r\n    raise output\r\n  File \"/home/local/CORP/dbyrne/anaconda3/envs/core_rl/lib/python3.7/site-packages/pytorch_lightning/overrides/data_parallel.py\", line 166, in _worker\r\n    output = module.training_step(*input, **kwargs)\r\n  File \"/home/local/CORP/dbyrne/Documents/Projects/RL/pytorch-lightning-bolts/pl_bolts/models/mnist_module.py\", line 52, in training_step\r\n    acc = self.accuracy(y_hat, y, topk=(1, 5))\r\n  File \"/home/local/CORP/dbyrne/anaconda3/envs/core_rl/lib/python3.7/site-packages/pytorch_lightning/metrics/converters.py\", line 58, in new_func\r\n    result = function_to_decorate(*args, **kwargs)\r\n  File \"/home/local/CORP/dbyrne/anaconda3/envs/core_rl/lib/python3.7/site-packages/pytorch_lightning/metrics/converters.py\", line 59, in new_func\r\n    return func_to_apply(result, *dec_args, **dec_kwargs)\r\n  File \"/home/local/CORP/dbyrne/anaconda3/envs/core_rl/lib/python3.7/site-packages/pytorch_lightning/metrics/converters.py\", line 84, in _convert_to_tensor\r\n    raise TypeError(f\"The given type ('{type(data).__name__}') cannot be converted to a tensor!\")\r\nTypeError: The given type ('list') cannot be converted to a tensor!\r\nException ignored in: <function tqdm.__del__ at 0x7f8c82724ae8>\r\nTraceback (most recent call last):\r\n  File \"/home/local/CORP/dbyrne/anaconda3/envs/core_rl/lib/python3.7/site-packages/tqdm/std.py\", line 1086, in __del__\r\n  File \"/home/local/CORP/dbyrne/anaconda3/envs/core_rl/lib/python3.7/site-packages/tqdm/std.py\", line 1293, in close\r\n  File \"/home/local/CORP/dbyrne/anaconda3/envs/core_rl/lib/python3.7/site-packages/tqdm/std.py\", line 1471, in display\r\n  File \"/home/local/CORP/dbyrne/anaconda3/envs/core_rl/lib/python3.7/site-packages/tqdm/std.py\", line 1089, in __repr__\r\n  File \"/home/local/CORP/dbyrne/anaconda3/envs/core_rl/lib/python3.7/site-packages/tqdm/std.py\", line 1433, in format_dict\r\nTypeError: cannot unpack non-iterable NoneType object\r\n\r\nProcess finished with exit code 1\r\n\r\n```\r\n\r\n### Environment\r\n\r\n - PyTorch Version: 1.4\r\n - OS: Linux\r\n - How you installed PyTorch: Conda\r\n - Python version: 3.7.7\r\n - CUDA/cuDNN version: 10.1\r\n - GPU models and configuration: RTX 2080",
    "comments_url": "https://api.github.com/repos/Lightning-AI/pytorch-lightning/issues/2538/comments",
    "author": "djbyrne",
    "comments": [
      {
        "user": "SkafteNicki",
        "created_at": "2020-07-07T12:54:59Z",
        "body": "Could you try to use the decorator `tensor_collection_metric`? The intention with `tensor_metric` is that should decorate metric functions that returns a single tensor, whereas `tensor_collection_metric` is meant to be used on a collection of metrics.\r\n\r\nOtherwise you could just stack your `res` list into a tensor: `res=torch.cat(res)`."
      }
    ]
  },
  {
    "number": 2400,
    "title": "CrossEntropyLoss fails to run with GPU",
    "created_at": "2020-06-28T15:04:30Z",
    "closed_at": "2020-06-29T01:47:41Z",
    "labels": [
      "bug",
      "help wanted"
    ],
    "url": "https://github.com/Lightning-AI/pytorch-lightning/issues/2400",
    "body": "## \ud83d\udc1b Bug\r\n\r\nUsing the following `training_step` method which uses `nn.CrossEntropyLoss()` loss function:\r\n\r\n```python\r\n    def training_step(self, batch, batch_idx):\r\n        x1, x2 = batch[\"x1\"], batch[\"x2\"]\r\n        predict = self(x1, x2)\r\n        target = torch.arange(x1.size()[0])\r\n        loss = self.loss_fn(predict, target)\r\n        return {'loss': loss}\r\n```\r\nfails to run with GPU throwing the following error:\r\n\r\n```python\r\nRuntimeError: Expected object of device type cuda but got device type cpu for argument #2 'target' in call to _thnn_nll_loss_forward\r\n```\r\nThe function `self.loss_fn` is shown below:\r\n\r\n```python\r\nimport torch\r\nfrom pytorch_lightning import LightningModule\r\nfrom torch import nn\r\n\r\n\r\nclass NPairsLoss(LightningModule):\r\n    \"\"\"\r\n    The N-Pairs Loss.\r\n    It measures the loss given predicted tensors x1, x2 both with shape [batch_size, hidden_size],\r\n    and target tensor y which is the identity matrix with shape  [batch_size, batch_size].\r\n    \"\"\"\r\n\r\n    def __init__(self, alpha=100):\r\n        super(NPairsLoss, self).__init__()\r\n        self.ce = nn.CrossEntropyLoss()\r\n        self.alpha = alpha\r\n\r\n    def similarities(self, x1, x2):\r\n        \"\"\"\r\n        Calculates the cosine similarity matrix for every pair (i, j),\r\n        where i is an embedding from x1 and j is another embedding from x2.\r\n\r\n        :param x1: a tensors with shape [batch_size, hidden_size].\r\n        :param x2: a tensors with shape [batch_size, hidden_size].\r\n        :return: the cosine similarity matrix with shape [batch_size, batch_size].\r\n        \"\"\"\r\n        x1 = x1 / torch.norm(x1, dim=1, keepdim=True)\r\n        x2 = x2 / torch.norm(x2, p=2, dim=1, keepdim=True)\r\n        return self.alpha * torch.matmul(x1, x2.t())\r\n\r\n    def forward(self, predict, target):\r\n        \"\"\"\r\n        Computes the N-Pairs Loss between the target and predictions.\r\n        :param predict: the prediction of the model,\r\n        Contains the batches x1 (image embeddings) and x2 (description embeddings).\r\n        :param target: the identity matrix with shape  [batch_size, batch_size].\r\n        :return: N-Pairs Loss value.\r\n        \"\"\"\r\n        x1, x2 = predict\r\n        predict = self.similarities(x1, x2)\r\n        # by construction the probability distribution must be concentrated on the diagonal of the similarities matrix.\r\n        # so, Cross Entropy can be used to measure the loss.\r\n        return self.ce(predict, target)\r\n```\r\nIs `target = torch.arange(x1.size()[0])` not being created in the GPU?\r\n\r\n### Expected behavior\r\n\r\nThat  target tensor (`target = torch.arange(x1.size()[0])`) is created on the GPU. \r\n\r\n\r\n### Environment\r\n\r\n* CUDA:\r\n\t- GPU:\r\n\t\t- GeForce RTX 2080\r\n\t- available:         True\r\n\t- version:           10.2\r\n* Packages:\r\n\t- numpy:             1.19.0\r\n\t- pyTorch_debug:     False\r\n\t- pyTorch_version:   1.5.1\r\n\t- pytorch-lightning: 0.8.1\r\n\t- tensorboard:       2.2.2\r\n\t- tqdm:              4.46.1\r\n* System:\r\n\t- OS:                Linux\r\n\t- architecture:\r\n\t\t- 64bit\r\n\t\t- ELF\r\n\t- processor:         x86_64\r\n\t- python:            3.7.3\r\n\t- version:           #41-Ubuntu SMP Tue Dec 3 00:27:35 UTC 2019\r\n\r\n\r\n\r\n",
    "comments_url": "https://api.github.com/repos/Lightning-AI/pytorch-lightning/issues/2400/comments",
    "author": "celsofranssa",
    "comments": [
      {
        "user": "rohitgr7",
        "created_at": "2020-06-28T17:14:21Z",
        "body": "No, you have to move `target = torch.arange(x1.size()[0])` to the GPU(or any other device you want) because it's not present in the batch from the dataloader.\r\nYou can use `target = torch.arange(x1.size()[0]).to(x.get_device())`."
      },
      {
        "user": "williamFalcon",
        "created_at": "2020-06-29T01:48:09Z",
        "body": "You can also use:\r\n```\r\narget = torch.arange(x1.size()[0]).to(self.device)\r\n```\r\n\r\nthe PL module knows what device it is on."
      },
      {
        "user": "taylorchu",
        "created_at": "2020-07-04T07:56:32Z",
        "body": "@williamFalcon is there a reason why this is not managed by lightning?"
      },
      {
        "user": "rohitgr7",
        "created_at": "2020-07-04T11:02:20Z",
        "body": "@taylorchu If you pass that from the DataLoader(or Dataset) itself it will be handled automatically, but if a tensor is created in between the procedure by the user itself, one has to move it to the device manually the PyTorch way."
      }
    ]
  },
  {
    "number": 2282,
    "title": "optimizer got an empty parameter list",
    "created_at": "2020-06-19T20:39:51Z",
    "closed_at": "2020-06-20T23:04:53Z",
    "labels": [
      "bug",
      "help wanted"
    ],
    "url": "https://github.com/Lightning-AI/pytorch-lightning/issues/2282",
    "body": " Hi,\r\nGot the following error:\r\nValueError: optimizer got an empty parameter list with both options below:\r\n\r\ndef configure_optimizers(self):\r\n        # option1 optimizer = torch.optim.Adam(self.parameters(), lr=self.hparams.lr)\r\n        # option 2\r\n        optimizer = torch.optim.Adam(params = list(self.parameters()), lr=self.hparams.lr)\r\n        return optimizer\r\n\r\nclass Autoencoder(pl.LightningModule):\r\n    \r\n    def __init__(self, hparams: argparse.Namespace):\r\n        super(Autoencoder,self).__init__() \r\n        self.hparams = hparams\r\n           \r\n        self_layer_e_1 = nn.Conv1d(hparams.in_channels, hparams.out_channels, hparams.kernel_size)\r\n        self_layer_e_2 = nn.Conv1d(hparams.out_channels,hparams.in_channels,hparams.kernel_size)\r\n        self_layer_d_1 = nn.ConvTranspose1d(hparams.in_channels,hparams.out_channels,hparams.kernel_size)\r\n        self_layer_d_2 = nn.ConvTranspose1d(hparams.out_channels,hparams.in_channels,hparams.kernel_size)\r\n        \r\n    \r\n    def forward(self,x):\r\n        x = self_layer_e_1(x)\r\n        x = nn.ReLu(x)\r\n        x = self_layer_e_2(x)\r\n        encoded = nn.ReLU(x)\r\n        x = self_layer_d_1(encoded)\r\n        x = nn.ReLU(x)\r\n        decoded = self_layer_d_2(x)\r\n        decoded = self.decoder(encoded)\r\n        return self.decoded, self.encoded\r\n    \r\n    \r\n    def training_step(self, batch, batch_idx):\r\n        x, _ = batch\r\n        decoded, encoded = self.forward(x)\r\n        loss = MSE(x, decoded)\r\n        return loss\r\n    \r\n    def validation_step(self, batch, batch_idx):\r\n        return self._shared_eval(batch, batch_idx, 'val')\r\n\r\n    def test_step(self, batch, batch_idx):\r\n        return self._shared_eval(batch, batch_idx, 'test')\r\n        \r\n    def _shared_eval(self, batch, batch_idx, prefix):\r\n        x, y = batch\r\n        decoded, encoded = self.forward(x)\r\n        loss = F.nll_loss(x, decoded)\r\n        return {f'{prefix}_loss': loss}\r\n    \r\n    def train_dataloader(self):\r\n        return DataLoader(self.CarrierDataset, batch_size=self.hparams.batch_size)\r\n\r\n    def val_dataloader(self):\r\n        return DataLoader(self.CarrierDataset, batch_size=hparams.batch_size)\r\n\r\n    def test_dataloader(self):\r\n        return DataLoader(self,CarrierDataset, batch_size=hparams.batch_size)\r\n\r\n    def configure_optimizers(self):\r\n        #optimizer = torch.optim.Adam(self.parameters(), lr=self.hparams.lr)\r\n        optimizer = torch.optim.Adam(params = list(self.parameters()), lr=self.hparams.lr)\r\n        return optimizer",
    "comments_url": "https://api.github.com/repos/Lightning-AI/pytorch-lightning/issues/2282/comments",
    "author": "soulhi-vz",
    "comments": [
      {
        "user": "versatran01",
        "created_at": "2020-06-19T21:56:35Z",
        "body": "You need to use `self.xxx = nn.Conv2d(a,b,c)`  instead of `self_xxx = nn.Conv2d(a,b,c)`  for `nn.Module` to register them as parameters, otherwise your module has no paramters, thuse the optimizer gets nothing."
      }
    ]
  },
  {
    "number": 2254,
    "title": "Single node DDP: \"Default process group is not initialized\"",
    "created_at": "2020-06-19T02:37:22Z",
    "closed_at": "2020-07-10T01:20:18Z",
    "labels": [
      "bug",
      "help wanted"
    ],
    "url": "https://github.com/Lightning-AI/pytorch-lightning/issues/2254",
    "body": "## \ud83d\udc1b Bug\r\nUnable to start single node ddp training on 0.8.0\r\n\r\n### To Reproduce\r\n~~was going to run the gpu_template but... #2235~~\r\nboth methods of running the template result in the same error\r\n```\r\n$ python -m pl_examples.basic_examples.gpu_template --gpus 4 --distributed_backend ddp_spawn\r\n$ python -m pl_examples.basic_examples.gpu_template --gpus 4 --distributed_backend ddp\r\n```\r\n```\r\nGPU available: True, used: True\r\nTPU available: False, using: 0 TPU cores\r\nCUDA_VISIBLE_DEVICES: [0,1,2,3]\r\nTraceback (most recent call last):\r\n  File \"/opt/conda/lib/python3.6/runpy.py\", line 193, in _run_module_as_main\r\n    \"__main__\", mod_spec)\r\n  File \"/opt/conda/lib/python3.6/runpy.py\", line 85, in _run_code\r\n    exec(code, run_globals)\r\n  File \"/opt/conda/lib/python3.6/site-packages/pl_examples/basic_examples/gpu_template.py\", line 80, in <module>\r\n    main(hyperparams)\r\n  File \"/opt/conda/lib/python3.6/site-packages/pl_examples/basic_examples/gpu_template.py\", line 41, in main\r\n    trainer.fit(model)\r\n  File \"/opt/conda/lib/python3.6/site-packages/pytorch_lightning/trainer/trainer.py\", line 860, in fit\r\n    self.barrier('fit_prepare_data')\r\n  File \"/opt/conda/lib/python3.6/site-packages/pytorch_lightning/trainer/trainer.py\", line 1261, in barrier\r\n    torch_distrib.barrier()\r\n  File \"/opt/conda/lib/python3.6/site-packages/torch/distributed/distributed_c10d.py\", line 1484, in barrier\r\n    _check_default_pg()\r\n  File \"/opt/conda/lib/python3.6/site-packages/torch/distributed/distributed_c10d.py\", line 187, in _check_default_pg\r\n    \"Default process group is not initialized\"\r\nAssertionError: Default process group is not initialized\r\n```",
    "comments_url": "https://api.github.com/repos/Lightning-AI/pytorch-lightning/issues/2254/comments",
    "author": "s-rog",
    "comments": [
      {
        "user": "williamFalcon",
        "created_at": "2020-06-19T02:47:50Z",
        "body": "can you post code to reproduce? just a minimal example that breaks\r\n\r\nBTW, the GPU template is fixed..."
      },
      {
        "user": "s-rog",
        "created_at": "2020-06-19T04:50:07Z",
        "body": "I just tested the merged changes with both ddp and ddp_spawn again got this:\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"/opt/conda/lib/python3.6/site-packages/pl_examples/basic_examples/gpu_template.py\", line 80, in <module>\r\n    main(hyperparams)\r\n  File \"/opt/conda/lib/python3.6/site-packages/pl_examples/basic_examples/gpu_template.py\", line 41, in main\r\n    trainer.fit(model)\r\n  File \"/opt/conda/lib/python3.6/site-packages/pytorch_lightning/trainer/trainer.py\", line 891, in fit\r\nTraceback (most recent call last):\r\n  File \"/opt/conda/lib/python3.6/runpy.py\", line 193, in _run_module_as_main\r\n    \"__main__\", mod_spec)\r\n  File \"/opt/conda/lib/python3.6/runpy.py\", line 85, in _run_code\r\n    self.ddp_train(task, model)\r\n  File \"/opt/conda/lib/python3.6/site-packages/pytorch_lightning/trainer/distrib_data_parallel.py\", line 479, in ddp_train\r\n    exec(code, run_globals)\r\n  File \"/opt/conda/lib/python3.6/site-packages/pl_examples/basic_examples/gpu_template.py\", line 80, in <module>\r\n    main(hyperparams)\r\n  File \"/opt/conda/lib/python3.6/site-packages/pl_examples/basic_examples/gpu_template.py\", line 41, in main\r\n    trainer.fit(model)\r\n  File \"/opt/conda/lib/python3.6/site-packages/pytorch_lightning/trainer/trainer.py\", line 907, in fit\r\n    self.setup()\r\nTypeError: setup() missing 1 required positional argument: 'stage'\r\n    self.spawn_ddp_children(model)\r\n  File \"/opt/conda/lib/python3.6/site-packages/pytorch_lightning/trainer/distrib_data_parallel.py\", line 441, in spawn_ddp_children\r\n    self.ddp_train(local_rank, model, is_master=True)\r\n  File \"/opt/conda/lib/python3.6/site-packages/pytorch_lightning/trainer/distrib_data_parallel.py\", line 479, in ddp_train\r\n    self.setup()\r\nTypeError: setup() missing 1 required positional argument: 'stage'\r\n```"
      },
      {
        "user": "williamFalcon",
        "created_at": "2020-06-19T05:14:30Z",
        "body": "try again. that was a typo"
      },
      {
        "user": "armancohan",
        "created_at": "2020-06-23T05:35:19Z",
        "body": "Still having the `Default process group is not initialized` issue when using trainer.test \r\n"
      },
      {
        "user": "wukailu",
        "created_at": "2020-06-23T06:30:56Z",
        "body": "> Still having the `Default process group is not initialized` issue when using trainer.test\r\n\r\nI still have this bug as well. One temporary solution is creating a new single GPU trainer to do the test.\r\n\r\nLike\r\n\r\n```\r\ntrainer = Trainer(gpus=1, deterministic=True, logger=logger)\r\ntrainer.model = model\r\ntrainer.test()\r\n```"
      },
      {
        "user": "armancohan",
        "created_at": "2020-06-23T19:57:28Z",
        "body": "Right, I know it works on single gpu. I have a large test set and ideally want faster inference using multiple gpus."
      },
      {
        "user": "zackcarson",
        "created_at": "2020-07-02T15:11:23Z",
        "body": "Can we re-open this issue? I am still having the `Default process group is not initialized` issue when I hit `trainer.test()` with ddp (with any number of gpus, even 1). I'm using the latest release from yesterday."
      },
      {
        "user": "jxchen01",
        "created_at": "2020-07-04T05:32:04Z",
        "body": "having the same problem..... I also tried to downgrade pl to an older version, like 0.7.5, and try to using the older version to do the inference. But, the model trained and saved using the 0.8.x seems to not directly be compatible with older version.  "
      },
      {
        "user": "channingxiao",
        "created_at": "2020-07-09T12:11:00Z",
        "body": "version: 0.8.4  train with ddp,  Got \"Default process group is not initialized\" when run trainer.test()"
      },
      {
        "user": "williamFalcon",
        "created_at": "2020-07-09T12:18:32Z",
        "body": "could you try master? this is fixed there"
      },
      {
        "user": "jxchen01",
        "created_at": "2020-08-17T19:13:27Z",
        "body": "@williamFalcon Trying 0.8.5\r\n\r\nTrained with ddp, and testing with ddp, but got the following error message:\r\n\r\n```\r\nAssertionError: DistributedDataParallel is not needed when a module doesn't have any parameter that requires a gradient.\r\n```\r\n\r\nAny idea?\r\n\r\nThanks!"
      }
    ]
  },
  {
    "number": 2238,
    "title": "when no checkpoints are saved, test fails",
    "created_at": "2020-06-18T15:02:14Z",
    "closed_at": "2020-07-10T01:20:47Z",
    "labels": [
      "bug",
      "help wanted"
    ],
    "url": "https://github.com/Lightning-AI/pytorch-lightning/issues/2238",
    "body": "Build a model that doesn't save a checkpoint and this crashes.\r\nIt should use the last model instead.\r\n```\r\nmodel = ...\r\ntrainer = Trainer(fast_dev_run)\r\ntrainer.fit(model)\r\ntrainer.test()\r\n```\r\n\r\n@yukw777 \r\n```\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\nself = <torch.serialization._open_file object at 0x7f443d4d88d0>, name = ''\r\nmode = 'rb'\r\n\r\n    def __init__(self, name, mode):\r\n>       super(_open_file, self).__init__(open(name, mode))\r\nE       FileNotFoundError: [Errno 2] No such file or directory: ''\r\n```\r\n\r\n\r\nThe test for this should be:\r\n\r\n```\r\ndef test_no_ckpt_test(tmpdir):\r\n    model = EvaluationModel()\r\n    trainer = Trainer(fast_dev_run)\r\n    trainer.fit(model)\r\n    trainer.test()\r\n```",
    "comments_url": "https://api.github.com/repos/Lightning-AI/pytorch-lightning/issues/2238/comments",
    "author": "williamFalcon",
    "comments": [
      {
        "user": "williamFalcon",
        "created_at": "2020-06-24T18:24:33Z",
        "body": "```    trainer.test(model)```"
      },
      {
        "user": "yukw777",
        "created_at": "2020-06-24T18:40:40Z",
        "body": "@nischal-sanil could you help me understand the issue better by explaining how you don\u2019t have any models saved?"
      },
      {
        "user": "nischal-sanil",
        "created_at": "2020-06-25T05:39:15Z",
        "body": "I was running the Trainer with `fast_dev_run` set to True, hence there were no checkpoints. Changing  `trainer.test()` to `trainer.test(model)` has resolved the issue.\r\nThanks,"
      },
      {
        "user": "nischal-sanil",
        "created_at": "2020-06-26T01:17:51Z",
        "body": "Hi again,\r\n\r\nConsider the following code snippet\r\n\r\n```\r\nclass Net(LightningModule):\r\n    ...\r\n\r\nresnet18 = models.resnet18(pretrained=True)\r\nmodel = Net(resnet18)\r\n\r\n# parameters before training\r\nold_params = model.parameters()\r\n\r\ntrainer = Trainer(max_steps=10) \r\ntrainer.fit(model)  \r\n\r\n# parameters after training \r\nnew_params = model.parameters()\r\n```\r\n\r\nWhere I store the parameters of the model before and after training in `old_params` and `new_params`, a check on their equality returns `True`, suggesting there're no changes to the parameters.\r\n\r\n```\r\ndef check_params(old,new):\r\n    return all([torch.equal(o,n) for o,n in zip(old,new)])\r\n\r\ncheck_params(old_params,new_params)\r\n## True\r\n```\r\n Therefore, while running `trainer.test(model)` the trained model is not used for testing. I had assumed that the `Trainer` would have updated the parameters to the `model`, but from the above snippet that does not seem to be the case.  And I am not able to figure out if this is an expected behavior of the `model` or there is a problem with my class definition. If this is the expected behavior of the `model`, then are there any work around for calling `trainer.test()` without using a checkpoint because in my case loading from a checkpoint results in an error similar to this issue #2359.\r\n"
      },
      {
        "user": "yukw777",
        "created_at": "2020-06-29T18:52:09Z",
        "body": "@williamFalcon is it true that if `fast_dev_run` is `True`, there is no checkpoints saved? I just tried to manually check this in `test_test_checkpoint_path`, but `checkpoint_callback` of the trainer still had a valid `best_model_path` even when `fast_dev_run` is `True`.\r\n\r\n@nischal-sanil your code comparing the old parameters to the new parameters is not quite correct. Since the tensors returned by `model.parameters()` are \"references\" to the underlying data, both `old_params` and `new_params` would point to the same \"trained\" tensors, hence `check_params()` would return `True`. You'd have to do something like `old_params = [p.clone() for p in model.parameters()]` to get around that.\r\n\r\n"
      },
      {
        "user": "williamFalcon",
        "created_at": "2020-06-29T18:59:52Z",
        "body": "fast_dev_run should not save checkpoints (nor write a logs file). it's like a \"compiler\""
      },
      {
        "user": "yukw777",
        "created_at": "2020-06-29T19:55:15Z",
        "body": "@williamFalcon hmm maybe there's a bug? I see this:\r\n\r\n```\r\n\u276f python pl_examples/basic_examples/cpu_template.py --fast_dev_run True\r\n/Users/peteryu/.pyenv/versions/pl/lib/python3.7/site-packages/graphql/type/directives.py:55: DeprecationWarning: Using or importing the ABCs from 'collections' instead of from 'collections.abc' is deprecated since Python 3.3,and in 3.9 it will stop working\r\n  assert isinstance(locations, collections.Iterable), 'Must provide locations for directive.'\r\nRunning in fast_dev_run mode: will run a full train, val and test loop using a single batch\r\nGPU available: False, used: False\r\nTPU available: False, using: 0 TPU cores\r\n\r\n  | Name      | Type        | Params | In sizes   | Out sizes \r\n--------------------------------------------------------------------\r\n0 | c_d1      | Linear      | 39 M   | [2, 784]   | [2, 50000]\r\n1 | c_d1_bn   | BatchNorm1d | 100 K  | [2, 50000] | [2, 50000]\r\n2 | c_d1_drop | Dropout     | 0      | [2, 50000] | [2, 50000]\r\n3 | c_d2      | Linear      | 500 K  | [2, 50000] | [2, 10]   \r\nEpoch 1: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 2/2 [00:01<00:00,  1.18it/s, loss=2.523, v_num=0]\r\n\u276f ls lightning_logs/version_0/checkpoints/epoch=0.ckpt \r\nlightning_logs/version_0/checkpoints/epoch=0.ckpt\r\n```"
      },
      {
        "user": "williamFalcon",
        "created_at": "2020-07-10T01:20:47Z",
        "body": "added a warning and return {}"
      }
    ]
  },
  {
    "number": 2081,
    "title": "RuntimeError: Address already in use on 'ddp' mode pl 0.8.0",
    "created_at": "2020-06-05T10:58:42Z",
    "closed_at": "2020-06-05T14:33:40Z",
    "labels": [
      "help wanted"
    ],
    "url": "https://github.com/Lightning-AI/pytorch-lightning/issues/2081",
    "body": " Trainer configuration:\r\n```\r\n    trainer = pl.Trainer(\r\n        logger= CometLogger( api_key=\"ID\"),\r\n        auto_select_gpus=True,\r\n        gpus=3,\r\n        distributed_backend=\"ddp\",\r\n   )\r\n```\r\nThe error:\r\n```\r\nGPU available: True, used: True\r\nNo environment variable for node rank defined. Set as 0.\r\nCUDA_VISIBLE_DEVICES: [0,1,2]\r\nCometLogger will be initialized in online mode\r\nCometLogger will be initialized in online mode\r\ninitializing ddp: LOCAL_RANK: 0/2 WORLD_SIZE:3\r\nTraceback (most recent call last):\r\n  File \"train.py\", line 156, in <module>\r\n    main()\r\n  File \"train.py\", line 64, in main\r\n    main_train(model_class_pointer, hyperparams, logger)\r\n  File \"train.py\", line 148, in main_train\r\n    trainer.fit(model)\r\n  File \"/user/anaconda3/envs/docBert/lib/python3.7/site-packages/pytorch_lightning/trainer/trainer.py\", line 884, in fit\r\n    self.spawn_ddp_children(model)\r\n  File \"/user/anaconda3/envs/docBert/lib/python3.7/site-packages/pytorch_lightning/trainer/distrib_data_parallel.py\", line 395, in spawn_ddp_children\r\n    self.ddp_train(local_rank, model, is_master=True)\r\n  File \"/user/anaconda3/envs/docBert/lib/python3.7/site-packages/pytorch_lightning/trainer/distrib_data_parallel.py\", line 425, in ddp_train\r\n    model.init_ddp_connection(self.proc_rank, self.world_size, self.is_slurm_managing_tasks)\r\n  File \"/user/anaconda3/envs/docBert/lib/python3.7/site-packages/pytorch_lightning/core/lightning.py\", line 962, in init_ddp_connection\r\n    torch_distrib.init_process_group(torch_backend, rank=proc_rank, world_size=world_size)\r\n  File \"/user/anaconda3/envs/docBert/lib/python3.7/site-packages/torch/distributed/distributed_c10d.py\", line 393, in init_process_group\r\n    store, rank, world_size = next(rendezvous_iterator)\r\n  File \"/user/anaconda3/envs/docBert/lib/python3.7/site-packages/torch/distributed/rendezvous.py\", line 172, in _env_rendezvous_handler\r\n    store = TCPStore(master_addr, master_port, world_size, start_daemon, timeout)\r\nRuntimeError: Address already in use\r\n```\r\nEnv\r\n```\r\n* CUDA:\r\n        - available:         True\r\n        - version:           10.1\r\n* Packages:\r\n        - numpy:             1.18.4\r\n        - pyTorch_debug:     False\r\n        - pyTorch_version:   1.5.0\r\n        - pytorch-lightning: 0.8.0-dev\r\n        - tensorboard:       2.1.0\r\n        - tqdm:              4.46.0\r\n* System:\r\n        - OS:                Linux\r\n        - architecture:\r\n                - 64bit\r\n                - \r\n        - processor:         x86_64\r\n        - python:            3.7.7\r\n        - version:           #97-Ubuntu SMP Wed Apr 1 03:25:46 UTC 2020\r\n```\r\n",
    "comments_url": "https://api.github.com/repos/Lightning-AI/pytorch-lightning/issues/2081/comments",
    "author": "dvirginz",
    "comments": [
      {
        "user": "williamFalcon",
        "created_at": "2020-06-05T11:09:11Z",
        "body": "check ps -elf | grep python. maybe a previous run is occupying that port.  "
      },
      {
        "user": "ZhaofengWu",
        "created_at": "2020-06-10T17:11:04Z",
        "body": "Does this mean I can't launch multiple DDP jobs on the same node with many GPUs because the port will conflict? (e.g. 2 independent DDP jobs requiring 4 GPU each in an 8 GPU machine)\r\n\r\nEDIT: it seems that I can set `MASTER_PORT` env var to avoid this issue, correct? If so it'd be nice if lightning can detect this and use a new port automatically :)"
      },
      {
        "user": "williamFalcon",
        "created_at": "2020-06-10T19:36:16Z",
        "body": "you can... just the the MASTER_PORT env var.\r\n\r\nLightning does in fact pick a random port... but you set the seed, so it's always the same haha. We need to disable the seed for the port choosing or continue trying ports if the ports are taken.\r\n\r\nThis would be a great PR!"
      },
      {
        "user": "ZhaofengWu",
        "created_at": "2020-06-10T20:35:49Z",
        "body": "@williamFalcon PR submitted at #2140"
      },
      {
        "user": "ShanakaRG",
        "created_at": "2023-12-19T01:55:53Z",
        "body": "` kill -9 $(ps aux | grep main.py | grep -v grep | awk '{print $2}')` \r\n\r\nThis solved my problem. However, if I did not use `kill -9` it does not work for me."
      },
      {
        "user": "chenfengshijie",
        "created_at": "2024-06-24T09:35:21Z",
        "body": "Use torchrun instead of python solve this problem?Since torchrun can choose a free port to launch."
      }
    ]
  },
  {
    "number": 1665,
    "title": "Trainer add args doesn't add default root dir",
    "created_at": "2020-04-29T15:59:49Z",
    "closed_at": "2020-05-12T12:53:27Z",
    "labels": [
      "bug",
      "help wanted"
    ],
    "url": "https://github.com/Lightning-AI/pytorch-lightning/issues/1665",
    "body": "## \ud83d\udc1b Bug\r\n1. When using `parser = Trainer.add_argparse_args(parser)`, it's supposed to put all Trainer's arguments in the argparse with default values. Though currently it doesn't add `default_root_dir` and you get the error:\r\n\r\n```\r\n'Namespace' object has no attribute 'default_root_dir'\r\n```\r\nIt does add `default_save_path` which is deprecated.\r\n\r\n\r\n### To Reproduce\r\n#### Code Sample\r\n```python\r\nimport argparse\r\nfrom pytorch_lightning import Trainer\r\n\r\nparser = argparse.ArgumentParser(description='demo')\r\nparser = Trainer.add_argparse_args(parser)\r\nargs = parser.parse_args()\r\n\r\nprint(args.default_root_dir)\r\n```\r\n\r\nA similar unit test could also be made, if not there already.\r\n\r\n### Environment\r\n\r\n```\r\n* CUDA:\r\n        - GPU:\r\n                - GeForce RTX 2080 Ti\r\n                - GeForce RTX 2080 Ti\r\n                - GeForce RTX 2080 Ti\r\n                - GeForce RTX 2080 Ti\r\n                - GeForce RTX 2080 Ti\r\n                - GeForce RTX 2080 Ti\r\n                - GeForce RTX 2080 Ti\r\n                - GeForce RTX 2080 Ti\r\n        - available:         True\r\n        - version:           10.1\r\n* Packages:\r\n        - numpy:             1.18.1\r\n        - pyTorch_debug:     False\r\n        - pyTorch_version:   1.4.0\r\n        - pytorch-lightning: 0.7.3\r\n        - tensorboard:       2.2.0\r\n        - tqdm:              4.45.0\r\n* System:\r\n        - OS:                Linux\r\n        - architecture:\r\n                - 64bit\r\n                -\r\n        - processor:         x86_64\r\n        - python:            3.6.7\r\n        - version:           #75-Ubuntu SMP Tue Oct 1 05:24:09 UTC 2019\r\n```",
    "comments_url": "https://api.github.com/repos/Lightning-AI/pytorch-lightning/issues/1665/comments",
    "author": "tshrjn",
    "comments": [
      {
        "user": "olineumann",
        "created_at": "2020-04-30T11:46:49Z",
        "body": "Did you tried to update to 0.7.5. Maybe it is already solved."
      },
      {
        "user": "tshrjn",
        "created_at": "2020-05-04T07:15:14Z",
        "body": "Hi @olineumann, yes updating did resolve this. However, the `profiler` arg is now broken. The same demo code above with `profiler` gives the same error `'Namespace' object has no attribute 'profiler'`."
      },
      {
        "user": "olineumann",
        "created_at": "2020-05-04T08:57:26Z",
        "body": "What do you mean 'with profiler'? Do you mean Trainer(..., profiler=True)? But you don't initialize a Trainer.\r\n\r\nRunning your code or this below didn't crash with any error on my machine.\r\n```python\r\nimport argparse\r\nfrom pytorch_lightning import Trainer\r\n\r\nparser = argparse.ArgumentParser(description='demo')\r\ntrainer = Trainer(profiler=True)\r\nparser = trainer.add_argparse_args(parser)\r\nargs = parser.parse_args()\r\n\r\nprint(args.default_root_dir)\r\n```\r\n\r\nMaybe you could post the complete error message from the python interpreter. "
      },
      {
        "user": "tshrjn",
        "created_at": "2020-05-06T22:12:44Z",
        "body": "`add_argparse_args ` is supposed to add the args from trainer to parser. But it doesn't do that for a few args. In this case `profiler`, previously the issue was for `default_root_dir`.\r\n\r\nTry the following code by running:\r\n`python demo.py --profiler True` or  other possibly accepted way `python demo.py --profiler`  with the following code:\r\n\r\n```python\r\nimport argparse\r\nfrom pytorch_lightning import Trainer\r\n\r\ntrainer = Trainer()\r\nparser = argparse.ArgumentParser(description='demo')\r\nparser = trainer.add_argparse_args(parser)\r\nargs = parser.parse_args()\r\n\r\nprint(args.profiler)\r\n\r\n```\r\n\r\n"
      },
      {
        "user": "olineumann",
        "created_at": "2020-05-12T10:43:03Z",
        "body": "I just created a PR. After looking at the code I found out that add_argparse_args is checking the argument types and is only adding attributes of type str, float, int or bool. The profiler attribute could be of type bool so it should be a bug.\r\n\r\nI saw that get_init_arguments_and_types() is returning profiler as argument but only of type BaseProfiler. After updating typing annotation of profiler argument it worked. Should be available in the next version.\r\n\r\nSee PR #1794 "
      },
      {
        "user": "tshrjn",
        "created_at": "2020-05-12T21:06:28Z",
        "body": "A similar issue is with the pickling of the profiler when it's a `Profile` object & the trainer tries to save the `hparams`.\r\n\r\n```python\r\nTypeError: can't pickle Profile objects\r\n```\r\n\r\n\r\nExample code:\r\n\r\n```python\r\nimport argparse\r\nfrom pytorch_lightning import Trainer\r\nfrom pytorch_lightning import profiler\r\nfrom pl_bolts.models.gans import BasicGAN\r\n\r\ntrainer = Trainer()\r\nparser = argparse.ArgumentParser(description='demo')\r\nparser = trainer.add_argparse_args(parser)\r\nargs = parser.parse_args()\r\nmodel = BasicGAN()\r\n\r\ntrainer = Trainer.from_argparse_args(\r\n        args, profiler=profiler.AdvancedProfiler())\r\ntrainer.fit(model)\r\n\r\n```\r\n"
      },
      {
        "user": "olineumann",
        "created_at": "2020-05-13T08:02:45Z",
        "body": "Can't reproduce your issue with pl version 0.7.6rc1. On my machine your code runs and saves checkpoints without crashing. Also this wouldn't belong to the topic of this issue imo. This would be a bug in the saving routine. "
      }
    ]
  },
  {
    "number": 1221,
    "title": "Colab weird behaviour and error when passing values from collate_fn to validation_step",
    "created_at": "2020-03-24T08:37:03Z",
    "closed_at": "2020-04-04T14:33:24Z",
    "labels": [
      "bug",
      "help wanted"
    ],
    "url": "https://github.com/Lightning-AI/pytorch-lightning/issues/1221",
    "body": "The same code that runs perfectly on my local machine (MacOS with Python3.7 and tested on an Ubuntu docker 18.04 with Python3.6.9) fails to run on colab.\r\n\r\nIt performs weirdly, calling the Dataset init() multiple times. However, it fails when the collate function that (correctly) returns (printed out the results) the following:\r\n```\r\nreturn x_tensor, x_lengths, y_tensor\r\n```\r\nget passed in the sanity check right at start in the ``validation_step``:\r\n```\r\ndef validation_step(self, batch: tuple, batch_nb: int, *args, **kwargs) -> dict:\r\n        x_tensor, x_lengths, y_tensor = batch <-- here it fails\r\n        .. forward(x_tensor,x _lengths) .. etc.\r\n```\r\nwith the error:\r\n```\r\nline 234, in validation_step\r\n    x_tensor, x_lengths, y_tensor = batch\r\nValueError: too many values to unpack (expected 3)\r\n```\r\nit actually just return the first value (x_tensor). I tried packing them in a dict from the collate function, but in the validation step ``batch`` comes to me just as the first key (as string!) from the dict created in collate_fn.\r\n\r\nThe environment is the same except the Python version (latest torch and lightning versions) across local runtime, docker ubuntu and colab. To ensure the same code is running on all machines, I'm doing just git clone, pip3 install -r requirements and python3 train.py. Am I missing something with Colab that's just not working? I can provide full code if needed.\r\n",
    "comments_url": "https://api.github.com/repos/Lightning-AI/pytorch-lightning/issues/1221/comments",
    "author": "dumitrescustefan",
    "comments": [
      {
        "user": "williamFalcon",
        "created_at": "2020-04-04T12:46:55Z",
        "body": "Try running master?"
      },
      {
        "user": "dumitrescustefan",
        "created_at": "2020-04-04T14:33:24Z",
        "body": "@williamFalcon \r\n\r\nConfirm that running on colab with version ``pytorch-lightning==0.7.2.dev0`` (from master directly) fixes the problem above. \r\n\r\nThanks a lot!"
      }
    ]
  },
  {
    "number": 1155,
    "title": "No validation checks when overfit_pct is set",
    "created_at": "2020-03-15T13:43:17Z",
    "closed_at": "2020-05-03T23:15:57Z",
    "labels": [
      "bug",
      "help wanted"
    ],
    "url": "https://github.com/Lightning-AI/pytorch-lightning/issues/1155",
    "body": "## \ud83d\udc1b Bug\r\n\r\nWhen setting the `overfit_pct` to any value between 0 and 1 (exclusive) in trainer, the validation checks are disabled.\r\n\r\n### To Reproduce\r\n\r\nI have worked on a minimal example to reproduce the bug:\r\n\r\n```python3\r\nimport pytorch_lightning as pl\r\nimport torch\r\n\r\nclass Dataset(torch.utils.data.Dataset):\r\n\r\n    def __init__(self, input_dim, output_dim):\r\n        super(Dataset, self).__init__()\r\n        self.input_dim = input_dim\r\n        self.output_dim = output_dim\r\n\r\n    def __getitem__(self, idx):\r\n        X = torch.rand(1, self.input_dim)\r\n        y = torch.randint(0, self.output_dim, (1,))\r\n        return X, y\r\n\r\n    def __len__(self):\r\n        return 1000\r\n\r\nclass Model(pl.LightningModule):\r\n\r\n    def __init__(self, input_dim, output_dim):\r\n        super(Model, self).__init__()\r\n        self.layer = torch.nn.Linear(input_dim, output_dim)\r\n        self.dataset = Dataset(input_dim, output_dim)\r\n\r\n    def forward(self, x, y):\r\n        yhat = torch.softmax(self.layer(x), -1)\r\n        return F.nll_loss(logits, y)\r\n\r\n    def train_dataloader(self):\r\n        return torch.utils.data.DataLoader(self.dataset, batch_size=64)\r\n\r\n    def configure_optimizers(self):\r\n        return torch.optim.Adam(self.parameters(), lr=1e-3)\r\n\r\n    def training_step(self, batch, batch_idx):\r\n        loss = self.forward(*batch)\r\n        return {'loss': loss, 'log': {'loss': loss}}\r\n\r\n    def validation_step(self, batch, batch_idx):\r\n        loss = self.forward(*batch)\r\n        return {'val_loss': loss, 'log': {'val_loss': loss}}\r\n\r\n\r\nif __name__ == '__main__':\r\n    model = Model(100, 10)\r\n    trainer = pl.Trainer(overfit_pct=.01)\r\n    trainer.fit(model)\r\n```\r\n\r\n### Expected behavior\r\n\r\nValidation checks occur normally\r\n\r\n### Environment\r\n```bash\r\nPyTorch version: 1.4.0\r\nIs debug build: No\r\nCUDA used to build PyTorch: 10.1\r\n\r\nOS: Manjaro Linux\r\nGCC version: (GCC) 8.3.0\r\nCMake version: Could not collect\r\n\r\nPython version: 3.7\r\nIs CUDA available: No\r\nCUDA runtime version: 10.2.89\r\nGPU models and configuration: Could not collect\r\nNvidia driver version: Could not collect\r\ncuDNN version: /usr/lib/libcudnn.so.7.6.5\r\n\r\nVersions of relevant libraries:\r\n[pip] numpy==1.18.1\r\n[pip] pytorch-lightning==0.7.1\r\n[pip] torch==1.4.0\r\n[pip] torchvision==0.5.0\r\n[conda] mkl                       2020.0                      166  \r\n[conda] pytorch                   1.4.0           py3.7_cuda10.1.243_cudnn7.6.3_0    pytorch\r\n[conda] pytorch-lightning         0.7.1                    pypi_0    pypi\r\n[conda] torchvision               0.5.0                py37_cu101    pytorch\r\n```\r\n",
    "comments_url": "https://api.github.com/repos/Lightning-AI/pytorch-lightning/issues/1155/comments",
    "author": "qmeeus",
    "comments": [
      {
        "user": "awaelchli",
        "created_at": "2020-03-21T04:01:07Z",
        "body": "~~Yes there is a bug here~~, but I had to fix @qmeeus's code sample to make it visible. \r\nThe sanity validation checks run, but the validation at the end of the epoch doesn't.\r\nWhen setting `overfit_pct=1`, validation checks work as expected.\r\nHere is the fixed minimal code sample:\r\n```\r\nimport pytorch_lightning as pl\r\nimport torch\r\nimport torch.nn.functional as F\r\n\r\n\r\nclass Dataset(torch.utils.data.Dataset):\r\n\r\n    def __init__(self, input_dim, output_dim):\r\n        super(Dataset, self).__init__()\r\n        self.input_dim = input_dim\r\n        self.output_dim = output_dim\r\n\r\n    def __getitem__(self, idx):\r\n        X = torch.rand(self.input_dim)\r\n        y = torch.randint(0, self.output_dim, (1,))\r\n        return X, y\r\n\r\n    def __len__(self):\r\n        return 1000\r\n\r\n\r\nclass Model(pl.LightningModule):\r\n\r\n    def __init__(self, input_dim, output_dim):\r\n        super(Model, self).__init__()\r\n        self.layer = torch.nn.Linear(input_dim, output_dim)\r\n        self.dataset = Dataset(input_dim, output_dim)\r\n\r\n    def forward(self, x, y):\r\n        logits = torch.softmax(self.layer(x), -1)\r\n        return F.nll_loss(logits, y.flatten(0))\r\n\r\n    def train_dataloader(self):\r\n        return torch.utils.data.DataLoader(self.dataset, batch_size=64)\r\n\r\n    def val_dataloader(self):\r\n        return torch.utils.data.DataLoader(self.dataset, batch_size=64)\r\n\r\n    def configure_optimizers(self):\r\n        return torch.optim.Adam(self.parameters(), lr=1e-3)\r\n\r\n    def training_step(self, batch, batch_idx):\r\n        loss = self.forward(*batch)\r\n        return {'loss': loss, 'log': {'loss': loss}}\r\n\r\n    def validation_step(self, batch, batch_idx):\r\n        loss = self.forward(*batch)\r\n        print('see that validation runs only in sanity check')\r\n        return {'val_loss': loss, 'log': {'val_loss': loss}}\r\n\r\n    def validation_end(self, outputs):\r\n        loss = torch.stack([output['val_loss'] for output in outputs]).mean()\r\n        return {'val_loss': loss, 'log': {'val_loss': loss}}\r\n\r\n\r\nif __name__ == '__main__':\r\n    model = Model(100, 10)\r\n    trainer = pl.Trainer(overfit_pct=0.1, max_epochs=10)\r\n    trainer.fit(model)\r\n```\r\nFor the record, @qmeeus your code had these issues:\r\n- No val_dataloader defined\r\n- Wrong shapes returned in dataloader\r\n- Wrong shape for nll_loss labels"
      },
      {
        "user": "awaelchli",
        "created_at": "2020-03-21T04:14:27Z",
        "body": "Actually `overfit_pct `argument is not documented in the Trainer class. We should fix that and say that setting `overfit_pct `is the same as setting `train_percent_check`, `val_percent_check `and `test_percent_check`."
      },
      {
        "user": "awaelchli",
        "created_at": "2020-03-21T06:26:11Z",
        "body": "**False alarm!** Turns out it is simply because you chose a too small value for `overfit_pct`. \r\nYour dataset has size 1000, and dataloader has batch_size 64. \r\n1000 / 64 ~= 15 batches\r\nWhen you choose overfit_pct = .01, then that gives 15 * 0.01 < 1 batch. \r\n\r\n@qmeeus Please let me know if it isn't clear. I think the behaviour of `overfit_pct `is correct."
      },
      {
        "user": "awaelchli",
        "created_at": "2020-03-21T06:30:40Z",
        "body": "@williamFalcon Should we make it so that `overfit_pct `does not round to 0 batches?\r\n"
      }
    ]
  },
  {
    "number": 167,
    "title": "Adding Support for Torchtext iterators",
    "created_at": "2019-08-26T01:35:55Z",
    "closed_at": "2019-08-26T23:04:12Z",
    "labels": [
      "feature",
      "help wanted"
    ],
    "url": "https://github.com/Lightning-AI/pytorch-lightning/issues/167",
    "body": "I recently came across pytorch lightning and i am absolutely loving it  until now. Not having to worry about my training cycle and making it super efficient and fast. It has increased the amount of experiments i can pull off and good results have come out from it. \r\n\r\nRight now, i have been using torchtext with its dataset classes and its custom iterators. But when i tried to use the iterators option from torchtext such as Iterator or BucketIterator instead of Dataloader i get the following error:\r\n\r\n``` TypeError: embedding(): argument 'indices' (position 2) must be Tensor, not NoneType```\r\n\r\nThe problem is that instead of getting a Tensor im getting a NoneType. And i dont know why that is.\r\n\r\nNow, i tried to load the Dataset classes from torchtext with the DataLoader itself and i find the next error:\r\n\r\n```TypeError: default_collate: batch must contain tensors, numpy arrays, numbers, dicts or lists; found <class 'torchtext.data.example.Example'> ```\r\n\r\nSo, ideally i would really like to have the torchtext iterators supported with pytorch-lighting. But i dont know if there is a way around this issue that i havent found, still using the torchtext Dataset classes. Could anybody help me out with this?\r\n\r\n",
    "comments_url": "https://api.github.com/repos/Lightning-AI/pytorch-lightning/issues/167/comments",
    "author": "dehoyosb",
    "comments": [
      {
        "user": "williamFalcon",
        "created_at": "2019-08-26T01:39:01Z",
        "body": "thanks for bringing this up. \r\nCan you try with the latest version? i think we fixed this. \r\n\r\notherwise, can you post a code snippet that generates this error so we can add a patch?\r\n"
      }
    ]
  }
]