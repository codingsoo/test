[
  {
    "number": 12925,
    "title": "Compiled app doesn't start",
    "created_at": "2021-03-18T01:44:48Z",
    "closed_at": "2021-03-22T16:29:45Z",
    "labels": [
      "question",
      "webpack-5"
    ],
    "url": "https://github.com/webpack/webpack/issues/12925",
    "body": "<!-- Please don't delete this template because we'll close your issue -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n\r\n# Bug report\r\n\r\nI've been trying to understand this all day. If I specify `runtimeChunk`, and (maybe?) it gets minified my app doesn't start. If I comment out `runtimeChunk` my app starts. The sources all look okay and are loading, but the entry point doesn't exec.\r\n\r\n**What is the current behavior?**\r\nBlank screen after build.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce.**\r\n\r\nI've been trying to isolate this but haven't yet. I'm sorry. I just wanted to get this out there hoping someone else has ideas.\r\n\r\n**What is the expected behavior?**\r\nthe entry point should execute.\r\n\r\n**Other relevant information:**\r\nwebpack version:  5.26.3\r\nNode.js version: 15.12.0\r\nOperating System: linux\r\nAdditional tools:\r\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/12925/comments",
    "author": "jsg2021",
    "comments": [
      {
        "user": "alexander-akait",
        "created_at": "2021-03-18T12:15:27Z",
        "body": "Sorry, information is not enough to help you, maybe you forget to add something to your HTML file"
      },
      {
        "user": "vadimka123",
        "created_at": "2021-03-18T12:49:22Z",
        "body": "I has same problem on rebuild on watch mode or build when not have previous build \r\nProblem started after upgrade to 5.26.0, in version 5.25.1 all working fine "
      },
      {
        "user": "alexander-akait",
        "created_at": "2021-03-18T12:50:26Z",
        "body": "@vadimka123 Maybe you can create example?"
      },
      {
        "user": "vadimkuragkovskiy",
        "created_at": "2021-03-18T13:14:17Z",
        "body": "hey Guys, \r\n\r\nI'm using MacOS and also have similar issue. My teammates don't have it on linux. \r\n\r\nSo we upgraded our webpack to the version `\"webpack\": \"5.26.3\"` and the initial build is ok but the rebuild is broken. \r\n\r\nHere is command \r\n```\r\nwebpack --progress --watch --mode development\r\n```\r\n\r\nwhen I apply some changes to the file, my webpack does rebuild automatically and I'm getting blank screen without any errors in console. \r\n\r\nHow I fixed this issue temporary. I reverted my webpack to the version \"webpack\": \"5.25.1\" and on this version everything works well. Perhaps 5.26.0 works also fine, I just didn't check that.\r\n\r\n\r\nwebpack config looks like\r\n```js\r\nmodule.exports = {\r\n\tmode: NODE_ENV,\r\n\tentry: ['./app/App.jsx'],\r\n\toutput: {\r\n\t\tpath: buildDir,\r\n\t\tfilename: DEBUG_ON ? '[name].[fullhash].js' : '[name].[contenthash].js',\r\n\t\tpublicPath: cdn_url + '/build/',\r\n\t},\r\n\twatchOptions: {\r\n\t\tignored: /node_modules/,\r\n\t\taggregateTimeout: 300,\r\n\t},\r\n\tplugins: plugins,\r\n\tdevtool: DEBUG_ON ? 'eval-source-map' : 'source-map',\r\n\tresolve: {\r\n\t\talias: {\r\n\t\t\tringlead_utils: path.resolve(__dirname, 'app/utils'),\r\n\t\t},\r\n\t\textensions: ['.js', '.jsx'],\r\n\t\tfallback: { url: false },\r\n\t},\r\n\toptimization: {\r\n\t\truntimeChunk: 'single',\r\n\t\tsplitChunks: {\r\n\t\t\tautomaticNameDelimiter: '.',\r\n\t\t\tchunks: 'all',\r\n\t\t\tmaxAsyncRequests: 10,\r\n\t\t\tmaxInitialRequests: 10,\r\n\t\t\tcacheGroups: {\r\n\t\t\t\tdefaultVendors: {\r\n\t\t\t\t\treuseExistingChunk: true,\r\n\t\t\t\t\tenforce: true,\r\n\t\t\t\t},\r\n\t\t\t\tmain: {\r\n\t\t\t\t\treuseExistingChunk: true,\r\n\t\t\t\t\ttest: /[\\\\/]app[\\\\/]/,\r\n\t\t\t\t},\r\n\t\t\t\tdefault: {\r\n\t\t\t\t\tminChunks: 1,\r\n\t\t\t\t},\r\n\t\t\t},\r\n\t\t},\r\n\t},\r\n\tmodule: {\r\n\t\trules: [\r\n\t\t\t{\r\n\t\t\t\ttest: /\\.jsx?$/,\r\n\t\t\t\texclude: /(node_modules|bower_components)/,\r\n\t\t\t\tuse: {\r\n\t\t\t\t\tloader: 'babel-loader',\r\n\t\t\t\t\toptions: {\r\n\t\t\t\t\t\tpresets: [\r\n\t\t\t\t\t\t\t['@babel/env', { targets: '> 0.25%, not dead' }],\r\n\t\t\t\t\t\t\t[\r\n\t\t\t\t\t\t\t\t'@babel/preset-react',\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\truntime: 'automatic',\r\n\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t],\r\n\t\t\t\t\t\t],\r\n\t\t\t\t\t\tplugins: [\r\n\t\t\t\t\t\t\t['@babel/plugin-proposal-decorators', { legacy: true }],\r\n\t\t\t\t\t\t\t'@babel/plugin-proposal-class-properties',\r\n\t\t\t\t\t\t\t'@babel/plugin-syntax-dynamic-import',\r\n\t\t\t\t\t\t\t[\r\n\t\t\t\t\t\t\t\t'@babel/plugin-transform-classes',\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tloose: true,\r\n\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t],\r\n\t\t\t\t\t\t\t'@babel/plugin-transform-computed-properties',\r\n\t\t\t\t\t\t\t'@babel/plugin-transform-shorthand-properties',\r\n\t\t\t\t\t\t],\r\n\t\t\t\t\t},\r\n\t\t\t\t},\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\ttest: /\\.css$/i,\r\n\t\t\t\texclude: [path.resolve(__dirname, 'node_modules/react-phone-input-2/lib/style.css')],\r\n\t\t\t\tuse: [DEBUG_ON ? 'style-loader' : MiniCssExtractPlugin.loader, 'css-loader'],\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\ttest: /\\.css$/i,\r\n\t\t\t\tinclude: [path.resolve(__dirname, 'node_modules/react-phone-input-2/lib/style.css')],\r\n\t\t\t\tuse: ['style-loader', 'css-loader'],\r\n\t\t\t},\r\n\t\t],\r\n\t},\r\n};\r\n```\r\n\r\npackage.json config (removed couple private things):\r\n\r\n```js\r\n\r\n{\r\n\t\"name\": \"\",\r\n\t\"description\": \"\",\r\n\t\"version\": \"2.0.0\",\r\n\t\"scripts\": {\r\n\t\t\"build\": \"NODE_ENV=production webpack --progress --mode production\",\r\n\t\t\"watch\": \"webpack --progress --watch --mode development\",\r\n\t\t\"watch-analyze\": \"webpack --progress --watch --display-modules\",\r\n\t\t\"analyze\": \"webpack --progress --json --display-modules | webpack-bundle-size-analyzer\",\r\n\t\t\"build-win\": \"NODE_ENV=production webpack --progress --mode production\",\r\n\t\t\"watch-win\": \"webpack --progress --watch\",\r\n\t\t\"test\": \"webpack\",\r\n\t\t\"eslint\": \"node_modules/.bin/eslint --ext .jsx,.js,.json --fix --ignore-pattern='!.eslintrc.js' --max-warnings=0 ./app\"\r\n\t},\r\n\t\"license\": \"ISC\",\r\n\t\"dependencies\": {\r\n\t\t\"@clientio/rappid\": \"file:vendor/rappid.tgz\",\r\n\t\t\"@date-io/dayjs\": \"1.3.13\",\r\n\t\t\"@material-ui/core\": \"4.11.3\",\r\n\t\t\"@material-ui/icons\": \"4.11.2\",\r\n\t\t\"@material-ui/pickers\": \"3.3.10\",\r\n\t\t\"axios\": \"0.21.1\",\r\n\t\t\"backbone\": \"1.4.0\",\r\n\t\t\"clsx\": \"1.1.1\",\r\n\t\t\"connected-react-router\": \"6.8.0\",\r\n\t\t\"dayjs\": \"1.10.4\",\r\n\t\t\"highcharts\": \"9.0.1\",\r\n\t\t\"history\": \"4.10.1\",\r\n\t\t\"jquery\": \"3.6.0\",\r\n\t\t\"js-cookie\": \"2.2.1\",\r\n\t\t\"lodash\": \"4.17.21\",\r\n\t\t\"notistack\": \"1.0.5\",\r\n\t\t\"nprogress\": \"0.2.0\",\r\n\t\t\"object-hash\": \"2.1.1\",\r\n\t\t\"prop-types\": \"15.7.2\",\r\n\t\t\"react\": \"17.0.1\",\r\n\t\t\"react-dnd\": \"14.0.1\",\r\n\t\t\"react-dnd-html5-backend\": \"14.0.0\",\r\n\t\t\"react-dom\": \"17.0.1\",\r\n\t\t\"react-dropzone\": \"11.3.1\",\r\n\t\t\"react-phone-input-2\": \"2.13.9\",\r\n\t\t\"react-redux\": \"7.2.2\",\r\n\t\t\"react-router\": \"5.2.0\",\r\n\t\t\"react-router-dom\": \"5.2.0\",\r\n\t\t\"react-select\": \"[custom private repo was here]\",\r\n\t\t\"react-window\": \"1.8.6\",\r\n\t\t\"redux\": \"4.0.5\",\r\n\t\t\"redux-logger\": \"3.0.6\",\r\n\t\t\"redux-thunk\": \"2.3.0\",\r\n\t\t\"reselect\": \"4.0.0\",\r\n\t\t\"socket.io-client\": \"4.0.0\"\r\n\t},\r\n\t\"devDependencies\": {\r\n\t\t\"@babel/core\": \"7.13.10\",\r\n\t\t\"@babel/eslint-parser\": \"7.13.10\",\r\n\t\t\"@babel/parser\": \"7.13.11\",\r\n\t\t\"@babel/plugin-proposal-class-properties\": \"7.13.0\",\r\n\t\t\"@babel/plugin-proposal-decorators\": \"7.13.5\",\r\n\t\t\"@babel/plugin-syntax-dynamic-import\": \"7.8.3\",\r\n\t\t\"@babel/plugin-transform-classes\": \"7.13.0\",\r\n\t\t\"@babel/plugin-transform-computed-properties\": \"7.13.0\",\r\n\t\t\"@babel/plugin-transform-runtime\": \"7.13.10\",\r\n\t\t\"@babel/plugin-transform-shorthand-properties\": \"7.12.13\",\r\n\t\t\"@babel/preset-env\": \"7.13.10\",\r\n\t\t\"@babel/preset-react\": \"7.12.13\",\r\n\t\t\"@babel/runtime\": \"7.13.10\",\r\n\t\t\"babel-loader\": \"8.2.2\",\r\n\t\t\"css-loader\": \"5.1.3\",\r\n\t\t\"eslint\": \"7.22.0\",\r\n\t\t\"eslint-config-prettier\": \"8.1.0\",\r\n\t\t\"eslint-config-react-app\": \"6.0.0\",\r\n\t\t\"eslint-plugin-flowtype\": \"5.4.0\",\r\n\t\t\"eslint-plugin-import\": \"2.22.1\",\r\n\t\t\"eslint-plugin-json\": \"2.1.2\",\r\n\t\t\"eslint-plugin-jsx-a11y\": \"6.4.1\",\r\n\t\t\"eslint-plugin-prettier\": \"3.3.1\",\r\n\t\t\"eslint-plugin-react\": \"7.22.0\",\r\n\t\t\"eslint-plugin-react-hooks\": \"4.2.0\",\r\n\t\t\"eslint-plugin-simple-import-sort\": \"7.0.0\",\r\n\t\t\"eslint-plugin-sonarjs\": \"0.6.0\",\r\n\t\t\"html-webpack-plugin\": \"5.3.1\",\r\n\t\t\"husky\": \"4.3.8\",\r\n\t\t\"lint-staged\": \"10.5.4\",\r\n\t\t\"mini-css-extract-plugin\": \"1.3.9\",\r\n\t\t\"prettier\": \"2.2.1\",\r\n\t\t\"style-loader\": \"2.0.0\",\r\n\t\t\"webpack\": \"5.25.1\",\r\n\t\t\"webpack-bundle-tracker\": \"0.4.3\",\r\n\t\t\"webpack-cli\": \"4.5.0\"\r\n\t},\r\n\t\"lint-staged\": {\r\n\t\t\"*.{js,jsx,json}\": [\r\n\t\t\t\"node_modules/.bin/eslint --fix --ignore-pattern '!.eslintrc.js' --max-warnings=0\",\r\n\t\t\t\"prettier --write\"\r\n\t\t]\r\n\t},\r\n\t\"husky\": {\r\n\t\t\"hooks\": {\r\n\t\t\t\"pre-commit\": \"lint-staged\"\r\n\t\t}\r\n\t}\r\n}\r\n\r\n\r\n```\r\n"
      },
      {
        "user": "jsg2021",
        "created_at": "2021-03-18T14:35:41Z",
        "body": "> Sorry, information is not enough to help you, maybe you forget to add something to your HTML file\n\nYeah, i know. This is a project that's been fine for years. I'm still trying to figure out the minimum reproduction. \n\nI think it has something to do with mixing mode: development and runtimeChunk... but i'm not 100% there. \n\nI'll keep trying to find a min repro."
      },
      {
        "user": "vadimka123",
        "created_at": "2021-03-22T08:36:48Z",
        "body": "Working fine in version 5.27.1\r\nCan be closed"
      },
      {
        "user": "jsg2021",
        "created_at": "2021-03-22T16:29:44Z",
        "body": "This does appear to be fixed."
      }
    ]
  },
  {
    "number": 2907,
    "title": "can't support Object(es6)?",
    "created_at": "2016-08-23T04:58:53Z",
    "closed_at": "2016-08-23T06:14:47Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/webpack/webpack/issues/2907",
    "body": "I am use webpack2.1.0-beta.15,when run my code i get error:Object.entries() is not a function.\nbelow is babel config in webpack\n\n```\n{\n        test: /\\.js$/,\n        exclude: /(node_modules|backup)/,\n        loader: 'babel', // 'babel-loader' is also a legal name to reference\n        query: {\n          presets: ['es2015']\n        }\n      },\n```\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/2907/comments",
    "author": "keyiis",
    "comments": [
      {
        "user": "Jessidhia",
        "created_at": "2016-08-23T05:15:55Z",
        "body": "You need to `import 'babel-polyfill'` at the top of your entry point.\n"
      },
      {
        "user": "keyiis",
        "created_at": "2016-08-23T05:34:14Z",
        "body": "@Kovensky when added babel-polyfill,Object.entries() work well,but sequelizer can't work(No any error message),\nhas conflict between babel-polyfill and sequelizer? \n"
      },
      {
        "user": "keyiis",
        "created_at": "2016-08-23T06:02:04Z",
        "body": "i used core-js replace babel-polyfill,all work fine.\n"
      }
    ]
  },
  {
    "number": 2851,
    "title": "what's the difference of \"style!css!./style.css\" and \"!style!css!./style.css\"?",
    "created_at": "2016-08-09T02:06:46Z",
    "closed_at": "2016-08-10T01:31:36Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/webpack/webpack/issues/2851",
    "body": "as question,\ncan't understand the character \"!\",any one can explain it ?\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/2851/comments",
    "author": "zppro",
    "comments": [
      {
        "user": "Jessidhia",
        "created_at": "2016-08-09T08:37:18Z",
        "body": "If you set up your `loaders` correctly, you almost never need any `!` in any of your requires.\n\n`!` separates loaders. Note that, on the second string, you are passing the `./style.css` file to the `css` loader, then to `style` loader, then to the empty string loader, which will crash.\n"
      },
      {
        "user": "zppro",
        "created_at": "2016-08-10T01:31:15Z",
        "body": "> `./style.css file to the css loader, then to style loader, then to the empty string loader, which will crash.`\n> i test two of them ,they both run ok!\n> but make me see that `!` is separtator to the loader.\n"
      }
    ]
  },
  {
    "number": 2819,
    "title": "overwrite watch config from CLI",
    "created_at": "2016-07-29T20:42:41Z",
    "closed_at": "2016-08-01T08:19:42Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/webpack/webpack/issues/2819",
    "body": "I have a webpack.config.js with watch:true and I would like to overwrite that setting when I call \"webpack\" from the CLI in a certain environment. Is this possible? Like `webpack --watch=false` would be nice\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/2819/comments",
    "author": "flyon",
    "comments": [
      {
        "user": "rafde",
        "created_at": "2016-08-01T05:56:28Z",
        "body": "why does it need to be in your config? why not use `--watch` through a separate script?\n"
      },
      {
        "user": "flyon",
        "created_at": "2016-08-01T06:25:12Z",
        "body": "Because we already have three scripts for dev/staging/deployment and I now\nwant to create nonminified bundles for staging and deployment too, so I was\nhoping to re-use the dev script for that, but it has watch:true for local\ndevelopment. Its totally possible to create another script, was just\nlooking for other options\n"
      },
      {
        "user": "rafde",
        "created_at": "2016-08-01T07:40:27Z",
        "body": "You could provide your own argument that is read in your dev config like --no-watch and process.argv.indexOf(\"--no-watch\") >= 0 that's read from inside the config file\n"
      }
    ]
  },
  {
    "number": 2587,
    "title": "specified loader not loaded",
    "created_at": "2016-06-02T06:54:44Z",
    "closed_at": "2016-06-03T06:19:28Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/webpack/webpack/issues/2587",
    "body": "I specify `babel-loader` to handle files `/\\.jsx?$/`, but when load `xx.js`,  `babel-loader` do nothing.\n\nI means `xx.js` file (written in ES6) is saved to dest with original source. Then I inject `console.log` to `babel-loader`'s entry function, and find the `babel-loader` even not loaded.\n\nMy config:\n\n``` js\n  {\n        test: /\\.jsx?$/,\n        loader: 'babel',\n        include: [APP_PATH],\n        exclude: /(node_modules|bower_components)/,\n        query: {\n            presets: ['es2015', 'stage-0', 'react']\n        }\n    }\n```\n\nCompiled `xx.js`:\n\n``` js\nwebpackJsonp([1],[\n/* 0 */\n/***/ function(module, exports) {\n\n    import React from 'react';\n        ...\n        ...\n/***/ }\n]);\n```\n\nwebpack version:\n\n``` bash\n    \"babel-core\": \"^6.8.0\",\n    \"babel-loader\": \"^6.2.4\",\n    \"babel-preset-es2015\": \"^6.6.0\",\n    \"babel-preset-react\": \"^6.5.0\",\n    \"babel-preset-stage-0\": \"^6.5.0\",\n    \"webpack\": \"^1.13.0\"\n```\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/2587/comments",
    "author": "creeperyang",
    "comments": [
      {
        "user": "creeperyang",
        "created_at": "2016-06-02T08:50:48Z",
        "body": "And is there a way to know which loaders are used to handle one file really?\n\nWe specify loaders by `test`, and then do these loaders really handle the file when running?\n"
      },
      {
        "user": "creeperyang",
        "created_at": "2016-06-03T03:06:13Z",
        "body": "@bebraw I wrote a plugin to log out some info, maybe it will help to solve the problem.\n\n``` bash\n# compilation.plugin('normal-module-loader'...)   log format: console.log('nml', module.debugId, module.request)\n\n# default will run into success\nnml 1001 /MyProj/node_modules/html-webpack-plugin/lib/loader.js!/MyProj/front/viewer/index.html\nnml 1002 /MyProj/node_modules/react-dom/index.js\nnml 1003 /MyProj/node_modules/react/react.js\nnml 1004 /MyProj/node_modules/react-router/lib/index.js\nnml 1005 /MyProj/node_modules/babel-loader/index.js?{\"presets\":[\"/MyProj/node_modules/babel-preset-es2015/index.js\",\"/MyProj/node_modules/babel-preset-react/index.js\",\"/MyProj/node_modules/babel-preset-stage-0/index.js\"]}!/MyProj/front/viewer/app.js\nbabel-loader loaded------------------- # babel-loader loaded (inject console.log into babel-loader lib)\nnml 1006 /MyProj/node_modules/html-webpack-plugin/node_modules/lodash/lodash.js\nnml 1007 /MyProj/node_modules/react/lib/ReactDOM.js\n...\n\n# Then I move /MyProj/front/viewer --> /tmp/xxx/viewer\n# sad, babel-loader even not loaded\nnml 1001 /MyProj/node_modules/html-webpack-plugin/lib/loader.js!/private/tmp/xxx/viewer/index.html\nnml 1002 /private/tmp/xxx/viewer/app.js # why js file not processed by babel-loader?\nnml 1003 /MyProj/node_modules/react-dom/index.js\nnml 1004 /MyProj/node_modules/react/react.js\nnml 1005 /MyProj/node_modules/react-router/lib/index.js\nnml 1006 /MyProj/node_modules/react/lib/ReactDOM.js\nnml 1007 /MyProj/node_modules/html-webpack-plugin/node_modules/lodash/lodash.js\nnml 1008 /MyProj/node_modules/react/lib/React.js\n...\n```\n"
      },
      {
        "user": "bebraw",
        "created_at": "2016-06-03T04:58:10Z",
        "body": "It might be that move causing the issues. Try changing `include: [APP_PATH],` to form `include: [APP_PATH, TMP_PATH],` where `TMP_PATH` points to `/private/tmp/xxx/`.\n"
      },
      {
        "user": "creeperyang",
        "created_at": "2016-06-03T05:24:32Z",
        "body": "~~I tried but it does not work.~~\n\nIt makes sense.\n\nSeems I should write **`/private/tmp` rather than `/tmp`**. Um, maybe it's better to point out the problem about symbol link in document.\n\nThanks very much.\n"
      },
      {
        "user": "bebraw",
        "created_at": "2016-06-03T05:39:43Z",
        "body": "> Seems I should write /private/tmp rather than /tmp. Um, maybe it's better to point out the problem about symbol link in document.\n\nI don't know how it goes with symlinks. Did you get it to work?\n"
      },
      {
        "user": "creeperyang",
        "created_at": "2016-06-03T06:17:46Z",
        "body": "Yes, `babel-loader` is loaded to handle js files.\n\nI should specify `include: ['/private/tmp/xxx/viewer']` instead of  `include: ['/tmp/xxx/viewer']`.\n"
      }
    ]
  },
  {
    "number": 2557,
    "title": "webpack2 : remove comments with LoaderOptionsPlugin",
    "created_at": "2016-05-27T06:46:32Z",
    "closed_at": "2016-05-28T08:19:05Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/webpack/webpack/issues/2557",
    "body": "Hi there,\n\nBefore with the UglifyPlugin, I could pass { comments: false } as options, how to do the same with LoaderOptionsPlugin ?\n\nThanks\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/2557/comments",
    "author": "Makio64",
    "comments": [
      {
        "user": "sokra",
        "created_at": "2016-05-27T12:13:34Z",
        "body": "The UglifyPlugin is not affected by the change. LoaderOptionsPlugin is only relevant for loaders that has minimizer includes (i. e. css, html).\n"
      },
      {
        "user": "aegyed91",
        "created_at": "2016-07-24T12:31:04Z",
        "body": "@sokra is there anything else that tells the affected loaders to use the minimizer option?\n\nfor example `NODE_ENV=production` or the `-p` flag\n"
      }
    ]
  },
  {
    "number": 2530,
    "title": "Webpack watch doesn't output the new build",
    "created_at": "2016-05-21T11:27:37Z",
    "closed_at": "2016-05-24T04:49:14Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/webpack/webpack/issues/2530",
    "body": "Watch recognizes a change in the file and the command line shows it works on a new build, but the file on the file system never gets updated. As soon as I quit the watching process and start it again the correct output is produced. Also running it manually with the following command doesn't give any more insight nor output:\n\n```\nwebpack --progress --colors --watch --display-error-details --display-chunks --profile\n```\n## webpack.config.js\n\n``` js\nvar path = require('path');\nmodule.exports = {\n    devtool : 'source-map',\n    watch: true,\n    context: __dirname + '/App',\n    entry: './index',\n    output: {\n        path: path.join(__dirname, 'wwwroot/dist'),\n        filename: '[name]-bundle.js'\n    },\n    resolve: {\n        extensions: ['', '.js', '.ts', '.tsx', '.css'],        \n    },\n    module: {\n        loaders: [\n            { test: /\\.tsx?$/, loaders: ['ts-loader']},\n            { test: /\\.css$/, loader: 'style-loader'}\n        ]\n    },\n    plugins: []\n}\n```\n\nThe file in question is quite simple and I'm only changing text in the paragraph for testing:\n## index.tsx\n\n```\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\n\nclass Dashboard extends React.Component<{}, {}> {\n    render(){\n        return(\n            <p>Hello!</p>\n        );\n    }\n}\n\nReactDOM.render(<Dashboard />, document.getElementById('app'));\n```\n## Output\n\n```\nwebpack --progress --colors --watch --display-error-details --display-chunks --profile\n 10% 0/1 build modulests-loader: Using typescript@1.8.10 and c:\\Development\\Enterprise Net2 Manager\\Portal\\tsconfig.json\n1481ms build modules\n8ms seal\n8ms optimize\n10ms hashing\n20ms create chunk assets\n2ms additional chunk assets\n354ms optimize chunk assets\n 90% optimize assetsemiting\n450ms optimize assets\n41ms emit\nHash: 80d04fe372c49da68b8f\nVersion: webpack 1.13.0\nTime: 2404ms\n             Asset    Size  Chunks             Chunk Names\n    main-bundle.js  693 kB       0  [emitted]  main\nmain-bundle.js.map  810 kB       0  [emitted]  main\nchunk    {0} main-bundle.js, main-bundle.js.map (main) 655 kB [rendered]\n     + 168 hidden modules\n204ms build modules\n3ms seal\n10ms optimize\n4ms hashing\n9ms create chunk assets\n2ms additional chunk assets\n382ms optimize chunk assets\n 90% optimize assetsemiting\n372ms optimize assets\n39ms emit\nHash: 93b94d46db379ef92759\nVersion: webpack 1.13.0\nTime: 1028ms\n             Asset    Size  Chunks             Chunk Names\n    main-bundle.js  693 kB       0  [emitted]  main\nmain-bundle.js.map  810 kB       0  [emitted]  main\nchunk    {0} main-bundle.js, main-bundle.js.map (main) 655 kB [rendered]\n     + 168 hidden modules\n```\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/2530/comments",
    "author": "janpieterz",
    "comments": [
      {
        "user": "sokra",
        "created_at": "2016-05-22T19:18:00Z",
        "body": "Does this only apply to typescript files or does the same happen with normal js files?\n"
      },
      {
        "user": "janpieterz",
        "created_at": "2016-05-23T04:17:07Z",
        "body": "I tried, same behavior. Then I removed the '/App' from the context and specified the entry with /App and it started working (both JS and TS(x)).\n\nSince the output did pick up the change but never the file, should this be a bug? Below my (now working) config:\n\n``` js\nvar path = require('path');\nmodule.exports = {\n    devtool : 'source-map',\n    watch: true,\n    context: __dirname,\n    entry: './App/index',\n    output: {\n        path: path.join(__dirname, 'wwwroot/dist'),\n        filename: '[name]-bundle.js'\n    },\n    resolve: {\n        extensions: ['', '.js', '.ts', '.tsx', '.css'],        \n    },\n    module: {\n        loaders: [\n            { test: /\\.tsx?$/, loaders: ['ts-loader']},\n            { test: /\\.css$/, loader: 'style-loader'}\n        ]\n    },\n    plugins: []\n}\n```\n"
      },
      {
        "user": "sokra",
        "created_at": "2016-05-23T16:46:02Z",
        "body": "Just spotted that you are using windows. This means `__dirname + \"/App\"` is an invalid path as windows uses `\\` as separator. Better use `path.resolve(__dirname, \"App\")`.\n"
      }
    ]
  },
  {
    "number": 2513,
    "title": "webpack: how to ordering dependencies between entries",
    "created_at": "2016-05-18T18:16:38Z",
    "closed_at": "2016-05-26T01:26:39Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/webpack/webpack/issues/2513",
    "body": "in my webpack config file I have two multy entries:\n\n```\nmodule.exports = {\n      entry:{\n             lib:[\"./scripts/file1.js\",\"./scripts/fil2.ts\"],\n             app:[\"./scripts/login.js\",\"./public/HSplitLayout.js\"]\n      },\n      output: {\n        path: 'builds',\n        filename: '[name].js',\n        publicPath: 'builds/',\n        libraryTarget: \"var\"\n    }\n}\n```\n\nI want to ensure that the lib.js file is completely loaded before app.js is loaded.\n\nThank you for your help\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/2513/comments",
    "author": "Trispa",
    "comments": [
      {
        "user": "megakoresh",
        "created_at": "2016-05-25T09:38:11Z",
        "body": "Just put `<script src=\"lib.js\"/>` before `<script src=\"app.js\" />` in your page...\nBrowser loads scripts in order synchronously. \nIt is more complicated when you bundle multiple entries in one file, I noticed it sometimes does mangle the order. The best solution in this case is to just have your main application as an entry, and from there just `require` or `import` your library.\n"
      }
    ]
  },
  {
    "number": 2416,
    "title": "\"ERROR in Entry module not found\" for module that exists",
    "created_at": "2016-04-29T21:01:16Z",
    "closed_at": "2016-04-30T22:27:54Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/webpack/webpack/issues/2416",
    "body": "Bash log:\n\n``` bash\n~/code/blockai/merkletree$ npm run gh-pages:build\n\n> merkletree@1.4.0 gh-pages:build /Users/olalonde/code/blockai/merkletree\n> cd demo && rm -rf dist && webpack\n\nHash: 396f0bfb9d565b6f60f0\nVersion: webpack 1.13.0\nTime: 25ms\n\nERROR in Entry module not found: Error: Cannot resolve module 'app.js' in /Users/olalonde/code/blockai/merkletree/demo/src\n~/code/blockai/merkletree$ ls /Users/olalonde/code/blockai/merkletree/demo/src\napp.js\n~/code/blockai/merkletree$ cat demo/webpack.config.js\nmodule.exports = {\n  context: `${__dirname}/src`,\n  entry: 'app.js',\n  output: {\n    filename: 'bundle.js',\n    path: `${__dirname}/dist`,\n  },\n  module: {\n    loaders: [\n      {\n        test: /\\.js$/,\n        exclude: /node_modules/,\n        loader: 'babel',\n        query: {\n          presets: ['react', 'es2015'],\n        },\n      },\n    ],\n  },\n}\n~/code/blockai/merkletree$ node --version\nv6.0.0\n```\n\nThe module exists on the filesystem, etc. but webpack says it can't resolve the module. Here's the content of `app.js`:\n\n``` javascript\nimport ReactDOM from 'react-dom'\nimport React from 'react'\n\nconst App = () => (\n  <p>hello world!</p>\n)\n\nReactDOM.render(\n  <App />,\n  document.getElementById('app')\n)\n```\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/2416/comments",
    "author": "olalonde",
    "comments": [
      {
        "user": "olalonde",
        "created_at": "2016-04-29T21:05:58Z",
        "body": "Hmm, replacing\n\n``` javascript\n  context: `${__dirname}/src`,\n  entry: 'app.js',\n```\n\nwith \n\n``` javascript\n  // context: `${__dirname}/src/`,\n  entry: `${__dirname}/src/app.js`,\n```\n\nfixed the error. Maybe I'm misunderstanding the meaning of the `context` option?\n"
      },
      {
        "user": "sokra",
        "created_at": "2016-04-30T22:23:38Z",
        "body": "``` js\n  context: `${__dirname}/src`,\n  entry: './app.js',\n```\n\nentry is a module request, `app.js` will look for a module named `app.js` in your node_modules\n"
      }
    ]
  },
  {
    "number": 2346,
    "title": "Under devServer key in webpack.config.js, I set hot: true option, but it dosen't work ",
    "created_at": "2016-04-16T08:22:17Z",
    "closed_at": "2016-04-17T07:39:37Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/webpack/webpack/issues/2346",
    "body": "CLI: webpack-dev-server --hot works, \nbut\n\n``` js\ndevServer:{\n    hot: true\n}\n```\n\nit throws Uncaught Error: [HMR] Hot Module Replacement is disabled.\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/2346/comments",
    "author": "Authorlove",
    "comments": [
      {
        "user": "bebraw",
        "created_at": "2016-04-16T08:30:25Z",
        "body": "If you use `hot: true` that way, I think you need to set\n\n``` javascript\nplugins: [\n  new webpack.HotModuleReplacementPlugin()\n]\n```\n\nA little confusing, yeah.\n"
      }
    ]
  },
  {
    "number": 2295,
    "title": "[Question]: when will `module` be undefined in UMD webpackBootstrap.",
    "created_at": "2016-04-07T22:45:26Z",
    "closed_at": "2016-04-08T15:06:46Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/webpack/webpack/issues/2295",
    "body": "In webpack UMD wrap, the 2nd **else** is detecting the `exports` ONLY here,  when would the `module` be empty and we have chance to attach it to the `exports`?  I saw when we call with any module, we always passing it as `modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);`\n\nDoes it related with nodejs `module.exports=exports={};`?\n\n``` js\n(function webpackUniversalModuleDefinition(root, factory) {\n    if(typeof exports === 'object' && typeof module === 'object')\n        module.exports = factory();\n    else if(typeof define === 'function' && define.amd)\n        define([], factory);\n    else {\n        var a = factory();\n        for(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n    }\n})(this, function() {\n});\n```\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/2295/comments",
    "author": "pwang2",
    "comments": [
      {
        "user": "sokra",
        "created_at": "2016-04-08T14:39:59Z",
        "body": "CommonJs 1.0 only specifies the `exports` object. node.js added `module` (CommonJs 1.1.1).\n"
      }
    ]
  },
  {
    "number": 2247,
    "title": "using commonChunk",
    "created_at": "2016-03-29T07:11:39Z",
    "closed_at": "2016-04-05T14:00:17Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/webpack/webpack/issues/2247",
    "body": "It says unexpect token,but I don't know how to solve it,thanks for reply.\n\n```\nvar webpack = require('webpack');\n\nmodule.exports = {\n  devtool: 'inline-source-map',\n  entry: {\n    app:[\n    'webpack-hot-middleware/client',\n    './client/client.js'\n  ],\n    \"vendor\":['react','react-dom']\n},\n\nresolve: {\n        alias: {\n            'react':require('react'),\n            'react-dom':require('react-dom')\n\n        }\n    },\n  output: {\n    path: require(\"path\").resolve(\"./dist\"),\n    filename: 'bundle.js',\n    publicPath: '/'\n  },\n  plugins: [\n    new webpack.optimize.OccurrenceOrderPlugin(),\n    new webpack.HotModuleReplacementPlugin(),\n    new webpack.NoErrorsPlugin(),\n    new webpack.optimize.CommonsChunkPlugin(\"vendor\", \"vendor.js\",Infinity)\n  ],\n  module: {\n    loaders: [\n      {\n        test: /\\.js$/,\n        loader: 'react-hot',\n        loader:'babel-loader',\n        exclude: /node_modules/,\n        query: {\n          presets: ['react', 'es2015', 'react-hmre']\n        }\n      }\n    ]\n  }\n}\n```\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/2247/comments",
    "author": "EasonWang01",
    "comments": [
      {
        "user": "sokra",
        "created_at": "2016-03-30T17:36:31Z",
        "body": "`'react':require('react'),` -> `'react':require.resolve('react'),`\n"
      },
      {
        "user": "EasonWang01",
        "created_at": "2016-04-05T14:00:14Z",
        "body": "Thanks for reply!  the config below works good\n\n```\nvar webpack = require('webpack');\n\nmodule.exports = {\n  devtool: 'inline-source-map',\n  entry: {\n    app:[\n    'webpack-hot-middleware/client',\n    './client/client.js'\n  ],\n  vendor:['react','react-dom']\n},\n\n  output: {\n    path: require(\"path\").resolve(\"./dist\"),\n    filename: 'bundle.js',\n    publicPath: '/'\n  },\n  plugins: [\n    new webpack.optimize.OccurrenceOrderPlugin(),\n    new webpack.HotModuleReplacementPlugin(),\n    new webpack.NoErrorsPlugin(),\n     new webpack.optimize.CommonsChunkPlugin(\"vendor\", \"vendor.bundle.js\"),\n  ],\n  module: {\n    loaders: [\n      {\n        test: /\\.js$/,\n        loader: 'babel-loader',\n        exclude: /node_modules/,\n        query: {\n          presets: ['react', 'es2015','stage-0', 'react-hmre']\n        }\n      }\n    ]\n  }\n}\n\n\n```\n"
      }
    ]
  },
  {
    "number": 2100,
    "title": "Is it possible to specify a different context per entry point?",
    "created_at": "2016-02-24T22:02:32Z",
    "closed_at": "2016-12-24T13:32:32Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/webpack/webpack/issues/2100",
    "body": "So I am working on a project that has 'N' number of entry points and we would like each entry point to be able to have a different version of React, for example. This would allow our development team to upgrade different pages to React v15.0.0 while leaving other pages running on older versions while still taking advantage of the ability to use the CommonsChunkPlugin. \n\nEssentially we are looking for a way to have our cake and eat it too :)\n\nIs this possible using webpack today? If it's not, would it be considered as a future feature?\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/2100/comments",
    "author": "jguillen1984",
    "comments": [
      {
        "user": "sokra",
        "created_at": "2016-02-25T08:46:05Z",
        "body": "Modules resolve relative to the requesting module. So you can create a directory structure like this:\n- app\n  - node_modules (common stuff)\n  - part1\n    - node_modules (react A)\n    - index1.js\n  - part2\n    - node_modules (react B)\n    - index2.js\n\nindex1.js will use react A. index2.js will use react B.\n"
      }
    ]
  },
  {
    "number": 2029,
    "title": "Split modules bundled via context into separate chunks",
    "created_at": "2016-02-11T09:58:44Z",
    "closed_at": "2016-09-02T06:00:36Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/webpack/webpack/issues/2029",
    "body": "Considering I have the following context requirement in my application:\n\n```\n// entry.js\nconst reqFixtures = require.context('./components', true, /^\\.\\/.*\\-fixture\\.js$/);\n```\n\nIs there anyway, with existing plugins/features, I could tell webpack to split the output into a chunk per file found within the above context?\n\nIf my tree looks like:\n\n```\n- components/\n  - button/\n    - button-fixture.js\n  - input/\n    - input-fixture.js\n\n```\n\nin the case above I'd end up with chunks:\n\n```\n- button-fixture.js\n- input-fixture.js\n- entry.js\n```\n\nMy use case is having a large test/playground application which can reference tens of fixtures with hundreds of components. I don't want to load all that if we only want to look at a single fixture for a single component, I'd much rather lazy load on demand.\n\n---\n\nIf there are no existing mechanisms or plugins to achieve this it'd be great to have some pointers on how to approach a plugin to do this? I was thinking we could look at the emitted modules and if the module path matches against the same expression as the context used then we could pull that module out into a new chunk. That bit seems like it might be relatively trivial but then how to handle pulling dependencies of those matching modules into the chunks? Or would this be handled by `DedupePlugin`?\n\nAnyway, thanks in advance and sorry if this has been discussed before!\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/2029/comments",
    "author": "chrisui",
    "comments": [
      {
        "user": "sokra",
        "created_at": "2016-02-11T11:37:37Z",
        "body": "for webpack 1 you can use the `bundle-loader` or the `promise-loader`: `require.context(\"bundle!./components\", ...)`\n\nfor webpack 2 it's the default behavior for `System.import(\"./components/\" + ...)`\n"
      }
    ]
  },
  {
    "number": 2010,
    "title": "I have a question __dirname setting of node config",
    "created_at": "2016-02-06T08:41:52Z",
    "closed_at": "2016-02-09T01:39:56Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/webpack/webpack/issues/2010",
    "body": "Hi there.\n\nI'm using express with webpack.\nI found __dirname needs set for node and i set like below\n\n```\nnode: {\n  __dirname: false\n}\n```\n\nDocs comment `__dirname: true` is real __dirname, but Above works. Not `true` (true output '')\nIs Docs correct, or not ?\n\nthanks about greate tool!\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/2010/comments",
    "author": "blackpost38",
    "comments": [
      {
        "user": "sokra",
        "created_at": "2016-02-08T08:40:18Z",
        "body": "`__dirname: false` disables webpack processing of `__dirname`. If you run the bundle in node.js it falls back to the __dirname of node.js (which makes sense for target: node).\n`__dirname: true` let webpack replace `__dirname` with the path relative to you `context`. Makes sense for target: web if you need the path.\n"
      },
      {
        "user": "krzkaczor",
        "created_at": "2016-02-09T00:02:14Z",
        "body": "I just have the same problem. I think that documentation is very unclear about what it will do:\n\n```\n__dirname: true (real dirname), \"mock\" (\"/\") or false\n```\n"
      },
      {
        "user": "jmlane",
        "created_at": "2016-03-23T19:55:19Z",
        "body": "Yeah, this is confusing. The documentation reads as if the boolean values should have the opposite effect in the resulting bundle.\n"
      },
      {
        "user": "tejohnso",
        "created_at": "2018-01-30T21:10:15Z",
        "body": "> __dirname: false disables webpack processing of __dirname. If you run the bundle in node.js it falls back to the __dirname of node.js (**which makes sense for target: node**).\r\n\r\n@sokra given what you said above re what makes sense, why is webpack unexpectedly breaking node's behaviour? Shouldn't the node options all be *false* automatically if target is *node*? The mangling of __dirname is counter intuitive and without warning. And in most cases, the output built for node will operate incorrectly rather than failing."
      }
    ]
  },
  {
    "number": 1945,
    "title": "Any Way to Reverse the Order of Require.Context?",
    "created_at": "2016-01-28T16:30:44Z",
    "closed_at": "2016-01-30T11:23:16Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/webpack/webpack/issues/1945",
    "body": "In my particular use case, I have a folder structure like this:\n- angular\n  - directives\n    - date-range\n      - index.js\n    - module.js\n- module.js\n\nAnd id like to simply do\n\n``` javascript\nrequire.context('./angular');\n```\n\nRight now it seems to include files in the bundle in child first order. So my directives are getting put in the file before the module definitions. Essentially Id like files higher up in the hierarchy to appear before files deeper in the hierarchy.\n\nIs there anyway to do this with require.context?\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/1945/comments",
    "author": "pixelshaded",
    "comments": [
      {
        "user": "agundermann",
        "created_at": "2016-01-28T18:46:29Z",
        "body": "I don't think the order in which they are included in the bundle should really make a difference, should it? I'm guessing you're concerned about the order in which they are executed if you have implicit dependencies like\n\n``` js\n// a.js\nwindow.ModuleA = ...;\n\n// b.js\nwindow.ModuleB = /* using window.ModuleA */;\n```\n\nIn that case, I think you can achieve it like this:\n\n``` js\nvar context = require.context('./angular');\nvar modules = context.keys();\n\n// sort them\nvar sortedModules = modules.slice().sort(function(a, b) {\n  // by directory depth\n  var diff = a.match(/\\//g).length - b.match(/\\//g).length;\n  if ( diff !== 0) return diff;\n\n  // if depth is the same, sort alphabetically to make it stable\n  return a < b ? -1 : (a > b ? 1 : 0);\n});\n\n// execute them\nsortedModules.forEach(function(key) {\n  context(key);\n});\n```\n"
      },
      {
        "user": "pixelshaded",
        "created_at": "2016-01-29T12:57:22Z",
        "body": "For this use case, the module files create the modules. The directive files then add directives to those modules. If those modules aren't run and exist before the directive code is run, things won't work right. These aren't commonjs at the moment. I'm really just using webpack process (es6 babel etc) and concat all the files together.\n\nSo I started comparing the output for better understanding, and it seems I totally misunderstood what's going on. I haven't gotten to the point yet of testing the bundle on a page and had assumed that the order in which the modules appeared in output was the order they would be executed (aka a pure concat). WRONG. I didn't realize an array of module functions was being passed to the bootstrapper. This is commonjs for front end. Nothing is run until you require a module. All require.context was doing was setting up the modules. So yes, the order of modules passed to the bootstrapper doesn't matter. The order in which you require those modules does, hence your example of re-ordering the keys based on directory depth and then executing them in that new order.\n\nThanks for taking the time to answer my question.\n"
      }
    ]
  },
  {
    "number": 1941,
    "title": "How does HMR event bubble in async modules?",
    "created_at": "2016-01-27T08:58:44Z",
    "closed_at": "2016-01-29T05:30:48Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/webpack/webpack/issues/1941",
    "body": "I noticed that `module.hot.accpet` does not work for the files loaded with `require.ensure` and does not work in those files. So I think the bubbling is different there, but how does it work?\n\nAnd I'm using Webpack `1.x`, would there be difference between `1.x` and `2.x`.\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/1941/comments",
    "author": "tiye",
    "comments": [
      {
        "user": "sokra",
        "created_at": "2016-01-28T11:58:36Z",
        "body": "It's not different. `require.ensure` just loads the modules into the modules container. Every module is loaded via `require`.\n"
      },
      {
        "user": "sokra",
        "created_at": "2016-01-28T13:43:00Z",
        "body": "``` js\nrequire.ensure([], function() {\n  var x = require(\"x\");\n  module.hot.accept(\"x\", function() {\n    x = require(\"x\");\n    // do something when x was updated\n  });\n});\n```\n"
      },
      {
        "user": "tiye",
        "created_at": "2016-01-28T14:03:06Z",
        "body": "So the `hot.accept` method should be called in the same function body where it's `require`d, that's why I my attempts failed. Thanks, I'll close this issue tomorrow when I confirm in my project.\n"
      }
    ]
  },
  {
    "number": 1929,
    "title": "Should webpack build exit error code when a loader fail?",
    "created_at": "2016-01-25T10:12:04Z",
    "closed_at": "2016-01-26T19:31:50Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/webpack/webpack/issues/1929",
    "body": "I wrote a very simple async loader, following the documentation step by step, and calling the callback with error when some, **but** webpack just log the error in console and continue, exiting 0 as everything went fine.\n\nIs this an issue or am I missing something?\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/1929/comments",
    "author": "JSteunou",
    "comments": [
      {
        "user": "sokra",
        "created_at": "2016-01-26T18:32:54Z",
        "body": "This changes with webpack 2 to a non-zero exit code. webpack 1 stays for backward compatiblitity.\n"
      },
      {
        "user": "gmfun",
        "created_at": "2016-12-17T16:55:29Z",
        "body": "With webpack 2, when I deploy to heroku the builds fails and deploy gets rejected because of exit code 2. @sokra is there any way to disable this new feature or force webpack to exit with code 0"
      }
    ]
  },
  {
    "number": 1886,
    "title": "[Plugin] No events on begin/end of compiling entry points",
    "created_at": "2016-01-14T09:18:04Z",
    "closed_at": "2016-01-14T22:44:17Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/webpack/webpack/issues/1886",
    "body": "Hi, \n\nI'm creating a custom plugin and I need to know the begin/end event of every entry point as I should change the plugin's configuration depending on a specific entry point.\n\nReading through the docs, I can't find that event.\n\nThanks,\nJakob\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/1886/comments",
    "author": "jakob101",
    "comments": [
      {
        "user": "IngwiePhoenix",
        "created_at": "2016-01-14T10:27:45Z",
        "body": "Can you go a bit into detail?\n\nAs in, as far as I understand, you want to change your plugin\u2019s config per-entrypoint, right? If so, then the this-compilation event is what you need. That is used per entry.\n"
      },
      {
        "user": "jakob101",
        "created_at": "2016-01-14T10:43:00Z",
        "body": "I'm listening on this-compilation. It's getting called once, but I have 2 entrypoints. This is my code:\n\n<pre><code>entry: {\n   textX: legacyStylesShared.concat(styles),\n   textY: styles,\n },\n</code></pre>\n\nPlugin config:\n\n<pre><code>compiler.plugin(\"this-compilation\", function(compilation) {\n       console.log(\"xxx\");\n       compilation.plugin(\"normal-module-loader\", function(loaderContext, module) {\n           console.log(\"yyy\");\n       });\n   });\n</code></pre>\n"
      },
      {
        "user": "sokra",
        "created_at": "2016-01-14T20:50:13Z",
        "body": "I don't know what you try to do, but I'm pretty sure it doesn't work that way.\n\nInstead you should use multiple compilation:\n\n``` js\n[\n  { entry: \"a\", plugins: [ new YourPlugin(\"a\") ] },\n  { entry: \"b\", plugins: [ new YourPlugin(\"b\") ] }\n]\n```\n"
      }
    ]
  },
  {
    "number": 1798,
    "title": "How does webpack search path?",
    "created_at": "2015-12-24T11:21:32Z",
    "closed_at": "2015-12-24T11:54:41Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/webpack/webpack/issues/1798",
    "body": "//webpack.config.js\nalias: {\n     header: \"./static/js/app/src/common/header.js\"\n  }\n\n//entry.js\nrequire(\"header\");\n\nModule not found: Error: Cannot resolve 'file' or 'directory' ./static/js/app/src/common/header.js in c:\\demo\\static\\js\\app\\src\\price\n\nSo,how import header.js correctly? \n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/1798/comments",
    "author": "ibufu",
    "comments": [
      {
        "user": "bebraw",
        "created_at": "2015-12-24T11:30:26Z",
        "body": "@ibufu Can you try `path.join(__dirname, \"./static/js/app/src/common/header.js\")`? Just a hunch.\n"
      }
    ]
  },
  {
    "number": 1688,
    "title": "Use CommonsChunkPlugin twice on one page",
    "created_at": "2015-11-30T19:56:25Z",
    "closed_at": "2015-12-07T22:01:37Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/webpack/webpack/issues/1688",
    "body": "As part of our caching strategy, I have set up a configuration where we have two instances of CommonsChunkPlugin: one for vendor scripts; one for common app code. Now we want to include both on every page. But the generated `vendor.js` and `commons.js` each include the webpack runtime, which doesn't work.\n\nIs there a way to remove the runtime from one of those bundles, or is there a different correct way to do this?\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/1688/comments",
    "author": "andrewbranch",
    "comments": [
      {
        "user": "fredericgrati",
        "created_at": "2015-12-02T10:09:12Z",
        "body": "I have two instances of CommonsChunkPlugin : vendor and common.\nwebpack.conf:\n\n```\nvar entry = {\n        profile: [ './app/frontend/javascripts/profile/main.es6'],\n        projects: [ './app/frontend/javascripts/projects/main.es6'],\n        // the vendor entry point\n        vendor: ['babel-polyfill', 'lodash', 'jquery']\n    };\n```\n\n```\n    var plugins = [\n        new webpack.optimize.CommonsChunkPlugin(\"common\", 'common' + (options.longTermCaching ? '-[chunkhash].js' : '.js'), ['projects', 'profile']),\n        new webpack.optimize.CommonsChunkPlugin(\"vendor\", 'vendor' + (options.longTermCaching ? '-[chunkhash].js' : '.js' ), ['common', 'vendor'], Infinity)\n    ];\n```\n\nThe webpack runtime is only present into the vendor bundle and I can use them like this :\n\n```\n  <script src=\"[...]/assets/vendor.js\"></script>\n  <script src=\"[...]/assets/common.js\"></script>\n  <script src=\"[...]/assets/profile.js\"></script>\n```\n\nI hope this will help you (I don't know if it is the correct way to do it but it seems to work)\n"
      },
      {
        "user": "sokra",
        "created_at": "2015-12-02T17:54:14Z",
        "body": "> Is there a way to remove the runtime from one of those bundles, or is there a different correct way to do this?\n\n@andrewbranch You can do it the way @fredericgrati does it. One of the Plugins should have the name of the other commons chunk in the `chunks` property.\n"
      }
    ]
  },
  {
    "number": 1662,
    "title": "how to exclude files from loader",
    "created_at": "2015-11-23T14:43:43Z",
    "closed_at": "2015-11-23T17:13:19Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/webpack/webpack/issues/1662",
    "body": "I have the next config for webpack loaders:\n\n``` javascript\n module: {\n    loaders: [{\n      test: /\\.js$/,\n      include: rootDir + '/src',\n      loader: 'babel?presets[]=es2015'\n    }, {\n      test: /\\.css$/,\n      loader: 'style!css!autoprefixer?browsers=last 2 versions'\n    }, {\n      test: /\\.(png|gif|jpg|svg|ttf|eot|woff|woff2)$/,\n      loader: 'file?name=[path][name].[ext]'\n    }]\n  }\n```\n\nI want to exclude some files from autoprefixer loader. How can I do this? If I do like this:\n\n``` javascript\n{\n  test: /\\.css$/,\n  exclude: 'someFile',\n  loader: 'style!css!autoprefixer?browsers=last 2 versions'\n}\n```\n\nsomeFile will be excluded not only from autoprefixer loader, it will be excluded from styles, css and autoprefixer loader, but I need exclude file only from autoprefixer loader. How can I do this?\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/1662/comments",
    "author": "pavel06081991",
    "comments": [
      {
        "user": "bebraw",
        "created_at": "2015-11-23T16:21:37Z",
        "body": "What if you had another rule like\n\n``` javascript\n{\n  test: /\\.css$/,\n  include: 'someFile',\n  loader: 'style!css'\n}\n```\n\nto deal with that requirement?\n"
      },
      {
        "user": "pavel06081991",
        "created_at": "2015-11-23T16:44:21Z",
        "body": "What about second rule which I wrote in the privious post, in this case it will not get someFile anymore? only your rule will get this file?\n"
      },
      {
        "user": "bebraw",
        "created_at": "2015-11-23T16:45:25Z",
        "body": "The idea was to write separate rules based on your requirements. You would include/exclude (accepts arrays) based on your exact need.\n"
      }
    ]
  },
  {
    "number": 1648,
    "title": "Make TemplatedPathPlugin's replacePathVariables available as a utility.",
    "created_at": "2015-11-19T17:31:34Z",
    "closed_at": "2015-11-20T19:06:01Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/webpack/webpack/issues/1648",
    "body": "I am working on writing a plugin that produces a manifest file when a webpack build completes.\n\nAs options to the plugin, I want to be able to let the user specify filenames/paths using webpack's available values such as `[chunk]`, etc.\n\nRight now, that logic is tied up with the TemplatedPathPlugin.\n\nI would like to break it out so that I can do something like this for my own webpack plugin:\n## Plugin\n\n```\nvar replacePathVariables = require( 'webpack/lib/TemplatedPathHelper' ).replacePathVariables;\n\nfunction manifestPluginFactory( opts ) {\n    return function() {\n        this.plugin( 'done', function( stats ) {\n            var manifestContents = _.chain( stats.compilation.namedChunks )\n                .map( function( chunk ) {\n                    // The key is the canonical way to reference the\n                    // file.\n                    var key = chunk.name;\n                    // Get the root directory\n                    var serverPath = path.join( opts.root, opts.path, opts.fileName );\n                    // Leverage existing webpack replacePathVariables method\n                    stats.chunk = chunk;\n                    serverPath = replacePathVariables( serverPath, stats );\n                    return [ key, serverPath ];\n                } )\n                .object()\n                .value();\n            fs.writeFileSync( opts.manifestDest, JSON.stringify( manifestContents ) );\n        } );\n    }\n}\n```\n## Webpack Config\n\n```\n{ plugins: [\n    manifestPluginFactory( {\n        root: '/webpack/build/',\n        path: '[hash]/mobile/',\n        fileName: '[name].js',\n        manifestDest: 'path.join( process.cwd(), 'webpack/build/manifest.json' )'\n    } )\n] }\n```\n## Output\n\nContents of file written to manifestDest:\n\n```\n{ \"mobile/store-test\": \"/webpack/build/366c982a5175bd728f12/mobile/store-test.js\",\n  \"mobile/store\": \"/webpack/build/366c982a5175bd728f12/mobile/store.js\" }\n```\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/1648/comments",
    "author": "lzilioli",
    "comments": [
      {
        "user": "sokra",
        "created_at": "2015-11-20T07:56:48Z",
        "body": "You can use it in your plugin.\n\n`TemplatedPathPlugin` is not this thing that does the replacement. It's just a plugin that add some replacements. The actual API is the hook `asset-path` that's usable by everything that has a reference to the mainTemplate (which is in the compilation).\n\n``` js\nmainTemplate.applyPluginsWaterfall(\"asset-path\", \"some string [hash]\", {\n    hash: hash,\n    chunk: chunk\n})\n```\n\nIf you want to improve something here, add a `getAssetPath(string, options)` function to the `MainTemplate` that calls the hook and replace all occurences. That would look better.\n\nsee also #427\ncc @diurnalist\n"
      }
    ]
  },
  {
    "number": 1636,
    "title": "is it possible to specify sourceMappingURL?",
    "created_at": "2015-11-16T15:51:38Z",
    "closed_at": "2015-11-16T22:43:24Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/webpack/webpack/issues/1636",
    "body": "Hi guys.\n\nHelp, please, with the specifying of sourceMappingURL.\nWe have our own dev-server, so we need to specify sourceMappingURL as a static asset URL like **/dist/bundle.js.map**, but the default output of the webpack is \n**# sourceMappingURL=bundle.js.map**.\n\nThanks in advance.\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/1636/comments",
    "author": "pkantsedalov",
    "comments": [
      {
        "user": "sokra",
        "created_at": "2015-11-16T19:25:28Z",
        "body": "You can use the `append` option for the SourceMapDevToolPlugin. i. e. `append: \"\\n//# sourceMappingURL=/dist/\"`\n"
      },
      {
        "user": "pkantsedalov",
        "created_at": "2015-11-16T22:13:59Z",
        "body": "Thanx a lot for the response.\n\nThe final result is the next one: \n\n```\nnew webpack.SourceMapDevToolPlugin({\n    filename: '[file].map',\n    append: `\\n//# sourceMappingURL=${path}[url]`\n})\n```\n"
      }
    ]
  },
  {
    "number": 1370,
    "title": "Question: Suggestion: Webpack hard to build desired structure",
    "created_at": "2015-08-19T16:53:57Z",
    "closed_at": "2016-04-17T08:00:21Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/webpack/webpack/issues/1370",
    "body": "If we have \n\n```\n.\n\u251c\u2500\u2500 src\n|   \u251c\u2500\u2500 css\n|   |    \u2514\u2500\u2500  style.css\n|   \u251c\u2500\u2500 images\n|   |    \u2514\u2500\u2500 image.png\n|   \u2514\u2500\u2500 js\n|        \u2514\u2500\u2500 main.js\n.\n```\n\n``` css\n/* src/css/style.css*/\nbody{\n   background:url(../images/image.png)\n}\n```\n\n``` javascript\n/* src/js/main.js*/\nrequire('../css/style.css')\n```\n\nI want compile to `dist` folder as the same structure like \n\n```\n.\n\u251c\u2500\u2500 dist\n|   \u251c\u2500\u2500 css\n|   |    \u2514\u2500\u2500  main-bundle.css\n|   \u251c\u2500\u2500 assets\n|   |    \u2514\u2500\u2500 image.png\n|   \u2514\u2500\u2500 js\n|        \u2514\u2500\u2500 main-bundle.js\n\u251c\u2500\u2500 src\n.   \u2514\u2500\u2500 ...\n```\n\nso we wrote webpack.config.js using ExtractTextPlugin to extract css file seperately like\n\n``` javascript\nentry: {\n    main:\"main.js\"\n},\noutput: {\n    path: path.join(__dirname, \"dist\"),\n    filename: \"./js/[name].bundle.js\"\n},\nmodule: {\n    loaders: [\n        { test: /\\.css$/, loader: ExtractTextPlugin.extract(\"style-loader\", \"css-loader\") },\n        { test: /\\.png$/, loader: \"file-loader?name=./assets/[name].[ext]\" }\n    ],\n    plugins: [\n        new ExtractTextPlugin(\"./css/[name]-bundle.css\")\n    ]\n}\n```\n\nSo we got\n\n``` css\n/* dist/css/main-bundle.css*/\nbody{\n   background:url(./assets/image.png)\n}\n```\n\nBut actually ,we want it to be `url(../assets/image.png)` when I config png loader `file-loader?name=../images/[name].[ext]` it put the image file to outside dist folder instead. I have found out that it's impossible to set url correctly\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/1370/comments",
    "author": "thakerng",
    "comments": [
      {
        "user": "adjavaherian",
        "created_at": "2015-08-20T19:13:30Z",
        "body": "I've stopped using file loader for images. I think its easier to no-op mime/images in webpack and build your images with gulp.  You can gulp with imagemin and rev like this:\n\n``` javascript\nvar gulp       = require('gulp');\nvar imagemin   = require('gulp-imagemin');\nvar debug      = require('gulp-debug');\nvar assetManifest   = require('gulp-asset-manifest');\nvar rev             = require('gulp-rev');\n\ngulp.task('images', function() {\n   return gulp.src('images/**/*.+(jpg|jpeg|ico|png|gif|svg)')\n    .pipe(imagemin()) // Optimize\n    .pipe(rev())\n    .pipe(gulp.dest('public/dist/images'))\n    .pipe(rev.manifest())\n    .pipe(gulp.dest('public/dist'));\n});\n```\n\nAnd then create a manifest loader for your css\n\n``` javascript\n//manifest loader for replacing rev'd sources\n// params url(manifest-loader?relativeSplit=images/&prefix=dist/images&manifest=rev-manifest&outputDir=public/dist!../images/logo.png)\n\nvar loaderUtils = require('loader-utils');\nvar path = require('path');\nvar gutil = require('gulp-util');\n\nmodule.exports = function(content) {\n\n    this.cacheable && this.cacheable();\n    var callback = this.async();\n\n    var options = loaderUtils.parseQuery(this.query);\n    var manifest = require(path.join(options.outputDir, options.manifest));\n    var relativeSplit = options.relativeSplit || '/';\n    var fileName = this.resourcePath.split(relativeSplit)[1] || '';\n    var prefix = options.prefix || '';\n    var result = manifest[fileName] ? path.join(prefix, manifest[fileName]) : '';\n\n    gutil.log('webpack manifest loader', fileName, ' > ', result);\n    callback(null, 'module.exports = \"' + result + '\"');\n\n};\n\nmodule.exports.raw = true;\n```\n\nI haven't tried this in css urls, but it works fine in js components that require images.  Please let me know if you get this working in css urls.\n"
      },
      {
        "user": "sokra",
        "created_at": "2015-08-26T11:09:25Z",
        "body": "There is a `publicPath` option for the ExtractTextPlugin which allows to specify the path to the assets.\n"
      },
      {
        "user": "chemdemo",
        "created_at": "2016-03-09T14:39:23Z",
        "body": "You can just change the file-loader like this:\n\n``` js\n{ test: /\\.png$/, loader: \"file-loader?name=assets/[name].[ext]\" }\n```\n"
      }
    ]
  },
  {
    "number": 1362,
    "title": "loading non-required files",
    "created_at": "2015-08-17T10:03:40Z",
    "closed_at": "2015-11-14T17:49:31Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/webpack/webpack/issues/1362",
    "body": "is it possible to use a loader on files that you don't require anywhere?\n\nfor example:\nI'm building my front-end code with Webpack but I also want to lint all *.js files in a server specific folder.\n\nthanks in advance.\nGeoffrey\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/1362/comments",
    "author": "geoffreydhuyvetters",
    "comments": [
      {
        "user": "IngwiePhoenix",
        "created_at": "2015-08-17T10:24:18Z",
        "body": "Separate entrypoint. You dont have to use it\u2019s output, but that way you can lint the server code.\n"
      },
      {
        "user": "geoffreydhuyvetters",
        "created_at": "2015-08-18T10:08:43Z",
        "body": "is there a plugin or way to ignore a file for output?, I only need to lint it\n"
      },
      {
        "user": "bebraw",
        "created_at": "2015-11-14T17:25:23Z",
        "body": "@duivvv Maybe it's better to deal with linting your backend code outside of Webpack? When do you want to trigger the process?\n"
      }
    ]
  },
  {
    "number": 1225,
    "title": "Invalid arguments: 'delay' error",
    "created_at": "2015-07-07T14:20:10Z",
    "closed_at": "2015-11-14T18:06:53Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/webpack/webpack/issues/1225",
    "body": "The current version (1.8.11) is throwing an error in NodeWatchFileSystem,js file (line 29) in the NodeWatchFileSystem.prototype.watch method\n\nif(typeof delay !== \"number\")\n    throw new Error(\"Invalid arguments: 'delay'\");\n\nAccording our research the delay parameter, which is expected as a number, is in fact an object as you can see below: \n{ aggregateTimeout: 200 }\n\nWe used the same version in a previous project and this issues wasn't throwed there so it's posible that some change in the way delay is built introduced this error. \n\nThanks\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/1225/comments",
    "author": "amilcar-infante",
    "comments": [
      {
        "user": "gihrig",
        "created_at": "2015-07-09T05:44:16Z",
        "body": "> The current version (1.8.11) is throwing an error in NodeWatchFileSystem,js file (line 29) in the NodeWatchFileSystem.prototype.watch method\n\nLatest as of July-8-2015, is 1.10.1 - solved that error for me :-)\n\n```\n\"webpack\": \"1.10.1\",\u2028\"\n\u2028\"webpack-dev-server\": \"1.10.1\"\n```\n"
      }
    ]
  },
  {
    "number": 1202,
    "title": "When will modules in ensure() be loaded to page? ",
    "created_at": "2015-06-27T03:37:43Z",
    "closed_at": "2015-11-16T06:31:24Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/webpack/webpack/issues/1202",
    "body": "After reading the docs and examples of Code Split,\nI don't really understand it.\n\n``` js\nvar a = require(\"a\");\nvar b = require(\"b\");\nrequire.ensure([\"c\"], function(require) {\n    require(\"b\").xyz();\n    var d = require(\"d\");\n});\n```\n\nMy question is when will \"c\" be loaded?\nWhen should I use require.ensure()?\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/1202/comments",
    "author": "littlee",
    "comments": [
      {
        "user": "IngwiePhoenix",
        "created_at": "2015-06-27T07:18:40Z",
        "body": "A module that is targeted using require.ensure is loaded asynchronously. That means, it is loaded /after/ the page itself. Imagine you had a jQuery plugin, that you only wanted to load in certain situations, then you would use this. Here is a bit of code that I use to autoload Highlight.JS only when code blocks are there. This allows me to keep the main script\u2019s filesize low, but load additional code on-demand.\n\n```\nif($(\"body\").find(\"pre code\").length > 0) {\n    require.ensure([\n        // Should only load the hljs stuff we need...\n        \"highlight.js\",\n        // Stylesheet.\n        \"highlight.js/styles/hybrid.css\"\n    ], function(hljs){\n        hljs.configure({\n            tabReplace: Array(5).join(\" \")\n        });\n        $(\"body\").find(\"pre code\").each(function(i,v){\n            if($(v).prop(\"class\").match(/language-.+/ig) != null) {\n                // The current block has a language- class.\n                $(v).addClass(\"hascode\");\n                $(v).parent().addClass(\"hascode\");\n                hljs.highlightBlock(v);\n            }\n        });\n    });\n}\n```\n\nwhenever you use require.ensure, that module is put into a separate chunk (aka. another file) which is added to the page once the call occurs. That is also why you have to supply a callback. It will only then be called when the async loading is done and the module is ready to be used.\n\nOn Sa. Juni 27 2015 05:37:48 Littlee wrote:\n\n> After reading the docs and examples of Code Split,\n> I don't really understand it.\n> \n> var a = require(\"a\"\n> );\n> \n> var b = require(\"b\"\n> );\n> \n> require.ensure([\"c\"], function(require\n> ) {\n> \n> require(\"b\"\n> ).xyz();\n> \n> var d = require(\"d\"\n> );\n> });\n> \n> My question is when will \"c\" be loaded?\n> When should I use require.ensure()?\n> \n> \u2014\n> Reply to this email directly or view it on GitHub.\n"
      }
    ]
  },
  {
    "number": 799,
    "title": "Question: circular angular dependencies?",
    "created_at": "2015-02-18T11:46:14Z",
    "closed_at": "2015-11-15T10:51:51Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/webpack/webpack/issues/799",
    "body": "Hi, i have two files\n\n``` javascript\n//app.js\n(function(){\n  //initialize myApp\n  var myApp = angular.module('myApp', []);\n  //requiring constans.js to resolve USER_ROLES\n  require('constans.js');\n  //configure\n  myApp.config(function ($routeProvider, USER_ROLES) {\n    //something with USER_ROLES, e.g. call $routeProvider\n    $routeProvider\n        .when('/admin', {\n            templateUrl: 'admin.tpl.html',\n            controller: 'adminController',\n            access: {\n                authorizedRoles: [USER_ROLES.admin]\n            }\n        });\n    //...\n  });\n  module.exports = myApp;\n})();\n```\n\n``` javascript\n//constants.js\n(function(){\n  //Uncaught ReferenceError: myApp is not defined\n  myApp.constant('USER_ROLES', {\n    'all': '*',\n    'admin': 'ROLE_ADMIN',\n    'user': 'ROLE_USER'\n  });\n})();\n```\n\nconstant.js dependent on app.js and vice versa\nhow can I resolve circular dependencies, to prevent **Uncaught ReferenceError: myApp is not defined**, that constant USER_ROLES use myApp.\nCan anyone give me advice? Thx\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/799/comments",
    "author": "f0def",
    "comments": [
      {
        "user": "jhnns",
        "created_at": "2015-02-19T00:42:33Z",
        "body": "Welcome to Angular.js and its cool module system :grin: \n\nThere are two possibilities:\n\nMake `constant.js` just return an object instead of registering the constants automatically:\n\n``` javascript\n// constants.js\nmodule.exports = {\n    'all': '*',\n    'admin': 'ROLE_ADMIN',\n    'user': 'ROLE_USER'\n};\n\n// app.js\nmyApp.constant('USER_ROLES', require('./constants.js'));\n```\n\nOr inject myApp to `constants.js`\n\n``` javascript\n// constants.js\nmodule.exports = function (myApp) {\n    myApp.constant('USER_ROLES', {\n        'all': '*',\n        'admin': 'ROLE_ADMIN',\n        'user': 'ROLE_USER'\n    });\n};\n\n// app.js\nrequire('./constants.js')(myApp);\n```\n"
      },
      {
        "user": "f0def",
        "created_at": "2015-02-19T05:04:46Z",
        "body": "@jhnns thanks you for possibilities\nAs you think, and this option can be used? Or is it a bad practice?\nsomething like this:\n\n``` javascript\n//app.js\n(function(){\n  var myApp = angular.module('myApp', []);\n  //calling module.exports in the middle of the app.js\n  module.exports = myApp;\n  //requiring constans.js to resolve USER_ROLES\n  require('constans.js');\n  //configure\n})();\n```\n\n``` javascript\n//constants.js\n(function(){\n  //requiring app.js\n  var myApp= require('app');\n  myApp.constant('USER_ROLES', {\n    'all': '*',\n    'admin': 'ROLE_ADMIN',\n    'user': 'ROLE_USER'\n  });\n})();\n```\n"
      }
    ]
  },
  {
    "number": 55,
    "title": "Relative Path Resolution",
    "created_at": "2013-01-22T07:51:46Z",
    "closed_at": "2013-01-22T17:03:38Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/webpack/webpack/issues/55",
    "body": "Hi sokra,\n\nwhen I try to build the following setup\n\n```\nproject root\n|__ lib\n|    |__ lib.js\n|__ src\n|    |__ main.js\n|__ build.js\n```\n\nwith `webpack 0.8.2`, where `lib.js` is some arbitrary library and `main.js` is as simple as\n\n```\n// main.js\n'use strict';\n\n/*global require:true */\nrequire = require('enhanced-require')(module, {\n    recursive: true\n});\n\nvar Lib = require('../lib/lib.js');\n```\n\nthen `node build` (i.e. basically a clone of your build script) would throw the following error:\n\n```\nERROR: Cannot find module '../lib/lib.js'\n Error: Error: Module \"jshint\" not found in context \"<project root>\\src\"\n  Error: <project root>\\node_modules\\webpack\\buildin\\jshint-webpack-web-loader is not a directory\n @ <project root>\\src\\main.js (line 8, column 14)\n```\n\nThis sample works if `lib.js` is moved to `src` and the import in `main.js` is changed accordingly. By the way, it does not matter if `require` or `enhanced-require` is used.\n\nBest regards,\nmiffels\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/55/comments",
    "author": "miffels",
    "comments": [
      {
        "user": "sokra",
        "created_at": "2013-01-22T09:10:12Z",
        "body": "check the build script... You applied a post loader for any file in `lib` (`postLoaders`). You want to post load the files with `jshint-loader`, but it's not `npm install`ed.\n\nTry `npm install jshint-loader` if you want to post load the files.\n\nOr remove the `postLoader` from you config.\n"
      },
      {
        "user": "miffels",
        "created_at": "2013-01-22T17:03:37Z",
        "body": "Gosh, of course:\n\n```\n    ...\n    preLoaders\": [\n        {\n            \"test\": \"\\\\.js$\",\n            \"include\": \"lib\",\n            \"exclude\": [\n                \"jam\",\n                \"web_modules\",\n                \"node_modules\"\n            ],\n            \"loader\": \"jshint\"\n        }\n    ],\n    ...\n```\n\nshould be\n\n```\n            ...\n            \"include\": \"src\",\n            ...\n```\n\nand the loader was missing, too. There were no postLoaders, though.\n\nFor some reason I knew that the moment would come when I just misconfigured something and created an embarassing issue for no reason :smile:\n\nThanks for pointing out the real issue!\n\nBest regards,\nmiffels\n"
      }
    ]
  }
]