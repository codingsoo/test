[
  {
    "number": 3274,
    "title": "How to set custom y-axis range?",
    "created_at": "2016-09-07T18:22:43Z",
    "closed_at": "2017-03-21T10:44:46Z",
    "labels": [
      "type: bug",
      "help wanted",
      "type: documentation"
    ],
    "url": "https://github.com/chartjs/Chart.js/issues/3274",
    "body": "I like the fact that the chart looks at minimum and maximum values and scales the y-axis so that it just shows the minimum and maximum values.\n\nHowever, I have a situation where I'm drawing multiple charts.  They each have different data, and the min/max Y values will vary, but the domain of all them are related, and it would make more sense if I could determine the min/max of ALL the datasets, and then set the min/max of all of the charts to those values.  It will result in some charts showing points right at the bottom of the chart, but the consistency within the entire set of charts is more valuable.\n\nIt'll be easy enough to iterate through my datasets to determine the min/max values, but how do I set the charts to use those values?\n",
    "comments_url": "https://api.github.com/repos/chartjs/Chart.js/issues/3274/comments",
    "author": "davidmichaelkarr",
    "comments": [
      {
        "user": "davidmichaelkarr",
        "created_at": "2016-09-07T20:12:02Z",
        "body": "I thought I'd figured this out, but it looks like this will be more complicated to make it \"complete\".  I noticed the example for setting \"ticks: { min: N, max:N }\", but this results in an odd looking Y axis.  I think I have to somehow compute a reasonable step size.  What is a reasonable algorithm to compute that?\n"
      },
      {
        "user": "davidmichaelkarr",
        "created_at": "2016-09-07T20:23:11Z",
        "body": "I would think that since charts.js is computing a reasonable step size from the data, I should be able to just ask it to recompute a step size from the custom min/max value, instead of having to implement a similar algorithm to what the code is already doing.\n"
      },
      {
        "user": "davidmichaelkarr",
        "created_at": "2016-09-07T20:34:02Z",
        "body": "Note that I'm using charts.js from angular-chart.  I noticed the \"chart.update()\" method, but as I'm using angular-chart, I'm not creating the Chart objects in my javascript, they're created declaratively (by me, at least).  In any case, despite the fact that it seems like calling \"chart.update()\" is the thing to do here, I would think that it would be unnecessary.\n"
      },
      {
        "user": "etimberg",
        "created_at": "2016-09-07T22:31:31Z",
        "body": "@davidmichaelkarr using `ticks.min` and `ticks.max` is the way to do this. What looks odd about it?\n\nYou can use `ticks.stepSize` for a fixed step size\n"
      },
      {
        "user": "davidmichaelkarr",
        "created_at": "2016-09-07T22:40:43Z",
        "body": "The problem is, it's just not that simple.  A simple-minded approach results in an unpleasing rendering.  I can't just determine the max Y value of my data and set the ticks.max to that.  The proper value to set \"ticks.max\" to is some value larger than that value, which apparently the charts engine usually computes properly so it renders cleanly.\n\nFor instance, let's say a dataset has values ranging from 0 to 480.  When I render that normally, it shows Y axis values of 0, 200, 400, and 600, which looks good.  Essentially, what I need to set \"ticks.max\" to is \"600\", not \"480\".  The effect would be the same as if I had added an additional fake data value of the \"max\" value, with an X axis value one plus the last value.  That would make the chart engine render it in a reasonable fashion (except for one of the data points being fake).\n"
      },
      {
        "user": "davidmichaelkarr",
        "created_at": "2016-09-07T22:45:30Z",
        "body": "Another way to look at is if I could set a \"pretend\" Y axis value, so the chart engine would render the chart with the provided data, but also using that pretend data point in the calculations for determining the Y axis labels.\n"
      },
      {
        "user": "etimberg",
        "created_at": "2016-09-07T22:52:16Z",
        "body": "Hmm, have you looked at `ticks.suggestedMin` and `ticks.suggestedMax`? They essentially change the data max and min before the auto fit algorithm runs\n"
      }
    ]
  },
  {
    "number": 2431,
    "title": "Docs for adding mixed charts - Line and Bar",
    "created_at": "2016-05-02T11:32:18Z",
    "closed_at": "2016-08-10T00:13:13Z",
    "labels": [
      "type: bug",
      "help wanted",
      "type: documentation"
    ],
    "url": "https://github.com/chartjs/Chart.js/issues/2431",
    "body": "I'm unable to find out the docs in version 2 of Charts.js. \nAny idea how to go about adding mixed charts ?  ( A line and bar graph in the same chart)\n",
    "comments_url": "https://api.github.com/repos/chartjs/Chart.js/issues/2431/comments",
    "author": "thelostone-mc",
    "comments": [
      {
        "user": "etimberg",
        "created_at": "2016-05-02T11:56:11Z",
        "body": "@adityaanandmc you would do the following:\n\n``` javascript\nvar chartInstance = new Chart(ctx, {\n  data: {\n    datasets: [{\n      // Makes this dataset bars\n      type: 'bar',\n      data: []\n    }, {\n      // Makes this dataset a line\n      type: 'line'\n    }]\n  }\n});\n```\n"
      },
      {
        "user": "thelostone-mc",
        "created_at": "2016-05-03T18:36:08Z",
        "body": "@etimberg  That didn't seem to work for me!! -  It didn't display the bar graph, just the line graph\nThis instead did work : \n\n```\nvar chartInstance = new Chart(ctx, {\n  type: 'bar', // Setting this as the default\n  data: {\n    datasets: [{\n      // Makes this dataset bars by default\n      data: []\n    }, {\n      // Makes this dataset a line\n      type: 'line'\n    }]\n  }\n});\n```\n"
      }
    ]
  }
]