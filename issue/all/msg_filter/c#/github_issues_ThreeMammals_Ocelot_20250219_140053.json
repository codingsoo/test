[
  {
    "number": 361,
    "title": "how can i config consul in ocelot if there is a consul cluster?  use virtual ip?",
    "created_at": "2018-05-16T08:42:15Z",
    "closed_at": "2018-05-18T05:35:18Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ThreeMammals/Ocelot/issues/361",
    "body": " \"ServiceDiscoveryProvider\": {\r\n      \"Provider\": \"Consul\",\r\n      \"Host\": \"localhost\",\r\n      \"Port\": 8500\r\n    }",
    "comments_url": "https://api.github.com/repos/ThreeMammals/Ocelot/issues/361/comments",
    "author": "jrlygdsj",
    "comments": [
      {
        "user": "TomPallister",
        "created_at": "2018-05-16T21:19:35Z",
        "body": "@jrlygdsj if you run a cluster you should have a consul agent running as a client installed as a sidecar next to Ocelot. Ocelot calls the local agent and the agent is connected to the cluster."
      },
      {
        "user": "jrlygdsj",
        "created_at": "2018-05-17T04:24:01Z",
        "body": "thank you TomPallister :\r\n  if so, when consul's process is dead but ocelot is alive, request may get error"
      },
      {
        "user": "TomPallister",
        "created_at": "2018-05-17T05:34:04Z",
        "body": "@jrlygdsj that is correct but it should not matter because you should have a load balancer in front of Ocelot  that\u2019s knows the service is down and doesn\u2019t route requests to it."
      }
    ]
  },
  {
    "number": 641,
    "title": "store configuration in consul  problem on v12.0.0",
    "created_at": "2018-09-28T03:05:12Z",
    "closed_at": "2018-10-15T01:50:37Z",
    "labels": [
      "feature",
      "help wanted",
      "medium effort"
    ],
    "url": "https://github.com/ThreeMammals/Ocelot/issues/641",
    "body": "## Expected Behavior / New Feature\r\nhi\r\n\r\nWhen the configuration is stored in consul, restarting the application causes local ocelot. json information to be synchronized to consul, resulting in loss of consul configuration data;\r\n\r\nI find that every restart application is executed.\r\n\r\n`if(AdministrationApiInUse(adminPath))`\r\n`{`\r\n    `   var fileConfigSetter = builder.ApplicationServices.GetService<IFileConfigurationSetter>();`\r\n    `   await SetFileConfig(fileConfigSetter, fileConfig);`\r\n`}`\r\n## Actual Behavior / Motivation for New Feature\r\n\r\n\r\n## Steps to Reproduce the Problem\r\n\r\n  1.\r\n  1.\r\n  1.\r\n\r\n## Specifications\r\n\r\n  - Version:v12.0.0\r\n  - Platform:\r\n  - Subsystem:\r\n",
    "comments_url": "https://api.github.com/repos/ThreeMammals/Ocelot/issues/641/comments",
    "author": "q315523275",
    "comments": [
      {
        "user": "TomPallister",
        "created_at": "2018-10-13T16:44:41Z",
        "body": "@q315523275 Ive had a chance to look at this issue, it looks like expected behaviour. If you are using the administration API when Ocelot starts up it writes to ocelot.json and ocelot.{env}.json because users expect both of these configs to be in sync.\r\n\r\nIf you are using consul instead of using DiskFileConfigurationRepository to do the save it uses the Consul version and hence it saves to your consul instance.\r\n\r\nThe fix for this is say if using consul to store ocelot configuration don't save the config when starting Ocelot. This would mean exposing some kind of delegate from Ocelot.Provider.Consul package.\r\n\r\nFor now I would suggest dont use the administration api when using Consul. You shouldnt need both."
      }
    ]
  },
  {
    "number": 623,
    "title": "How to get RemoteIPAddress in Asp.Net core 2.1 Service behind ocelot",
    "created_at": "2018-09-17T08:32:46Z",
    "closed_at": "2018-09-30T09:17:14Z",
    "labels": [
      "feature",
      "help wanted",
      "medium effort",
      "merged"
    ],
    "url": "https://github.com/ThreeMammals/Ocelot/issues/623",
    "body": "## Expected Behavior / New Feature\r\nGet User Real IP Address\r\n\r\n## Actual Behavior / Motivation for New Feature\r\nGet Ocelot gateway IP Address\r\n\r\n## Steps to Reproduce the Problem\r\n\r\n  1.Ocelot route http request to my asp.net core 2.1 service;\r\n  2.In asp.net core 2.1 controller get remoteIPAddress from method \"var ipAddress = _httpContextAccessor.HttpContext.Connection.RemoteIpAddress.ToString();\"\r\n\r\n\r\n## Specifications\r\n\r\n  - Version:9.0.0\r\n  - Platform:CentOS7\r\n  - Subsystem:\r\n",
    "comments_url": "https://api.github.com/repos/ThreeMammals/Ocelot/issues/623/comments",
    "author": "bishopjun11",
    "comments": [
      {
        "user": "TomPallister",
        "created_at": "2018-09-18T06:41:06Z",
        "body": "@bishopjun11 the best way for this to happen would be an x forwarded for header. I think this is a new feature. I will get round to it eventually but for now if you want this you would have to implement it yourself either your own piece of middleware that adds it as a header and then ocelot will automatically forward it."
      },
      {
        "user": "TomPallister",
        "created_at": "2018-09-18T06:41:45Z",
        "body": "In terms of implementing this use the header placeholder stuff"
      },
      {
        "user": "bishopjun11",
        "created_at": "2018-09-18T10:20:09Z",
        "body": "> @bishopjun11 the best way for this to happen would be an x forwarded for header. I think this is a new feature. I will get round to it eventually but for now if you want this you would have to implement it yourself either your own piece of middleware that adds it as a header and then ocelot will automatically forward it.\r\n\r\nI add a Nginx before ocelot and add x forwarded header in Nginx."
      },
      {
        "user": "TomPallister",
        "created_at": "2018-09-18T20:34:06Z",
        "body": "@bishopjun11 Yep that should work fine, good idea. Btw if you are using nginx already you might not need Ocelot! What are you using it for?"
      },
      {
        "user": "TomPallister",
        "created_at": "2018-09-30T09:17:14Z",
        "body": "Released in 12.0.1, should be on NuGet soon :)\r\n\r\n"
      }
    ]
  },
  {
    "number": 335,
    "title": "When delegate handler throws an exception, service returns 404 (not found)",
    "created_at": "2018-04-27T12:05:02Z",
    "closed_at": "2018-04-30T18:37:08Z",
    "labels": [
      "feature",
      "help wanted",
      "small effort"
    ],
    "url": "https://github.com/ThreeMammals/Ocelot/issues/335",
    "body": "## Expected\r\n\r\nWhen a delegate handler throws an exception I would expect the service to return 500 (internal server error)\r\n\r\n## Actual\r\n\r\nWhen a delegate handler throws an exception the service returns 404 (not found)\r\n\r\n## Steps to Reproduce the Problem\r\n\r\nCreate a delegate handler (inherit from DelegatingHandler) and configure it in startup/config\r\nGet the handler to throw and exception\r\nPostman to the endpoint that contains the handler and 404 is returned\r\n\r\n## Possible fix\r\n\r\nAdd the following code to the ErrorsToHttpStatusCodeMapper:\r\n\r\n```cs\r\nif (errors.Any(e => e.Code == OcelotErrorCode.UnableToCompleteRequestError))\r\n{\r\n        return 500;\r\n}\r\n```\r\n## Other\r\nI am not sure if the current behavior is for a reason so will not do anything until I hear this is not a daft thing to change!\r\n\r\n## Specifications\r\n\r\n  - Version: 5.5.7\r\n  - Platform: Windows 10\r\n  - Subsystem: Visual Studio 2017 C# Core 2.0\r\n",
    "comments_url": "https://api.github.com/repos/ThreeMammals/Ocelot/issues/335/comments",
    "author": "Dilsy99",
    "comments": [
      {
        "user": "TomPallister",
        "created_at": "2018-04-27T22:03:53Z",
        "body": "@Dilsy99 yep I pretty much agree with this. I don't think there is any reason for this other than I haven't accounted for delegating handlers throwing exceptions since I did the error mapper stuff. I did the error mapping stuff maybe a year and a half ago and delegating handlers are 6 months old so probably my bad :(\r\n\r\nI guess this should really be configurable because some places might want to return a 404 instead of 500 to discourage hackers because they think that a 500 means vulnerable to buffer overflow etc. I personally don't see a problem returning a 500 in .net but maybe I'm naive :( However for now happy for you to make this map to a 500 if you want to submit a PR!? :)"
      },
      {
        "user": "Dilsy99",
        "created_at": "2018-04-30T08:18:23Z",
        "body": "@TomPallister Many thanks for the response\r\n\r\nI did think about configuration and how that would work in practice but it rather overwhelmed my Friday afternoon brain!\r\n\r\nI have made the change and the only byproduct that I have noticed (because the test failed :-)) is that the ssl certificate configuration error now returns 500 rather than 404 (which makes sense as the handler is throwing the error).\r\n\r\nAre you OK that this breaks existing functionality that  people \"may\" rely on?\r\n\r\n```cs\r\npublic void should_not_dangerous_accept_any_server_certificate_validator()\r\n```"
      }
    ]
  },
  {
    "number": 41,
    "title": "Get Cake build working on MacOS",
    "created_at": "2017-02-12T14:59:15Z",
    "closed_at": "2017-02-19T15:32:15Z",
    "labels": [
      "bug",
      "help wanted"
    ],
    "url": "https://github.com/ThreeMammals/Ocelot/issues/41",
    "body": "Think the problem is that cake cannot reference variables declared at top of page in private methods on macos...no idea why it can on windows!",
    "comments_url": "https://api.github.com/repos/ThreeMammals/Ocelot/issues/41/comments",
    "author": "TomPallister",
    "comments": [
      {
        "user": "binarymash",
        "created_at": "2017-02-19T15:10:12Z",
        "body": "I don't understand the difference between Mac and Windows, but the variables can be accessed from all the tasks so the solution is just to pass them into the private methods."
      }
    ]
  }
]