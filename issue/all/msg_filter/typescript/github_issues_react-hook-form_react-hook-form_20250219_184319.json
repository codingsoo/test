[
  {
    "number": 4083,
    "title": "FormProvider custom props",
    "created_at": "2021-02-02T01:54:34Z",
    "closed_at": "2021-02-02T14:49:36Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/react-hook-form/react-hook-form/issues/4083",
    "body": "**Is your feature request related to a problem? Please describe.**\r\nI am trying to migrate a project from V5 to V6, but the the typescript typings limit the way we used react hook forms before. We were able to add custom props to the FormContext (now renamed to FormProvider) and get those with useFormContext. Sadly, I think because of stricter typings, this is not possibly any more.\r\n\r\n```\r\n<FormProvider {...methods} fields={fields}></FormProvider>\r\n\r\nconst { formState, fields } = useFormContext();\r\n```\r\n\r\n**Describe the solution you'd like**\r\nI would like to know if this was unsupported behaviour in V5 and I should rewrite this usage or if the typings are to strict now.\r\n",
    "comments_url": "https://api.github.com/repos/react-hook-form/react-hook-form/issues/4083/comments",
    "author": "NextNebula",
    "comments": [
      {
        "user": "bluebill1049",
        "created_at": "2021-02-02T02:34:24Z",
        "body": "Hey @NextNebula thanks for the feature request, I think we have fixed the type on v6 with context, if you need custom props, I would be recommended you build your own context."
      },
      {
        "user": "NextNebula",
        "created_at": "2021-02-02T12:26:58Z",
        "body": "Yeah creating our own context instead of mixing it with the form context is probably cleaner code anyway. Thank you!"
      }
    ]
  },
  {
    "number": 1541,
    "title": "getValues() will return invaild type, if use array type.",
    "created_at": "2020-04-30T01:20:32Z",
    "closed_at": "2020-04-30T01:58:27Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/react-hook-form/react-hook-form/issues/1541",
    "body": "Is this the expected normal behavior?\r\n\r\n```ts\r\ninterface FormData {\r\n  position_types: string[]\r\n}\r\n\r\nconst defaultValues: FormData = {\r\n  position_types: []\r\n};\r\n\r\nconst Form = props => {\r\n  const { register, getValues } = useForm<FormData>({\r\n    defaultValues\r\n  });\r\n\r\n  // return Record<string, unknown>, not FormData\r\n  getValues();\r\n}\r\n```",
    "comments_url": "https://api.github.com/repos/react-hook-form/react-hook-form/issues/1541/comments",
    "author": "naomei",
    "comments": [
      {
        "user": "bluebill1049",
        "created_at": "2020-04-30T01:42:44Z",
        "body": "`getValues({ nest: true })` we are fixing this in V6."
      }
    ]
  },
  {
    "number": 1481,
    "title": "Problems with setValue()",
    "created_at": "2020-04-23T11:50:53Z",
    "closed_at": "2020-04-23T12:02:30Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/react-hook-form/react-hook-form/issues/1481",
    "body": "**Describe the bug**\r\nsetValue doesn't set the array values properly in \"react-hook-form\": \"^5.5.3\",\r\n\r\n**To Reproduce**\r\nA lot of versions react-hook-form were released in last couple of days, so I don't know if this is some version specific, but after updating it doesn't work as it was day before.\r\nIf I try to submit invalid form, errors are displayed properly, but when I select any department (data from <DepartmentEmployeesPicker /> is passed correctly), it clears the error, but I cannot submit because there are no data set for this array. I also tried to use clearError, but that doesn't work also.\r\n\r\n`setValue('departments', data.departments, true);`\r\n\r\n**Expected behavior**\r\nIt should update array of values.\r\n\r\n```\r\nconst schema = yup.object().shape({\r\n\tdepartments: yup\r\n\t\t.array()\r\n\t\t.ensure()\r\n\t\t.min(1, 'At least 1 department selected is required')\r\n});\r\n\r\nconst { control, register, formState, handleSubmit, errors, clearError, setError, getValues, setValue } = useForm({\r\n\tdefaultValues: model,\r\n\tvalidationSchema: schema,\r\n\tsubmitFocusError: true,\r\n});\r\n\r\nregister({ name: 'departments' });\r\nregister({ name: 'employees' });\r\n\r\n<DepartmentEmployeesPicker\r\n\tcheckedDepartments={model.departments}\r\n\tcheckedEmployees={model.employees}\r\n\thasError={errors && errors.departments}\r\n\tonChange={data => {\r\n\t\tsetValue('departments', data.departments, true);\r\n\t\tsetValue('employees', data.employees);\r\n\t}}\r\n/>\r\n```\r\n\r\n**Desktop (please complete the following information):**\r\n - OS: Windows 10\r\n - Browser Chrome\r\n - Version 80.0.3987.163 (Official Build) (64-bit)\r\n\r\n",
    "comments_url": "https://api.github.com/repos/react-hook-form/react-hook-form/issues/1481/comments",
    "author": "rvision",
    "comments": [
      {
        "user": "bluebill1049",
        "created_at": "2020-04-23T11:52:47Z",
        "body": "you should put those \r\n\r\n```\r\nregister({ name: 'departments' });\r\nregister({ name: 'employees' });\r\n```\r\n\r\ninside a useEffect, otherwise, each render will re-register a new input into hook form."
      }
    ]
  },
  {
    "number": 1282,
    "title": "Password and Confirm Password field validation using validationSchema",
    "created_at": "2020-03-27T06:37:20Z",
    "closed_at": "2020-03-27T12:33:53Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/react-hook-form/react-hook-form/issues/1282",
    "body": "@bluebill1049 Can you show an example of password and confirm-password using validationSchema?\r\n\r\nI am doing my validation like this:\r\n```\r\nconst validationSchema = yup.object().shape({\r\n    newPassword: yup.string()\r\n      .required('New Password is required'),\r\n    confirmPassword: yup.string()\r\n      .required('Confirm Password is required')\r\n      .oneOf([yup.ref('password'), null], 'Passwords does not match'),\r\n  });\r\n```\r\nFor this scenario, please fire validations **onChange** or **onBlur**.\r\n\r\nAt first sight, everything looks fine. But if you follow this order, then you can see problems:\r\n1. Input \"abcde\" in newPassword field.\r\n2. Input \"abcdf\" in confirmPassword field. (It will throw error: Passwords does not match)\r\n3. Change newPassword to \"abcdf\"\r\n\r\nActual result: confirmPassword will still have errors.\r\nExpected result from user perspective: confirmPassword should not have any error as of now.\r\n\r\nCan you please check it?",
    "comments_url": "https://api.github.com/repos/react-hook-form/react-hook-form/issues/1282/comments",
    "author": "Vishal1419",
    "comments": [
      {
        "user": "bluebill1049",
        "created_at": "2020-03-27T06:51:21Z",
        "body": "if you want the other field to be re-validated as well, you can use `triggerValidation`."
      },
      {
        "user": "brunobraga95",
        "created_at": "2020-09-21T20:28:08Z",
        "body": "@Vishal1419 can you share a working example?"
      },
      {
        "user": "Vishal1419",
        "created_at": "2020-09-22T10:32:15Z",
        "body": "@brunobraga95 Thanks for reaching out to me.\r\n\r\nyou can get triggerValidation from useForm like this:\r\n```\r\nconst { triggerValidation } = useForm();\r\n```\r\n\r\nAnd then in your input you can trigger the validation on change like this:\r\n```\r\n<input\r\n    ...some props...\r\n    onChange={() => { triggerValidation('confirmPassword'); }}\r\n/>\r\n```\r\n\r\nPlease feel free to ask if you have any other problems. Thanks."
      }
    ]
  },
  {
    "number": 999,
    "title": "How to handle server responses not related to any field?",
    "created_at": "2020-02-09T14:38:41Z",
    "closed_at": "2020-02-10T00:31:13Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/react-hook-form/react-hook-form/issues/999",
    "body": "Hi! \r\n\r\nIs there a proper way to retrieve an error from server (general error, not related to a field) on submission and then show it to users, using the library?\r\n\r\nExample: login form with only email and password fields:\r\n\r\nform is submitted, but some network error happens on server. I would like to, elegantly, do something like setError(\"server\", \"Oh oh! Something went wrong. Please try again later.\")\r\n\r\nor maybe an \"status\" object on FormContext, which the user itself could manage. Would this bring performance issues? \r\n\r\nIf possible it could be  type safe too. \r\n\r\nwith:\r\nuseForm<FormValues,FormStatus>()\r\n\r\nJust asking, as I don't understand if this implementation would bring unnecessary re-renders, which is one of the biggest pro's of this library. Thanks!",
    "comments_url": "https://api.github.com/repos/react-hook-form/react-hook-form/issues/999/comments",
    "author": "outerlook",
    "comments": [
      {
        "user": "bluebill1049",
        "created_at": "2020-02-09T21:00:56Z",
        "body": "`setError(\"server\", \"serverError\", \"Oh oh! Something went wrong. Please try again later.\")`\r\n\r\nit's exactly what you had above. you can invoke that in the `handleSubmit` after your request"
      },
      {
        "user": "outerlook",
        "created_at": "2020-02-10T00:10:20Z",
        "body": "I can do that, but wouldn't later typescript complain about me trying to access errors.server, if server isn't a field at all?"
      },
      {
        "user": "bluebill1049",
        "created_at": "2020-02-10T00:14:45Z",
        "body": "you can type that external `serverError` as a field? alternative maybe just use `useState` then."
      },
      {
        "user": "ssuvorov",
        "created_at": "2020-08-21T13:59:03Z",
        "body": "What's the best way to reset a network error?\r\n`onSubmit(() => setError('networkError', { message: 'text' })) );`\r\nbut then should be something like `onAnyChange` event, where I can reset it. Can't find.\r\n"
      },
      {
        "user": "bluebill1049",
        "created_at": "2020-08-21T23:48:07Z",
        "body": "> What's the best way to reset a network error?\r\n> `onSubmit(() => setError('networkError', { message: 'text' })) );`\r\n> but then should be something like `onAnyChange` event, where I can reset it. Can't find.\r\n\r\n`clearErrors('networkError')`"
      },
      {
        "user": "ssuvorov",
        "created_at": "2020-08-22T07:44:28Z",
        "body": "@bluebill1049 a method, yes. But when to call it?"
      },
      {
        "user": "bluebill1049",
        "created_at": "2020-08-22T10:27:39Z",
        "body": "you can call it before `onSubmit`\r\n```\r\nonSubmit={() => {\r\n   clearErrors();\r\n   handleSbumit()()\r\n}}\r\n```\r\n\r\n"
      },
      {
        "user": "ssuvorov",
        "created_at": "2020-08-22T10:30:18Z",
        "body": "yeah, there is no other way. I can't clear it on any input change. For this, I'd need to add `setError('nerworkError', '')` in every change handler."
      },
      {
        "user": "bluebill1049",
        "created_at": "2020-08-22T10:50:20Z",
        "body": "you can do onChagne as well, just `clearError('xxx')`"
      }
    ]
  },
  {
    "number": 905,
    "title": "How to pass regex rules to `pattern` as variable",
    "created_at": "2020-01-24T23:15:20Z",
    "closed_at": "2020-01-25T00:04:50Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/react-hook-form/react-hook-form/issues/905",
    "body": "What is the correct way to pass regex value as variable in the pattern?\r\n\r\n`ref={register({\r\n                              required: \"This field is required\",\r\n                              pattern: {\r\n                                value: /`${item.regex}`/,\r\n                                message: `${item.errorMessage}`\r\n                              }\r\n                            })}`\r\n\r\nThanks!",
    "comments_url": "https://api.github.com/repos/react-hook-form/react-hook-form/issues/905/comments",
    "author": "maithuy",
    "comments": [
      {
        "user": "bluebill1049",
        "created_at": "2020-01-24T23:45:58Z",
        "body": "hey @maithuy you should be able to pass in regex, your example above: you may want to do new `new Regex()` and pass your string"
      },
      {
        "user": "maithuy",
        "created_at": "2020-01-24T23:54:18Z",
        "body": "hi @bluebill1049 I have a task to pass regex rule set by the api, if I hard code the regex, it works, but it doesn't work when I pass regex as variable. \r\n\r\nAre you suggesting \r\n\r\n`ref={register({ required: \"This field is required\", pattern: { value: new Regex(item.regex), message: ${item.errorMessage} } })}`"
      },
      {
        "user": "maithuy",
        "created_at": "2020-01-24T23:59:20Z",
        "body": "This works for me\r\n\r\n`\r\nref={register({\r\n                            required: \"This field is required\",\r\n                            pattern: {\r\n                              value: new RegExp(item.regex),\r\n                              message: `${item.errorMessage}`\r\n                            }\r\n                          })}\r\n`\r\n\r\nThanks so much! It would be very helpful if this info is available in the documentation.\r\n"
      }
    ]
  },
  {
    "number": 813,
    "title": "getting handleSubmit from useFormContext hooks",
    "created_at": "2020-01-11T01:20:52Z",
    "closed_at": "2020-01-11T20:37:00Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/react-hook-form/react-hook-form/issues/813",
    "body": "**Describe the bug**\r\nHi\r\nFirst thanks for your wonderful works.\r\nAfter trying useFormContext hooks, i'm not able to use handleSubmit function in a sub component\r\nIn fact, I have a FormSubmit component responsible of getting the submit function from the context (using useFormContext hook)\r\nIt seems that handleSubmit is never executed.\r\n\r\n\r\n```\r\n//Form component\r\ntype FormProps = {\r\n  validationSchema?: any;\r\n};\r\nconst Form: React.FC<FormProps> = ({ children, validationSchema }) => {\r\n  const formMethods = useForm({\r\n    validationSchema: validationSchema || {}\r\n  });\r\n\r\n  return <FormContext {...formMethods}>{children}</FormContext>;\r\n};\r\nexport default Form;\r\n\r\n//SubmitComponent\r\ntype SubmitProps = {\r\n  onSubmit?: (data: any) => any;\r\n};\r\n\r\nconst Submit: React.FC<SubmitProps> = ({ onSubmit }) => {\r\n  const data = useFormContext(); // retrieve all hook methods\r\n  // console.log(data);\r\n  return (\r\n    <Button\r\n      onPress={(): any => {\r\n        data.handleSubmit(onSubmit);\r\n      }}\r\n    >\r\n      My label\r\n    </Button>\r\n  );\r\n};\r\nexport default Submit;\r\n\r\n//App\r\n     <Form validationSchema={signinSchema}>\r\n        <View>\r\n          <InputText\r\n            name=\"firstName\"\r\n            label=\"First name\"\r\n          />\r\n        </View>\r\n        <View>\r\n          <InputText\r\n            name=\"lastName\"\r\n            label=\"Last name\"\r\n          />\r\n        </View>\r\n        <Submit onSubmit={(data: any): any => console.log(data)} />\r\n      </Form>\r\n\r\n```\r\nDo you have any ideas why my function handleSubmit I get from hooks does not executes the \"onSubmit\" callback\r\n\r\nAgain, thanks!\r\n",
    "comments_url": "https://api.github.com/repos/react-hook-form/react-hook-form/issues/813/comments",
    "author": "mdebo",
    "comments": [
      {
        "user": "bluebill1049",
        "created_at": "2020-01-11T01:32:45Z",
        "body": "`data.handleSubmit(onSubmit)(event)` I have replied you at spectrum early today as well :)"
      }
    ]
  },
  {
    "number": 812,
    "title": "Possible bug",
    "created_at": "2020-01-10T21:01:48Z",
    "closed_at": "2020-01-10T22:45:24Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/react-hook-form/react-hook-form/issues/812",
    "body": "When I use setValue to set initial values to the form it sets the touched to true for that field. \r\n\r\nTherefore the dirty flag goes to true.\r\n\r\nI may be wrong, but I think when we want to use setValue in the code, witch does not mean user interaction, we want the form to remain untouched and not dirty.\r\n\r\nMaybe we could send in a flag to say I want the form to be dirty or not via setValue:\r\n\r\nsetValue('field' , 10, validate = true, setTouched=false) : something like that.",
    "comments_url": "https://api.github.com/repos/react-hook-form/react-hook-form/issues/812/comments",
    "author": "marcosfsj",
    "comments": [
      {
        "user": "bluebill1049",
        "created_at": "2020-01-10T21:49:20Z",
        "body": "if you just want to set value for the input as the initial value. you can use reset() or defaultValues. That wouldn't trigger touched or dirty. "
      }
    ]
  },
  {
    "number": 665,
    "title": "setState set default values",
    "created_at": "2019-12-14T06:47:49Z",
    "closed_at": "2019-12-14T07:46:50Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/react-hook-form/react-hook-form/issues/665",
    "body": "When I set another state on my form component it will set all field to default value, cuz they come from my component props .\r\n\r\n```javascript\r\n  const { handleSubmit, register, errors } = useForm({\r\n    defaultValues: {\r\n      title: props.address.title,\r\n      phone: props.address.phone,\r\n      address: props.address.address,\r\n    },\r\n  });\r\n  const [location, setLocation] = useState({});\r\n```\r\n\r\n**Desktop (please complete the following information):**\r\n - Device: :Laptop\r\n - OS: windows\r\n - Browser chrome\r\n - Version  last\r\n\r\n",
    "comments_url": "https://api.github.com/repos/react-hook-form/react-hook-form/issues/665/comments",
    "author": "sayjeyhi",
    "comments": [
      {
        "user": "bluebill1049",
        "created_at": "2019-12-14T06:51:48Z",
        "body": "This is not clear. please supply with codesandbox or better explanation on your issue."
      },
      {
        "user": "bluebill1049",
        "created_at": "2019-12-14T06:52:12Z",
        "body": "you probably should use `reset()`"
      },
      {
        "user": "bluebill1049",
        "created_at": "2020-05-10T07:43:34Z",
        "body": "need richer context, I am not a mind reader... provide a codesandbox i can take a look."
      },
      {
        "user": "ghost",
        "created_at": "2020-05-10T07:47:52Z",
        "body": "import React  from 'react';\r\nimport { Card,CardBody, Button,Input,Form,Label,Row,Col,FormGroup} from 'reactstrap';\r\nimport { useForm ,Controller} from 'react-hook-form';\r\nimport ReactDatePicker from \"react-datepicker\";\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\nimport InvalidFeedback from 'components/InvalidFeedback'\r\n\r\nconst CreateFormComponent = (props) => {\r\n    \r\n\r\n    const { register, handleSubmit, errors,control  } = useForm({\r\n        defaultValues: {\r\n         ...props.defaultValues,\r\n        },\r\n      });\r\n      \r\n    const onSubmit = (data,e) => {\r\n        props.onSubmit(data)\r\n        e.target.reset();\r\n    }\r\n  \r\n  return (\r\n     \r\n          <Card>\r\n              <CardBody>\r\n                <Form onSubmit={handleSubmit(onSubmit)}>\r\n                    <Row>\r\n                    <Col md={6} xs={12}>\r\n                    <FormGroup>\r\n                    <Label >Title</Label>\r\n                    <Input type=\"text\" name=\"title\"  innerRef={register({required: true})} placeholder=\"title\"/>\r\n                    {errors.title && errors.title.type==='required' && <InvalidFeedback text=\"This field is required\" /> }\r\n                    </FormGroup>\r\n                    </Col>\r\n                    <Col md={6} xs={12}>\r\n                    <FormGroup>\r\n                    <Label >Date</Label>\r\n                    <Controller\r\n                        as={<ReactDatePicker minDate={new Date()} dateFormat=\"dd/MM/yyyy\"/>}\r\n                        control={control}\r\n                        valueName=\"selected\" \r\n                        onChange={([selected]) => selected}\r\n                        name=\"date\"\r\n                        className=\"form-control\"\r\n                        placeholderText=\"Select date\"\r\n                        rules={{ required: true }}\r\n                       />\r\n                        {errors.date && errors.date.type==='required' && <InvalidFeedback text=\"This field is required\" /> }\r\n                    </FormGroup>\r\n                    </Col>\r\n                    <Col md={6} xs={12}>\r\n                    <FormGroup>\r\n                  <Label>Status</Label>\r\n                        <Input type=\"select\" name=\"status\"  innerRef={register({required: true})}>\r\n                        <option value=\"active\">active</option>\r\n                            <option value=\"inactive\">inactive</option>\r\n                        </Input>\r\n\r\n                    </FormGroup>\r\n                    </Col>\r\n                    <Col md={6} xs={12}>\r\n                    <FormGroup>\r\n                    <Label >Description</Label>\r\n                    <Input type=\"textarea\" name=\"description\"  innerRef={register({required: true})} placeholder=\"description\"/>\r\n                    {errors.description && errors.description.type==='required' && <InvalidFeedback text=\"This field is required\" /> }\r\n                    </FormGroup>\r\n                    </Col>\r\n                    </Row>\r\n                    \r\n                     <center><Button color=\"primary\" className=\"submit-btn\" type=\"submit\">Create</Button></center>\r\n                </Form>\r\n               </CardBody>\r\n           </Card>\r\n\r\n    \r\n  );\r\n}\r\n\r\nexport default CreateFormComponent;\r\n"
      },
      {
        "user": "bluebill1049",
        "created_at": "2020-05-10T07:52:40Z",
        "body": "use `reset` at `useEffect`, if default values coming async"
      }
    ]
  },
  {
    "number": 239,
    "title": "Validating Zero",
    "created_at": "2019-08-20T11:01:08Z",
    "closed_at": "2019-08-21T22:03:44Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/react-hook-form/react-hook-form/issues/239",
    "body": "## Required validation triggers if my select returns number 0.\r\n\r\nSetting custom validation rules don't trigger when using setValue if I pass it number 0\r\n\r\n```\r\nregister(\r\n            {\r\n                name: 'myProp'\r\n            },\r\n            {\r\n                 required: 'whoops'\r\n             }\r\n        );\r\n```\r\n\r\nThis triggers if `setValue('myProp', 0, true);`\r\n\r\nAdditionally\r\n\r\n```\r\nregister(\r\n            {\r\n                name: 'myProp'\r\n            },\r\n            {\r\n                 required: 'whoops',\r\n                 validate: (id: number) => {\r\n                       return (id > -1 && id !== 999) || 'whoops';\r\n                  }\r\n             }\r\n        );\r\n```\r\n\r\n The validate function isn't even called if I use `setValue('myProp', 0, true);`\r\n\r\nI would expect the validate function to run every time there is an update.\r\nAlso, how should 0 values be used? Selects might legitimately return the number 0. \r\n\r\nThe ideal solution would be a property which allows 0 as valid?\r\n\r\nA quick fix is to cast everything as strings :(\r\n\r\nAny help is appreciated :)\r\n",
    "comments_url": "https://api.github.com/repos/react-hook-form/react-hook-form/issues/239/comments",
    "author": "sidonaldson",
    "comments": [
      {
        "user": "bluebill1049",
        "created_at": "2019-08-20T11:11:17Z",
        "body": "Thanks for the detailed issue report. \r\n\r\nFor your use case, I would recommend using validate without `required`.\r\n\r\nI followed standard HTML validation for required where the input value is a string.\r\n\r\n`<input name=\"test\" value=\"0\" />`\r\n\r\nbut we can make this work with `validate`\r\n\r\n```\r\n{\r\n  validate: (value) => {\r\n    if (Number.isNaN(value)) return 'Number please';\r\n    if (id > -1 && id !== 999) return 'whoops';\r\n  }\r\n} \r\n```\r\n"
      },
      {
        "user": "sidonaldson",
        "created_at": "2019-08-20T14:32:08Z",
        "body": "Thank you for the super fast response Bill!\r\n\r\nAs i'm using MUI and the select seems to need an empty string to be 'clean' i'm setting a defaultValue of an empty string.\r\n\r\n```\r\nconst { register, unregister, setValue, watch, errors, handleSubmit } = useForm<FormState>({\r\n        defaultValues: {\r\n            InputName: '',\r\n        }\r\n    });\r\n```\r\n\r\nTherefore for me the validation was super simple - removing `required` was the key.\r\n\r\n```\r\nregister(\r\n            {\r\n                name: 'InputName'\r\n            },\r\n            {\r\n                validate: (id: number | string) => {\r\n                   return id !== '' || 'whoops';\r\n            }\r\n);\r\n```\r\n\r\nIs this covered in the docs and I missed it? Happy to do a PR otherwise"
      }
    ]
  },
  {
    "number": 189,
    "title": "How to get checkbox checked status not value?",
    "created_at": "2019-08-06T11:50:48Z",
    "closed_at": "2019-08-07T09:32:32Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/react-hook-form/react-hook-form/issues/189",
    "body": "It seems like when using checkboxes it defaults to giving you the `e.target.value` rather than `e.target.checked`. How can I get the checked status rather than the value?\r\n\r\nThanks in advance.",
    "comments_url": "https://api.github.com/repos/react-hook-form/react-hook-form/issues/189/comments",
    "author": "Kelbie",
    "comments": [
      {
        "user": "bluebill1049",
        "created_at": "2019-08-06T11:58:12Z",
        "body": "Hmmm, I have encountered this issue three times now. \r\n\r\nThe difficulty that I am having right now is if you defined a value for checkbox, should you get its `value` or `checked`? if you want only `checked` then what about the user who wants the `value`?\r\n\r\nhence I decide to have the following code (in the lib):\r\n\r\n`if (isCheckBox(type)) return checked ? value || checked : false;`\r\n\r\nif checked you will always get the `value`. for unchecked return `false`. if you only want to know checked or not, you can convert the `value` to boolean.\r\n\r\nhope this makes sense, and happy for the good alternative suggestion."
      },
      {
        "user": "Kelbie",
        "created_at": "2019-08-06T12:12:50Z",
        "body": "I noticed I was getting either `on` or `false` which I thought was an issue on my end but it sounds like its excepted behavior based on what you said. I want it to return `true` and `false` but the problem is that if you define the value to be true in the html its a string not a boolean which is mildly inconvenient.\r\n\r\nIs there a way to specify in the `register` something like:\r\n\r\n    register({checkbox: \"checked\"}) // or \r\n    register({checkbox: \"value\"}) \r\n\r\nThen in `react-hook-form` do:\r\n\r\n    if (isCheckBox(type)) return e.target[checkbox]"
      },
      {
        "user": "bluebill1049",
        "created_at": "2019-08-06T12:19:34Z",
        "body": "what about do this `!!value` if all you want is true or false"
      },
      {
        "user": "Kelbie",
        "created_at": "2019-08-06T12:27:18Z",
        "body": "I could but that would require doing that for all my checkboxes in the `onSubmit` callback which doesn't seem like the right place to do it. In the meantime I'll do that but I suggest coming up with some way to specify what you want in the `register`."
      },
      {
        "user": "bluebill1049",
        "created_at": "2019-08-06T21:37:15Z",
        "body": "i think i have found the solution:\r\n\r\n3.21.8-beta.1\r\n\r\nplease help test above beta version"
      },
      {
        "user": "bluebill1049",
        "created_at": "2019-08-07T09:32:32Z",
        "body": "Thanks for the testing. that's not a bug `ref` takes a callback, going to publish the version and close this issue."
      },
      {
        "user": "Zik42",
        "created_at": "2019-12-22T17:09:54Z",
        "body": "@bluebill1049  onSubmit returns value instead of checked anyway. ... I found it comes when I use validation schema, it changes values from boolean to string"
      },
      {
        "user": "bluebill1049",
        "created_at": "2019-12-22T21:12:17Z",
        "body": "@Zik42 it depends if you have a value attribute in the checkbox."
      }
    ]
  },
  {
    "number": 79,
    "title": "Form validation does not work without submit button",
    "created_at": "2019-06-13T17:23:19Z",
    "closed_at": "2019-06-13T21:43:30Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/react-hook-form/react-hook-form/issues/79",
    "body": "I have form which should submit data when all fields are filled without any error and submit button is not needed in this case, but validation does not work without submit button. Can validation work without submit button?\r\n \"version\": \"3.11.0\"",
    "comments_url": "https://api.github.com/repos/react-hook-form/react-hook-form/issues/79/comments",
    "author": "pyliakm",
    "comments": [
      {
        "user": "bluebill1049",
        "created_at": "2019-06-13T21:25:42Z",
        "body": "yes, you can :)\r\n\r\n```\r\nconst onSubmit = data => { cosnole.log(data) }\r\n\r\n<span onClick={handleSubmit(onSubmit)}>test</span>\r\n```"
      }
    ]
  }
]