[
  {
    "number": 25569,
    "title": "OpenSSL Initialization Failure Due to Manually Mapped DLLs Not Recognized by GetModuleHandleExA",
    "created_at": "2024-09-29T21:58:05Z",
    "closed_at": "2024-09-30T13:06:42Z",
    "labels": [
      "help wanted",
      "triaged: feature"
    ],
    "url": "https://github.com/openssl/openssl/issues/25569",
    "body": "Say we stop using `LoadLibraryA` instead we create its equivalent for security purposes, the module we map windows wont be aware of it, for OpenSSL modules, when we map it, and attempt to initialize OpenSSL, its failing to robustly initialize on that Context, the reason exaclty becouse of `ossl_init_load_crypto_nodelete`, who returns false inside Crypto Initialize routine, becouse of the fact that WinApi `GetModuleHandleExA` is not aware of the manually mapped modules, how to approach this problem? notice that appart from that, when redirecting to another legit module, and forcing the function to return true, everything initialize as expected and OpenSSL works as normal (Sanity Tested Extensively).\r\nVersion 1.1.1w\r\nto reproduce the issue simply use any dll manual mapper and simply call `OPENSSL_init_crypto`",
    "comments_url": "https://api.github.com/repos/openssl/openssl/issues/25569/comments",
    "author": "pinwhell",
    "comments": [
      {
        "user": "nhorman",
        "created_at": "2024-09-30T08:50:17Z",
        "body": "Some Front matter: Openssl 1.1.1w is no longer supported.\n\nThat said, I don't think what you're trying to do is possible at the moment.  Doing the wrapping that you describe seems like it would prevent the use of GetModuleHandleEx.\n\nThat said, how are you creating the equivalent of LoadLibraryA?  Are you creating and linking to a separate DLL?"
      },
      {
        "user": "tom-cosgrove-arm",
        "created_at": "2024-09-30T09:09:45Z",
        "body": "Is this an issue in OpenSSL, or should it be a discussion?"
      },
      {
        "user": "nhorman",
        "created_at": "2024-09-30T09:11:47Z",
        "body": "I think thats to be determined.  Currently whats being attempted I don't think can be done.  The question to answer is, should it be possible?  i.e. is this a feature request?"
      },
      {
        "user": "tom-cosgrove-arm",
        "created_at": "2024-09-30T09:35:45Z",
        "body": "> The question to answer is, should it be possible?\r\n\r\n`LoadLibraryA` is a fundamental operating system API. Replacing these is almost certainly going to cause problems in some use-cases.\r\n\r\n> Say we stop using `LoadLibraryA` instead we create its equivalent for security purposes\r\n\r\nWithout knowing how the \"equivalent\" is created, and what \"security purposes\" means, this is a very vague requirement.\r\n\r\n> `GetModuleHandleExA` is not aware of the manually mapped modules\r\n\r\nSince `GetModuleHandleExA` is a fundamental operating system API that works with `LoadLibraryA`, it's clear that the \"equivalent to LoadLibraryA\" API isn't really equivalent.\r\n\r\nIt may be that what the OP wants (\"securing\" `LoadLibraryA` for an unspecified meaning of \"securing\") could be achieved by hooking `LoadLibraryA` and only allowing whitelisted requests through."
      },
      {
        "user": "nhorman",
        "created_at": "2024-09-30T10:03:06Z",
        "body": "@tom-cosgrove-arm are you suggesting that LoadLibraryA is a weak symbol that the author can override and call the underlying function after passing a whitelist test?  That would make sense"
      },
      {
        "user": "pinwhell",
        "created_at": "2024-09-30T11:32:08Z",
        "body": "not exaclty guys, let me explain why it precisely fails!, that call to GetModuleHandleEx was to pin the current OpenSSL module so it cant be unloaded, as you can see this action fails becouse the Module is not mapped by the OS, instead by us!, so the os is not aware of such module thus the reason why GetModuleHandleEx fails!, i was experimenting did a patch to that single thing, and OpenSSL succesfully initialized, worked, and was extensively tested, and passed all tests"
      },
      {
        "user": "pinwhell",
        "created_at": "2024-09-30T11:33:00Z",
        "body": "when i said, \"Replaced\" LoadLibraryA, i was refering mimicing its action, meaning manually loading the DLL instead of calling LoadLibraryA directly, and yes its a OpenSSL issue"
      },
      {
        "user": "nhorman",
        "created_at": "2024-09-30T12:02:50Z",
        "body": "You're still not being particularly clear in what you are trying to do.  Its clear that the call to GetModuleHandleEx pins libcrypto.so so that it can't be unloaded.\r\n\r\nFrom that we can conclude that the ability to pin a library is a requirement for openssl on windows.\r\n\r\nWhats unclear is exactly how you are mimicing the loading of libcrypto.  If you are not calling LoadLibraryA, what are you doing?  Are you just opening the file, memory mapping it, and resolving symbols on your own?\r\n\r\nIf so, OpenSSL was never meant to be loaded in that fashion.  Its always been assumed that the library is loaded by the operating systems, using API's that inform the OS of that operation. Thats not a bug, its a design choice.\r\n\r\nYou can continue to explore this approach, and if you have a proposed change, please feel free to post it, and we will gladly review it, but I expect your use case is not one openssl will likely choose to support natively"
      },
      {
        "user": "pinwhell",
        "created_at": "2024-09-30T12:48:37Z",
        "body": "> You're still not being particularly clear in what you are trying to do.  Its clear that the call to GetModuleHandleEx pins libcrypto.so so that it can't be unloaded.\n> \n> \n> \n> From that we can conclude that the ability to pin a library is a requirement for openssl on windows.\n> \n> \n> \n> Whats unclear is exactly how you are mimicing the loading of libcrypto.  If you are not calling LoadLibraryA, what are you doing?  Are you just opening the file, memory mapping it, and resolving symbols on your own?\n> \n> \n> \n> If so, OpenSSL was never meant to be loaded in that fashion.  Its always been assumed that the library is loaded by the operating systems, using API's that inform the OS of that operation. Thats not a bug, its a design choice.\n> \n> \n> \n> You can continue to explore this approach, and if you have a proposed change, please feel free to post it, and we will gladly review it, but I expect your use case is not one openssl will likely choose to support natively\n\nI am mapping the library, solving its imports, handling relocations, handling TLS, which is enough to make everything works, as you see for security reasons I am not mapping it in the OS records of loaded libs, otherwise simply call LoadLib in the first place and problem solved, maybe there could be a option to control pinning mechanism manually so users can selectively decide if pinning or not, to avoid this type of problems, I guess it definitely an edge case probably beyond scope of OpenSSL, but could be cool to support that bare metal like environment"
      },
      {
        "user": "mattcaswell",
        "created_at": "2024-09-30T12:58:16Z",
        "body": "You can compile OpenSSL with \"no-pinshared\" to turn off pinning."
      },
      {
        "user": "pinwhell",
        "created_at": "2024-09-30T13:06:34Z",
        "body": "> You can compile OpenSSL with \"no-pinshared\" to turn off pinning.\n\nIf this is such an option I do believe it would be the ideal solution, I wasn't aware of it, Just to be clear for anyone who might get the same problem, on the 1.1.1w just handling this issue, OpenSSL seems to behave properly when manually mapped, Thanks guys ..."
      }
    ]
  },
  {
    "number": 20073,
    "title": "AES-256 and 192 produce garbage output with -engine padlock (VIA Padlock)",
    "created_at": "2023-01-18T12:35:26Z",
    "closed_at": "2023-05-05T16:14:33Z",
    "labels": [
      "branch: master",
      "branch: 1.1.1",
      "help wanted",
      "triaged: bug",
      "branch: 3.0",
      "branch: 3.1"
    ],
    "url": "https://github.com/openssl/openssl/issues/20073",
    "body": "OpenSSL fail to properly encrypt or decrypt AES-192 and AES-256 data (tested CTR and CBC modes), producing garbage output, without any errors, when using VIA Padlock hardware accelerator on VIA Eden Esther CPU.\r\n128 key size modes return correct results.\r\n\r\nTested on OpenSSL 1.1.1n, 1.1.1s, 3.0.7\r\n\r\nWithout `-engine padlock`:\r\n\r\n```\r\n$ echo 12345678 | openssl enc -aes-256-ctr -e -nosalt -K 8d06b54b75a39a2ec1147871b4cdcb589525cde68034d39439183feedcf5e79a -iv 84eb471441a65cf6a27b3d6976728227 | hexdump -C\r\n00000000  67 5b 8d ba 61 e2 07 84  79                       |g[..a...y|\r\n\r\n$ echo -ne \"\\x67\\x5b\\x8d\\xba\\x61\\xe2\\x07\\x84\\x79\" | openssl enc -aes-256-ctr -d -nosalt -K 8d06b54b75a39a2ec1147871b4cdcb589525cde68034d39439183feedcf5e79a -iv 84eb471441a65cf6a27b3d6976728227 | hexdump -C\r\n00000000  31 32 33 34 35 36 37 38  0a                       |12345678.|\r\n```\r\n\r\nWith `-engine padlock`:\r\n\r\n```\r\n# Encryption WITH engine padlock\r\n$ echo 12345678 | openssl enc -aes-256-ctr -e -nosalt -K 8d06b54b75a39a2ec1147871b4cdcb589525cde68034d39439183feedcf5e79a -iv 84eb471441a65cf6a27b3d6976728227 -engine padlock | hexdump -C\r\nengine \"padlock\" set.\r\n00000000  79 86 a0 04 c7 c6 9f 36  80                       |y......6.|\r\n\r\n# Decrypting result produced by engine padlock (garbage) WITH engine padlock\r\n$ echo -ne \"\\x79\\x86\\xa0\\x04\\xc7\\xc6\\x9f\\x36\\x80\" | openssl enc -aes-256-ctr -d -nosalt -K 8d06b54b75a39a2ec1147871b4cdcb589525cde68034d39439183feedcf5e79a -iv 84eb471441a65cf6a27b3d6976728227 -engine padlock | hexdump -C\r\nengine \"padlock\" set.\r\n00000000  31 32 33 34 35 36 37 38  0a                       |12345678.|\r\n\r\n# Decrypting result produced by engine padlock (garbage) WITHOUT engine padlock\r\n$ echo -ne \"\\x79\\x86\\xa0\\x04\\xc7\\xc6\\x9f\\x36\\x80\" | openssl enc -aes-256-ctr -d -nosalt -K 8d06b54b75a39a2ec1147871b4cdcb589525cde68034d39439183feedcf5e79a -iv 84eb471441a65cf6a27b3d6976728227 | hexdump -C\r\n00000000  2f ef 1e 8a 93 12 af 8a  f3                       |/........|\r\n\r\n# Decrypting result produced WITHOUT engine padlock (proper AES) WITH engine padlock\r\n$ echo -ne \"\\x67\\x5b\\x8d\\xba\\x61\\xe2\\x07\\x84\\x79\" | openssl enc -aes-256-ctr -d -nosalt -K 8d06b54b75a39a2ec1147871b4cdcb589525cde68034d39439183feedcf5e79a -iv 84eb471441a65cf6a27b3d6976728227 -engine padlock | hexdump -C\r\nengine \"padlock\" set.\r\n00000000  2f ef 1e 8a 93 12 af 8a  f3                       |/........|",
    "comments_url": "https://api.github.com/repos/openssl/openssl/issues/20073/comments",
    "author": "ValdikSS",
    "comments": [
      {
        "user": "bernd-edlinger",
        "created_at": "2023-01-25T07:30:09Z",
        "body": "Hello @ValdikSS \r\nI was not aware that padlock hardware is still in use.\r\n\r\nI think there is likely another problem if you configure\r\nthe 1.1.1 version with `./config -DOPENSSL_AES_CONST_TIME`,\r\nthen my constant-time AES implementation replaces the `AES_set_encrypt_key`\r\nand `AES_set_decrypt_key` functions with a different encoding, so I'd expect\r\nthe encryption to fail in a different way.\r\n\r\nSince I am not able to do any testing with padlock, may I ask you\r\nto test if my assumption about the AES CONST TIME code is correct.\r\nAnd if that is the case if the following patch would fix it?\r\n\r\n```\r\ndiff --git a/engines/e_padlock.c b/engines/e_padlock.c\r\nindex a82c07e813..bbff13b29c 100644\r\n--- a/engines/e_padlock.c\r\n+++ b/engines/e_padlock.c\r\n@@ -221,6 +221,19 @@ void padlock_sha1(void *ctx, const void *inp, size_t len);\r\n void padlock_sha256_oneshot(void *ctx, const void *inp, size_t len);\r\n void padlock_sha256(void *ctx, const void *inp, size_t len);\r\n \r\n+#  ifndef AES_ASM\r\n+static int padlock_aes_set_encrypt_key(const unsigned char *userKey,\r\n+                                       const int bits,\r\n+                                       AES_KEY *key);\r\n+static int padlock_aes_set_decrypt_key(const unsigned char *userKey,\r\n+                                       const int bits,\r\n+                                       AES_KEY *key);\r\n+#   define AES_ASM\r\n+#   define AES_set_encrypt_key padlock_aes_set_encrypt_key\r\n+#   define AES_set_decrypt_key padlock_aes_set_decrypt_key\r\n+#   include \"../crypto/aes/aes_core.c\"\r\n+#endif\r\n+\r\n /*\r\n  * Load supported features of the CPU to see if the PadLock is available.\r\n  */\r\n```\r\n\r\nWhile it is unfortunate that this uses non-constant time code for the key derivation\r\nit is the most simple fix I could come up without access to real hardware."
      },
      {
        "user": "ValdikSS",
        "created_at": "2023-01-25T10:26:05Z",
        "body": "@bernd-edlinger, unfortunately it seem to produce exactly the same incorrect results with both with and without the patch when compiling with `-DOPENSSL_AES_CONST_TIME`.\r\nIf you have time and desire to fix this issue, I can provide you an SSH access to this machine. This is WYSE C10LE running Debian 11.\r\n`ssh -J valdikss@ssh-j.com user@via`\r\nYour SSH key is already added to the machine. Password for `user` and `root` is `1`. You can do everything it needs.\r\nThe machine is slow, compilation takes a lot of time. You'd better compile .deb packages in a Debian Bullseye x86 (i386) container on your machine and transfer it to VIA."
      },
      {
        "user": "bernd-edlinger",
        "created_at": "2023-01-25T19:35:06Z",
        "body": "Ah, okay, the byte-swap is always necessary....\r\nso make that\r\n```\r\ndiff --git a/engines/e_padlock.c b/engines/e_padlock.c\r\nindex a82c07e..38327df 100644\r\n--- a/engines/e_padlock.c\r\n+++ b/engines/e_padlock.c\r\n@@ -144,6 +144,19 @@ static int padlock_init(ENGINE *e)\r\n     return (padlock_use_rng || padlock_use_ace);\r\n }\r\n \r\n+#  ifndef AES_ASM\r\n+static int padlock_aes_set_encrypt_key(const unsigned char *userKey,\r\n+                                       const int bits,\r\n+                                       AES_KEY *key);\r\n+static int padlock_aes_set_decrypt_key(const unsigned char *userKey,\r\n+                                       const int bits,\r\n+                                       AES_KEY *key);\r\n+#   define AES_ASM\r\n+#   define AES_set_encrypt_key padlock_aes_set_encrypt_key\r\n+#   define AES_set_decrypt_key padlock_aes_set_decrypt_key\r\n+#   include \"../crypto/aes/aes_core.c\"\r\n+#  endif\r\n+\r\n /*\r\n  * This stuff is needed if this ENGINE is being compiled into a\r\n  * self-contained shared-library.\r\n@@ -639,12 +652,10 @@ padlock_aes_init_key(EVP_CIPHER_CTX *ctx, const unsigned char *key,\r\n             AES_set_decrypt_key(key, key_len, &cdata->ks);\r\n         else\r\n             AES_set_encrypt_key(key, key_len, &cdata->ks);\r\n-#   ifndef AES_ASM\r\n         /*\r\n          * OpenSSL C functions use byte-swapped extended key.\r\n          */\r\n         padlock_key_bswap(&cdata->ks);\r\n-#   endif\r\n         cdata->cword.b.keygen = 1;\r\n         break;\r\n \r\n```\r\n\r\nwith that patch I get the following:\r\n```\r\n echo -n 1234567812345678 | OPENSSL_ENGINES=../engines ../util/shlib_wrap.sh ./openssl enc -aes-256-cbc -e -nopad -K 8d06b54b75a39a2ec1147871b4cdcb589525cde68034d39439183feedcf5e79a -iv 84eb471441a65cf6a27b3d6976728227 | hexdump -C\r\n00000000  26 e8 bf 94 1a 6f 5f 05  49 3e 0c 6e d8 0c 64 58  |&....o_.I>.n..dX|\r\n00000010\r\n$ echo -n 1234567812345678 | OPENSSL_ENGINES=../engines ../util/shlib_wrap.sh ./openssl enc -aes-256-cbc -e -nopad -K 8d06b54b75a39a2ec1147871b4cdcb589525cde68034d39439183feedcf5e79a -iv 84eb471441a65cf6a27b3d6976728227 -engine padlock | hexdump -C\r\nengine \"padlock\" set.\r\n00000000  26 e8 bf 94 1a 6f 5f 05  49 3e 0c 6e d8 0c 64 58  |&....o_.I>.n..dX|\r\n00000010\r\n$ echo -ne \"\\x26\\xe8\\xbf\\x94\\x1a\\x6f\\x5f\\x05\\x49\\x3e\\x0c\\x6e\\xd8\\x0c\\x64\\x58\" | OPENSSL_ENGINES=../engines ../util/shlib_wrap.sh ./openssl enc -aes-256-cbc -d -nopad -K 8d06b54b75a39a2ec1147871b4cdcb589525cde68034d39439183feedcf5e79a -iv 84eb471441a65cf6a27b3d6976728227 | hexdump -C\r\n00000000  31 32 33 34 35 36 37 38  31 32 33 34 35 36 37 38  |1234567812345678|\r\n00000010\r\n$ echo -ne \"\\x26\\xe8\\xbf\\x94\\x1a\\x6f\\x5f\\x05\\x49\\x3e\\x0c\\x6e\\xd8\\x0c\\x64\\x58\" | OPENSSL_ENGINES=../engines ../util/shlib_wrap.sh ./openssl enc -aes-256-cbc -d -nopad -K 8d06b54b75a39a2ec1147871b4cdcb589525cde68034d39439183feedcf5e79a -iv 84eb471441a65cf6a27b3d6976728227 -engine padlock | hexdump -C\r\nengine \"padlock\" set.\r\n00000000  31 32 33 34 35 36 37 38  31 32 33 34 35 36 37 38  |1234567812345678|\r\n00000010\r\n```\r\n\r\nThanks a lot for your help!\r\nI will send a pull request later today or tomorrow..."
      },
      {
        "user": "ValdikSS",
        "created_at": "2023-01-26T09:34:42Z",
        "body": "Can confirm, when `ifndef AES_ASM` is removed for bswap it works with both `-DOPENSSL_AES_CONST_TIME` and without it.\r\nThank you!"
      }
    ]
  },
  {
    "number": 19014,
    "title": "Options `-ssl3`,, `-no_ssl3`, `-no_tls1`, `-no_tls1_1`, `-no_tls1_2`, `-no_tls1_3`,  not recognised",
    "created_at": "2022-08-17T08:58:13Z",
    "closed_at": "2023-04-28T12:08:30Z",
    "labels": [
      "good first issue",
      "help wanted",
      "triaged: documentation"
    ],
    "url": "https://github.com/openssl/openssl/issues/19014",
    "body": "_release:_ openssl-3.0.5\r\n\r\n_manual reference:_\r\n```\r\n$ man 'OPENSSL(1ossl)'\r\n(...)\r\n       -ssl3, -tls1, -tls1_1, -tls1_2, -tls1_3, -no_ssl3, -no_tls1, -no_tls1_1, -no_tls1_2, -no_tls1_3\r\n           These options require or disable the use of the specified SSL or TLS protocols. (...)\r\n```\r\nHello. options `-ssl3`,, `-no_ssl3`, `-no_tls1`, `-no_tls1_1`, `-no_tls1_2`, `-no_tls1_3`,  not recognised; illustration:\r\n```\r\n$ openssl ciphers -ssl3\r\nlist: Use -help for summary.\r\n```\r\nAs opposed, other options are recognised; illustration:\r\n```\r\n$ openssl ciphers -tls1_3 | sed 's/:/\\n/g' | head -1\r\nTLS_AES_256_GCM_SHA384\r\n```",
    "comments_url": "https://api.github.com/repos/openssl/openssl/issues/19014/comments",
    "author": "Ricky-Tigg",
    "comments": [
      {
        "user": "t8m",
        "created_at": "2022-08-17T11:06:54Z",
        "body": "The no_* options do not apply to the ciphers command but they apply to other commands such as s_client. The -ssl3 option is probably not supported by your build but it is supported if enable-ssl3 is used with the build configuration. So perhaps some clarification in the manual page would be appropriate but the options should not be removed from the manual page."
      },
      {
        "user": "Ricky-Tigg",
        "created_at": "2022-08-17T14:12:43Z",
        "body": "That was much helpful. At the time the report was sent, i was not yet aware of the existence of `openssl help <command>`. Now I am. Consulting `openssl help ciphers` would have been beneficial before reporting. Then, by default,  version 3 of SSL was disabled which, if i interpret correctly, caused the output.\r\n```\r\n$ openssl list -disabled | column\r\nDisabled algorithms:\tMDC2\tSM4\tEC2M\tSM2\tSSL3\r\n```"
      },
      {
        "user": "rkarmaka98",
        "created_at": "2023-04-23T20:37:54Z",
        "body": "/assign"
      }
    ]
  },
  {
    "number": 10060,
    "title": "Consistent formatting of I<a:b> in manpages",
    "created_at": "2019-09-30T16:51:47Z",
    "closed_at": "2020-11-18T18:38:00Z",
    "labels": [
      "help wanted",
      "triaged: documentation"
    ],
    "url": "https://github.com/openssl/openssl/issues/10060",
    "body": "Many of our commands take a key/value pair -- host:port, opt:value, etc.\r\n\r\nThe proper formatting of this is apparently ```I<first>:I<second>```\r\n\r\nWhile fixing those, should we also standardize on the terminology?  I see ```opt:value``` ```hostname:port``` ```paramset:X``` etc.  (Most of these you will not see until #10022 is merged).",
    "comments_url": "https://api.github.com/repos/openssl/openssl/issues/10060/comments",
    "author": "richsalz",
    "comments": [
      {
        "user": "levitte",
        "created_at": "2019-09-30T17:33:56Z",
        "body": "I have to revise that what I said earlier. From careful read of man(1), it turns out that all parts of a command that should be typed in exactly as is should be bold. Therefore, `I<first>B<:>I<second>`.\r\n\r\n(the question of variable option names is separate, FYI) "
      },
      {
        "user": "richsalz",
        "created_at": "2020-11-18T18:38:00Z",
        "body": "I think @levitte and I fixed this now, closing.  Richard, please re-open if there's still some nits.\r\n"
      }
    ]
  },
  {
    "number": 8394,
    "title": "const mismatch between ",
    "created_at": "2019-03-04T13:21:26Z",
    "closed_at": "2020-12-24T12:21:30Z",
    "labels": [
      "good first issue",
      "help wanted",
      "triaged: feature"
    ],
    "url": "https://github.com/openssl/openssl/issues/8394",
    "body": "The PKCS8_pkey_get0_attrs function returns const STACK_OF(X509_ATTRIBUTE) and there is no non-const variant of this function.\r\nThe X509at_get0_data_by_OBJ accepts STACK_OF(X509_ATTRIBUTE)\r\n",
    "comments_url": "https://api.github.com/repos/openssl/openssl/issues/8394/comments",
    "author": "beldmit",
    "comments": [
      {
        "user": "levitte",
        "created_at": "2019-11-05T14:05:34Z",
        "body": "Without looking, I would think of constifying the argument to `X509at_get0_data_by_OBJ` before anything else, if that's possible."
      },
      {
        "user": "akshit-akhoury",
        "created_at": "2020-10-02T15:55:34Z",
        "body": "Hey, if the ask is to set the arguments of `X509at_get0_data_by_OBJ ` to accept const STACK_OF(X509_ATTRIBUTE), I think I can make this change.\r\n"
      },
      {
        "user": "mattcaswell",
        "created_at": "2020-10-02T15:59:10Z",
        "body": "> Hey, if the ask is to set the arguments of X509at_get0_data_by_OBJ to accept const STACK_OF(X509_ATTRIBUTE), I think I can make this change.\r\n\r\nYes please!"
      },
      {
        "user": "akshit-akhoury",
        "created_at": "2020-10-02T17:19:36Z",
        "body": "Hey, I've created a PR, wasn't sure if this change required either update of docs or tests."
      },
      {
        "user": "beldmit",
        "created_at": "2020-12-24T12:21:29Z",
        "body": "Fixed by #13062"
      }
    ]
  }
]