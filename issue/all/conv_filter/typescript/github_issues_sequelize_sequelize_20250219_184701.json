[
  {
    "number": 12319,
    "title": "OR block with nested AND not generated to SQL",
    "created_at": "2020-05-27T18:23:29Z",
    "closed_at": "2020-05-29T20:04:06Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/sequelize/sequelize/issues/12319",
    "body": "## Issue Description\r\n\r\nAn OR block is ignored in a query when generating SQL. Changing the order of the OR blocks causes always only the last one to be generated. The nested AND is generated correctly when moving the first OR block after the last one.\r\n\r\n### What are you doing?\r\n\r\n```js\r\nawait MyTable.findAll({\r\nwhere: {\r\n  checkedAt: null,\r\n  abcId: {[Op.not]: null},\r\n  [Op.or]: [\r\n    {cancelledAt: {[Op.lt]: moment().subtract(3, 'minutes')}},\r\n    {[Op.and]: [\r\n      {orderId: null},\r\n      {orderDate: {[Op.lt]: moment().subtract(2, 'hours')}}\r\n    ]}\r\n  ],\r\n  [Op.or]: [\r\n    {something: {[Op.not]: 'qwerty'}},\r\n    {fooBar: {[Op.not]: null}}\r\n  ]\r\n}\r\n});\r\n```\r\n\r\n### What do you expect to happen?\r\n\r\n```\r\nWHERE (deleted_at IS NULL \r\nAND (\r\n(something != 'qwerty' OR foo_bar IS NOT NULL) \r\nAND (cancelled_at < '...' OR (order_id IS NULL AND order_date < '...')) \r\nAND (something != 'qwerty' OR foo_bar IS NOT NULL) \r\nAND checked_at IS NULL AND abc_id IS NOT NULL)\r\n);\r\n```\r\n\r\n### What is actually happening?\r\n\r\n```\r\nWHERE (deleted_at IS NULL \r\nAND (\r\n(something != 'qwerty' OR foo_bar IS NOT NULL) \r\nAND checked_at IS NULL AND abc_id IS NOT NULL)\r\n);\r\n```\r\n\r\n### Environment\r\n\r\n- Sequelize version: 5.21.10\r\n- Node.js version: 12.16.3\r\n- Operating System: MacOS Catalina 10.15.4 (19E287)\r\n\r\n## Issue Template Checklist\r\n\r\n### How does this problem relate to dialects?\r\n\r\n- [ ] I think this problem happens regardless of the dialect.\r\n- [ ] I think this problem happens only for the following dialect(s): <!-- Put dialect(s) here -->\r\n- [X] I don't know, I was using PostgreSql, with connector library version 8.2.1 and database version 9.6.17\r\n\r\n### Would you be willing to resolve this issue by submitting a Pull Request?\r\n\r\n- [ ] Yes, I have the time and I know how to start.\r\n- [ ] Yes, I have the time but I don't know how to start, I would need guidance.\r\n- [ ] No, I don't have the time, although I believe I could do it if I had the time...\r\n- [X] No, I don't have the time and I wouldn't even know how to start.\r\n",
    "comments_url": "https://api.github.com/repos/sequelize/sequelize/issues/12319/comments",
    "author": "tapz",
    "comments": [
      {
        "user": "sushantdhiman",
        "created_at": "2020-05-28T04:34:01Z",
        "body": ":) Yeah it wont work, object key is `Op.or` so last one will always override. For example\r\n\r\n```js\r\n{\r\n  a: 1,\r\n  a: 2\r\n}\r\n```\r\n will always give you\r\n\r\n```js\r\n{\r\n  a: 2\r\n}\r\n```\r\n\r\nFor your usecase, perhaps wrap both `Op.or` blocks under `Op.and`\r\n\r\n```js\r\n{\r\n  where: {\r\n    checkedAt: null,\r\n    abcId: {\r\n      [Op.not]: null\r\n    },\r\n    [Op.and]: [{\r\n        [Op.or]: [{\r\n          cancelledAt: {\r\n            [Op.lt]: moment().subtract(3, 'minutes')\r\n          }\r\n        }, {\r\n          [Op.and]: [{\r\n            orderId: null\r\n          }, {\r\n            orderDate: {\r\n              [Op.lt]: moment().subtract(2, 'hours')\r\n            }\r\n          }]\r\n        }]\r\n      }, {\r\n        [Op.or]: [{\r\n          something: {\r\n            [Op.not]: 'qwerty'\r\n          }\r\n        }, {\r\n          fooBar: {\r\n            [Op.not]: null\r\n          }\r\n        }]\r\n      }\r\n    }\r\n  }\r\n}\r\n```\r\n"
      },
      {
        "user": "tapz",
        "created_at": "2020-05-28T07:39:19Z",
        "body": "Didn't realize they actually are keys :-) Sequelize should provide something like Op.or2, Op.or3 etc. so that I would not need to add more nesting."
      }
    ]
  },
  {
    "number": 11018,
    "title": "findOne adds \"ORDER BY\" internally breaking MSSQL",
    "created_at": "2019-05-30T09:05:25Z",
    "closed_at": "2020-06-08T09:06:41Z",
    "labels": [
      "question",
      "dialect: mssql"
    ],
    "url": "https://github.com/sequelize/sequelize/issues/11018",
    "body": "## What are you doing?\r\nTrying to get count of the whole table records while executing some other aggregate functions like \"max\", while there is no `group by` specified. \r\n\r\n**To Reproduce**\r\nSteps to reproduce the behavior:\r\n1. Define model:\r\n```js\r\nsequelize.define('item', {\r\n    id: {\r\n         type: DataTypes.STRING,\r\n         allowNull: false,\r\n         primaryKey: true\r\n    },\r\n    column_1: {\r\n        type: DataTypes.DATE,\r\n\tallowNull: true,\r\n    }\r\n});\r\n```\r\n2. Run the following\r\n```js\r\nconst result = await model.Item.findOne({\r\n    attributes: [\r\n        [db.sequelize.fn('max', db.sequelize.col('column_1')), 'max_column_1'],\r\n        [db.sequelize.fn('count', '1'), 'count']\r\n    ],\r\n});\r\n```\r\n\r\n3. See error\r\n```\r\nSequelizeDatabaseError: Column \"item.id\" is invalid in the ORDER BY clause because it is not contained in either an aggregate function or the GROUP BY clause.\r\n    at Query.formatError (/project-path/node_modules/sequelize/lib/dialects/mssql/query.js:309:12)\r\n    at Request.connection.lib.Request [as userCallback] (/project-path/node_modules/sequelize/lib/dialects/mssql/query.js:69:23)\r\n    at Request.callback (/project-path/node_modules/tedious/lib/request.js:37:27)\r\n    at Connection.endOfMessageMarkerReceived (/project-path/node_modules/tedious/lib/connection.js:2149:20)\r\n    at Connection.dispatchEvent (/project-path/node_modules/tedious/lib/connection.js:1172:36)\r\n    at Parser.tokenStreamParser.on (/project-path/node_modules/tedious/lib/connection.js:975:14)\r\n    at Parser.emit (events.js:193:13)\r\n    at Parser.parser.on.token (/project-path/node_modules/tedious/lib/token/token-stream-parser.js:27:14)\r\n    at Parser.emit (events.js:193:13)\r\n    at addChunk (/project-path/node_modules/tedious/node_modules/readable-stream/lib/_stream_readable.js:297:12)\r\n    at readableAddChunk (/project-path/node_modules/tedious/node_modules/readable-stream/lib/_stream_readable.js:279:11)\r\n    at Parser.Readable.push (/project-path/node_modules/tedious/node_modules/readable-stream/lib/_stream_readable.js:240:10)\r\n    at Parser.Transform.push (/project-path/node_modules/tedious/node_modules/readable-stream/lib/_stream_transform.js:139:32)\r\n    at Parser.afterTransform (/project-path/node_modules/tedious/node_modules/readable-stream/lib/_stream_transform.js:88:10)\r\n    at Parser._transform (/project-path/node_modules/tedious/lib/token/stream-parser.js:41:7)\r\n    at Parser.Transform._read (/project-path/node_modules/tedious/node_modules/readable-stream/lib/_stream_transform.js:177:10)\r\n    at Parser.Transform._write (/project-path/node_modules/tedious/node_modules/readable-stream/lib/_stream_transform.js:164:83)\r\n    at doWrite (/project-path/node_modules/tedious/node_modules/readable-stream/lib/_stream_writable.js:405:139)\r\n    at writeOrBuffer (/project-path/node_modules/tedious/node_modules/readable-stream/lib/_stream_writable.js:394:5)\r\n    at Parser.Writable.write (/project-path/node_modules/tedious/node_modules/readable-stream/lib/_stream_writable.js:303:11)\r\n    at Parser.addEndOfMessageMarker (/project-path/node_modules/tedious/lib/token/token-stream-parser.js:45:24)\r\n    at Connection.message (/project-path/node_modules/tedious/lib/connection.js:2138:32)\r\n```\r\n\r\n## What do you expect to happen?\r\n`SELECT max([column_1]) AS [max_column_1],count(1) AS [count] FROM [item] AS [item];`\r\n\r\n## What is actually happening?\r\n`SELECT max([column_1]) AS [max_column_1],count(1) AS [count] FROM [item] AS [item] ORDER BY [item].[id] OFFSET 0 ROWS FETCH NEXT 1 ROWS ONLY;`\r\n\r\n## Environment\r\nDialect:\r\n- mssql\r\nDialect **tedious** version: 6.1.1\r\nDatabase version: Microsoft SQL Azure (RTM) - 12.0.2000.8 \r\nSequelize version: both v4 and v5\r\nNode Version: 11.15.0\r\nOS: Mac OS\r\n\r\nTested with latest release:\r\n- Yes, v5.8.7",
    "comments_url": "https://api.github.com/repos/sequelize/sequelize/issues/11018/comments",
    "author": "myleshk",
    "comments": [
      {
        "user": "sushantdhiman",
        "created_at": "2020-06-08T09:06:41Z",
        "body": "This is how `findOne` works, it limits records by 1. Use `findAll`"
      },
      {
        "user": "myleshk",
        "created_at": "2020-06-10T03:49:34Z",
        "body": "ok `findAll` works."
      }
    ]
  },
  {
    "number": 10984,
    "title": "Sequelize automatically sets a default value for NOT NULL columns",
    "created_at": "2019-05-22T07:58:12Z",
    "closed_at": "2019-07-30T15:42:08Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/sequelize/sequelize/issues/10984",
    "body": "I am currently running Sequelize.js code on my MySQL database, that is created using migrations. I have a table with persons that is defined like this:\r\n\r\n```\r\nreturn queryInterface.createTable('Persons', {\r\n      id: {\r\n        allowNull: false,\r\n        autoIncrement: true,\r\n        primaryKey: true,\r\n        unique: true,\r\n        type: Sequelize.INTEGER\r\n      },\r\n      email: {\r\n        allowNull: false,\r\n        unique: true,\r\n        type: Sequelize.STRING\r\n      },\r\n      firstName: {\r\n        type: Sequelize.STRING\r\n      },\r\n      lastName: {\r\n        type: Sequelize.STRING\r\n      },\r\n      createdAt: {\r\n        allowNull: false,\r\n        type: Sequelize.DATE\r\n      },\r\n      updatedAt: {\r\n        allowNull: false,\r\n        type: Sequelize.DATE\r\n      }\r\n    });\r\n```\r\n\r\nand the resulting table looks like this:\r\n\r\n```\r\n`Persons` (\r\n  `id` int(11) NOT NULL AUTO_INCREMENT,\r\n  `email` varchar(255) NOT NULL,\r\n  `firstName` varchar(255) DEFAULT NULL,\r\n  `lastName` varchar(255) DEFAULT NULL,\r\n  `createdAt` datetime NOT NULL,\r\n  `updatedAt` datetime NOT NULL,\r\n  PRIMARY KEY (`id`),\r\n  UNIQUE KEY `id` (`id`),\r\n  UNIQUE KEY `email` (`email`)\r\n)\r\n```\r\n\r\nWhen I add an entry to the database using Model.create({}) (with nothing between the brackets), the following object is added to the database:\r\n\r\n```\r\nid  email   firstName   lastName    createdAt   updatedAt\r\n1   ''      NULL        NULL        2019-05-21 15:33:13 2019-05-21 15:33:13\r\nEvery NOT NULL column I have in my database gets a default value (empty string for varchar, false for boolean, NOW() for datetime).\r\n```\r\n\r\nThe Sequelize.js docs state the following:\r\n\r\n> setting allowNull to false will add NOT NULL to the column, which means an error will be thrown from the DB when the query is executed if the column is null. If you want to check that a value is not null before querying the DB, look at the validations section below.\r\n> \r\n> title: { type: Sequelize.STRING, allowNull: false },\r\n\r\nI never get this error. When trying to insert a new row with NULL as value for email in the database directly, I do get an error, but not with Sequelize.js",
    "comments_url": "https://api.github.com/repos/sequelize/sequelize/issues/10984/comments",
    "author": "Brammz",
    "comments": [
      {
        "user": "papb",
        "created_at": "2019-07-25T00:57:04Z",
        "body": "Do you have `allowNull: false` also set in the model itself? Or you have it only in the migration?"
      },
      {
        "user": "Brammz",
        "created_at": "2019-07-30T14:52:25Z",
        "body": "@papb No, they simple stated the datatype of the attribute. I remember trying this and getting declaration issues. However, I tried this again and now I do get the error. Thank you!"
      },
      {
        "user": "papb",
        "created_at": "2019-07-30T15:24:32Z",
        "body": "> and now I do get the error\r\n\r\nYou mean \"don't\", right?\r\n\r\nYou're welcome :+1:"
      },
      {
        "user": "Brammz",
        "created_at": "2019-07-30T15:42:34Z",
        "body": "Well, I don\u2019t get the declaration error anymore indeed. But I do get an error when violating the null constraint, as it is supposed to go! (also misclicked..)"
      },
      {
        "user": "papb",
        "created_at": "2019-07-30T15:46:36Z",
        "body": "Ah, I see! :+1: "
      }
    ]
  },
  {
    "number": 10318,
    "title": "TypeError: Cannot read property 'name' of undefined",
    "created_at": "2019-01-04T09:18:12Z",
    "closed_at": "2019-01-08T07:17:51Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/sequelize/sequelize/issues/10318",
    "body": "when i want to join my model this exception was thrown, is anybody know how to solve this?\r\nthis is my code \r\n\r\n```js\r\nRiwayat.hasMany(Regis, {foreignKey: 'id_pasien_baru'})\r\nRegis.belongsTo(Riwayat, {foreignKey: 'id_pasien_baru'});\r\n\r\nRiwayat.findAll({\r\n    where:{id_pasien_baru:req.params.id},include:[Regis]\r\n  }).then(Riwayat => {\r\n    res.send(Riwayat)\r\n  })\r\n  .catch(err => {\r\n    res.send('error')\r\n  })\r\n```\r\n\r\n```\r\nTypeError: Cannot read property 'name' of undefined\r\n    at Function._validateIncludedElement (D:\\axon\\node_modules\\sequelize\\lib\\model.js:535:42)\r\n    at options.include.options.include.map.include (D:\\axon\\node_modules\\sequelize\\lib\\model.js:395:37)\r\n    at Array.map (<anonymous>)\r\n    at Function._validateIncludedElements (D:\\axon\\node_modules\\sequelize\\lib\\model.js:390:39)\r\n    at Promise.try.then.then (D:\\axon\\node_modules\\sequelize\\lib\\model.js:1570:14)\r\n    at tryCatcher (D:\\axon\\node_modules\\bluebird\\js\\release\\util.js:16:23)\r\n    at Promise._settlePromiseFromHandler (D:\\axon\\node_modules\\bluebird\\js\\release\\promise.js:512:31)\r\n    at Promise._settlePromise (D:\\axon\\node_modules\\bluebird\\js\\release\\promise.js:569:18)\r\n    at Promise._settlePromise0 (D:\\axon\\node_modules\\bluebird\\js\\release\\promise.js:614:10)\r\n    at Promise._settlePromises (D:\\axon\\node_modules\\bluebird\\js\\release\\promise.js:694:18)\r\n    at _drainQueueStep (D:\\axon\\node_modules\\bluebird\\js\\release\\async.js:138:12)\r\n    at _drainQueue (D:\\axon\\node_modules\\bluebird\\js\\release\\async.js:131:9)\r\n    at Async._drainQueues (D:\\axon\\node_modules\\bluebird\\js\\release\\async.js:147:5)\r\n    at Immediate.Async.drainQueues (D:\\axon\\node_modules\\bluebird\\js\\release\\async.js:17:14)\r\n    at runCallback (timers.js:810:20)\r\n    at tryOnImmediate (timers.js:768:5)\r\n    at processImmediate [as _immediateCallback] (timers.js:745:5)\r\n::1 - - [04/Jan/2019:09:12:11 +0000] \"GET /api/join/237 HTTP/1.1\" 200 5\r\n```",
    "comments_url": "https://api.github.com/repos/sequelize/sequelize/issues/10318/comments",
    "author": "deigratia",
    "comments": [
      {
        "user": "mkaufmaner",
        "created_at": "2019-01-05T20:12:28Z",
        "body": "This error is thrown when the association does not exist.  First, make sure you are defining your associations properly.  Second, I would recommend passing the association object you want to include like so;\r\n```js\r\nRiwayat.hasMany(Regis, {\r\n\tas: 'Regi'\r\n\tforeignKey: 'id_pasien_baru'\r\n});\r\n\r\nRegis.belongsTo(Riwayat, {\r\n\tas: 'Riwayat',\r\n\tforeignKey: 'id_pasien_baru'\r\n});\r\n\r\nRiwayat.findAll({\r\n\tinclude: [\r\n\t\t{\r\n\t\t\tassociation: Riwayat.associations.Regi\r\n\t\t}\r\n\t],\r\n\twhere: {\r\n\t\tid_pasien_baru: req.params.id\r\n\t}\r\n}).then((riwayats) => {\r\n\tres.send(riwayats);\r\n}).catch(err => {\r\n\tres.send('error');\r\n});\r\n```"
      },
      {
        "user": "deigratia",
        "created_at": "2019-01-07T06:46:01Z",
        "body": "oh thanks\r\n"
      },
      {
        "user": "deigratia",
        "created_at": "2019-01-08T07:18:54Z",
        "body": "> > This error is thrown when the association does not exist. First, make sure you are defining your associations properly. Second, I would recommend passing the association object you want to include like so;\r\n> > ```js\r\n> > Riwayat.hasMany(Regis, {\r\n> > \tas: 'Regi'\r\n> > \tforeignKey: 'id_pasien_baru'\r\n> > });\r\n> > \r\n> > Regis.belongsTo(Riwayat, {\r\n> > \tas: 'Riwayat',\r\n> > \tforeignKey: 'id_pasien_baru'\r\n> > });\r\n> > \r\n> > Riwayat.findAll({\r\n> > \tinclude: [\r\n> > \t\t{\r\n> > \t\t\tassociation: Riwayat.associations.Regi\r\n> > \t\t}\r\n> > \t],\r\n> > \twhere: {\r\n> > \t\tid_pasien_baru: req.params.id\r\n> > \t}\r\n> > }).then((riwayats) => {\r\n> > \tres.send(riwayats);\r\n> > }).catch(err => {\r\n> > \tres.send('error');\r\n> > });\r\n> > ```\r\n> \r\n>\r\n\r\nif join 3 where the association table is dropped?\r\n\r\n@mkaufmaner "
      },
      {
        "user": "jerrywang1981",
        "created_at": "2022-01-07T02:37:47Z",
        "body": "another root cause could be Array.prototype.find was overwritten by other packages, e.g. the package 'collections' would overwrite Array.prototype.find and change the function signature. if you have same error message, and package 'collections', try to uninstall package 'collections' to see if it works. "
      }
    ]
  },
  {
    "number": 10241,
    "title": "How to save complex changes to MySQL JSON data type",
    "created_at": "2018-12-08T11:29:20Z",
    "closed_at": "2018-12-09T09:29:08Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/sequelize/sequelize/issues/10241",
    "body": "When I make more complex changes to my users JSON col \u201cpreferences\u201d like this:\r\n\r\n```\r\nuser.preferences.notifications.disable_emails = {\r\n\tissues: true,\r\n\treports: true,\r\n\tcomments: true\r\n}\r\nuser.save().then(user2 => { \r\n\tconsole.log(user2) \r\n})\r\n```\r\n\r\nMy changes are correctly in user2, but not in the database, it stays NULL or keeps the previous value.\r\nIs there a callback I can call after complex changes so its detecting something is different?\r\nI guess auto watch for changes in a multidimensional JSON is too complex - am I right?",
    "comments_url": "https://api.github.com/repos/sequelize/sequelize/issues/10241/comments",
    "author": "ghost",
    "comments": [
      {
        "user": "knoxcard",
        "created_at": "2018-12-09T07:18:39Z",
        "body": "user is your model.  `model.save()` is correct, but you can't have your data variable be the same as the Model itself, as you have with the user variable.\r\n```\r\nvar userData = {}\r\nuserData.name = 'Tom'\r\nuserData.logged_in = 'true'\r\nuserData.preferences = {}\r\nuserData.preferences.notifications = {}\r\nuserData.preferences.notifications.disable_emails = {\r\n\tissues: true,\r\n\treports: true,\r\n\tcomments: true\r\n}\r\n\r\n// update record\r\nuser.update(userData).then(user2 => {\r\n})\r\n\r\n// save new record\r\nuser.build(userData).save().then(user2 => { \r\n\tconsole.log(user2) \r\n})\r\n```"
      },
      {
        "user": "ghost",
        "created_at": "2018-12-09T09:29:08Z",
        "body": "Oh, thank you, I did not understand it like this.\r\nI always work like this:\r\n```\r\nUser.findById(125689).then(user => {\r\n\ts.user = user\r\n})\r\n\r\n// tons of other stuff, user is persistant while logged in\r\n\r\n// socket change request comes in\r\ns.user.name = request.name\r\ns.user.preferences = request.preferences // complex JSON\r\ns.user.save()\r\n```\r\nnow i do this (which i would never have come up with myself):\r\ns.user is already there since login:\r\n```\r\n\ts.user.preferences = request.preferences\r\n\ts.user.update({\r\n\t\tpreferences: s.user.preferences\r\n\t}).then(user => {\r\n\t\tc(user)\r\n\t})\r\n```\r\nit looks weird, why not just save whats currently in it - but it works, thanks!"
      },
      {
        "user": "knoxcard",
        "created_at": "2018-12-09T09:53:10Z",
        "body": "When I first started using Sequelize, I made the same exact mistakes! lol, hours and hours of reading and trial/error to get things right.  To this day,  I am still enhancing my Sequelize/Session code..."
      }
    ]
  },
  {
    "number": 10082,
    "title": "Virtual fields that rely on sibling fields",
    "created_at": "2018-10-26T18:43:03Z",
    "closed_at": "2018-10-27T17:28:20Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/sequelize/sequelize/issues/10082",
    "body": "<!--\r\n\r\nPlease note this is an issue tracker, not a support forum.\r\nFor general questions, please use StackOverflow or Slack.\r\n\r\nFor bugs, please fill out the template below.\r\n\r\n-->\r\n\r\n## What are you doing?\r\n\r\nWhen you have a model with virtual fields that rely on other fields then you exclude that field in a query, your custom getter doesn't work. Is this a feature that should be added? Or is there a better pattern I should be using?\r\n\r\n```js\r\nmodule.exports = function (sequelize,DataTypes) {\r\n  var Widget = sequelize.define('Widget',{\r\n    data: {\r\n      type: DataTypes.TEXT\r\n    },\r\n    info: {\r\n      type: DataTypes.VIRTUAL,\r\n      get: function () {\r\n        return JSON.parse(this.data).info;\r\n      }\r\n    }\r\n  });\r\n};\r\n```\r\n\r\nExcluding the `data` field would break the query.\r\n\r\n## What do you expect to happen?\r\n\r\nWanted my virtual field tow work\r\n\r\n## What is actually happening?\r\n\r\nMy virtual field doesn't work when the requisite sibling fields are excluded from the query.\r\n\r\n__Dialect:__ sqlite\r\n__Dialect version:__\r\n__Database version:__\r\n__Sequelize version:__ 4.41.0\r\n__Tested with latest release:__ \r\n\r\n\r\n**Note :** _Your issue may be ignored OR closed by maintainers if it's not tested against latest version OR does not follow issue template._\r\n",
    "comments_url": "https://api.github.com/repos/sequelize/sequelize/issues/10082/comments",
    "author": "ryanburnette",
    "comments": [
      {
        "user": "ryanburnette",
        "created_at": "2018-10-26T18:43:57Z",
        "body": "I guess I could parse the JSON once and put the parsed results into real fields, but I'm asking the question partially in principle."
      },
      {
        "user": "sushantdhiman",
        "created_at": "2018-10-27T06:49:04Z",
        "body": "Virtual type accepts dependent attributes which get pulled when virtual field is used\r\n\r\n```js\r\n{\r\n  active: {\r\n    type: new DataTypes.VIRTUAL(DataTypes.BOOLEAN, ['createdAt']),\r\n    get: function() {\r\n      return this.get('createdAt') > Date.now() - (7 * 24 * 60 * 60 * 1000)\r\n    }\r\n  }\r\n}\r\n```"
      },
      {
        "user": "ryanburnette",
        "created_at": "2018-10-27T16:37:06Z",
        "body": "Thanks for the help comprehending the doc."
      }
    ]
  },
  {
    "number": 9944,
    "title": "Access timestamps from createdAt/updatedAt instead of custom field name",
    "created_at": "2018-09-21T02:24:17Z",
    "closed_at": "2018-09-21T07:04:10Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/sequelize/sequelize/issues/9944",
    "body": "In current sequelize, when a custom column name has been assigned to one of the timestamps, the timestamp value is no longer accessible from Model.createdAt / updated.At etc.\r\n\r\nFrom my understanding, this [v5 change](/sequelize/sequelize/issues/6423#issuecomment-379472035) will only change the behavior when timestamps are not customized.\r\n\r\nI'm a very new user of sequelize, but tbh I think this is inconsistent, isn't it? What is the reason behind this design? (Please consider this as a feature request)\r\n\r\n## What are you doing?\r\n```js\r\nconst MyTable = sequelize.define('mytable', {\r\n  myField: {\r\n    type: Sequelize.INTEGER,\r\n    field: 'my_column',\r\n  },\r\n}, {\r\n  createdAt: 'my_created_at',\r\n  updatedAt: false,\r\n});\r\nMyTable.create({\r\n  myField: 0,\r\n})).then(myInstance => {\r\n  console.log(myInstance.myField); // 0\r\n  console.log(myInstance.createdAt); // undefined\r\n  console.log(myInstance.my_created_at); // createdAt timestamp\r\n});\r\n```\r\n\r\n## What do you expect to happen?\r\nmyInstance.createdAt shows the createdAt timestamp.\r\n\r\n__Dialect:__ mysql\r\n__Sequelize version:__ 4.38.1",
    "comments_url": "https://api.github.com/repos/sequelize/sequelize/issues/9944/comments",
    "author": "zypA13510",
    "comments": [
      {
        "user": "sushantdhiman",
        "created_at": "2018-09-21T05:48:11Z",
        "body": "`createdAt: 'my_created_at',` means a new attribute will be created with this name `my_created_at`\r\n\r\nIf you want to customize just field name you should do something like this\r\n\r\n```js\r\n'use strict';\r\n\r\nconst Sequelize = require('./index');\r\nconst sequelize = require('./test/support').createSequelizeInstance();\r\n\r\nconst MyTable = sequelize.define('mytable', {\r\n  myField: {\r\n    type: Sequelize.INTEGER,\r\n    field: 'my_column',\r\n  },\r\n  createdAt: {\r\n    type: Sequelize.DATE,\r\n    field: 'my_created_at'\r\n  }\r\n}, {\r\n  updatedAt: false,\r\n  timestamps: true\r\n});\r\n\r\nsequelize.sync({ force: true }).then(() => {\r\n  return sequelize.authenticate();\r\n}).then(() => {\r\n  return MyTable.create({\r\n    myField: 0,\r\n  }).then(myInstance => {\r\n    console.log(myInstance.myField); // 0\r\n    console.log(myInstance.createdAt); //  createdAt timestamp\r\n    console.log(myInstance.my_created_at); // undefined\r\n  });\r\n});\r\n```\r\n\r\n```sql\r\n0\r\n2018-09-21T05:47:30.001Z\r\nundefined\r\n```"
      },
      {
        "user": "zypA13510",
        "created_at": "2018-09-21T07:04:10Z",
        "body": "My bad, I forgot the timestamp fields can be modified from the attributes parameter instead of options.\r\nThanks. Closing this issue."
      }
    ]
  },
  {
    "number": 9768,
    "title": "the default foreign key is not overwritten with the foreignKey option",
    "created_at": "2018-08-07T06:33:31Z",
    "closed_at": "2018-08-07T14:34:53Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/sequelize/sequelize/issues/9768",
    "body": "\r\n## What are you doing?\r\ncreating association between two model classes: Product and ProductPhoto[One product can have many photos]\r\nwhere product_id from Product table should be foreign key in ProductPhoto table.\r\n\r\n\r\n```js\r\nProduct Model :\r\nvar product = sequelize.define('product', {\r\n    product_id:{\r\n        allowNull: false,\r\n        type:DataTypes.INTEGER,\r\n        primaryKey: true,\r\n        autoIncrement:true,\r\n    },\r\n    productName: {\r\n      type:DataTypes.STRING,\r\n      field:'product_name'\r\n    }\r\n, {\r\n    underscored: true,\r\n    freezeTableName: true\r\n  });\r\n  product.associate = function(models) {\r\n  product.hasMany(models.productPhoto,{foriegnKey:'product_id'});\r\n   }\r\n}\r\nProductPhoto Model:\r\nvar productPhoto = sequelize.define('productPhoto', {\r\n  \t productPhotoId:{\r\n        allowNull: false,\r\n        type:DataTypes.INTEGER,\r\n        primaryKey: true,\r\n        autoIncrement:true,\r\n        field:'product_photo_id'\r\n      },\r\n    productPhotoPath: {\r\n      type:DataTypes.STRING,\r\n      field:'product_photo_path'\r\n    }\r\n}\r\nproductPhoto.associate = function(models) {\r\n    productPhoto.belongsTo(models.product, {foreignKey: 'product_id'});\r\n\r\n  }\r\n```\r\n\r\n## What do you expect to happen?\r\nWhen i execute sync to create database tables ,name product and productPhoto, the foreign key with name product_id in table productPhoto should be created.\r\n\r\n## What is actually happening?\r\nsequelize is generating foriegn key product_product_id, it is not taking foreignKey option.\r\n\r\n\r\n_Output, either JSON or SQL_\r\n\r\n CREATE TABLE IF NOT EXISTS `product` (`product_id` INTEGER NOT NULL auto_increment , `product_name` VARCHAR(255), `product_price` FLOAT, `product_description` TEXT, `product_sku` VARCHAR(255), `product_stock` INTEGER, `product_brand` VARCHAR(255), `product_title` VARCHAR(255), `product_fabric` VARCHAR(255), `product_manufacturer_info` VARCHAR(255), `product_country_of_origin` VARCHAR(255), `product_style` VARCHAR(255), `product_sold_by` VARCHAR(255), `created_at` DATETIME, `updated_at` DATETIME, PRIMARY KEY (`product_id`)) ENGINE=InnoDB;\r\nExecuting (default): SHOW INDEX FROM `product` FROM `ecommerse_db_dev`\r\n\r\nCREATE TABLE IF NOT EXISTS `productPhoto` (`product_photo_id` INTEGER NOT NULL auto_increment , `product_photo_path` VARCHAR(255), `product_photo_alt` VARCHAR(255), `createdAt` DATETIME, `updatedAt` DATETIME, `created_at` DATETIME NOT NULL, `updated_at` DATETIME NOT NULL, `product_product_id` INTEGER, PRIMARY KEY (`product_photo_id`), FOREIGN KEY (`product_product_id`) REFERENCES `product` (`product_id`) ON DELETE SET NULL ON UPDATE CASCADE) ENGINE=InnoDB;\r\nExecuting (default): SHOW INDEX FROM `productPhoto` FROM `ecommerse_db_dev`\r\n\r\n\r\n__Dialect:__ mysql\r\n__Dialect version:__ 1.6.1\r\n__Database version:__ 5.7.21\r\n__Sequelize version:__ 4.37.10\r\n__Tested with latest release:__ Yes (sequelize@4.38.0)\r\n\r\n\r\n**Note :** _Your issue may be ignored OR closed by maintainers if it's not tested against latest version OR does not follow issue template._\r\n",
    "comments_url": "https://api.github.com/repos/sequelize/sequelize/issues/9768/comments",
    "author": "mail2nitinraj",
    "comments": [
      {
        "user": "sushantdhiman",
        "created_at": "2018-08-07T06:53:58Z",
        "body": "> ```product.hasMany(models.productPhoto,{foriegnKey:'product_id'});```\r\n\r\nSpelling mistake `foriegnKey` should be `foreignKey`"
      },
      {
        "user": "mail2nitinraj",
        "created_at": "2018-08-07T14:34:53Z",
        "body": "Thanks! now it worked as expected :)"
      }
    ]
  },
  {
    "number": 9494,
    "title": "instance.constructor different when .scope() is used to retrieve the instance",
    "created_at": "2018-05-30T21:08:10Z",
    "closed_at": "2018-06-01T15:00:42Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/sequelize/sequelize/issues/9494",
    "body": "## What are you doing?\r\n```\r\nconst Sequelize = require('sequelize');\r\nconst sequelize = new Sequelize('test-db', '', '', { host: 'localhost', dialect: 'postgres', operatorsAliases: false, logging: false });\r\n\r\nconst User = sequelize.define('User', {\r\n  name: Sequelize.STRING(200),\r\n  status: Sequelize.ENUM('active', 'inactive', 'unverified'),\r\n}, {\r\n  scopes: {\r\n    active: {\r\n      where: {\r\n        status: 'active',\r\n      },\r\n    },\r\n  },\r\n});\r\n\r\nasync function main () {\r\n  await sequelize.sync({ force: true });\r\n  await Promise.all([\r\n    User.create({ name: 'Active User 1', status: 'active' }),\r\n    User.create({ name: 'Active User 2', status: 'active' }),\r\n    User.create({ name: 'Inactive User 1', status: 'inactive' }),\r\n    User.create({ name: 'Inactive User 2', status: 'inactive' }),\r\n  ]);\r\n\r\n  const unscopedUser = await User.findOne({ where: { name: 'Inactive User 1' } });\r\n  const unscopedUsers = await User.findAll({ where: { status: 'inactive' } });\r\n  const scopedUser = await User.scope('active').findOne({ where: { name: 'Active User 1' } });\r\n  const scopedUsers = await User.scope('active').findAll();\r\n\r\n  console.log('unscopedUser constructor is User ==', unscopedUser.constructor === User); // true\r\n  console.log('unscopedUsers constructors are User ==', unscopedUsers.every(i => i.constructor === User)); // true\r\n  console.log('scopedUser constructor is User ==', scopedUser.constructor === User); // false\r\n  console.log('scopedUsers constructors are User ==', scopedUsers.every(i => i.constructor === User)); // false\r\n\r\n  process.exit(0);\r\n}\r\n\r\nmain();\r\n```\r\n\r\n## What do you expect to happen?\r\nI expect the object instance constructors to always be `User` even if I used `.scope()` to retrieve it.\r\n\r\n## What is actually happening?\r\nWhen `.scope()` is used during retrieval the instance constructor is no longer `User`.\r\n\r\n__Dialect:__ postgres\r\n__Dialect version:__ ??\r\n__Database version:__ 10.3\r\n__Sequelize version:__ 4.37.10\r\n__Tested with latest release:__ Yes (4.37.10)",
    "comments_url": "https://api.github.com/repos/sequelize/sequelize/issues/9494/comments",
    "author": "aforty",
    "comments": [
      {
        "user": "sushantdhiman",
        "created_at": "2018-06-01T04:45:59Z",
        "body": "`.scope / .unscope` creates a new copy of model, instances created by them refer to this new copy. For identification purpose you can use `instance.constructor.name` which should be common for different scoped instances.\r\n\r\nWe need a new copy of class to maintain multiple scopes at a time. If we keep the class same, changing scope on one of them will change scope on other sibling classes."
      },
      {
        "user": "aforty",
        "created_at": "2018-06-01T15:00:42Z",
        "body": "I see, thank you!"
      }
    ]
  },
  {
    "number": 8856,
    "title": "add support of || (double-pipe) concat operator",
    "created_at": "2018-01-08T10:11:05Z",
    "closed_at": "2018-01-11T04:54:10Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/sequelize/sequelize/issues/8856",
    "body": "<!--\r\n\r\nPlease note this is an issue tracker, not a support forum.\r\nFor general questions, please use StackOverflow or Slack.\r\n\r\nFor bugs, please fill out the template below.\r\n\r\n-->\r\n\r\n## What are you doing?\r\n<!-- Post a minimal, self-contained code sample that reproduces the issue, including models and associations -->\r\n\r\nI try to concat (`||`) binary data to a field using `updateQuery`.\r\n\r\n```js\r\nvar query = db.dialect.QueryGenerator.updateQuery('myTable', { data: db.literal('data || $data') }, { id:1 } ) )\r\n...\r\ndb.query(query, {\r\n  type: db.QueryTypes.UPDATE,\r\n  bind: {\r\n    data: myBuffer\r\n  }\r\n});\r\n```\r\nI would like to use `db.col()` and `db.literal()` in my previous expression, but the `||` operator is not available:\r\n`{ data: db.concat(db.col('data'), db.literal('$data')) }`\r\n\r\n\r\n__Dialect:__  any\r\n__Dialect version:__ latest\r\n__Database version:__ latest\r\n__Sequelize version:__ latest\r\n__Tested with latest release:__ No (If yes, specify that version)\r\n\r\n\r\n**Note :** _Your issue may be ignored OR closed by maintainers if it's not tested against latest version OR does not follow issue template._\r\n",
    "comments_url": "https://api.github.com/repos/sequelize/sequelize/issues/8856/comments",
    "author": "FranckFreiburger",
    "comments": [
      {
        "user": "sushantdhiman",
        "created_at": "2018-01-11T04:54:10Z",
        "body": "You can use `sequelize.fn` \r\n\r\n```js\r\n  await Test.sync({ force: true });\r\n\r\n  await Test.create({ a: 'gdsds' });\r\n\r\n  var query = sequelize.dialect.QueryGenerator.updateQuery('Tests', {\r\n    a: sequelize.fn('CONCAT', sequelize.col('a'), sequelize.literal('$a::text'))\r\n  });\r\n\r\n  await sequelize.query(query, {\r\n    type: sequelize.QueryTypes.UPDATE,\r\n    bind: {\r\n      a: 'ABC'\r\n    }\r\n  });\r\n\r\n  console.log(await Test.findAll({ raw: true }));\r\n```\r\n\r\n```sql\r\nExecuting (default): DROP TABLE IF EXISTS \"Tests\" CASCADE;\r\nExecuting (default): CREATE TABLE IF NOT EXISTS \"Tests\" (\"id\"   SERIAL , \"a\" VARCHAR(255), \"createdAt\" TIMESTAMP WITH TIME ZONE NOT NULL, \"updatedAt\" TIMESTAMP WITH TIME ZONE NOT NULL, PRIMARY KEY (\"id\"));\r\nExecuting (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'Tests' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;\r\nExecuting (default): INSERT INTO \"Tests\" (\"id\",\"a\",\"createdAt\",\"updatedAt\") VALUES (DEFAULT,'gdsds','2018-01-11 04:52:59.466 +00:00','2018-01-11 04:52:59.466 +00:00') RETURNING *;\r\nExecuting (default): UPDATE \"Tests\" SET \"a\"=CONCAT(\"a\", $1::text)\r\nExecuting (default): SELECT \"id\", \"a\", \"createdAt\", \"updatedAt\" FROM \"Tests\" AS \"Test\";\r\n[ { id: 1,\r\n    a: 'gdsdsABC',\r\n    createdAt: 2018-01-11T04:52:59.466Z,\r\n    updatedAt: 2018-01-11T04:52:59.466Z } ]\r\n\r\n```"
      },
      {
        "user": "FranckFreiburger",
        "created_at": "2018-01-11T07:40:29Z",
        "body": "Thanks for the reply.\r\nUsing CONCAT is the first alternative I thought of.\r\nI use pgsql and I cannot find a clear information in the doc to know if CONCAT supports binary data (operates on BYTEA), however, `||` clearly supports BYTEA concatenation.\r\n\r\n"
      },
      {
        "user": "sushantdhiman",
        "created_at": "2018-01-11T07:44:16Z",
        "body": "Can you try and see if `CONCAT` works on binary data, possibly typecast with `bytea`"
      },
      {
        "user": "FranckFreiburger",
        "created_at": "2018-01-11T08:09:19Z",
        "body": "without casting:\r\nsql: `UPDATE \"images\" SET \"data\"=CONCAT(\"data\", $1) WHERE \"id\" = 1`\r\nerr: `SequelizeDatabaseError: column \"data\" is of type bytea but expression is of type text:`\r\n"
      },
      {
        "user": "FranckFreiburger",
        "created_at": "2018-01-11T08:14:21Z",
        "body": "with casting:\r\nsql: `UPDATE \"images\" SET \"data\"=CAST(CONCAT(CAST(\"data\" AS TEXT), $1::text) AS BYTEA) WHERE \"id\" = 1`\r\nerr: `invalid byte sequence for encoding \"UTF8\": 0x9`\r\n"
      },
      {
        "user": "sushantdhiman",
        "created_at": "2018-01-11T08:34:51Z",
        "body": "Just using `literal` will work\r\n\r\n```js\r\n    await Test.sync({ force: true });\r\n\r\n    await Test.create({ a: new Buffer('thing') });\r\n\r\n    var query = sequelize.dialect.QueryGenerator.updateQuery('Tests', {\r\n      a: sequelize.literal('$a || a')\r\n    });\r\n\r\n    await sequelize.query(query, {\r\n      type: sequelize.QueryTypes.UPDATE,\r\n      bind: {\r\n        a: 'some'\r\n      }\r\n    });\r\n\r\n    const result = await Test.findAll();\r\n\r\n    console.log(result[0].get('a').toString('utf8'));\r\n```\r\n\r\n```sql\r\nExecuting (default): DROP TABLE IF EXISTS \"Tests\" CASCADE;\r\nExecuting (default): CREATE TABLE IF NOT EXISTS \"Tests\" (\"id\"   SERIAL , \"a\" BYTEA, \"createdAt\" TIMESTAMP WITH TIME ZONE NOT NULL, \"updatedAt\" TIMESTAMP WITH TIME ZONE NOT NULL, PRIMARY KEY (\"id\"));\r\nExecuting (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'Tests' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;\r\nExecuting (default): INSERT INTO \"Tests\" (\"id\",\"a\",\"createdAt\",\"updatedAt\") VALUES (DEFAULT,E'\\\\x7468696e67','2018-01-11 08:33:37.006 +00:00','2018-01-11 08:33:37.006 +00:00') RETURNING *;\r\nExecuting (default): UPDATE \"Tests\" SET \"a\"=$1 || a\r\nExecuting (default): SELECT \"id\", \"a\", \"createdAt\", \"updatedAt\" FROM \"Tests\" AS \"Test\";\r\nsomething\r\n```"
      },
      {
        "user": "FranckFreiburger",
        "created_at": "2018-01-11T08:47:07Z",
        "body": "I agree.\r\nThe drawback of literal is that we lost sequelize tools like column name escaping, etc..."
      },
      {
        "user": "sushantdhiman",
        "created_at": "2018-01-11T08:54:09Z",
        "body": "If you are binding variables in query, I see no problem with that if query is correctly generated"
      },
      {
        "user": "FranckFreiburger",
        "created_at": "2018-01-11T08:56:27Z",
        "body": "It's ok for me, thanks."
      }
    ]
  },
  {
    "number": 8642,
    "title": "sequelize validator error",
    "created_at": "2017-11-16T12:05:28Z",
    "closed_at": "2017-11-23T05:07:42Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/sequelize/sequelize/issues/8642",
    "body": "<!--\r\n\r\nPlease note this is an issue tracker, not a support forum.\r\nFor general questions, please use StackOverflow or Slack.\r\n\r\nFor bugs, please fill out the template below.\r\n\r\n-->\r\n\r\n## What are you doing?\r\n<!-- Post a minimal, self-contained code sample that reproduces the issue, including models and associations -->\r\nI was changing string based operators into symbol based operators. But one of them caused a problem.\r\n```js\r\n//  model\r\nconst users = sequelize.define('users', {\r\n\temail: {\r\n\t\ttype: DataTypes.STRING({ length: 255 }),\r\n\t\tallowNull: true,\r\n\t\tvalidate: { isEmail: true }\r\n\t},\r\n//   ....\r\n\r\n//  actual querybuilder\r\n return db.mySequel.transaction(t => {\r\n        return db.users.findOrCreate({\r\n            where: { email: { [Op.eq]: p_email} },\r\n            defaults: {\r\n                password: p_password,\r\n                username: p_username\r\n            },\r\n            transaction: t\r\n        }).spread((rs, created) => {\r\n            if (created == false) apiError(\"10005\");\r\n            return db.user_has_musician_type.bulkCreate([\r\n                {\r\n                    user_id: rs.id,\r\n                    musician_type: 'G',\r\n                    musician_type_id: p_genre\r\n                },\r\n                {\r\n                    user_id: rs.id,\r\n                    musician_type: 'I',\r\n                    musician_type_id: p_instrument\r\n                }\r\n            ], {\r\n                transaction: t,\r\n                raw: true\r\n            });\r\n        })\r\n    }).then(rs => {\r\n        res.apiResponse(true);\r\n    }).catch(err => {\r\n        next(err);\r\n    });\r\n```\r\n\r\n## What do you expect to happen?\r\nI wanted that sequelize examine p_email(string) properly and create record.\r\n\r\n## What is actually happening?\r\nTwo errors occurred. Both of them were ValidationError related with `isEmail`validation option and the value property was {Symbol(eq) : \"tese211@ttest.com\"} not \"tese211@ttest.com\".\r\nThe error messages were:\r\n- email cannot be an array or an object\r\n- Validation isEmail on email failed\r\n\r\nIt seems sequelize validator examine wrong value.\r\n\r\n__Dialect:__ mysql\r\n__Database version:__ 5.5.42\r\n__Sequelize version:__ 4.22.6\r\n__Tested with master branch:__ Yes\r\n\r\n**Note :** _Your issue may be ignored by maintainers if it's not tested against `master` branch OR does not follow issue template._\r\n",
    "comments_url": "https://api.github.com/repos/sequelize/sequelize/issues/8642/comments",
    "author": "BaroqueCoding",
    "comments": [
      {
        "user": "sushantdhiman",
        "created_at": "2017-11-17T07:04:27Z",
        "body": "Can you show full error thrown?"
      },
      {
        "user": "BaroqueCoding",
        "created_at": "2017-11-19T03:25:47Z",
        "body": "```\r\n{\r\nname: \"SequelizeValidationError\"\r\nmessage: \"string violation: email cannot be an array or an object,\u21b5Validation error: Validation isEmail on email failed\"\r\nstack:\r\n`SequelizeValidationError:\r\n    string violation: email cannot be an array or an object,\r\n    Validation error: Validation isEmail on email failed\r\n        at Promise.all.then (~/seq_node/node_modules/sequelize/lib/instance-validator.js:77:15)\r\n        From previous event:\r\n            at InstanceValidator._validate (~/seq_node/node_modules/sequelize/lib/instance-validator.js:75:7)\r\n            at runHooks.then (~/seq_node/node_modules/sequelize/lib/instance-validator.js:110:14)\r\n            From previous event:\r\n                at InstanceValidator._validateAndRunHooks (~/seq_node/node_modules/sequelize/lib/instance-validator.js:109:8)\r\n                at InstanceValidator.validate (~/seq_node/node_modules/sequelize/lib/instance-validator.js:93:38)\r\n                at model.validate (~/seq_node/node_modules/sequelize/lib/model.js:3734:49)\r\n                at Promise.try (~/seq_node/node_modules/sequelize/lib/model.js:3511:21)\r\n                From previous event:\r\n                    at model.save (~/seq_node/node_modules/sequelize/lib/model.js:3508:23)\r\n                    at Function.create (~/seq_node/node_modules/sequelize/lib/model.js:1997:8)\r\n                    at sequelize.transaction.then.then.instance (~/seq_node/node_modules/sequelize/lib/model.js:2095:19)\r\n                    From previous event:\r\n                        at Function.findOrCreate (~/seq_node/node_modules/sequelize/lib/model.js:2083:8)\r\n                        at db.mySequel.transaction.t (~/seq_node/controllers/user.js:49:25)\r\n                        at transaction.prepareEnvironment.then (~/seq_node/node_modules/sequelize/lib/sequelize.js:969:21)\r\n                        at runCallback (timers.js:789:20)\r\n                        at tryOnImmediate (timers.js:751:5)\r\n                        at processImmediate [as _immediateCallback] (timers.js:722:5)\r\n                        From previous event:\r\n                            at Sequelize._clsRun (~/seq_node/node_modules/sequelize/lib/sequelize.js:969:10)\r\n                            at Function._clsRun (~/seq_node/node_modules/sequelize/lib/sequelize.js:1013:21)\r\n                            at Sequelize.transaction (~/seq_node/node_modules/sequelize/lib/sequelize.js:967:22)\r\n                            at ~/seq_node/controllers/user.js:48:24\r\n                            at Layer.handle [as handle_request] (~/seq_node/node_modules/express/lib/router/layer.js:95:5)\r\n                            at next (~/seq_node/node_modules/express/lib/router/route.js:137:13)\r\n                            at Route.dispatch (~/seq_node/node_modules/express/lib/router/route.js:112:3)\r\n                            at Layer.handle [as handle_request] (~/seq_node/node_modules/express/lib/router/layer.js:95:5)\r\n                            at ~/seq_node/node_modules/express/lib/router/index.js:281:22\r\n                            at Function.process_params (~/seq_node/node_modules/express/lib/router/index.js:335:12)\r\n                            at next (~/seq_node/node_modules/express/lib/router/index.js:275:10)\r\n                            at Function.handle (~/seq_node/node_modules/express/lib/router/index.js:174:3)\r\n                            at router (~/seq_node/node_modules/express/lib/router/index.js:47:12)\r\n                            at Layer.handle [as handle_request] (~/seq_node/node_modules/express/lib/router/layer.js:95:5)\r\n                            at trim_prefix (~/seq_node/node_modules/express/lib/router/index.js:317:13)\r\n                            at ~/seq_node/node_modules/express/lib/router/index.js:284:7\r\n                            at Function.process_params (~/seq_node/node_modules/express/lib/router/index.js:335:12)\r\n                            at next (~/seq_node/node_modules/express/lib/router/index.js:275:10)\r\n                            at exports.apiExtension (~/seq_node/helper/api_helper.js:171:2)\r\n                            at Layer.handle [as handle_request] (~/seq_node/node_modules/express/lib/router/layer.js:95:5)\r\n                            at trim_prefix (~/seq_node/node_modules/express/lib/router/index.js:317:13)\r\n                            at ~/seq_node/node_modules/express/lib/router/index.js:284:7\r\n                            at Function.process_params (~/seq_node/node_modules/express/lib/router/index.js:335:12)\r\n                            at next (~/seq_node/node_modules/express/lib/router/index.js:275:10)\r\n                            at exports.apiSet (~/seq_node/helper/api_helper.js:76:2)`\r\n}\r\n```"
      },
      {
        "user": "BaroqueCoding",
        "created_at": "2017-11-19T03:29:21Z",
        "body": "```\r\nerrors: Array(2)\r\n0 : ValidationErrorItem\r\ninstance:\r\nmodel {dataValues: {\u2026}, _previousDataValues: {\u2026}, _changed: {\u2026}, _modelOptions: {\u2026}, _options: {\u2026}, \u2026}\r\nmessage: \"email cannot be an array or an object\"\r\norigin: \"CORE\"\r\npath: \"email\"\r\ntype: \"string violation\"\r\nvalidatorArgs: []\r\nvalidatorKey: \"not_a_string\"\r\nvalidatorName: null\r\nvalue: {Symbol(eq): \"tese211@ttest.com\"}\r\n\r\n1: ValidationErrorItem\r\ninstance :\r\nmodel {dataValues: {\u2026}, _previousDataValues: {\u2026}, _changed: {\u2026}, _modelOptions: {\u2026}, _options: {\u2026}, \u2026}\r\nmessage: \"Validation isEmail on email failed\"\r\norigin: \"FUNCTION\"\r\npath: \"email\"\r\ntype: \"Validation error\"\r\nvalidatorArgs: [{\u2026}]\r\nvalidatorKey: \"isEmail\"\r\nvalidatorName: \"isEmail\"\r\nvalue: {Symbol(eq): \"tese211@ttest.com\"}\r\n```"
      },
      {
        "user": "BaroqueCoding",
        "created_at": "2017-11-19T03:29:29Z",
        "body": "Need more detail?"
      },
      {
        "user": "sushantdhiman",
        "created_at": "2017-11-19T07:20:52Z",
        "body": "`where: { email: { [Op.eq]: p_email} },` => `where: { email: p_email }`"
      },
      {
        "user": "BaroqueCoding",
        "created_at": "2017-11-19T15:15:49Z",
        "body": "I know that works well. but I'm notified that string based operators like `where: { email: p_email }` is deprecated. Am I something misunderstand?"
      },
      {
        "user": "sushantdhiman",
        "created_at": "2017-11-20T06:15:44Z",
        "body": "`{ email: p_email }` not a string operator. If you are using secure operators then you dont have to worry, usrers wont be able to inject arbitrary operators in `p_email`"
      },
      {
        "user": "BaroqueCoding",
        "created_at": "2017-11-21T03:19:01Z",
        "body": "Thanks for your answer. Here are some questions. Sequelize document shows me an example.\r\n```\r\nPost.findAll({\r\n  where: {\r\n    [Op.or]: [{authorId: 12}, {authorId: 13}]\r\n  }\r\n});\r\n```\r\nThis example makes me confused. If what I understand is correct, `Op.or` can go to the where clause, but` Op.eq` can not.\r\nWhat's the difference? and Where is `Op.eq` intended to be used?"
      },
      {
        "user": "sushantdhiman",
        "created_at": "2017-11-21T04:36:47Z",
        "body": "You have used `Op.eq` correctly, but `findOrCreate` merge `where` and `defaults` fields to create new record, `{ eq: p_email }` wont be a correct entry for `email` field.\r\n\r\nCan you repeat this case with String operators? Let me know if `$eq` works but `Op.eq` doesn't, which will show a regression."
      },
      {
        "user": "BaroqueCoding",
        "created_at": "2017-11-23T05:07:42Z",
        "body": "I understood what you said. Using `{email : p_mail}` seems still works and so does `Op.eq`.\r\nBut the way of `findOrCreate` works looks strange. Anyway, your answer was helpful. thanks again."
      }
    ]
  },
  {
    "number": 7697,
    "title": "'include' itself issue?",
    "created_at": "2017-05-27T05:30:12Z",
    "closed_at": "2017-05-27T05:43:44Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/sequelize/sequelize/issues/7697",
    "body": "## What you are doing?\r\n```js\r\nmodels.Booking\r\n.findAll({\r\nattributes: ['id'], // for testing\r\ninclude: [\r\n{\r\nmodel: models.Room,\r\nattributes: ['name'], // for testing\r\nwhere: { pensionId: request.params.pensionId }\r\n}\r\n]\r\n})\r\n```\r\n\r\n## What do you expect to happen?\r\nThe sql I wanted is\r\n````select * from [Booking] inner join [Room] room on room.pensionId = 'Foo'````\r\nthis comes out exactly what i want. (tested on heidisql)\r\n\r\n\r\n## What is actually happening?\r\nHowever, it comes\r\n````SELECT [Booking].[id], [Room].[id] AS [Room.id], [Room].[name] AS [Room.name] FROM [Booking] AS [Booking] INNER JOIN [Room] AS [Room] ON [Booking].[roomId] = [Room].[id] AND [Room].[pensionId] = N'Foo';````\r\n\r\nProblem is why automatically include this clause????\r\n````[Booking].[roomId] = [Room].[id]````\r\nthis will be perfect without above clause.\r\n\r\n\r\n__Dialect:__ mssql",
    "comments_url": "https://api.github.com/repos/sequelize/sequelize/issues/7697/comments",
    "author": "xkguq007",
    "comments": [
      {
        "user": "sushantdhiman",
        "created_at": "2017-05-27T05:34:34Z",
        "body": "`[Booking].[roomId] = [Room].[id]` is the join condition between these two models, for each booking it will look for its room + other conditions you want to query for.\r\n\r\nIf we dont add this condition it will add other rooms to query as well which may not belong to booking, giving incorrect result"
      },
      {
        "user": "xkguq007",
        "created_at": "2017-05-27T05:43:44Z",
        "body": "Oh i understand.\r\nit was my fault.\r\nIf that clause doesn't exist, it returns same arrays. thanks.\r\nI will close issue."
      }
    ]
  },
  {
    "number": 6672,
    "title": "how to call the custom sql function in attributes/where condition in sequelize",
    "created_at": "2016-10-08T12:46:08Z",
    "closed_at": "2016-10-09T10:44:47Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/sequelize/sequelize/issues/6672",
    "body": "how to call custom sql function in Sequelize\n\nI tried like this \n\nits working \napp.get('/callservice',function () {\n    Sequelize.query('select fun_GetGalleryCount(1,1);',\n    {\n        type: Sequelize.QueryTypes.RAW\n    })\n    .then(function(results) {\n        console.log(JSON.stringify(results));\n    })\n})\n\nbut in attributes/where condition is not working like this: \n options.where=getcondition(req,Sequelize);\n     options.attributes=[\n           [Sequelize.query('select fun_GetGalleryCount(1,1);',\n                {\n                    type: Sequelize.QueryTypes.RAW\n                }),'ima']\n\n```\n    ];\n```\n\n  hp_property.findAndCountAll(options).then(function(result) {\n});\n\nerrror:\nPossibly unhandled TypeError: attr[0].indexOf is not a function\n\ni tried in another way like this \noptions.attributes=[\n           [Sequelize.query('select fun_GetGalleryCount(1,1);'),'image']\n  ];\n\nso please give the solution \n\n**Dialect:** mysql \n**Database version:** XXX\n",
    "comments_url": "https://api.github.com/repos/sequelize/sequelize/issues/6672/comments",
    "author": "SIMHACHALAM1001",
    "comments": [
      {
        "user": "felixfbecker",
        "created_at": "2016-10-08T13:08:09Z",
        "body": "`query` will execute directly and return a promise. You are looking for `sequelize.fn` and `sequelize.literal`\n"
      },
      {
        "user": "SIMHACHALAM1001",
        "created_at": "2016-10-08T14:36:20Z",
        "body": "options.attributes=[\n[Sequelize.literal('select fun_GetGalleryCount(1,1);'),'image']\n];\n\nalso getting the sam error\n"
      },
      {
        "user": "felixfbecker",
        "created_at": "2016-10-08T14:50:23Z",
        "body": "Log the SQL generated. If you have further questions, ask on StackOverflow or Slack\n"
      },
      {
        "user": "SIMHACHALAM1001",
        "created_at": "2016-10-09T06:07:07Z",
        "body": "thanq its solved by using  Sequelize.litera\n"
      },
      {
        "user": "miltonkowalewski",
        "created_at": "2018-08-14T13:44:39Z",
        "body": "With me this error only occurred when the model was not associated with the correct column name.\r\nLike:\r\nsequelize.define('Users', {\r\n      date: {\r\n\t\t\ttype: DataTypes.DATEONLY,\r\n\t\t\tallowNull: false,\r\n\t\t\tfield: DataTypes.DATEONLY // Wrong! Must be the column name in the database table\r\n\t\t}\r\n}, {\r\n\ttableName: 'REGISTER',\r\n});\r\n"
      }
    ]
  },
  {
    "number": 6611,
    "title": "Changing the name of an association to get output as JSON",
    "created_at": "2016-09-19T15:47:48Z",
    "closed_at": "2016-09-19T15:59:21Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/sequelize/sequelize/issues/6611",
    "body": "## What you are doing?\n\nSo, lets say I have an association (below) and it has been included and then output to JSON.\n\n``` js\n// in the model\nUser.belongsToMany(models.Permissions, {through: models.UsersPermissions, foreignKey: 'userId'});\n\n// included\ndb.Users.findAll({ \n        include: [ {\n            model: db.Permissions,\n        through: {\n                 attributes: []\n                }\n        }]\n})\n\n//output\n\"Permissions\": [\n        {\n          \"id\": 1,\n          \"name\": \"add-role\",\n          \"description\": \"Allows the user to add a new role to the system\"\n        }\n      ]\n```\n## What do you expect to happen?\n\nNow, that final output comes out as a 'Permission', note the capital P.\n\nWhat I would expect is a lower case 'p', because I don;t know of any standard that would like that capitalized.\n\nThe only way to change this is to use the \"as\" operator. Therefore...\n\n``` js\n// in the model\nUser.belongsToMany(models.Permissions, {through: models.UsersPermissions, foreignKey: 'userId', as: 'permissions'});\n\n// included\ndb.Users.findAll({ \n        include: [ {\n        model: db.Permissions,\n                as: 'permissions',\n        through: {\n                 attributes: []\n                }\n        }]\n})\n\n//output\n\"permissions\": [\n        {\n          \"id\": 1,\n          \"name\": \"add-role\",\n          \"description\": \"Allows the user to add a new role to the system\"\n        }\n      ]\n```\n\nNow, you may feel this is great, what isnt great however is that this \"as\" operator must be used in both the model AND the includes.\n\nIs this the only way to have this happen? Or have I got something wrong here?\n",
    "comments_url": "https://api.github.com/repos/sequelize/sequelize/issues/6611/comments",
    "author": "Kyderman",
    "comments": [
      {
        "user": "felixfbecker",
        "created_at": "2016-09-19T15:59:21Z",
        "body": "``` js\nUser.belongsToMany(models.Permissions, {through: models.UsersPermissions, foreignKey: 'userId', as: 'permissions'});\n\ndb.Users.findAll({ \n        include: [ {\n        association: db.User.associations.permissions,\n        through: {\n                 attributes: []\n                }\n        }]\n})\n```\n\nThe object in `User.associations.permissions` is also returned by `belongsToMany`.\n"
      },
      {
        "user": "Kyderman",
        "created_at": "2016-09-19T16:24:11Z",
        "body": "beautiful!\n\nThanks\n"
      }
    ]
  },
  {
    "number": 6576,
    "title": "JSON format for queries using \"include\"",
    "created_at": "2016-09-09T17:33:16Z",
    "closed_at": "2016-09-09T17:59:17Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/sequelize/sequelize/issues/6576",
    "body": "First, thanks for the awesome library. Saves me a ton of time in my projects. I've had this problem for quite a while and made a bunch of workarounds, finally decided to just ask you guys. Thanks in advance!\n\nBasically i want to query the db and include an association as nest json. EG:\n\n```\nUser.findOne({\n    raw: true,\n    include: [{\n      model: Company,\n      as: 'company'\n    }]\n  })\n```\n\nWhat im getting is:\n\n```\n{\n  id: 1234,\n  name: 'Blah',\n  company.id: 1234,\n  company.name: 'blah blah'\n}\n```\n\nI would expect:\n\n```\n{\n  id: 1234,\n  name: 'Blah',\n  company: { \n    id: 1234,\n    name: 'blah blah'\n  }\n}\n```\n\nWhat am i doing wrong here?\n\n**Dialect:** postgres \n**Database version:** 9.5.2.0\n**Sequelize version:** 3.23.4\n",
    "comments_url": "https://api.github.com/repos/sequelize/sequelize/issues/6576/comments",
    "author": "brianmmorton",
    "comments": [
      {
        "user": "brianmmorton",
        "created_at": "2016-09-09T17:38:37Z",
        "body": "Does this have to do with using raw?\n"
      },
      {
        "user": "felixfbecker",
        "created_at": "2016-09-09T17:52:49Z",
        "body": "Yes, this is not supported why using raw, as raw returns the fields like they come from the DB. Is there any reason why you need raw?\n"
      },
      {
        "user": "brianmmorton",
        "created_at": "2016-09-09T17:57:52Z",
        "body": "Perhaps not? My impression was that i should use raw when I am looking to only return json data. So typically in express I will query data with raw, then res.json(results). Do i not need raw in that case?\n"
      },
      {
        "user": "felixfbecker",
        "created_at": "2016-09-09T17:59:06Z",
        "body": "No, not at all. You can just `JSON.stringify()` the result.\n"
      },
      {
        "user": "brianmmorton",
        "created_at": "2016-09-09T18:00:01Z",
        "body": "Great. thanks for the help!\n"
      },
      {
        "user": "felixfbecker",
        "created_at": "2016-09-09T18:01:23Z",
        "body": "No problem :)\n"
      },
      {
        "user": "felixfbecker",
        "created_at": "2016-09-09T18:01:58Z",
        "body": "Oh, and if it wasn't clear, of course you can also just `res.json()` the result.\n"
      },
      {
        "user": "rafaelvmedeiros",
        "created_at": "2020-04-13T00:21:45Z",
        "body": "another option is set: nest: true\r\n\r\nawait Empresa.findOne({\r\n      where: {},\r\n      raw: true,\r\n      nest: true,\r\n      attributes: ['cnpj', 'razao_social', 'inscricao_estadual'],\r\n      include: [{}]"
      }
    ]
  },
  {
    "number": 6572,
    "title": "Sequelize omitting field when casting to array",
    "created_at": "2016-09-08T20:59:12Z",
    "closed_at": "2016-09-10T18:50:26Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/sequelize/sequelize/issues/6572",
    "body": "I am attempting to use the postgres citext module with Sequelize, so far it has worked well by using literals for queries and defining the type in the model. However because Sequelize does not understand what the citext type is, it returns my citext arrays as strings. e;g \"{item 1, item2}\"  \nTo get around this I am trying to cast the citext array to a TEXT or VARCHAR array in the query, however when I do this, Sequelize does not show that field at all.    \n\nIf I set raw: true, the field shows fine, and as an array.\n\n``` js\nUsers.findAndCountAll({\n        where: { },\n        attributes: [\n          'id',\n          'createdAt',\n          'updatedAt',\n          db.cast(db.col('nicknames'), 'text[]')\n        ]\n})\n```\n## What do you expect to happen?\n\nI expect there to be a nicknames field returned from sequelize and it to be an array, instead it's as if the attribute is not there at all.\n## What is actually happening?\n\nThis is the generated SQL, the SQL itself works fine when I try it in a database manager, but the output Sequelize gives me omits the nickname field.\n\nSELECT \"User\".\"id\", \"User\".\"createdAt\", \"User\".\"updatedAt\", CAST(\"nicknames\" AS TEXT[]) FROM \"Users\" AS \"User\" WHERE \"User\".\"deletedAt\" IS NULL;\n\n**Dialect:** postgres\n**Database version:** 9.5\n**Sequelize version:** 3.23.4\n",
    "comments_url": "https://api.github.com/repos/sequelize/sequelize/issues/6572/comments",
    "author": "SuperManifolds",
    "comments": [
      {
        "user": "felixfbecker",
        "created_at": "2016-09-09T06:51:59Z",
        "body": "You need to tell sequelize under which alias you want to have your expression. I believe the syntax is\n\n``` js\nUsers.findAndCountAll({\n        where: { },\n        attributes: [\n          'id',\n          'createdAt',\n          'updatedAt',\n          [db.cast(db.col('nicknames'), 'text[]'), 'nicknames']\n        ]\n})\n```\n\nbut please refer to the docs\n"
      },
      {
        "user": "SuperManifolds",
        "created_at": "2016-09-10T18:50:26Z",
        "body": "Worked! Can't believe I missed that, thank you so much.\n"
      }
    ]
  },
  {
    "number": 6564,
    "title": "How access a model's associated models",
    "created_at": "2016-09-07T18:20:05Z",
    "closed_at": "2016-09-07T18:22:50Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/sequelize/sequelize/issues/6564",
    "body": "Is there a programmatic way to access the associated models of a model?\n\nFor example, if there is a 1:M association between the models `Author` and `Book`, is there a way that I can access the `Book` model from the `Author` model along with the type of association?\n\nSomething like `Author.getAssociations()` would return something like:\n\n``` javascript\n[{\n    relationship: \"hasMany\",\n    model: Book\n}]\n```\n",
    "comments_url": "https://api.github.com/repos/sequelize/sequelize/issues/6564/comments",
    "author": "nareynolds",
    "comments": [
      {
        "user": "felixfbecker",
        "created_at": "2016-09-07T18:22:50Z",
        "body": "Yes, the associations are saved under `Model.associations`, which is an object hash from alias to association object. The association objects are seperate classes for hasMany / belongsTo / ... and have a couple of attributes, if they are not documented you might wanna peek into the source. \n"
      },
      {
        "user": "nareynolds",
        "created_at": "2016-09-07T18:49:07Z",
        "body": "thanks, again!\n"
      }
    ]
  },
  {
    "number": 6549,
    "title": "How can I create this SQL?",
    "created_at": "2016-09-06T08:05:47Z",
    "closed_at": "2016-09-07T01:05:04Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/sequelize/sequelize/issues/6549",
    "body": "Hello. \n## What you are doing?\n\n``` js\nRoom.belongsTo(Hotel, {foreignKey: 'hotelId'});\n\nRoom.findAndCountAll({\n  where: {\n    sellPrice: {lte: 10000}\n  },\n  include: [{\n    model: Hotel,\n    required: false,\n    where: {\n      region: 'Tokyo'\n    }\n  }]\n});\n\n```\n## What do you expect to happen?\n\n_I wanted._\n- get a room even if hotelId does not exist.\n- make the filter with the region.\n- LEFT OUTER JOIN `hotels` AS `hotel` ON `rooms`.`hotelId` = `hotel`.`id` **WHERE** `hotel`.`region` = 'Tokyo';\n### I wanted this sql\n\n``` sql\nSELECT `rooms`.`id`,\n       `rooms`.`hotelId`,\n       `rooms`.`hotelName`,\n       `rooms`.`roomType`,\n       `rooms`.`smoking`,\n       `rooms`.`breakfast`,\n       `rooms`.`dinner`,\n       `rooms`.`checkIn`,\n       `rooms`.`checkOut`,\n       `rooms`.`numberOfAdults`,\n       `rooms`.`numberOfChildren`,\n       `rooms`.`bookingFrom`,\n       `rooms`.`reservationCode`,\n       `rooms`.`confirmationCode`,\n       `rooms`.`originalPrice`,\n       `rooms`.`sellPrice`,\n       `rooms`.`discountRate`,\n       `rooms`.`chargeStatus`,\n       `rooms`.`postingPeriod`,\n       `rooms`.`message`,\n       `rooms`.`reviewStatus`,\n       `rooms`.`saleStatus`,\n       `rooms`.`transferStatus`,\n       `rooms`.`chargeId`,\n       `rooms`.`createdAt`,\n       `rooms`.`updatedAt`,\n       `hotel`.`id` AS `hotel.id`,\n       `hotel`.`name` AS `hotel.name`,\n       `hotel`.`kanaName` AS `hotel.kanaName`,\n       `hotel`.`formattedAddress` AS `hotel.formattedAddress`,\n       `hotel`.`country` AS `hotel.country`,\n       `hotel`.`region` AS `hotel.region`,\n       `hotel`.`locality` AS `hotel.locality`,\n       `hotel`.`subLocality1` AS `hotel.subLocality1`,\n       `hotel`.`subLocality2` AS `hotel.subLocality2`,\n       `hotel`.`subLocality3` AS `hotel.subLocality3`,\n       `hotel`.`subLocality4` AS `hotel.subLocality4`,\n       `hotel`.`postalCode` AS `hotel.postalCode`,\n       `hotel`.`phone` AS `hotel.phone`,\n       `hotel`.`fax` AS `hotel.fax`,\n       `hotel`.`access` AS `hotel.access`,\n       `hotel`.`station` AS `hotel.station`,\n       `hotel`.`reviewRate` AS `hotel.reviewRate`,\n       `hotel`.`reviewCount` AS `hotel.reviewCount`,\n       `hotel`.`parking` AS `hotel.parking`,\n       `hotel`.`images` AS `hotel.images`,\n       `hotel`.`checkInTime` AS `hotel.checkInTime`,\n       `hotel`.`checkOutTime` AS `hotel.checkOutTime`,\n       `hotel`.`lastCheckInTime` AS `hotel.lastCheckInTime`,\n       `hotel`.`hotelPolicy` AS `hotel.hotelPolicy`,\n       `hotel`.`cancelPolicy` AS `hotel.cancelPolicy`,\n       `hotel`.`creditCard` AS `hotel.creditCard`,\n       `hotel`.`latitude` AS `hotel.latitude`,\n       `hotel`.`longitude` AS `hotel.longitude`,\n       `hotel`.`listedStatus` AS `hotel.listedStatus`,\n       `hotel`.`source` AS `hotel.source`,\n       `hotel`.`createdAt` AS `hotel.createdAt`,\n       `hotel`.`updatedAt` AS `hotel.updatedAt`\nFROM `rooms` AS `rooms`\nLEFT OUTER JOIN `hotels` AS `hotel` ON `rooms`.`hotelId` = `hotel`.`id`\nWHERE `hotel`.`region` = 'Tokyo';\n```\n## What is actually happening?\n- filter with the region is not working.\n- LEFT OUTER JOIN `hotels` AS `hotel` ON `rooms`.`hotelId` = `hotel`.`id` **AND** `hotel`.`region` = 'Tokyo';\n### Actual sql\n\n``` sql\nSELECT `rooms`.`id`,\n       `rooms`.`hotelId`,\n       `rooms`.`hotelName`,\n       `rooms`.`roomType`,\n       `rooms`.`smoking`,\n       `rooms`.`breakfast`,\n       `rooms`.`dinner`,\n       `rooms`.`checkIn`,\n       `rooms`.`checkOut`,\n       `rooms`.`numberOfAdults`,\n       `rooms`.`numberOfChildren`,\n       `rooms`.`bookingFrom`,\n       `rooms`.`reservationCode`,\n       `rooms`.`confirmationCode`,\n       `rooms`.`originalPrice`,\n       `rooms`.`sellPrice`,\n       `rooms`.`discountRate`,\n       `rooms`.`chargeStatus`,\n       `rooms`.`postingPeriod`,\n       `rooms`.`message`,\n       `rooms`.`reviewStatus`,\n       `rooms`.`saleStatus`,\n       `rooms`.`transferStatus`,\n       `rooms`.`chargeId`,\n       `rooms`.`createdAt`,\n       `rooms`.`updatedAt`,\n       `hotel`.`id` AS `hotel.id`,\n       `hotel`.`name` AS `hotel.name`,\n       `hotel`.`kanaName` AS `hotel.kanaName`,\n       `hotel`.`formattedAddress` AS `hotel.formattedAddress`,\n       `hotel`.`country` AS `hotel.country`,\n       `hotel`.`region` AS `hotel.region`,\n       `hotel`.`locality` AS `hotel.locality`,\n       `hotel`.`subLocality1` AS `hotel.subLocality1`,\n       `hotel`.`subLocality2` AS `hotel.subLocality2`,\n       `hotel`.`subLocality3` AS `hotel.subLocality3`,\n       `hotel`.`subLocality4` AS `hotel.subLocality4`,\n       `hotel`.`postalCode` AS `hotel.postalCode`,\n       `hotel`.`phone` AS `hotel.phone`,\n       `hotel`.`fax` AS `hotel.fax`,\n       `hotel`.`access` AS `hotel.access`,\n       `hotel`.`station` AS `hotel.station`,\n       `hotel`.`reviewRate` AS `hotel.reviewRate`,\n       `hotel`.`reviewCount` AS `hotel.reviewCount`,\n       `hotel`.`parking` AS `hotel.parking`,\n       `hotel`.`images` AS `hotel.images`,\n       `hotel`.`checkInTime` AS `hotel.checkInTime`,\n       `hotel`.`checkOutTime` AS `hotel.checkOutTime`,\n       `hotel`.`lastCheckInTime` AS `hotel.lastCheckInTime`,\n       `hotel`.`hotelPolicy` AS `hotel.hotelPolicy`,\n       `hotel`.`cancelPolicy` AS `hotel.cancelPolicy`,\n       `hotel`.`creditCard` AS `hotel.creditCard`,\n       `hotel`.`latitude` AS `hotel.latitude`,\n       `hotel`.`longitude` AS `hotel.longitude`,\n       `hotel`.`listedStatus` AS `hotel.listedStatus`,\n       `hotel`.`source` AS `hotel.source`,\n       `hotel`.`createdAt` AS `hotel.createdAt`,\n       `hotel`.`updatedAt` AS `hotel.updatedAt`\nFROM `rooms` AS `rooms`\nLEFT OUTER JOIN `hotels` AS `hotel` ON `rooms`.`hotelId` = `hotel`.`id`\nAND `hotel`.`region` = 'Tokyo';\n```\n\n**Dialect:** mysql\n**Database version:** 5.7.11\n**Sequelize version:** 3.24.1\n",
    "comments_url": "https://api.github.com/repos/sequelize/sequelize/issues/6549/comments",
    "author": "tomoktan",
    "comments": [
      {
        "user": "felixfbecker",
        "created_at": "2016-09-06T08:08:01Z",
        "body": "It's `$lte`\n"
      },
      {
        "user": "tomoktan",
        "created_at": "2016-09-06T09:03:36Z",
        "body": "@felixfbecker\nIt means that this?\n\n``` js\nRoom.belongsTo(Hotel, {foreignKey: 'hotelId'});\n\nRoom.findAndCountAll({\n  where: {\n    sellPrice: {$lte: 10000}\n  },\n  include: [{\n    model: Hotel,\n    required: false,\n    where: {\n      region: 'Tokyo'\n    }\n  }]\n});\n```\n\nBut , it does not work yet as i think.\n"
      },
      {
        "user": "janmeier",
        "created_at": "2016-09-06T10:55:59Z",
        "body": "If you want where clauses on the outer statement, you should put them at the top level of the sequelize options as well :)\n\n``` js\nRoom.findAndCountAll({\n  where: {\n    sellPrice: {$lte: 10000}\n    '$hotel.region$': 'Tokyo'\n  },\n  include: [{\n    model: Hotel,\n    required: false\n  }]\n});\n```\n\nNotice the use of `$` to refer to columns from the join table\n"
      },
      {
        "user": "tomoktan",
        "created_at": "2016-09-07T01:05:04Z",
        "body": "@janmeier Thank you! It worked! (^o^)\n"
      }
    ]
  },
  {
    "number": 3237,
    "title": "Question: raw:true in the relational queries",
    "created_at": "2015-02-27T18:17:33Z",
    "closed_at": "2015-02-28T12:44:52Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/sequelize/sequelize/issues/3237",
    "body": "Hi,\n\nAssuming I have the next relations described:\n\n``` javascript\n    models.User.belongsToMany(models.Role,{through:'user__role',foreignKey:'users_id',otherKey:'roles_id'});\n```\n\nSo in the code I do the next:\n\n``` javascript\nUser.find(2298139).then(function(user){\n                    user.getRoles().then(function(roles){\n                        console.log(roles);\n                        reply(roles);\n                    });\n                });\n```\n\nAnd I want to receive the plain result, without the sequelize wrappings.\n\nThe questions are:\n1. How and where should I inject `{options: {raw: true}}`\n2. How can I know that the `raw:true` had worked? I mean how the roles object would be different then?\n\nLooking forward to receive any answer.\n\nRegards,\n",
    "comments_url": "https://api.github.com/repos/sequelize/sequelize/issues/3237/comments",
    "author": "PavelPolyakov",
    "comments": [
      {
        "user": "mickhansen",
        "created_at": "2015-02-28T08:25:47Z",
        "body": "likely `user.getRoles({raw: true})`.\nYou would know it by roles not being instances, and just being POJOs.\n"
      },
      {
        "user": "PavelPolyakov",
        "created_at": "2015-02-28T08:53:32Z",
        "body": "@mickhansen \n\nThanks for the response.\n\nThe thing is, that I receive the same object each time, it looks like this:\n\n``` javascript\n[ { dataValues: { id: '606', name: 'USER', client: null, user__role: [Object] },\n    _previousDataValues: { id: '606', name: 'USER', client: null, user__role: [Object] },\n    __options: \n     { timestamps: false,\n       createdAt: 'createdAt',\n       updatedAt: 'updatedAt',\n       deletedAt: 'deletedAt',\n       instanceMethods: [Object],\n       classMethods: {},\n       validate: {},\n       freezeTableName: true,\n       underscored: false,\n       underscoredAll: false,\n       paranoid: false,\n       whereCollection: [Object],\n       schema: null,\n       schemaDelimiter: '',\n       defaultScope: null,\n       scopes: null,\n       hooks: {},\n       name: [Object],\n       indexes: [],\n       getterMethods: {},\n       tableName: 'role',\n       omitNull: false,\n       sequelize: [Object],\n       uniqueKeys: {},\n       hasPrimaryKeys: true },\n    options: \n     { isNewRecord: false,\n       isDirty: false,\n       include: [Object],\n       includeNames: [Object],\n       includeMap: [Object],\n       includeValidated: true,\n       attributes: [Object],\n       raw: true },\n    hasPrimaryKeys: true,\n    __eagerlyLoadedAssociations: [],\n    isNewRecord: false,\n    user__role: \n     { dataValues: [Object],\n       _previousDataValues: [Object],\n       __options: [Object],\n       options: [Object],\n       hasPrimaryKeys: true,\n       __eagerlyLoadedAssociations: [],\n       isNewRecord: false } } ]\n```\n\nI've tried to do:\n\n``` javascript\nuser.getRoles()\nuser.getRoles({raw: true})\nuser.getRoles({options:{raw: true}})\n```\n\nAs I understand, it's expected that I would receive something like:\n\n``` javascript\n[{\n    id: \"606\",\n    name: \"USER\",\n    client: null,\n    user__role: {\n        users_id: \"2294553\",\n        roles_id: \"606\"\n    }\n}]\n```\n\nAm I right? Or I already receive the raw object?\n"
      },
      {
        "user": "mickhansen",
        "created_at": "2015-02-28T12:33:27Z",
        "body": "Try `user.getRoles({}, {raw: true})`\n"
      },
      {
        "user": "PavelPolyakov",
        "created_at": "2015-02-28T12:44:52Z",
        "body": "@mickhansen \nCool, this works!\n"
      }
    ]
  },
  {
    "number": 3082,
    "title": "Update a record by using an instance method on one of the fields (one query)",
    "created_at": "2015-02-09T18:30:59Z",
    "closed_at": "2015-02-12T23:38:59Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/sequelize/sequelize/issues/3082",
    "body": "Hi,\n\n  First off - sequelize has been a pleasure to work with.  Been helping much on a project I'm working on.  Digging around github, looks like LOTS of hard and mindful work has been put in.  Thanks. \n\n  I was wondering if it was possible to use a Model's instance method in the updating of a specific row.  The preference is to generate one update query (update... where...) and keep associated Model functionality, like creating a UUID, in the Model without replicating elsewhere.  So doing a find first, then an update would allow me to use instance methods (or getters/setters) on the Model, but would be an example of two queries.  I could also do an update() call with where clause, but would have to re-create the functionality in my model, like the generation of a UUID, and use that inside my update().  \n\nI'm using 2.0.0-rc8 with postgres.\n\nModel:\nI've simplified the Model here...\n\n``` javascript\nmodule.exports = function(sequelize, DataTypes) {\n  var tableA = sequelize.define(\"tableA\", {\n    id: {\n      type: DataTypes.UUID,\n      primaryKey: true,\n      defaultValue: DataTypes.UUIDV4,\n    }\n  }, {\n    classMethods: {\n      associate: function(models) {\n        tableA.belongsTo(models.tableB);\n      }\n    },\n    instanceMethods: {\n      newUUID: function() {\n        return uuid.v4();  // required sequelize's module dependency on node-uuid to enable this\n      }\n    }\n  });\n```\n\n  There are three ways I was trying to make this happen, and I'm probably just missing something...\n\n1.Using the update method:\n\n``` javascript\ntableA.update({\n      id: this.newUUID,\n    }, {\n      where: {\n        tableB_id: 'some value'\n      }\n    }\n  );\n```\n\nThe problem is that 'primaryKey' is considered null and this violate a not-null constraint - my understanding is that Model instance methods, and getters/setters require an instance to be created first, hence the issue.  I've observed this occurring with a field that is allowNull: false too.\n\n2.Building to generate an instance method:\n\n``` javascript\nvar tableUpdate = models.tableA.build({\n    id: this.newUUID,\n  }, {\n    isNewRecord: false  // to make this an update and NOT a create\n  });\n```\n\nThis works in providing me access to an instance method or a getter/setter, however I can't figure out how to limit the update to a \"where\" on a foreign key field.\n\n3.Creating a public function, outside sequelize, as a helper of sorts:\n\n``` javascript\nmodule.exports = function(sequelize, DataTypes) {\n  var tableA = sequelize.define(\"tableA\", {\n    id: {\n      type: DataTypes.UUID,\n      primaryKey: true,\n      defaultValue: DataTypes.UUIDV4,\n    }\n  }, {\n    classMethods: {\n      associate: function(models) {\n        tokenA.belongsTo(models.tableB);\n      }\n    }\n  });\n\n  tableA.newUUID = function() {\n    return uuid.v4();\n  }\n\n... then later on \n\n    tableA.update({\n      id: tableA.newUUID,\n    }, {\n      where: {\n        tableB_id: 'some value'\n      }\n    }\n  );\n```\n\nThis works, but its nature does not make it exclusive to a model's instance.  Maybe its good enough - it opens the door for a model helper file. \n\nIf it's not possible to do such a thing with one query, is it reasonable to request an options.where for a build? Or possibly some other solution?\n\nI may have overcomplicated things with my desire for one query vs two.  I'm open to any suggestions/best-practices.\n\nThanks.\n",
    "comments_url": "https://api.github.com/repos/sequelize/sequelize/issues/3082/comments",
    "author": "shaiherman",
    "comments": [
      {
        "user": "janmeier",
        "created_at": "2015-02-10T08:47:07Z",
        "body": "I think you should be able to call the instance method like this:\n\n``` js\ntableA.update({\n  id: tableA.Instance.prototype.newUUID(),\n}, {\n  where: {\n    tableB_id: 'some value'\n  }\n});\n```\n"
      },
      {
        "user": "shaiherman",
        "created_at": "2015-02-10T22:36:42Z",
        "body": "That works!  Thanks.\n\nMade me dig around models.js and understand things a lil better - appreciate it. \n"
      }
    ]
  },
  {
    "number": 3015,
    "title": "ORDER BY applied incorrectly with nested includes",
    "created_at": "2015-01-27T23:01:26Z",
    "closed_at": "2015-01-28T19:14:13Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/sequelize/sequelize/issues/3015",
    "body": "I'm trying to get the last few files like this:\n\n```\ndb.files.findAll(\n      {\n        where: {\n          id: id,\n          company_id: company_id,\n        },\n        include: [\n          {model: db.datasource, include: [db.job]}\n        ],\n        limit: 4,\n        order: 'created_at DESC'\n      }\n    )\n```\n\nIt generates a query like this:\n\n```\nSELECT \"filesToMap\".*, [... AS ...]\nFROM (SELECT \"files\".\"id\", [...COLUMNS... ]\n      FROM \"files\" AS \"files\" WHERE \"files\".\"company_id\"='1659' LIMIT 4) \n  AS \"files\" LEFT OUTER JOIN \"datasources\" AS \"datasource\" ON \"files\".\"datasource_id\" = \"datasource\".\"id\" \n  LEFT OUTER JOIN \"jobs\" AS \"datasource.jobs\" ON \"datasource\".\"id\" = \"datasource.jobs\".\"datasource_id\" \nORDER BY created_at DESC;\n```\n\nNotice the created_at is at the end, it should be after the LIMIT 4. I end up getting the first files rather than the last.\n",
    "comments_url": "https://api.github.com/repos/sequelize/sequelize/issues/3015/comments",
    "author": "marcus",
    "comments": [
      {
        "user": "mickhansen",
        "created_at": "2015-01-28T10:00:26Z",
        "body": "Hi @marcus \n\nThis might be a bit confusing but the syntax you're using is for raw orders so we don't know where to place it.\n\nIf you use:\n\n``` js\norder: [\n  ['created_at', 'DESC']\n]\n```\n\nWe know that you mean `created_at` on the main table and it will be inside the subquery.\n"
      },
      {
        "user": "marcus",
        "created_at": "2015-01-28T17:39:15Z",
        "body": "Huh. Yes, that is confusing but it works! Thank you very much for answering!\n"
      },
      {
        "user": "mickhansen",
        "created_at": "2015-01-28T19:14:13Z",
        "body": "Yes but thats because `order: string` is use literally.\n"
      }
    ]
  },
  {
    "number": 2775,
    "title": "BOOLEAN field not updating when passed a string 'true' or 'false' (Postgres)",
    "created_at": "2014-12-24T07:27:42Z",
    "closed_at": "2015-02-23T10:01:24Z",
    "labels": [
      "question",
      "type: docs"
    ],
    "url": "https://github.com/sequelize/sequelize/issues/2775",
    "body": "I have the following model: \n\n``` javascript\n\"use strict\";\n\nmodule.exports = function(sequelize, DataTypes) {\n  var Program = sequelize.define(\"Program\", {\n    name: {\n      type: DataTypes.STRING,\n      allowNull: false\n    },\n    short_name: DataTypes.STRING,\n    description: DataTypes.STRING,\n    short_description: DataTypes.STRING,\n    fitness_level: {\n      type: DataTypes.ENUM('average', 'good', 'high'),\n      defaultValue: 'average'\n    },\n    prerequisites: DataTypes.ARRAY(DataTypes.STRING),\n    knowledge_skills_equipment: DataTypes.ARRAY(DataTypes.STRING),\n    premium_activity: {\n      type: DataTypes.BOOLEAN,\n      defaultValue: false\n    },\n    location: {\n      type: DataTypes.ENUM('onsite', 'offsite'),\n      defaultValue: 'onsite',\n      allowNull: false\n    },\n    program_periods_available: DataTypes.INTEGER,\n    max_participants_per_period: DataTypes.INTEGER,\n    program_periods_required: {\n      type: DataTypes.INTEGER,\n      defaultValue: 1,\n      validate: { min: 1, max: 3 },\n      allowNull: false\n    },\n    fee: {\n      type: DataTypes.FLOAT,\n      defaultValue: 0.00\n    },\n    hidden: {\n      type: DataTypes.BOOLEAN,\n      defaultValue: true,\n      allowNull: false\n    },\n    oos_required: {\n      type: DataTypes.INTEGER,\n      defaultValue: 0,\n      allowNull: false\n    }\n  }, {\n    underscored: true,\n    classMethods: {\n      associate: function(models) {\n        Program.hasMany(models.OOS, { as: 'OOS', through: 'program_oos_assignments' })\n      }\n    }\n  });\n\n  return Program;\n};\n```\n\nIf I pass a boolean literal to `Instance#updateAttributes`, the value gets updated successfully:\n\n``` javascript\nmodels.Program.find(1).then(function(record) { record.updateAttributes( {hidden: true} ) })\n```\n\nSQL Generated:\n\n``` sql\nExecuting (default): SELECT \"id\", \"name\", \"short_name\", \"description\", \"short_description\", \"fitness_level\", \"prerequisites\", \"knowledge_skills_equipment\", \"premium_activity\", \"location\", \"program_periods_available\", \"max_participants_per_period\", \"program_periods_required\", \"fee\", \"hidden\", \"oos_required\", \"created_at\", \"updated_at\" FROM \"Programs\" AS \"Program\" WHERE \"Program\".\"id\"=1;\nExecuting (default): UPDATE \"Programs\" SET \"hidden\"=true,\"updated_at\"='2014-12-24 07:17:01.762 +00:00' WHERE \"id\"=1 RETURNING *\n```\n\nIf I pass in a string value of 'true' or 'false' (as might be received in a form POST), I get some weird behaviour:\n\n``` javascript\nmodels.Program.find(1).then(function(record) { record.updateAttributes( {hidden: 'true'} ) })\n```\n\nSQL Generated: \n\n``` sql\nExecuting (default): SELECT \"id\", \"name\", \"short_name\", \"description\", \"short_description\", \"fitness_level\", \"prerequisites\", \"knowledge_skills_equipment\", \"premium_activity\", \"location\", \"program_periods_available\", \"max_participants_per_period\", \"program_periods_required\", \"fee\", \"hidden\", \"oos_required\", \"created_at\", \"updated_at\" FROM \"Programs\" AS \"Program\" WHERE \"Program\".\"id\"=1;\nExecuting (default): UPDATE \"Programs\" SET \"hidden\"=false,\"updated_at\"='2014-12-24 07:18:01.253 +00:00' WHERE \"id\"=1 RETURNING *\n```\n\nIn this case, setting `hidden` to `'true'` (or any string value, for that matter) resulted in it being set to `false`.\n\nI've tried using a setter method on the `hidden` field to cast the string to a boolean:\n\n``` javascript\nfunction castStringToBoolean(value) {\n  var ret;\n  if (value === 'true') {\n    ret = true;\n  } else {\n    ret = false;\n  }\n  return ret;\n}\n```\n\nWith this setter in place, nothing at all is set for the `hidden` field:\n\n``` javascript\nmodels.Program.find(1).then(function(record) { record.updateAttributes( {hidden: 'true'} ) })\n```\n\nSQL Generated:\n\n``` sql\nExecuting (default): SELECT \"id\", \"name\", \"short_name\", \"description\", \"short_description\", \"fitness_level\", \"prerequisites\", \"knowledge_skills_equipment\", \"premium_activity\", \"location\", \"program_periods_available\", \"max_participants_per_period\", \"program_periods_required\", \"fee\", \"hidden\", \"oos_required\", \"created_at\", \"updated_at\" FROM \"Programs\" AS \"Program\" WHERE \"Program\".\"id\"=1;\nExecuting (default): UPDATE \"Programs\" SET \"updated_at\"='2014-12-24 07:20:49.153 +00:00' WHERE \"id\"=1 RETURNING *\n```\n\nIf I cast the field to a boolean before sending it to `updateAttributes` (e.g. in my Express route handler), then it works:\n\n``` javascript\nif (req.body.hasOwnProperty('hidden') && typeof req.body.hidden === 'string') {\n    req.body.hidden = req.body.hidden === 'true' ? true : false\n}\n```\n\nWhat is the proper way of handling booleans in Seqelize? Why is the setter method not working as I think it should?\n",
    "comments_url": "https://api.github.com/repos/sequelize/sequelize/issues/2775/comments",
    "author": "grahamb",
    "comments": [
      {
        "user": "mickhansen",
        "created_at": "2014-12-24T09:42:32Z",
        "body": "The proper way is using literal booleans.\nA setter/getter should definitely work, have you tried something like:\n\n``` js\nhidden: {\n  type: DataTypes.BOOLEAN,\n  defaultValue: true,\n  allowNull: false,\n  set: function(value) {\n    if (value === 'true') value = true;\n    if (value === 'false') value = false;\n    this.setDataValue('hidden', value);\n  }\n}\n```\n"
      },
      {
        "user": "grahamb",
        "created_at": "2014-12-24T17:58:48Z",
        "body": "Ah, I see now that I my setter was incorrect; I was returning what the new value should be instead of calling `this.setDataValue` to set it.\n\nThe docs aren't very clear on this. The \"example\" given for a setter leaves much to be desired:\n\n``` javascript\n set      : function(v) { /* do your magic with the input here! */ }\n```\n\nHaving a concrete example of \"magic\" would be very helpful. The biggest problem I've run into so far with Sequelize is the documentation. It's lengthy, but not terribly useful. It doesn't help that there is two different and inconsistent versions. The docs on sequelizejs.com are for 1.7.8 and still come up in google searches, while the ones on sequelize.readthedocs.org reference things that don't yet exist in 2.0.0rc3 (e.g. the docs reference the `belongsToMany` association, but that doesn't exist on 2.0.0rc3, it's still `hasMany`).\n"
      },
      {
        "user": "mickhansen",
        "created_at": "2014-12-26T10:41:14Z",
        "body": "@grahamb right you are, that's a very incomplete example.\nDocs are a sore thumb for us yes, we are working hard on it currently with the move to RTD and a huge update to 2.0 docs. Hopefully we'll have the docs updated completely in early january.\n"
      },
      {
        "user": "mickhansen",
        "created_at": "2014-12-26T10:42:09Z",
        "body": "We should probably redirect the pages google can lookup to the new read the docs.\n"
      },
      {
        "user": "mickhansen",
        "created_at": "2014-12-26T10:43:35Z",
        "body": "@grahamb The docs are part of the main repo, we would appreciate ANY help in making them more clear and helpfull for new users (we are really only two maintainers and we have to keep on top of bugs too :))\n"
      },
      {
        "user": "janmeier",
        "created_at": "2015-02-23T10:01:45Z",
        "body": "I've rewritten the example slightly and removed any mention of magic - hopefully that makes it more clear :)\n"
      }
    ]
  },
  {
    "number": 2648,
    "title": "how to assign relationship in more than one many to many relationships",
    "created_at": "2014-12-03T07:29:23Z",
    "closed_at": "2014-12-05T03:36:51Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/sequelize/sequelize/issues/2648",
    "body": "Now I'm running into a problem , I have two entities of person and company, at the same time, they have two relationships say companyperson, boardmembership, and both of them are many to many. Here is the problem ,when I use like this:\n    person.getCompanies()\nwhich give me companies of boardmembership, but how can I get companies from relation table of companyperson? Is there any ways to explicitly assign my relation table?\n",
    "comments_url": "https://api.github.com/repos/sequelize/sequelize/issues/2648/comments",
    "author": "mike442144",
    "comments": [
      {
        "user": "janmeier",
        "created_at": "2014-12-03T07:44:25Z",
        "body": "``` js\nPerson.hasMany(Company, { through: 'CompanyPerson', as: 'Companies' });\nCompany.hasMany(Person, { through: 'CompanyPerson', as: 'Employees' });\n\nPerson.hasMany(Company, { through: 'BoardMembership', as: 'Boards' });\nCompany.hasMany(Person, { through: 'BoardMembership', as: 'BoardMembers' });\n```\n\n`person.getCompanies()` will give you all companies where that user is employed, while `person.getBoards()` will get you all companies where that user is a board member. You can change what the `getBoards` accessor will be by changing the `as` part of the relation\n"
      },
      {
        "user": "mike442144",
        "created_at": "2014-12-03T08:58:04Z",
        "body": "@janmeier thanks a lot, I changed to use the `as` just now, but I cannot get any entities too. the output is below:\n`{\"isFulfilled\":false,\"isRejected\":false}`\nwhat does this mean? I should load relation entities when I load data from database?\nThanks.\n"
      },
      {
        "user": "mickhansen",
        "created_at": "2014-12-03T09:19:39Z",
        "body": "@mike442144 it's returning a promise, you need to use `.then()`\n"
      },
      {
        "user": "mike442144",
        "created_at": "2014-12-03T09:29:51Z",
        "body": "@mickhansen That's great, I make it. Many thanks.\n"
      },
      {
        "user": "mike442144",
        "created_at": "2014-12-04T14:02:49Z",
        "body": "Now here is a new problem, I want to query all persons and boardmembers of one company just use `include`, but I tried include Person, CompanyPerson and Employees, neither is correct. I just don't want to call Company.getEmployees() and Company.getBoardMembers() after query from database. thanks.\n"
      },
      {
        "user": "mickhansen",
        "created_at": "2014-12-04T15:08:44Z",
        "body": "@mike442144 please always show what you actually tried\nHave you tried:\n\n``` js\nCompany.findAll({\n  include: [\n    {model: User, as: 'BoardMembers'},\n    {model: User, as: 'Employees'}\n  ]\n});\n```\n"
      },
      {
        "user": "mike442144",
        "created_at": "2014-12-05T03:36:51Z",
        "body": "@mickhansen That's great. everything is ok then. Thank you very much.\n"
      }
    ]
  },
  {
    "number": 2530,
    "title": "proper way of doing instance update",
    "created_at": "2014-11-05T05:52:58Z",
    "closed_at": "2014-11-05T12:20:31Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/sequelize/sequelize/issues/2530",
    "body": "why does update does not take the form of \nModel.build().update({attributes to be update})?\n",
    "comments_url": "https://api.github.com/repos/sequelize/sequelize/issues/2530/comments",
    "author": "rutaihwa",
    "comments": [
      {
        "user": "janmeier",
        "created_at": "2014-11-05T06:41:55Z",
        "body": "Not sure what you mean here? Update can be called on an instance, so that will already be built. And as far as I know bulk update will do a build before updating to get default values etc \n"
      },
      {
        "user": "mickhansen",
        "created_at": "2014-11-05T10:06:46Z",
        "body": "It's possible to do:\n\n``` js\nModel.build({ primaryKey: 1 }, {isNewRecord: false}).updateAttributes(values);\n// or\nModel.update(values, {where: {primaryKey: 1}})\n```\n"
      },
      {
        "user": "rutaihwa",
        "created_at": "2014-11-05T12:20:31Z",
        "body": "@janmeier I knew you could build an update bulk instances but i didn't know how to call with updateAttributes.  I find that this syntax better than the later one. @mickhansen :+1: \n"
      }
    ]
  },
  {
    "number": 2460,
    "title": "Multi-Level Includes and Aggregate Functions",
    "created_at": "2014-10-21T21:13:30Z",
    "closed_at": "2014-10-22T16:16:33Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/sequelize/sequelize/issues/2460",
    "body": "Trying to do a little more advanced queries with what I have setup and I'm running into a few issues. Looking for a nudge in the right direction. I have a model which contains three major objects `user`, `action`, and `actionValue`. The idea is that a user can take multiple actions multiple times and each of those actions are worth some amount of points.\n\nI'm trying to model the calculations for total points inside of a find statement to be used on a dashboard of sorts but I'm having troubles figuring out how to do all of this in Sequelize without using a custom query.\n\nHere's my data model.\n### User\n- id (int) - Auto-generated\n- username (string) - user input\n### Action\n- id (int) - Auto-generated\n- actionTypeId (int) - The ID for the corresponding action in the `actionType` model.\n- count (int) - Number of times the action has been done\n## Action Type\n- id (int) - Auto-generated\n- name (string) - Name of the action\n- value (int) - Number of points the action is worth.\n\nWhat I'm trying to do is retrieve a summary of the points for the user based on the type of action. To do this my `find()` statement looks like the following:\n\n``` js\nmodel.user.find(\n    {\n        where: {\n            username: 'bob'\n        },\n        include: [\n            {\n                model: model.action,\n                include: [ model.actionType ]\n            }\n        ]\n    }\n)\n```\n\nThis will retrieve for me the row on `user` that has a `username` of 'bob' and then retrieve all of their rows on the `action` table and the associated `actionType` record for each, sample below (represented as a JSON array of objects since it is too many fields for a table).\n\n``` js\n[\n  {\n   \"id\": 0\n   \"username\": \"bob\",\n   \"action.id\": 0,\n   \"action.actionTypeId\": 0,\n   \"action.count\": 5,\n   \"action.actionType.id\": 0,\n   \"action.actionType.name\": \"Lost Game\",\n   \"action.actionType.value\": 2\n  },\n  {\n   \"id\": 0\n   \"username\": \"bob\"\n   \"action.id\": 1\n   \"action.actionTypeId\": 1\n   \"action.count\": 3\n   \"action.actionType.id\": 0\n   \"action.actionType.name\": \"Won Game\",\n   \"action.actionType.value\": 10\n  }\n]\n```\n\nI could then parse through that data and I would come out with composite values by multiplying the number of times an action was taken with the value it holds. So for the data above I would see that the user `bob` got 10 points (5 \\* 2) for losing a total of 5 games, and then he got 30 points (3 \\* 10) for winning a total of 3 games giving `bob` a grand total of 40 points.\n\nSince I want to be able to utilize the ordering and other capabilities of the database I want to be able to calculate what I ran through above in my query instead of having to do it on the application server.\n\nIdeally I'm looking for output containing the following (again a JSON object because it is too large for a table):\n\n``` js\n{\n  \"id\": 0,\n  \"username\": \"bob\",\n  \"score\": 40 // This would be the `sum(action.count * action.actionType.value)`\n}\n```\n\nAny help on if this is feasible right now or not through the model would be much appreciated. Thanks!\n",
    "comments_url": "https://api.github.com/repos/sequelize/sequelize/issues/2460/comments",
    "author": "DavidTPate",
    "comments": [
      {
        "user": "mickhansen",
        "created_at": "2014-10-22T07:02:30Z",
        "body": "Not sure it will work but you could try adding:\n\n``` js\nattributes: ['id', 'username', [sequelize.fn('SUM', sequelize.col('action.count') + '*' + sequelize.col('action.actionType.value')), 'score']]`\n```\n\nHowever you will likely still need a group by statement added. But try this at first and see how it works out (i haven't tested it).\n"
      },
      {
        "user": "DavidTPate",
        "created_at": "2014-10-22T14:11:38Z",
        "body": "Thanks, gave that a try and after some tweaking I was able to get it fairly close, just hitting an issue where `sequelize.fn()` combines the strings as comma-separated values (makes sense since it is a generic function generation function).\n\nWhat I ended up having to do was:\n\n``` js\nmodel.user.find(\n    {\n        where: {\n            username: 'bob'\n        },\n        include: [\n            {\n                model: model.action,\n                include: [ model.actionType ],\n                attributes: [\n                  [sequelize.fn('SUM', sequelize.col('action.count'), sequelize.literal('*'), sequelize('action.actionType.value')), 'score']\n                ]\n            }\n        ]\n    }\n)\n```\n\nThis ends up producing the following:\n\n``` sql\nSELECT \n    `user`.*,\n    SUM(`actions`.`count`, *, `actions.actionTypes`.`value`) AS `actions.score`,\n    `actions.actionTypes`.`id` AS `actions.actionTypes.id`,\n    `actions.actionTypes`.`name` AS `actions.actionTypes.name`,\n    `actions.actionTypes`.`value` AS `actions.actionTypes.value`,\n    `actions.actionTypes`.`createdAt` AS `actions.actionTypes.createdAt`,\n    `actions.actionTypes`.`updatedAt` AS `actions.actionTypes.updatedAt`\nFROM\n    (SELECT \n        `user`.`id`,\n        `user`.`username`\n    FROM\n        `users` AS `user`\n    WHERE\n        `user`.`username` = 'bob'\n    LIMIT 1) AS `user`\n        LEFT OUTER JOIN\n    `actions` AS `actions` ON `user`.`id` = `actions`.`userId`\n        LEFT OUTER JOIN\n    `actionTypes` AS `actions.actionTypes` ON `actions.actionTypeId`.`id` = `actions`.`actionTypeId`\n\n```\n\nYou'll notice it has the following `SUM('actions'.'count', *, 'actions.actionTypes'.'value')` which is invalid syntax for SQL. Seems like the last piece (outside of adding my group by statements) is just figuring out how I can join those in the SUM function through sequelize.\n\nThe reason why I had to do: `[sequelize.fn('SUM', sequelize.col('action.count'), sequelize.literal('*'), sequelize('action.actionType.value')), 'score']` instead of the more literal version that you suggested is because `sequelize.fn()` expects what is sent to it to be one of the sequelize types so that it can use the query generator and `sequelize.col()` (along with the others) expects to be called with a query generator when `toString()` is called.\n\nThis might be the point where I have to do it with string literals, and I'm honestly okay with that. I think my use is a specialized case and I have yet to find any ORM that could even come this close to doing this complex query.\n"
      },
      {
        "user": "mickhansen",
        "created_at": "2014-10-22T15:15:48Z",
        "body": "Yeah it might be easier just to use something like `attributes: [[sequelize.literal('SUM()', 'score')]]`.\r\nWe are always looking to figure out ways to cover complex cases for these, so if you have any API ideas for it it would be welcome.\r\n"
      },
      {
        "user": "DavidTPate",
        "created_at": "2014-10-22T16:16:33Z",
        "body": "Gotcha. Thanks for the help!\n\nGoing to go ahead and close this since all my questions are answered. I'll give some thought to the API and contribute with what I can think of.\n"
      },
      {
        "user": "QwertyZW",
        "created_at": "2017-01-09T15:23:40Z",
        "body": "@mickhansen missing a `)` after 'score'.\r\n\r\nIt's `attributes: [[sequelize.literal('SUM()', 'score')]]` for the copypasta squad "
      },
      {
        "user": "mickhansen",
        "created_at": "2017-01-09T15:24:39Z",
        "body": "@QwertyZW Thanks, fixed :)"
      },
      {
        "user": "QwertyZW",
        "created_at": "2017-01-09T18:54:31Z",
        "body": "Btw is there a way to do what the OP is trying to do in 2017? trying out various methods but with no luck. I'm a bit of a newbie with sequelize \r\n\r\nThis code\r\n```\r\n  provider.find({\r\n    where:{\r\n      name: req.query.name\r\n    },\r\n    include: [ \r\n      { \r\n        model: models.Component,   \r\n        include: [\r\n          {\r\n            model: models.TimestampStatus,\r\n          } \r\n        ] \r\n      } \r\n    ]\r\n  })\r\n```\r\n\r\n\r\ngenerates this SQL \r\n\r\n```\r\nSELECT `Provider`.*, `Components`.`id` AS `Components.id`, `Components`.`name` AS `Components.name`, `Components`.`description` AS `Components.description`, `Components`.`createdAt` AS `Components.createdAt`, `Components`.`updatedAt` AS `Components.updatedAt`, `Components`.`ProviderId` AS `Components.ProviderId`, `Components.TimestampStatuses`.`id` AS `Components.TimestampStatuses.id`, `Components.TimestampStatuses`.`status` AS `Components.TimestampStatuses.status`, `Components.TimestampStatuses`.`createdAt` AS `Components.TimestampStatuses.createdAt`, `Components.TimestampStatuses`.`updatedAt` AS `Components.TimestampStatuses.updatedAt`, `Components.TimestampStatuses`.`ComponentId` AS `Components.TimestampStatuses.ComponentId`, `Components.TimestampStatuses`.`ScanId` AS `Components.TimestampStatuses.ScanId` FROM (SELECT `Provider`.`id`, `Provider`.`parser`, `Provider`.`name`, `Provider`.`createdAt`, `Provider`.`updatedAt` FROM `Providers` AS `Provider` WHERE `Provider`.`name` = 'name' LIMIT 1) AS `Provider` LEFT OUTER JOIN `Components` AS `Components` ON `Provider`.`id` = `Components`.`ProviderId` LEFT OUTER JOIN `TimestampStatuses` AS `Components.TimestampStatuses` ON `Components`.`id` = `Components.TimestampStatuses`.`ComponentId`;\r\n```\r\n\r\nAll I wanna do is add a MAX(...) to the SELECT and append a GROUP BY at the end to get this sql:\r\n\r\n```\r\nSELECT MAX(`Components.TimestampStatuses`.`createdAt`), `Provider`.*, `Components`.`id` AS `Components.id`, `Components`.`name` AS `Components.name`, `Components`.`description` AS `Components.description`, `Components`.`createdAt` AS `Components.createdAt`, `Components`.`updatedAt` AS `Components.updatedAt`, `Components`.`ProviderId` AS `Components.ProviderId`, `Components.TimestampStatuses`.`id` AS `Components.TimestampStatuses.id`, `Components.TimestampStatuses`.`status` AS `Components.TimestampStatuses.status`, `Components.TimestampStatuses`.`createdAt` AS `Components.TimestampStatuses.createdAt`, `Components.TimestampStatuses`.`updatedAt` AS `Components.TimestampStatuses.updatedAt`, `Components.TimestampStatuses`.`ComponentId` AS `Components.TimestampStatuses.ComponentId`, `Components.TimestampStatuses`.`ScanId` AS `Components.TimestampStatuses.ScanId` FROM (SELECT `Provider`.`id`,  `Provider`.`parser`, `Provider`.`name`, `Provider`.`createdAt`, `Provider`.`updatedAt` FROM `Providers` AS `Provider` WHERE `Provider`.`name` = 'name' LIMIT 1) AS `Provider` LEFT OUTER JOIN `Components` AS `Components` ON `Provider`.`id` = `Components`.`ProviderId` LEFT OUTER JOIN `TimestampStatuses` AS `Components.TimestampStatuses` ON `Components`.`id` = `Components.TimestampStatuses`.`ComponentId` GROUP BY `Components` . `id`;\r\n```\r\n\r\nI've tried a mixture of things including everything in this thread but with no luck.\r\n\r\nIn essence I'm trying to get the MAX createdAt value of TimestampStatuses.createdAt for each Components.id group\r\n\r\nNode: 6.9.2\r\n\"sequelize\": \"^3.28.0\"\r\n\r\n(This is a messy looking version of the same code that shows some of what I've already tried)\r\n```\r\n  // find the provider, nest all the components and nest their timestamps within them\r\n\r\n//  models.sequelize.query('SET GLOBAL sql_mode=(SELECT REPLACE(@@sql_mode,\\'ONLY_FULL_GROUP_BY\\',\\'\\'));')\r\n  provider.find({\r\n //   attributes: { exclude: ['*'] },\r\n  //  group: 'Components.TimestampStatuses.ComponentId',\r\n   // attributes: [[sequelize.fn('MAX', sequelize.col('Components.TimestampStatuses.createdAt')), 'no_hats']],\r\n    \r\n    where:{\r\n      name: name\r\n    },\r\n    include: [ \r\n      { \r\n      //  attributes: { exclude: ['*'] },\r\n        model: models.Component,   \r\n      //  group: 'id',\r\n        include: [\r\n          {\r\n            model: models.TimestampStatus,\r\n           // limit: 1,\r\n       //     group: 'Components.id',\r\n       //     attributes: [[sequelize.fn('MAX', sequelize.col('Components.TimestampStatuses.createdAt')), 'no_hats']]\r\n          } \r\n        ] \r\n      } \r\n    ]\r\n  })\r\n```"
      },
      {
        "user": "KhizarSH",
        "created_at": "2017-07-06T11:52:57Z",
        "body": "how we can convert this query to sequelized one\r\nSELECT \r\n    createdAt,\r\n    COUNT(*) AS TOTAL, \r\n    sum(DATE_FORMAT(createdAt,'%Y%c%d')=DATE_FORMAT(current_date(),'%Y%c%d')) tcount,\r\n    sum(DATE_FORMAT(createdAt,'%Y%c%d')=DATE_FORMAT(current_date()-1,'%Y%c%d')) ycount,\r\n    sum(DATE_FORMAT(createdAt,'%Y%c%d')=DATE_FORMAT(current_date()-2,'%Y%c%d')) threecount,\r\n    sum(DATE_FORMAT(createdAt,'%Y%c%d')=DATE_FORMAT(current_date()-3,'%Y%c%d')) fourcount,\r\n    sum(DATE_FORMAT(createdAt,'%Y%c%d')=DATE_FORMAT(current_date()-4,'%Y%c%d')) fifthcount\r\nFROM r5.users;"
      }
    ]
  },
  {
    "number": 2330,
    "title": "Defining field and name for foreignKey in association",
    "created_at": "2014-09-22T20:31:14Z",
    "closed_at": "2014-09-24T06:18:50Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/sequelize/sequelize/issues/2330",
    "body": "Hi, so I am migrating to Sequelize from Geddy/Model while using a Postgres. In Geddy all properties in the code are camelCase and when making queries it translates things to snake_case. \n\nTo keep with our existing codebase I want to continue having properties in the code be camelCase while column names are snake_case. For the property names I created a work around by creating a wrapper around `sequelize.define` to add a field entry to all attributes. \n\nI have not figured out how to do this for associations. I want to be able to specify `consult.find({where: {userId: 12}})` and have Sequelize know that the column name should be `user_id`. Is it possible to specify both field and name for foreignKey associations? Or what would be an appropriate work around?\n\nRight now I am using the most up-to-date beta (I believe it is 8) and intend on migrating to 2.0.0 when it comes out. \n",
    "comments_url": "https://api.github.com/repos/sequelize/sequelize/issues/2330/comments",
    "author": "vpontis",
    "comments": [
      {
        "user": "mickhansen",
        "created_at": "2014-09-23T07:17:56Z",
        "body": "The where part is built-in when using `field`.\nIn 2.0.0-rc1+ you can do:\n\n`ModelA.belongsTo(ModelB, {foreignKey: {name: 'userId', field: 'user_id'}})` \n"
      },
      {
        "user": "vpontis",
        "created_at": "2014-09-23T16:55:09Z",
        "body": "Ah, great thank you. I'll try switching to that version now. \n"
      },
      {
        "user": "vpontis",
        "created_at": "2014-09-23T16:58:10Z",
        "body": "Is there any way to define this programmatically so that the field is always the snake case version of the name? \n\nAs I mentioned before, I am doing this with `sequelize.define` and `attributes` by creating a wrapper around `sequelize.define`. But maybe there is a better way to convert both to snake_case. (The problem stems from Postgres not recognizing case so we have camelCase in app and need snake_case in Postgres.)\n"
      },
      {
        "user": "mickhansen",
        "created_at": "2014-09-24T06:18:50Z",
        "body": "@vpontis Not currently.\n"
      },
      {
        "user": "vpontis",
        "created_at": "2014-09-24T17:37:28Z",
        "body": "Great, thanks. The work for 2.0 is looking great. \n\nIt would definitely be awesome to have camelCase convert to snake_case on the db side in future instances. \n"
      },
      {
        "user": "mickhansen",
        "created_at": "2014-09-24T17:44:35Z",
        "body": "Yeah a way to define naming strategies would be something to consider.\n"
      }
    ]
  },
  {
    "number": 2305,
    "title": "Can anyone explain how come dataValues can also be accessed directly from the Instance in sequelize",
    "created_at": "2014-09-20T02:55:49Z",
    "closed_at": "2014-09-20T06:20:23Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/sequelize/sequelize/issues/2305",
    "body": "Can anyone explain how come dataValues can also be accessed directly from the Instance in sequelize?\n\nI use for( var key in instance) but can't see any attributes. However I can use instance.name as instance.get('name').\n\nThanks.\n",
    "comments_url": "https://api.github.com/repos/sequelize/sequelize/issues/2305/comments",
    "author": "bluecenter",
    "comments": [
      {
        "user": "mickhansen",
        "created_at": "2014-09-20T06:20:23Z",
        "body": "`instance.get()` is the \"correct\" way. However for backwards compat we have set op dynamic getters on the instance that map to the respective `get()` calls.\n"
      },
      {
        "user": "bluecenter",
        "created_at": "2014-12-03T03:41:51Z",
        "body": "Thank you.\n"
      }
    ]
  },
  {
    "number": 2298,
    "title": "Is it possible to filter multiple fields with functions and ilikes?",
    "created_at": "2014-09-18T23:06:37Z",
    "closed_at": "2014-09-20T14:00:52Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/sequelize/sequelize/issues/2298",
    "body": "What I want to do:\n\nSELECT \\* from users WHERE unnacent(users.name) ILIKE '%t%' AND users.type = 1\n\nIs there a way to generate this query?\n",
    "comments_url": "https://api.github.com/repos/sequelize/sequelize/issues/2298/comments",
    "author": "grillorafael",
    "comments": [
      {
        "user": "mickhansen",
        "created_at": "2014-09-19T07:15:44Z",
        "body": "You might be able to accomplish it with something like:\n\n``` js\nwhere: sequelize.and(\n  [\"unnacent(users.name) ILIKE '%t%'\"],\n  {type: 1}\n)\n```\n"
      },
      {
        "user": "janmeier",
        "created_at": "2014-09-19T07:17:26Z",
        "body": "It would be ideal to be able to do something like:\n\n``` js\nreturn User.findAll({\n    where: Sequelize.and(\n        { type: 1 },\n        Sequelize.where(Sequelize.fn('unnacent', Sequelize.col('user.name')), \"%t%\", 'ILIKE')\n      )\n});\n```\n\nI'm looking at the querygenerator right now to see how hard it would be to refactor to achieve that :)\n"
      },
      {
        "user": "mickhansen",
        "created_at": "2014-09-19T07:25:59Z",
        "body": "i would prefer `'ILIKE', '%t%'` i think. But yeah that would be cool to be able to do. Right now Sequelize.where does very little ;p\n\nEdit: So we would support `where(column, whereLogicObject)` or `where(column, whereLogicItem, value)` or something like that.\n"
      },
      {
        "user": "janmeier",
        "created_at": "2014-09-19T07:28:24Z",
        "body": "Yea, my idea was that the ILIKE part is optional, but of course we can still do that by just detecting the number of args :)\n"
      },
      {
        "user": "mickhansen",
        "created_at": "2014-09-19T08:14:04Z",
        "body": "Yeah, a syntax like `where(columnLogic, {ilike: '%t%'})` is also possible (although that does seem a little dumb at that point.\n"
      },
      {
        "user": "grillorafael",
        "created_at": "2014-09-20T11:49:34Z",
        "body": "```\nwhere: sequelize.and(\n  [\"unnacent(users.name) ILIKE '%t%'\", \"unnacent(users.full_name) ILIKE '%t%'],\n  {type: 1, amount: 10}\n)\n```\n\nDoes this supposed to work?\n"
      },
      {
        "user": "mickhansen",
        "created_at": "2014-09-20T14:00:43Z",
        "body": "@grillorafael No, you need two seperate arrays.\n"
      },
      {
        "user": "grillorafael",
        "created_at": "2014-09-20T17:29:59Z",
        "body": "Ok! Thanks @mickhansen \n"
      }
    ]
  },
  {
    "number": 2282,
    "title": "How to disconnect from DB?",
    "created_at": "2014-09-15T04:40:49Z",
    "closed_at": "2014-09-15T05:51:14Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/sequelize/sequelize/issues/2282",
    "body": "Hi! I'm being incredibly cheap and running a mysql+node project on heroku.  The super cheap DB option has a hard limit of 10 connections to mysql.  Heroku often \"suspends\" applications when they aren't in use, but that doesn't disconnect the sequelize client from mysql.  I can catch the `SIGTERM` and call a disconnect when the app is \"suspending\", but how would I disconnect the client?\n",
    "comments_url": "https://api.github.com/repos/sequelize/sequelize/issues/2282/comments",
    "author": "evantahler",
    "comments": [
      {
        "user": "mickhansen",
        "created_at": "2014-09-15T05:51:09Z",
        "body": "`sequelize.close()` is available on 2.0.0-dev13 and up i believe.\n"
      },
      {
        "user": "janmeier",
        "created_at": "2014-09-15T05:56:52Z",
        "body": "Do however note that there is no equivalent reconnect method so you won't be able to use that particular instance again \n"
      },
      {
        "user": "evantahler",
        "created_at": "2014-09-15T21:30:17Z",
        "body": "Thanks for the info! My desire is to have a \"clean\" shutdown where all connections my app has open can be closed, and `sequelize.close()` is exactly what I need.\n"
      }
    ]
  },
  {
    "number": 2232,
    "title": "How access instance properties on view engine not using dataValues",
    "created_at": "2014-09-04T03:24:33Z",
    "closed_at": "2014-09-05T00:23:21Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/sequelize/sequelize/issues/2232",
    "body": "Hi,\nfrom the API reference:\n\n> Instance instances operate with the concept of a dataValues property, which stores the actual values represented by the instance. By default, the values from dataValues can also be accessed directly from the Instance, that is:\n> \n> instance.field\n> // is the same as\n> instance.get('field')\n> // is the same as\n> instance.getDataValue('field')\n\nSo my goal was displaying User properties on my index.dust file. First I tried:\n\n```\napp.get('/dashboard',isLoggedIn, function(req, res) {\n      res.render('dashboard', {\n          user : req.user //  the values from dataValues can also be accessed directly from the Instance\n    });\n});\n```\n\n... and on the view:\n\n```\n<li><a hred=\"#\">{user.username}</a></li>\n```\n\n... but the result was an anchor without the username. The reason of this was because I had to define user like: req.user.**dataValues** instead just req.user.\n\nIs this the expected behavior, should I always expose my record instances using  **dataValues** ??\n\nThanks\n",
    "comments_url": "https://api.github.com/repos/sequelize/sequelize/issues/2232/comments",
    "author": "AlvaroOlivencia",
    "comments": [
      {
        "user": "janmeier",
        "created_at": "2014-09-04T07:23:18Z",
        "body": "No, dataValues is in internal property, so you _definitely_ shouldn't use that :). Use `toJSON` instead\n"
      },
      {
        "user": "mickhansen",
        "created_at": "2014-09-04T07:27:35Z",
        "body": "`req.user` ought to work directly as a view variable, but if it does not use `toJSON()` or `.get()` as @janmeier suggests\n"
      },
      {
        "user": "AlvaroOlivencia",
        "created_at": "2014-09-05T00:23:21Z",
        "body": "Thanks guys !\n"
      }
    ]
  },
  {
    "number": 2130,
    "title": "Define PK and FK simultaneously",
    "created_at": "2014-08-08T07:47:54Z",
    "closed_at": "2014-08-12T10:25:48Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/sequelize/sequelize/issues/2130",
    "body": "Seems it's not possible to define PK and FK simultaneously. If I have tables Foo and Bar it's not possible to create FooBar, where PK(foo_id, bar_id) is also foreign keys. I can define additional index in migration but it's not always possible in some DB like SQLite.\n",
    "comments_url": "https://api.github.com/repos/sequelize/sequelize/issues/2130/comments",
    "author": "shadeglare",
    "comments": [
      {
        "user": "janmeier",
        "created_at": "2014-08-08T13:19:30Z",
        "body": "That should be possible. If you let sequelize create the foobar table it should do exactly that (on 2.0). Or perhaps it creates a unique instead of a primary index but the effect should be the same. \n\nTry to show a concrete example and the structure you expect then I'll help you achieve that :-) \n"
      },
      {
        "user": "shadeglare",
        "created_at": "2014-08-10T21:05:36Z",
        "body": "Hi. There are tables:\n\n``` javascript\nvar Mood = connection.define('Mood', {\n    description: {\n        type: Sequelize.STRING,\n        unique: true\n    }\n});\n\nvar Gag = connection.define('Gag', {\n    description: {\n        type: Sequelize.STRING,\n        unique: true\n    }\n});\n\nvar MoodGag = connection.define('MoodGag', {\n    gagId: {\n        type: Sequelize.INTEGER,\n        primaryKey: true\n    },\n    moodId: {\n        type: Sequelize.INTEGER,\n        primaryKey: true\n    }\n});\n```\n\nHow could I make the moodId and gagId foreign keys? gagId should be a FK to the Gag table id and moodId should be a FK to the Mood table id.\n"
      },
      {
        "user": "janmeier",
        "created_at": "2014-08-12T06:44:03Z",
        "body": "``` js\nvar MoodGag = sequelize.define('MoodGag', {\n    gagId: {\n        type: Sequelize.INTEGER,\n        primaryKey: true,\n        references: Gag\n    },\n    moodId: {\n        type: Sequelize.INTEGER,\n        primaryKey: true,\n        references: Mood\n    }\n});\n```\n\nWill give you\n\n``` sql\nCREATE TABLE IF NOT EXISTS \"mood_gags\" (\"gagId\" INTEGER  REFERENCES \"gags\" (\"id\"), \"moodId\" INTEGER  REFERENCES \"moods\" (\"id\"), PRIMARY KEY (\"gagId\",\"moodId\"))\n```\n\nYou can also use associations:\n\n``` js\nGag.hasMany(Mood, { through: MoodGag });\nMood.hasMany(Gag, { through: MoodGag });\n```\n\nWhich will give you\n\n``` sql\nCREATE TABLE IF NOT EXISTS \"mood_gags\" (\"gagId\" INTEGER , \"moodId\" INTEGER , \"MoodId\" INTEGER REFERENCES \"moods\" (\"id\") ON DELETE CASCADE ON UPDATE CASCADE, \"GagId\" INTEGER REFERENCES \"gags\" (\"id\") ON DELETE CASCADE ON UPDATE CASCADE, UNIQUE (\"MoodId\", \"GagId\"), PRIMARY KEY (\"gagId\",\"moodId\"));\n```\n"
      },
      {
        "user": "janmeier",
        "created_at": "2014-08-12T06:44:28Z",
        "body": "Mind you, these things are primarily for 2.0. I think references works for 1.7 also though\n"
      },
      {
        "user": "shadeglare",
        "created_at": "2014-08-12T10:19:59Z",
        "body": "Thanks. I also noticed that I haven't to define PK in the 'middle' table when I want to create FKs cause they will be created automatically ). Exactly what I need.\n\nSo the full example will be:\n\n``` javascript\nvar Mood = connection.define('Mood', {\n    description: {\n        type: Sequelize.STRING,\n        unique: true\n    }\n});\n\nvar Gag = connection.define('Gag', {\n    description: {\n        type: Sequelize.STRING,\n        unique: true\n    }\n});\n\nvar MoodGag = connection.define('MoodGag', {});\n\nGag.hasMany(Mood, { through: MoodGag, foreignKey: 'gagId' });\nMood.hasMany(Gag, { through: MoodGag, foreignKey: 'moodId' });\n```\n\nAnd that gives you SQL:\n\n``` SQL\nCREATE TABLE IF NOT EXISTS `MoodGags` (`createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `moodId` INTEGER NOT NULL REFERENCES `Moods` (`id`) ON DELETE CASCADE ON UPDATE CASCADE, `gagId` INTEGER NOT NULL REFERENCES `Gags` (`id`) ON DELETE CASCADE ON UPDATE CASCADE, PRIMARY KEY (`moodId`, `gagId`));\n```\n"
      },
      {
        "user": "janmeier",
        "created_at": "2014-08-12T10:25:35Z",
        "body": "In that case you can also just use MoodGag as a string so you don't have to define a model for it. \n\nYou only need to create the model manually if you want to have additional attributes in the through table \n"
      }
    ]
  },
  {
    "number": 2050,
    "title": "Migrations: How to add data to a new column",
    "created_at": "2014-07-16T13:10:06Z",
    "closed_at": "2014-07-16T14:26:47Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/sequelize/sequelize/issues/2050",
    "body": "Hello,\n\nI have a simple migration and want to add a UUIDv4 column to an existing table.\n\nI already have migration script set up which adds the new column:\n\n```\nmodule.exports = {\n  up: function(migration, DataTypes, done) {\n    // add altering commands here, calling 'done' when finished\n\n    migration.addColumn(\n        'Graphs',\n        'uuid',\n        { type: DataTypes.UUID, allowNull: false, defaultValue:DataTypes.UUIDV4}\n    )\n    done();\n  },\n  down: function(migration, DataTypes, done) {\n    // add reverting commands here, calling 'done' when finished\n    done();\n  }\n}\n```\n\nNow the tricky part: After adding the new column I'd like to set UUIDs for all rows automatically. Is that possible? \n",
    "comments_url": "https://api.github.com/repos/sequelize/sequelize/issues/2050/comments",
    "author": "nichdiekuh",
    "comments": [
      {
        "user": "mickhansen",
        "created_at": "2014-07-16T13:19:57Z",
        "body": "What dialect are you using? I believe postgres supports UUID's natively so it should happen automatically when the column is created.\n"
      },
      {
        "user": "nichdiekuh",
        "created_at": "2014-07-16T13:23:33Z",
        "body": "I'm using mysql 5.5, my columns are empty which is ok since mysql doesn't support uuid natively. I won't even mind to loop over the recods myself, if I had access to it in the migration function\n"
      },
      {
        "user": "mickhansen",
        "created_at": "2014-07-16T13:24:52Z",
        "body": "While not ideal you should be able to access the sequelize instance via `migration.migrator.sequelize`\n"
      },
      {
        "user": "nichdiekuh",
        "created_at": "2014-07-16T13:32:32Z",
        "body": "Thank you! Using migration.migrator.sequelize.query() I'm able to query my tables... there's just one thing left: How can I generate a new UUIDv4 using sequelize? Or should I use another module like node-uuid?\n"
      },
      {
        "user": "mickhansen",
        "created_at": "2014-07-16T14:00:33Z",
        "body": "Sequelize doesn't provide a way - So i suggest you use node-uuid yea.\nI'm actually not sure whether or not defaultValue: UUID works for anything that isn't postgres - I know the feature was made for postgres - You'll probably have to test it.\n"
      },
      {
        "user": "nichdiekuh",
        "created_at": "2014-07-16T14:09:21Z",
        "body": "In the meanwhile I was reading the sequelize source and it looks like lib/utils.js uses node-uuid as well. The function \"toDefaultValue\" also has datatype checks for UUIDs - looks like it should to the trick for new rows.\n\nBut line 17792 (function generateUUID) looks odd to me. \n\nAnyways, thanks for your suggestions mick. I got all answers I needed to get my script done.\nHave a nice day! \n"
      },
      {
        "user": "mickhansen",
        "created_at": "2014-07-16T14:26:47Z",
        "body": "Oh, i guess we do have that after all for .create() and stuff.\n"
      },
      {
        "user": "nichdiekuh",
        "created_at": "2014-07-16T14:29:20Z",
        "body": "In addition to this topic, I'd like to give an example for anyone who finds this issue via google:\n\nThe following migration script takes an array of table names, adds the column `uuid` to each table and updates all rows of the given tables, setting a UUIDv4.\n\nUse with caution! This is just a short example and doesn't catch/forward any errors.\n\n``` javascript\n\n\nvar uuid = require('node-uuid');\nvar async = require('async');\nvar _ = require('underscore');\n\n\nvar uuidTables = [\n  'table1',\n  'table2'\n];\n\n\nfunction fillUUIDs(migration,tableName,next)\n{\n  var series = [];\n  migration.migrator.sequelize.query(\"SELECT * FROM \"+tableName).success(function(myTableRows) {\n    _.each(myTableRows,function(row)\n    {\n      var func = function(cb)\n      {\n        var new_uuid =  uuid.v4();\n        migration.migrator.sequelize.query(\"UPDATE \"+tableName+\" SET uuid='\"+new_uuid+\"' WHERE id='\"+row.id+\"'\");\n        cb();\n      };\n      series.push(func);\n    });\n    async.series(series,next);\n  });\n\n}\n\n\nmodule.exports = {\n  up: function(migration, DataTypes, done) {\n    // add altering commands here, calling 'done' when finished\n\n    var series = [];\n    _.each(uuidTables,function(tableName)\n    {\n      var func = function(cb)\n      {\n        migration.addColumn(\n          tableName,\n          'uuid',\n          { type: DataTypes.UUID, allowNull: false, defaultValue:DataTypes.UUIDV4}\n        ).complete(function()\n        {\n          fillUUIDs(migration,tableName,cb);\n        });\n      };\n      series.push(func);\n    });\n    async.series(series,function()\n    {\n      done();\n    });\n  },\n  down: function(migration, DataTypes, done) {\n    // add reverting commands here, calling 'done' when finished\n    done();\n  }\n};\n```\n"
      },
      {
        "user": "TannerS",
        "created_at": "2023-08-15T16:40:50Z",
        "body": "hello! is there a way to do this but the v6 of sequelize? "
      }
    ]
  },
  {
    "number": 2045,
    "title": "How can I validate a unique field when I edit an object with sequelize?",
    "created_at": "2014-07-15T18:39:00Z",
    "closed_at": "2014-07-16T18:40:03Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/sequelize/sequelize/issues/2045",
    "body": "Hi, I use the following code to validate the uniqueness of the user's pseudo when I create the user object. The problem is that when I edit a user object I need to retrieve the current user.id. How can I do that?\n\n```\npseudo:   {\n  type: DataTypes.STRING(150), \n  allowNull: false, \n  validate: {\n    len: {args: [3, 150], msg: \"Pseudo shall contains at least 3 characters\"},\n    isUnique: function(value, next) {\n      User.find({\n          where: {pseudo: value},\n          attributes: ['id']\n      }).done(function(error, user) {\n        if (error)\n            return next(error);\n\n        if (user)\n            return next('Pseudo already in use!');\n\n        next();\n      });\n    }\n  }\n```\n",
    "comments_url": "https://api.github.com/repos/sequelize/sequelize/issues/2045/comments",
    "author": "olive75",
    "comments": [
      {
        "user": "janmeier",
        "created_at": "2014-07-16T09:46:02Z",
        "body": "`this` within the validation function gives you access to the current object being validated.\n"
      },
      {
        "user": "olive75",
        "created_at": "2014-07-16T18:40:03Z",
        "body": "Thanks! I used this:\n\n```\npseudo:   {\n      type: DataTypes.STRING(150), \n      allowNull: false, \n      validate: {\n        len: {args: [3, 150], msg: \"Pseudo shall contains at least 3 characters\"},\n        isUnique: function(value, next) {\n          var id = this.getDataValue('id');\n\n          User.find({\n              where: {pseudo: value},\n              attributes: ['id']\n          }).done(function(error, user) {\n            if (error)\n                return next(error);\n\n            //If the user exists and is another user (check needed when editing) the pseudo is not unique\n            if (user && user.id !== id)\n                return next('Pseudo already in use!');\n\n            next();\n          });\n        }\n      }\n    }\n```\n"
      }
    ]
  },
  {
    "number": 1941,
    "title": "many to many association for single model",
    "created_at": "2014-06-21T00:52:26Z",
    "closed_at": "2014-06-21T13:24:49Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/sequelize/sequelize/issues/1941",
    "body": "Is there a way to make a model have a `hasMany` association with itself as both the source and target?\n\n```\nA.hasMany(A)\n```\n\nPer the documentation (and testing) creates a one to many relationship\n\n```\n       A\n     /   \\\n    A     A\n  / | \\\n A  A  A\n\n```\n\nWhere what I want is many to many\n\n```\n A  A  A\n  \\ | /\n    A\n  / | \\\n A  A  A\n```\n\nI am functionally doing this right now by using a second model to define a join table as a go between, which has one-to-many and one-to-one associations with the primary model. And I've added `addA`, `removeA`, and `getAs` as instance methods on `A` to hide the join table code.\n",
    "comments_url": "https://api.github.com/repos/sequelize/sequelize/issues/1941/comments",
    "author": "wrenoud",
    "comments": [
      {
        "user": "mickhansen",
        "created_at": "2014-06-21T08:37:05Z",
        "body": "Hm i'm pretty sure @overlookmotel fixed this.\nYou can define a join table with `A.hasMany(A, {through: JoinModel|'JoinTable'})`\n"
      },
      {
        "user": "wrenoud",
        "created_at": "2014-06-21T13:24:49Z",
        "body": "Thanks! That does the trick.\n"
      }
    ]
  },
  {
    "number": 1813,
    "title": "Uncaught exception with count and pagination",
    "created_at": "2014-05-26T13:06:34Z",
    "closed_at": "2014-05-26T13:47:41Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/sequelize/sequelize/issues/1813",
    "body": "I'm trying to call count on a model with a pagination option. I'm on Sequelize 1.7.5.\n\nThe call looks something like this:\n\n```\nGroup.count({\n  where: options.where,\n  limit: parseInt(query['pagination.limit'], 10), // Set to 10\n  offset: parseInt(query['pagination.offset'], 10) // Set to 10\n}).success(function(total){\n\n  // ...\n\n});\n```\n\nThis is the object I'm passing as the first agument:\n\n```\n{ where: {}, limit: 10, offset: 10 }\n```\n\nAnd this is the SQL that is being generated:\n\n```\nSELECT COUNT(*) as `count` FROM `groups` WHERE 1=1 LIMIT 10, 18440000000000000000;\n```\n\nHence, it fails with an uncaught exception: `Cannot read property 'count' of null`\n",
    "comments_url": "https://api.github.com/repos/sequelize/sequelize/issues/1813/comments",
    "author": "jValdron",
    "comments": [
      {
        "user": "jValdron",
        "created_at": "2014-05-26T13:08:04Z",
        "body": "Using the same exact model and the same call, if I change the `count` to a `findAll`, it generates this SQL: \n\n```\nSELECT * FROM `groups` WHERE 1=1 LIMIT 10, 10;\n```\n"
      },
      {
        "user": "mickhansen",
        "created_at": "2014-05-26T13:29:10Z",
        "body": "count with limit and offset doesn't really make sense does it?\nI believe if you provide an offset to count it will proved the max possibility LIMIT.\n"
      },
      {
        "user": "jValdron",
        "created_at": "2014-05-26T13:31:09Z",
        "body": "Unless you have less than 10 elements in your table. But I guess you're right. I could simple do a count and it would solve my problems. I'm using a plugin similar to DataTable that is expecting three values, an array of rows, a total count and a filtered/paginated count.\n"
      },
      {
        "user": "mickhansen",
        "created_at": "2014-05-26T13:44:28Z",
        "body": "Have you tried `findAndCountAll`?\nIn any case, if it's expecting the total count, the rows and the row count, can you just count the rows in your code?\nI realize it's not ideal, but unfortuneatly Sequelize does not support LIMIT on it's count. You could however use aggregate, something like:\n\n```\nGroup.aggregate('id', 'count', {where/etc..})\n```\n"
      },
      {
        "user": "jValdron",
        "created_at": "2014-05-26T13:47:41Z",
        "body": "Alright, I'll work around it. Thanks :)\n"
      }
    ]
  },
  {
    "number": 1719,
    "title": "Include generates subqueries",
    "created_at": "2014-05-07T12:07:24Z",
    "closed_at": "2014-05-09T12:13:07Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/sequelize/sequelize/issues/1719",
    "body": "Hi, \n\nI'm trying to use .findAll with a condition over an associated model:\nmodel.Person.findAll({\n                include: [{ model: model.Alias, as: 'aliases', attributes: ['name']}],\n                where: model.sequelize.and(\n                    model.sequelize.or.apply(this, search),\n                    {published: true}\n                ),\n                limit: limit\n            }\n\nwith \"search\" being among other person restrictions:  [\"'aliases.name' like ?\", term+\"%\"]\n\nHowever this generates:\n\nSELECT `people`._, `aliases`.`name` AS `aliases.name`, `aliases`.`id` AS `aliases.id` FROM (SELECT `people`._ FROM `people` WHERE ((firstname like 'eva g%' OR surname like 'eva g%' OR concat(firstname,' ',surname) like 'eva g%' OR 'aliases.name' like 'eva g%') AND `people`.`published`=true) LIMIT 4) AS `people` LEFT OUTER JOIN `alias` AS `aliases` ON `people`.`id` = `aliases`.`person_id`;\n\nIs it somehow possible to get it so, that there would be no subquery and the join is on the outer clause so the alias condition is applied correctly?\n\nI'm not sure if I'm abusing \"include\" here, since I'm not really interested in the aliases data, just needed to find the correct people.\n\nCheers,\nAndreas\n\nP.S: I'm using 2.0.0-dev9\n",
    "comments_url": "https://api.github.com/repos/sequelize/sequelize/issues/1719/comments",
    "author": "mendrik",
    "comments": [
      {
        "user": "mickhansen",
        "created_at": "2014-05-07T12:12:41Z",
        "body": "Holy lack of formatting batman.\n"
      },
      {
        "user": "mickhansen",
        "created_at": "2014-05-07T12:14:29Z",
        "body": "`include.where` sets `include.required = true` by default, if required is true on a :M include it generates a subQuery (because of data duplication.\n\nUse `required: false` together with a `where` to kill the subquery.\n"
      },
      {
        "user": "mickhansen",
        "created_at": "2014-05-07T12:15:40Z",
        "body": "Hmm, ignore my previous comment - With the code you are showing you shouldn't be getting a subquery, are you sure you are showing the whole thing?\n\nAlso please test against the latest version + master when reporting an issue, it might already be fixed.\n"
      },
      {
        "user": "mendrik",
        "created_at": "2014-05-07T12:29:09Z",
        "body": "thanks for the quick reply and sorry about the formatting, however I tried to use required: false previously and it resulted in the same issue. I also tried master branch a sec ago and same problem occurs. To simplify my example:\n\n```\nmodel.Person.findAll({\n  include: {model: model.Alias, as: 'aliases', attributes: ['name'], required: false},\n  where: [\"'aliases.name' like ?\", terms[0]+\"%\"],\n  limit: limit\n})\n```\n\nAnd my model definition is quite simple too:\n\n```\nPerson.hasMany(Alias, {\n    as: 'aliases',\n    onDelete: 'cascade'\n});\n```\n\nthis all results in: \n\n```\nSELECT `person`.*, `aliases`.`name` AS `aliases.name`, `aliases`.`id` AS `aliases.id`\nFROM (\n  SELECT  `person`.* FROM `people` AS `person` WHERE 'aliases.name' LIKE 'eva g%' LIMIT 4\n) AS `person`\nLEFT OUTER JOIN `alias` AS `aliases` ON `person`.`id` = `aliases`.`person_id`;\n```\n"
      },
      {
        "user": "mendrik",
        "created_at": "2014-05-07T12:30:55Z",
        "body": "Btw. I cannot add the where clause to the include, since it would join only on found aliases.\n"
      },
      {
        "user": "mickhansen",
        "created_at": "2014-05-07T12:34:41Z",
        "body": "You are getting the subquery because of the combination of a LIMIT and a :M include. There's no way around this, a subquery is absolutely required. Unfortuneatly there's no way to tell sequelize that your where condition should be outside the subquery.\n\nWhy can't you put the where on the include? You are querying on the joined table, thats what include.where is there for.\n\nHave you tried something like:\n\n``` js\nmodel.Person.findAll({\n  include: {\n    model: model.Alias,\n    as: 'aliases',\n    attributes: ['name'],\n    required: false,\n    where: {\n      name: {\n        like: terms[0]+\"%\"\n      }\n    }\n  }\n  limit: limit\n});\n```\n"
      },
      {
        "user": "mendrik",
        "created_at": "2014-05-07T12:58:23Z",
        "body": "Ok thanks a bunch, skipping the limit does exactly what I want. The join where doesn't work since I need \"or\" logic there. You guys saved my day! :)\n"
      },
      {
        "user": "mickhansen",
        "created_at": "2014-05-07T12:59:57Z",
        "body": "@mendrik yeah .or() is a complicated case - we need a way users can tell sequelize whether to place the where on the inner or outer query, not sure how to do that yet though (api wise).\n"
      },
      {
        "user": "ralusek",
        "created_at": "2016-09-16T05:09:57Z",
        "body": "@mickhansen Hey there, I just encountered an issue where I am including a model with its own `where` in the `include.` I've successfully implemented this countless times, but this is a particularly difficult query. In this case, I'm getting `missing FROM-clause entry for table`, which is an issue typically related to column naming. I have triple checked the raw query in this case, and there is no problem.\n\nSo, like the poster here, I need to have the subquery logic have `required:true`, and this is causing the `where` logic to go into the `JOIN AND`, rather than the outer `WHERE`. If I move the `where` logic to the outside the include, and reference the nested properties by col name, query is built with `WHERE` rather than `JOIN` filtering, and executes fine.\n\nTL;DR, you mention here: \"we need a way users can tell sequelize whether to place the where on the inner or outer query,\" has that been done yet?\n"
      },
      {
        "user": "janmeier",
        "created_at": "2016-09-16T06:59:42Z",
        "body": "@ralusek You can use `$column$` to reference columns from a joined table on the outer query\n\n``` js\nUser.findAll({\n  include: [Task],\n  where: {\n    '$task.name$': 'foobar'\n  }\n});\n```\n\n``` sql\nSELECT * \nFROM user \nLEFT JOIN task .... ON ..\nWHERE task.name = 'foobar'\n```\n"
      },
      {
        "user": "ralusek",
        "created_at": "2016-09-16T08:48:46Z",
        "body": "@janmeier Thanks. Yea that's actually what I am doing, but I had the logic of my query on what would be the `Task` in your example, via a scope. It was convenient to be able to have it scoped, but it made it so the query wouldn't work unless I explicitly place the logic inside of the top level `where`.\n"
      },
      {
        "user": "eumpek",
        "created_at": "2016-09-20T14:04:12Z",
        "body": "Hello, i am also having the same problem but when i use '$' operator to reference columns from a joined table what happens is that, i get an error because the subquery doesnt include the referenced table. \n\nHere is my query:\n`SELECT * FROM (\n        SELECT *\n        FROM tableA\n        WHERE (tableB.id LIKE '%')\n        LIMIT 0, 20\n        ) AS t\nLEFT OUTER JOIN tableB ON tableB.id = tableA.id \n`\n\nThe strange thing here is that i have another model, where i user both inner and outer joins, and i never get subquery. I can not figure out what is the difference between the two. \n"
      },
      {
        "user": "eumpek",
        "created_at": "2016-09-21T11:01:12Z",
        "body": "I ended up using \n`subQuery:false,` in my findAndCountAll method.\n"
      },
      {
        "user": "tybro0103",
        "created_at": "2020-02-23T20:58:13Z",
        "body": "`duplicating: false` worked for me"
      }
    ]
  },
  {
    "number": 1718,
    "title": "Where clause failed on second level nested include",
    "created_at": "2014-05-07T08:50:59Z",
    "closed_at": "2014-05-09T12:13:14Z",
    "labels": [
      "type: bug",
      "question"
    ],
    "url": "https://github.com/sequelize/sequelize/issues/1718",
    "body": "Following example:\n\n``` js\nvar co = require('co');\nvar Sequelize = require('sequelize');\n\nvar sequelize = new Sequelize('sequelize-test', 'root', '');\n\nvar Parent = sequelize.define('Parent', {});\nvar Child1 = sequelize.define('Child1', {});\nvar Child2 = sequelize.define('Child2', {});\n\nParent.hasMany(Child1);\nChild1.belongsTo(Parent);\n\nChild1.hasMany(Child2);\nChild2.belongsTo(Child1);\n\nco(function* () {\n    yield sequelize.sync({\n        force: true\n    });\n\n    var parent = yield Parent.create();\n    var child1 = yield Child1.create();\n    var child2 = yield Child2.create();\n\n    yield parent.addChild1(child1);\n    yield child1.addChild2(child2);\n\n    var result = yield Parent.find({\n        attributes: ['id'], // Added for better query readability\n        include: [\n            {\n                model: Child1,\n                attributes: ['id'],\n                include: [\n                    {\n                        model: Child2,\n                        attributes: ['id'],\n                        where: {\n                            id: child2.id\n                        }\n                    }\n                ]\n            }\n        ]\n    });\n\n    console.log(result);\n})();\n```\n\nWhich produces the following output:\n\n```\nExecuting (default): INSERT INTO `Parents` (`id`,`createdAt`,`updatedAt`) VALUES (DEFAULT,'2014-05-07 08:44:29','2014-05-07 08:44:29');\nExecuting (default): INSERT INTO `Child1s` (`id`,`createdAt`,`updatedAt`) VALUES (DEFAULT,'2014-05-07 08:44:29','2014-05-07 08:44:29');\nExecuting (default): INSERT INTO `Child2s` (`id`,`createdAt`,`updatedAt`) VALUES (DEFAULT,'2014-05-07 08:44:29','2014-05-07 08:44:29');\nExecuting (default): SELECT * FROM `Child1s` AS `Child1` WHERE (`Child1`.`ParentId`=1 AND `Child1`.`id`=1);\nExecuting (default): UPDATE `Child1s` SET `id`=1,`createdAt`='2014-05-07 08:44:29',`updatedAt`='2014-05-07 08:44:29',`ParentId`=1 WHERE `id`=1\nExecuting (default): SELECT * FROM `Child2s` AS `Child2` WHERE (`Child2`.`Child1Id`=1 AND `Child2`.`id`=1);\nExecuting (default): UPDATE `Child2s` SET `id`=1,`createdAt`='2014-05-07 08:44:29',`updatedAt`='2014-05-07 08:44:29',`Child1Id`=1 WHERE `id`=1\nExecuting (default): SELECT `Parent`.*, `Child1s`.`id` AS `Child1s.id`, `Child1s`.`id` AS `Child1s.id`, `Child1s.Child2s`.`id` AS `Child1s.Child2s.id`, `Child1s.Child2s`.`id` AS `Child1s.Child2s.id` FROM (SELECT `Parent`.`id` FROM `Parents` AS `Parent` WHERE (SELECT `Child1Id` FROM `Child2s` AS `Child1s.Child2s` WHERE `Child1s`.`id` = `Child1s.Child2s`.`Child1Id` LIMIT 1) IS NOT NULL LIMIT 1) AS `Parent` LEFT OUTER JOIN `Child1s` AS `Child1s` ON `Parent`.`id` = `Child1s`.`ParentId` INNER JOIN `Child2s` AS `Child1s.Child2s` ON `Child1s`.`id` = `Child1s.Child2s`.`Child1Id` AND `Child1s.Child2s`.`id`=1;\n/Users/mlegenhausen/dev/github/sequelize-test/node_modules/co/index.js:290\n    throw err;\n          ^\nError: ER_BAD_FIELD_ERROR: Unknown column 'Child1s.id' in 'where clause'\n    at Query.Sequence._packetToError (/Users/mlegenhausen/dev/github/sequelize-test/node_modules/mysql/lib/protocol/sequences/Sequence.js:30:14)\n    at Query.ErrorPacket (/Users/mlegenhausen/dev/github/sequelize-test/node_modules/mysql/lib/protocol/sequences/Query.js:82:18)\n    at Protocol._parsePacket (/Users/mlegenhausen/dev/github/sequelize-test/node_modules/mysql/lib/protocol/Protocol.js:205:24)\n    at Parser.write (/Users/mlegenhausen/dev/github/sequelize-test/node_modules/mysql/lib/protocol/Parser.js:62:12)\n    at Protocol.write (/Users/mlegenhausen/dev/github/sequelize-test/node_modules/mysql/lib/protocol/Protocol.js:37:16)\n    at Socket.<anonymous> (/Users/mlegenhausen/dev/github/sequelize-test/node_modules/mysql/lib/Connection.js:73:28)\n    at Socket.EventEmitter.emit (events.js:104:17)\n    at readableAddChunk (_stream_readable.js:156:16)\n    at Socket.Readable.push (_stream_readable.js:123:10)\n    at TCP.onread (net.js:520:20)\n```\n\nThe error occurs cause of the `where` clause of Child2. If I remove the clause it works.\n\nNote: I am using generators for better readability to start this use node 0.11.x with `--harmony` flag.\n",
    "comments_url": "https://api.github.com/repos/sequelize/sequelize/issues/1718/comments",
    "author": "mlegenhausen",
    "comments": [
      {
        "user": "mickhansen",
        "created_at": "2014-05-07T09:25:48Z",
        "body": "The problem is the subquery, have you tested this against master? A fix was introduced in something similar to this.\n\nElse try adding required: true to child1, or required: false to both child1 and child2\n"
      },
      {
        "user": "mlegenhausen",
        "created_at": "2014-05-07T10:50:56Z",
        "body": "Tested against master with same result as before.\n\nAdding `required:false` to  `child2` did the trick (with dev11 and master).\n"
      },
      {
        "user": "mickhansen",
        "created_at": "2014-05-07T10:52:01Z",
        "body": "Yeah `required: false` will turn off the subquery since it doesn't need to be there anymore - I guess there's an issue with having a required :M child to a non required parent.\n"
      },
      {
        "user": "mlegenhausen",
        "created_at": "2014-05-07T11:41:30Z",
        "body": "Thanks that saved my day again :) Great project and great maintainers!\n"
      },
      {
        "user": "Celadora",
        "created_at": "2017-02-14T10:02:45Z",
        "body": "This solves the problem of the query error, but if I use it the where clause no longer constrains the query. I need both. Is there any work around to this other than doing two separate queries?"
      }
    ]
  },
  {
    "number": 1693,
    "title": "Accessing Defined Models from a Sequelize Instance",
    "created_at": "2014-04-29T00:49:52Z",
    "closed_at": "2014-04-29T08:42:51Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/sequelize/sequelize/issues/1693",
    "body": "I've seen this syntax to access a defined model from the Sequelize instance:\n\n```\nvar sequelize = new Sequelize('database', 'username'[, 'password']);\n\nvar Project = sequelize.define('Project', {\n  title: Sequelize.STRING,\n  description: Sequelize.TEXT\n});\n\nsequelize.Project.build({});\n```\n\nHowever, when I tried it myself on 1.7.0:\n\n```\nconsole.log(sequelize.Project);\n```\n\nReturned `undefined`\n\nIs there another way or a correct way to accomplish this?\n",
    "comments_url": "https://api.github.com/repos/sequelize/sequelize/issues/1693/comments",
    "author": "noah-goodrich",
    "comments": [
      {
        "user": "mickhansen",
        "created_at": "2014-04-29T06:21:41Z",
        "body": "You need to attach the object on your own. Usually people do something like:\n\n``` js\nsequelize.Project = sequelize.import('./models/project');\n```\n\nSequelize doesn't do that for you. (The fact that people decide to attach models to the sequelize object is purely a convenience thing that emerged)\n"
      },
      {
        "user": "noah-goodrich",
        "created_at": "2014-04-29T08:42:51Z",
        "body": "Thanks.\n"
      }
    ]
  },
  {
    "number": 1692,
    "title": "updates and associations",
    "created_at": "2014-04-28T09:43:45Z",
    "closed_at": "2014-04-28T19:14:37Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/sequelize/sequelize/issues/1692",
    "body": "Hi, I'm developing a Backbone app, and for certain things it's really convenient to fetch my collections with their associations.  If I try to save these models back to sequelize will the associations be ignored, or am I going to have to filter them out beforehand to avoid errors?\n",
    "comments_url": "https://api.github.com/repos/sequelize/sequelize/issues/1692/comments",
    "author": "ckot",
    "comments": [
      {
        "user": "mickhansen",
        "created_at": "2014-04-28T09:56:42Z",
        "body": "That probably depends on what version your using. But to be on the safe side you can just use `{fields: Object.keys(Model.rawAttributes)}` whenever calling save/create etc. (This is the default in 2.0.0).\n"
      },
      {
        "user": "ckot",
        "created_at": "2014-04-28T10:16:06Z",
        "body": "Hi Mick,\n\nThanks for the quick response!  I\u2019m using the 1.7 version, so I\u2019ll need to do it manually.\n\nAccording to the docs you can do:\n\nTask.updateAttributes({title: \u2018bar\u2019, description: \u2018blah blah blah\u2019}, [\u2018title\u2019]);\n\nwhere the second parameter restricts which of the fields actually get update (description is unmodified).\n\nIf I\u2019m understanding this correctly, I would be putting this {fields: Object.keys(Model.rawAttributes)} in that second parameters place, and it returns a constrained list of fields in the model (for example [\u2018title\u2019, \u2018description\u2019])\n\nThanks again,\n\nScott\n\nOn Apr 28, 2014, at 5:56 AM, Mick Hansen notifications@github.com wrote:\n\n> That probably depends on what version your using. But to be on the safe side you can just use {fields: Object.keys(Model.rawAttributes)} whenever calling save/create etc. (This is the default in 2.0.0).\n> \n> \u2014\n> Reply to this email directly or view it on GitHub.\n"
      },
      {
        "user": "mickhansen",
        "created_at": "2014-04-28T10:53:51Z",
        "body": "`task.updateAttributes({title: \u2018bar\u2019, description: \u2018blah blah blah\u2019}, [\u2018title\u2019]);` is equivelant to `task.updateAttributes({title: \u2018bar\u2019, description: \u2018blah blah blah\u2019}, {fields: [\u2018title\u2019]});` so yes `task.updateAttributes({title: \u2018bar\u2019, description: \u2018blah blah blah\u2019}, {fields: Object.keys(Task.rawAttributes)});` would scope the update to just the attributes you have defined (where 'task' is an instance of the model 'Task').\n"
      },
      {
        "user": "ckot",
        "created_at": "2014-04-28T18:24:19Z",
        "body": "Hi Mick,\n\nThanks for the clarification. You rule!\n\n-Scott\n\nOn Apr 28, 2014, at 6:53 AM, Mick Hansen notifications@github.com wrote:\n\n> task.updateAttributes({title: \u2018bar\u2019, description: \u2018blah blah blah\u2019}, [\u2018title\u2019]); is equivelant to task.updateAttributes({title: \u2018bar\u2019, description: \u2018blah blah blah\u2019}, {fields: [\u2018title\u2019]}); so yes task.updateAttributes({title: \u2018bar\u2019, description: \u2018blah blah blah\u2019}, {fields: Object.keys(Task.rawAttributes)}); would scope the update to just the attributes you have defined (where 'task' is an instance of the model 'Task').\n> \n> \u2014\n> Reply to this email directly or view it on GitHub.\n"
      },
      {
        "user": "mickhansen",
        "created_at": "2014-04-28T19:14:37Z",
        "body": "Great :)\n"
      }
    ]
  },
  {
    "number": 1682,
    "title": "Problem renaming associations output",
    "created_at": "2014-04-25T03:40:13Z",
    "closed_at": "2014-04-27T08:10:19Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/sequelize/sequelize/issues/1682",
    "body": "So I'm having an issue with the `as` sub-parameter of the `include` parameter to `.findAll`.  I'm using 2.0.0-dev11 + MySQL.\n\nThe error I get back is:\n\n```\nPossibly unhandled Error: Task (Experiment) is not associated to User!\n```\n\nThe error occurs in:\n\n```\nnode_modules/sequelize/lib/dao-factory.js:1812:13\n```\n\nSo in the code below, if I change `{ include: [{model:Task,as:'Experiment'}]}` to `{ include: Task }` then it works just fine.\n\nBut I really want to get the association back in a list named `Experiments` instead of named `Tasks`.\n\n```\nvar User = sequelize.define('User', { name: Sequelize.STRING });\nvar Task = sequelize.define('Task', { name: Sequelize.STRING });\n\nTask.belongsTo(User);\nUser.hasMany(Task);\n\nsequelize.sync({force: true})\n  .then(function() {\n    return User.create({name:'Rick'});\n  })\n  .then(function(u) {\n    var task = Task.build({name:'Science'});\n    return u.addTask(task);\n  })\n  .then(function() {\n    return User.findAll({ include: [{model:Task,as:'Experiment'}]});\n  })\n  .then(function(users) {\n    console.log(JSON.stringify(users, null, 2));\n  })\n  .then(function() {\n    console.log('done');\n  });\n```\n",
    "comments_url": "https://api.github.com/repos/sequelize/sequelize/issues/1682/comments",
    "author": "baliw",
    "comments": [
      {
        "user": "mickhansen",
        "created_at": "2014-04-25T04:38:23Z",
        "body": "The way it currently is that if you use an alias for an include you have to use it on the association aswell. That's to allow us to identify the correct association (since there might be multiple).\n\nSo for `User.findAll({ include: [{model:Task,as:'Experiment'}]});` to work you need `User.hasMany(Task, {as: 'Experiment'});`\n"
      },
      {
        "user": "baliw",
        "created_at": "2014-04-27T08:10:18Z",
        "body": "Thanks for the help.  That put me on the right track. :-)\n"
      }
    ]
  },
  {
    "number": 1675,
    "title": "Validation Error vs actual Error",
    "created_at": "2014-04-23T03:56:53Z",
    "closed_at": "2014-04-25T23:05:22Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/sequelize/sequelize/issues/1675",
    "body": "This is more of a question than an issue, but when creating/updating models, I've been struggling with finding the best way to differentiate validation errors from 'actual' errors.\n\nFor example;\n\n```\nmodel.save()\n    .success( function () {})\n    .error( function (err) { /*err could be a validation error, or a database error */ })\n```\n\nAm I missing something here?\n",
    "comments_url": "https://api.github.com/repos/sequelize/sequelize/issues/1675/comments",
    "author": "nrmitchi",
    "comments": [
      {
        "user": "mickhansen",
        "created_at": "2014-04-23T06:25:11Z",
        "body": "That's supported in 2.0.0 - You can use `instanceof Sequelize.ValidationError`\n"
      },
      {
        "user": "nrmitchi",
        "created_at": "2014-04-25T23:05:22Z",
        "body": "Okay awesome. Thanks.\n"
      }
    ]
  },
  {
    "number": 1668,
    "title": "Select Rows that have children",
    "created_at": "2014-04-21T22:01:13Z",
    "closed_at": "2014-04-22T13:36:53Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/sequelize/sequelize/issues/1668",
    "body": "hi is there a way to use Having in the queries? to do something like this\n\n```\nSELECT Count(Table2.Id), Table1.* \nFROM Table1 \nLEFT JOIN Table2\nON Table1.id = Table2.Table1Id\nHAVING Count(Table2.Id) > 0\n```\n\nI only want to get Categories that have asociated children records.\n",
    "comments_url": "https://api.github.com/repos/sequelize/sequelize/issues/1668/comments",
    "author": "theHazzard",
    "comments": [
      {
        "user": "mickhansen",
        "created_at": "2014-04-22T06:11:16Z",
        "body": "You can use `having` like you can use `where`.\n\nSo something like:\n\n``` js\nModelA.findAll({\n  include: [ModelB],\n  having: 'count(ModelB.id) > 0'\n});\n```\n\nOr you could use an INNER JOIN if you don't need a specific count but just need there to be some of the included model `include: [{model: ModelB, required: true}]`.\n"
      },
      {
        "user": "theHazzard",
        "created_at": "2014-04-22T13:30:15Z",
        "body": "Great! I used the Inner Join approach, is there's a way to tell Sequelize to omit all TableB attributes?\n"
      },
      {
        "user": "mickhansen",
        "created_at": "2014-04-22T13:32:16Z",
        "body": "@theHazzard `include: [{model: ModelB, required: true, attributes: []}]` might work, but no garauntees.\n"
      },
      {
        "user": "theHazzard",
        "created_at": "2014-04-22T13:33:07Z",
        "body": "it still brings the ID, but it's ok, I've filtered with lodash, thanks for all your help!\n"
      },
      {
        "user": "mickhansen",
        "created_at": "2014-04-22T13:36:49Z",
        "body": "@theHazzard hmm, what version are you using? We add the id explicitely for faster deduplication matching - But it shouldn't be in the final result.\n"
      },
      {
        "user": "theHazzard",
        "created_at": "2014-04-22T13:38:47Z",
        "body": "I'm using v1.7.2\n"
      },
      {
        "user": "theHazzard",
        "created_at": "2014-04-22T13:39:59Z",
        "body": "this is an example of the result I have.\n\n```\n{\n    \"id\": 4,\n    \"Nombre\": \"Institutos\",\n    \"clasificadoes\": [\n      {\n        \"id\": 256\n      },\n      {\n        \"id\": 257\n      }\n    ]\n  },\n```\n"
      },
      {
        "user": "theHazzard",
        "created_at": "2014-04-22T13:41:45Z",
        "body": "and here is the code I'm running\n\n```\nrubroClasificado.findAll({\n            attributes: ['Rubroclasificadoes.id', 'Rubroclasificadoes.Nombre'],\n            include: {\n                attributes: [],\n                model: Clasificado,\n                required: true\n            } \n})\n```\n"
      },
      {
        "user": "mickhansen",
        "created_at": "2014-04-22T13:50:55Z",
        "body": "Fix for attributes not being in the final result might be only be in 2.0.0-dev11\n"
      }
    ]
  },
  {
    "number": 1583,
    "title": "Foreign key constrained defined in model schema does not work",
    "created_at": "2014-04-02T08:54:46Z",
    "closed_at": "2014-04-02T10:16:04Z",
    "labels": [
      "type: bug",
      "question"
    ],
    "url": "https://github.com/sequelize/sequelize/issues/1583",
    "body": "I have following code\n\n```\nvar Sequelize = require('sequelize');\n\nvar sequelize = new Sequelize('postgres://postgres:postgres@localhost:5432/skyhigh',{\n    dialect: 'postgres',\n    native: false,\n});\n\nvar Shelf = sequelize.define('Shelf', { \n});\n\nvar Book = sequelize.define('Book', {\n    ShelfId: {\n        type: Sequelize.INTEGER,\n        references: \"Shelf\",\n        referencesKey: \"id\",\n    }\n});\n\nShelf.hasMany(Book);\n\nsequelize.sync({ force: true });\n```\n\nand it throws this error:\n\n```\nevents.js:72\n        throw er; // Unhandled 'error' event\n              ^\nerror: relation \"Shelf\" does not exist\n    at Connection.parseE (/Users/alek/Desktop/seqbug/node_modules/pg/lib/connection.js:561:11)\n    at Connection.parseMessage (/Users/alek/Desktop/seqbug/node_modules/pg/lib/connection.js:390:17)\n    at null.<anonymous> (/Users/alek/Desktop/seqbug/node_modules/pg/lib/connection.js:92:20)\n    at Socket.EventEmitter.emit (events.js:95:17)\n    at Socket.<anonymous> (_stream_readable.js:746:14)\n    at Socket.EventEmitter.emit (events.js:92:17)\n    at emitReadable_ (_stream_readable.js:408:10)\n    at emitReadable (_stream_readable.js:404:5)\n    at readableAddChunk (_stream_readable.js:165:9)\n    at Socket.Readable.push (_stream_readable.js:127:10)\nseqbug$ \n```\n\nchanging `ShelfId` to any other key such `shelf_id` does not work.\n",
    "comments_url": "https://api.github.com/repos/sequelize/sequelize/issues/1583/comments",
    "author": "alekbarszczewski",
    "comments": [
      {
        "user": "mickhansen",
        "created_at": "2014-04-02T09:01:18Z",
        "body": "Please turn on logging and show us what order the SQL statements are being run on.\nPlease also provide you Sequelize version, and please also verify that your bug persists against the latest version and the latest master.\n"
      },
      {
        "user": "mickhansen",
        "created_at": "2014-04-02T09:02:19Z",
        "body": "Mind you in the latest master, hasMany will automatically create the foreign key reference, right @janmeier?\n"
      },
      {
        "user": "janmeier",
        "created_at": "2014-04-02T09:04:01Z",
        "body": "Perhaps the name of the shelf table is being pluralized to shelfes / shelves (there have been problems with pluralization before due to the lingo lib).\n\nYou could provide the Shelf model instead of a string in references, that should give you the correct table name.\n\nAnd as mick mentioned, on master foreign key references are added automatically yes\n"
      },
      {
        "user": "mickhansen",
        "created_at": "2014-04-02T09:12:26Z",
        "body": "@janmeier i suppose in the future it would be nice to be able to do something like `references: SomeModel.attributes.someAttribute`\n"
      },
      {
        "user": "alekbarszczewski",
        "created_at": "2014-04-02T09:32:10Z",
        "body": "I tried it with `1.7.0` and `unstable` versions of sequelize. Here is SQL:\n\n```\nExecuting (default): DROP TABLE IF EXISTS \"Sites\" CASCADE;\nExecuting (default): CREATE TABLE IF NOT EXISTS \"Sites\" (\"id\"   SERIAL , \"createdAt\" TIMESTAMP WITH TIME ZONE NOT NULL, \"updatedAt\" TIMESTAMP WITH TIME ZONE NOT NULL, PRIMARY KEY (\"id\"));\nExecuting (default): DROP TABLE IF EXISTS \"Books\" CASCADE;\nExecuting (default): CREATE TABLE IF NOT EXISTS \"Books\" (\"id\"   SERIAL , \"SiteId\" INTEGER REFERENCES \"Site\" (\"id\"), \"createdAt\" TIMESTAMP WITH TIME ZONE NOT NULL, \"updatedAt\" TIMESTAMP WITH TIME ZONE NOT NULL, PRIMARY KEY (\"id\"));\n```\n1. It seems that foreign key ref is not pluralized (`Site` instead of `Sites`)\n2. If I don't use foreign key at model schema level and just use `Site.hasMany(Book)` then foreign key constraints are NOT created - I checked it and on Books table there is only one constraint `Book_pkey`.\n3. It would be cool if you would allow model schema to be created in this way:\n\n```\n{\n   prop1: { type: ... },\n   prop2: { type: ... },\n   hasMany: {\n      'OtherModel': { some_options },\n      'OtherModel2': { some_options },\n   },\n   hasOne: {\n       'OtherModel3': { some_options }\n   }\n```\n"
      },
      {
        "user": "mickhansen",
        "created_at": "2014-04-02T09:43:47Z",
        "body": "\"If I don't use foreign key at model schema level and just use Site.hasMany(Book) then foreign key constraints are NOT created - I checked it and on Books table there is only one constraint Book_pkey.\" - No that's only on master, not in a release yet.\n\nYour SQL and the models you provided are not the same, one is Shelf one is Site? But in any case it appears you need to fix your `references` statement to point at the correct table.\n"
      },
      {
        "user": "alekbarszczewski",
        "created_at": "2014-04-02T09:47:26Z",
        "body": "I changed  `Shelf` to `Site` to check if there is no problem with `Shelves/Shelfes`. \nWell if model names are pluralized automatically then references field also should be treated this way I think.\n"
      },
      {
        "user": "mickhansen",
        "created_at": "2014-04-02T09:58:40Z",
        "body": "I disagree - Since you can also provide a tableName to a model.\nI do however agree that its not totally ideal, but you can atleast fix your issue for now. \n\nWe'll most likely provide more sugar for this type of thing later on. In the mean time you can either provide the correct string or use `freezeTableName: true`, in which case the tableName won't be pluralized.\n"
      },
      {
        "user": "alekbarszczewski",
        "created_at": "2014-04-02T10:15:24Z",
        "body": "Ok thanks for help.\n"
      },
      {
        "user": "mickhansen",
        "created_at": "2014-04-02T11:06:17Z",
        "body": "Anytime :)\n"
      }
    ]
  },
  {
    "number": 1545,
    "title": "How can I \"inject\" one model into another?",
    "created_at": "2014-03-23T19:59:06Z",
    "closed_at": "2014-03-23T20:56:06Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/sequelize/sequelize/issues/1545",
    "body": "Alright, this may seem kind of crazy but please try to follow along.  I'm hoping there's a simple solution.\n\nI've found that when providing a complete \"document\" to my angular client of a user account...\n\n```\nUser.find(\n    {\n        where:whereObj,\n        order: '\"People\".\"gender\" DESC',\n        include:[\n            {\n                model: Person,\n                as: \"People\",\n                include:[\n                    {\n                        model: PersonalTrait,\n                        as: \"Traits\"\n                    }\n                ]\n            },\n            {\n                model: Media,\n                as: \"PrimaryMedia\"\n            },\n            {\n                model: MediaFolder,\n                as: \"MediaFolders\",\n                include:[\n                    {\n                        model: Media,\n                        as: \"Media\"\n                    }\n                ]\n            }\n        ]\n    }\n).success(function(user){\n    if(user === null){\n        res.send(404);\n    }else{\n        res.json(200, user);\n   }\n}).error(function(err){\n    res.send(400);\n});\n```\n\nI see the database query resulting in exponential rows, depending on the number of rows for Traits, MediaFolders and Media.  For example...  1 User row has 2 People rows and 2 MediaFolder rows produces 4 rows in Sequelize's query to produce the object.  Adding 2 MediaRows linked to a MediaFolder row produces 6 rows. Adding 2 Traits to the User now produces 9 rows.  20 traits = 63 rows.  20 traits & 12 media = 252 rows.\n\nI'm fairly certain I understand why this is and that I'm using Sequelize properly.  So I decided to try taking a different approach by first getting the basic User object with everything but the Media Folders, then getting those media folders and \"injecting\" them into the User object result.\n\n```\nUser.find(\n    {\n        where:whereObj,\n        order: '\"People\".\"gender\" DESC',\n        include:[\n            {\n                model: Person,\n                as: \"People\",\n                include:[\n                    {\n                        model: PersonalTrait,\n                        as: \"Traits\"\n                    }\n                ]\n            },\n            {\n                model: Media,\n                as: \"PrimaryMedia\"\n            }\n        ]\n    }\n).success(function(user){\n    if(user === null){\n        res.send(404);\n    }else{\n\n        MediaFolder.findAll(\n            {\n                where: {\n                    \"UserId\": user.id\n                },\n                include:[\n                    {\n                        model: Media,\n                        as: \"Media\"\n                    }\n                ]\n            }\n        ).success(function(mediaFolders){\n            user.mediaFolders = mediaFolders; // <-- pseudocode\n            res.json(200, user);\n        }).error(function(err){\n            res.send(400);\n        });\n   }\n}).error(function(err){\n    res.send(400);\n});\n```\n\nThe only problem is that I'm not sure how I can do this because that \"pseudocode\" line above didn't work.  :)\n",
    "comments_url": "https://api.github.com/repos/sequelize/sequelize/issues/1545/comments",
    "author": "emadd",
    "comments": [
      {
        "user": "janmeier",
        "created_at": "2014-03-23T20:17:21Z",
        "body": "In `res.json(200, user)` the user object is being converted to JSON using sequelize's toJSON method, which includes all eagerly loaded relations automatically. However, when you add mediaFolders manually sequelize does not know to include that in the JSON output. \n\nTry something along the lines of\n\n``` js\nresponse = user.toJSON()\nresponse.mediaFolders = mediaFolders\nres.json(200, response);\n```\n"
      },
      {
        "user": "emadd",
        "created_at": "2014-03-23T20:56:06Z",
        "body": "Fantastic!  This works perfectly and is scalable.  Very fast.\n"
      },
      {
        "user": "mickhansen",
        "created_at": "2014-03-24T08:05:35Z",
        "body": "The first find call should be able to work though.\n"
      },
      {
        "user": "emadd",
        "created_at": "2014-03-24T15:12:14Z",
        "body": "It works, but it's not efficient. Sequelize is writing SQL that produces thousands of rows just to pull a couple dozen objects. \n\nSent from my iPhone\n\n> On Mar 24, 2014, at 2:05 AM, Mick Hansen notifications@github.com wrote:\n> \n> The first find call should be able to work though.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub.\n"
      },
      {
        "user": "mickhansen",
        "created_at": "2014-03-24T15:17:45Z",
        "body": "@emadd how would you write the SQL any differently?\n"
      },
      {
        "user": "mickhansen",
        "created_at": "2014-03-24T15:18:22Z",
        "body": "But no joins can be less efficient than doing seperate queries, especially with the extra parsing needed. I'm thinking we might want to add an option that takes hasMany queries and does them in a seperate query instead.\n"
      },
      {
        "user": "emadd",
        "created_at": "2014-03-24T15:36:16Z",
        "body": "I wouldn't. It's brilliant, really. I was only looking for some advice on how to go about it another way. My application has very specific scalability challenges that any ORM would struggle with, but Sequelize kicks all kinds of ass. \n\n\"Normalize until it hurts, de-normalize until it works\"\n\nHaving the option to specify how the related objects are included would be pretty cool. \n\nSent from my iPhone\n\n> On Mar 24, 2014, at 9:17 AM, Mick Hansen notifications@github.com wrote:\n> \n> @emadd how would you write the SQL any differently?\n> \n> \u2014\n> Reply to this email directly or view it on GitHub.\n"
      },
      {
        "user": "mickhansen",
        "created_at": "2014-03-24T15:46:20Z",
        "body": "Ah, yeah. Huge performance hit on that unfortuneatly, i really want to optimize that as much as possible since it adds a shitload of convenience.\n\nIn my performance critical app i've put an aggressive redis cache i front to get the performance i really need.\n\nYeah, Bookshelf does it in seperate queries, and it definitely has its usecases as i've come to find out.\n"
      }
    ]
  },
  {
    "number": 1537,
    "title": "Self reference (bi-directional)",
    "created_at": "2014-03-22T11:07:57Z",
    "closed_at": "2014-03-22T22:50:05Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/sequelize/sequelize/issues/1537",
    "body": "A Person can have many children: Person.hasMany(Person {as: 'children})\nA Person has one father: Person.hasOne(Person {as: 'father'})\n\nSeems straightforward enough. \nNow I want to find records for a Person, and their father:\nPerson.find({include: [{model: Person, as: 'father}])\n\nBad things happen: \"Error: Person (Father) is not associated to Person!\" which was unexpected given that there are actually two relationships in place.\n\nBut then, it also occurs to me that I don't know how to tell Sequelize which of the relations to follow in a given include? If I wanted to return records for both father and children how would I do that?\n\nPerhaps I'm just thinking about it all wrong?\n",
    "comments_url": "https://api.github.com/repos/sequelize/sequelize/issues/1537/comments",
    "author": "EduceHealth",
    "comments": [
      {
        "user": "mickhansen",
        "created_at": "2014-03-22T11:50:38Z",
        "body": "Using `as` tells it what relation to use. You must have misspelled something, there's also a type in the code you provided us, please show us the actual code you are using.\n\nSide note: For the relation to work from both sides you probably wan't something like `foreignkey: 'parent_id` on both relation calls hasOne/hasMany. Conceptually you might want to use belongsTo rather than hasOne. (belongsTo is usually the opposite of hasMany in a 1:M relation, although hasOne should work since its a self-refential association, normally it wouldn't know)\n"
      },
      {
        "user": "EduceHealth",
        "created_at": "2014-03-22T22:50:05Z",
        "body": "\"You must have misspelled something\" - you are right. \n\nI hadn't made the connection that the two 'as' statements needed to match for it to work. I'd declared the relationship as 'Parent', but then tried to use it as 'father'. Makes perfect sense.\n\nThanks for the pointer.\n"
      },
      {
        "user": "mickhansen",
        "created_at": "2014-03-23T07:49:18Z",
        "body": "Ah, yes it has to match. That's how we distinguish between the relations :)\n"
      }
    ]
  },
  {
    "number": 1528,
    "title": "potential bug in quoteIdentifiers function in query generator of mysql / mariadb",
    "created_at": "2014-03-20T15:02:01Z",
    "closed_at": "2014-03-20T17:34:46Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/sequelize/sequelize/issues/1528",
    "body": "hi,\n\ni have an problem with multi associated properties in where and order conditions with nested eager loading.\n\ni get wrong sql with the following find / findAll ...\n\n``` javascript\nvar Article = sequelize.define('Article', { name: Sequelize.STRING })\n  , Customer = sequelize.define('Customer', { name: Sequelize.STRING })\n  , PostCode = sequelize.define('PostCode', { postcode: Sequelize.INTEGER, city: Sequelize.STRING })\n\nArticle.belongsTo(Customer)\nCustomer.belongsTo(PostCode)\n\nsequelize.sync().done(function() {\n  Article.findAll({\n    attributes: ['name'],\n    include: [{\n      model: Customer,\n      attributes: ['name'],\n      include: [{\n        model: PostCode,\n        attributes: ['postcode', 'city'],\n      }]\n    }],\n    order: ['Customer.PostCode.postcode', 'ASC']\n  }).success(function(articles) {\n    console.log('articles', articles)\n  })\n})\n```\n\n``` sql\nSELECT\n  `Article`.`name`,\n  `Customer`.`name` AS `Customer.name`,\n  `Customer`.`id` AS `Customer.id`,\n  `Customer.PostCode`.`postcode` AS `Customer.PostCode.postcode`,\n  `Customer.PostCode`.`city` AS `Customer.PostCode.city`,\n  `Customer.PostCode`.`id` AS `Customer.PostCode.id`\nFROM `Article`\n  LEFT OUTER JOIN `Customer` AS `Customer`\n    ON `Customer`.`id` = `Article`.`customer_id`\n      LEFT OUTER JOIN `PostCode` AS `Customer.PostCode`\n        ON `Customer.PostCode`.`id` = `Customer`.`post_code_id`\nORDER BY `Customer`.`PostCode`.`postcode`, `ASC`;\n```\n\ni think the problem is the quoteIdentifiers from lib/dialects/mysql/query-generator.js. it escapes the string \n\n```\nCustomer.PostCode.postcode\n```\n\n to \n\n```\n`Customer`.`PostCode`.`postcode`\n```\n\nTo make the query working it should by \n\n```\n`Customer.PostCode`.`postcode`\n```\n\n cause of the generated table alias.\n\nthe problem could by solved by the following code ...\n\n``` javascript\n    quoteIdentifiers: function(identifiers, force) {\n      var seperator = identifiers.lastIndexOf('.')\n      if (seperator === -1) {\n        return this.quoteIdentifier(identifiers, force)\n      } else {\n        return this.quoteIdentifier(identifiers.substr(0, seperator), force) + '.' + this.quoteIdentifier(identifiers.substr(seperator + 1), force)\n      }   \n    },\n```\n\nbut i am not sure we're using that the right way. it would be nice if somebody can look over it.\n\nthx, mithrandir\n",
    "comments_url": "https://api.github.com/repos/sequelize/sequelize/issues/1528/comments",
    "author": "mithrandirii",
    "comments": [
      {
        "user": "janmeier",
        "created_at": "2014-03-20T16:23:24Z",
        "body": "Just tried running your example against master (thanks for providing an example that i can actually copy paste directly into my env btw, not everyone remembers that!) and it runs correctly. One change however, I changed the order to be wrapped in a second array.\n\n``` sql\nSELECT \n  `Articles`.`name`, \n  `Customer`.`name` AS `Customer.name`, \n  `Customer`.`id` AS `Customer.id`, \n  `Customer.PostCode`.`postcode` AS `Customer.PostCode.postcode`, \n  `Customer.PostCode`.`city` AS `Customer.PostCode.city`, \n  `Customer.PostCode`.`id` AS `Customer.PostCode.id` \nFROM `Articles` \n  LEFT OUTER JOIN `Customers` AS `Customer` \n    ON `Customer`.`id` = `Articles`.`customer_id` \n  LEFT OUTER JOIN `PostCodes` AS `Customer.PostCode` \n    ON `Customer.PostCode`.`id` = `Customer`.`post_code_id` \nORDER BY `Customer.PostCode`.`postcode` ASC;\n```\n\nThe fact that your order syntax actually kind of worked suggests to me that you are on an old version - could you try upgrading?\n"
      },
      {
        "user": "mithrandirii",
        "created_at": "2014-03-20T16:36:40Z",
        "body": "i used the version 1.7 . if i use the current git master i get another error on sync with our real application: 'cyclic dependency found'. so first i have to build an test env. but thx for the fast reply\n"
      },
      {
        "user": "janmeier",
        "created_at": "2014-03-20T16:40:03Z",
        "body": "No problem :)\n\nMaster introduced automatically adding foreign key references on associations, so you are creating a circual reference somewhere, probably of the form\n\n``` js\nx.hasOne(y)\ny.hasOne(x)\n```\n\nWhich adds x_id to y and y_id to x - one of them should be a belongsTo\n"
      },
      {
        "user": "mithrandirii",
        "created_at": "2014-03-20T17:34:46Z",
        "body": "ok, with git master the problem is solved. thanks again for your help and hint with the cyclic dependency ;)\n"
      }
    ]
  },
  {
    "number": 1524,
    "title": "Model.hasMany(OtherModel)  doesn't use name of foreign key specified in OtherModel",
    "created_at": "2014-03-20T00:54:50Z",
    "closed_at": "2014-03-24T20:44:20Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/sequelize/sequelize/issues/1524",
    "body": "I have the following two models:\nUser and CropSession were User.hasMany(models.CropSession). In CropSession I reference the table Users with referenceKey: id as userId.\n\nWhen I do\n\n``` js\nUser.find({where: {id: 1}}).then(function(user) {\n  return user.getCropSessions();\n});\n```\n\nThe returned CropSession has property UserId instead of userId. Is there a way to get the stipulated name? In this case being userId.\n\nI leave you next with the model definitions for reference.\n\nUser model\n\n``` js\n'use strict';\n\nvar bcrypt = require('bcrypt');\nvar Promise = require('bluebird');\nvar hash = Promise.promisify(bcrypt.hash, bcrypt);\nvar comparePassword = Promise.promisify(bcrypt.compare, bcrypt);\n\nmodule.exports = function(sequelize, DataTypes) {\n  var User = sequelize.define('User', {\n    id: {\n      type: DataTypes.INTEGER,\n      autoIncrement: true,\n      primaryKey: true\n    },\n    email: {\n      type: DataTypes.STRING,\n      isEmail: true,\n      unique: true,\n      validate: {\n        isEmail: true,\n        notEmpty: true\n      }\n    },\n    userType: {\n      type: DataTypes.ENUM('farmer', 'researcher'),\n      allowNull: false,\n      validate: {\n        isIn: [['farmer', 'researcher']],\n      }\n    },\n    password: {\n      type: DataTypes.STRING,\n      allowNull: false,\n      validate: {\n        notEmpty: true\n      }\n    },\n    name: {\n      type: DataTypes.STRING,\n      allowNull: false,\n      validate: {\n        isAlpha: true\n      }\n    },\n    lastName: {\n      type: DataTypes.STRING,\n      allowNull: false,\n      validate: {\n        isAlpha: true\n      }\n    },\n    organization: {\n      type: DataTypes.STRING,\n      allowNull: false,\n      validate: {\n        isAlphanumeric: true\n      }\n    },\n    farmLatitude: {\n      type: DataTypes.FLOAT,\n      allowNull: true,\n      validate: {\n        isFloat: true\n      }\n    },\n    farmLongitude: {\n      type: DataTypes.FLOAT,\n      allowNull: true,\n      validate: {\n        isFloat: true\n      }\n    }\n  }, {\n    validate: {\n      farmerCoordinates: function() {\n        var hasCoords = this.farmLatitude && !isNaN(this.farmLatitude) &&\n            this.farmLongitude && !isNaN(this.farmLongitude);\n        if(this.userType === 'farmer' && !hasCoords) {\n          throw new Error('Farmer must have the farm\\'s location defined');\n        }\n      }\n    },\n    classMethods: {\n      associate: function(models) {\n        User.hasMany(models.CropSession);\n      },\n      hashPassword: function(password) {\n        return hash(password, 8);\n      }\n    },\n    instanceMethods: {\n      verifyPassword: function(password) {\n        return comparePassword(password, this.password);\n      },\n      getJSON: function() {\n        var values = this.values;\n        delete values.password;\n        return values;\n      }\n    }\n  });\n\n  return User;\n};\n\n```\n\nCropSession model\n\n``` js\n'use strict';\n\nmodule.exports = function(sequelize, DataTypes) {\n  var CropSession = sequelize.define('CropSession', {\n    id: {\n      type: DataTypes.INTEGER,\n      autoIncrement: true,\n      primaryKey: true\n    },\n    userId: {\n      type: DataTypes.INTEGER,\n      references: 'Users',\n      referencesKey: 'id',\n      unique: true\n    },\n    cropName: {\n      type: DataTypes.STRING,\n      unique: true\n    },\n    cropTypeId: {\n      type: DataTypes.INTEGER,\n      references: 'CropTypes',\n      referencesKey: 'id'\n    },\n    startDate: {\n      type: DataTypes.DATE,\n      allowNull: false\n    },\n    initialStageLength: {\n      type: DataTypes.INTEGER,\n      allowNull: false,\n      validate: {\n        isNumeric: true\n      }\n    },\n    developmentStageLength: {\n      type: DataTypes.INTEGER,\n      allowNull: false,\n      validate: {\n        isNumeric: true\n      }\n    },\n    midStageLength: {\n      type: DataTypes.INTEGER,\n      allowNull: false,\n      validate: {\n        isNumeric: true\n      }\n    },\n    lateStageLength: {\n      type: DataTypes.INTEGER,\n      allowNull: false,\n      validate: {\n        isNumeric: true\n      }\n    },\n    kcInitial: {\n      type: DataTypes.FLOAT,\n      allowNull: false,\n      validate: {\n        isNumeric: true\n      }\n    },\n    kcMid: {\n      type: DataTypes.FLOAT,\n      allowNull: false,\n      validate: {\n        isNumeric: true\n      }\n    },\n    kcEnd: {\n      type: DataTypes.FLOAT,\n      allowNull: false,\n      validate: {\n        isNumeric: true\n      }\n    }\n  }, {\n    classMethods: {\n      associate: function(models) {\n        CropSession.belongsTo(models.User);\n        CropSession.belongsTo(models.CropType);\n\n        CropSession.hasMany(models.IrrigationEvent);\n      }\n    }\n  });\n\n  return CropSession;\n};\n\n```\n",
    "comments_url": "https://api.github.com/repos/sequelize/sequelize/issues/1524/comments",
    "author": "vjames19",
    "comments": [
      {
        "user": "mickhansen",
        "created_at": "2014-03-20T08:24:19Z",
        "body": "The naming for camelCase attributes is a bit off, we're working on fixing that.\nFor now you could do `User.hasMany(models.CropSession, {foreignKey: 'userId'});`\n"
      },
      {
        "user": "vjames19",
        "created_at": "2014-03-20T19:20:34Z",
        "body": "@mickhansen I forgot to mention that I also tried using the foreignKey option, but I still get the same result!\n"
      },
      {
        "user": "vjames19",
        "created_at": "2014-03-20T19:30:22Z",
        "body": "@mickhansen The following seems to fix it:\n`CropSession.belongsTo(models.User, {foreignKey: 'userId'});`\n"
      },
      {
        "user": "mickhansen",
        "created_at": "2014-03-20T20:11:51Z",
        "body": "@vjames19 Well yes, you need to use it on both sides of the association if you use the calls on both sides of the association ;)\n"
      }
    ]
  },
  {
    "number": 1520,
    "title": "Possible to get raw values for results of findAll",
    "created_at": "2014-03-19T03:52:36Z",
    "closed_at": "2014-03-20T04:46:52Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/sequelize/sequelize/issues/1520",
    "body": "We can currently access the -values attribute for single instances, but this doesn't seem possible for multiple instances. Is this is a bug or designed as such? \n",
    "comments_url": "https://api.github.com/repos/sequelize/sequelize/issues/1520/comments",
    "author": "fsosa",
    "comments": [
      {
        "user": "mickhansen",
        "created_at": "2014-03-19T05:35:24Z",
        "body": "Can you clarify?\n\n\"Multiple instances\" would just be array of instances, so usually regular array mapping techniques work.\n"
      },
      {
        "user": "fsosa",
        "created_at": "2014-03-20T04:46:52Z",
        "body": "You're completely right, I misunderstood what was actually being returned. Thanks!\n"
      },
      {
        "user": "mickhansen",
        "created_at": "2014-03-20T08:24:55Z",
        "body": "Great :)\n"
      }
    ]
  },
  {
    "number": 1413,
    "title": "`include` breaks when using `include: { daoFactory: DaoFactory1, as: 'factory' }` form",
    "created_at": "2014-02-20T15:57:34Z",
    "closed_at": "2014-02-20T16:40:09Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/sequelize/sequelize/issues/1413",
    "body": "Not sure if it has to do with the association in my db being backwards.\n\nI have \n\n```\nAddress.hasOne(Firm);\nCompany.belongsTo(Address);\n```\n\nThis works as expected:  \n\n```\nCompany.findAll({include: [Address]});\n```\n\nBut this breaks:  \n\n```\nCompany.findAll({include: [{daoFactory: Address, as: 'address'}]});  \n```\n\nWith an error log of \n\n```\nError: Address (address) is not associated to Firm!\nat module.exports.validateIncludedElement (D:\\Work\\LittleRoom\\Sequelize\\node_modules\\sequelize\\lib\\dao-factory.js:1433:13)\nat null. (D:\\Work\\LittleRoom\\Sequelize\\node_modules\\sequelize\\lib\\dao-factory.js:1337:41)\nat Array.map (native)\nat module.exports.validateIncludedElements (D:\\Work\\LittleRoom\\Sequelize\\node_modules\\sequelize\\lib\\dao-factory.js:1336:39)\nat module.exports.DAOFactory.findAll (D:\\Work\\LittleRoom\\Sequelize\\node_modules\\sequelize\\lib\\dao-factory.js:451:34)\nat port (D:\\Work\\LittleRoom\\Sequelize\\index.js:46:17)\nat callbacks (D:\\Work\\LittleRoom\\Sequelize\\node_modules\\express\\lib\\router\\index.js:164:37)\nat param (D:\\Work\\LittleRoom\\Sequelize\\node_modules\\express\\lib\\router\\index.js:138:11)\nat param (D:\\Work\\LittleRoom\\Sequelize\\node_modules\\express\\lib\\router\\index.js:135:11)\nat pass (D:\\Work\\LittleRoom\\Sequelize\\node_modules\\express\\lib\\router\\index.js:145:5)\n```\n",
    "comments_url": "https://api.github.com/repos/sequelize/sequelize/issues/1413/comments",
    "author": "cheapsteak",
    "comments": [
      {
        "user": "janmeier",
        "created_at": "2014-02-20T16:12:04Z",
        "body": "The `as` option is only for when you have explicitly aliased your relation, like this:\n\n``` js\nCompany.belongsTo(Address, { as: 'HomeAddress' })\n\nCompany.findAll({include: [{model: Address, as: 'HomeAddress'}]});  \n```\n"
      },
      {
        "user": "cheapsteak",
        "created_at": "2014-02-20T16:20:17Z",
        "body": "Explicitly aliasing the `belongsTo` part of the relation seems to have broken the other way of include as well.\n\nThis was working:\n\n```\nAddress.hasOne(Firm, { as: 'Company'} );\nCompany.belongsTo(Address, { foreignKey: 'address_id'});\n\nCompany.findAll({\n    where: { compay_ids : ids },\n    include: [Address]\n})  \n```\n\nThis breaks:  \n\n```\nAddress.hasOne(Firm, { as: 'Company'} );\nCompany.belongsTo(Address, { as: 'Address', foreignKey: 'address_id'});  //added explicit alias\n\nCompany.findAll({  //same as before\n    where: { compay_ids : ids },\n    include: [Address]\n})  \n```\n\nAgain a `Address is not associated to Company!` error exception is thrown\n"
      },
      {
        "user": "mickhansen",
        "created_at": "2014-02-20T16:25:20Z",
        "body": "If your association is using `as` you need to use it in your `include` statement aswell.\n"
      },
      {
        "user": "mickhansen",
        "created_at": "2014-02-20T16:25:57Z",
        "body": "```\nAddress.hasOne(Firm, { as: 'Company'} );\nCompany.belongsTo(Address, { as: 'Address', foreignKey: 'address_id'});  //added explicit alias\n\nCompany.findAll({  //same as before\n  where: { compay_ids : ids },\n  include: [{model: Address, as: 'Address'}]\n})  \n```\n\nOr remove the alias all together. But you have to pick one, no alias, or alias on both.\n"
      },
      {
        "user": "janmeier",
        "created_at": "2014-02-20T16:26:29Z",
        "body": "Put another way, you can only use `as` in include if you also use `as` in the association. It is not possible to load your model under another name when including\n"
      },
      {
        "user": "cheapsteak",
        "created_at": "2014-02-20T16:30:52Z",
        "body": "Ah, I see. Thank you for the clarification. That worked.\n"
      },
      {
        "user": "mickhansen",
        "created_at": "2014-02-20T16:40:09Z",
        "body": "A continuing point of confusion, guess we'll have to clear up the docs on that somehow. \n"
      }
    ]
  },
  {
    "number": 1394,
    "title": "no method 'set%modelname%' for multiassociations models",
    "created_at": "2014-02-15T03:24:23Z",
    "closed_at": "2014-02-25T09:21:47Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/sequelize/sequelize/issues/1394",
    "body": "I have models with these associations:\n\n```\ndb.Term\n    .hasMany(db.Taxonomy, {foreignKey: 'term_id'});\n\ndb.Taxonomy\n    .belongsTo(db.Term)\n    .hasMany(db.Event, {through: 'event_taxonomy'})\n\ndb.Event\n    .hasMany(db.Taxonomy, {through: 'event_taxonomy'})\n```\n\nin my controller i try to add new event, with relationship for taxonomy\n\n```\ndb.Taxonomy.find(1).success(function(taxonomy) {\n    db.Event.create({name: 'test'}).success(function(event) {\n\n        // it works\n        taxonomy.addEvent(event).success(function() {})\n\n        // it crush with error \"Object [object Object] has no method 'addTaxonomy'\"\"\n        event.addTaxonomy(taxonomy).success(function() {})\n\n    })    \n})\n```\n",
    "comments_url": "https://api.github.com/repos/sequelize/sequelize/issues/1394/comments",
    "author": "dpolyakov",
    "comments": [
      {
        "user": "mickhansen",
        "created_at": "2014-02-15T08:45:08Z",
        "body": "Its most likely `setTaxonomies` and remember to use an array `[category]`\n"
      },
      {
        "user": "mickhansen",
        "created_at": "2014-02-15T08:46:22Z",
        "body": "Or use `addTaxonomy` if you just want to add to the set. `setAssociations` expects and array and sets the entire association set for that relation.\n"
      },
      {
        "user": "dpolyakov",
        "created_at": "2014-02-15T09:20:30Z",
        "body": "Oh, sorry, i made some mistakes when wrote issue. category = taxonomy\n\nI try both variants but get the error in each of them:\n\n```\nevent.addTaxonomy(taxonomy).success(function() {})\n\nObject [object Object] has no method 'addTaxonomy'\n```\n\n```\nevent.setTaxonomys([taxonomy]).success(function() {})\n\nObject [object Object] has no method 'setTaxonomys'\n```\n"
      },
      {
        "user": "mickhansen",
        "created_at": "2014-02-15T13:20:02Z",
        "body": "Well its most likely `setTaxonomies` like i said, since its pluralized.\nThere might be a naming issue though, try logging the dao/model instance and see what methods it has.\n"
      },
      {
        "user": "janmeier",
        "created_at": "2014-02-15T19:07:07Z",
        "body": "Since it's a has many you need to use the plural, setTaxonomies, and pass\nit an array\n"
      },
      {
        "user": "mickhansen",
        "created_at": "2014-02-19T07:51:45Z",
        "body": "@dpolyakov are you still having issues?\n"
      },
      {
        "user": "dpolyakov",
        "created_at": "2014-02-24T10:34:49Z",
        "body": "@mickhansen i have not had time to check. In the next couple of days I will try to fix my code and give you the answer\n"
      },
      {
        "user": "dpolyakov",
        "created_at": "2014-02-24T22:16:50Z",
        "body": "I printed `accessors` from `node_modules/sequelize/lib/associations/has-many.js`` and get these methods:\n\n```\n{ get: 'getTermTaxonomies',\n  set: 'setTermTaxonomies',\n  add: 'addTermTaxonomy',\n  create: 'createTermTaxonomy',\n  remove: 'removeTermTaxonomy',\n  hasSingle: 'hasTermTaxonomy',\n  hasAll: 'hasTermTaxonomies' }\n```\n\nSo, `addTermTaxonomy` is working for me\n"
      },
      {
        "user": "mickhansen",
        "created_at": "2014-02-25T06:01:54Z",
        "body": "Weird that it's TermTaxonomy when you named the model Taxonomy\n"
      },
      {
        "user": "mickhansen",
        "created_at": "2014-02-25T06:02:15Z",
        "body": "Or did you, i guess we never saw your model definition :)\n"
      },
      {
        "user": "dpolyakov",
        "created_at": "2014-02-25T07:40:19Z",
        "body": "Terms\n\n```\nmodule.exports = function(sequelize, DataTypes) {\n    return sequelize.define('Term', {\n            name: {\n                type: DataTypes.STRING,\n                validate: {\n                    notEmpty: true\n                }\n            },\n            slug:  {\n                type: DataTypes.STRING,\n                unique: true\n            }\n        },\n        {\n            tableName: 'terms'\n        }\n    )\n}\n```\n\nTaxonomy\n\n```\nvar db = require('../models');\n\nmodule.exports = function(sequelize, DataTypes) {\n    var Taxonomy = sequelize.define('Taxonomy', {\n            term_id: {\n                type: DataTypes.INTEGER,\n                references: db.Term,\n                referencesKey: 'id',\n                onDelete: 'restrict'\n            },\n            type: {\n                type:DataTypes.TEXT\n            },\n            parent: {\n                type: DataTypes.INTEGER\n            },\n            description: {\n                type:DataTypes.TEXT\n            }\n        },\n        {\n            tableName: 'term_taxonomy'\n        }\n    );\n\n    return Taxonomy\n}\n```\n\nEvent\n\n```\nmodule.exports = function (sequelize, DataTypes) {\n    var Event = sequelize.define('Event', {\n            name: {\n                type: DataTypes.STRING,\n                validate: {\n                    notEmpty: true\n                }\n            },\n            slug: {\n                type: DataTypes.STRING\n                //unique: true\n            },\n\n            description: {\n                type: DataTypes.TEXT\n            } \n     );\n\n    return Event\n}\n```\n\nRelationship in models/index.js\n\n```\ndb.Term\n    .hasMany(db.Taxonomy, {foreignKey: 'term_id'});\n\ndb.Taxonomy\n    .belongsTo(db.Term)\n    .hasOne(db.Taxonomy, { as: 'parent', foreignKey: 'parent',useJunctionTable: false})\n    .hasMany(db.Event, {through: 'event_taxonomy' })\n\ndb.Event\n    .hasMany(db.Taxonomy, {through: 'event_taxonomy' })\n```\n"
      },
      {
        "user": "mickhansen",
        "created_at": "2014-02-25T09:21:30Z",
        "body": "Ah yeah you encountered the tableName bug. We're fixing that in 2.0 (can't do it in 1.7 for BC reasons), currently it will use tableName for names instead of model.name, that's obviously not intended behaviour.\n"
      },
      {
        "user": "Ygilany",
        "created_at": "2015-10-05T15:33:37Z",
        "body": "Can I know how did you print out the accessors for a specific model ?\nThanks\n@dpolyakov @mickhansen \n"
      },
      {
        "user": "janmeier",
        "created_at": "2015-10-06T06:38:58Z",
        "body": "@Ygilany `Model.Instance.prototype` or simply log the association\n"
      },
      {
        "user": "timmyreilly",
        "created_at": "2019-01-18T08:02:27Z",
        "body": "Just to tag this along, as this thread helped me a lot. Their might also be a `setWhatever` on one model but not the other model in a many-to-many relationship. So... don't forget to check the other object for a `setWhatever` in the prototype before pulling your hair out. "
      }
    ]
  },
  {
    "number": 1392,
    "title": "how to filter findAll include modle fields",
    "created_at": "2014-02-14T18:43:42Z",
    "closed_at": "2014-02-15T11:00:40Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/sequelize/sequelize/issues/1392",
    "body": "Example\n\n``` js\n    DB.Article.findAll({\n        include : [{model : DB.User}],\n        order : 'article.created_at DESC',\n        limit : 50\n    }).done(function (err, result){\n\n        })\n```\n\nit show sql\n\n``` sql\nExecuting (default): SELECT `article`.*, `user`.`id` AS `user.id`, `user`.`name` AS `user.name`, `user`.`password` AS `user.password`, `user`.`email` AS `user.email`, `user`.`bio` AS `user.bio`, `user`.`posts_count` AS `user.posts_count`, `user`.`digged_count` AS `user.digged_count`, `user`.`status` AS `user.status`, `user`.`create_passport_id` AS `user.create_passport_id`, `user`.`created_at` AS `user.created_at`, `user`.`modified_at` AS `user.modified_at` FROM `article` LEFT OUTER JOIN `user` AS `user` ON `user`.`id` = `article`.`user_id` ORDER BY article.created_at DESC LIMIT 50;\n```\n\nHave an way change include model select fields?\n",
    "comments_url": "https://api.github.com/repos/sequelize/sequelize/issues/1392/comments",
    "author": "youxiachai",
    "comments": [
      {
        "user": "dpolyakov",
        "created_at": "2014-02-15T03:37:10Z",
        "body": "```\nDB.Article.findAll({\n        include : [{\n            model : DB.User,\n            attributes: ['name']\n            }],\n        order : 'article.created_at DESC',\n        limit : 50\n    }).done(function (err, result){\n})\n```\n\nit will include only user name\n"
      },
      {
        "user": "youxiachai",
        "created_at": "2014-02-15T11:00:40Z",
        "body": "@dpolyakov thanks !\n"
      }
    ]
  },
  {
    "number": 1368,
    "title": "Possible to define foreign key options via Associations ",
    "created_at": "2014-02-10T05:08:36Z",
    "closed_at": "2014-02-10T20:03:25Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/sequelize/sequelize/issues/1368",
    "body": "When defining an association, is it possible to define options for the automatically created foreign key?\n\nFor example, \n\n```\nProject.hasMany(User, {allowNull: false}); \n```\n\nIf not, is the only way to accomplish this by defining the column via the model and then using the foreignkey option?\n",
    "comments_url": "https://api.github.com/repos/sequelize/sequelize/issues/1368/comments",
    "author": "fsosa",
    "comments": [
      {
        "user": "mickhansen",
        "created_at": "2014-02-10T05:45:56Z",
        "body": "Without being total certain; Yes i believe the only way to have granular control over the foreign key column is to define it yourself.\n"
      },
      {
        "user": "fsosa",
        "created_at": "2014-02-10T20:03:25Z",
        "body": "Appreciate the response, thanks!\n"
      }
    ]
  },
  {
    "number": 1366,
    "title": "Oddities with one to one relationships?",
    "created_at": "2014-02-09T14:11:14Z",
    "closed_at": "2014-02-10T10:05:44Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/sequelize/sequelize/issues/1366",
    "body": "I've got a fairly simple schema, a Users table and a UserRoles table. One User has one Role, linked from the User's roleId to the UserRole's id.\n\nFor some reason I can't specify the relationship like this:\n\n``` javascript\nm.User.hasOne(m.UserRole, {as: 'role', foreignKey: 'roleId'});\n```\n\nBecause I get the following error:\n\n``` javascript\n{ [Error: ER_BAD_FIELD_ERROR: Unknown column 'role.roleId' in 'field list']\n  code: 'ER_BAD_FIELD_ERROR',\n  errno: 1054,\n  sqlState: '42S22',\n  index: 0,\n  sql: 'SELECT `Users`.*, `role`.`id` AS `role.id`, `role`.`name` AS `role.name`, `role`.`roleId` AS `role.roleId` FROM `Users` LEFT OUTER JOIN `UserRoles` AS `role` ON `Users`.`id` = `role`.`roleId` WHERE `Users`.`id`=1;' }\n```\n\nHowever if I specify the relationship with a belongsTo like so:\n\n``` javascript\nm.User.belongsTo(m.UserRole, {as: 'role', foreignKey: 'roleId'});\n```\n\nIt works fine.\n\nThis seems a bit confusing to me, I'd expect hasOne to represent a situation where you're mapping from a column on the source table, to a target table, instead of what is happening which is the inverse of that, the target table is mapping onto the source table.\n\nCan anyone clear this up for me?\n",
    "comments_url": "https://api.github.com/repos/sequelize/sequelize/issues/1366/comments",
    "author": "ghost",
    "comments": [
      {
        "user": "mickhansen",
        "created_at": "2014-02-09T18:22:21Z",
        "body": "If the foreignKey is on the source model, in this case User, it's a belongsTo association. If the foreignKey is on the target model, it's a hasOne association.\n\nYou can think about this in terms of ownership, you really only use hasOne when it owns that model. A user/role relationship would usually be a 1:M association with user belonging to roles and roles having many users.\n"
      },
      {
        "user": "ghost",
        "created_at": "2014-02-10T10:05:44Z",
        "body": "That makes sense, thanks for clearing that up!\n"
      }
    ]
  },
  {
    "number": 1336,
    "title": "Guidance on error handling",
    "created_at": "2014-02-03T05:59:51Z",
    "closed_at": "2014-02-03T18:58:57Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/sequelize/sequelize/issues/1336",
    "body": "I have a one-to-many relationship: 1 order has many items. I am trying to write a function that creates an item for a given orderId (see below). This function has 3 sequential steps: 1) find the order, 2) create the item, 3) connect the item to the order. If any of the steps fails, I must return an error. That's why my function takes a `successCallback` and an `errorCallback`.\n\nIs there a more elegant way to write this function? Ideally, I would like to avoid the 3 nested levels. Also, if possible, I would like to avoid sending the two callback functions as parameters.\n\n```\nexports.createItem = function(orderId, itemInput, successCallback, errorCallback) {\n\n    domain.Order.find({where: {id: orderId}})\n        .success(function(order) {\n            domain.Item.create(itemInput)\n                .success(function(item) {\n                    order.addItem(item)\n                        .success(function() {\n                            successCallback(item);\n                        })\n                        .error(function(err) {\n                            errorCallback(err);\n                        })\n                })\n                .error(function(err) {\n                    errorCallback(err);\n                })\n        })\n        .error(function(err) {\n            errorCallback(err);\n        })\n}\n```\n",
    "comments_url": "https://api.github.com/repos/sequelize/sequelize/issues/1336/comments",
    "author": "nareshbhatia",
    "comments": [
      {
        "user": "mickhansen",
        "created_at": "2014-02-03T06:16:41Z",
        "body": "Ideal case for promises.\nSomething like this should work:\n\n``` js\nreturn domain.Order.find({where: {id: orderId}}).then(function (order) {\n  return domain.Item.create(itemInput).then(function (item) {\n    return order.addItem(item);\n  });\n}).then(function (item) {\n\n}, function (error) {\n\n});\n```\n"
      },
      {
        "user": "nareshbhatia",
        "created_at": "2014-02-03T18:58:57Z",
        "body": "This is perfect! Thanks @mickhansen, as always!\n"
      }
    ]
  },
  {
    "number": 1102,
    "title": "many to one question?",
    "created_at": "2013-12-04T12:47:34Z",
    "closed_at": "2013-12-04T21:22:11Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/sequelize/sequelize/issues/1102",
    "body": "Is this the same?\n\nProject.hasMany(User)\nUser.belongsTo(Project)\n\nI can establish someone or I have to establish all?\n",
    "comments_url": "https://api.github.com/repos/sequelize/sequelize/issues/1102/comments",
    "author": "carlituxman",
    "comments": [
      {
        "user": "janmeier",
        "created_at": "2013-12-04T18:25:48Z",
        "body": "When you do `User.belongsTo(Project)` you are creating the relation enabling you to call `user.getProject()`. `Project.hasMany(User)` links the association the other way, enabling you to call `project.getUsers()`. If you only did one of those two, e.g. if you only did `User.belongsTo(Project)` you would be able to retrieve the project that a user is currently working on, but not all users working on a project\n\nSo yes, in short, they create the same fields, but creates the relation from two \"different perspectives\" so to say\n"
      },
      {
        "user": "carlituxman",
        "created_at": "2013-12-04T20:46:30Z",
        "body": "Perfect! \nMany thanks\n"
      }
    ]
  },
  {
    "number": 1075,
    "title": "Delete associated records",
    "created_at": "2013-11-25T10:50:27Z",
    "closed_at": "2013-11-25T12:14:56Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/sequelize/sequelize/issues/1075",
    "body": "Hi,\n\nI have this setup:\n\n``` js\nvar Restriction = sequelize.define('restriction', {\n    id: Sequelize.INTEGER,\n    device: Sequelize.INTEGER,\n    user: Sequelize.INTEGER\n});\n\nvar User = sequelize.define('user', {\n    id: Sequelize.INTEGER,\n    name: Sequelize.STRING\n});\n\nUser.hasMany(Restriction, {as: 'Restrictions', foreignKey: 'user', primaryKey: 'id'});\n```\n\nThis means that each User has many Restrictions. When I fetch a User, I call user.getRestrictions() and it return the restrictions associated to the user. Fine.\nBut when I call user.removeRestriction() I was expecting that restriction to be deleted from the database, but instead the foreign key was set to NULL.\n\nIs there a way to actually remove that restriction instead of setting the FK to NULL?\nThanks!\n",
    "comments_url": "https://api.github.com/repos/sequelize/sequelize/issues/1075/comments",
    "author": "fonini",
    "comments": [
      {
        "user": "janmeier",
        "created_at": "2013-11-25T11:42:22Z",
        "body": "A restriction is an actual entity, not an entity in a junction table, so removing a restriction entry when you remove the asocation from user is not a sane default behaviour.If you want it, you can call `restriction.destroy();`\n"
      },
      {
        "user": "fonini",
        "created_at": "2013-11-25T11:52:38Z",
        "body": "Thanks.\nI just wanted to make my code more clean, because when I update a User, I have to remove all the restrictions, then write the new ones and associate then with the User.\n"
      },
      {
        "user": "janmeier",
        "created_at": "2013-11-25T12:14:56Z",
        "body": "Cool, closing this issue then. Please re-open if you have further questions.\n"
      }
    ]
  },
  {
    "number": 990,
    "title": "Consuming a DB created for Rails app",
    "created_at": "2013-10-14T06:39:22Z",
    "closed_at": "2013-10-16T10:10:45Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/sequelize/sequelize/issues/990",
    "body": "I have decided to move some functionality of an existing Rails API into Node.js. I picked up Sequelize as an ORM mainly because it seemed like it is the most feature rich out of the many others.\n\nSo I started mapping my models from Rails in Sequelize (since I didn`t need all the columns I only mapped the necessary ones) and I ended up with a 1-n relationship that is done using :through in Rails. So I created the following ralationship:\n\n```\nHole.hasMany(TrackingGroup, {foreignKey: 'hole_id', joinTableName:'holes_tracking_groups', underscored: true, useJunctionTable: true}); \n\nTrackingGroup.belongsTo(Hole, {foreignKey: 'tracking_group_id', joinTableName: 'holes_tracking_groups'});\n```\n\nThe idea is that when I get all the tracking groups for a hole I will have a query in the holes_tracking_groups where the hole_id = \"something\" but instead I was having a query in the tracking_group table (the one that has all the tracking groups). Or in other words the specified joinTableName was not considered at all.\n",
    "comments_url": "https://api.github.com/repos/sequelize/sequelize/issues/990/comments",
    "author": "marval",
    "comments": [
      {
        "user": "janmeier",
        "created_at": "2013-10-14T20:09:02Z",
        "body": "Junction tables of join tables are only used for many to many relations, so in order to fit your current data model to sequelize you will have to do:\n\n``` js\nHole.hasMany(TrackingGroup, {foreignKey: 'hole_id', joinTableName:'holes_tracking_groups', underscored: true}); \nTrackingGroup.hasMany(Hole, {foreignKey: 'tracking_group_id', joinTableName: 'holes_tracking_groups'});\n```\n\nBy the way, useJunctionTable is only used if you have a self-reference but don't need a junction table, so I've removed that as well ;)\n"
      },
      {
        "user": "marval",
        "created_at": "2013-10-16T10:10:45Z",
        "body": "Thanks for the response. It doesn`t even make sense to have the junction table and it is actually a many-to-many relationship. I guess I wasn`t paying that much attention at that late hour :)\n"
      }
    ]
  },
  {
    "number": 691,
    "title": "Unicode Datatype",
    "created_at": "2013-06-12T07:18:43Z",
    "closed_at": "2013-06-13T05:41:21Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/sequelize/sequelize/issues/691",
    "body": "Hi, If I define a column with Sequelize.STRING, can it store unicode character? If not, how would I go about doing it? Thanks.\n",
    "comments_url": "https://api.github.com/repos/sequelize/sequelize/issues/691/comments",
    "author": "amitava82",
    "comments": [
      {
        "user": "janmeier",
        "created_at": "2013-06-12T09:26:22Z",
        "body": "If you do no specify a charset when creating your table or in the define options or your sequelize options, the table will be created with the default charset for the DB.\n\nThere are several things you can do to support unicode:\n\nTable level:\n\n``` js\nsequlize.define('table', {\n\n}, {\n  charset: 'utf8',\n  collate: 'utf8_unicode_ci'\n})\n```\n\nColumn level:\n\n``` js\nsequelize.define('table', {\n  column: Sequelize.STRING + ' CHARSET utf8 COLLATE utf8_unicode_ci'\n})\n```\n\nI just noticed that the collate option is not actually supported yet - push comming up\n"
      },
      {
        "user": "amitava82",
        "created_at": "2013-06-13T05:41:21Z",
        "body": "Thanks! May be we could put it into doc.\n"
      },
      {
        "user": "janmeier",
        "created_at": "2013-06-13T08:14:59Z",
        "body": "The table level definition is already in the docs. Perhaps it should be noted somewhere in the docs that you can specify the type as a string yourself..\n"
      },
      {
        "user": "rafis",
        "created_at": "2016-10-06T06:55:09Z",
        "body": "Converting type from DataType class to String causes different processing in Sequelize internals. If type is String it considered as strict instruction to use that type as is and it looks non-native to Sequelize.\n\n```\n{\n    type: 'VARCHAR(255)',\n    allowNull: false,\n    Model: table,\n    fieldName: 'column',\n    _modelAttribute: true,\n    field: 'column'\n}\n```\n\nIf type is native DataType:\n\n```\n{\n    type: {\n        options: {\n            length: 255,\n            binary: undefined\n        },\n        _binary: undefined,\n        _length: 255\n    },\n    allowNull: true,\n    defaultValue: 0,\n    Model: table,\n    fieldName: 'column',\n    _modelAttribute: true,\n    field: 'column'\n}\n```\n\nIt has valuable `_length` attribute which I need. Can you please add to column definition ability to specify `charset` and `collate` like it has been done in table params:\n\n```\nslug: {\n    type: DataTypes.STRING(255),\n    charset: 'latin1',\n    collate: 'latin1_bin',\n    allowNull: false\n}\n```\n"
      },
      {
        "user": "alfaproject",
        "created_at": "2018-04-14T09:59:22Z",
        "body": "@rafis was that ever implemented? I can't find it anywhere. ):"
      },
      {
        "user": "armellarcier",
        "created_at": "2018-09-04T06:58:01Z",
        "body": "+1"
      }
    ]
  },
  {
    "number": 638,
    "title": "Postgresql find() never reached .error(function(error){})",
    "created_at": "2013-05-21T23:02:35Z",
    "closed_at": "2013-05-22T09:21:19Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/sequelize/sequelize/issues/638",
    "body": "I have something strange happening. I issue this code:\n\n```\nmodels.User.find({where: {userid: req.params.uid, token: req.params.token}}).success(function(user) {\n            console.log(user);\n            console.log(user.token_sent);\n            res.send('found it!');\n        }).failure(function(error) {\n            res.send(500, error);\n        });\n```\n\nWhen the User is not in the database, I recieve an error instead of the error being passed to the error callback. Instead, console.log(user) returns null. And console.log(user.token_sent) breaks.\n\n```\nExecuting: SELECT * FROM \"Users\" WHERE \"userid\"='2' AND \"token\"='ddd580a83805f66b700c21dd6a2b54d8658a58b4978e9a18' LIMIT 1;\nnull\n\n/home/user/nodetest/admin/node_modules/pg/lib/client.js:160\n      throw error;\n            ^\nTypeError: Cannot read property 'token_sent' of null\n    at null.<anonymous> (/home/user/nodetest/admin/routes/index.js:65:29)\n    at EventEmitter.emit (events.js:95:17)\n    at null.<anonymous> (/home/user/nodetest/admin/node_modules/sequelize/lib/query-interface.js:343:17)\n    at EventEmitter.emit (events.js:117:20)\n    at module.exports.onSuccess (/home/user/nodetest/admin/node_modules/sequelize/lib/dialects/postgres/query.js:106:14)\n    at null.<anonymous> (/home/user/nodetest/admin/node_modules/sequelize/lib/dialects/postgres/query.js:47:17)\n    at EventEmitter.emit (events.js:95:17)\n    at Query.handleReadyForQuery (/home/user/nodetest/admin/node_modules/pg/lib/query.js:101:8)\n    at null.<anonymous> (/home/user/nodetest/admin/node_modules/pg/lib/client.js:151:26)\n    at EventEmitter.emit (events.js:117:20)\n```\n\nAm I doing something wrong?\n",
    "comments_url": "https://api.github.com/repos/sequelize/sequelize/issues/638/comments",
    "author": "milovanderlinden",
    "comments": [
      {
        "user": "janmeier",
        "created_at": "2013-05-22T09:03:40Z",
        "body": "Errors are only triggered when something goes seriously wrong - a syntax error in the SQL and things like that. When the user is not found the query itself was successful, so the success callback is triggered. But since nothing matched your query, null is returned. And the reason your code breaks is that you are trying to access a property on something that is null. You success handler should be something like this:\n\n``` js\nif (user) {\n    console.log(user);\n    console.log(user.token_sent);\n    res.send('found it!');\n} else {\n    res.send(\"nothing found\");\n}\n```\n"
      },
      {
        "user": "milovanderlinden",
        "created_at": "2013-05-22T09:21:19Z",
        "body": "Thank you for the answer, perfectly clear!\n"
      }
    ]
  },
  {
    "number": 519,
    "title": "Load from JSON object",
    "created_at": "2013-04-06T19:44:31Z",
    "closed_at": "2013-04-08T18:01:39Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/sequelize/sequelize/issues/519",
    "body": "Hello, I know any object from the model can be stringified. But there are any method to create an Sequelize object from a plain JSON that previously was a model object?\n\nThanks.\n",
    "comments_url": "https://api.github.com/repos/sequelize/sequelize/issues/519/comments",
    "author": "maxsosa",
    "comments": [
      {
        "user": "mickhansen",
        "created_at": "2013-04-06T20:50:04Z",
        "body": "Model.build(JSON.parse(jsonString)) - or just Model.build(object)\n"
      },
      {
        "user": "janmeier",
        "created_at": "2013-04-08T08:26:56Z",
        "body": "You might want to pass in `isNewRecord = false` as well\n\n`Model.build(object, { isNewRecord : false ))`\n\n_edit:_ fat fingers..\n"
      },
      {
        "user": "maxsosa",
        "created_at": "2013-04-08T18:01:39Z",
        "body": "Thank you! That's exactly wat I needed.\n\nRegards.\n"
      }
    ]
  },
  {
    "number": 474,
    "title": "Do you have support DOUBLE/DOUBLE PRECISION ?",
    "created_at": "2013-03-05T12:47:13Z",
    "closed_at": "2013-03-05T12:59:36Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/sequelize/sequelize/issues/474",
    "body": "",
    "comments_url": "https://api.github.com/repos/sequelize/sequelize/issues/474/comments",
    "author": "killmenot",
    "comments": [
      {
        "user": "janmeier",
        "created_at": "2013-03-05T12:51:39Z",
        "body": "Right now Sequelize supports FLOAT fields out of the box. But you can also specify the type of a row yourself, instead of using the Sequelize types:\n\n``` javascript\nsequelize.define(... , {\n    float: Sequelize.FLOAT\n});\n\nsequelize.define(... , {\n    double: 'DOUBLE'\n});\n```\n"
      },
      {
        "user": "killmenot",
        "created_at": "2013-03-05T12:59:36Z",
        "body": "Cool, it works. Thank you.\n"
      }
    ]
  }
]