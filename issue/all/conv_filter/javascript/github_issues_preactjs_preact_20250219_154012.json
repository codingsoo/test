[
  {
    "number": 2812,
    "title": "How does one modify child props in Preact?",
    "created_at": "2020-10-31T21:55:16Z",
    "closed_at": "2020-11-02T07:24:17Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/preactjs/preact/issues/2812",
    "body": "I couldn\u2019t find anywhere in the docs how to modify props of child components.\r\n\r\nIn my case, if the parent component `<Modal padding={true}>` has a `padding: true` prop, I\u2019d like one of its children `<ModalContent>` to automatically also be assigned a `padding: true` prop as well (but not to some of `<Modal>`\u2019s other children).\r\n\r\n```js\r\nconst Modal = ({ padding, ...props }) => {\r\n  return (\r\n    <div {...{ padding }}>\r\n      {/* How does one conditionally modify prop of the `ModalContent` child to include `padding: true` */}\r\n      {props.children}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Modal\r\n```",
    "comments_url": "https://api.github.com/repos/preactjs/preact/issues/2812/comments",
    "author": "heymartinadams",
    "comments": [
      {
        "user": "marvinhagemeister",
        "created_at": "2020-11-02T07:23:42Z",
        "body": "Note that strong coupling between parent and direct children is discouraged, because it breaks the composition model of components. By doing so you'd effectively disallow consumers to use their own components.\r\n\r\nIn general there are two ways to do that:\r\n\r\n## cloneElement\r\n\r\nThe `cloneElement` function can be used to clone a child and to pass new props to it.\r\n\r\n```jsx\r\nimport {\u00a0toChildArray, cloneElement }\u00a0from \"preact\";\r\n\r\nfunction Modal(props) {\r\n  return (\r\n    <div class=\"modal\">\r\n      {toChildArray(props.children).map((child, i) => {\r\n        return cloneElement(child, { key: i, padding: props.padding });\r\n      })}\r\n    </div>\r\n  )\r\n}\r\n```\r\n\r\nThe `cloneElement` approach has the disadvantage that consumers of that component can't pass in their own children anymore. Code like this will break because the props will be assigned to the `Fragment` instead of `ModalContent`:\r\n\r\n```jsx\r\n<Modal>\r\n  {someCondition && (\r\n    <>\r\n      <ModalHeader />\r\n      <ModalContent />\r\n    </>\r\n  )}\r\n  <OtherModalContent />\r\n</Modal>\r\n```\r\n\r\n## Context (recommended)\r\n\r\nA better approach is to leverage the context api instead.\r\n\r\n```jsx\r\nconst ModalContext = createContext({ padding: null });\r\n\r\nfunction Modal(props) {\r\n  return (\r\n    <div class=\"modal\">\r\n      <ModalContext.Provider value={{ padding: props.padding }}>\r\n        {props.children}\r\n      </ModalContext.Provider>\r\n    </div>\r\n  )\r\n}\r\n\r\n// And then in ModalContent\r\nfunction ModalContent(props) {\r\n  const ctx = useContext(ModalContext); \r\n  return <div style={...ctx.padding}>{props.children}</div>\r\n}\r\n```"
      },
      {
        "user": "heymartinadams",
        "created_at": "2020-11-03T03:15:46Z",
        "body": "Herzlichen Dank, @marvinhagemeister \ud83d\ude4f \ud83c\udf89"
      }
    ]
  },
  {
    "number": 1522,
    "title": "Video player in Preact",
    "created_at": "2019-04-08T06:46:38Z",
    "closed_at": "2019-04-08T09:33:23Z",
    "labels": [
      "question",
      "compat"
    ],
    "url": "https://github.com/preactjs/preact/issues/1522",
    "body": "Is there a Video Player component we can use for Preact like in React? I found some in my search but they didn't seem to be used too often.  Can you direct me to one that you recommend? I would like to create an onclick to a button that will open a modal with a video. Thank you! ",
    "comments_url": "https://api.github.com/repos/preactjs/preact/issues/1522/comments",
    "author": "elaineleeworld",
    "comments": [
      {
        "user": "marvinhagemeister",
        "created_at": "2019-04-08T09:33:23Z",
        "body": "One of the big selling points of Preact is that one can use all components that were originally written for React. There is no need to convert them to Preact or anything. This is typically done via aliasing `react` and `react-dom` to `preact/compat`:\r\n\r\n```js\r\n// webpack.config.js\r\nmodule.exports = {\r\n  // ...rest of your webpack config\r\n  resolve: {\r\n    alias: {\r\n      react: 'preact/compat',\r\n      'react-dom': 'preact/compat'\r\n    }\r\n  }\r\n};\r\n```\r\n\r\nAnd then you can import react libraries as usual. If that somehow doesn't work with any of the react libraries you're using, we'd love to take a look \ud83d\ude42 "
      },
      {
        "user": "elaineleeworld",
        "created_at": "2019-04-08T21:13:53Z",
        "body": "ah okay!  I will give it a whirl!  this is my first preact project, you can take a look at the repo of the same name on my GitHub.  I already had the alias. Just didn't know how to use react components with it.  For example,  I just npm installed react player and am getting this warning in my terminal `react-player@1.10.0 requires a peer of react@* but none is installed. You must install peer dependencies yourself.`  Does that mean I have to install react? and if yes, won't that make the K weight larger?"
      },
      {
        "user": "ForsakenHarmony",
        "created_at": "2019-04-08T21:53:14Z",
        "body": "no it's just a warning"
      },
      {
        "user": "marvinhagemeister",
        "created_at": "2019-04-09T05:25:05Z",
        "body": "yup, as @ForsakenHarmony said this is a warning that can be safely ignored. The reason it pops up is that npm doesn't support aliasing packages. It has no clue that we replace\r\n all `react` and `react-dom` imports with `preact/compat` at build time with webpack \ud83d\udc4d"
      },
      {
        "user": "elaineleeworld",
        "created_at": "2019-04-10T21:40:33Z",
        "body": "thanks everyone! that was helpful explanation! "
      }
    ]
  },
  {
    "number": 1263,
    "title": "Prefixing event handlers (a-la onWebkitAnimationEnd)",
    "created_at": "2018-11-30T17:23:34Z",
    "closed_at": "2019-01-10T08:07:07Z",
    "labels": [
      "question",
      "wontfix",
      "workaround"
    ],
    "url": "https://github.com/preactjs/preact/issues/1263",
    "body": "The following works great for browsers that don't need a prefix, but fails for browsers that do.\r\n\r\n`<div onAnimationEnd={this.onAnimationEnd} />`\r\n\r\n\r\nWhat is the best way to handle this for browsers that need the `webkit` prefix for this event?",
    "comments_url": "https://api.github.com/repos/preactjs/preact/issues/1263/comments",
    "author": "bartlewis",
    "comments": [
      {
        "user": "marvinhagemeister",
        "created_at": "2018-12-05T20:02:06Z",
        "body": "You could use a simple helper function to add prefixes:\r\n\r\n```jsx\r\nfunction addPrefix(name, fn) {\r\n  const renamed = name.charAt(0).toUpperCase() + name.slice(1);\r\n  return {\r\n    [name]: fn,\r\n    [\"webkit\" + renamed]: fn,\r\n  }\r\n}\r\n\r\n// Usage\r\n<div {...addPrefix(\"onAnimationEnd\", this.onAnimationEnd)} />\r\n\r\n// output:\r\n<div onAnimationEnd={this.onAnimationEnd} webkitOnAnimationEnd={this.onAnimationEnd} />\r\n```"
      },
      {
        "user": "developit",
        "created_at": "2018-12-06T02:30:47Z",
        "body": "Love it! Here's a vnode hook that will apply it globally & automatically:\r\n\r\n```js\r\nimport { options } from 'preact';\r\n\r\nconst mapping = {};\r\nfor (let prop in document.body) {\r\n  let prefixedProp = 'webkit' + prop;\r\n  if (prefixedProp in document.body) {\r\n    mapping[prop] = prefixedProp;\r\n  }\r\n}\r\n\r\nlet old = options.vnode;\r\noptions.vnode = vnode => {\r\n  if (typeof vnode.nodeName === 'string') {\r\n    for (let i in vnode.props) {\r\n      let lc = i.toLowerCase();\r\n      if (mapping.hasOwnProperty(lc)) {\r\n        vnode.props[mapping[lc]] = vnode.props[i];\r\n      }\r\n    }\r\n  }\r\n  if (old) old(vnode);\r\n};\r\n```"
      },
      {
        "user": "bartlewis",
        "created_at": "2018-12-07T02:47:06Z",
        "body": "I played with this a little bit tonight, but not seeing any of the prefix extensions fire. Tried all of the following variations. The only way I can get a prefix to fire is via `addEventListener`.\r\n\r\n```javascript\r\n<div\r\n  onwebkitTransitionEnd={() => {\r\n    console.log('onwebkitTransitionEnd'); // never fires\r\n  }}\r\n  onWebkitTransitionEnd={() => {\r\n    console.log('onWebkitTransitionEnd'); // never fires\r\n  }}\r\n  webkitTransitionEnd={() => {\r\n    console.log('webkitTransitionEnd'); // never fires\r\n  }}\r\n  webkitOnTransitionEnd={() => {\r\n    console.log('webkitOnTransitionEnd'); // never fires\r\n  }}\r\n  ref={el => {\r\n    if (el) {\r\n      el.addEventListener('webkitTransitionEnd', () => {\r\n        console.log('addEventListener webkitTransitionEnd'); // does fire\r\n      });\r\n    }\r\n  }}\r\n/>\r\n```"
      },
      {
        "user": "developit",
        "created_at": "2018-12-07T18:52:35Z",
        "body": "Ah - it looks like this is a result of `webkitTransitionEnd` being case-sensitive, whereas `transitionend` is lowercased. Preact currently has trouble dealing with mixed-case event names (#788)."
      },
      {
        "user": "developit",
        "created_at": "2018-12-07T18:56:46Z",
        "body": "You could use a global polyfill to emulate `transitionend` for browsers that only support `webkitTransitionEnd`:\r\n\r\n```js\r\nif (!('ontransitionend' in document.body) {\r\n  addEventListener('webkitTransitionEnd', e => {\r\n    const event = new Event('transitionend', { bubbles: true });\r\n    e.target.dispatch(event);\r\n  });\r\n}\r\n```"
      },
      {
        "user": "bartlewis",
        "created_at": "2018-12-07T23:24:08Z",
        "body": "Thanks a ton @developit . This is working well.\r\n\r\nMy final solution looks something like this:\r\n\r\n```javascript\r\nfunction getAnimationEndEventName() {\r\n  const animations = {\r\n    animation: 'animationend',\r\n    WebkitAnimation: 'webkitAnimationEnd',\r\n  };\r\n\r\n  for (let key in animations) {\r\n    if (document.body.style[key] !== undefined) {\r\n      return animations[key];\r\n    }\r\n  }\r\n\r\n  return false;\r\n}\r\n\r\nconst animationEndEventName = getAnimationEndEventName();\r\nif (animationEndEventName !== 'animationend') {\r\n  window.addEventListener(animationEndEventName, e => {\r\n    const event = new Event('animationend', { bubbles: true });\r\n    e.target.dispatchEvent(event);\r\n  });\r\n}\r\n```"
      },
      {
        "user": "developit",
        "created_at": "2018-12-08T00:33:26Z",
        "body": "Love it! Now it's super easy to remove that workaround once browser support requirements eventually shift, without having to change your components \ud83d\udc4d "
      },
      {
        "user": "marvinhagemeister",
        "created_at": "2019-01-10T08:07:07Z",
        "body": "Closing, as this isn't an issue with preact \ud83d\udc4d "
      }
    ]
  },
  {
    "number": 1105,
    "title": "External API methods for a component",
    "created_at": "2018-05-17T15:07:37Z",
    "closed_at": "2018-05-22T09:37:13Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/preactjs/preact/issues/1105",
    "body": "First up, let me say I'm an old school Javascript person; Preact (and React) is new to me, so if I'm talking rubbish, feel free to shoot me down :).\r\n\r\nBasically what I'm looking to be able to do is define methods on a class I am creating (extending `preact.Component`) and then use those methods. Defining them is easy - using them, not so much. In plain Javascript I'd just do `new ClassName()`, but in Preact you use the `render` function, which returns a DOM node.\r\n\r\nI found #955 which relates to this and using the solution there I can get my instance and call its methods:\r\n\r\n```js\r\n\tlet instance;\r\n\tlet ref = c => { instance = c; };\r\n\tpreact.render(<Menu ref={ref} />, menu.parent[0], menu[0] );\r\n\t\r\n\t// Then sometime later - after a socket update with new menu items:\r\n\tinstance.data( ... );\r\n```\r\n\r\nThat feels really messy and doesn't feel like the right way of doing it with Preact. Its a lot of messing around just to get the class instance (rather than `let instance = new Menu()`).\r\n\r\nIs there a better way of doing this? Should I in fact be passing the `data` in as a property to a new `preact.render(<Menu...)` call? Does that reuse the old instance (it looks like a factory method, so I'm guessing not).\r\n\r\nI guess I'm just haven't a little trouble knowing what the right way to do it would be and meshing that with my old school way of thinking!",
    "comments_url": "https://api.github.com/repos/preactjs/preact/issues/1105/comments",
    "author": "DataTables",
    "comments": [
      {
        "user": "developit",
        "created_at": "2018-05-17T17:08:35Z",
        "body": "Hi @DataTables! While that's the best way to call methods on a component instance, it seems like what you want to do is re-render in response to new data.  I'd recommend re-invoking `render()` for that:\r\n\r\n```js\r\nlet parent = menu.parent[0];  // I'm assuming this is coming from jQuery or something\r\nlet root = menu[0];\r\n\r\npreact.render(<Menu data={{}} />, parent, root);\r\n\r\nonSocketUpdate = newData => {\r\n  preact.render(<Menu data={newData} />, parent, root);\r\n};\r\n```\r\n\r\nThis will update your tree of components (including `Menu`) in-place.  If you want to Menu to detect when it gets a new `data` value, define a `componentWillReceiveProps()` method on that class:\r\n\r\n```js\r\nclass Menu extends preact.Component {\r\n  componentWillReceiveProps(nextProps) {\r\n    if (nextProps.data !== this.props.data) {\r\n      // got new data\r\n    }\r\n  }\r\n  render(props) {\r\n    // do stuff with props.data here\r\n  }\r\n}\r\n```\r\n\r\n---\r\n\r\nFor what it's worth, it's often easier to \"set up\" things like socket connections and external data sources from within your root component (Menu) or a provider component:\r\n\r\n```js\r\n// wrapper component that maintains the socket connection and renders its child with new data\r\nclass DataProvider {\r\n  componentDidMount() {\r\n    this.connection = new SocketConnection();\r\n    this.connection.ondata = data => {\r\n      this.setState({ data });\r\n    };\r\n  }\r\n  componentWillUnmount() {\r\n    this.connection.close();\r\n  }\r\n  render(props, state) {\r\n    return props.children[0](state.data)\r\n  }\r\n}\r\n\r\n// usage:\r\n\r\npreact.render(\r\n  <DataProvider>\r\n    { data => <Menu data={data} /> }\r\n  </DataProvider>,\r\n  menu.parent[0],\r\n  menu[0]\r\n)\r\n```\r\n\r\nThe above keeps things nicely in the component tree, so your setup code is left clean."
      },
      {
        "user": "DataTables",
        "created_at": "2018-05-18T10:55:22Z",
        "body": "That's super-helpful thanks! The socket is going to be shared, so I'll probably pass it in as a proper and let the component listen to the event it needs to.\r\n\r\nThat said, I'm a little confused about `componentWillReceiveProps()` and the first bit of code you posted:\r\n\r\n```js\r\npreact.render(<Menu data={{}} />, parent, root);\r\n\r\nonSocketUpdate = newData => {\r\n  preact.render(<Menu data={newData} />, parent, root);\r\n};\r\n```\r\n\r\nTo my preact uneducated mind this will create two instances of the `Menu` component (one replacing the other, doing the DOM diffing stuff). But the `componentWillReceiveProps()` code suggests that actually there is something doing magic somewhere to see if there is already an instance, and then reuse that. Is that correct? Does it just use DOM elements to keep track of unique instances?"
      },
      {
        "user": "marvinhagemeister",
        "created_at": "2018-05-20T07:26:44Z",
        "body": "@DataTables yep, preact diffs directly against the DOM and not another vdom-tree like react does."
      },
      {
        "user": "DataTables",
        "created_at": "2018-05-22T09:37:20Z",
        "body": "Super - thanks!"
      }
    ]
  },
  {
    "number": 425,
    "title": "how to get e.keycode or e.which from event",
    "created_at": "2016-12-01T08:48:17Z",
    "closed_at": "2016-12-01T16:23:55Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/preactjs/preact/issues/425",
    "body": "how to get e.keycode or e.which from event (tried using preact | preact + preact-compat)\r\n\r\n```\r\nimport { h, Component } from 'preact';\r\n\r\nexport default class Comp extends Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.handleChange = this.handleChange.bind(this);\r\n\t}\r\n\r\n        handleChange(e) {\r\n\t\tconsole.log(e.which);   // undefined\r\n       }\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<input type=\"text\" onInput={this.handleChange}/>\r\n\t\t);\r\n\t}\r\n}\r\n\r\n/*\r\nevent object contains\r\nEvent {\r\n   bubbles: true\r\n   cancelBubble:false\r\n   cancelable:false\r\n   composed:false\r\n   currentTarget:null\r\n   defaultPrevented:false\r\n   eventPhase:0\r\n   isTrusted:true\r\n   path:Array[13]\r\n   returnValue:true\r\n   srcElement:input\r\n   target:input\r\n   timeStamp:5857.87\r\n   type:\"change\"\r\n   __proto__:Event\r\n}\r\n/*\r\n\r\n\r\n```",
    "comments_url": "https://api.github.com/repos/preactjs/preact/issues/425/comments",
    "author": "aamirshahx",
    "comments": [
      {
        "user": "developit",
        "created_at": "2016-12-01T14:28:58Z",
        "body": "Hi @nopantsmonkey! If you need to respond to keyboard input specifically, you'll want to use the onkey* handlers:\r\n\r\n```js\r\nimport { h, Component } from 'preact';\r\n\r\nexport default class Comp extends Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.handleKeyDown = this.handleKeyDown.bind(this);\r\n\t}\r\n\r\n        handleKeyDown(e) {\r\n\t\tconsole.log(e.which);   // the key code\r\n       }\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<input type=\"text\" onKeyDown={this.handleChange} />\r\n\t\t);\r\n\t}\r\n}\r\n```"
      },
      {
        "user": "developit",
        "created_at": "2016-12-01T14:29:22Z",
        "body": "Let me know if that answers your question and we can close this issue out :)"
      },
      {
        "user": "aamirshahx",
        "created_at": "2016-12-01T16:23:55Z",
        "body": "Thank You. Closing the issue"
      }
    ]
  },
  {
    "number": 389,
    "title": "Inputs pre-filled with old values",
    "created_at": "2016-11-07T12:18:16Z",
    "closed_at": "2016-11-07T14:24:23Z",
    "labels": [
      "question",
      "discussion"
    ],
    "url": "https://github.com/preactjs/preact/issues/389",
    "body": "I'm not sure if this is a bug or my mistake, but I'm getting inputs pre-filled with old information (ex. dashboard input has username pre-filled from a signup page)\r\n\r\nI've added keys to each of the top-level pages:\r\n\r\n```js\r\ndiv.key('Login')(\r\n  input.type('text')()\r\n)\r\n```\r\n\r\n```js\r\ndiv.key('Dashboard')(\r\n  input.type('text')()\r\n)\r\n```\r\n\r\nI am able to fix this by adding keys directly to the inputs, but this makes me worry that other things aren't properly being diffed. Do parent keys apply to children in the tree as well?",
    "comments_url": "https://api.github.com/repos/preactjs/preact/issues/389/comments",
    "author": "matthewmueller",
    "comments": [
      {
        "user": "developit",
        "created_at": "2016-11-07T13:58:32Z",
        "body": "Hmm - I'm thinking you're getting a full diff because the old keyed root gets immediately recycled as the new one. Adding a keyed component to the tree would likely fix that. \n\nAlso the input value issue is because preact doesn't constrain DOM properties it hasn't been used to set - that means adding a value property to the inputs would reset their state when they get recycled across pages. \n"
      },
      {
        "user": "matthewmueller",
        "created_at": "2016-11-07T14:24:16Z",
        "body": "ahh got it! so the proper approach would probably be to always use controlled inputs with a value. \n\npreact's diffing algorithm is still a little bit of dark magic for me, but i'll probably dig in soon. that's a good thing though, it means it's doing it's job well!\n"
      }
    ]
  },
  {
    "number": 268,
    "title": "Question: Rendering (inserting) before instead of appending",
    "created_at": "2016-08-14T16:06:33Z",
    "closed_at": "2016-08-14T17:54:00Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/preactjs/preact/issues/268",
    "body": "Maybe I've missed something. If `render` is the proper way to generate code with Preact, I can't seem to figure out the proper way to generate and insert code out-of-order. What I mean: `render` appends.\n\nFor example:\n\n``` js\nrender(<div>Post 1: Hello World</div>, document.body);\nrender(<div>Post 2: Blah Blah</div>, document.body);\n```\n\nWhich outputs:\n\n``` html\n<div>Post 1: Hello World</div>\n<div>Post 2: Blah Blah</div>\n```\n\nI want this instead:\n\n``` html\n<div>Post 2: Blah Blah</div>\n<div>Post 1: Hello World</div>\n```\n\nOther than the obvious (switching the order), or inserting proxy elements that I target instead, what should I be doing in the 2nd line so it goes before the 1st element; Or specifically, so it inserts at the top of `document.body` instead of the bottom?\n\nThanks.\n",
    "comments_url": "https://api.github.com/repos/preactjs/preact/issues/268/comments",
    "author": "mikekasprzak",
    "comments": [
      {
        "user": "developit",
        "created_at": "2016-08-14T16:55:50Z",
        "body": "@povrazor Hmm - It's fairly odd to invoke render() multiple times for a single use-case.  Is there a reason you want two top-level renders?\n\nNormally your example would be written as a component:\n\n``` js\nclass Example extends Component {\n  state = {\n    posts: [\n      { title: 'Post 1', body: 'Hello World' },\n      { title: 'Post 2', body: 'Blah Blah' }\n    ]\n  };\n  render(props, state) {\n    // we can reverse-sort posts as part of the UI rendering:\n    let posts = state.posts.slice().reverse();\n    return (\n      <div>\n        { posts.map( post => (\n          <div>\n            {post.title}: {post.body}\n          </div>\n        )) }\n      </div>\n    );\n  }\n}\n\n// finally, and generally only in one place per app, we initialize rendering:\nrender(<Example />, document.body);\n```\n\n---\n\nedit: Sorry if I missed the point here, let me know if I answered the wrong question \ud83d\ude1b\n"
      },
      {
        "user": "mikekasprzak",
        "created_at": "2016-08-14T17:18:15Z",
        "body": "What I'm building is a bit twitter-like. It regularly polls a server for posts, and when there's something new, I need to insert the new posts at the top of the list.\n\nI guess I missed the part where render is supposed to be a one-time call. :). Apparently I made a few too many assumptions about how I should be using Preact from the samples.\n"
      },
      {
        "user": "developit",
        "created_at": "2016-08-14T17:46:46Z",
        "body": "You can definitely re-render using `render()`, just you lose a lot of the benefits of component-based design.  It's also mildly confusing because there is `render()` (`import { render } from 'preact'`) and there is also a `render()` method on components.\n\nHere's a little more fully-featured example continuing from above:\n\n``` js\nimport { h, Component, render } from 'preact';\n\nclass App extends Component {\n  state = {\n    posts: []   // we'll keep all received posts in an array\n  };\n\n  // when App is mounted, start polling for updates\n  componentDidMount() {\n    this.getUpdates();\n  }\n\n  // fetches new posts, then calls itself (to poll)\n  getUpdates = () => {\n    fetch('/updates')\n      .then( r => r.json() )\n      .then( newPosts => {\n        // grab existing posts:\n        let { posts } = this.state;\n\n        // append new ones:\n        posts = posts.concat(newPosts);\n\n        // save updated posts to state (this automatically re-renders):\n        this.setState({ posts });\n\n        // wait a sec before polling again:\n        setTimeout(this.getUpdates, 1000);\n      });\n  }\n\n  // render gets called whenever state changes.\n  // The returned JSX gets intelligently diffed against the dom.\n  render(props, state) {\n    // we can reverse-sort posts as part of the UI rendering:\n    let posts = state.posts.slice().reverse();\n    return (\n      <div>\n        { posts.map( post => (\n          <div>\n            {post.title}: {post.body}\n          </div>\n        )) }\n      </div>\n    );\n  }\n}\n\n// render and mount App. This kicks everything off.\nrender(<App />, document.body);\n```\n\nOne thing worth noting:  React/preact/etc actually simplify this kind of UI nicely, but it takes a little while to get used to the different way of doing things.  Whereas with jquery/etc you might have to know \"I want to insert new posts above existing posts\", with this component model, you only have to tell it how to render _all_ posts (whether they are new or old).  This way, determining whether new posts get injected first or last is simply a matter of choosing where to put them in an Array.\n"
      },
      {
        "user": "mikekasprzak",
        "created_at": "2016-08-14T17:53:47Z",
        "body": "Awesome. Thank you so much for the example. I think `state` and `setState` was the other detail I misunderstood that tied this all together (the re-render).\n\nThanks again for your help!\n"
      },
      {
        "user": "developit",
        "created_at": "2016-08-14T17:59:05Z",
        "body": "Happy to help :) Hopefully I'll have some time to put better documentation together - I'd like to do some tutorials and such, perhaps on EggHead.io.\n"
      }
    ]
  },
  {
    "number": 166,
    "title": "Gulp/Browserify integration",
    "created_at": "2016-05-29T18:05:51Z",
    "closed_at": "2016-05-29T20:54:14Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/preactjs/preact/issues/166",
    "body": "Hi,\n\nI love the idea, but I'm not sure how to get it to compile jsx for preact.\n\nThis is my gulp task:\n\n``` javascript\ngulp.task('scripts', function() {\n    var b = browserify({\n            \"entries\": ['app/js/app.js'],\n            transform: [babelify]\n        });\n\n    return b.bundle()\n        .pipe(source('app.min.js'))\n        .pipe(buffer())\n        .pipe(sourcemaps.init({loadMaps: true}))\n            .on('error', gutil.log)\n        .pipe(sourcemaps.write('../maps/js'))\n        .pipe(gulp.dest('dist/js'))\n        .pipe(notify(\"Built JS!\"));\n});\n```\n\nIf I added `reactify` to the transforms, it compiled, but transformed my code into `React.createElement`.\n\nI'm obviously way off course. What's the right way to do this?\n",
    "comments_url": "https://api.github.com/repos/preactjs/preact/issues/166/comments",
    "author": "whatisjasongoldstein",
    "comments": [
      {
        "user": "developit",
        "created_at": "2016-05-29T18:12:06Z",
        "body": "Reactify doesn't seem to provide an option to set the JSX pragma. I would recommend using `babelify` to do your JSX transformation instead, since that's the officially supported method both for react and preact. For Babel 6, you need to install `babel-preset-react`, and then tell the JSX plugin to use `h` for JSX.\n\nExample `.babelrc`:\n\n``` js\n{\n  \"presets\": [\"react\"],\n  \"plugins\": [\n    [\"transform-react-jsx\",{\"pragma\":\"h\"}]\n  ]\n}\n```\n\nLet me know if that makes sense!\n"
      },
      {
        "user": "whatisjasongoldstein",
        "created_at": "2016-05-29T20:54:14Z",
        "body": "Yes, that worked. Thanks!\n"
      },
      {
        "user": "developit",
        "created_at": "2016-05-29T20:54:41Z",
        "body": "Awesome :)\n"
      },
      {
        "user": "foreshadow",
        "created_at": "2017-09-18T09:29:26Z",
        "body": "Hi, i am new to preact.\r\nAfter reading comments above, i still cannot figure out how to compile jsx for preact.\r\nI used to use\r\n```javascript\r\ngulp.src('*.jsx')\r\n    .pipe(react())\r\n    .pipe(gulp.dest('dist/js'))\r\n```\r\nto compile it.\r\nSo what should I replace `react()` with?"
      },
      {
        "user": "bestwestern",
        "created_at": "2018-02-01T18:54:10Z",
        "body": "@whatisjasongoldstein could you please post what you did to make it work? "
      },
      {
        "user": "whatisjasongoldstein",
        "created_at": "2018-02-03T00:16:06Z",
        "body": "I would but unfortunately I'm not even sure which project I was working in when I asked the question. From the comments, I think the `.babelrc` file, which configures babel in the directory, was the only thing I was missing."
      }
    ]
  }
]