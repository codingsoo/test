[
  {
    "number": 60175,
    "title": "[Blazor] Component named \"Text\" can't be used directly inside a code block",
    "created_at": "2025-02-03T15:24:31Z",
    "closed_at": "2025-02-03T15:36:52Z",
    "labels": [
      "question",
      "area-blazor",
      ":heavy_check_mark: Resolution: Answered",
      "Status: Resolved"
    ],
    "url": "https://github.com/dotnet/aspnetcore/issues/60175",
    "body": "### Is there an existing issue for this?\n\n- [x] I have searched the existing issues\n\n### Describe the bug\n\nGreetings!\nWe have a component called Text\nIt's simple.\n\n```\n<span class=\"@CssClass\">\n    @ChildContent\n</span>\n```\n\nWhen we use it, for example, in an `if` block.\n\n```\n@if (!string.IsNullOrWhiteSpace(SubTitle))\n{\n    <Text Size=\"@Sizes.L\">\n        @SubTitle\n    </Text>\n    \n}\n```\n\nWe get a compilation error\n`Error RZ1023 : \"<text>\" and \"</text>\" tags cannot contain attributes`\nBut if we wrap this component, for example, in a div, or use the full class name, everything is ok.\n```\n@if (!string.IsNullOrWhiteSpace(SubTitle))\n{\n    <div>\n        <Text  Size=\"@Sizes.L\">\n            @SubTitle\n        </Text>\n    </div>\n}\n```\n\n### Expected Behavior\n\nInside the `if` block, I use a component called `Text` and everything works correctly\n\n### Steps To Reproduce\n\n_No response_\n\n### Exceptions (if any)\n\n`Error RZ1023 : \"<text>\" and \"</text>\" tags cannot contain attributes`\n\n### .NET Version\n\n9.0.102\n\n### Anything else?\n\n_No response_",
    "comments_url": "https://api.github.com/repos/dotnet/aspnetcore/issues/60175/comments",
    "author": "PeskovV",
    "comments": [
      {
        "user": "javiercn",
        "created_at": "2025-02-03T15:32:13Z",
        "body": "@PeskovV thanks for contacting us.\n\nThis is by design. Text is a reserved keyword in the razor language."
      },
      {
        "user": "PeskovV",
        "created_at": "2025-02-03T15:36:32Z",
        "body": "Thank you very much for your reply"
      }
    ]
  },
  {
    "number": 56708,
    "title": "PageTitle component added in BuildRenderTree do not update the \"title\".",
    "created_at": "2024-07-10T00:04:28Z",
    "closed_at": "2024-07-10T10:59:32Z",
    "labels": [
      "question",
      "area-blazor",
      ":heavy_check_mark: Resolution: Answered",
      "Status: Resolved"
    ],
    "url": "https://github.com/dotnet/aspnetcore/issues/56708",
    "body": "### Is there an existing issue for this?\r\n\r\n- [X] I have searched the existing issues\r\n\r\n### Describe the bug\r\n\r\nThe page title is not updated from a `PageTitle` component, added to a component in `BuildRenderTree`.\r\n\r\n### Expected Behavior\r\n\r\nThe `title` in the `head` should be updated with the text.\r\n\r\n### Steps To Reproduce\r\n\r\n`dotnet new blazor`\r\n\r\nAdd `Render.razor.cs` to the `Pages` directory:\r\n\r\n```\r\nusing System;\r\nusing Microsoft.AspNetCore.Components;\r\nusing Microsoft.AspNetCore.Components.Rendering;\r\nusing Microsoft.AspNetCore.Components.Web;\r\nnamespace Test.Components.Pages;\r\n\r\n[Route(\"/render\")]\r\npublic class Render : ComponentBase {\r\n\r\n    protected override void OnAfterRender(bool firstRender) {\r\n        if (firstRender) {\r\n            StateHasChanged();\r\n        }\r\n    }\r\n\r\n    protected override void BuildRenderTree(RenderTreeBuilder builder) {\r\n        base.BuildRenderTree(builder);\r\n\r\n        // Add PageTitle component\r\n        builder.OpenComponent<PageTitle>(0);\r\n        builder.AddContent(1, \"Test Title Here\");\r\n        builder.CloseComponent();\r\n\r\n        // Add other components or content here\r\n        builder.OpenElement(2, \"div\");\r\n        builder.AddContent(3, \"Content of Component A\");\r\n        builder.CloseElement();\r\n    }\r\n}\r\n```\r\n\r\nAdd the `render` page to the menu in `NavMenu.razor`.\r\n\r\n`dotnet run`\r\n\r\nNotice that the page title is updated on all the other pages, but not the \"/render\" page.\r\nWhen navigating to the `render` page, the `title` is emptied/cleared.\r\n\r\n### Exceptions (if any)\r\n\r\n_No response_\r\n\r\n### .NET Version\r\n\r\n8.0.303\r\n\r\n### Anything else?\r\n\r\n_No response_",
    "comments_url": "https://api.github.com/repos/dotnet/aspnetcore/issues/56708/comments",
    "author": "rpc-scandinavia",
    "comments": [
      {
        "user": "javiercn",
        "created_at": "2024-07-10T08:07:15Z",
        "body": "@rpc-scandinavia thanks for contacting us.\r\n\r\nThere's no difference between compiled razor code and handcrafted rendertrees. We suggest you look at the generated razor code for another component where it works to spot the differences between the generated code and your code."
      },
      {
        "user": "rpc-scandinavia",
        "created_at": "2024-07-10T10:57:30Z",
        "body": "@javiercn, I did not think of looking in the generated file.\r\nThis works:\r\n\r\n```\r\n// Add PageTitle component\r\nbuilder.OpenComponent<PageTitle>(0);\r\nbuilder.AddAttribute(1, \"ChildContent\", (RenderFragment)((builder2) => {\r\n    builder2.AddContent(2, \"Test Title Here\");\r\n}));\r\nbuilder.CloseComponent();\r\n```\r\n\r\nThis don't work:\r\n\r\n```\r\n// Add PageTitle component\r\nbuilder.OpenComponent<PageTitle>(0);\r\nbuilder.AddContent(1, \"Test Title Here\");\r\nbuilder.CloseComponent();\r\n```\r\n\r\nNormally you use the component like this: `<PageTitle>Test Title Here</PageTitle>`, so I assumed that the title text should be added with `AddContent`.\r\n\r\nThank you for the hint."
      }
    ]
  },
  {
    "number": 55997,
    "title": "Better UX - show \"loading\" (anything) while app is starting up the .NET WebAssembly runtime (for AutoRender, prerender false) ",
    "created_at": "2024-05-31T13:57:54Z",
    "closed_at": "2024-06-01T11:49:41Z",
    "labels": [
      "question",
      "area-blazor",
      ":heavy_check_mark: Resolution: Answered",
      "Status: Resolved"
    ],
    "url": "https://github.com/dotnet/aspnetcore/issues/55997",
    "body": "### Is there an existing issue for this?\n\n- [X] I have searched the existing issues\n\n### Is your feature request related to a problem? Please describe the problem.\n\nIs there any way how to show some animation or anything while cached WASM is starting up? I found solution to force downloading resources every time so it can be render by server first but it costs resources of course.\n\n### Describe the solution you'd like\n\nI would like to have option to display loading animation on component level while WASMis starting up.\n\n### Additional context\n\n_No response_",
    "comments_url": "https://api.github.com/repos/dotnet/aspnetcore/issues/55997/comments",
    "author": "Laftek",
    "comments": [
      {
        "user": "javiercn",
        "created_at": "2024-05-31T17:49:20Z",
        "body": "@Laftek thanks for contacting us.\r\n\r\nYou should already be able to do this with CSS by wrapping your webassembly component in a `div` and having an animation run on the div when the element is empty if you aren't prerendering.\r\n\r\nIf you are prerendering, you can render different content during prerendering.\r\n\r\nIf you want to do this completely in Blazor, create a component wrapper and have that component render your component."
      },
      {
        "user": "Laftek",
        "created_at": "2024-05-31T18:01:32Z",
        "body": "Thank you @javiercn for suggestions. What can I use as reference element for if statement? Is there any API for wasm to be \u201cloaded\u201d?\r\n\r\nAlso could you point me to some resources regarding prerendering different content? It sounds interesting. Is there out of box blazor solution or you meant some custom javascript script?"
      },
      {
        "user": "javiercn",
        "created_at": "2024-05-31T19:28:15Z",
        "body": "@Laftek just HTML and CSS\r\n```\r\n<div class=\"my-class\"></div>\r\n\r\n<style>\r\n.my-class:not(:has(*)) {\r\n   background-image: url(\"data:....\");\r\n}\r\n</style>\r\n```\r\n\r\nThe moment that the wasm component renders inside the div the styles stop being applicable."
      },
      {
        "user": "Laftek",
        "created_at": "2024-06-01T11:49:42Z",
        "body": "Thanks @javiercn . Works like a charm!"
      }
    ]
  },
  {
    "number": 55273,
    "title": "Blazor.registerCustomEventType doesn't work with static SSR",
    "created_at": "2024-04-22T12:01:42Z",
    "closed_at": "2024-04-22T16:45:50Z",
    "labels": [
      "question",
      "area-blazor",
      ":heavy_check_mark: Resolution: Answered",
      "Status: Resolved"
    ],
    "url": "https://github.com/dotnet/aspnetcore/issues/55273",
    "body": "### Is there an existing issue for this?\n\n- [X] I have searched the existing issues\n\n### Describe the bug\n\nBlazor.registerCustomEventType doesn't look working with static SSR\n\n### Expected Behavior\n\nIt is expected that Blazor.addEventListener handler is called after as a custom event was registered with Blazor.registerCustomEventType.\n\n### Steps To Reproduce\n\n```\r\nfunction FireCustomEvent(elem) { \r\n    const event = new CustomEvent(\"customevent\", { bubbles: true, detail: elem });\r\n    elem.dispatchEvent(event);\r\n}\r\n\r\nBlazor.registerCustomEventType('customevent', {\r\n    browserEventName: 'customevent',\r\n    createEventArgs: event => {\r\n        return { 'prop1': 1 };\r\n    }\r\n});\r\n\r\n// it doesn't work\r\nBlazor.addEventListener('customevent', function () {\r\n    console.log('???? customevent event handled with Blazor ????');\r\n});\r\n```\n\n### Exceptions (if any)\n\n_No response_\n\n### .NET Version\n\n8.0.100\n\n### Anything else?\n\n_No response_",
    "comments_url": "https://api.github.com/repos/dotnet/aspnetcore/issues/55273/comments",
    "author": "sgarnovsky",
    "comments": [
      {
        "user": "SteveSandersonMS",
        "created_at": "2024-04-22T16:45:50Z",
        "body": "It looks like you're triggering a DOM event by calling `elem.dispatchEvent(event)`\r\n\r\nWith that being the case, you would receive the event notification by using the DOM event listener API, `elem.addEventListener(...)`.\r\n\r\nYou cannot use `Blazor.addEventListener` for that because `Blazor.addEventListener` is for listening to Blazor's events, which are not DOM events. So simply change to use `elem.addEventListener(...)` and it should work.\r\n\r\nThe use of these DOM events is completely independent of Blazor."
      },
      {
        "user": "sgarnovsky",
        "created_at": "2024-04-22T19:35:47Z",
        "body": "> You cannot use `Blazor.addEventListener` for that because `Blazor.addEventListener` is for listening to Blazor's events, which are not DOM events. So simply change to use `elem.addEventListener(...)` and it should work.\r\n> \r\n> The use of these DOM events is completely independent of Blazor.\r\n\r\nYes, sure, it works with elem.addEventListener fine.\r\n\r\nMaybe, I missed the main point to ask if Blazor.registerCustomEventType can be used with Blazor static SSR. \r\nReally, I didn't find a sample how to dispatch a custom Blazor event with static SSR.\r\n\r\n\r\n"
      },
      {
        "user": "SteveSandersonMS",
        "created_at": "2024-04-22T19:40:45Z",
        "body": "> Really, I didn't find a sample how to dispatch a custom Blazor event with static SSR.\r\n\r\nStatic SSR produces HTML from your server only, so the only event handlers would be those written in JavaScript. If you want to handle events with .NET code, you'll need to use an interactive rendermode. That's the key difference between static and interactive rendering."
      },
      {
        "user": "sgarnovsky",
        "created_at": "2024-04-22T19:58:12Z",
        "body": "> Static SSR produces HTML from your server only, so the only event handlers would be those written in JavaScript. If you want to handle events with .NET code, you'll need to use an interactive rendermode. That's the key difference between static and interactive rendering.\r\n\r\nThank you for the confirmation. \r\nIt means the Blazor static SSR doesn't work with Blazor.registerCustomEventType. \r\nI.e. there is no way to dispatch a registered custom blazor event in this Blazor app mode."
      },
      {
        "user": "SteveSandersonMS",
        "created_at": "2024-04-23T08:36:20Z",
        "body": "> I.e. there is no way to dispatch a registered custom blazor event in this Blazor app mode.\r\n\r\nRight, because there's nothing to dispatch it to. Once the page has finished rendering statically, your code has finished running."
      },
      {
        "user": "sgarnovsky",
        "created_at": "2024-04-23T19:42:19Z",
        "body": "> Once the page has finished rendering statically, your code has finished running.\r\n\r\nAt some point, it is not a quite right statement. \r\nBlazor SSR renders the static html content, but a client-side code continues running and can do a lot of things.\r\nFor example, Blazor has a client-side \"enhancedload\" event dispatching and I've just assumed I could create a custom event at the Blazor level too instead of using a browser document level custom event."
      }
    ]
  },
  {
    "number": 54263,
    "title": "Blazor Component (using RenderMode Interactive Server) - Incorrect Behavior on Navigating between pages, Component is not re-created",
    "created_at": "2024-02-28T20:01:31Z",
    "closed_at": "2024-02-29T17:44:51Z",
    "labels": [
      "question",
      "area-blazor",
      ":heavy_check_mark: Resolution: Answered",
      "Status: Resolved"
    ],
    "url": "https://github.com/dotnet/aspnetcore/issues/54263",
    "body": "### Is there an existing issue for this?\r\n\r\n- [X] I have searched the existing issues\r\n\r\n### Describe the bug\r\n\r\nI have 2 pages, Page1, Page2. Both pages use the same Counter component with render mode: interactive server that is specified on the Counter components. \r\n\r\n`<Counter @rendermode=\"InteractiveServer\"></Counter>`\r\n\r\nNOTE: The Counter component inside its mark up does not specify render mode.\r\nEach page also contains a navigation link to the other page.\r\n\r\nWhen a user is on Page1 and increments the counter and then navigates (using anchor link) to Page 2 (that has also a Counter) the count is retained from Page1. Then, incrementing Counter on Page2 continues the count. When user navigates back Page1 (using anchor link) the count is now the sum of counts from Page1 and Page2.\r\n\r\n### Expected Behavior\r\n\r\nI expect the component to be re-created and its state reset once a user navigates to another page from current page.\r\nThat does not happen. The counter component appears to live (and retain its state) across page navigations using an anchor tag.\r\n\r\n_If this is the correct behavior for an interactive server side component using web socket connection in an SSR page then how can we re-use components across pages without retaining component state?_\r\n\r\n### Steps To Reproduce\r\n\r\nCreate a sample SSR blazor app, select interactivity per component. \r\nCreate 2 pages.\r\nPlace Counter component on both pages.\r\nNOTE: Remove from the Counter component the \"@rendermode InteractiveServer\", instead place render modes explicitly where you use the counter on each page as:\r\n\r\n`<Counter @rendermode=\"InteractiveServer\"></Counter>`\r\n\r\nAdd this mark up to navigate between the pages:\r\n\r\n`<a href=\"/Page2\">Go to page 2</a>`\r\n\r\n`<a href=\"/Page1\">Go to page 1</a>`\r\n\r\nGo to page 1, increment counter, use link to go to page 2 (observe the count is from page 1). Increment counter again and go back to page 1 (observe the count continues from page 2).\r\n\r\n### Exceptions (if any)\r\n\r\n_No response_\r\n\r\n### .NET Version\r\n\r\n.net 8 Blazor SSR Interactive Server\r\n\r\n### Anything else?\r\n\r\n_No response_",
    "comments_url": "https://api.github.com/repos/dotnet/aspnetcore/issues/54263/comments",
    "author": "htmlsplash",
    "comments": [
      {
        "user": "htmlsplash",
        "created_at": "2024-02-28T22:29:21Z",
        "body": "UPDATE: Interesting observation\r\n\r\nIf I inject into the SSR Page1 (or Page2) current user accessed from current Http context (which changes between page requests by me logging-out from User1 and logging-in as User2 before going from Page1 to Page2) and pass that to the Counter component as a parameter, that triggers/forces the component to be re-created and the component state is reset.\r\n\r\nThis behavior is opposite to the re-use of the component across pages behavior reported above."
      },
      {
        "user": "mkArtakMSFT",
        "created_at": "2024-02-29T17:44:51Z",
        "body": "Thanks for contacting us. This behavior is by design and it's done to optimize DOM manipulations. The framework tries to retain as much of the content in the page as possible, so that only minimal changes are applied. In your case, you don't want this behavior, and you can control that by applying the `@key` directive to the `Counter` components on each page, specifying different values, so that the DOM Merging algorithm doesn't think that they're the same component to be preserved."
      },
      {
        "user": "htmlsplash",
        "created_at": "2024-02-29T19:09:39Z",
        "body": "Thanks, that resolved the issue. I don't want to be a party pooper but I think this is a dangerous default. \r\n\r\nImagine a page (Page1) with many components and then another unrelated page (Page10) has also many components but one of these components is the same as on Page1. This will result in the component (and its state) to appear on Page10 (from Page1). \r\nTo make matters worse, consider an example of user page navigation that is considered a normal flow: \r\n\r\nPage1, Page2, Page3. \r\n\r\nBut in a rare case when the user performs some action that allows them to navigate like this: \r\n\r\nPage1, Page10, Page2, Page3.\r\n\r\nNow you have this rare bug surface itself on the site because when going from Page1 to Page10, or from Page10 to Page1 will share the same component with its state.\r\n\r\nWith the workaround solution (in a framework were component re-use is common) and to avoid this default sharing behavior is to specify a key on every component placed on page at all times.  Otherwise, inadvertently, you might end up with undesired behavior. I wonder if could better then this?\r\n\r\n"
      }
    ]
  },
  {
    "number": 53040,
    "title": " NavigationException when attempting to navigate after submitting a form #49143  still continue",
    "created_at": "2023-12-28T09:02:36Z",
    "closed_at": "2024-01-03T05:10:53Z",
    "labels": [
      "question",
      "area-blazor",
      ":heavy_check_mark: Resolution: Answered",
      "Status: Resolved"
    ],
    "url": "https://github.com/dotnet/aspnetcore/issues/53040",
    "body": "### Is there an existing issue for this?\n\n- [X] I have searched the existing issues\n\n### Describe the bug\n\nNavigationException when attempting to navigate after submitting a form\r\nSame at #49143\n\n### Expected Behavior\n\n_No response_\n\n### Steps To Reproduce\n\n_No response_\n\n### Exceptions (if any)\n\n_No response_\n\n### .NET Version\n\n_No response_\n\n### Anything else?\n\n_No response_",
    "comments_url": "https://api.github.com/repos/dotnet/aspnetcore/issues/53040/comments",
    "author": "SenerDemiral",
    "comments": [
      {
        "user": "SenerDemiral",
        "created_at": "2023-12-31T17:52:23Z",
        "body": "It is working on without debugging mode."
      },
      {
        "user": "samusaran",
        "created_at": "2024-01-02T10:30:05Z",
        "body": "I have the same issue but without any form.\r\nI'm just navigating to a fake route (that I handle with a catch-all) inside `OnInitializedAsync()`\r\n\r\nRunning without a debugger solves the issue.\r\n\r\nThe exception happens here:\r\n```\r\n    protected override void NavigateToCore(string uri, NavigationOptions options)\r\n    {\r\n        Log.RequestingNavigation(_logger, uri, options);\r\n\r\n        if (_jsRuntime == null)\r\n        {\r\n            var absoluteUriString = ToAbsoluteUri(uri).ToString();\r\n            throw new NavigationException(absoluteUriString);\r\n        }\r\n```\r\n\r\nIt seems that `_jsRuntime` is null when a debugger is attached."
      },
      {
        "user": "javiercn",
        "created_at": "2024-01-02T11:00:55Z",
        "body": "@SenerDemiral thanks for contacting us.\r\n\r\nThat's expected. You have set your debugger to break on first chance exceptions. The exception is thrown and caught by the framework, and is the mechanism the server uses to transform the navigation into a redirect."
      },
      {
        "user": "SenerDemiral",
        "created_at": "2024-01-03T05:10:53Z",
        "body": "Thank you."
      },
      {
        "user": "samusaran",
        "created_at": "2024-01-03T08:25:48Z",
        "body": "I don't think this is closed. There are clearly some regressions/changes to how nav manager works.\r\n\r\nI have an entire set of pages that just don't work on NET 8 due to infinite redirects.\r\n\r\nShould I create a new ticket then?\r\n\r\nThank you"
      }
    ]
  },
  {
    "number": 52708,
    "title": "Catch-all route at the root level doesn't work any more in .NET 8",
    "created_at": "2023-12-10T14:51:53Z",
    "closed_at": "2023-12-11T13:36:05Z",
    "labels": [
      "question",
      "area-blazor",
      ":heavy_check_mark: Resolution: Answered",
      "Status: Resolved"
    ],
    "url": "https://github.com/dotnet/aspnetcore/issues/52708",
    "body": "### Is there an existing issue for this?\n\n- [X] I have searched the existing issues\n\n### Describe the bug\n\nI have an application with very few pages, where one is mainly active and catches all the remaining URLs as a part of its logic. In .NET 7, It was enough to annotate that page with `@page \"/{*pageRoute}\"` and declare the corresponding parameter `[Parameter] public string? PageRoute { get; set; }`. But it stopped working when I upgraded to .NET 8 (Blazor United) and started showing a white screen and an exception in the browser's console.\n\n### Expected Behavior\n\nIt should catch the rest of the URLs that didn't match with other routes .\n\n### Steps To Reproduce\n\n1. Create a net .NET 8 Blazor United app with interactive web assembly with pre-rendering turned OFF.\r\n2. Delete pages but the Index.\r\n3. Annotate the Index page with `@page \"/{*pageRoute}\"` and declare a parameter for it `[Parameter] public string? PageRoute { get; set; }`\r\n4. Run the app; you should see a white screen with an error in the console.\n\n### Exceptions (if any)\n\n```\r\nblazor.web.js:1  Error: One or more errors occurred. ('<' is an invalid start of a value. LineNumber: 0 | BytePositionInLine: 0.)\r\n    at Jn (marshal-to-js.ts:349:18)\r\n    at Ul (marshal-to-js.ts:306:28)\r\n    at 00b1e8b6:0x1faca\r\n    at 00b1e8b6:0x1bf8b\r\n    at 00b1e8b6:0xf172\r\n    at 00b1e8b6:0x1e7e4\r\n    at 00b1e8b6:0x1efda\r\n    at 00b1e8b6:0xcfec\r\n    at 00b1e8b6:0x440ad\r\n    at e.<computed> (cwraps.ts:338:24)\r\ncallEntryPoint @ blazor.web.js:1\r\n```\n\n### .NET Version\n\n8.0.100\n\n### Anything else?\n\nIt works if the catch-all wildcard is not placed at the root level but after a URI segment.\r\nWe need a way to allow routes without explicitly listing them in razor pages.",
    "comments_url": "https://api.github.com/repos/dotnet/aspnetcore/issues/52708/comments",
    "author": "gdar91",
    "comments": [
      {
        "user": "javiercn",
        "created_at": "2023-12-11T13:28:07Z",
        "body": "@gdar91 thanks for contacting us.\r\n\r\nIn .NET 8.0 routing is integrated with ASP.NET Core routing, what's happening is that your route is \"too general\" and is intercepting requests for files. You need to add `:nonfile` to the route to avoid capturing paths with an extension."
      },
      {
        "user": "gdar91",
        "created_at": "2023-12-11T13:36:06Z",
        "body": "> @gdar91 thanks for contacting us.\r\n> \r\n> In .NET 8.0 routing is integrated with ASP.NET Core routing, what's happening is that your route is \"too general\" and is intercepting requests for files. You need to add `:nonfile` to the route to avoid capturing paths with an extension.\r\n\r\nThank you, it worked with `:nonfile`. I changed the attribute to this: `@page \"/{*pageRoute:nonfile}\"`."
      }
    ]
  },
  {
    "number": 48748,
    "title": "Blazor WebAssembly not caching in browser",
    "created_at": "2023-06-13T06:09:15Z",
    "closed_at": "2023-06-13T10:30:43Z",
    "labels": [
      "question",
      "area-blazor",
      ":heavy_check_mark: Resolution: Answered",
      "Status: Resolved"
    ],
    "url": "https://github.com/dotnet/aspnetcore/issues/48748",
    "body": "### Is there an existing issue for this?\n\n- [X] I have searched the existing issues\n\n### Describe the bug\n\nBlazor WebAssembly is caching libraries to browser's Cache Storage only on localhost access.\r\n\r\nWhen i was starting to develop WASM project, i've inspected browser cache to make sure that dotnet and other libraries are cached and next startups are faster (sha checks, returned statuses 204, cache is used). This works well. But after publishing the project to IIS hosting and accessing the page over the internet, libraries are never stored in browser cache. So effectively, libraries are always downloaded. Running browser on the same machine where the IIS is located works and libraries are cached (same as running browser directly from VS in development). I've tried this on default projects in .net6 and .net7 and the behaviour is the same.\r\n\r\nI must be missing something basic here...\n\n### Expected Behavior\n\nLibraries are cached to browser regardless if the page is accessed localy or remotely over the internet.\n\n### Steps To Reproduce\n\nIn VS:\r\n\r\n- create new \"Blazor WebAssembly App\"\r\n- check off \"Configure for HTTPS\"\r\n- publish (i'm using just the directory publish with manual copy of files to created web page on iis)\n\n### Exceptions (if any)\n\n_No response_\n\n### .NET Version\n\n7.0.302\n\n### Anything else?\n\n_No response_",
    "comments_url": "https://api.github.com/repos/dotnet/aspnetcore/issues/48748/comments",
    "author": "ns6000",
    "comments": [
      {
        "user": "javiercn",
        "created_at": "2023-06-13T10:18:52Z",
        "body": "@ns6000 thanks for contacting us.\r\n\r\nCaching depends on the caching APIs that are only available in secure context. We don't do caching over HTTP because the APIs are not available."
      },
      {
        "user": "ns6000",
        "created_at": "2023-06-13T10:30:43Z",
        "body": "Thank you, understood. It will be accessible over HTTPS only in the real world production deployment so it's not a problem.\r\n\r\nJust a humble suggestion, I think this could be mentioned somewhere in the docs (if it's not already and I missed it)."
      }
    ]
  },
  {
    "number": 46044,
    "title": "Unexpected parent component rerendering",
    "created_at": "2023-01-11T22:54:01Z",
    "closed_at": "2023-01-12T14:53:20Z",
    "labels": [
      "question",
      "area-blazor",
      ":heavy_check_mark: Resolution: Answered",
      "Status: Resolved"
    ],
    "url": "https://github.com/dotnet/aspnetcore/issues/46044",
    "body": "### Is there an existing issue for this?\r\n\r\n- [X] I have searched the existing issues\r\n\r\n### Describe the bug\r\n\r\nWhile playing around with some code I noticed a behaviour I wasn't expecting. Here is the code in question:\r\n\r\n### Parent Component\r\n\r\n```razor\r\n@page \"/\"\r\n\r\n<button @onclick=\"ShowPrompt\">Click me</button>\r\n\r\n@if (_showPrompt)\r\n{\r\n    <SurveyPrompt Title=\"Testing\" OnClose=\"Close\" />\r\n}\r\n\r\n@code {\r\n    private bool _showPrompt;\r\n\r\n    private void ShowPrompt() => _showPrompt = true;\r\n    private void Close() => _showPrompt = false;\r\n}\r\n```\r\n\r\n### Child Component\r\n\r\n```razor\r\n<div class=\"alert alert-secondary mt-4\">\r\n    <strong>@Title</strong>\r\n    <button @onclick=\"OnClose\">Close</button>\r\n</div>\r\n\r\n@code {\r\n    [Parameter] public string? Title { get; set; }\r\n    [Parameter] public Action OnClose { get; set; }\r\n}\r\n```\r\n\r\nWhen clicking the Close button in the child component, the child component causes a re-render in the parent component and is hidden. This is unexpected as that should only occur when either the child components parameter type is `EventCallback` or the handler in the parent calls `StateHasChanged`. \r\n\r\nChanging the child components code to this results in the expected behaviour and the child component isn't hidden.\r\n\r\n```razor\r\n<div class=\"alert alert-secondary mt-4\">\r\n    <strong>@Title</strong>\r\n    <button @onclick=\"() => OnClose()\">Close</button>\r\n</div>\r\n\r\n@code {\r\n    [Parameter] public string? Title { get; set; }\r\n    [Parameter] public Action OnClose { get; set; }\r\n}\r\n```\r\n\r\nI don't know if this is a bug or not but it's not what I was expecting and I can't work it out. \r\n\r\n### Expected Behavior\r\n\r\nChild components shouldn't cause re-renders of parents without defining parameters of type `EventCallback` or parent handlers calling `StateHasChanged`\r\n\r\n### Steps To Reproduce\r\n\r\nUpdate the `Index` component in a new Blazor project to the following code:\r\n\r\n```razor\r\n@page \"/\"\r\n\r\n<button @onclick=\"ShowPrompt\">Click me</button>\r\n\r\n@if (_showPrompt)\r\n{\r\n    <SurveyPrompt Title=\"Testing\" OnClose=\"Close\" />\r\n}\r\n\r\n@code {\r\n    private bool _showPrompt;\r\n\r\n    private void ShowPrompt() => _showPrompt = true;\r\n    private void Close() => _showPrompt = false;\r\n}\r\n```\r\n\r\nUpdate the code for the `SurveyPrompt` component to the following:\r\n\r\n```razor\r\n<div class=\"alert alert-secondary mt-4\">\r\n    <strong>@Title</strong>\r\n    <button @onclick=\"OnClose\">Close</button>\r\n</div>\r\n\r\n@code {\r\n    [Parameter] public string? Title { get; set; }\r\n    [Parameter] public Action OnClose { get; set; }\r\n}\r\n```\r\n\r\nClicking the button in the index component shows the survey prompt. Clicking the Close button in the SurveyPrompt hides the Survey prompt. However, no StateHasChanged call has been issues.\r\n\r\n### Exceptions (if any)\r\n\r\n_No response_\r\n\r\n### .NET Version\r\n\r\n7.0.101\r\n\r\n### Anything else?\r\n",
    "comments_url": "https://api.github.com/repos/dotnet/aspnetcore/issues/46044/comments",
    "author": "chrissainty",
    "comments": [
      {
        "user": "javiercn",
        "created_at": "2023-01-12T13:55:57Z",
        "body": "Thanks for bringing this up @chrissainty.\r\n\r\nThis is an existing and rather obscure Blazor behavior. We try really hard to detect when the target of a delegate is a component that implements IHandleEvent.\r\n\r\nWhat's happening is that the delegate you pass to `OnClose` is being pass-through to an event handler `@onclick` in the component.\r\n\r\nAs a result, we are constructing an EventCallback with `OnClose` as the target delegate. Since the event callback detects that `Delegate.Target` implements `IHandleEvent`, it routes the event through it, and since the parent component extends ComponentBase it triggers a render on the parent.\r\n\r\nThis is by design as we do not have a way to know, and the recommendation in this scenario is to do what you did to achieve your expected behavior, which is to call the parameter within a lambda.\r\n\r\nIn general, this is not a problem because most people desire the parent component to re-render (which is why it is the default behavior) and why in most cases the event is raised inside another method on the child component instead of being passed through directly.\r\n\r\nI hope this helps clarify things.\r\n\r\n"
      },
      {
        "user": "chrissainty",
        "created_at": "2023-01-12T14:53:20Z",
        "body": "This makes sense. Thanks for the explaination @javiercn \ud83d\udc4d "
      }
    ]
  },
  {
    "number": 45607,
    "title": "Blazor Server - Html Source Blazor Info",
    "created_at": "2022-12-15T12:51:13Z",
    "closed_at": "2022-12-15T16:59:26Z",
    "labels": [
      "question",
      "area-blazor",
      ":heavy_check_mark: Resolution: Answered",
      "Status: Resolved",
      "feature-blazor-server"
    ],
    "url": "https://github.com/dotnet/aspnetcore/issues/45607",
    "body": "I am using Blazor Server. It shows the following information in each html output. Can I turn this display of information on or off?\r\n\r\n`<!--Blazor:{\"sequence\":1,\"type\":\"server\",\"prerenderId\":\"27a768f8d34b40efaa24370d7e4146ad\",\"descriptor\":\"CfDJ8A5VzMEeZxVNtV1i8tox076ysU67NXXehnicXlH5TEeVv0iEJP32/AiNvDJqOgroXtAxzk1Rju1ub0J3ovn68kgyB8rxLXQ\\u002BO4uOqAcLYKRZGC30V7okM9Ty3FYGIcYsX3gXhCCdzSwd6WA8RO7RN/d4\\u002B1rGF9dxJeyLIsn5o8NB46ZXHoD3EQJjUiXW0BdGl9zyTFhqeUaBV12mgOvill72AbP\\u002BJBzMy1GlET/bW4qVYDJT3Xobok/gXlgNP3SsKo/MD2YxtArQJx/dQjab8T6FEaw1Ap2sE6nvgk3nQ24bberWWsDXHRmyHNzKtfa2l0YcYUYdoNRdEZACpEOarPgGJC81cdBE3ioENQhddnf\\u002BseH4XTAcvrdT58gXgigPCISeB9pKqIMBrYvNyV\\u002Bi8qUd82LhhKdjpTyf51fKXAZm\"}-->`",
    "comments_url": "https://api.github.com/repos/dotnet/aspnetcore/issues/45607/comments",
    "author": "Taiizor",
    "comments": [
      {
        "user": "javiercn",
        "created_at": "2022-12-15T14:04:54Z",
        "body": "@Taiizor thanks for contacting us.\r\n\r\nThat's the marker we use to identify where we need to render the components within the page, without it, we can't render a Blazor component on to the page."
      },
      {
        "user": "Taiizor",
        "created_at": "2022-12-15T16:29:37Z",
        "body": "> @Taiizor thanks for contacting us.\r\n> \r\n> That's the marker we use to identify where we need to render the components within the page, without it, we can't render a Blazor component on to the page.\r\n\r\nYes, I know that, but I don't want it to appear only in the source code (html source). Is this possible?"
      },
      {
        "user": "javiercn",
        "created_at": "2022-12-15T16:55:26Z",
        "body": "@Taiizor no, it is not possible."
      },
      {
        "user": "Taiizor",
        "created_at": "2022-12-15T16:59:23Z",
        "body": "> @Taiizor no, it is not possible.\r\n\r\nOh, got it. thx for everything.."
      }
    ]
  },
  {
    "number": 42892,
    "title": "[Blazor] Question: can i call .net static methods in afterStarted of JavaScript initializers?",
    "created_at": "2022-07-25T11:21:19Z",
    "closed_at": "2022-07-25T15:15:55Z",
    "labels": [
      "question",
      "area-blazor",
      ":heavy_check_mark: Resolution: Answered",
      "Status: Resolved",
      "feature-blazor-jsinterop"
    ],
    "url": "https://github.com/dotnet/aspnetcore/issues/42892",
    "body": "### Is there an existing issue for this?\n\n- [X] I have searched the existing issues\n\n### Describe the bug\n\nThe input parameter `blazor` of afterStarted does not have the `invokeMethodAsync` method, which I want to call the static method of layout.\r\nFor example, I want to read timezoneOffset from the browser (`return new Date().getTimezoneOffset();`) and then call the. net static method to assign a value to a global static variable (TimezoneOffset). Other components can then read this variable directly.\n\n### Expected Behavior\n\n_No response_\n\n### Steps To Reproduce\n\n_No response_\n\n### Exceptions (if any)\n\n_No response_\n\n### .NET Version\n\n6.0.400-preview.22330.6\n\n### Anything else?\n\n_No response_",
    "comments_url": "https://api.github.com/repos/dotnet/aspnetcore/issues/42892/comments",
    "author": "capdiem",
    "comments": [
      {
        "user": "javiercn",
        "created_at": "2022-07-25T13:34:25Z",
        "body": "@capdiem thanks for contacting us.\r\n\r\nThe Blazor parameter passed to `onAfterStarted` is the Blazor object itself, you need to use `DotNet` which is exposed as a global variable on the window."
      },
      {
        "user": "capdiem",
        "created_at": "2022-07-25T15:15:55Z",
        "body": "Thank you so much. I forgot this."
      }
    ]
  },
  {
    "number": 42493,
    "title": "How to set SignInScheme in an application using Microsoft.AspNetCore.Authentication.OpenIdConnect on multiple IDPs",
    "created_at": "2022-06-29T22:02:55Z",
    "closed_at": "2022-06-30T17:38:34Z",
    "labels": [
      "question",
      "area-auth",
      ":heavy_check_mark: Resolution: Answered",
      "Status: Resolved"
    ],
    "url": "https://github.com/dotnet/aspnetcore/issues/42493",
    "body": "My application uses Microsoft.AspNetCore.Authentication.OpenIdConnect  (version 6.0.6) to work with multiple Identity providers. It is getting \"System.InvalidOperationException: The SignInScheme for a remote authentication handler cannot be set to itself.\". How should the SignInScheme be properly set in this situation to avoid the error? (not setting SignInScheme in my code gives me the same error)\r\n\r\n```\r\n            foreach (var section in _configuration.GetChildren())\r\n            {\r\n                var options = new MicrosoftIdentityOptions();\r\n                section.Bind(options);\r\n\r\n                if (options.ClientId.IsNullOrEmpty())\r\n                    continue; // Skip sections that are not for OpenID Connect.\r\n\r\n                var scheme = section.Key;\r\n\r\n                services.AddAuthentication(scheme)\r\n                        .AddOpenIdConnect(scheme, openIdConnectOptions =>\r\n                        {\r\n                            openIdConnectOptions.ClientId = options.ClientId;\r\n                            openIdConnectOptions.ClientSecret = options.ClientSecret;\r\n                            openIdConnectOptions.Authority = options.Authority;\r\n                            openIdConnectOptions.ResponseType = OpenIdConnectResponseType.Code;\r\n                            openIdConnectOptions.GetClaimsFromUserInfoEndpoint = true;\r\n                            openIdConnectOptions.SignInScheme = scheme;\r\n                        });\r\n            }\r\n```\r\n\r\n```\r\n      An unhandled exception has occurred while executing the request.\r\n      System.InvalidOperationException: The SignInScheme for a remote authentication handler cannot be set to itself.  If it was not explicitly set, the AuthenticationOptions.DefaultSignInScheme or DefaultScheme is used.\r\n         at Microsoft.AspNetCore.Authentication.RemoteAuthenticationOptions.Validate(String scheme)\r\n         at Microsoft.AspNetCore.Authentication.AuthenticationBuilder.<>c__DisplayClass4_0`2.<AddSchemeHelper>b__1(TOptions o)\r\n         at Microsoft.Extensions.Options.ValidateOptions`1.Validate(String name, TOptions options)\r\n         at Microsoft.Extensions.Options.OptionsFactory`1.Create(String name)\r\n         at Microsoft.Extensions.Options.OptionsMonitor`1.<>c__DisplayClass10_0.<Get>b__0()\r\n         at System.Lazy`1.ViaFactory(LazyThreadSafetyMode mode)\r\n         at System.Lazy`1.ExecutionAndPublication(LazyHelper executionAndPublication, Boolean useDefaultConstructor)\r\n         at System.Lazy`1.CreateValue()\r\n         at Microsoft.AspNetCore.Authentication.AuthenticationHandler`1.InitializeAsync(AuthenticationScheme scheme, HttpContext context)\r\n         at Microsoft.AspNetCore.Authentication.AuthenticationHandlerProvider.GetHandlerAsync(HttpContext context, String authenticationScheme)\r\n         at Microsoft.AspNetCore.Authentication.AuthenticationMiddleware.Invoke(HttpContext context)\r\n```",
    "comments_url": "https://api.github.com/repos/dotnet/aspnetcore/issues/42493/comments",
    "author": "WenningQiu",
    "comments": [
      {
        "user": "HaoK",
        "created_at": "2022-06-29T23:10:14Z",
        "body": "SignInScheme needs to be set to a cookie authentication if you are setting this property.  You don't need to set this property if you don't have any cookies you want to persist the claims identity to.  "
      },
      {
        "user": "HaoK",
        "created_at": "2022-06-29T23:12:03Z",
        "body": "What are you trying to do in terms of your auth setup, ideally for SignInScheme, you would configure all of your remoteAuthentication schemes to have the same SignInScheme which would be a cookie, so your app would just check if the cookie exists, if so, the app is authenticated, and the cookie is just the persisted state/claims from whichever remote OIDC the user authenticated with.  Does that make sense?"
      },
      {
        "user": "WenningQiu",
        "created_at": "2022-06-30T03:22:35Z",
        "body": "Thanks @HaoK. \r\n\r\nSo I was able to get past the error by adding Cookie Authentication as below. But I have to explicitly set SignInScheme, otherwise I would get the same error. Does that look right?\r\n\r\n\r\n```\r\n            foreach (var section in _configuration.GetChildren())\r\n            {\r\n                var options = new MicrosoftIdentityOptions();\r\n                section.Bind(options);\r\n\r\n                if (options.ClientId.IsNullOrEmpty())\r\n                    continue; // Skip sections that are not for OpenID Connect.\r\n\r\n                var scheme = section.Key;\r\n                var cookieScheme = $\"{scheme}Cookie\";\r\n\r\n                services.AddAuthentication()\r\n                        .AddCookie(cookieScheme)\r\n                        .AddOpenIdConnect(scheme, openIdConnectOptions =>\r\n                        {\r\n                            openIdConnectOptions.ClientId = options.ClientId;\r\n                            openIdConnectOptions.ClientSecret = options.ClientSecret;\r\n                            openIdConnectOptions.Authority = options.Authority;\r\n                            openIdConnectOptions.ResponseType = OpenIdConnectResponseType.Code;\r\n                            openIdConnectOptions.GetClaimsFromUserInfoEndpoint = true;\r\n                            openIdConnectOptions.SignInScheme = cookieScheme;\r\n                        });\r\n            }\r\n```"
      },
      {
        "user": "HaoK",
        "created_at": "2022-06-30T17:38:34Z",
        "body": "Yep that looks fine, you can also just set DefaultSignInScheme on authenticationOptions once to cookieScheme as a small cleanup"
      }
    ]
  },
  {
    "number": 41011,
    "title": "Nesting AuthorizeView and Authorized components with various roles",
    "created_at": "2022-04-01T17:56:52Z",
    "closed_at": "2022-04-04T11:54:39Z",
    "labels": [
      "question",
      "area-blazor",
      ":heavy_check_mark: Resolution: Answered",
      "Status: Resolved"
    ],
    "url": "https://github.com/dotnet/aspnetcore/issues/41011",
    "body": "### Is there an existing issue for this?\r\n\r\n- [X] I have searched the existing issues\r\n\r\n### Is your feature request related to a problem? Please describe the problem.\r\n\r\nI would like to have a section of a NavBar component wrapped in an `<AuthorizeView>` tag to limit access to only authorized users, but then use nested `<AuthorizeView Roles=\"admin, user, etc\">` within to show/hide various options within the list, if shown. However, I can't use two `<AuthorizeView>` tags due to context conflicts.\r\n\r\nThis is similar to issue #20294 which was closed.\r\n\r\n### Describe the solution you'd like\r\n\r\nBe able to nest `<AuthorizeView>` tags with more restrictive roles in the inner tags to allow for showing/hiding content and subcontent",
    "comments_url": "https://api.github.com/repos/dotnet/aspnetcore/issues/41011/comments",
    "author": "aterbo",
    "comments": [
      {
        "user": "MariovanZeist",
        "created_at": "2022-04-01T18:44:19Z",
        "body": "Hi @aterbo \r\nYou can nest ``<AuthorizeView>``  tags if you want, but you will have to rename the Context\r\n\r\nLike in this example:\r\n\r\n```razor\r\n<AuthorizeView Policy=\"MyPolicy\">\r\n    Show when MyPolicy is valid\r\n    @context.User                               @*<- just to show that you can access the AuthenticationState variable*@\r\n    <AuthorizeView Policy=\"MySecondPolicy\" Context=SomeOtherName>     @*Here I renamed the Context to SomeOthername  *@\r\n        Show only when MySecondPolicy is valid\r\n        @SomeOtherName.User                      @*<- just to show that you can access the AuthenticationState variable*@\r\n    </AuthorizeView>\r\n</AuthorizeView>\r\n```\r\n\r\nThis is because the ``ChildContent``  of an ``<AuthorizeView>`` component is of type ``RenderFragment<AuthenticationState>`` \r\nFor these generic Renderfragments, Blazor will generate a  variable named ``context`` that you can use to access that ``AuthenticationState``\r\nIf you have nesting components that each have generic render fragments (Like in the example above) you get into a problem that the variable in the nested component is also named ``context``, and that would give a compile error as you can't use 2 different variables with the same name.\r\n\r\nThat's why to get it to work you will have to rename the Context to something else, and you can access that variable using that name (as I did above)\r\n"
      },
      {
        "user": "aterbo",
        "created_at": "2022-04-01T19:13:56Z",
        "body": "Well, that's simple..... Thank you for your help, @MariovanZeist that worked perfectly.\r\n\r\nThis may be room for improvement on the docs. They discuss accessing `context` for various reasons, but not nesting components. Although, that may be repetitive, because had I thought through the `ChildContent` aspect more, it should be treated like any other component where you need to rename context.\r\n\r\nI'm happy to close the issue if this type of documentation change isn't needed."
      },
      {
        "user": "javiercn",
        "created_at": "2022-04-04T11:54:39Z",
        "body": "@aterbo thanks for contacting us.\r\n\r\n@MariovanZeist answer is correct here."
      }
    ]
  },
  {
    "number": 40021,
    "title": ".Net 6 pass array in query string",
    "created_at": "2022-02-06T16:05:41Z",
    "closed_at": "2022-02-06T18:13:13Z",
    "labels": [
      "question",
      "old-area-web-frameworks-do-not-use"
    ],
    "url": "https://github.com/dotnet/aspnetcore/issues/40021",
    "body": "### Is there an existing issue for this?\r\n\r\n- [X] I have searched the existing issues\r\n\r\n### Describe the bug\r\n\r\nI've asked this question in SO but no answer.\r\nI have an issue with passing string array in query string and I don't know what's happening. here is the request:\r\n```\r\n.../api/customers/todos?customerValue=0&branchId=120&allianceId=1&searchValue=&offset=0&count=14&statuses=one&statuses=two&statuses=three\r\n```\r\nand this is my method:\r\n```\r\npublic async Task<PaginatedResult<TodoVm>> GetTodos(decimal? customerValue, string branchId, \r\n            long? allianceId, string searchValue,\r\n            string[] statuses = null,\r\n            int offset = 0, int count = 20)\r\n        {\r\n            //do some stuff and return response\r\n        }\r\n```\r\nwhen I call the api it gives me this error and cannot bind the statues parameter:\r\n```\r\n{\r\n    \"title\": \"One or more validation errors occurred.\",\r\n    \"status\": 400,\r\n    \"errors\": {\r\n        \"$\": [\r\n            \"The input does not contain any JSON tokens. Expected the input to start with a valid JSON token, when isFinalBlock is true. Path: $ | LineNumber: 0 | BytePositionInLine: 0.\"\r\n        ]\r\n    }\r\n}\r\n```\r\nbut when I use **FromQuery** it works! like this:\r\n```\r\npublic async Task<PaginatedResult<TodoVm>> GetTodos(decimal? customerValue, string branchId, \r\n            long? allianceId, string searchValue,\r\n            [FromQuery(Name = \"statuses\")] string[] statuses = null,\r\n            int offset = 0, int count = 20)\r\n        {\r\n            //do some stuff and return response\r\n        }\r\n```\r\nother parameters will be mapped correctly but for array I have to use FromQuery.\r\nFYI, this is how I add controller in Startup:\r\n```\r\nservices.AddControllers()\r\n            .AddJsonOptions(options =>\r\n            {\r\n                options.JsonSerializerOptions.PropertyNameCaseInsensitive = false;\r\n                options.JsonSerializerOptions.ReferenceHandler = ReferenceHandler.IgnoreCycles;\r\n                options.JsonSerializerOptions.AllowTrailingCommas = false;\r\n            });\r\n```\r\n\r\n### .NET Version\r\n\r\n6.0.100\r\n",
    "comments_url": "https://api.github.com/repos/dotnet/aspnetcore/issues/40021/comments",
    "author": "sa-es-ir",
    "comments": [
      {
        "user": "davidfowl",
        "created_at": "2022-02-06T17:02:08Z",
        "body": "Arrays are treated as body parameters in `[ApiController]` unconditionally so you need to specify `[FromQuery]`.\r\n\r\n```C#\r\npublic async Task<PaginatedResult<TodoVm>> GetTodos(decimal? customerValue, string branchId, \r\n            long? allianceId, string searchValue,\r\n            [FromQuery] string[] statuses = null,\r\n            int offset = 0, int count = 20)\r\n        {\r\n            //do some stuff and return response\r\n        }\r\n```\r\n\r\nYou don't need `Name=\"statuses\"` btw."
      },
      {
        "user": "sa-es-ir",
        "created_at": "2022-02-06T17:13:39Z",
        "body": "Ok nice, I asked this because when I remove `statuses` from input parameters I still can get array like this:\r\n```\r\nstring[] statuses=HttpContext.Request.Query[\"statuses\"].ToArray();\r\n```\r\nand I didn't now for array it searches in body for binding values.\r\nThis behavior is for all .net versions? because I think it was ok for .net core 3.1\r\nThanks"
      }
    ]
  },
  {
    "number": 39884,
    "title": "Duplicated client assemblies after publish",
    "created_at": "2022-01-31T07:53:37Z",
    "closed_at": "2022-01-31T10:50:48Z",
    "labels": [
      "question",
      "area-blazor",
      "feature-blazor-wasm",
      ":heavy_check_mark: Resolution: Answered",
      "Status: Resolved",
      "feature-blazor-deployment"
    ],
    "url": "https://github.com/dotnet/aspnetcore/issues/39884",
    "body": "### Is there an existing issue for this?\n\n- [X] I have searched the existing issues\n\n### Describe the bug\n\nIf i publish a ASP.NET Core hosted web assembly blazor app (using the provided template), then client  assemblies are duplicated in publish folder. Once in wwwroot/_framework folder (with i assume is the right behavior) and once in the publish root folder next to all server assemblies.\n\n### Expected Behavior\n\nAll client assemblies occuring only once in wwwroot/_framework folder after publish.\n\n### Steps To Reproduce\n\n- Create a new ASP.NET Core hosted web assembly blazor app (using the template)\r\n- dotnet publish ./Server.csproj\r\n- Navigate to publish output\n\n### Exceptions (if any)\n\n_No response_\n\n### .NET Version\n\n6.0.101\n\n### Anything else?\n\n_No response_",
    "comments_url": "https://api.github.com/repos/dotnet/aspnetcore/issues/39884/comments",
    "author": "Fabster1993",
    "comments": [
      {
        "user": "javiercn",
        "created_at": "2022-01-31T10:18:44Z",
        "body": "@Fabster1993 thanks for contacting us.\r\n\r\nThat's expected and by design. Assemblies in `wwwroot/_framework` are trimmed and meant for consumption on the browser, while assemblies on the publish folder are meant for consumption by the server app, for example, when prerendering the app.\r\n\r\nHope this helps."
      },
      {
        "user": "Fabster1993",
        "created_at": "2022-01-31T10:21:19Z",
        "body": "@javiercn Oh, that makes sense. Thank you for the answer!"
      }
    ]
  },
  {
    "number": 39157,
    "title": "FindByIdAsync requires string instead of int even with ApplicationUser: IdentityUser<int>",
    "created_at": "2021-12-22T17:55:53Z",
    "closed_at": "2021-12-27T16:21:07Z",
    "labels": [
      "question",
      "area-identity",
      ":heavy_check_mark: Resolution: Answered"
    ],
    "url": "https://github.com/dotnet/aspnetcore/issues/39157",
    "body": "### Is there an existing issue for this?\n\n- [X] I have searched the existing issues\n\n### Describe the bug\n\nI might be seeing this wrong but shouldn't FindByIdAsync accept an int instead of string when ApplicationUser: IdentityUser<int>?\r\n\r\nI'm using var user = await _userManager.Users.FirstOrDefaultAsync(u => u.Id == userId); as an alternative but just wanted to be sure of this.\r\n\r\nThank you!\r\n\r\n\n\n### Expected Behavior\n\n_No response_\n\n### Steps To Reproduce\n\n_No response_\n\n### Exceptions (if any)\n\n_No response_\n\n### .NET Version\n\n.net 6\n\n### Anything else?\n\n_No response_",
    "comments_url": "https://api.github.com/repos/dotnet/aspnetcore/issues/39157/comments",
    "author": "HybridSolutions",
    "comments": [
      {
        "user": "blowdart",
        "created_at": "2021-12-27T14:55:28Z",
        "body": "It's a design decision. String is the lowest common denominator here, as ToString() works for all primitives nicely. Trying to make this more generic, when we simply don't know what key type you might be using would be an api usability nightmare and honestly would make things less usable for most users, and making customizing the user class even more difficult."
      },
      {
        "user": "HybridSolutions",
        "created_at": "2021-12-27T16:20:44Z",
        "body": "> It's a design decision. String is the lowest common denominator here, as ToString() works for all primitives nicely. Trying to make this more generic, when we simply don't know what key type you might be using would be an api usability nightmare and honestly would make things less usable for most users, and making customizing the user class even more difficult.\r\n\r\nok thanks.,"
      }
    ]
  },
  {
    "number": 37926,
    "title": "IJSInProcessRuntime and IJSUnmarshalledRuntime don't work in Blazor Server",
    "created_at": "2021-10-29T11:33:36Z",
    "closed_at": "2021-10-29T14:13:03Z",
    "labels": [
      "question",
      "area-blazor",
      "feature-blazor-wasm",
      ":heavy_check_mark: Resolution: Answered",
      "Status: Resolved"
    ],
    "url": "https://github.com/dotnet/aspnetcore/issues/37926",
    "body": "The following JSInterop code works blazor Web Assembly but exact same code doesn't work on Blazor Server\r\n```cs\r\npublic static async ValueTask InitAsync(IJSRuntime jsRuntime)\r\n{\r\n            Runtime = jsRuntime as IJSInProcessRuntime; //in server this cast is null but in wasm works fine\r\n            _moduleTask = new(() => Runtime.InvokeAsync<IJSUnmarshalledObjectReference>(\r\n               \"import\", \"./_content/BlazorBindGen/blazorbindgen.js\").AsTask()); \r\n            Module = await _moduleTask.Value;\r\n}\r\n```\r\nI am missing something?",
    "comments_url": "https://api.github.com/repos/dotnet/aspnetcore/issues/37926/comments",
    "author": "sps014",
    "comments": [
      {
        "user": "javiercn",
        "created_at": "2021-10-29T13:41:38Z",
        "body": "@sps014 thanks for contacting us.\r\n\r\nThat's by design. Blazor Server runs in a separate process from the Browser. That's why we recommend using IJSRuntime and leaving `IJSUnmarshalledRuntime` as an optional optimization specific to webassembly."
      },
      {
        "user": "sps014",
        "created_at": "2021-10-29T14:07:28Z",
        "body": "> That's by design. Blazor Server runs in a separate process from the Browser. That's why we recommend using IJSRuntime and leaving IJSUnmarshalledRuntime as an optional optimization specific to webassembly.\r\n\r\nI see, but IJSRuntime is limited in functionality and does not contain non async variant of Invoke Methods.\r\nIs there any plan to extend `IJSRuntime` in future to add more capabilities ?\r\n\r\n"
      },
      {
        "user": "javiercn",
        "created_at": "2021-10-29T14:34:43Z",
        "body": "@sps014 IJSRuntime only contains async methods because in general we can't guarantee that there is synchronous communication between the browser and the C# runtime, that's why the default implementation is async only, because that's the minimum all platforms can support.\r\n\r\nThe unmarshalled runtime is specific to webassembly and the communication channel with the browser. There is an IInProcesJSRuntime that offers synchronous variants, but again, only webassembly implements it.\r\n\r\nThe reality is that unless you are doing something very specific you aren't likely going to see any benefits from using the more specific runtimes, so our recommendation is that you rely only on IJSRuntime and only optionally use other JS interop interfaces with a type check ahead of time to ensure its available."
      },
      {
        "user": "sps014",
        "created_at": "2021-10-29T14:56:23Z",
        "body": "thanks"
      }
    ]
  },
  {
    "number": 28104,
    "title": "System.Text.Json.JsonException: Unlimited loops",
    "created_at": "2020-11-24T07:29:44Z",
    "closed_at": "2020-11-24T12:37:35Z",
    "labels": [
      "question",
      "area-mvc",
      ":heavy_check_mark: Resolution: Answered",
      "Status: Resolved"
    ],
    "url": "https://github.com/dotnet/aspnetcore/issues/28104",
    "body": "### Describe the bug\r\nI use Entity Framework Core to orm a object,but it has a error when webapi return this object to frontend.\r\nMy Entity:\r\n```C#\r\npublic class User\r\n{\r\n    public string Id{ get; set; }\r\n    public string Name { get; set; }\r\n    public Account Account{ get; set; }\r\n}\r\n\r\npublic class Account \r\n{\r\n    public string Id{ get; set; }\r\n    public string Identifier { get; set; }\r\n    public string UserId { get; set; }\r\n    public User User{ get; set; }\r\n}\r\n```\r\n```\r\nSystem.Text.Json.JsonException: A possible object cycle was detected which is not supported. This can either be due to a cycle or if the object depth is larger than the maximum allowed depth of 64.\r\n   at System.Text.Json.ThrowHelper.ThrowInvalidOperationException_SerializerCycleDetected(Int32 maxDepth)\r\n   at System.Text.Json.JsonSerializer.Write(Utf8JsonWriter writer, Int32 originalWriterDepth, Int32 flushThreshold, JsonSerializerOptions options, WriteStack& state)\r\n   at System.Text.Json.JsonSerializer.WriteAsyncCore(Stream utf8Json, Object value, Type inputType, JsonSerializerOptions options, CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Mvc.Formatters.SystemTextJsonOutputFormatter.WriteResponseBodyAsync(OutputFormatterWriteContext context, Encoding selectedEncoding)\r\n   at Microsoft.AspNetCore.Mvc.Formatters.SystemTextJsonOutputFormatter.WriteResponseBodyAsync(OutputFormatterWriteContext context, Encoding selectedEncoding)\r\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.\r\n<InvokeNextResultFilterAsync>g__Awaited|29_0[TFilter,TFilterAsync](ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)\r\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.Rethrow(ResultExecutedContextSealed context)\r\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.ResultNext[TFilter,TFilterAsync](State& next, Scope& scope, Object& state, Boolean& isCompleted)\r\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.InvokeResultFilters()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.\r\n    <InvokeNextResourceFilter>g__Awaited|24_0(ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)\r\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.Rethrow(ResourceExecutedContextSealed context)\r\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.Next(State& next, Scope& scope, Object& state, Boolean& isCompleted)\r\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.\r\n        <InvokeFilterPipelineAsync>g__Awaited|19_0(ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)\r\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.\r\n            <InvokeAsync>g__Awaited|17_0(ResourceInvoker invoker, Task task, IDisposable scope)\r\n   at Microsoft.AspNetCore.Routing.EndpointMiddleware.\r\n                <Invoke>g__AwaitRequestTask|6_0(Endpoint endpoint, Task requestTask, ILogger logger)\r\n   at Microsoft.AspNetCore.Authorization.AuthorizationMiddleware.Invoke(HttpContext context)\r\n   at Microsoft.AspNetCore.Authentication.AuthenticationMiddleware.Invoke(HttpContext context)\r\n   at Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware.Invoke(HttpContext context)\r\n```\r\n",
    "comments_url": "https://api.github.com/repos/dotnet/aspnetcore/issues/28104/comments",
    "author": "scung-cn",
    "comments": [
      {
        "user": "javiercn",
        "created_at": "2020-11-24T11:41:25Z",
        "body": "@sbchong thanks for contacting us.\r\n\r\nThis is by design. Cycles are not supported in System.Text.Json (by default at least). You should consider creating DTOs for explicitly producing the JSON response from your API"
      },
      {
        "user": "scung-cn",
        "created_at": "2020-11-24T12:37:32Z",
        "body": "thanks for your  answer!\r\nI used mapper&DTOs in the previous project\uff0cso that I have not found this problem."
      }
    ]
  },
  {
    "number": 27692,
    "title": "Blazor Server: don't bind event listener for non-rendered element",
    "created_at": "2020-11-10T20:46:15Z",
    "closed_at": "2020-11-20T14:10:58Z",
    "labels": [
      "question",
      "area-blazor",
      ":heavy_check_mark: Resolution: Answered",
      "Status: Resolved"
    ],
    "url": "https://github.com/dotnet/aspnetcore/issues/27692",
    "body": "I'm interested in keeping authorization simple by using the `AuthorizeView` component.  This request is an elaboration of the documentation issue: dotnet/AspNetCore.Docs/issues/20462.\r\n\r\nIn short, say I have Blazor pages, each of which requires authentication and role-based authorization:\r\n```\r\n@page \"/page1\"\r\n@attribute [Authorize]\r\n\r\n<AuthorizeView Role=\"page1\">\r\n    <!-- SECURE CONTENT -->\r\n    <button @onclick=\"SecureAction\">Secure Action</button>\r\n</AuthorizeView>\r\n\r\n@code {\r\n    private void SecureAction()\r\n    {\r\n        // Unauthorized users should not be able to execute this code path\r\n    }\r\n}\r\n```\r\n\r\nIt would be nice if it was impossible for clients to manually trigger the `SecureAction` method.  In this case, because the only element to which it binds is not rendered, no SignalR event listener should be bound.\r\n\r\nI would prefer not to inject the `AuthenticationStateProvider` in every page and guard every protected task/method with it.\r\n\r\nre: @guardrex ",
    "comments_url": "https://api.github.com/repos/dotnet/aspnetcore/issues/27692/comments",
    "author": "shanemikel",
    "comments": [
      {
        "user": "javiercn",
        "created_at": "2020-11-11T12:24:25Z",
        "body": "@shanemikel thanks for contacting us.\r\n\r\nI don't believe this is generally possible without integrating authorization with the renderer/dispatching mechanism in a strongly coupled way, which is not something we think we'll do.\r\n\r\nYou could alternatively write a \"protected\" action component that encapsulates the behavior you want.\r\n\r\n```\r\n<ProtectedAction Handler=\"SecureAction\" Context=\"protectedHandler\">\r\n    <!-- SECURE CONTENT -->\r\n    <button @onclick=\"protectedHandler\">Secure Action</button>\r\n</ProtectedAction>\r\n```\r\n\r\nWithin the `ProtectedAction` component you'll have something like this\r\n```\r\n@ChildContent(_protectedHandler);\r\n@code\r\n{\r\n  [Parameter] public EventCallback Handler { get; set; }\r\n  [CascadingParameter] public Task<AuthenticationState> AuthenticationState { get; set; }\r\n\r\n  protected override void OnParametersSet()\r\n  {\r\n    _protectedHandler = ProtectedHandler;\r\n  }\r\n\r\n  private async Task ProtectedHandler()\r\n  {\r\n    var state = await AuthenticationState;\r\n    var authorized = ...\r\n    if(authorized)\r\n    {\r\n      await Handler.InvokeAsync();\r\n    }\r\n  }\r\n}\r\n```"
      },
      {
        "user": "guardrex",
        "created_at": "2020-11-11T13:04:31Z",
        "body": "We could cover this as an **_advanced_** authz pattern ..... but *later*, probably even early next year given all of the work I have to do right now. @javiercn / @mkArtakMSFT ... let me know if you would like to **_avoid_** covering this pattern. I'll close the docs issue if that's the case."
      },
      {
        "user": "pranavkm",
        "created_at": "2020-11-12T19:47:16Z",
        "body": "@shanemikel by default event handlers for non-rendered elements are unable to be invoked. The scenario @javiercn was talking of was that **if** your authorization status changes after an element is rendered, there is a small window (in the order of milliseconds) before a new render that event handlers could be triggered. (\r\n\r\n[Initially authorized] --> [Unauthorized / StateHasChanged] .... You can continue to trigger the event now .... --> [Render](Now it's no longer possible to trigger)\r\n\r\nIf you were concerned about the small window, you could consider using the pattern @javiercn suggested. Most users would not need to worry about this. \r\n\r\n@guardrex I don't think this needs to be documented. \r\n\r\n"
      },
      {
        "user": "shanemikel",
        "created_at": "2020-11-13T00:07:55Z",
        "body": "@pranavkm Oh, that's great!  I actually think that would be a nice addition to the documentation."
      },
      {
        "user": "pranavkm",
        "created_at": "2020-11-13T00:14:09Z",
        "body": "@shanemikel we generally do not document things our framework does not do. I'll defer to @guardrex to make a call here."
      },
      {
        "user": "guardrex",
        "created_at": "2020-11-13T00:17:37Z",
        "body": "> default event handlers for non-rendered elements are unable to be invoked\r\n\r\nWe don't say that ... we only imply it, so I'll add a line to cover it.\r\n"
      },
      {
        "user": "javiercn",
        "created_at": "2020-11-20T14:10:58Z",
        "body": "Closing this issue since the original question was answered."
      }
    ]
  },
  {
    "number": 24054,
    "title": "[Blazor] execute check at high level to redirect to another page",
    "created_at": "2020-07-17T12:03:22Z",
    "closed_at": "2020-07-17T14:08:39Z",
    "labels": [
      "question",
      "area-blazor",
      ":heavy_check_mark: Resolution: Answered",
      "Status: Resolved"
    ],
    "url": "https://github.com/dotnet/aspnetcore/issues/24054",
    "body": "hello guys, i have some trouble with my blazor webassembly webapp when the user decide to refresh the page (with f5 for example).\r\n\r\nI can't maintain a stable state concerning my data so if its happen i prefer disconnect him and and redirect him to the login page.\r\n\r\nim able to suscribe to the onload js event and call method of one to my component to disconnect the user, it work. but in this method, if i try to redirect to the login page with the NavigationManager its not work (it stay on the current page, no redirection)\r\n\r\nI try another way, in my layout on the OnInitialized method i check if my user is not connected and if im not on the login page, if its the case i redirect to the login page. It works, but the problem is the current page will run her lifecycle with inconsistend data so it will sometimes crash. So there is a way to do that at another level to be sure the current page will not be loaded ? \r\n\r\nI wait for yours suggestions, don't hesitate if you have better idea to achieve what i want !\r\n\r\nthanks !",
    "comments_url": "https://api.github.com/repos/dotnet/aspnetcore/issues/24054/comments",
    "author": "julienGrd",
    "comments": [
      {
        "user": "javiercn",
        "created_at": "2020-07-17T12:58:02Z",
        "body": "@julienGrd thanks for contacting us.\r\n\r\nI would suggest you do this directly within the App.razor component. Wouldn't that be simpler for you than having to deal with the layout and other concerns?"
      },
      {
        "user": "julienGrd",
        "created_at": "2020-07-17T13:56:22Z",
        "body": "> @julienGrd thanks for contacting us.\r\n> \r\n> I would suggest you do this directly within the App.razor component. Wouldn't that be simpler for you than having to deal with the layout and other concerns?\r\n\r\nYes it can be ! how i can do that ? for me the app.razor contains only the main point of the app without code.\r\n\r\nthis is my actual App.razor\r\n````\r\n<Router AppAssembly=\"typeof(Program).Assembly\">\r\n    <Found Context=\"routeData\">\r\n        <RouteView RouteData=\"routeData\" DefaultLayout=\"typeof(Components.Layouts.MainLayout)\" />\r\n    </Found>\r\n    <NotFound>\r\n        <LayoutView Layout=\"@typeof(Components.Layouts.MainLayout)\">\r\n            <Is.Geckos.Blazor.Client.Components.Pages.Main.PageFallBack />\r\n        </LayoutView>\r\n        \r\n    </NotFound>\r\n</Router>\r\n````"
      },
      {
        "user": "javiercn",
        "created_at": "2020-07-17T13:59:16Z",
        "body": "@julienGrd define a `@code` block, inject NavigationManager, check the Url property on it within `OnInitialize` and trigger the navigation?"
      },
      {
        "user": "julienGrd",
        "created_at": "2020-07-17T14:08:39Z",
        "body": "> @julienGrd define a `@code` block, inject NavigationManager, check the Url property on it within `OnInitialize` and trigger the navigation?\r\n\r\nsometimes im really dumb, i was thinking App.razor was kind of special component without code, but it seem to be a classic component with all lifecycle.\r\n\r\nusing the initialized of this component make the job perfectly, thanks for your help, the subject is close"
      }
    ]
  },
  {
    "number": 23687,
    "title": "Blazor doesn't detect state-change when state is changed in between async calls, requiring manual StateHasChanged()",
    "created_at": "2020-07-06T03:13:20Z",
    "closed_at": "2020-07-08T08:54:39Z",
    "labels": [
      "question",
      "area-blazor",
      ":heavy_check_mark: Resolution: Answered",
      "Status: Resolved"
    ],
    "url": "https://github.com/dotnet/aspnetcore/issues/23687",
    "body": "### Describe the bug\r\nI have a simple div element inside a component, which has a class set conditionally based on a boolean property on the component:\r\n```\r\n<div class='spinner-container @(!IsLoading ? \"d-none\" : \"\")'>\r\n    <div class=\"spinner-border text-info\" role=\"status\">\r\n        <span class=\"sr-only\">Loading...</span>\r\n    </div>\r\n</div>\r\n```\r\n\r\nThe code looks like this:\r\n\r\n```\r\nbool IsLoading { get; set; }\r\n\r\nasync Task HandleFormSubmit()\r\n{\r\n    try\r\n    {\r\n        await Task.Delay(10);\r\n        IsLoading = true;\r\n        await Task.Delay(5000);\r\n    }\r\n    finally\r\n    {\r\n        IsLoading = false;\r\n    }\r\n}\r\n```\r\n\r\nWhen HandleFormSubmit() is called (which is via an `@onsubmit=\"HandleFormSubmit\"` on a `form` element), the div's class doesn't update to reflect the `IsLoading` state change. If I put an explicit `StateHasChanged()` after `IsLoading = true`, then it does update (but that's a bit... crap).\r\n\r\nThe more interesting bit is, if I move `IsLoading = true;` to before the first `Task.Delay`, Blazor somehow detects the state change and the div's class is updated.\r\n\r\n### To Reproduce\r\nThe above should help reproduce this, but if you can't, then I'll make some time to create a repo for this (sorry, middle of work and a bit busy currently, but didn't want to just ignore/not report this as it seems quite important).\r\n\r\n### Further technical details\r\n- Blazor (Web Assembly) version 3.2\r\n- Include the output of `dotnet --info`\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.1.301\r\n Commit:    7feb845744\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.18363\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.1.301\\\r\n\r\nHost (useful for support):\r\n  Version: 3.1.5\r\n  Commit:  65cd789777\r\n\r\n.NET Core SDKs installed:\r\n  2.1.400 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.401 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.504 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.505 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.507 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.701 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.101 [C:\\Program Files\\dotnet\\sdk]\r\n  3.1.301 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.11 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.19 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.11 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.19 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.11 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.19 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n```",
    "comments_url": "https://api.github.com/repos/dotnet/aspnetcore/issues/23687/comments",
    "author": "SaebAmini",
    "comments": [
      {
        "user": "javiercn",
        "created_at": "2020-07-06T13:22:57Z",
        "body": "@SaebAmini thanks for contacting us.\r\n\r\nBlazor only triggers a render within an event handler in two situations. After all the synchronous code has completed and after all the asynchronous code has completed. It can't do better because it doesn't have access to the implementation of the method, only to the task that is returned by the handler.\r\n\r\nTo achieve what you want, I think you just need to setup `IsLoading = true` before the JS interop call, since at that point a render will be triggered. \r\n\r\nIn other situations you need to call state has changed."
      },
      {
        "user": "SaebAmini",
        "created_at": "2020-07-06T22:38:51Z",
        "body": "Thanks for your quick reply @javiercn!\r\n\r\nThis is very interesting and a good gotcha to be aware of.\r\n\r\nSo to confirm, it's because the state-change is happening _in between_ the two async calls, and because the second async call (`Task.Delay`) takes a while to complete, Blazor doesn't detect and trigger a re-render, because you're saying once it encounters the first async call, then _all_ subsequent async calls need to be completed in the method for detection and re-render to happen?\r\n\r\n> Blazor only triggers a render within an event handler in two situations. After all the synchronous code has completed and after all the asynchronous code has completed.\r\n\r\nDo you mean all the synchronous code _before_ the first async call? confirming because there are still plenty of other bits of synchronous code left, even if I move `IsLoading = true` to the top, although they would be synchronous code in async code callbacks."
      },
      {
        "user": "javiercn",
        "created_at": "2020-07-07T09:47:01Z",
        "body": "@SaebAmini It works more or less like this. Your method gets conceptually transformed to something more or less like this:\r\n\r\n```csharp\r\nreturn Task.Delay(10)\r\n  .ContinueWith(t => { IsLoading = true; /* here */ return Task.Delay(5000); })\r\n  .ContinueWith(t => IsLoading = false)\r\n```\r\n\r\nBlazor only receives the returned task from this method. All we do is check whether the task completed (ran synchronously) and trigger a render or whether the task did not complete yet (it is running some async code). In this second case we do something like\r\n```csharp\r\nhandlerTask.ContinueWith(t => StateHasChanged())\r\n```\r\n\r\nWhich triggers the other render after the async work completes. The point is that we can know when the async work starts and when it ends, but there is no way for us to insert StateHasChanged calls at the point marked by the comment above."
      },
      {
        "user": "SaebAmini",
        "created_at": "2020-07-08T08:54:17Z",
        "body": "That makes sense. Thanks a lot for explaining @javiercn"
      }
    ]
  },
  {
    "number": 22044,
    "title": "How to override default RoleValidator",
    "created_at": "2020-05-20T18:28:56Z",
    "closed_at": "2020-05-27T20:38:31Z",
    "labels": [
      "question",
      "area-identity"
    ],
    "url": "https://github.com/dotnet/aspnetcore/issues/22044",
    "body": "I trying to override the name validation duplication for the roles, here what I have\r\n\r\nStartup file\r\n\r\n```\r\n services.AddScoped<IRoleValidator<ApplicationRole>, \r\n                                                    WebIdp.Services.RoleValidator<ApplicationRole>>();\r\n\r\n services.AddIdentity<AplicationUser, ApplicationRole>(config =>\r\n                {\r\n                    config.SignIn.RequireConfirmedEmail = false;\r\n                    config.Password.RequiredUniqueChars = 0;\r\n\r\n                })\r\n                .AddRoles<ApplicationRole>()\r\n                .AddDefaultUI(UIFramework.Bootstrap4)\r\n                .AddEntityFrameworkStores<ApplicationDbContext>()\r\n                .AddDefaultTokenProviders()\r\n                .AddErrorDescriber<MultilanguageIdentityErrorDescriber>()\r\n                .AddRoleManager<ApplicationRoleManager>();\r\n```\r\nWhen I debug my code my validator works but when I start creating a new role then I have two validators the default and mine in the rolManager Validators property, then it does my validation but after mine it goes to the next validator and fail, since the manager is tryng to check all the validations that it has.\r\n\r\nI'm using Asp.net core 2.2\r\n\r\nDo I am missing some configuration?\r\n\r\nThanks!!\r\n\r\n\r\n\r\n",
    "comments_url": "https://api.github.com/repos/dotnet/aspnetcore/issues/22044/comments",
    "author": "maykoestevez",
    "comments": [
      {
        "user": "HaoK",
        "created_at": "2020-05-27T19:10:01Z",
        "body": "I guess you might need to remove the existing Rolevalidator from DI in ConfigureServices.  TryAddRoleValidator I would think should have prevented it from registering, you can inspect the services collection in ConfigureServices and ensure only your RoleValidator is registered"
      },
      {
        "user": "maykoestevez",
        "created_at": "2020-05-27T20:00:01Z",
        "body": "I`m trying to add TryAddRoleValidator under AddIdentity, but it said IdentityBuilder' does not contain a definition for 'TryAddRoleValidator.\r\n\r\n\r\n```\r\n         services.AddScoped<IRoleValidator<ApplicationRole>, \r\n                          WebIdp.Services.RoleValidator<ApplicationRole>>();\r\n\r\n            services.AddIdentity<AplicationUser, ApplicationRole>(config =>\r\n                {\r\n                    config.SignIn.RequireConfirmedEmail = false;\r\n                    config.Password.RequiredUniqueChars = 0;\r\n\r\n                })\r\n                \r\n                .AddRoles<ApplicationRole>()\r\n                .AddDefaultUI(UIFramework.Bootstrap4)\r\n                .AddEntityFrameworkStores<ApplicationDbContext>()\r\n                .AddDefaultTokenProviders()\r\n                .AddErrorDescriber<MultilanguageIdentityErrorDescriber>()\r\n                .AddUserManager<ApplicationUserManager>()\r\n                .TryAddRoleValidator<ApplicationRole>()\r\n                .AddRoleManager<ApplicationRoleManager>();\r\n```\r\n\r\nDo I have to install something to use TryAddRoleValidator? I saw that tryAdd feature is available for dotnet 2.2 which is the version I`m using.\r\n\r\nEdit:\r\nI did not remove anything I just did not add the line where I add the custom role validator, but I added now \r\n\r\n"
      },
      {
        "user": "HaoK",
        "created_at": "2020-05-27T20:01:41Z",
        "body": "No what you had before should already work, I meant add the validator like normal before AddIdentity and that should prevent identity from adding the default one.  If that doesn't work, then try removing any service descriptors from the service collection that aren't your role validator"
      },
      {
        "user": "maykoestevez",
        "created_at": "2020-05-27T20:07:02Z",
        "body": "How do I remove those service descriptors? if there are any.\r\nEdit:\r\nI found something on google, is that what you mean?\r\n\r\n```\r\nvar serviceDescriptor = services.FirstOrDefault(descriptor => descriptor.ServiceType ==typeof(IService));\r\nservices.Remove(serviceDescriptor);\r\n```"
      },
      {
        "user": "maykoestevez",
        "created_at": "2020-05-27T20:37:28Z",
        "body": "Thanks @HaoK!!\r\n\r\nLike you mention I remove the default one just to keep my implementation.\r\n   ```\r\nservices.AddScoped<IRoleValidator<ApplicationRole>, ApplicationRoleValidator<ApplicationRole>>();\r\n\r\n            services.AddIdentity<AplicationUser, ApplicationRole>(config =>\r\n                {\r\n                    config.SignIn.RequireConfirmedEmail = false;\r\n                    config.Password.RequiredUniqueChars = 0;\r\n\r\n                })\r\n                \r\n                .AddRoles<ApplicationRole>()\r\n                .AddDefaultUI(UIFramework.Bootstrap4)\r\n                .AddEntityFrameworkStores<ApplicationDbContext>()\r\n                .AddDefaultTokenProviders()\r\n                .AddErrorDescriber<MultilanguageIdentityErrorDescriber>()\r\n                .AddUserManager<ApplicationUserManager>()\r\n                .AddRoleManager<ApplicationRoleManager>();\r\n\r\n                var defaultRoleValidator = services.FirstOrDefault(descriptor => descriptor.ImplementationType ==typeof(RoleValidator<ApplicationRole>));\r\n                services.Remove(defaultRoleValidator);\r\n```\r\n It looks like a work around but is working."
      }
    ]
  },
  {
    "number": 21354,
    "title": "AddOpenIdConnect in ASP.NET Core WebAPI in context auf Angular-SPA ->WebAPI (single domain)",
    "created_at": "2020-04-30T07:57:34Z",
    "closed_at": "2020-05-08T10:04:43Z",
    "labels": [
      "question",
      "area-auth"
    ],
    "url": "https://github.com/dotnet/aspnetcore/issues/21354",
    "body": "All samples regarding AddOpenIdConnect-middleware seem to target ASP.NET Core MVC. In contrast we have an SPA that accesses a WebAPI. Both are hosted on the same domain. Is it OK to use AddOpenIdConnect-backed cookie authentication on the WebAPI-level in this scenario or what (negative) implications does this have?\r\n\r\nThanks!\r\n",
    "comments_url": "https://api.github.com/repos/dotnet/aspnetcore/issues/21354/comments",
    "author": "Tobias-08",
    "comments": [
      {
        "user": "blowdart",
        "created_at": "2020-04-30T12:33:10Z",
        "body": "If you have a SPA generally we'd recommend JWT tokens rather than cookies, to allow for flexibility and other client types.\r\n\r\nHowever if you know you're never going to write a mobile or desktop app, and you can be sure that all browsers you are going to support have support for SameSite cookies, then yea, you could use cookies if you want, as long as you ensure the cookies are secure (i.e. HTTPS only), http cookies (so you can't access them in a script) and you set the SameSite attribute to be Strict (to avoid CSRF)"
      },
      {
        "user": "Tobias-08",
        "created_at": "2020-05-08T10:04:43Z",
        "body": "OK, thanks."
      }
    ]
  },
  {
    "number": 21226,
    "title": "Checkbox keep checked, after List Updated and StateHasChanged() method is called",
    "created_at": "2020-04-27T06:26:30Z",
    "closed_at": "2020-04-27T15:34:47Z",
    "labels": [
      "question",
      "area-blazor",
      ":heavy_check_mark: Resolution: Answered",
      "Status: Resolved"
    ],
    "url": "https://github.com/dotnet/aspnetcore/issues/21226",
    "body": "Hi, I have this code in Blazor :\r\n\r\n```\r\n@foreach (var item in list)\r\n{\r\n <input type=\"checkbox\" @onchange=\"@(e => HandleCheckChanged(e, item.Name))\" checked=\"@item.IsChecked\">\r\n}\r\n\r\nprivate async Task HandleCheckChanged(ChangeEventArgs e, string itemName)\r\n{\r\n   // do something ...\r\n   StateHasChanged();\r\n}\r\n```\r\nif I check a checkbox it calls the HandleCheckChanged and the checkbox is checked\r\nBut if I change the list items the previews checked checkbox is still checked and is not updated based on the new list items.\r\n\r\nfor example suppose that I have a list of ordered numbers {1-20} I follow these steps :\r\n1 : list = GetAll().Where(c => c.Id < 10);\r\n2 : I check the first checkbox (number 1)\r\n3 : list = GetAll().Where(c => c.Id >= 10); (list updated and state has changed)\r\n4 : the problem raises here , checkbox 11 is checked ??? but its value is false\r\nIt seems that DOM does not follow the Component's State ",
    "comments_url": "https://api.github.com/repos/dotnet/aspnetcore/issues/21226/comments",
    "author": "webebox",
    "comments": [
      {
        "user": "javiercn",
        "created_at": "2020-04-27T14:40:33Z",
        "body": "@webebox thanks for contacting us.\r\n\r\nSeveral things here, I don't think you need to be calling `StateHasChanged` in your handler. The framework will do that for you automatically. You likely need to use `@key` to have the behavior you want, since otherwise Blazor tries to find the minimal change needed to update the UI and that might not have the effect you expect."
      },
      {
        "user": "webebox",
        "created_at": "2020-04-27T15:34:44Z",
        "body": "Thank you. using @key solved the problem."
      }
    ]
  },
  {
    "number": 20585,
    "title": "What's up with blazor.server.js",
    "created_at": "2020-04-06T21:21:20Z",
    "closed_at": "2020-04-07T15:01:02Z",
    "labels": [
      "question",
      "area-blazor"
    ],
    "url": "https://github.com/dotnet/aspnetcore/issues/20585",
    "body": "### Describe the bug\r\nI'm trying to develop with netcore3.1. In a fresh boilerplate blazor server app, there is a reference in ```_Host.cshtml``` to ```_framework/blazor.server.js```. Visual Studio highlights this reference and says that it cannot find it. Sure enough, ```_framework``` is not present under ```wwwroot``` in the project.\r\nI did some digging on my system and found that under ```C:\\Users\\michael\\.nuget\\packages\\microsoft.aspnetcore.blazor.build\\3.1.0-preview4.19579.2\\tools\\blazor``` there is a ```blazor.webassembly.js``` but no ```blazor.server.js```.\r\nThe reason that I remark on this is that on another system that I work on, in a similar folder (3.0.0 preview 9) this file is present.\r\nI am having significant difficulties with a project that I am trying to develop where I cannot get components to update properly, and I am wondering if this might be the culprit.\r\n\r\n### Further technical details\r\n- ASP.NET Core version\r\n- Include the output of `dotnet --info`\r\n\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.1.201\r\n Commit:    b1768b4ae7\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.18363\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.1.201\\\r\n\r\nHost (useful for support):\r\n  Version: 3.1.3\r\n  Commit:  4a9f85e9f8\r\n\r\n.NET Core SDKs installed:\r\n  2.1.801 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.802 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.401 [C:\\Program Files\\dotnet\\sdk]\r\n  3.1.101 [C:\\Program Files\\dotnet\\sdk]\r\n  3.1.201 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.13 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.17 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.13 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.17 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.1.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.13 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.17 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.1.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.1.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\n- The IDE (VS / VS Code/ VS4Mac) you're running on, and it's version\r\n\r\nVS 16.5.2\r\nVS Code 1.43.2\r\n",
    "comments_url": "https://api.github.com/repos/dotnet/aspnetcore/issues/20585/comments",
    "author": "lxman",
    "comments": [
      {
        "user": "danroth27",
        "created_at": "2020-04-07T05:34:37Z",
        "body": "Hi @lxman. The blazor.server.js file is an embedded resource on the Microsoft.AspNetCore.Components.Server.dll assembly, which ships as part of the ASP.NET Core shared framework. While VS does typically try to validate that your script references are actually on disk at the specified path, VS should ignore blazor.server.js, which is included as part of the ASP.NET Core shared framework (it does on my machine). It sounds like something isn't working quite right with your Visual Studio version. Can you try repairing your VS installation?"
      },
      {
        "user": "lxman",
        "created_at": "2020-04-07T15:01:02Z",
        "body": "Hmm, OK, that makes sense. Unfortunately the validation for VS has been a trouble spot for quite some time by my experience. Working with Blazor I constantly get validation errors (red squigglies) yet the program compiles and runs. Annoying, but I'm used to it by now.\r\n\r\nThanks for the info. I'll close this."
      },
      {
        "user": "danroth27",
        "created_at": "2020-04-07T15:43:01Z",
        "body": "> Working with Blazor I constantly get validation errors (red squigglies) yet the program compiles and runs. Annoying, but I'm used to it by now.\r\n\r\nFor Razor files this is a known issue that we are working on addressing with a total revamp of the Razor tooling system. It will take some time to address, but once it's done it should enable a much better, more consistent, and more feature rich experience."
      }
    ]
  },
  {
    "number": 20455,
    "title": "In Blazor Server 3.1, is it possible to move _Host.cshtml?",
    "created_at": "2020-04-02T16:03:52Z",
    "closed_at": "2020-04-02T19:43:30Z",
    "labels": [
      "question",
      "area-mvc",
      ":heavy_check_mark: Resolution: Answered",
      "Status: Resolved"
    ],
    "url": "https://github.com/dotnet/aspnetcore/issues/20455",
    "body": "### Is your feature request related to a problem? Please describe.\r\nWe would like to organize code by Feature / Page.  Is it possible to move \"\\Pages\\\\_Host.cshtml\" to \"\\Features\\Host\\\\_Host.cshtml\" ?\r\n\r\n### Describe the solution you'd like\r\nWe would like to move \"\\Pages\\\\_Host.cshtml\" to \"\\Features\\Host\\\\_Host.cshtml\"\r\n\r\n### Additional context\r\nBecause we host our Blazor Server apps a sub sites in IIS onpremise, we already have the href of the base tag set:  `<base` href=\"/PickListWeb/\" `/>`\r\n",
    "comments_url": "https://api.github.com/repos/dotnet/aspnetcore/issues/20455/comments",
    "author": "roysurles",
    "comments": [
      {
        "user": "javiercn",
        "created_at": "2020-04-02T16:16:55Z",
        "body": "@roysurles thanks for contacting us.\r\n\r\nIt is doable I believe, `_Host.cshtml` is a plain razor page used as the entry point for the server-side blazor app.\r\n\r\n@pranavkm can you answer this since you are more familiar with the area."
      },
      {
        "user": "SteveSandersonMS",
        "created_at": "2020-04-02T17:04:44Z",
        "body": "Yes, in your `Startup.cs`, change the call to `AddRazorPages` to pass a different root directory. Example:\r\n\r\n```cs\r\n            services.AddRazorPages(options =>\r\n            {\r\n                options.RootDirectory = \"/something\";\r\n            });\r\n```"
      },
      {
        "user": "roysurles",
        "created_at": "2020-04-02T19:32:20Z",
        "body": "Worked exactly as described... thanks much!"
      }
    ]
  },
  {
    "number": 20409,
    "title": "Razor Class Library static files inaccessible in any ASPNETCORE_ENVIRONMENT other than Development",
    "created_at": "2020-04-01T12:27:29Z",
    "closed_at": "2020-04-01T12:33:15Z",
    "labels": [
      "question",
      "area-blazor",
      ":heavy_check_mark: Resolution: Answered",
      "Status: Resolved"
    ],
    "url": "https://github.com/dotnet/aspnetcore/issues/20409",
    "body": "Hi,\r\n\r\nI have a Razor Class Library in .NET Core 3.1.0. The RCL has static assets located in wwwroot folder such as js frameworks, css, etc. \r\n\r\nI have a .NET Core 3.1 Web application that references the RCL. When i run the web application the static files within the RCL can be accessed using the path /_content/AreaName/js/...\r\n\r\nThis works fine when then  ASPNETCORE_ENVIRONMENT is Development. If i change it to anything else, e.g. Local, Staging, the web application returns a 404 (Not found) when trying to access the static files.\r\n\r\nIs this an issue/feature?\r\nIs there a workaround?\r\n\r\nAny advice is appreciated.",
    "comments_url": "https://api.github.com/repos/dotnet/aspnetcore/issues/20409/comments",
    "author": "idlemind",
    "comments": [
      {
        "user": "javiercn",
        "created_at": "2020-04-01T12:32:57Z",
        "body": "@idlemind thanks for contacting us.\r\n\r\nThe current behavior is by design. RCL is a development time feature, and doesn't exist when the application is published, hence it's only plugged in by default during development.\r\n\r\nIf you want to enable it for a different environment you can call `webHostBuilder.UseStaticWebAssets()` to turn it on unconditionally."
      },
      {
        "user": "idlemind",
        "created_at": "2020-04-01T12:43:22Z",
        "body": "Thank you for the prompt response and workaround."
      }
    ]
  },
  {
    "number": 19479,
    "title": "RAZORSDK1006 warning",
    "created_at": "2020-03-01T20:16:34Z",
    "closed_at": "2020-03-02T12:34:42Z",
    "labels": [
      "question",
      "area-mvc"
    ],
    "url": "https://github.com/dotnet/aspnetcore/issues/19479",
    "body": "### Describe the bug\r\nI have an asp.net project that uses Microsoft.AspNetCore.Mvc package. This generates a compiler warning RAZORSDK1006 warning about Razor language version downgrade. According to the description, this is caused by a reference to Microsoft.AspNetCore.Razor.Design package.\r\n\r\nThis package is referenced by Microsoft.AspNetCore.Mvc package - can it be removed?\r\n\r\n### Further technical details\r\n- Targeting .net core 3.1\r\n- Referenced version of Microsoft.AspnetCore.Mvc is 2.2.0\r\n- IDE is Visual Studio 2019 v16.4.5\r\n",
    "comments_url": "https://api.github.com/repos/dotnet/aspnetcore/issues/19479/comments",
    "author": "bstordrup",
    "comments": [
      {
        "user": "rynowak",
        "created_at": "2020-03-01T22:03:36Z",
        "body": "Ideally a 3.1 project wouldn't be referencing MVC 2.2.0 - do you know why that's there? I would try to remove that.\r\n\r\n@pranavkm "
      },
      {
        "user": "bstordrup",
        "created_at": "2020-03-02T06:17:03Z",
        "body": "@rynowak, which version should I be using instead? Microsoft.AspNetCore.Mvc 2.2.0 is the latest available package on NuGet."
      },
      {
        "user": "rynowak",
        "created_at": "2020-03-02T06:22:06Z",
        "body": "Most ASP.NET Core libraries don't ship packages at all as of 3.0 - they are just included in a web project by default.  It should be safe to remove"
      },
      {
        "user": "bstordrup",
        "created_at": "2020-03-02T12:34:42Z",
        "body": "@rynowak, thank you. Removing the packages fixed the issue."
      }
    ]
  },
  {
    "number": 19463,
    "title": "BuildRenderTree not being called",
    "created_at": "2020-02-29T05:15:56Z",
    "closed_at": "2020-03-01T04:52:19Z",
    "labels": [
      "question",
      "area-blazor",
      ":heavy_check_mark: Resolution: Answered",
      "Status: Resolved"
    ],
    "url": "https://github.com/dotnet/aspnetcore/issues/19463",
    "body": "I have a Person.razor component which I wanted to separate the code behind from. After doing so, `BuildRenderTree` method is never called. See below for more information.\r\n\r\n### Customer.razor\r\nThere is no markup intentionally.\r\n\r\n``` C# \r\n@page \"/customer\"\r\n@inherits CustomerBase\r\n```\r\n\r\n### Customer.razor.cs\r\n``` C# \r\n    public class CustomerBase: ComponentBase\r\n    {\r\n        protected override void BuildRenderTree(RenderTreeBuilder builder)\r\n        {\r\n            base.BuildRenderTree(builder);\r\n            builder.AddMarkupContent(0, \"<h1>Person</h1>\");\r\n        }\r\n    }\r\n```",
    "comments_url": "https://api.github.com/repos/dotnet/aspnetcore/issues/19463/comments",
    "author": "yopez83",
    "comments": [
      {
        "user": "rynowak",
        "created_at": "2020-02-29T21:23:48Z",
        "body": "Using `@inherits` in a `.razor` file will inherit from the class you provide, and will **always** override `BuildRenderTree`. \r\n\r\nSo your hierarchy looks like:\r\n\r\n```txt\r\nCustomer::BuildRenderTree(...) (empty)\r\nCustomerBase::BuildRenderTree(...) (overridden by Customer)\r\nComponentBase::BuildRenderTree(...) (abstract)\r\n```\r\n\r\nThe solution to this is just remove `Customer.razor` if you want to define a render method in C#. You can use `[RouteAttribute(...)]` to apply a route."
      },
      {
        "user": "rynowak",
        "created_at": "2020-02-29T21:24:54Z",
        "body": "You also don't need to use inheritance to have a code-behind. Blazor as of 3.1 supports partial classes."
      },
      {
        "user": "yopez83",
        "created_at": "2020-03-01T04:52:12Z",
        "body": "It worked. Thank you @rynowak "
      }
    ]
  },
  {
    "number": 19321,
    "title": "How Can I pass Parent Tag Ref to Child Tag in taghelper",
    "created_at": "2020-02-25T04:59:37Z",
    "closed_at": "2020-02-26T06:12:49Z",
    "labels": [
      "question",
      "area-mvc",
      ":heavy_check_mark: Resolution: Answered",
      "Status: Resolved"
    ],
    "url": "https://github.com/dotnet/aspnetcore/issues/19321",
    "body": "How Can I pass Parent Tag Ref to Child Tag in taghelper??",
    "comments_url": "https://api.github.com/repos/dotnet/aspnetcore/issues/19321/comments",
    "author": "kugarliyifan",
    "comments": [
      {
        "user": "javiercn",
        "created_at": "2020-02-25T07:41:53Z",
        "body": "@kugarliyifan thanks for contacting us.\r\n\r\nI'm not sure if this can be done through the TagHelper context or if it is simply not possible. @NTaylorMullen do you have any idea on how to achieve this?"
      },
      {
        "user": "NTaylorMullen",
        "created_at": "2020-02-25T17:37:16Z",
        "body": "@kugarliyifan `Ref` as in the HTML ref attribute or the actual instance of the parent tag?"
      },
      {
        "user": "kugarliyifan",
        "created_at": "2020-02-26T04:30:22Z",
        "body": "the actual instance of parent tag object\r\n\r\n> @kugarliyifan `Ref` as in the HTML ref attribute or the actual instance of the parent tag?\r\n\r\n"
      },
      {
        "user": "NTaylorMullen",
        "created_at": "2020-02-26T06:12:22Z",
        "body": "> the actual instance of parent tag object\r\n\r\nHmm, out of curiosity why do you want the parent `TagHelper` instance?\r\n\r\nTo do what you're looking for in your parent `TagHelper` have it add itself to the `TagHelperContext.Items` collection and have the child `TagHelper` read it."
      },
      {
        "user": "kugarliyifan",
        "created_at": "2020-02-26T07:05:11Z",
        "body": "emm,,thk ,,I use Items property now"
      }
    ]
  },
  {
    "number": 19114,
    "title": "Client-SignalR on WebAPI without Hub-SignalR in the same solution - how to configure for work? ",
    "created_at": "2020-02-18T07:43:54Z",
    "closed_at": "2020-04-25T20:00:54Z",
    "labels": [
      "question",
      "area-signalr"
    ],
    "url": "https://github.com/dotnet/aspnetcore/issues/19114",
    "body": "# Issue Title\r\n\r\nClient-SignalR on WebAPI without Hub-SignalR in the same solution - how to configure for work? \r\n\r\n# General\r\nWindows 10\r\ndotnet Core 3.1.1\r\nWebAPI\r\nSignalR \r\n----------\r\nThese are 2 applications Server and WebAPI :\r\nMy architecture has 1) remote WebAPI application and 2) Server that calls WebAPI. They are located at different addresses and perform different tasks. Hub SignalR is located on Server. I need to configure Client on WebAPI so that it informs everyone about the intermediate steps performed so that the server knows.\r\nThe whole day I was looking for how to register Client SignslR as Service (in WebAPI) so that Client SignslR would send messages from Controller on WebAPI to Server (Hub SignalR ).\r\nI would like it to be convenient as with IHubContext, but at least correctly, even if it is not convenient.\r\n\r\nHelp me, plz. Cann't find any sample how use SignalR client on WebAPI\\in controller without Hub in the same project.\r\n",
    "comments_url": "https://api.github.com/repos/dotnet/aspnetcore/issues/19114/comments",
    "author": "parad74",
    "comments": [
      {
        "user": "arunranjan1988",
        "created_at": "2020-02-18T11:31:26Z",
        "body": "if  i have load balance then how it works Signal R "
      },
      {
        "user": "BrennanConroy",
        "created_at": "2020-02-18T16:32:35Z",
        "body": "You need to create the connection on the WebAPI and manage passing it to your controller yourself. There is no built in server like `IHubContext` for this. You would need to create your own custom service that wraps a HubConnection if you'd like something similar.\r\n\r\npseudo code:\r\n```c#\r\nclass MyService\r\n{\r\n    private readonly HubConnection _connection;\r\n    public MyService()\r\n    {\r\n        _connection = new HubConnectionBuilder().WithUrl(\"someurl\").Build();\r\n       _connection.On(...);\r\n    }\r\n\r\n    public Task StartAsync()\r\n    {\r\n        return _connection.StartAsync();\r\n    }\r\n\r\n    public Task SendMessage(string message)\r\n    {\r\n        return _connection.SendAsync(\"method\", message);\r\n    }\r\n}\r\n```"
      },
      {
        "user": "parad74",
        "created_at": "2020-02-22T16:24:57Z",
        "body": "BrennanConroy , thank you for confirming that this must works. It helped me.\r\nI continued testing.\r\n\r\nAnd got so result\r\nMy mistake was that in Action in  Controller I returned not  async Task\r\n//NOT WORK\r\n```\r\n[HttpGet]\r\npublic Processes GetProcesses ()\r\n{\r\n//and I called everything synchronously\r\n...\r\n_hubChatConnection.StartAsync();\r\n_hubChatConnection.InvokeAsync(\"SendMessage\", \"_hubSignalRRepository\", \"Processes\");\r\n...\r\n}\r\n```\r\nno messages-error were issued in VisualStudio\r\n//==========================\r\n//Need change to async\\await !\r\n//WORK\r\n```\r\n[ServiceFilter(typeof(ControllerSignalRChatHubFilter))]\r\n[HttpGet]\r\npublic async Task<Processes> GetProcesses()\r\n{\r\n\tProcesses processes = new Processes();\r\n\tprocesses = this._processRepository.GetProcesses();\r\n\ttry\r\n\t{\r\n\tawait this._hubSignalRRepository.HubChatConnection.StartAsync();\r\n\tawait this._hubSignalRRepository.HubChatConnection.InvokeAsync(\"SendMessage\", \"GetProcesses\", \"Count = \" + processes.Count);\r\n\t}\r\n\tcatch (Exception ecx) { this._logger.LogError(ecx.Message, ecx); }\r\n\tfinally { await this._hubSignalRRepository.HubChatConnection.StopAsync();}\r\n\treturn processes;\r\n}\r\n\r\n// add ActionFilter\r\n ControllerSignalRChatHubFilter : Attribute, IActionFilter\r\n...\r\npublic void OnActionExecuting(ActionExecutingContext context)\r\n{\r\n\ttry\r\n\t{\r\n\tif (_hubSignalRRepository.HubChatConnection == null)\r\n\t{\r\n\t_hubSignalRRepository.HubChatConnection = new HubConnectionBuilder()\r\n\t  .WithUrl(_chatHubAddress)\r\n\t  .Build();\r\n\t\t\t\r\n\t_hubSignalRRepository.HubChatConnection.On<string, string>(SignalRHubFunction.ReceiveMessage, (user, message) =>\r\n\t{\r\n\t_logger.LogInformation(\"OnActionExecuting.ControllerSignalRChatHubFilter\" + \" create SignalR Cient \");\r\n\t});\r\n}\r\n}\r\ncatch (Exception ex)\r\n{\r\n}\r\n}\r\n\r\n```\r\n"
      },
      {
        "user": "parad74",
        "created_at": "2020-02-22T16:30:02Z",
        "body": "It works, but I still have question where to do StartAsync \\ StopAsync ?\r\nIn every Action ? This is good practice? "
      },
      {
        "user": "BrennanConroy",
        "created_at": "2020-02-25T16:22:02Z",
        "body": "> In every Action ? This is good practice?\r\n\r\nNo, you should probably do it once at the beginning of your application."
      },
      {
        "user": "ghost",
        "created_at": "2020-04-25T20:00:54Z",
        "body": "Thank you for contacting us. Due to a lack of activity on this discussion issue we're closing it in an effort to keep our backlog clean. If you believe there is a concern related to the ASP.NET Core framework, which hasn't been addressed yet, please file a new issue.\n\nThis issue will be locked after 30 more days of inactivity. If you still wish to discuss this subject after then, please create a new issue!"
      }
    ]
  },
  {
    "number": 17764,
    "title": "How can I access from AuthorizeRouteView.NotAuthorized the url or name of a component .",
    "created_at": "2019-12-11T08:31:14Z",
    "closed_at": "2019-12-12T00:10:27Z",
    "labels": [
      "question",
      "area-blazor",
      ":heavy_check_mark: Resolution: Answered",
      "Status: Resolved"
    ],
    "url": "https://github.com/dotnet/aspnetcore/issues/17764",
    "body": "How can I access from AuthorizeRouteView.NotAuthorized the url or name of a page component from which I'm being redirected to a Login component. In other words, when an unauthenticated user tries to access a page component with the Authorize attribute, he should be redirected to a Login component. The code to navigate to the  Login component resides within the AuthorizeRouteView.NotAuthorized property thus:\r\n\r\n        <AuthorizeRouteView RouteData=\"@routeData\" \r\n                                    DefaultLayout=\"@typeof(MainLayout)\">\r\n                <NotAuthorized>\r\n                       NavigationManager.NavigateTo(\"Login\");\r\n                 </NotAuthorized>\r\n                <Authorizing>\r\n                    Wait...\r\n                </Authorizing>\r\n          </AuthorizeRouteView>\r\n\r\nNow, what I want to pass with the login route is the return url; that is the url from which the user is redirected, so that if the login succeed, I can redirect the user to the the page he wanted to access. I could do it, but as shown below, but it smells as a workaround, and I want to know if Blazor has a dedicated feature for this purpose, which I believe many users will need without resorting to workarounds.  This is the code that is supposed to do the job:\r\n    \r\n     @{\r\n          var returnUrl = routeData.PageType.Name.Equals(\"Index\") ? null : routeData.PageType.Name;\r\n                           \r\n          var str = returnUrl == null ? $\"Login/Index\" : $\"Login/{returnUrl}\";\r\n\r\n           NavigationManager.NavigateTo(str);\r\n     }\r\n \r\nNote: routeData.PageType.Name returns values such as Counter and FetchData, which is fine and I can use it as the return url. But it also returns Index, which is not so fine, because I can't use Index as a url...\r\nThis \"Login/Counter\" works, and this \"Login/FetchData\" aslo works, but this \"Login/Index\" does not exist.\r\n\r\nNote also that in the Login component, I define a parameter Property which will accept the return url value passed to the Login component. \r\n\r\nThis should be a common scenario, and that feature is much needed unless I've missed something. Thanks.   ",
    "comments_url": "https://api.github.com/repos/dotnet/aspnetcore/issues/17764/comments",
    "author": "enetstudio",
    "comments": [
      {
        "user": "javiercn",
        "created_at": "2019-12-11T11:03:00Z",
        "body": "@enetstudio thanks for contacting us.\r\n\r\nYou could write a \"Redirect\" component and use NavigaionManager.Uri to get the current URI, and then redirect appropriately."
      },
      {
        "user": "enetstudio",
        "created_at": "2019-12-12T00:07:44Z",
        "body": "Thank you very much for your quick and immensely  helpful response. I was well aware of NavigaionManager.Uri property, but I thought that I could not get the current uri as I wrongly believed that the page I was trying to access no longer exists, as a redirection to the App component has occurred. But I guess that  the App component ( and the Router embedded within) are not part of the routing. They are the routing agent themselves, and as long as no new routing (to a routable component)  has taken place, the current uri is that of the page I was trying to access (say, the FetchData page with the Authorize attribute). Am I right in my assumption ? Anyhow I did what you've suggested and it works great. Once again, many thanks..."
      }
    ]
  },
  {
    "number": 17739,
    "title": "Blazor Select binding doesn't bind initial value",
    "created_at": "2019-12-10T17:28:54Z",
    "closed_at": "2019-12-10T18:16:29Z",
    "labels": [
      "question",
      "area-blazor",
      ":heavy_check_mark: Resolution: Answered",
      "Status: Resolved"
    ],
    "url": "https://github.com/dotnet/aspnetcore/issues/17739",
    "body": "### Describe the bug\r\nIn s/s Blazor, a bound variable which is itself initialised to null does not reflect the initial state of a select box.\r\nThis bug is #10481 and possibly #9716 but these have been closed as dups or fixed, without it actually being fixed.\r\nI'm going to describe it again: I'm seeing it in 3.1, so it's definitely still around.\r\n\r\n### To Reproduce\r\n\r\n* Create a default server-side Blazor project in VS (ASP.Net Core 3.1, VS 16.4)\r\n* On some page of the demo app (I use the counter page) add the following markup:\r\n```\r\n<select @bind=\"SelectionValue\">\r\n    <option>Option A</option>\r\n    <option>Option B</option>\r\n</select>\r\n<button @onclick=\"TestClick\">Test Click</button>\r\n```\r\nand the following code\r\n```\r\n    string SelectionValue {get;set;}\r\n\r\n    void TestClick()\r\n    {\r\n        Console.WriteLine($\"Selection: '{SelectionValue}'\");\r\n    }\r\n```\r\n\r\n* Start the application in such a way as to be able to see the console\r\n* Navigate to the page but don't touch the select box (it will be showing \"Option A\")\r\n* Click on the \"Test Click\" button\r\n* Observe that the bound variable is null (i.e. you get `Selection: ''` printed to the console)\r\n* The only way to actually get \"Option A\" is to change the selection to Option B and then change it back.\r\n\r\nI don't need a work around (it's easy), but this behaviour doesn't feel like the 'principle of least surprise' - it's counter-intuitive that you wouldn't get the displayed value of the selection box in the bound variable.\r\nThe fact that the bug's been closed as fixed/dup previously makes me think this wasn't the original intention that it should work like this.\r\n\r\n### Further technical details\r\n- ASP.NET Core version 3.1.100\r\n- The IDE  VS16.4 on Win10\r\n",
    "comments_url": "https://api.github.com/repos/dotnet/aspnetcore/issues/17739/comments",
    "author": "willdean",
    "comments": [
      {
        "user": "SteveSandersonMS",
        "created_at": "2019-12-10T17:50:13Z",
        "body": "This is behaving as expected. Using `@bind` on an input/select writes to your model only when the \"change\" event occurs. It doesn't write to the model just because a `@bind` exists.\r\n\r\nIn this scenario, you shouldn't have the initial value of `SelectionValue` be something that can't be represented by the dropdown, because then you will have this inconsistent state until the user changes the dropdown value. Instead, set the initial value of `SelectionValue` to correspond to one of the entries in the dropdown, and then everything will be consistent.\r\n\r\nHope that makes sense."
      },
      {
        "user": "willdean",
        "created_at": "2019-12-10T18:16:29Z",
        "body": "Thanks Steve."
      }
    ]
  },
  {
    "number": 17661,
    "title": "OnAfterRenderAsync still called twice on 3.0.0-preview9.19465.2",
    "created_at": "2019-12-06T16:28:30Z",
    "closed_at": "2019-12-10T17:43:54Z",
    "labels": [
      "question",
      "area-blazor"
    ],
    "url": "https://github.com/dotnet/aspnetcore/issues/17661",
    "body": "### Describe the bug\r\nUsing server-side prerendering, if you have the following `OnAfterRenderAsync`:\r\n\r\n```\r\nprotected override async Task OnAfterRenderAsync(bool firstRender)\r\n{\r\n\tif (firstRender)\r\n\t{\r\n\t\tawait MyTask();\r\n\t\tConsole.WriteLine(\"FirstRender\");\r\n\t}\r\n\r\n\tConsole.WriteLine(\"OnAfterRenderAsync\");\r\n}\r\n```\r\n\r\nThen \"OnAfterRenderAsync\" is still written to the console _twice_ even though previously it was stated that starting in preview 9 `OnAfterRenderAsync` would _not_ be called during the prerendering lifecycle at all.\r\n\r\n### To Reproduce\r\n\r\n\r\nCreate a new blazor project with server-side prerendering enabled.\r\n\r\nCreate a component that overrides `OnAfterRenderAsync`\r\n\r\nThat override will be called twice during rendering.\r\n\r\n### Further technical details\r\n- ASP.NET Core version : 3.0.0-preview9.19465.2\r\n- IDE: VS2019 Version 16.3.8\r\n",
    "comments_url": "https://api.github.com/repos/dotnet/aspnetcore/issues/17661/comments",
    "author": "Oninaig",
    "comments": [
      {
        "user": "mkArtakMSFT",
        "created_at": "2019-12-06T17:05:27Z",
        "body": "Thanks for contacting us. \r\nThis should be fixed in the 3.0 RTM release. Please upgrade."
      },
      {
        "user": "javiercn",
        "created_at": "2019-12-06T20:15:45Z",
        "body": "@Oninaig could you upgrade to 3.1.0 RTM and see if it happens there, and in that case, provide a repro project that illustrates the problem?"
      },
      {
        "user": "Oninaig",
        "created_at": "2019-12-06T21:09:39Z",
        "body": "@javiercn I appreciate the quick response but I believe that @mkArtakMSFT is correct in that by default, a fresh out-of-the-box blazor server-side project will not call `OnAfterRenderAsync` twice on a component. \r\n\r\nAfter doing more digging, it appears my actual issue is due to the fact that any `@onclick=` actions (on buttons, for example) _automatically_ call `ShouldRefresh` and since `ShouldRefresh` doesn't have any parameters, its difficult to tell whether or not the call came from a button press or from some other event.\r\n\r\nConsider the following code:\r\n\r\nIn my .razor file:\r\n```\r\n<button class=\"btn btn-primary fas fa-sync\" @onclick=\"RefreshMessages\" disabled=\"@_refreshing\"></button>\r\n\r\n<GridComponent T=\"Events\" Grid=\"@_grid\"></GridComponent>\r\n\r\n\r\n```\r\n\r\nAnd in my code-behind:\r\n```\r\nprotected override bool ShouldRender()\r\n{\r\n\treturn base.ShouldRender();\r\n}\r\n\r\nprotected async Task RefreshMessages()\r\n{\r\n\tif (_grid != null)\r\n\t{\r\n\t\t_refreshing = true;\r\n\t\tawait _grid.UpdateGrid();\r\n\t\t_refreshing = false;\r\n\t}\r\n}\r\n```\r\n\r\nIf the call to `_grid.UpdateGrid();` has its own call to `StateHasChanged()` somewhere in the call stack for itself, it means that I wind up with 2 calls to `ShouldRender` on my parent component and therefore 2 calls to `OnAfterRenderAsync`. One call comes from the button press itself, and another from the child component's own call to `StateHasChanged`.\r\n\r\nI guess what I am really trying to do is to override `ShouldRender` in such a way that I can return `false` if the call to `ShouldRender` came from a simple button press when I know that I will be calling `StateHasChanged` at some point later in the call stack. However, I am worried that simply relying on `_refreshing` might not always give the same result. For example, if I change `ShouldRender` to this:\r\n\r\n```\r\nprotected override bool ShouldRender()\r\n{\r\n\tif (_refreshing)\r\n\t\treturn false;\r\n\telse\r\n\t\treturn base.ShouldRender();\r\n}\r\n```\r\nAm I guaranteed that `ShouldRender` will _always_ be called on the parent component _*before*_ `RefreshMessages` finishes and resets `_refreshing` to `false`?"
      },
      {
        "user": "javiercn",
        "created_at": "2019-12-10T17:43:54Z",
        "body": "> If the call to `_grid.UpdateGrid();` has its own call to `StateHasChanged()` somewhere in the call stack for itself, it means that I wind up with 2 calls to `ShouldRender` on my parent component and therefore 2 calls to `OnAfterRenderAsync`. One call comes from the button press itself, and another from the child component's own call to `StateHasChanged`.\r\n\r\nThat's not true if you are using ComponentBase.\r\n\r\nComponentBase will make sure that only one render gets triggered when multiple calls to StateHasChanged without a render in between, so there will only be a single render and a single OnAfterRender call\r\n"
      }
    ]
  },
  {
    "number": 17551,
    "title": "How to Log Controller/Handler Name From Middleware",
    "created_at": "2019-12-03T17:44:19Z",
    "closed_at": "2019-12-04T17:41:03Z",
    "labels": [
      "question",
      "area-mvc",
      ":heavy_check_mark: Resolution: Answered"
    ],
    "url": "https://github.com/dotnet/aspnetcore/issues/17551",
    "body": "I want to log (along with other things) the name of the controller that is ultimately invoked.  That seems to require that controllers make an explicit call or use an ActionFilter.  I don't want to encumber controller writers with that.   How can I do this in middleware?   Essentially I want to insert middleware between the endpoints and the controllers.\r\n\r\nAny recommendations?",
    "comments_url": "https://api.github.com/repos/dotnet/aspnetcore/issues/17551/comments",
    "author": "zachwieja",
    "comments": [
      {
        "user": "Kahbazi",
        "created_at": "2019-12-04T16:59:18Z",
        "body": "You can add a middleware after `UseRouting()` and before `UseEndpoints()` and use the endpoint metadata to get the controller name.\r\n\r\n```\r\napp.UseRouting();\r\n\r\napp.Use((context, next) =>\r\n{\r\n    var endpoint = context.GetEndpoint();\r\n    if (endpoint != null)\r\n    {\r\n        var controllerActionDescriptor = endpoint.Metadata.GetMetadata<ControllerActionDescriptor>();\r\n        if (controllerActionDescriptor != null)\r\n        {\r\n            var controllerName = controllerActionDescriptor.ControllerName;\r\n           // you can log controllerName here\r\n        }\r\n    }\r\n\r\n    return next();\r\n});\r\n\r\napp.UseEndpoints(endpoints =>\r\n{\r\n    endpoints.MapControllerRoute(\r\n        name: \"default\",\r\n        pattern: \"{controller=Home}/{action=Index}/{id?}\");\r\n});\r\n```"
      },
      {
        "user": "javiercn",
        "created_at": "2019-12-04T17:41:03Z",
        "body": "@zachwieja thanks for contacting us.\r\n\r\n@Kahbazi answer is correct, that's the appropriate approach."
      },
      {
        "user": "zachwieja",
        "created_at": "2019-12-04T20:59:20Z",
        "body": "Verified.  Thank you."
      }
    ]
  },
  {
    "number": 17416,
    "title": "Hosting bundle IIS reset / application pool recycle question",
    "created_at": "2019-11-26T14:04:04Z",
    "closed_at": "2019-12-03T10:50:29Z",
    "labels": [
      "question",
      "feature-iis",
      ":heavy_check_mark: Resolution: Answered",
      "area-networking"
    ],
    "url": "https://github.com/dotnet/aspnetcore/issues/17416",
    "body": "Hi,\r\nI'm currently working on expanding a setup application that downloads applications and puts them in a IIS folder. Some of the applications are asp. net core which require the hosting bundle to be installed. The setup module will install the bundle if it not found on the found on the target machine(which runs the setup application). When i was testing the bundle installer i saw in the eventlog all the application pools where recycled. \r\n\r\n- Why is this recycle started? \r\n    - Is this due to a IIS reset?  \r\n\r\nThe only thing i could think of was for the environment path that is added for the dotnet.exe location but we install everything in the default folders(C:\\Program Files\\dotnet).  \r\n\r\nThe web.configs for our asp.net core application all have a full path to the dotnet exe path. \r\n\r\n- Is the recycle necessary? \r\n    - Is there a way to turn this recycle off if it not necessary?\r\n\r\nI'm asking this because the customers where the applications are being installed can also have other application running on IIS and we don't want to disturb there process. \r\n\r\nKind regards,\r\n\r\nWalter\r\n",
    "comments_url": "https://api.github.com/repos/dotnet/aspnetcore/issues/17416/comments",
    "author": "WalterEbbers",
    "comments": [
      {
        "user": "jkotalik",
        "created_at": "2019-11-26T16:33:31Z",
        "body": "> Why is this recycle started?\r\n\r\nI don't think we explicitly restart IIS/WAS via the hosting bundle. From what I thought, we update the applicationhost.config file, which could trigger restarts based on the application itself. \r\n\r\n> The web.configs for our asp.net core application all have a full path to the dotnet exe path.\r\n\r\nCan you elaborate more on this?\r\n\r\nIn general, we don't recommend installing the hosting bundle while sites are running at the same time. Maybe do red green deployment or something like that instead to installing the bundle while the app isn't running."
      },
      {
        "user": "WalterEbbers",
        "created_at": "2019-11-26T17:27:28Z",
        "body": "> > Why is this recycle started?\r\n> \r\n> I don't think we explicitly restart IIS/WAS via the hosting bundle. From what I thought, we update the applicationhost.config file, which could trigger restarts based on the application itself.\r\n> \r\n> > The web.configs for our asp.net core application all have a full path to the dotnet exe path.\r\n> \r\n> Can you elaborate more on this?\r\n> \r\n> In general, we don't recommend installing the hosting bundle while sites are running at the same time. Maybe do red green deployment or something like that instead to installing the bundle while the app isn't running.\r\n\r\nThnx for the response!\r\n\r\nWhat i meant by the config was the following tag:\r\n` <aspNetCore processPath=\"C:\\Program Files\\dotnet\\dotnet.exe\" arguments=\".\\API.dll\" stdoutLogEnabled=\"true\" stdoutLogFile=\".\\logs\\stdout\" shutdownTimeLimit=\"1\" />`\r\n\r\nBut if the change to the applicationhost.config is necessary, we can give our customers who run the software the chance to perform the install at a moment when its suitable for them, but it would be helpful to us to know that this actually happens or that something else from the installer triggers the recycle. \r\n"
      },
      {
        "user": "analogrelay",
        "created_at": "2019-12-02T23:29:53Z",
        "body": "The hosting bundle installs an IIS module (ANCM) so IIS *has* to restart in order to load it. This is the expected behavior at this time."
      },
      {
        "user": "WalterEbbers",
        "created_at": "2019-12-03T10:50:29Z",
        "body": "@anurse \r\nThank you for the clarification!\r\n"
      }
    ]
  },
  {
    "number": 17259,
    "title": "In Blazor creating the Same Element Multiple times in DOM.",
    "created_at": "2019-11-20T13:27:51Z",
    "closed_at": "2019-11-20T13:56:01Z",
    "labels": [
      "question",
      "area-blazor"
    ],
    "url": "https://github.com/dotnet/aspnetcore/issues/17259",
    "body": "Is there any possibility of appending the same element multiple times in the DOM. I have tried this below case.\r\n\r\n```\r\n<button @onclick=\"clicked\">Update DOM</button>\r\n\r\n@if(rendered) { \r\n       <div id=\"Random_id\">Showed in DOM</div> \r\n }\r\n\r\n@code{` \r\n\r\n     private bool rendered { get; set; } = false\r\n     \r\n     private void clicked() {\r\n        this.rendered = true;\r\n        this.StateHasChanged();\r\n     }\r\n}\r\n```\r\n\r\nIn this case the same element is not appended in the DOM for multiple times. Any solution for this ?",
    "comments_url": "https://api.github.com/repos/dotnet/aspnetcore/issues/17259/comments",
    "author": "Indrajith-Sync",
    "comments": [
      {
        "user": "javiercn",
        "created_at": "2019-11-20T13:55:41Z",
        "body": "@Indrajith-Sync thanks for contacting us.\r\n\r\nYou don't need to call state has changed yourself. Blazor re-renders the entire UI and updates it based on the changes from the previous render (if any).\r\n\r\nIn your case you are simply rendering a single element conditionally, so that's what you will get. If you want to render multiple elements you would have to do something like keeping a counter of elements to render and writing a foreach loop for them.\r\n\r\n```\r\n<button @onclick=\"clicked\">Update DOM</button>\r\n\r\n@foreach(var index in Enumerable.Range(0,elementsNumber)) { \r\n       <div id=\"Random_@(index)\">Showed in DOM</div> \r\n }\r\n\r\n@code{` \r\n\r\n     private int elementsNumber { get; set; } = 0\r\n     \r\n     private void clicked() {\r\n        this.elementsNumber++;\r\n     }\r\n}\r\n```\r\n\r\n"
      },
      {
        "user": "Indrajith-Sync",
        "created_at": "2019-11-20T17:45:27Z",
        "body": "Thank you for your suggestions...! @javiercn"
      }
    ]
  },
  {
    "number": 17178,
    "title": "Question: Blazor NavigationManager.LocationChanged Async",
    "created_at": "2019-11-17T12:04:43Z",
    "closed_at": "2019-11-18T15:46:51Z",
    "labels": [
      "question",
      "area-blazor"
    ],
    "url": "https://github.com/dotnet/aspnetcore/issues/17178",
    "body": "In general what would be the best method (if any) to call awaitable methods from NavigationManager.LocationChanged, since NavigationManager.LocationChanged is not async? \r\n\r\nIs wrapping the awaitable Task call into Task.Run/Task.WaitAll acceptable? For example something like:\r\n\r\n```\r\nvar task = Task<bool>.Run(async () =>\r\n{\r\n   //Call await method here \r\n    return false;\r\n});\r\n\r\nTask.WaitAll(task);\r\nvar retVal = task.Result;\r\n```\r\n",
    "comments_url": "https://api.github.com/repos/dotnet/aspnetcore/issues/17178/comments",
    "author": "chassq",
    "comments": [
      {
        "user": "mrpmorris",
        "created_at": "2019-11-18T14:32:32Z",
        "body": "You can declare your handler method as `async Task`. DotNet won't await the result, but your method will be able to `await` other calls.\r\n\r\n```\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            Console.WriteLine(\"Hello World!\");\r\n\r\n            var p = new Parent();\r\n            p.SomeEvent += (s, e) => Console.WriteLine(\"Observer 1\");\r\n            p.SomeEvent += AsyncHandler;\r\n            p.SomeEvent += (s, e) => Console.WriteLine(\"Observer 2\");\r\n\r\n            p.TriggerSomeEvent();\r\n            Console.ReadLine();\r\n        }\r\n\r\n        public static async void AsyncHandler(object sender, EventArgs e)\r\n        {\r\n            await Task.Delay(1000);\r\n            Console.WriteLine(\"Async observer\");\r\n        }\r\n    }\r\n\r\n    public class Parent\r\n    {\r\n        public event EventHandler<EventArgs> SomeEvent;\r\n\r\n        public void TriggerSomeEvent()\r\n        {\r\n            SomeEvent?.Invoke(this, EventArgs.Empty);\r\n        }\r\n    }\r\n```\r\n\r\nOutput\r\n\r\n1. Hello world!\r\n2. Observer 1\r\n3. Observer 2\r\n4. Async observer"
      },
      {
        "user": "javiercn",
        "created_at": "2019-11-18T15:46:51Z",
        "body": "@chassq thanks for contacting us.\r\n\r\nThere are patterns around this. The best option you have is to encapsulate everything with in a task returning method that takes in a cancellation token as a parameter. Then register a handle in your LocationChange method and do something like this\r\n\r\n```charp\r\nif(_currentTask != null && !_currentTask.IsCompleted){\r\n   _currentCancellation.Cancel();\r\n}\r\n_ currentCancellationToken = new ...\r\n_currentTask = InvokeMyAsyncHandler(_currentCancellationToken)\r\n```\r\n\r\nIn general, do not use async void, and instead capture the existing task within your component and use the cancellation token to stop the work if for example another navigation gets triggered in between.\r\n\r\nI hope this helps."
      },
      {
        "user": "chassq",
        "created_at": "2019-11-18T16:27:57Z",
        "body": "Thank you very much!"
      }
    ]
  },
  {
    "number": 16945,
    "title": "[blazor]how to resolve prerender twice call ?",
    "created_at": "2019-11-09T16:30:01Z",
    "closed_at": "2019-11-11T11:18:02Z",
    "labels": [
      "question",
      "area-blazor"
    ],
    "url": "https://github.com/dotnet/aspnetcore/issues/16945",
    "body": "My component is instantiated twice, so ,if i write a lib ,i must avoid/careful use all before onafterrender things? what i can do\uff1f\r\n ",
    "comments_url": "https://api.github.com/repos/dotnet/aspnetcore/issues/16945/comments",
    "author": "git-net",
    "comments": [
      {
        "user": "javiercn",
        "created_at": "2019-11-10T11:39:45Z",
        "body": "@git-net thanks for contacting us.\r\n\r\nWhen you prerender the component runs\r\nOnInitialized\r\nOnInitializedAsync\r\nOnParametersSet\r\nOnParametersSetAsync\r\n\r\nWhen you don't prerender, the component runs\r\nOnInitialized\r\nOnInitializedAsync\r\nOnParametersSet\r\nOnParametersSetAsync\r\nOnAfterRender\r\nOnAfterRenderAsync\r\n\r\nThe first 4 methods will run twice, as the component is rendered twice, the first time into static html and the second one as an interactive component. You can avoid running code twice if you put it inside OnAfterRender, but otherwise it will run twice. As the component renders twice, is imperative that the same logic runs to produce the initial render."
      },
      {
        "user": "git-net",
        "created_at": "2019-11-11T02:19:00Z",
        "body": "i have some logic that can't run twice,and OnAfterRender looks later.\r\nnow i move some code to OnAfterRender,and check firstrender.\r\n```\r\nif(firstrender) { \r\n  ..... // init code here;  \r\ncomponentInit=true;//\r\nthis.StateHasChanged();\r\n}\r\n```\r\nand change my render code\r\n```\r\nif(componentInit) builder........\r\n```\r\ni means,use (OnAfterRender and firstrender ) do init things, and  force component rerender,is right way?\r\n"
      },
      {
        "user": "git-net",
        "created_at": "2019-11-11T03:34:54Z",
        "body": "constructor run twice too."
      },
      {
        "user": "javiercn",
        "created_at": "2019-11-11T11:17:35Z",
        "body": "@git-net That sounds abut right.\r\n\r\n> constructor run twice too.\r\n\r\nYes, this is expected too, as the app  prerenders, shuts down and then starts again."
      },
      {
        "user": "javiercn",
        "created_at": "2019-11-11T11:17:56Z",
        "body": "I'm closing this issue as the question has been answered and the behavior is by design."
      }
    ]
  },
  {
    "number": 16583,
    "title": "Blazor. OnParametersSet fires not as expected",
    "created_at": "2019-10-28T11:10:57Z",
    "closed_at": "2019-10-28T11:31:05Z",
    "labels": [
      "question",
      "area-blazor"
    ],
    "url": "https://github.com/dotnet/aspnetcore/issues/16583",
    "body": "Hi. It's simply component.\r\n**Index.razor:**\r\n```\r\n@page \"/\"\r\n\r\n<MyCoolComponent>\r\n    <Template>\r\n        <div style=\"background-color:red;height:100px;width:100px;\"></div>\r\n    </Template>\r\n</MyCoolComponent>\r\n\r\n<button @onclick=\"DoNothing\">Do Nothing</button>\r\n\r\n@code {\r\n    private void DoNothing(MouseEventArgs e)\r\n    {\r\n\r\n    }\r\n}\r\n```\r\n\r\n**MyCoolComponent.razor:**\r\n```\r\n@msg\r\n@Template\r\n\r\n@code {\r\n    [Parameter]\r\n    public RenderFragment Template { get; set; }\r\n    string msg;\r\n\r\n    protected override void OnParametersSet()\r\n    {\r\n        msg =$\"OnParametersSet of MyCoolComponent fires every time on click button on Parent Page, \" +\r\n                $\"last time in {DateTime.Now.ToString()}. Why?\";\r\n    }\r\n}\r\n```\r\n\r\nOnParametersSet event of MyCoolComponent fires every time on click button on Parent Page, why?",
    "comments_url": "https://api.github.com/repos/dotnet/aspnetcore/issues/16583/comments",
    "author": "kpolkovnikov",
    "comments": [
      {
        "user": "javiercn",
        "created_at": "2019-10-28T11:31:05Z",
        "body": "@kpolkovnikov thanks for contacting us.\r\n\r\nA new render fragment delegate gets created on each render (which happens automatically after the event-handler for `DoNothing` runs.\r\n\r\nBlazor can't determine that the new RenderFragment delegate is equal to the old render fragment delegate and it believes the parameters for the component have changed, thus invoking OnParametersSet with the new RenderFragment instance.\r\n\r\n@SteveSandersonMS can correct me if I'm wrong.\r\n\r\nI'm closing this issue as the question has been answered."
      },
      {
        "user": "SteveSandersonMS",
        "created_at": "2019-10-28T11:36:59Z",
        "body": "You're right @javiercn.\r\n\r\nLonger term I'm hoping we can find some optimizations where we detect common scenarios where the `RenderFragment` actually is the same. I would guess that if the delegate points to the same `MethodInfo` and `Target`, then it has to be the same. In the scenario posted here, since no variables are captured inside the closure, I would expect the `Target` values to be the same.\r\n\r\nIt's also possible that future C# compiler improvements will increase the range of cases where delegates are cached (it does this in a few cases already), so we may get some improvements automatically."
      },
      {
        "user": "kpolkovnikov",
        "created_at": "2019-10-28T11:39:44Z",
        "body": "Thank you for the supersonic answer) Is there a workaround in this scenario to prevent the OnParametersSet event from starting, such as by using @key or otherwise?"
      },
      {
        "user": "SteveSandersonMS",
        "created_at": "2019-10-28T12:07:07Z",
        "body": "@kpolkovnikov You can override `ShouldRender` to put in custom logic to skip rendering if you think it's unnecessary in certain cases."
      },
      {
        "user": "kpolkovnikov",
        "created_at": "2019-10-28T13:15:16Z",
        "body": "Thank you so much, Steve."
      }
    ]
  },
  {
    "number": 15216,
    "title": "Several migration issues",
    "created_at": "2019-10-21T11:48:34Z",
    "closed_at": "2019-10-21T18:20:51Z",
    "labels": [
      "question",
      "Needs: Author Feedback",
      "area-mvc"
    ],
    "url": "https://github.com/dotnet/aspnetcore/issues/15216",
    "body": "Hi,\r\n\r\nafter upgrading from 2.2 to 3.0, my Web API has several issues seemingly regarded to conventions changed in version 3.0 which I couldn't find a reference to in the migration docs.\r\n\r\nGeneral info:\r\nAll my controllers are based on a custom `ApiControllerBase` with this code:\r\n```\r\n    [ApiController]\r\n    public abstract class ApiControllerBase : ControllerBase\r\n    {\r\n    }\r\n```\r\nMy expectation is that all controllers which descend from this base controller have standard API controller behavior.\r\n\r\nThese are my issues:\r\n\r\n### GET request routing returns status 400 `A non empty request body is required`\r\n\r\nSource: \r\n```\r\n        [HttpGet]\r\n        [Route(\"{id}\")]\r\n        public async Task<TaskModel> GetByIdAsync(int id, IList<string> extend = null)\r\n        {\r\n            return await _service.GetByIdAsync(id, extend);\r\n        }\r\n```\r\nThis happens because the controller interprets the `extend` parameter to be contained in the request body. In version 2.2, this was correctly interpreted as a query parameter.\r\nMy question: This is a GET request. A GET request shouldn't have a body. Why does this error occur?\r\n\r\n### Unauthorized users get redirected to the login page\r\nOn API controllers, unauthorized users get redirected to the login page when unauthorized, HTML markup is returned with a 200 code. Why aren't 401 responses sent instead?\r\n\r\nThanks for your help!\r\n",
    "comments_url": "https://api.github.com/repos/dotnet/aspnetcore/issues/15216/comments",
    "author": "maxmantz",
    "comments": [
      {
        "user": "blowdart",
        "created_at": "2019-10-21T13:41:04Z",
        "body": "_On API controllers, unauthorized users get redirected to the login page when unauthorized, HTML markup is returned with a 200 code. Why aren't 401 responses sent instead?_\r\n\r\nWhat authorization are you using?"
      },
      {
        "user": "mkArtakMSFT",
        "created_at": "2019-10-21T16:57:15Z",
        "body": "Thanks for contacting us, @maxmantz.\r\nFor the `ApiController` marked controllers the complex and collection type parameters are automatically expected to be coming `FromBody`. This behavior was behind a compat flag in 2.2, which in case if you haven't been using it, may come up as a breaking change for you.\r\nYou can force this to work the way you want by decorating these parameters with `[FromQuery]` attribute explicitly."
      },
      {
        "user": "maxmantz",
        "created_at": "2019-10-21T18:20:51Z",
        "body": "@blowdart I'm using IdentityServer4, so this could be related to the usage of that library and not to AspNetCore. I will investigate this further,\r\n\r\n@mkArtakMSFT Thanks for your pointers to the solution. This will fix it for me. "
      }
    ]
  },
  {
    "number": 15209,
    "title": "Parsing Request Accept header: why is Mvc not using Microsoft.Net.Http.Headers.MediaTypeHeaderValue?",
    "created_at": "2019-10-20T17:37:41Z",
    "closed_at": "2019-10-21T09:24:34Z",
    "labels": [
      "question",
      "area-mvc"
    ],
    "url": "https://github.com/dotnet/aspnetcore/issues/15209",
    "body": "There seems to be a redundancy in the framework to parse accept headers request. \r\nOn the one hand there's the type `AcceptHeaderParser `in `Microsoft.AspNetCore.Mvc.Formatters `which we used to handle content negotiation, but it has recently been made internal so we had to find another solution.\r\nOn the other hand, there's `Microsoft.Net.Http.Headers.MediaTypeHeaderValue` , which also parses headers, but the results are a bit different, regarding the Quality property parsing. \r\nWhich one are we supposed to use? We switched to `MediaTypeHeaderValue `because it's still public, but they seem to be redundant and do the same work, with some small differences... \r\nI notice that the `DefaultOutputFormatterSelector` is using the internal `Microsoft.AspNetCore.Mvc.Formatters.AcceptHeaderParser` and I was wondering why there's not just one implementation to parse headers.",
    "comments_url": "https://api.github.com/repos/dotnet/aspnetcore/issues/15209/comments",
    "author": "anna-git",
    "comments": [
      {
        "user": "javiercn",
        "created_at": "2019-10-21T09:24:14Z",
        "body": "> There seems to be a redundancy in the framework to parse accept headers request.\r\n\r\nThis is due to historical reasons. We optimized the parser on the MVC side to minimize allocations and we had some different requirements due to clients not correctly following the spec.\r\n\r\nThe headers in Microsoft.Net.Http.Headers.MediaTypeHeaderValue follow the spec as close as possible, while the ones MVC uses for parsing are a little bit more permisive and support some invalid constructs like \"*\" or \"*/\" that are known to be sent by some non-conforming clients.\r\n\r\nUsing `Microsoft.Net.Http.Headers.MediaTypeHeaderValue` should be fine for your case"
      },
      {
        "user": "anna-git",
        "created_at": "2019-10-21T10:02:05Z",
        "body": "ok ! Thank you for this crystal clear explanation :)"
      }
    ]
  },
  {
    "number": 15161,
    "title": "RenderFragment ignores component's initialized values",
    "created_at": "2019-10-18T18:11:31Z",
    "closed_at": "2019-10-21T11:22:27Z",
    "labels": [
      "question",
      "area-blazor"
    ],
    "url": "https://github.com/dotnet/aspnetcore/issues/15161",
    "body": "`RenderFragment` ignores my initialized values.  In the following code, everytime there's a mouse click, a new object is created with the mouse coordinates where the click occurred.  During the rendering section in razor, the markup is generated as expected, but the `Coordinate` parameter is zero. The `CustomText` doesn't have this issue.\r\n\r\nThis is clearly a bug since it is unexpected and inconsistent. On a side note, why is `RenderFragment` emitting \"<!--!-->\"?\r\n\r\n```\r\n<div><!--!-->\r\n        <!--!--><div>Before the component</div>\r\n        <!--!--><!--!--><text x=\"0\" y=\"0\">Custom Text</text><!--!-->\r\n        <!--!--><div>Afterthe component</div>\r\n    </div>\r\n```\r\n\r\n```\r\nTextDesignObject.razor\r\n-----------------------\r\n@Markup\r\n\r\n@code\r\n{\r\n        public MarkupString Markup { get; private protected set; }\r\n\r\n        public string Style { get; set;  }\r\n        private PointF _coordinate;\r\n        [Parameter]\r\n        public PointF Coordinate { get => _coordinate; set { Console.WriteLine(\"Coordinate setter called\");  _coordinate = value; } }\r\n\r\n    public string CustomText { get; set; } = \"Custom Text\";\r\n    public string FontStyle { get; }\r\n\r\n    protected override void OnInitialized() {\r\n        var svgString = new string(\"<text x=\" + Coordinate.X + \" y=\" + Coordinate.Y + \">\" + CustomText + \"</text>\");\r\n        Markup = new MarkupString(svgString.ToString());\r\n    }\r\n}\r\n\r\nDesigner.razor\r\n---------------\r\n@foreach (var designObject in ToolService.DesignObjects)\r\n{\r\n    Console.WriteLine(\"Binding MouseCoordinate to DesignObject...\");\r\n    RenderFragment renderFragment = builder =>\r\n    {\r\n        builder.OpenComponent(0, designObject.GetType()); \r\n        builder.CloseComponent();\r\n    };\r\n    <div>\r\n        <div>Before the component</div>\r\n        @renderFragment\r\n        <div>After the component</div>\r\n    </div>\r\n}\r\n\r\n\r\n@code {\r\n    [Parameter]\r\n    // Create a new design object based on selected tool\r\n    private void OnDesignPanelClicked(MouseEventArgs e)\r\n    {\r\n        Console.WriteLine(\"CallingCreateDesignObject...\");\r\n        var designObject = ToolService.SelectedTool.CreateDesignObject();\r\n        if (designObject == null) return;\r\n        \r\n        Console.WriteLine(\"Setting design object to mouse coordinates.\");\r\n        designObject.Coordinate = new PointF((float) e.ClientX,  (float) e.ClientY);\r\n        Console.Write(designObject.Coordinate);\r\n        \r\n        Console.WriteLine(\"Adding new DesignObject\");\r\n        ToolService.DesignObjects.Add(designObject);\r\n    }\r\n}\r\n\r\n```",
    "comments_url": "https://api.github.com/repos/dotnet/aspnetcore/issues/15161/comments",
    "author": "Joebeazelman",
    "comments": [
      {
        "user": "javiercn",
        "created_at": "2019-10-21T11:21:41Z",
        "body": "@Joebeazelman Thanks for contacting us.\r\n\r\nYou are not passing in the designObject instance in the render fragment, you are only passing the type.\r\nThe coordinate is the default value because you are not passing it as a parameter inside the RenderFragment (which would be the appropriate way to do it).\r\nThe text is set in the property setter to a default value and its not defined as a parameter, so its value will always be constant.\r\n\r\nYou can't pass in a component instance directly in Blazor as that breaks the Blazor rendering model where Blazor itself is responsible for the lifecycle of the components.\r\n\r\nTo achieve your scenario I suggest you separate your component from your component model and iterate over the list of component models and pass in the parameters to the underlying components from the associated component model.\r\n\r\nI would also suggest (based on what I infer you are trying to do, that you give each component a unique identity using `@key=componentModel.key` which will help the renderer produce a better result according to what you are trying to implement.\r\n\r\nI would also discourage you from using `MarkupString` directly as that will open an attack vector for XSS.\r\n\r\n```\r\nDesigner.razor\r\n---------------\r\n@foreach (var designObject in ToolService.DesignObjects)\r\n{\r\n    RenderFragment renderFragment = builder =>\r\n    {\r\n        builder.OpenComponent(0, designObject.ComponentType);\r\n        builder.SetKey(designObject.Key);\r\n        builder.AddAttribute(1, designObject.Coordinates);\r\n        builder.CloseComponent();\r\n    };\r\n    <div>\r\n        <div>Before the component</div>\r\n        @renderFragment\r\n        <div>After the component</div>\r\n    </div>\r\n}\r\n```\r\n\r\n"
      },
      {
        "user": "javiercn",
        "created_at": "2019-10-21T11:22:27Z",
        "body": "Closing the issue as the behavior is by design and not a bug."
      },
      {
        "user": "Joebeazelman",
        "created_at": "2019-10-23T19:20:13Z",
        "body": "Thanks Javier.  My code is based on what I could find on the web.  It didn't make any sense to me either. I was merely trying to dynamically create a list of polymorphic components.  It was unclear whether Blazor supports it or not, but now it's settled. So dynamic creation isn't supported as a first class citizen as I was expecting.  "
      }
    ]
  },
  {
    "number": 14974,
    "title": "`dotnet publish` produces executable specific to OS it's executed on",
    "created_at": "2019-10-14T05:12:59Z",
    "closed_at": "2019-10-16T18:11:46Z",
    "labels": [
      "question",
      "feature-platform",
      "area-networking"
    ],
    "url": "https://github.com/dotnet/aspnetcore/issues/14974",
    "body": "I noticed that Windows hosting the `dotnet publish` gets an EXE file, while Linux (Ubuntu) gets an extensionless executable file named by the assembly. Under assumption that produced DLL and json-config files are actually exactly the same (regardless of where this process executes), shouldn't the process produce entrypoint binaries for all supported operating systems [at the same time]? Maybe I'm not noticing that the behavior that I'm after is actually present? The behavior that I'm noticing might complicate the build-process in certain scenarios. I just wanted to bring it to your attention. Thanks.",
    "comments_url": "https://api.github.com/repos/dotnet/aspnetcore/issues/14974/comments",
    "author": "hlubovac",
    "comments": [
      {
        "user": "davidfowl",
        "created_at": "2019-10-14T05:23:45Z",
        "body": "That's by design, executables are platform specific. The cross platform version of the binary is the .dll file which you can execute with `dotnet MyApp.dll`."
      },
      {
        "user": "hlubovac",
        "created_at": "2019-10-14T05:40:49Z",
        "body": "Thank you.\r\n\r\nBut then, what is their purpose - since the application is launched primarily as `dotnet [path-to-main-assembly]`?\r\n\r\nWhile I do understand that these executables cannot be the same [for all platforms], I still think that the `dotnet build` should produce them all - or not produce any (since they are aliases, anyway). If they are there for some double-clicking convenience or some other purpose that I'm not seeing, then people that rely on them must compile their apps on multile platforms (the same number of times) - if they rely on having that convenience. Perhaps it's technically impossible for any supported platform to produce executables for other platforms, which I wouldn't know..."
      },
      {
        "user": "davidfowl",
        "created_at": "2019-10-14T05:45:05Z",
        "body": "> But then, what is their purpose - since the application is launched primarily as dotnet [path-to-main-assembly]?\r\n\r\n- Easy way to launch (double click)\r\n- A way to distinguish processes when using (ps or task manager on windows)\r\n\r\n> While I do understand that these executables cannot be the same [for all platforms], I still think that the dotnet build should produce them all - or not produce any (since they are aliases, anyway). If they are there for some double-clicking convenience or some other purpose that I'm not seeing, then people that rely on them must compile their apps on multile platforms (the same number of times) - if they rely on having that convenience. Perhaps it's technically impossible for any supported platform to produce executables for other platforms, which I wouldn't know...\r\n\r\nI don't agree. That would be too much bloat, add to my build time and isn't the majority use case. Instead, you can pass the required RIDs you care about to get the executables for those platforms. \r\n"
      },
      {
        "user": "hlubovac",
        "created_at": "2019-10-14T05:52:13Z",
        "body": "I see. You're likely referring to `--runtime` argument, which I didn't have a chance to learn about [until now]. Thank you. I'll read up on RID's."
      },
      {
        "user": "hlubovac",
        "created_at": "2019-10-14T17:10:53Z",
        "body": "Maybe a way to disable producing runtime-specific executables would be nice. :-)\r\n\r\nI tried passing empty/null/false to `--runtime`, hoping to achieve this. It's not a big deal - just more confusing [to me] then without. There is `--self-contained` that relates also (which needs to be set to false, looks like, when `--runtime` is used to achieve equivalents to the default behavior described above, cross-platform)."
      },
      {
        "user": "joshudson",
        "created_at": "2019-10-16T14:41:14Z",
        "body": "To build the launcher you want, build the rid for the launcher you want, keep the launcher, and throw the rest away. If/when the bsd port happens, you will discover your request would try to build two binaries of the same name."
      }
    ]
  },
  {
    "number": 14800,
    "title": "ElementReference causes \"Invalid JSON\" exception when returned to JavaScript",
    "created_at": "2019-10-07T21:51:24Z",
    "closed_at": "2019-10-08T16:48:07Z",
    "labels": [
      "question",
      "area-blazor"
    ],
    "url": "https://github.com/dotnet/aspnetcore/issues/14800",
    "body": "### Describe the bug\r\nCalling C# from JavaScript, then JavaScript from C# to obtain ElementReferences, then returning those ElementReferences to C#, Blazor throws an exception:\r\n```\r\nblazor.webassembly.js:1 Uncaught (in promise) Error: System.Text.Json.JsonException: Invalid JSON\r\n  at Microsoft.JSInterop.Infrastructure.DotNetDispatcher.EndInvokeJS (/Microsoft.JSInterop.JSRuntime jsRuntime, System.String arguments) <0x20ed888 + 0x000fc> in <4e424253df194e1299a1044d93a79164>:0 \r\n  at Mono.WebAssembly.Interop.MonoWebAssemblyJSRuntime.EndInvokeJS (/System.String argsJson) <0x20e4a58 + 0x0000a> in <d0b620549c284928acbf6b89d371ca02>:0 \r\n    at Object.callMethod (blazor.webassembly.js:1)\r\n    at Object.endInvokeJSFromDotNet (blazor.webassembly.js:1)\r\n    at blazor.webassembly.js:1\r\n```\r\n\r\n### To Reproduce\r\nSteps to reproduce the behavior:\r\n- .Net Core 3.0.0-100\r\n- dotnet new blazorwasm\r\n\r\nCreate a JavaScript method that creates an element:\r\n```javascript\r\nwindow.CreateElement = (text) => {\r\n  var element = document.createElement(\"span\");\r\n  element.innerText = text;\r\n  return element;\r\n}\r\n```\r\nCreate a [JSInvokable] C# method:\r\n```csharp\r\n[JSInvokable]\r\npublic static async Task<List<ElementReference>> GetElements(){\r\n  List<ElementReference> refs = new List<ElementReference>();\r\n  refs.Add(await JSInterop.InvokeAsync<ElementReference>(\"CreateElement\",\"first\"));\r\n  refs.Add(await JSInterop.InvokeAsync<ElementReference>(\"CreateElement\",\"second\"));\r\n  return refs;\r\n}\r\n```\r\nCreate another JavaScript function that calls the C# method:\r\n```javascript\r\nwindow.Test = async () => {\r\n  var refs = await DotNet.InvokeAsync(\"TestProject\",\"GetElements\");\r\n}\r\n```\r\nInvoke window.Test.\r\n\r\n### Expected behavior\r\nExpect no exception to be thrown, and for the elements created by the CreateElement method to be returned to the Test method.\r\n",
    "comments_url": "https://api.github.com/repos/dotnet/aspnetcore/issues/14800/comments",
    "author": "HughPH",
    "comments": [
      {
        "user": "mkArtakMSFT",
        "created_at": "2019-10-08T16:48:07Z",
        "body": "Thanks for contacting us, @HughPH.\r\n`ElementReference` is a reference to a DOM element that Blazor has rendered. It cannot be used to refer an element rendered by JavaScript as Blazor has no knowledge of it. You can pass the element id from JavaScript to Blazor and then use it as string internally."
      },
      {
        "user": "HughPH",
        "created_at": "2019-10-09T15:54:57Z",
        "body": "@mkArtakMSFT Thanks for the reply, that makes sense. I had expected that Blazor would 'foster'  (temporarily adopt) unknown elements and create a new _internalId for them, keeping them immutable but referable, then 'translate' them back to their JavaScript object references when being passed back across the divide."
      }
    ]
  },
  {
    "number": 14702,
    "title": "How to add multiple styles using the IDictionary<string, object> in Blazor attributes ?",
    "created_at": "2019-10-03T13:24:15Z",
    "closed_at": "2019-10-03T15:20:46Z",
    "labels": [
      "question",
      "area-blazor"
    ],
    "url": "https://github.com/dotnet/aspnetcore/issues/14702",
    "body": "### Below is the code blow which throws an exception as this key value already exists.\r\n\r\n\"<div @attributes=\"@_Attributes\"></div>\"\r\n\r\n@code {\r\nprivate IDictionary<string, object> _Attributes = new Dictionary<string, object>();\r\n\r\n// This adds to the element\r\n_Attributes.Add(\"style\", \"width:\" + this.width);\r\n\r\n// This throws an exception that the key value already exists\r\n_Attributes.Add(\"style\", \"height:\" + this.height);\r\n}\r\n\r\nCan anyone suggest a solution for this  to achieve in any other way.?\r\n",
    "comments_url": "https://api.github.com/repos/dotnet/aspnetcore/issues/14702/comments",
    "author": "Indrajith-Sync",
    "comments": [
      {
        "user": "mkArtakMSFT",
        "created_at": "2019-10-03T15:20:46Z",
        "body": "Thanks for contacting us, @Indrajith-Sync.\r\nAttribute Splatting (the @attributes directive) is meant to be used for applying different attributes to an  element. In this case you're trying to apply multiple sub-values to the same `style` attribute.\r\nYou have two options here, either concatenate both `width` and `height` pieces into a single string when applying to style (using the attribute splatting technique), or directly set the `style` attribute on the `div`."
      },
      {
        "user": "mkArtakMSFT",
        "created_at": "2019-10-03T15:52:09Z",
        "body": "Here is a sample:\r\n```razor\r\n@page \"/\"\r\n\r\n<h1>Hello, world!</h1>\r\n\r\nWelcome to your new app.\r\n<div @attributes=\"attributes\">option 1</div>\r\n<div style=\"@Style\">option 2</div>\r\n\r\n@code{\r\n    public IDictionary<string, object> attributes = new Dictionary<string, object>();\r\n\r\n    public string Style { get; set; }\r\n    \r\n    public int Width { get; set; } = 300;\r\n    public int Height { get; set; } = 15;\r\n\r\n    protected override void OnInitialized()\r\n    {\r\n        this.Style = $\"width: {Width}px; height: {Height}px; border: 1px solid red;\";\r\n\r\n        this.attributes.Add(\"style\", this.Style);\r\n    }\r\n}\r\n```"
      },
      {
        "user": "Indrajith-Sync",
        "created_at": "2019-10-04T03:06:43Z",
        "body": "Hi @mkArtakMSFT \r\n\r\nThanks it works fine..!"
      }
    ]
  },
  {
    "number": 14699,
    "title": "[Blazor] AuthorizeView Policy=<value> bug when <value> comes from variable",
    "created_at": "2019-10-03T11:31:07Z",
    "closed_at": "2019-10-03T16:14:21Z",
    "labels": [
      "question",
      "area-blazor"
    ],
    "url": "https://github.com/dotnet/aspnetcore/issues/14699",
    "body": "### Description\r\nIn **Blazor**, When trying to use tag `AuthorizeView Policy=<some-value>` with property value being a string variable, it does not behave the same as if property value was a raw string.\r\n\r\n### To Reproduce\r\nSteps to reproduce the behavior:\r\n1. Using this version of ASP.NET Core '3.0.1'\r\n2. Run this code \r\n```\r\n<AuthorizeView Policy=ADMINS_ONLY >\r\n    <Authorized>\r\n        Authorized...\r\n    </Authorized>\r\n    <NotAuthorized>\r\n        NotAuthorized\r\n    </NotAuthorized>\r\n</AuthorizeView>\r\n\r\n@code {\r\n    private string ADMINS_ONLY = \"AdminsOnly\";\r\n}\r\n```\r\n\r\n3. Should work like this \r\n```\r\n<AuthorizeView Policy=\"AdminsOnly\">\r\n    <Authorized>\r\n        Authorized...\r\n    </Authorized>\r\n    <NotAuthorized>\r\n        NotAuthorized\r\n    </NotAuthorized>\r\n</AuthorizeView>\r\n```\r\n\r\n4. See error\r\n`blazor.server.js:15 [2019-10-03T11:20:53.249Z] Error: There was an unhandled exception on the current circuit, so this circuit will be terminated. For more details turn on detailed exceptions in 'CircuitOptions.DetailedErrors'.`\r\n\r\n### Expected behavior\r\nThe AuthorizeView should call the AuthorizationHandler as provided by the policy setup (in this case: the policy named \"AdminsOnly\").\r\n\r\nUpdate: clearifying area of effect",
    "comments_url": "https://api.github.com/repos/dotnet/aspnetcore/issues/14699/comments",
    "author": "henkla",
    "comments": [
      {
        "user": "rynowak",
        "created_at": "2019-10-03T16:11:24Z",
        "body": "String properties require the `@` to use variable/expressions. My guess is that this is passing the value `ADMINS_ONLY` into your `AuthorizeView` and not `AdminsOnly` as you expect.\r\n\r\nTry:\r\n```html\r\n<AuthorizeView Policy=\"@ADMINS_ONLY\">\r\n```"
      },
      {
        "user": "henkla",
        "created_at": "2019-10-03T16:12:49Z",
        "body": "Wow. That's pretty... dumb of me. Thanks."
      },
      {
        "user": "rynowak",
        "created_at": "2019-10-03T16:14:07Z",
        "body": "no worries \ud83d\udc4d "
      }
    ]
  },
  {
    "number": 14246,
    "title": "Blazor Server should use absolute paths for blazor.server.js and for connecting to the Blazor hub",
    "created_at": "2019-09-23T06:09:17Z",
    "closed_at": "2019-09-23T22:58:22Z",
    "labels": [
      "question",
      "area-blazor"
    ],
    "url": "https://github.com/dotnet/aspnetcore/issues/14246",
    "body": "It looks like Blazor Server is using relative paths in a couple of places that limit when it can be used. This caused some issues when I tried to use Blazor components in an MVC app on any view other than the home page.\r\n\r\nRepro steps:\r\n\r\n- Create an MVC app\r\n- Add `services.AddServerSideBlazor()` to `Startup.ConfigureServices` and `endpoints.MapBlazorHub()` in `Startup.Configure`.\r\n- Add the *blazor.server.js* script to the layout using the script tag we use in the Blazor Server template: `<script src=\"_framework/blazor.server.js\"></script>`\r\n- Add a Razor component to the project with some sort of user interactivity support.\r\n- Add the component to the *Privacy.cshtml* page: `@(await Html.RenderComponentAsync<MyComponent>(RenderMode.ServerPrerendered))`\r\n- Run the app and browser to the Privacy page\r\n\r\nActual result:\r\n- The component is not interactive, because the request for *blazor.server.js* goes to */Home/_framework/blazor.server.js*. \r\n- To work around this issue, update the script tag to use `~/`: `<script src=\"~/_framework/blazor.server.js\"></script>`. **Should we do this everywhere?**\r\n- The component is still not interactive because the SignalR client tries to connect to `/Home/_blazor/`. This seems like a bug we need to fix in *blazor.server.js*?\r\n",
    "comments_url": "https://api.github.com/repos/dotnet/aspnetcore/issues/14246/comments",
    "author": "danroth27",
    "comments": [
      {
        "user": "javiercn",
        "created_at": "2019-09-23T13:23:54Z",
        "body": "Using base relative paths is deliberate. If you serve components from a different path you can add\r\n```\r\n<base href=\"~/\" />\r\n```\r\nto set the base path correctly.\r\n\r\nAlternatively, you can configure the url explicitly in the blazor signalr options using\r\n```\r\nBlazor.start({\r\n                configureSignalR: builder.UseUrl('@Html.Content(\"/_blazor\")'\r\n            });\r\n```"
      },
      {
        "user": "SteveSandersonMS",
        "created_at": "2019-09-23T14:43:30Z",
        "body": "Yes, you **must** set `<base href>` correctly otherwise other things can't work either (routing). Given correct base href, the relative URLs are correct, so this is by design.\r\n\r\nLeaving open just so it comes up in triage in case there's anything else to say."
      },
      {
        "user": "mkArtakMSFT",
        "created_at": "2019-09-23T16:19:44Z",
        "body": "Closing this as answered."
      },
      {
        "user": "danroth27",
        "created_at": "2019-09-23T22:58:22Z",
        "body": "~~Set the base URI where? On each page for whatever route? ~~\r\n\r\nNevermind! @javiercn and I chatted about it and adding `<base \"~/\" />` to the layout makes it all work great. Yay!"
      }
    ]
  },
  {
    "number": 14144,
    "title": "Blazor String Parameters in event handlers in the new Preview 9, rc.",
    "created_at": "2019-09-19T12:07:15Z",
    "closed_at": "2019-09-19T16:41:37Z",
    "labels": [
      "question",
      "area-blazor"
    ],
    "url": "https://github.com/dotnet/aspnetcore/issues/14144",
    "body": "### Is your feature request related to a problem? Please describe.\r\n\r\nHi I just updated from AspNetCore 3.0 Preview 7 to AspNetCore 3.0 RC1 and there the event handler syntax changed significantly.\r\n\r\nThe old version was this:\r\nonclick=@(async ()=> SetPagerSize(\"forward\"))\r\n\r\nI havent found something yet, but is there a way to pass strings as parameters.\r\n\r\nThere passing string parameters was possible \r\n\r\nHow can I pass strings to functions in RC1?\r\n\r\n<button class=\"btn pagebutton btn-secondary\" @onclick=\"(async ()=> NavigateToPage(\"next\"))\">Next</button>\r\n\r\n\r\nsince the content of @onclick= needs to be inside \"\", the string \"next\" will end this string. Is there already a syntax to fix this? When I use '' like in javascript \r\n\r\n### Describe the solution you'd like\r\nNot shure what would be the best soltion, now I extract all my strings to constants. In javascript you can always use '' inside the \"\", but that would violate the C# syntax.\r\n\r\n",
    "comments_url": "https://api.github.com/repos/dotnet/aspnetcore/issues/14144/comments",
    "author": "MichaelPeter",
    "comments": [
      {
        "user": "MV10",
        "created_at": "2019-09-19T13:54:28Z",
        "body": "Enclose it with apostrophes:\r\n\r\n`@onclick='(async () => await Foo(\"bar\"))'`"
      },
      {
        "user": "mkArtakMSFT",
        "created_at": "2019-09-19T16:41:08Z",
        "body": "Thanks for contacting us, @MichaelPeter .\r\nThe parser is smart enough to still parse `\"`, even when it seems it's wrapped twice:\r\n```razor \r\n@OnClick=\"@(async ()=> NavigateToPage(\"next\"))\"\r\n```"
      },
      {
        "user": "mkArtakMSFT",
        "created_at": "2019-09-19T16:41:35Z",
        "body": "If this is not working for you, please let us know and we'll look into this further."
      },
      {
        "user": "MichaelPeter",
        "created_at": "2019-09-19T16:53:49Z",
        "body": "Thanks that solved my problem :) "
      }
    ]
  },
  {
    "number": 13895,
    "title": "context.Features.Get<IHttpMaxRequestBodySizeFeature>() is null during test",
    "created_at": "2019-09-11T15:54:52Z",
    "closed_at": "2019-09-16T20:06:06Z",
    "labels": [
      "question",
      "enhancement",
      "area-networking"
    ],
    "url": "https://github.com/dotnet/aspnetcore/issues/13895",
    "body": "### Describe the bug\r\nWhen writing a XUNIT test for testing for max body sizes, the line\r\n\r\n```C#\r\ncontext.Features.Get<IHttpMaxRequestBodySizeFeature>()\r\n```\r\nthrows a error of \r\n\r\n```\r\nSystem.NullReferenceException: 'Object reference not set to an instance of an object.'\r\n```\r\n\r\n```C#\r\nprivate readonly WebApplicationFactory<XXXX.Startup> _webAppFactory;\r\n\r\n var webAppClient = _webAppFactory\r\n                .WithWebHostBuilder(\r\n                builder =>\r\n                {\r\n                    builder.UseSolutionRelativeContentRoot(@\"..\\..\\\", \"XXXX.sln\");              \r\n                    builder.Configure(app =>\r\n                    {\r\n                        app.Run(async context =>\r\n                        {\r\n                            context.Features.Get<IHttpMaxRequestBodySizeFeature>().MaxRequestBodySize = 100_000_000;\r\n                        });\r\n\r\n                    });\r\n                }\r\n            )\r\n            .CreateClient(clientOptions);\r\n````\r\n\r\n### To Reproduce\r\nSteps to reproduce the behavior:\r\n1. Using this version of ASP.NET Core '...'\r\n2. Run this code '....'\r\n3. With these arguments '....'\r\n4. See error\r\n\r\n### Expected behavior\r\n`context.Features.Get<IHttpMaxRequestBodySizeFeature>()` not to be and be able to set the value of MaxRequestBodySize to a given value\r\n\r\n\r\n### Additional context\r\nAdd any other context about the problem here.\r\nInclude the output of `dotnet --info`\r\n dotnet --info\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.100\r\n Commit:    b9f2fa0ca8\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.15063\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.100\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.0\r\n  Commit:  1249f08fed\r\n\r\n.NET Core SDKs installed:\r\n  2.1.403 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.505 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.602 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.100 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]",
    "comments_url": "https://api.github.com/repos/dotnet/aspnetcore/issues/13895/comments",
    "author": "rezvanf",
    "comments": [
      {
        "user": "davidfowl",
        "created_at": "2019-09-12T03:33:45Z",
        "body": "That\u2019s fine, check for null and noop if it\u2019s null. Features are optional and this one does not need to be in the test server "
      },
      {
        "user": "Tratcher",
        "created_at": "2019-09-12T16:00:27Z",
        "body": "Wouldn't hurt to add, we are trying to emulate most server behavior."
      },
      {
        "user": "davidfowl",
        "created_at": "2019-09-12T16:07:22Z",
        "body": "Yes but we need to train people that features are optional. It should be null checked "
      },
      {
        "user": "rezvanf",
        "created_at": "2019-09-13T19:24:59Z",
        "body": "Ok I agree about null checking, that makes sense.\r\nIn this particular case the unit test is testing a middleware that set value of the  Get<IHttpMaxRequestBodySizeFeature>().MaxRequestBodySize . We have had to provide a *Test* Startup which overrides the Configure and Configure services.\r\n\r\nThe override configure then uses a mock to set the value \r\n"
      },
      {
        "user": "analogrelay",
        "created_at": "2019-09-16T20:06:06Z",
        "body": "> In this particular case the unit test is testing a middleware that set value of the Get().MaxRequestBodySize . We have had to provide a _Test_ Startup which overrides the Configure and Configure services.\r\n\r\nYep, that's the expected way to test a component like this. The test server doesn't provide the feature but you are welcome to register one yourself prior to testing your code.\r\n\r\nClosing this as I don't believe there is any actionable work on our end at this time."
      }
    ]
  },
  {
    "number": 13713,
    "title": "Question: How to update EditContext.FieldClass from preview8 to preview9?",
    "created_at": "2019-09-05T13:07:33Z",
    "closed_at": "2019-09-05T16:35:23Z",
    "labels": [
      "question",
      "area-blazor"
    ],
    "url": "https://github.com/dotnet/aspnetcore/issues/13713",
    "body": "How can we update `EditContext?.FieldClass(FieldIdentifier)` from preview8 to preview9? Is `EditContext?.FieldCssClass(FieldIdentifier)` the equivalent?",
    "comments_url": "https://api.github.com/repos/dotnet/aspnetcore/issues/13713/comments",
    "author": "SeppPenner",
    "comments": [
      {
        "user": "mkArtakMSFT",
        "created_at": "2019-09-05T16:35:19Z",
        "body": "Thanks for contacting us, @SeppPenner .\r\nYes, this was renamed to `FieldCssClass`."
      },
      {
        "user": "SeppPenner",
        "created_at": "2019-09-06T07:51:51Z",
        "body": "Ok, thanks for the fast reply :)"
      }
    ]
  },
  {
    "number": 13195,
    "title": " JsonSerializerOptions has no setter",
    "created_at": "2019-08-16T18:54:22Z",
    "closed_at": "2019-08-20T03:08:59Z",
    "labels": [
      "question",
      "area-mvc"
    ],
    "url": "https://github.com/dotnet/aspnetcore/issues/13195",
    "body": "When I want to set new options with `AddJsonOptions` the `JsonSerializerOptions` is read-only.\r\n```C#\r\npublic static void ConfigureServices(this IServiceCollection services)\r\n{\r\n    services.AddControllers().AddJsonOptions(options =>\r\n    {\r\n        options.JsonSerializerOptions = new JsonSerializerOptions(); // compile error\r\n    });\r\n}\r\n```\r\nSo here I think `AddJsonOptions` is useless and I have to use `Configure` method:\r\n```C#\r\nservices.Configure<JsonSerializerOptions>(options =>\r\n{\r\n    options.IgnoreNullValues = true;\r\n\r\n});\r\n```\r\n\r\n```\r\nASP.NET Core Version: 3.0 Preview 8 \r\n\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview8-013656\r\n Commit:    8bf06ffc8d\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.18362\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-preview8-013656\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview8-28405-07\r\n  Commit:  d01b2fb7bc\r\n\r\n.NET Core SDKs installed:\r\n  2.1.800-preview-009696 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.800 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.300 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview6-012264 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview8-013656 [C:\\Program Files\\dotnet\\sdk]\r\n```\r\n",
    "comments_url": "https://api.github.com/repos/dotnet/aspnetcore/issues/13195/comments",
    "author": "xsoheilalizadeh",
    "comments": [
      {
        "user": "pranavkm",
        "created_at": "2019-08-16T22:39:01Z",
        "body": "@xsoheilalizadeh you should be able to assign properties to the `JsonSerializerOptions` instance that's passed in to the callback:\r\n\r\n```C#\r\n services.AddControllers().AddJsonOptions(options =>\r\n{\r\n    options.JsonSerializerOptions.IgnoreNullValues = true;\r\n});\r\n```"
      },
      {
        "user": "xsoheilalizadeh",
        "created_at": "2019-08-17T05:19:33Z",
        "body": "It works now thanks. I think it could be like below code by replacing JsonSerializerOptions with JsonOptions, it's shorter and easier to understand.\r\n```c#\r\nservices.AddControllers().AddJsonOptions(options =>\r\n{\r\n    options.IgnoreNullValues = true;\r\n});\r\n```"
      },
      {
        "user": "pranavkm",
        "created_at": "2019-08-20T03:08:59Z",
        "body": "Thanks for the suggestion, but we currently do not have any plans on changing how the options work. Closing this since the original question has been resolved."
      }
    ]
  },
  {
    "number": 13151,
    "title": "AddAttribute onclick no longer accepts lambda expressions",
    "created_at": "2019-08-15T00:31:27Z",
    "closed_at": "2019-08-15T02:39:03Z",
    "labels": [
      "question",
      "area-blazor"
    ],
    "url": "https://github.com/dotnet/aspnetcore/issues/13151",
    "body": "I've been working on a project without updating for a while, but it seems like no one else can contribute with my current setup so I decided to try setting it up with the latest version of Blazor. It's almost working, but I make extensive use of \r\n\r\n`builder.AddAttribute()`\r\n\r\nespecially with buttons. It seems that now the AddAttribute function no longer accepts actions, and when I try to do something like \r\n\r\n`builder.AddAttribute(2, \"onclick\", () => ToggleNavMenu());`\r\n\r\nI get a an error:\r\n\r\n>Error\tCS1660\tCannot convert lambda expression to type bool because it is not a delegate type\t\r\n\r\nIt seems like there is a different way to do it now, but in my searching I couldn't find any examples. \r\n",
    "comments_url": "https://api.github.com/repos/dotnet/aspnetcore/issues/13151/comments",
    "author": "billybillyjim",
    "comments": [
      {
        "user": "rynowak",
        "created_at": "2019-08-15T01:21:50Z",
        "body": "This is intentional. \r\n\r\nCan you give us a little more information about what you're trying to do?"
      },
      {
        "user": "billybillyjim",
        "created_at": "2019-08-15T01:58:30Z",
        "body": "This was just the method I used for implementing all the buttons in my app. So for example button I am currently using in preview5 looks like this:\r\n\r\n```\r\n            builder.OpenElement(7, \"button\");\r\n            builder.AddAttribute(8, \"class\", \"btn btn-primary\");\r\n            builder.AddAttribute(9, \"style\", \"margin:2px;height:2rem;line-height: initial;\");\r\n            builder.AddAttribute(10, \"onclick\", () => Deposit(item, 1));\r\n            builder.AddContent(11, \"1\");\r\n            builder.CloseElement();\r\n```\r\n\r\nI am looking for some way to still be able to call `Depost(item.Key, 1)`  on a button click with a RenderTreeBuilder. "
      },
      {
        "user": "rynowak",
        "created_at": "2019-08-15T02:01:45Z",
        "body": "Sure, so you can still do that, it just requires a little more code.\r\n\r\n```\r\nbuilder.AddAttribute(10, \"onclick\", new Action(() => Deposit(item, 1)));\r\n```\r\n\r\nWe took away some overloads of these methods because we don't think they are getting much usage. No functionality was removed."
      },
      {
        "user": "billybillyjim",
        "created_at": "2019-08-15T02:39:03Z",
        "body": "Ah, that's exactly what I was looking for. Thank you!"
      }
    ]
  },
  {
    "number": 12167,
    "title": "What is the CheckAccess pattern in Blazor ?",
    "created_at": "2019-07-14T17:46:29Z",
    "closed_at": "2019-07-14T23:06:57Z",
    "labels": [
      "question",
      "area-blazor"
    ],
    "url": "https://github.com/dotnet/aspnetcore/issues/12167",
    "body": "Could you please describe this concept !\r\n\r\nThanks...",
    "comments_url": "https://api.github.com/repos/dotnet/aspnetcore/issues/12167/comments",
    "author": "enetstudio",
    "comments": [
      {
        "user": "rynowak",
        "created_at": "2019-07-14T21:46:40Z",
        "body": "Similar to other UI frameworks, Blazor requires you to be in the correct threading context to access UI and mutable state related to the UI.\r\n\r\nIf you have some work that triggers on a background thread, you'd normally use `InvokeAsync()` on `ComponentBase` to dispatch it to the correct context. \r\n\r\nIf you need to start some work as a result of a Blazor lifecycle method, you are already in the correct context. If you need to start some work as a result of an event handler, you are already in the correct context.\r\n\r\nIf you're in client-side Blazor, there's one thread so you don't really have to think about this.\r\n\r\n*The CheckAccess() pattern* - refers to writing code like the following:\r\n\r\n```C#\r\nif (Dispatcher.CheckAccess())\r\n{\r\n    // You already have access, do what you want\r\n}\r\nelse\r\n{\r\n    // You don't have access, enqueue your work\r\n    Dispatcher.InvokeAsync(() =>\r\n    {\r\n         // Write your code here\r\n    });\r\n}\r\n```\r\n\r\nThis is an advanced optimization for the cases where you are starting work, and you *might not* be in the correct context. This probably isn't necessary for most developers on Blazor to ever think about."
      },
      {
        "user": "enetstudio",
        "created_at": "2019-07-14T23:06:47Z",
        "body": "Thanks so much for this, @rynowak!"
      }
    ]
  },
  {
    "number": 11099,
    "title": "UriHelper cannot be used to navigate to non-Blazor URIs in server-side",
    "created_at": "2019-06-11T16:59:52Z",
    "closed_at": "2019-06-13T15:15:58Z",
    "labels": [
      "question",
      "area-blazor"
    ],
    "url": "https://github.com/dotnet/aspnetcore/issues/11099",
    "body": "# Repro\r\n\r\nCreate a new server-side Blazor app (with auth).\r\n\r\nTry to use `IUriHelper.NavigateTo(\"Identity/Account/Login\")` (make a button).\r\n\r\nIt will go to the Not Found page instead of doing an actual navigation. However, making an `<a href>` with the same URL will navigate to the login page.\r\n\r\nUsing preview 6",
    "comments_url": "https://api.github.com/repos/dotnet/aspnetcore/issues/11099/comments",
    "author": "rynowak",
    "comments": [
      {
        "user": "pranavkm",
        "created_at": "2019-06-11T18:20:50Z",
        "body": "Does the Router have a `NotFoundContent` set? We specifically choose to show you the NotFoundContent if the navigation was started programatically (via `NavigateTo`) and the route that could not be addressed. \r\n\r\nThe pivot here is that `NavigateTo` is meant for navigating within the component route-space. You could use `NavigateTo(\"...\", force)` to force a browser redirect without the router being involved."
      },
      {
        "user": "rynowak",
        "created_at": "2019-06-13T15:15:58Z",
        "body": "Ah sorry. I'm a blazor noob. Thanks for the help."
      }
    ]
  },
  {
    "number": 10980,
    "title": "[SignalR] Access HubContext in Ctor of strongly typed Hub",
    "created_at": "2019-06-07T07:27:31Z",
    "closed_at": "2019-06-11T10:18:41Z",
    "labels": [
      "question",
      "area-signalr"
    ],
    "url": "https://github.com/dotnet/aspnetcore/issues/10980",
    "body": "Is it/should it be possible to access the `HubContext `in the constructor of a strongly typed hub?\r\nI\u00b4m trying to initialize some members of my hub in the ctor with values from `context.items` but the context is null at that time. Is this intended by design?",
    "comments_url": "https://api.github.com/repos/dotnet/aspnetcore/issues/10980/comments",
    "author": "ddweber",
    "comments": [
      {
        "user": "analogrelay",
        "created_at": "2019-06-07T21:51:56Z",
        "body": "Can you post sample code that reproduces the issue? The `Context` property *should* be accessible in `OnConnectedAsync`, but it **would** be null in the constructor."
      },
      {
        "user": "ddweber",
        "created_at": "2019-06-11T10:18:41Z",
        "body": "> The Context property should be accessible in OnConnectedAsync, but it would be null in the constructor.\r\n\r\nOkay, thats the case in my application and all I wanted to clarify :)\r\nThanks for the answer."
      }
    ]
  },
  {
    "number": 10796,
    "title": "Blazor: Calling Javasscript Interop on Program.cs ",
    "created_at": "2019-06-03T20:16:26Z",
    "closed_at": "2019-06-04T10:13:14Z",
    "labels": [
      "question",
      "area-blazor"
    ],
    "url": "https://github.com/dotnet/aspnetcore/issues/10796",
    "body": "Hello,\r\n\r\nI need to make a Javascript Interop call on the Program.cs. Please, check my code below:\r\n\r\n    public class Program\r\n    {\r\n        public static void Main(string[] args)\r\n        {\r\n            var host = CreateHostBuilder(args).Build();\r\n            using (var scope = host.Services.CreateScope())\r\n            {\r\n                var js = scope.ServiceProvider.GetRequiredService<IJSRuntime>();\r\n                var lang = js.InvokeAsync<string>(\"myJsFunctions.browserLanguage\").Result;\r\n                CultureInfo.DefaultThreadCurrentCulture = new CultureInfo(lang);                \r\n            }\r\n            host.Run();\r\n        }\r\n\r\n        public static IWebAssemblyHostBuilder CreateHostBuilder(string[] args) =>\r\n            BlazorWebAssemblyHost.CreateDefaultBuilder()\r\n                .UseBlazorStartup<Startup>();\r\n    }\r\n\r\nI've tried all the possible ways to make that async call, but in all the cases the application is not started on the browser, and it freezes on the loading... page.\r\n\r\nAm I doing something wrong? As you can see, I need to catch the browser language before the application is loaded.\r\n\r\nThanks!\r\n\r\n",
    "comments_url": "https://api.github.com/repos/dotnet/aspnetcore/issues/10796/comments",
    "author": "rodrigosendin",
    "comments": [
      {
        "user": "3x0dv5",
        "created_at": "2019-06-04T10:02:52Z",
        "body": "Wouldn't it be better on the init of your main page?"
      },
      {
        "user": "SteveSandersonMS",
        "created_at": "2019-06-04T10:13:14Z",
        "body": "There's no guarantee that JS interop will be ready before the Blazor application is started up. You will need to move JS interop calls into a later place. For example, in your `Startup` class:\r\n\r\n```cs\r\npublic void Configure(IComponentsApplicationBuilder app, IJSRuntime jSRuntime)\r\n{\r\n    app.AddComponent<App>(\"app\");\r\n\r\n    _ = jSRuntime.InvokeAsync<object>(\"alert\", \"Hello, world!\");\r\n}\r\n```"
      },
      {
        "user": "SteveSandersonMS",
        "created_at": "2019-06-04T10:14:50Z",
        "body": "> As you can see, I need to catch the browser language before the application is loaded.\r\n\r\nIf you could clarify why you think you have to do it in `Program.cs` and not in a regular component (or in `Startup.cs` if you really want), that would help us to provide better advice."
      },
      {
        "user": "SteveSandersonMS",
        "created_at": "2019-06-04T10:18:56Z",
        "body": "I'm guessing it's because you want to know the language synchronously. If my guess is correct, you can do it like this in `Startup.cs`:\r\n\r\n```cs\r\npublic void Configure(IComponentsApplicationBuilder app, IJSRuntime jSRuntime)\r\n{\r\n    var language = ((IJSInProcessRuntime)jSRuntime).Invoke<string>(\"getBrowserLanguage\");\r\n    Console.WriteLine(\"Your language is: \" + language);\r\n\r\n    app.AddComponent<App>(\"app\");\r\n}\r\n```\r\n\r\n... and the following JS code in `index.html`:\r\n\r\n```html\r\n<script>\r\n    function getBrowserLanguage() {\r\n        return navigator.language;\r\n    }\r\n</script>\r\n```\r\n\r\nAlternatively you could issue a similar interop call from any of your components."
      },
      {
        "user": "rodrigosendin",
        "created_at": "2019-06-04T12:27:59Z",
        "body": "Thanks a lot! That works great, and I've learned two new things:\r\n1. I can inject services on the Startup.Configure Method\r\n2. I can make synchonous JSInterop calls\r\n\r\nSorry if this is not the correct channel for this kind of question. All the answers I found on the web lead me to solve this on the Program.cs, with an async call.\r\n\r\nThank you for your help!"
      }
    ]
  },
  {
    "number": 10548,
    "title": "Integrate javascript library in Razor ServerSide ends in endless requests to server",
    "created_at": "2019-05-26T20:05:08Z",
    "closed_at": "2019-05-31T17:26:25Z",
    "labels": [
      "question",
      "area-blazor"
    ],
    "url": "https://github.com/dotnet/aspnetcore/issues/10548",
    "body": "I would like to integrate fullcalendar.io into an application written using Blazor ServerSide components.\r\nThe code looks like this:\r\n\r\n```js\r\nwindow.ShowCalendar = (message) => {\r\n        var calendarEl = document.getElementById('calendar');\r\n\r\n        var calendar = new FullCalendar.Calendar(calendarEl, {\r\n          aspectRatio: 1.5,\r\n          header: {\r\n            left: 'prev,next',\r\n            center: 'title',\r\n            right: 'resourceTimelineDay,resourceTimelineWeek,resourceTimelineMonth'\r\n          },\r\n          plugins: [ 'dayGrid', 'resourceTimeline' ],\r\n          defaultView: 'resourceTimelineDay',\r\n          resources: '/api/resources',\r\n          events: '/api/events'\r\n        });\r\n        calendar.render();\r\n      };\r\n```\r\n\r\n```razor\r\n@functions {\r\n    protected override async Task OnAfterRenderAsync()\r\n    {\r\n        await this.JsRuntime.InvokeAsync<string>(\"ShowCalendar\", \"\");\r\n\r\n        StateHasChanged();\r\n    }\r\n}\r\n```\r\n\r\nThe problem is that the api calls are continuously raised.\r\nWhat's the problem?\r\n\r\nI also tried to change it using JSInterop, but without success. Something like this:\r\n\r\n```js\r\nvar calendar = new FullCalendar.Calendar(calendarEl, {\r\n          aspectRatio: 1.5,\r\n          header: {\r\n            left: 'prev,next',\r\n            center: 'title',\r\n            right: 'resourceTimelineDay,resourceTimelineWeek,resourceTimelineMonth'\r\n          },\r\n          plugins: [ 'dayGrid', 'resourceTimeline' ],\r\n          defaultView: 'resourceTimelineDay',\r\n          resources: DotNet.invokeMethodAsync(\"WebApplication.Views\", \"GetResourcesAsync\"),\r\n          events: DotNet.invokeMethodAsync(\"WebApplication.Views\", \"GetEventsAsync\")\r\n        });\r\n```\r\n\r\n```razor\r\n[JSInvokable]\r\n  public static async Task<CalendarEvent[]> GetEventsAsync()\r\n  {\r\n      return ...\r\n  }\r\n\r\n  [JSInvokable]\r\n  public static async Task<CalendarResource[]> GetResourcesAsync()\r\n  {\r\n      return ...\r\n  }\r\n```",
    "comments_url": "https://api.github.com/repos/dotnet/aspnetcore/issues/10548/comments",
    "author": "fleed",
    "comments": [
      {
        "user": "kennywangjin",
        "created_at": "2019-05-27T08:15:09Z",
        "body": "I think you should stop calling `StateHasChanged` in OnAfterRenderAsync! Otherwise You would get infinite rendering: rendering=>OnAfterRenderAsync=>StateHasChanged=>again rendering."
      },
      {
        "user": "fleed",
        "created_at": "2019-05-31T18:09:50Z",
        "body": "Thank you @kennywangjin , that fixed it."
      }
    ]
  },
  {
    "number": 10404,
    "title": "[Question] How to add Custom JsonConverter to Blazor Client application",
    "created_at": "2019-05-20T20:00:02Z",
    "closed_at": "2019-05-22T15:26:12Z",
    "labels": [
      "question",
      "area-blazor"
    ],
    "url": "https://github.com/dotnet/aspnetcore/issues/10404",
    "body": "I have created my own custom JsonConverter for custom data structure ... But I can use it only with JsonConvert.DeserializeObject directly\r\nIt would be nice somehow to register in Blazor Client Application Custom JsonConverter\r\nBut using services.AddMvc() it is not possible because is not found anywhere in assembly as extension method\r\n\r\nHow to add custom JsonConverter ?",
    "comments_url": "https://api.github.com/repos/dotnet/aspnetcore/issues/10404/comments",
    "author": "redradist",
    "comments": [
      {
        "user": "SteveSandersonMS",
        "created_at": "2019-05-22T15:26:11Z",
        "body": "It depends what you're trying to do. In what way do you want the framework to make use of your converter?\r\n\r\nIs it when you call HTTP methods like `Http.GetJsonAsync`? If so, that's never going to use Json.NET converters since it doesn't use Json.NET internally. It uses SimpleJSON (which is something we're in process of changing currently - we're moving to the new System.Text.Json library everywhere).\r\n\r\nIf you want to use Json.NET to deserialize HTTP responses, consider replacing calls to `Http.GetJsonAsync` with `Http.GetStringAsync` and passing the string to your chosen deserializer."
      },
      {
        "user": "redradist",
        "created_at": "2019-05-26T12:58:59Z",
        "body": "Okay, thanks !!\r\n\r\nSeems like Http.GetStringAsync is exactly what I want ...\r\nBut I'm curious why you have not added customization point for JsonConverter ?\r\nAlso it is not obvious why you have different Json converter on Server side and Front-End side. On server side it is possible to add option to NewtonsoftJson:\r\n\r\n`services.AddMvc().AddNewtonsoftJson(...);`\r\n\r\nBut on Front-End side it is not possible ( It would be nice to have possibility to add same service on Front-End as on Back-End side ..."
      }
    ]
  },
  {
    "number": 10254,
    "title": "Anti forgery token of razor page forms within folders not available automatically. ",
    "created_at": "2019-05-15T07:22:48Z",
    "closed_at": "2019-05-20T17:25:57Z",
    "labels": [
      "question",
      "area-mvc"
    ],
    "url": "https://github.com/dotnet/aspnetcore/issues/10254",
    "body": "",
    "comments_url": "https://api.github.com/repos/dotnet/aspnetcore/issues/10254/comments",
    "author": "solalem",
    "comments": [
      {
        "user": "solalem",
        "created_at": "2019-05-15T07:45:03Z",
        "body": "The default template of Razor Pages UI library creates a folder structure organized by Areas. After adding my Create.cshtml page into a feature folder and adding a form I was expecting the default anti-forgery token to be generated and sent to browsers automatically. Navigating to Feature/Create in a browser and submitting the form creates\r\n`The required antiforgery cookie \".AspNetCore.Antiforgery.MsYT7wU3Kzg\" is not present.`\r\n exception inside VS output window. The browser also shows no cookie with the specified name. I resolved my issue after manually adding `@Html.AntiForgeryToken()` inside my form. I think the default behavior of adding anti-forgery cookies should handle this case too. I can also see this is true for every pages inside child folders of Pages, folders inside Areas and any UI library folders. "
      },
      {
        "user": "pranavkm",
        "created_at": "2019-05-15T14:48:37Z",
        "body": "You might be missing a `_ViewImports.cshtml` in the Feature area that sets up the form tag helper: `@addTagHelper \"*, Microsoft.AspNetCore.Mvc.TagHelpers\"`. "
      },
      {
        "user": "solalem",
        "created_at": "2019-05-16T11:23:04Z",
        "body": "Yes that also did the trick, thank you. But I would expect the project template add that file in the first place. I think, sometimes, people may have the need to share form based pages in UI libraries as well."
      },
      {
        "user": "mkArtakMSFT",
        "created_at": "2019-05-20T17:25:57Z",
        "body": "Thanks for contacting us. We believe that the question you've raised have been answered. If you still feel a need to continue the discussion, feel free to reopen it and add your comments."
      }
    ]
  },
  {
    "number": 8386,
    "title": "How to create a component of InputText to use in EditForm",
    "created_at": "2019-03-10T13:45:42Z",
    "closed_at": "2019-03-18T16:30:59Z",
    "labels": [
      "question",
      "area-blazor"
    ],
    "url": "https://github.com/dotnet/aspnetcore/issues/8386",
    "body": "### Cenario\r\nI'm trying to make a component that uses InputText, but when I edit the textbox, it doesn't update the EditForm Model. This is how i'm trying to do this:\r\n\r\n#### RazorInputTest.razor\r\n    <div class=\"form-group\">\r\n        <label class=\"col-form-label\">@Label</label>\r\n        <InputText Class=\"form-control\" bind-Value=\"@Value\"></InputText>\r\n    </div>\r\n\r\n    @functions{\r\n        [Parameter] string Label { get; set; }\r\n        [Parameter] string Value { get; set; }\r\n        [Parameter] EventCallback<string> ValueChanged { get; set; }\r\n    }\r\n\r\n#### Index.razor\r\n    <span>Name of the category: @category.Name</span>\r\n    <EditForm Model=\"@category\">\r\n        <RazorInputTest bind-Value=\"@category.Name\"/>\r\n    </EditForm>\r\nWhen I edit the input, the span with the \"Name of the category\" doesn't update, but I don't know what I am doing wrong.\r\n\r\n### Objective\r\nI'm doing a set of bootstrap formated components and this is an important part of this project: preformated input-boxes. I want to create components that binds viewmodels, like InputText does inside the EditForm, but InputText inside a component, inside a EditForm inside another component.\r\n\r\n",
    "comments_url": "https://api.github.com/repos/dotnet/aspnetcore/issues/8386/comments",
    "author": "medeirosraul",
    "comments": [
      {
        "user": "SteveSandersonMS",
        "created_at": "2019-03-13T19:20:47Z",
        "body": "It won\u2019t update because this code doesn\u2019t trigger ValueChanged anywhere. "
      },
      {
        "user": "rynowak",
        "created_at": "2019-03-13T20:25:19Z",
        "body": "Hi @medeirosraul - what Steve said is right, this won't send change notifications because in `Index.razor` you're attaching a binding to `RazorInputTest.Value`, but nothing is going to invoke `RazorInputTest.ValueChanged`. \r\n\r\nIt's really our intended pattern for you to subclass `InputText` if you want to replace its UI but unfortunately that doesn't work well in preview3 (#8192).\r\n\r\nIf you want a solution to wrap an `InputText`, you'll have to write a little more code.\r\n\r\n\r\n**RazorInputTest.razor**\r\n```\r\n<div class=\"form-group\">\r\n    <label class=\"col-form-label\">@Label</label>\r\n    <InputText Class=\"form-control\" Value=\"@Value\" ValueChanged=\"@ValueChanged\" ValueExpression=\"@ValueExpression\"></InputText>\r\n</div>\r\n\r\n@functions{\r\n    [Parameter] string Label { get; set; }\r\n    [Parameter] string Value { get; set; }\r\n    [Parameter] EventCallback<string> ValueChanged { get; set; }\r\n    [Parameter] Expression<Func<string>> ValueExpression { get; set; }\r\n}\r\n```\r\n\r\nIndex.razor won't have to change."
      },
      {
        "user": "medeirosraul",
        "created_at": "2019-03-16T15:18:33Z",
        "body": "This works, thank you.\r\nSo I think the \"bind\" attribute also sets \"ValueExpression\" when code generated."
      },
      {
        "user": "pjmagee",
        "created_at": "2019-03-16T23:11:58Z",
        "body": "@rynowak What about the input type of password, do we fall back to the standard html input?"
      },
      {
        "user": "SteveSandersonMS",
        "created_at": "2019-03-17T07:01:38Z",
        "body": "@pjmagee Consider inheriting from InputBase directly, e.g.:\r\n\r\n     @inherits InputBase<string>\r\n     <input type=\"password\" bind=\"@CurrentValue\" id=\"@Id\" class=\"@CssClass\" />"
      },
      {
        "user": "raphadesa",
        "created_at": "2019-09-03T06:39:42Z",
        "body": "Hello, the following worked for me:\r\nFile : CustomTextBox.razor\r\n\r\n<InputText @bind-Value=\"@Value\" class=\"form-control\" />\r\n\r\n@code {\r\n    public string _Value;\r\n    [Parameter]\r\n    public string Value\r\n    {\r\n        get\r\n        {\r\n            return _Value;\r\n        }\r\n        set\r\n        {            \r\n            if (_Value != value)\r\n            {                \r\n                ValueChanged.InvokeAsync(value);\r\n            }\r\n            _Value = value;\r\n        }\r\n    }\r\n    [Parameter]\r\n    public EventCallback<string> ValueChanged { get; set; }    \r\n}\r\n\r\n\r\nuse: <CustomTextbox @bind-Value=\"@user.Title\" />"
      }
    ]
  },
  {
    "number": 6926,
    "title": "Microsoft.AspNetCore.Mvc, .NetStandard and .NetCore versions",
    "created_at": "2019-01-22T17:14:49Z",
    "closed_at": "2019-01-23T12:16:41Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/dotnet/aspnetcore/issues/6926",
    "body": "I understand how .Net Standard and .Net Core relate. However, can you please clarify the relationships between versions of packages like Microsoft.AspNetCore.Mvc and .Net Standard and .Net Core. It would appear that the version numbers for Microsoft.AspNetCore.Mvc seems to track against .Net Core but does that mean there are any dependencies between them or not because Microsoft.AspNetCore.Mvc lists .Net Standard 2.0 as a dependency not .Net Core?\r\n\r\nFor example, if I've got a .Net Core 2.1 application with a project that is using .Net Standard 2.0 and that references Microsoft.AspNetCore.Mvc 2.1.3, what are the implications of updating Microsoft.AspNetCore.Mvc to 2.2.0?",
    "comments_url": "https://api.github.com/repos/dotnet/aspnetcore/issues/6926/comments",
    "author": "darrenlewis1985",
    "comments": [
      {
        "user": "davidfowl",
        "created_at": "2019-01-23T07:15:23Z",
        "body": "In 2.1 and 2.2 the Microsoft.AspNetCore.* packages target .NET Standard and also ship in a the Microsoft.AspNetCore.App shared framework as part .NET Core. When you're using .NET Core there's no need to reference individual packages, it's redundant and they are basically ignored and the shared framework is used instead.\r\n\r\n> For example, if I've got a .Net Core 2.1 application with a project that is using .Net Standard 2.0 and that references Microsoft.AspNetCore.Mvc 2.1.3, what are the implications of updating Microsoft.AspNetCore.Mvc to 2.2.0?\r\n\r\nI assume you mean you have a web application targeting .NET Core 2.1 and a class library targeting .NET Standard 2.0 and using the Microsoft.AspNetCore.Mvc 2.2.0 package? If that's the case, you will get an error if you don't update the application to .NET Core 2.2. "
      },
      {
        "user": "darrenlewis1985",
        "created_at": "2019-01-23T08:47:13Z",
        "body": "Thanks for confirming. I knew System.Net.Http was in the the metapackage but wasn't sure about Microsoft.AspNetCore.* references. It's on our to-do list to switch over to using the metapackage."
      }
    ]
  },
  {
    "number": 5839,
    "title": "Bug: doesn't check duplicated email while changing user's email address",
    "created_at": "2018-11-27T12:28:13Z",
    "closed_at": "2019-01-03T20:45:55Z",
    "labels": [
      "question",
      "area-identity"
    ],
    "url": "https://github.com/dotnet/aspnetcore/issues/5839",
    "body": "When I call UserManager.SetEmailAsync(), it doesn't validate whether there's duplicated email address in database which could cause more than one users having the same email address.\r\n\r\nIf there're any duplicated email addresses in database, the UserManager.FindByEmailAsync() will not working properly -- it only return one result but not all matching results.\r\n\r\nTherefore, it's necessary to validate duplicated email address while creating user and changing user's email address.",
    "comments_url": "https://api.github.com/repos/dotnet/aspnetcore/issues/5839/comments",
    "author": "hez2010",
    "comments": [
      {
        "user": "blowdart",
        "created_at": "2018-11-29T20:11:31Z",
        "body": "Have you set the RequireUniqueEmail setting in UserOptions? This is off by default. We expect uniqueness on usernames, not emails."
      },
      {
        "user": "hez2010",
        "created_at": "2018-11-30T01:39:23Z",
        "body": "@blowdart \r\nThanks, this fix my problem. \r\nBut I think that the FindByEmailAsync should return an IEnumerable\\<TUser\\>, but not TUser. "
      },
      {
        "user": "blowdart",
        "created_at": "2019-01-03T20:45:55Z",
        "body": "That would be a rather large breaking change I'm afraid, so it's not one we're willing to make."
      },
      {
        "user": "jmatheti",
        "created_at": "2019-03-08T02:39:34Z",
        "body": "> But I think that the FindByEmailAsync should return an IEnumerable<TUser>, but not TUser.\r\n\r\nIf the above is a breaking change, can we atleast have a method in the usermanager to check duplicate email and duplicate username. Currently I have to use `userManager.FindByEmailAsync`  to see if the email already exists before generating the change email token.  This method selects a full user, which is unwanted select queries. \r\n\r\nIt make sense to reject the user request to change email address before generating the token rather sending email and when the user come through the link, `userManager.ChangeEmailAsync` is the one verifying the duplicate emails and its a long process.\r\n"
      }
    ]
  },
  {
    "number": 3159,
    "title": "Generalization of the ModelState error messages",
    "created_at": "2018-05-20T19:33:27Z",
    "closed_at": "2018-06-07T16:48:11Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/dotnet/aspnetcore/issues/3159",
    "body": "Hey everyone,\r\nI am making a school project where I want to use localization in the SPA project, not in API.\r\nFor this project I am using dotnet core 2.0.\r\n\r\nThe problem what I actually have is, how to generalize error messages like:\r\n - for invalid input returns 'invalid_input'\r\n - for missing data returns 'required'\r\n\r\nExample JSON:\r\n```\r\n{\r\n  'login': 'required',\r\n  'password': 'too_short'\r\n}\r\n```\r\n\r\nRegards,\r\nTheAifam5",
    "comments_url": "https://api.github.com/repos/dotnet/aspnetcore/issues/3159/comments",
    "author": "TheAifam5",
    "comments": [
      {
        "user": "davidfowl",
        "created_at": "2018-06-06T06:00:33Z",
        "body": "/cc @pranavkm "
      },
      {
        "user": "pranavkm",
        "created_at": "2018-06-06T16:50:07Z",
        "body": "@dougbu \\ @kichalla any suggestions on how you could do this?"
      },
      {
        "user": "dougbu",
        "created_at": "2018-06-06T17:03:40Z",
        "body": "With ASP.NET Core 2.0, the weapon of choice would be `DefaultModelBindingMessageProvider`. Use methods such as `SetValueIsInvalidAccessor(...)` to set the MVC-generated error messages to whatever you want. Can make those changes generally using `MvcOptions.ModelBindingMessageProvider` or can implement `IBindingMetadataProvider` (and use `BindingMetadata.ModelBindingMessageProvider`) to make changes on a per-metadata basis."
      },
      {
        "user": "TheAifam5",
        "created_at": "2018-06-07T12:11:42Z",
        "body": "Thank you. That's kind a useful information for me. I'm gonna check this out today."
      },
      {
        "user": "pranavkm",
        "created_at": "2018-06-07T16:48:11Z",
        "body": "@TheAifam5 feel free to reopen this issue if you have further questions."
      }
    ]
  },
  {
    "number": 2782,
    "title": "Is there any way to read and rewrite the request body in a middleware?",
    "created_at": "2018-01-16T08:25:40Z",
    "closed_at": "2018-01-18T06:50:57Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/dotnet/aspnetcore/issues/2782",
    "body": "If i do it like this,:\r\n```\r\nusing System;\r\nusing System.IO;\r\nusing System.Threading.Tasks;\r\nusing Microsoft.AspNetCore.Http;\r\nusing Microsoft.AspNetCore.Http.Internal;\r\nusing Newtonsoft.Json;\r\n\r\nnamespace WebApplication5.Middleware\r\n{\r\n    public class CryptoMiddleware\r\n    {\r\n        private readonly RequestDelegate _next;\r\n\r\n        public CryptoMiddleware(RequestDelegate next)\r\n        {\r\n            _next = next;\r\n        }\r\n\r\n        public async Task Invoke(HttpContext context)\r\n        {\r\n            var req = context.Request;\r\n            var resp = context.Response;\r\n            var orignalResponseBody = resp.Body;\r\n\r\n            using (var responseStream = new MemoryStream())\r\n            {\r\n                try\r\n                {\r\n                    resp.Body = responseStream;\r\n\r\n                    req.EnableRewind();\r\n                    using (var reader = new StreamReader(req.Body))\r\n                    {\r\n                        var reqData = reader.ReadToEnd();\r\n                    }\r\n\r\n                    var reqPlainObj = new\r\n                    {\r\n                        data = \"plain text\"\r\n                    };\r\n                    var reqPlainString = JsonConvert.SerializeObject(reqPlainObj);\r\n\r\n                    using (var writer = new StreamWriter(req.Body))\r\n                    {\r\n                        writer.Write(reqPlainString);\r\n                    }\r\n\r\n                    await _next(context);\r\n\r\n                    using (var reader = new StreamReader(resp.Body))\r\n                    {\r\n                        var str = reader.ReadToEnd();\r\n                        Console.WriteLine($\"response plain:{str}\");\r\n                    }\r\n\r\n                    var respDataObj = new\r\n                    {\r\n                        data = \"response data\"\r\n                    };\r\n                    var respDataStr = JsonConvert.SerializeObject(respDataObj);\r\n                    \r\n                    using (var writer = new StreamWriter(orignalResponseBody))\r\n                    {\r\n                        writer.Write(respDataStr);\r\n                    }\r\n                }\r\n                finally\r\n                {\r\n                    resp.Body = orignalResponseBody;\r\n                }\r\n            }\r\n           \r\n        }\r\n    }\r\n}\r\n\r\n```\r\nthe paramater in my action is always null.",
    "comments_url": "https://api.github.com/repos/dotnet/aspnetcore/issues/2782/comments",
    "author": "HongyanShen",
    "comments": [
      {
        "user": "Tratcher",
        "created_at": "2018-01-16T16:37:05Z",
        "body": "req.Body should never be written to. If you want to augment it you should replace the stream. Your biggest problem though is that you forgot to rewind the buffer. Add a Seek(0...) or Postion = 0 before calling next.\r\n\r\nYou may have similar problem with your response body. Also, don't augment the response body without clearing the Content-Length response header or updating the Content-Type."
      },
      {
        "user": "HongyanShen",
        "created_at": "2018-01-17T02:08:36Z",
        "body": "@Tratcher thanks a lot,you have saved me from a lot of troubles."
      },
      {
        "user": "hishamco",
        "created_at": "2018-01-17T10:26:01Z",
        "body": "I think this should be closed while it's answered"
      }
    ]
  },
  {
    "number": 1821,
    "title": "Error at DefaultAntiforgeryTokenSerializer.Deserialize(String serializedToken)",
    "created_at": "2016-11-16T16:26:51Z",
    "closed_at": "2016-12-07T23:46:41Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/dotnet/aspnetcore/issues/1821",
    "body": "I'm getting an error with a very short stack trace. It occurs when I try to login to my .net core web application. Also, I can't seem to reproduce the error on my development environment. It only occurs on my staging environment. I'm having a hard time finding out where this error is coming from or why it's happening. Does anyone have an idea?\r\n\r\n```\r\nat Microsoft.AspNetCore.Antiforgery.Internal.DefaultAntiforgeryTokenSerializer.Deserialize(String serializedToken)\r\nat Microsoft.AspNetCore.Antiforgery.Internal.DefaultAntiforgery.GetCookieTokenDoesNotThrow(HttpContext httpContext)\r\n```\r\n\r\nNot doing anything special in my Login post.\r\n\r\n        [AllowAnonymous]\r\n        [HttpPost(\"/Login\")]\r\n        public async Task<IActionResult> Login(LoginModel lm, string returnUrl)\r\n        {\r\n            ViewBag.ReturnUrl = returnUrl;\r\n\r\n            var loginResult = await _authManager.SignInAsync(lm.Username, lm.Password);\r\n            if (loginResult.Result == LoginValidationResultType.Ok)\r\n            {\r\n                if (string.IsNullOrWhiteSpace(returnUrl))\r\n                {\r\n                    return Redirect(\"/ew/default.asp?GroupID=23\");\r\n                }\r\n                else\r\n                {\r\n                    return Redirect(returnUrl);\r\n                }\r\n            }\r\n            return View(lm);\r\n        }\r\n\r\nHere's my project.json:\r\n\r\n```\r\n  \"buildOptions\": {\r\n    \"emitEntryPoint\": true,\r\n    \"preserveCompilationContext\": true,\r\n    \"warningsAsErrors\": true\r\n  },\r\n    \"dependencies\": {\r\n      \"MyApp.Services\": \"1.0.0-*\",\r\n      \"Microsoft.AspNetCore.Diagnostics.Elm\": \"0.1.0\",\r\n      \"Microsoft.AspNetCore.Authentication.Cookies\": \"1.0.0\",\r\n      \"Microsoft.AspNetCore.Authorization\": \"1.0.0\",\r\n      \"Microsoft.AspNetCore.Diagnostics\": \"1.0.0\",\r\n      \"Microsoft.AspNetCore.Hosting\": \"1.0.0\",\r\n      \"Microsoft.AspNetCore.Hosting.Abstractions\": \"1.0.0\",\r\n      \"Microsoft.AspNetCore.Http.Extensions\": \"1.0.0\",\r\n      \"Microsoft.AspNetCore.Localization\": \"1.0.0\",\r\n      \"Microsoft.AspNetCore.Mvc\": \"1.0.0\",\r\n      \"Microsoft.AspNetCore.Routing\": \"1.0.0\",\r\n      \"Microsoft.AspNetCore.Server.IISIntegration\": \"1.0.0\",\r\n      \"Microsoft.AspNetCore.Server.Kestrel\": \"1.0.0\",\r\n      \"Microsoft.AspNetCore.Session\": \"1.0.0\",\r\n      \"Microsoft.AspNetCore.StaticFiles\": \"1.0.0\",\r\n      \"Microsoft.Extensions.Caching.SqlServer\": \"1.0.0\",\r\n      \"Microsoft.Extensions.Logging.Console\": \"1.0.0\",\r\n      \"Microsoft.Extensions.Logging.Debug\": \"1.0.0\",\r\n      \"Microsoft.VisualStudio.Web.BrowserLink.Loader\": \"14.0.0\",\r\n      \"Microsoft.AspNetCore.Razor.Tools\": {\r\n        \"version\": \"1.0.0-preview2-final\",\r\n        \"type\": \"build\"\r\n      },\r\n      \"Microsoft.Extensions.Configuration.EnvironmentVariables\": \"1.0.0\",\r\n      \"Microsoft.Extensions.Configuration.Json\": \"1.0.0\",\r\n      \"Microsoft.Extensions.Logging\": \"1.0.0\",\r\n      \"Microsoft.Extensions.Options.ConfigurationExtensions\": \"1.0.0\",\r\n      \"Microsoft.DotNet.ProjectModel\": \"1.0.0-rc4-003206\"\r\n    },\r\n\r\n  \"frameworks\": {\r\n    \"net461\": {}\r\n  },\r\n\r\n  \"runtimeOptions\": {\r\n    \"configProperties\": {\r\n      \"System.GC.Server\": true\r\n    }\r\n  },\r\n\r\n  \"tools\": {\r\n    \"BundlerMinifier.Core\": \"2.0.238\",\r\n    \"Microsoft.AspNetCore.Razor.Tools\": \"1.0.0-preview2-final\",\r\n    \"Microsoft.AspNetCore.Server.IISIntegration.Tools\": \"1.0.0-preview2-final\"\r\n  },\r\n\r\n  \"scripts\": {\r\n    \"postpublish\": \"dotnet publish-iis --publish-folder %publish:OutputPath% --framework %publish:FullTargetFramework%\"\r\n  }\r\n```\r\n\r\n\r\n",
    "comments_url": "https://api.github.com/repos/dotnet/aspnetcore/issues/1821/comments",
    "author": "john-luke-laue",
    "comments": [
      {
        "user": "john-luke-laue",
        "created_at": "2016-11-18T21:28:53Z",
        "body": "I didn't have AntiForgeryValdiation setup. This seems to have resolved the issue.\n\n```\nservices.AddMvc(options =>\n{\n    options.Filters.Add(new AutoValidateAntiforgeryTokenAttribute());\n});\n```\n"
      },
      {
        "user": "john-luke-laue",
        "created_at": "2016-12-06T01:04:16Z",
        "body": "Actually, setting up AntiForgery did not fix the issue..."
      },
      {
        "user": "john-luke-laue",
        "created_at": "2016-12-06T18:24:05Z",
        "body": "I was able to a get a little more information about the error:\r\n\r\nPath: /Login\r\nHTTP Method: GET \r\nException Message: The antiforgery token could not be decrypted. \r\n\r\nThis error was occurring even before I added the AutoValidateAntiforgeryTokenAttribute filter. \r\nWhy would an anti-forgery token need validation on a GET?\r\n"
      },
      {
        "user": "rynowak",
        "created_at": "2016-12-06T18:28:22Z",
        "body": "/cc @dougbu "
      },
      {
        "user": "dougbu",
        "created_at": "2016-12-06T18:42:26Z",
        "body": "@john-luke-laue the `GetCookieTokenDoesNotThrow()` method catches (and logs) all exceptions. What is the impact of the exception you're seeing -- outside debugging sessions?\r\n\r\nSeparately the `AutoValidateAntiforgeryTokenAuthorizationFilter` is added by default these days. Your addition shouldn't have changed much."
      },
      {
        "user": "john-luke-laue",
        "created_at": "2016-12-06T18:50:45Z",
        "body": "@dougbu other than the log, there seems to be no impact. Seems to continue on gracefully and the /Login page is reached."
      },
      {
        "user": "dougbu",
        "created_at": "2016-12-06T19:04:42Z",
        "body": "The behaviour once we enter the Antiforgery system is as-designed.\r\n\r\nBut I'm not sure why it appears Antiforgery is used for a GET request. Since the action method quoted in the original description isn't relevant, I'm guessing invoked `Login()` method has an explicit `[ValidateAntiForgeryToken]`. Is that the case?"
      },
      {
        "user": "john-luke-laue",
        "created_at": "2016-12-06T19:16:49Z",
        "body": "@dougbu Not the case for me. No `[ValidateAntiForgeryToken]`. Just `[AllowAnonymous]`.\r\n\r\n```\r\n[AllowAnonymous]\r\n[HttpGet(\"/Login\", Name = \"Login\")]\r\npublic IActionResult Login(string returnUrl)\r\n{\r\n   //...\r\n}\r\n```\r\n\r\nIf it's working as expected, and doesn't seem to have an impact, can I safely ignore this error?"
      },
      {
        "user": "dougbu",
        "created_at": "2016-12-06T20:36:45Z",
        "body": "> If it's working as expected, and doesn't seem to have an impact, can I safely ignore this error?\r\n\r\nYes, it's safe to ignore catching a first-chance exception in `GetCookieTokenDoesNotThrow()`.\r\n\r\nI forgot something earlier: Calling into the Antiforgery system would be normal for the Login view. Must check for existing tokens when generating / reusing tokens for the response."
      },
      {
        "user": "john-luke-laue",
        "created_at": "2016-12-07T21:53:24Z",
        "body": "@dougbu Does this mean that ASP.NET core automatically puts AntiForgery Validation on the Login view?\r\n\r\nI'm using app.UseCookieAuthentication and I specify the LoginPath, so I guess that's how it knows where my login view is. Would that make sense?\r\n\r\nAlso, it seems to only happen after a user's Authentication Cookie has expired. So they are redirected to GET /Login."
      },
      {
        "user": "dougbu",
        "created_at": "2016-12-07T23:46:41Z",
        "body": "@john-luke-laue MVC includes antiforgery tokens in generated forms by default. That can be overridden but the templates do not do this.\r\n\r\nI'm not sure what you mean in the remainder of your last comment. Suggest they are probably better answered on StackOverflow or through experimentation.\r\n\r\nClosing this issue because your original questions are answered."
      }
    ]
  },
  {
    "number": 1308,
    "title": "Is there a way to create a class library for .NET Core and the normal .NET",
    "created_at": "2016-02-17T09:46:31Z",
    "closed_at": "2016-02-23T17:54:21Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/dotnet/aspnetcore/issues/1308",
    "body": "Hi everyone,\n\nI need a way to build a library that I can use in a WPF-Application and in a .NET Core Web-API. Is there any way to do this?\n\nPaule\n",
    "comments_url": "https://api.github.com/repos/dotnet/aspnetcore/issues/1308/comments",
    "author": "paule96",
    "comments": [
      {
        "user": "Eilon",
        "created_at": "2016-02-21T19:45:47Z",
        "body": "Sure - create an xproj/project.json, target whichever framework(s) you want, and cross-compile to those frameworks. E.g. target `dnxcore50` and `net451`. In WPF you'd consume the `net451` build, and in .NET Core you'd use the `dnxcore50` target (note that this target is in the process of being changed, but if you use it right now you'll be well-prepared for the future).\n"
      },
      {
        "user": "paule96",
        "created_at": "2016-02-23T17:05:23Z",
        "body": "Okay thx :)\n"
      }
    ]
  },
  {
    "number": 861,
    "title": "ErrorPageOptions in beta6",
    "created_at": "2015-08-24T21:47:28Z",
    "closed_at": "2015-08-28T14:37:04Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/dotnet/aspnetcore/issues/861",
    "body": "After updating the ASP.Net5 WebApp project template to beta6 I have the following issue in Startup.cs:\n\n```\napp.UseErrorPage(ErrorPageOptions.ShowAll);\n```\n\nThis line throws _'ErrorPageOptions' does not contain a definition for 'ShowAll'._ Any idea, how this is handled in beta6?\n",
    "comments_url": "https://api.github.com/repos/dotnet/aspnetcore/issues/861/comments",
    "author": "manfredk",
    "comments": [
      {
        "user": "manfredk",
        "created_at": "2015-08-24T21:57:34Z",
        "body": "ErrorPageOptions still live in Diagnostics, so I checked it in Object Viewer but couldn't find \"ShowAll\".\n\nAfter reading the intellisense description I solved the problem with:\n\n```\napp.Properties[\"host.AppMode\"] = \"development\";\napp.UseErrorPage();\n```\n\nThis worked and seems to be the way to show all errors in beta6.\n"
      },
      {
        "user": "Tratcher",
        "created_at": "2015-08-25T16:36:43Z",
        "body": "Correct, most of the configuration was removed from EPO. Note you don't need the `app.Properties[\"host.AppMode\"] = \"development\";` line either, that looks like legacy from Katana.  To conditionally include the middleware do something like this:\n\n``` c#\n        public void Configure(IApplicationBuilder app, IHostingEnvironment env)\n        {\n            // Add the following to the request pipeline only in development environment.\n            if (env.IsDevelopment())\n            {\n                app.UseErrorPage();\n            }\n            else\n            {\n                // Add Error handling middleware which catches all application specific errors and\n                // sends the request to the following path or controller action.\n                app.UseErrorHandler(\"/Home/Error\");\n            }\n// ...\n```\n"
      },
      {
        "user": "henkmollema",
        "created_at": "2015-08-27T07:33:47Z",
        "body": "You used to be able to configure which parts of the error page you wanted to show with `ErrorPageOptions`. That has been removed since beta6 and we just show everything by default. The only thing can configure now is the amount of lines of source code before and after the line of code in the exception's stack frame. You can remove the `ErrorPageOptions.ShowAll` as stated above.\n"
      },
      {
        "user": "manfredk",
        "created_at": "2015-08-28T14:37:04Z",
        "body": "thx for the clarification, very helpful.\n"
      }
    ]
  },
  {
    "number": 645,
    "title": "Implicit references",
    "created_at": "2015-05-29T16:49:36Z",
    "closed_at": "2015-06-06T10:26:22Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/dotnet/aspnetcore/issues/645",
    "body": "If an app makes an explicit reference to some assembly in some package, you would expect it to have that package listed in the _project.json_ file. \n\nHowever what happens if there is an implicit reference? The one use-case we have is that the **Hosting:Application** environment variable _may_ be set and this allows an alternative Startup class to be executed when the app starts up. This has nothing to do with the app itself (the environment variable applies to _all_ apps) so the app would not have an entry in the _project.json_ file. However when you try to run the app, it fails because the runtime is trying to find the global Startup class and since there is no entry in the _project.json_ file for the appropriate package the load fails even if the package is available in the _packages_ folder. \n\nThis begs the question on how such corner cases for implicit references should be handled. Ideally there should be a way (env variable etc.) to specify which package contains the assembly containing the global startup. Or am I doing something wrong with my setup?\n",
    "comments_url": "https://api.github.com/repos/dotnet/aspnetcore/issues/645/comments",
    "author": "sujitdmello",
    "comments": [
      {
        "user": "Tratcher",
        "created_at": "2015-06-04T20:37:23Z",
        "body": "Yeah, that\u2019s not supposed to work. The package directory is not searched by Assembly.Load, packages must be directly or transitively referenced from the project.json. I think it would work if the assembly were in the GAC or in the root application directory.\n"
      },
      {
        "user": "sujitdmello",
        "created_at": "2015-06-05T15:25:53Z",
        "body": "GAC is not a viable options since we are targeting CoreCLR.  And asking each app to package an assembly in their root folder is a bit odd.\n\nI think the Hosting:Application value should contain both the package and assembly name and get resolved by the runtime as a complete unit.\n\nSujit\n"
      },
      {
        "user": "davidfowl",
        "created_at": "2015-06-05T16:37:30Z",
        "body": "We don't have first class support for adding to the dependency closure outside of the project.json file. It's doable with a custom assembly loader, it's also possible to do it if you launch dnx manually and pass in search paths. At that point tho the version resolution has already happened so if your hosting:application and its dependency closure use anything that conflicts with the application, it may fail (but that's no different to what happens today in regular .NET apps). \n\nThe DNX resolves the dependency graph upfront based on your `project.json` (it doesn't load the assemblies, it just resolves them), so for any assemblies you load outside of that, you're on your own.\n"
      },
      {
        "user": "sujitdmello",
        "created_at": "2015-06-05T17:00:28Z",
        "body": "Thanks @Tratcher  @davidfowl  for the explanation. The only issue is that this negates the usage of the Hosting:Application feature. I am not sure how this was intended to be used but if an application has to have a reference to an assembly that it does not actually use, but may get called implicitly by the StartupLoader based on the environment variable, then that design is a bit flawed IMHO.\n"
      },
      {
        "user": "davidfowl",
        "created_at": "2015-06-06T05:35:57Z",
        "body": "> I am not sure how this was intended to be used but if an application has to have a reference to an assembly that it does not actually use.\n\nJust because you don't use the API doesn't mean you aren't \"using\" the package. Applications never call Hosting directly but reference it because it loads within the scope of the user's dependencies.\n"
      },
      {
        "user": "sujitdmello",
        "created_at": "2015-06-06T10:26:22Z",
        "body": "That's fair. Thanks.\n"
      }
    ]
  },
  {
    "number": 19530,
    "title": "httpContext.Response.OnStarting lambdas executing in reverse order ",
    "created_at": "2020-03-03T17:05:17Z",
    "closed_at": "2020-03-04T04:12:17Z",
    "labels": [
      "help wanted",
      "Docs",
      "good first issue",
      "area-networking"
    ],
    "url": "https://github.com/dotnet/aspnetcore/issues/19530",
    "body": "I have a setup where the same cookie might get deleted, set or changed in the same request based on various business logic. As per Microsoft suggestion, I have these cookie updates wrapped up inside OnStarting. In doing so, I have noticed that the lamdas run in the REVERSE order of their registration.\r\n\r\nEg: \r\n```\r\n\r\n            this.HttpContext.Response.OnStarting(\r\n                () =>\r\n                {\r\n                    Console.WriteLine(1);\r\n                    return Task.CompletedTask;\r\n                });\r\n\r\n            this.HttpContext.Response.OnStarting(\r\n               () =>\r\n               {\r\n                   Console.WriteLine(2);\r\n                   return Task.CompletedTask;\r\n               });\r\n\r\n            this.HttpContext.Response.OnStarting(\r\n               () =>\r\n               {\r\n                   Console.WriteLine(3);\r\n                   return Task.CompletedTask;\r\n               });\r\n\r\n            this.HttpContext.Response.OnStarting(\r\n               () =>\r\n               {\r\n                   Console.WriteLine(4);\r\n                   return Task.CompletedTask;\r\n               });\r\n\r\n            this.HttpContext.Response.OnStarting(\r\n               () =>\r\n               {\r\n                   Console.WriteLine(5);\r\n                   return Task.CompletedTask;\r\n               });\r\n\r\n            this.HttpContext.Response.OnStarting(\r\n               () =>\r\n               {\r\n                   Console.WriteLine(6);\r\n                   return Task.CompletedTask;\r\n               });\r\n\r\n            this.HttpContext.Response.OnStarting(\r\n               () =>\r\n               {\r\n                   Console.WriteLine(7);\r\n                   return Task.CompletedTask;\r\n               });\r\n\r\n```\r\n\r\nOutputs:\r\n7\r\n6\r\n5\r\n4\r\n3\r\n2\r\n1\r\n\r\nASP.NET Core version: 3.1",
    "comments_url": "https://api.github.com/repos/dotnet/aspnetcore/issues/19530/comments",
    "author": "mtamrakar",
    "comments": [
      {
        "user": "mkArtakMSFT",
        "created_at": "2020-03-03T17:17:06Z",
        "body": "@anurse I'm not sure `hosting` is the right area for this. Can you please adjust as necessary? Thanks!"
      },
      {
        "user": "Tratcher",
        "created_at": "2020-03-03T17:46:31Z",
        "body": "This is intentional to mirror the middleware pipeline ordering. E.g. The last thing to register is the inner most component in the pipeline and so it gets to look at the response first.\r\n\r\nShould update the doc comments to reflect this.\r\n\r\nThat said, what specific guidance did you get for using OnStarting? It's one of the harder APIs to use correctly, especially with complex interactions like this. You might do better to abstract the cookie handling to centralized logic and restrict to a single OnStarting event to apply the aggregate result."
      },
      {
        "user": "mtamrakar",
        "created_at": "2020-03-03T19:00:12Z",
        "body": "At one point, we were trying solve the \"response has started\" issue and since then wrapped a cookie manager on top of OnStarting. You can imagine how these type of updates could happen from different part of the code which needs to run in sequence.\r\n\r\n```\r\n public void DeleteCookie(string name)\r\n        {\r\n            var httpContext = this.httpContextAccessor.HttpContext;\r\n\r\n            if (httpContext.Request.Cookies.ContainsKey(name))\r\n            {\r\n                httpContext.Response.OnStarting(\r\n                    () =>\r\n                    {\r\n                        httpContext.Response.Cookies.Delete(\r\n                        name);\r\n\r\n                        return Task.CompletedTask;\r\n                    });\r\n            }\r\n```\r\n\r\nIs there any risk of having these updates like this?\r\n```\r\n public void DeleteCookie(string name)\r\n        {\r\n            var httpContext = this.httpContextAccessor.HttpContext;\r\n             httpContext.Response.Cookies.Delete(name);\r\n        }\r\n```"
      },
      {
        "user": "Tratcher",
        "created_at": "2020-03-03T20:40:24Z",
        "body": "Your second example is fine if you check HttpContext.Response.HasStarted first. No cookies can be modified after HasStarted, even with OnStarting."
      },
      {
        "user": "mtamrakar",
        "created_at": "2020-03-04T03:46:29Z",
        "body": "Ideally, when would we ever do the OnStarting registration then?"
      },
      {
        "user": "Tratcher",
        "created_at": "2020-03-04T03:57:22Z",
        "body": "OnStarting is useful for last second sanity checks, not much else."
      },
      {
        "user": "mtamrakar",
        "created_at": "2020-03-04T04:12:17Z",
        "body": "Thank you. I'm closing the issue as OnStarting is doing what it supposed to and I do see that a comment update is in progress to clarify it's execution order.\r\n\r\nI think we will just go with direct updates and handle out of sequence header updates more carefully."
      }
    ]
  }
]