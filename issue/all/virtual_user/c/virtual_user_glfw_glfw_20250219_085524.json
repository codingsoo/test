[
  {
    "id": "https://github.com/glfw/glfw/issues/929",
    "source": {
      "issue_number": 929
    },
    "initial_question": {
      "title": "mac port cmake find_package(glfw3 REQUIRED) does not init INCLUDE_DIR or LIBRARY_DIR variables",
      "body": "I'm trying to use glfw3 3.2.1 and when I run the following cmake init it successfully finds the glfw3 package but does not seem to initialize the expected include or library variables.\r\n```\r\ncmake_minimum_required(VERSION 3.7)\r\nPROJECT(test)\r\nfind_package(glfw3 REQUIRED)\r\nADD_EXECUTABLE(test test.cpp)\r\n```\r\nRunning make leads to\r\n```\r\nfatal error: 'GLFW/glfw3.h' file not found\r\n```\r\nWhat am I missing?"
    },
    "satisfaction_conditions": [
      "CMake must correctly locate and link GLFW header files",
      "CMake target configuration must properly handle dependencies"
    ],
    "created_at": "2017-01-06T03:21:04Z"
  },
  {
    "id": "https://github.com/glfw/glfw/issues/759",
    "source": {
      "issue_number": 759
    },
    "initial_question": {
      "title": "GLFW_CURSOR_DISABLED produces large deltas",
      "body": "I am testing GLFW on an Ubuntu Desktop 16.04 LTS x64 on Oracle VirtualBox 5.0.20 with a Windows 7 x64 host.\n\nThere, when I use `glfwSetInputMode(window, GLFW_CURSOR, GLFW_CURSOR_DISABLED);` the callback registered via `glfwSetCursorPosCallback` receives very large position deltas. For example, when I move the mouse only one pixel to the right, the xpos delta sometimes is -400.0, other times -110.0 and then sometimes even -1000.0, also somtimes positive and sometimes negative.\nI know that the xpos and ypos coordinates can have arbitrary large values since the mouse cursor is unrestricted. But I am talking about the delta (the changes between successive xpos and ypos values for successive calls of the callback). I am getting very large deltas here.\nOn Windows everything is fine. It's just weird on Ubuntu Desktop 16.04 LTS. I don't know whether it is a thing with Oracle VirtualBox.\n\nHere is the example app I use to test this:\n\n``` C\n#include <GLFW/glfw3.h>\n#include <stdlib.h>\n#include <stdio.h>\nstatic void error_callback(int error, const char* description) {\n    fprintf(stderr, \"Error: %s\\n\", description);\n}\nstatic void key_callback(GLFWwindow* window, int key, int scancode, int action, int mods) {\n    if (key == GLFW_KEY_ESCAPE && action == GLFW_PRESS)\n        glfwSetWindowShouldClose(window, GLFW_TRUE);\n}\nstatic void cp_callback(GLFWwindow* window, double xpos, double ypos) {\n  fprintf(stderr, \"%f , %f\\n\", (float)xpos, (float)ypos);\n  fflush(stderr);\n}\nint main(void) {\n    GLFWwindow* window;\n    glfwSetErrorCallback(error_callback);\n    if (!glfwInit())\n        exit(EXIT_FAILURE);\n    window = glfwCreateWindow(640, 480, \"\", NULL, NULL);\n    if (!window) {\n        glfwTerminate();\n        exit(EXIT_FAILURE);\n    }\n    glfwSetKeyCallback(window, key_callback);\n    glfwSetCursorPosCallback(window, cp_callback);\n    glfwSetInputMode(window, GLFW_CURSOR, GLFW_CURSOR_DISABLED);\n    while (!glfwWindowShouldClose(window)) {\n        glfwPollEvents();\n    }\n    glfwDestroyWindow(window);\n    glfwTerminate();\n    exit(EXIT_SUCCESS);\n}\n```\n\nAnd here is the output I get from moving the mouse cursor very very slightly (should be just one pixel each) to the right:\n\n```\n639.000000 , 479.000000\n958.000000 , 479.000000\n1277.000000 , 479.000000\n1596.000000 , 479.000000\n1915.000000 , 479.000000\n2234.000000 , 479.000000\n2553.000000 , 479.000000\n2872.000000 , 479.000000\n3191.000000 , 479.000000\n3510.000000 , 479.000000\n```\n\nIn this run, the delta happens to be around +319.0'ish.\nI do not have a HighDPI monitor or HighDPI mouse.\n\nThe issue does not happen when using GLFW_CURSOR_HIDDEN or GLFW_CURSOR_NORMAL. In those two settings, I get correct pixel values.\n"
    },
    "satisfaction_conditions": [
      "Mouse cursor position deltas must reflect actual physical mouse movement",
      "GLFW_CURSOR_DISABLED mode must function correctly in the virtual machine environment",
      "No conflict between host OS and guest OS cursor handling",
      "Application receives accurate cursor position updates"
    ],
    "created_at": "2016-05-11T21:51:22Z"
  }
]