[
  {
    "number": 2361,
    "title": "Clone not supported for this type of IndexIVF",
    "created_at": "2022-06-19T19:27:41Z",
    "closed_at": "2022-06-28T16:41:30Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/facebookresearch/faiss/issues/2361",
    "body": "# Summary\r\n\r\nI'm trying to move a trained composite index to a GPU, so that adding embeddings (~5.8B) to the index is faster. However, my IndexIVF cannot be cloned onto the GPU. Here's a minimal reproducing snippet:\r\n\r\n```\r\nimport faiss\r\n\r\nindex = faiss.index_factory(128, \"OPQ4_64,IVF16384_HNSW32,PQ16x4fs\")\r\nxt = faiss.rand((20000, 128))\r\nindex.train(xt)\r\n\r\nfaiss.index_cpu_to_all_gpus(index)\r\n```\r\n\r\nwhich yields:\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"tmp.py\", line 7, in <module>\r\n    faiss.index_cpu_to_all_gpus(index)\r\n  File \"/opt/conda/lib/python3.8/site-packages/faiss/__init__.py\", line 887, in index_cpu_to_all_gpus\r\n    index_gpu = index_cpu_to_gpus_list(index, co=co, gpus=None, ngpu=ngpu)\r\n  File \"/opt/conda/lib/python3.8/site-packages/faiss/__init__.py\", line 899, in index_cpu_to_gpus_list\r\n    index_gpu = index_cpu_to_gpu_multiple_py(res, index, co, gpus)\r\n  File \"/opt/conda/lib/python3.8/site-packages/faiss/__init__.py\", line 882, in index_cpu_to_gpu_multiple_py\r\n    index = index_cpu_to_gpu_multiple(vres, vdev, index, co)\r\n  File \"/opt/conda/lib/python3.8/site-packages/faiss/swigfaiss_avx2.py\", line 10278, in index_cpu_to_gpu_multiple\r\n    return _swigfaiss_avx2.index_cpu_to_gpu_multiple(provider, devices, index, options)\r\nRuntimeError: Error in virtual faiss::IndexIVF* faiss::Cloner::clone_IndexIVF(const faiss::IndexIVF*) at /root/miniconda3/conda-bld/faiss-pkg_1641228905850/work/faiss/clone_index.cpp:71: clone not supported for this type of IndexIVF\r\n```\r\n\r\nIs this expected behavior? The IndexIVF I'm using doesn't seem to be special. I've also tried:\r\n\r\n```\r\nindex_ivf = faiss.extract_index_ivf(index)\r\nindex_ivf = faiss.index_cpu_to_all_gpus(index_ivf)\r\n```\r\n\r\nwith similar results.\r\n\r\n# Platform\r\n\r\nOS: `Linux 53143a0863f8 5.4.0-94-generic #106~18.04.1-Ubuntu SMP Fri Jan 7 07:23:53 UTC 2022 x86_64 x86_64 x86_64 GNU/Linux`\r\n(Docker image `nvidia/cuda:11.3.0-devel-ubuntu20.04`)\r\n\r\nFaiss version: \r\n\r\n```\r\nroot@fddb9798ebfc:/src# conda list\r\n# packages in environment at /opt/conda:\r\n#\r\n# Name                    Version                   Build  Channel\r\n_libgcc_mutex             0.1                        main\r\n_openmp_mutex             4.5                       1_gnu\r\nattrs                     21.4.0                   pypi_0    pypi\r\nblas                      1.0                         mkl\r\nbrotlipy                  0.7.0           py38h27cfd23_1003\r\nca-certificates           2022.4.26            h06a4308_0\r\ncertifi                   2022.5.18.1      py38h06a4308_0\r\ncffi                      1.15.0           py38hd667e15_1\r\ncharset-normalizer        2.0.4              pyhd3eb1b0_0\r\ncolorama                  0.4.4              pyhd3eb1b0_0\r\nconda                     4.13.0           py38h06a4308_0\r\nconda-content-trust       0.1.1              pyhd3eb1b0_0\r\nconda-package-handling    1.8.1            py38h7f8727e_0\r\ncryptography              37.0.1           py38h9ce1e76_0\r\ncudatoolkit               11.3.1               h2bc3f7f_2\r\neinops                    0.4.1                    pypi_0    pypi\r\nfaiss-gpu                 1.7.2           py3.8_h28a55e0_0_cuda11.3    pytorch\r\nfilelock                  3.7.1                    pypi_0    pypi\r\nfire                      0.4.0                    pypi_0    pypi\r\nhuggingface-hub           0.7.0                    pypi_0    pypi\r\nidna                      3.3                pyhd3eb1b0_0\r\nimportlib-metadata        4.11.1                   pypi_0    pypi\r\nintel-openmp              2021.4.0          h06a4308_3561\r\njsonlines                 3.0.0                    pypi_0    pypi\r\nld_impl_linux-64          2.35.1               h7274673_9\r\nlibfaiss                  1.7.2           hfc2d529_0_cuda11.3    pytorch\r\nlibffi                    3.3                  he6710b0_2\r\nlibgcc-ng                 9.3.0               h5101ec6_17\r\nlibgomp                   9.3.0               h5101ec6_17\r\nlibstdcxx-ng              9.3.0               hd4cf53a_17\r\nlibuv                     1.40.0               h7b6447c_0\r\nmkl                       2021.4.0           h06a4308_640\r\nmkl-service               2.4.0            py38h7f8727e_0\r\nmkl_fft                   1.3.1            py38hd3c417c_0\r\nmkl_random                1.2.2            py38h51133e4_0\r\nncurses                   6.3                  h7f8727e_2\r\nnumpy                     1.22.3           py38he7a7128_0\r\nnumpy-base                1.22.3           py38hf524024_0\r\nopenssl                   1.1.1o               h7f8727e_0\r\npackaging                 21.3                     pypi_0    pypi\r\npip                       21.2.4           py38h06a4308_0\r\npycosat                   0.6.3            py38h7b6447c_1\r\npycparser                 2.21               pyhd3eb1b0_0\r\npyopenssl                 22.0.0             pyhd3eb1b0_0\r\npyparsing                 3.0.9                    pypi_0    pypi\r\npysocks                   1.7.1            py38h06a4308_0\r\npython                    3.8.13               h12debd9_0\r\npytorch                   1.10.2          py3.8_cuda11.3_cudnn8.2.0_0    pytorch\r\npytorch-mutex             1.0                        cuda    pytorch\r\npyyaml                    6.0                      pypi_0    pypi\r\nreadline                  8.1.2                h7f8727e_1\r\nregex                     2022.6.2                 pypi_0    pypi\r\nrequests                  2.27.1             pyhd3eb1b0_0\r\nretro-pytorch             0.3.7                    pypi_0    pypi\r\nruamel_yaml               0.15.100         py38h27cfd23_0\r\nsentencepiece             0.1.96                   pypi_0    pypi\r\nsetuptools                61.2.0           py38h06a4308_0\r\nsix                       1.16.0             pyhd3eb1b0_1\r\nsqlite                    3.38.2               hc218d9a_0\r\ntermcolor                 1.1.0                    pypi_0    pypi\r\ntk                        8.6.11               h1ccaba5_0\r\ntokenizers                0.12.1                   pypi_0    pypi\r\ntqdm                      4.63.0             pyhd3eb1b0_0\r\ntransformers              4.20.0                   pypi_0    pypi\r\ntyping_extensions         4.1.1              pyh06a4308_0\r\ntzdata                    2022a                hda174b7_0\r\nurllib3                   1.26.8             pyhd3eb1b0_0\r\nwheel                     0.37.1             pyhd3eb1b0_0\r\nxz                        5.2.5                h7b6447c_0\r\nyaml                      0.2.5                h7b6447c_0\r\nzipp                      3.8.0                    pypi_0    pypi\r\nzlib                      1.2.12               h7f8727e_1\r\n```\r\n\r\nInstalled from: Anaconda\r\n\r\nRunning on:\r\n- [ ] CPU\r\n- [X] GPU\r\n\r\nInterface: \r\n- [ ] C++\r\n- [X] Python\r\n",
    "comments_url": "https://api.github.com/repos/facebookresearch/faiss/issues/2361/comments",
    "author": "mitchellgordon95",
    "comments": [
      {
        "user": "mdouze",
        "created_at": "2022-06-27T23:50:11Z",
        "body": "The index type that you build here is tuned for CPU indexing. \r\n\r\n\"OPQ4_64,IVF16384_HNSW32,PQ16x4fs\"\r\n\r\n- IVFx_HNSW is not supported (and not necessary) on GPU: use IVF16386\r\n\r\n- the \"fs\" variant of PQ is not supported on GPU. Only 8-bit PQ is supported (and more accurate anyways). \r\n\r\nSo this boils down to \"OPQ8_64,IVF16386,PQ8\"\r\n"
      }
    ]
  },
  {
    "number": 916,
    "title": "Very high matrice dimentionality makes crash the machine when indexing",
    "created_at": "2019-08-16T09:53:10Z",
    "closed_at": "2019-08-23T12:56:45Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/facebookresearch/faiss/issues/916",
    "body": "# Platform\r\n\r\nOS: Linux Ubuntu 19.04\r\nConfig machine:\r\n- 8 GPU V100\r\n- CPU 96 cores\r\n- 614 Go RAM\r\n\r\nFaiss version: 1.5.3 (commit 656368b5eda4d376177a3355673d217fa95000b6)\r\nFaiss compilation options: `./configure --with-cuda=/usr/local/cuda-10.0 --prefix=/opt/faiss --with-python=/usr/lib/python3.7/` with MKL version 2019.2.187-1\r\n\r\nRunning on:\r\n- [ ] CPU\r\n- [x] GPU\r\n\r\nInterface: \r\n- [ ] C++\r\n- [x] Python\r\n\r\n# Reproduction instructions\r\n\r\nHere the minimal piece of code to reproduce the issue:\r\n\r\n```\r\nimport numpy as np\r\nimport faiss\r\nimport time\r\nk = 10\r\nd = 1536\r\nnb = 30000000\r\nnq = 1\r\nnp.random.seed(1234) \r\nxb = np.random.random((nb, d)).astype('float32')\r\nxb[:, 0] += np.arange(nb) / 1000.\r\nxq = np.random.random((nq, d)).astype('float32')\r\nxq[:, 0] += np.arange(nq) / 1000.\r\n\r\nindex = faiss.IndexFlatL2(d)\r\nco = faiss.GpuMultipleClonerOptions()\r\nco.shard = True\r\nco.useFloat16 = True\r\nindex = faiss.index_cpu_to_all_gpus(index, co, ngpu=4)\r\nindex.add(xb) ##### WHERE IT CRASHS\r\nstart_time = time.process_time()\r\nD, I = index.search(xq, k)\r\nprint(time.process_time() - start_time, \" seconds\")\r\nprint(I)\r\n```\r\n\r\nWhen running this piece of code the line ```index.add()``` makes crash the machine without any error message, the machine just hangs and then restarts.\r\n",
    "comments_url": "https://api.github.com/repos/facebookresearch/faiss/issues/916/comments",
    "author": "jplu",
    "comments": [
      {
        "user": "mdouze",
        "created_at": "2019-08-22T13:17:23Z",
        "body": "Right, it is a bit harsh that it does not report a usable error message. However, you are trying to add 11G of data at once. Could you try to add the data by slices of 1M elements?\r\n\r\n"
      }
    ]
  },
  {
    "number": 857,
    "title": "Can Faiss GPU index be shared between processes?",
    "created_at": "2019-06-11T12:02:02Z",
    "closed_at": "2019-06-12T06:38:40Z",
    "labels": [
      "question",
      "GPU"
    ],
    "url": "https://github.com/facebookresearch/faiss/issues/857",
    "body": "# Summary\r\nCan Faiss GPU index be shared between processes? i.e. is it possible to call search on an index which is in the GPU from multiple processes?\r\n\r\nOS: Ubuntu 18.04 LTS\r\n\r\nRunning on:\r\n- [ ] CPU\r\n- [x ] GPU\r\n\r\nInterface: \r\n- [ ] C++\r\n- [x ] Python\r\n\r\n# Reproduction instructions\r\nCurrently, I call Faiss from each process using:\r\n```\r\n        index = faiss.read_index(index.index))\r\n        co = faiss.GpuClonerOptions()\r\n        res = faiss.StandardGpuResources()\r\n        index = faiss.index_cpu_to_gpu(res, 0, index , co)\r\n```\r\nThis result in a waste of GPU memory. Is it possible to search the index from other python processes as well instead of reloading it? \r\nI just search the index so it can be on the GPU the whole time.\r\n\r\n",
    "comments_url": "https://api.github.com/repos/facebookresearch/faiss/issues/857/comments",
    "author": "AmitRozner",
    "comments": [
      {
        "user": "wickedfoo",
        "created_at": "2019-06-12T01:20:24Z",
        "body": "This is not possible and will not be implemented, as this requires CUDA IPC handles etc.\r\n\r\nWhy are you trying to do this? Why can't the index just be owned by a single process and you route requests to that process?\r\n"
      }
    ]
  },
  {
    "number": 822,
    "title": "Make py -- SyntaxError: invalid syntax",
    "created_at": "2019-05-09T05:03:54Z",
    "closed_at": "2019-05-13T07:58:51Z",
    "labels": [
      "question",
      "install"
    ],
    "url": "https://github.com/facebookresearch/faiss/issues/822",
    "body": "## when I run \"make py\", the following error appears\r\n\r\n```\r\nmake[1]: Entering directory 'path_to/faiss/python'\r\npython -c++ -Doverride= -I../ -DGPU_WRAPPER -o swigfaiss.cpp swigfaiss.swig\r\n  File \"<string>\", line 1\r\n    ++\r\n     ^\r\nSyntaxError: invalid syntax\r\nMakefile:17: recipe for target 'swigfaiss.cpp' failed\r\nmake[1]: [swigfaiss.cpp] Error 1 (ignored)\r\ng++ -std=c++11 -DFINTEGER=int  -fopenmp -I/usr/local/cuda-10.0/include  -fPIC -m64 -Wno-sign-compare -g -O3 -Wall -Wextra -msse4 -mpopcnt -I \\\r\n               -I../ -c swigfaiss.cpp -o swigfaiss.o\r\ng++: error: swigfaiss.cpp: No such file or directory\r\ng++: fatal error: no input files\r\ncompilation terminated.\r\nMakefile:20: recipe for target 'swigfaiss.o' failed\r\nmake[1]: *** [swigfaiss.o] Error 1\r\nmake[1]: Leaving directory '/opt/Faiss/faiss/python'\r\nMakefile:82: recipe for target 'py' failed\r\nmake: *** [py] Error 2\r\n```\r\n# Env\r\n\r\nOS: Ubuntu 18.04.2 LTS\r\nFaiss version: up to date with 'origin/master'\r\nRunning on:\r\n- [ ] CPU\r\n- [x] GPU\r\nInterface: \r\n- [x] C++\r\n- [x] Python\r\n\r\n# Previous steps done:\r\n\r\n----\r\nswig -version\r\nSWIG Version 4.0.0\r\nCompiled with g++ [x86_64-pc-linux-gnu]\r\n---\r\n\r\n$ ./configure --with-cuda=/usr/local/cuda-10.0  --with-python=/usr/bin/python3\r\n\r\n```\r\n./configure --with-cuda=/usr/local/cuda-10.0  --with-python=/usr/bin/python3\r\nchecking for g++... g++\r\nchecking whether the C++ compiler works... yes\r\nchecking for C++ compiler default output file name... a.out\r\nchecking for suffix of executables...\r\nchecking whether we are cross compiling... no\r\nchecking for suffix of object files... o\r\nchecking whether we are using the GNU C++ compiler... yes\r\nchecking whether g++ accepts -g... yes\r\nchecking whether g++ supports C++11 features with -std=c++11... yes\r\nchecking for gcc... gcc\r\nchecking whether we are using the GNU C compiler... yes\r\nchecking whether gcc accepts -g... yes\r\nchecking for gcc option to accept ISO C89... none needed\r\nchecking how to run the C preprocessor... gcc -E\r\nchecking whether make sets $(MAKE)... yes\r\nchecking for a thread-safe mkdir -p... /bin/mkdir -p\r\nchecking for /usr/bin/python3... no\r\nchecking for Python C flags... ./configure: line 4138: -c: command not found\r\n\r\nchecking for swig... no\r\nchecking how to run the C++ preprocessor... g++ -std=c++11 -E\r\nchecking for grep that handles long lines and -e... /bin/grep\r\nchecking for egrep... /bin/grep -E\r\nchecking for ANSI C header files... yes\r\nchecking for sys/types.h... yes\r\nchecking for sys/stat.h... yes\r\nchecking for stdlib.h... yes\r\nchecking for string.h... yes\r\nchecking for memory.h... yes\r\nchecking for strings.h... yes\r\nchecking for inttypes.h... yes\r\nchecking for stdint.h... yes\r\nchecking for unistd.h... yes\r\nchecking for nvcc... /usr/local/cuda-10.0/bin/nvcc\r\nchecking cuda.h usability... yes\r\nchecking cuda.h presence... yes\r\nchecking for cuda.h... yes\r\nchecking for cublasAlloc in -lcublas... yes\r\nchecking for cudaSetDevice in -lcudart... yes\r\nchecking float.h usability... yes\r\nchecking float.h presence... yes\r\nchecking for float.h... yes\r\nchecking limits.h usability... yes\r\nchecking limits.h presence... yes\r\nchecking for limits.h... yes\r\nchecking stddef.h usability... yes\r\nchecking stddef.h presence... yes\r\nchecking for stddef.h... yes\r\nchecking for stdint.h... (cached) yes\r\nchecking for stdlib.h... (cached) yes\r\nchecking for string.h... (cached) yes\r\nchecking sys/time.h usability... yes\r\nchecking sys/time.h presence... yes\r\nchecking for sys/time.h... yes\r\nchecking for unistd.h... (cached) yes\r\nchecking for stdbool.h that conforms to C99... no\r\nchecking for _Bool... no\r\nchecking for inline... inline\r\nchecking for int32_t... yes\r\nchecking for int64_t... yes\r\nchecking for C/C++ restrict keyword... __restrict\r\nchecking for size_t... yes\r\nchecking for uint16_t... yes\r\nchecking for uint32_t... yes\r\nchecking for uint64_t... yes\r\nchecking for uint8_t... yes\r\nchecking for stdlib.h... (cached) yes\r\nchecking for GNU libc compatible malloc... yes\r\nchecking for stdlib.h... (cached) yes\r\nchecking for unistd.h... (cached) yes\r\nchecking for sys/param.h... yes\r\nchecking for getpagesize... yes\r\nchecking for working mmap... yes\r\nchecking for clock_gettime... yes\r\nchecking for floor... yes\r\nchecking for gettimeofday... yes\r\nchecking for memmove... yes\r\nchecking for memset... yes\r\nchecking for munmap... yes\r\nchecking for pow... yes\r\nchecking for sqrt... yes\r\nchecking for strerror... yes\r\nchecking for strstr... yes\r\nchecking for g++ -std=c++11 option to support OpenMP... -fopenmp\r\nchecking build system type... x86_64-pc-linux-gnu\r\nchecking host system type... x86_64-pc-linux-gnu\r\nchecking if sgemm_ is being linked in already... no\r\nchecking for sgemm_ in -lmkl_intel_lp64... no\r\nchecking for sgemm_ in -lmkl... no\r\nchecking for sgemm_ in -lopenblas... yes\r\nchecking for cheev_... yes\r\nchecking target system type... x86_64-pc-linux-gnu\r\nchecking for cpu arch... x86_64-pc-linux-gnu CPUFLAGS+=-msse4 -mpopcnt CXXFLAGS+=-m64\r\nconfigure: creating ./config.status\r\nconfig.status: creating makefile.inc\r\n```\r\n\r\n$ make\r\n$ make install\r\n\r\n",
    "comments_url": "https://api.github.com/repos/facebookresearch/faiss/issues/822/comments",
    "author": "0xhanh",
    "comments": [
      {
        "user": "Santiago810",
        "created_at": "2019-05-09T08:22:11Z",
        "body": "\r\nthe first line show some flag var are wrong\r\nthe second line show swig is not installed.\r\n\r\nI also fail when making py.\r\n```\r\n../Index.h:63: Warning 315: Nothing known about 'long'.\r\n../Index.h:63: Warning 315: Nothing known about 'long'.\r\n../Index.h:63: Warning 315: Nothing known about 'long'.\r\n../Index.h:63: Warning 315: Nothing known about 'long'.\r\nswigfaiss.swig:301: Warning 302: Identifier 'IndexShards' redefined (ignored) (Renamed from 'IndexShardsTemplate< faiss::Index >'),\r\n../IndexShards.h:79: Warning 302: previous definition of 'IndexShards'.\r\nswigfaiss.swig:302: Warning 302: Identifier 'IndexBinaryShards' redefined (ignored) (Renamed from 'IndexShardsTemplate< faiss::IndexBinary >'),\r\n../IndexShards.h:80: Warning 302: previous definition of 'IndexBinaryShards'.\r\nswigfaiss.swig:305: Warning 302: Identifier 'IndexReplicas' redefined (ignored) (Renamed from 'IndexReplicasTemplate< faiss::Index >'),\r\n../IndexReplicas.h:86: Warning 302: previous definition of 'IndexReplicas'.\r\nswigfaiss.swig:306: Warning 302: Identifier 'IndexBinaryReplicas' redefined (ignored) (Renamed from 'IndexReplicasTemplate< faiss::IndexBinary >'),\r\n../IndexReplicas.h:87: Warning 302: previous definition of 'IndexBinaryReplicas'.\r\n../Index.h:63: Warning 315: Nothing known about 'long'.\r\n../Index.h:63: Warning 315: Nothing known about 'long'.\r\n../Index.h:63: Warning 315: Nothing known about 'long'.\r\n../Index.h:63: Warning 315: Nothing known about 'long'.\r\n../Index.h:63: Warning 315: Nothing known about 'long'.\r\n../Index.h:63: Warning 315: Nothing known about 'long'.\r\n../Index.h:63: Warning 315: Nothing known about 'long'.\r\n../IndexBinary.h:38: Warning 315: Nothing known about 'Index::idx_t'.\r\n../Index.h:63: Warning 315: Nothing known about 'long'.\r\n../IndexBinary.h:38: Warning 315: Nothing known about 'Index::idx_t'.\r\n../Index.h:63: Warning 315: Nothing known about 'long'.\r\n../IndexBinary.h:38: Warning 315: Nothing known about 'Index::idx_t'.\r\n../Index.h:63: Warning 315: Nothing known about 'long'.\r\n../IndexBinary.h:38: Warning 315: Nothing known about 'Index::idx_t'.\r\n../Index.h:63: Warning 315: Nothing known about 'long'.\r\n../IndexBinary.h:38: Warning 315: Nothing known about 'Index::idx_t'.\r\n```\r\nthis warning lead to the idx_t undefined  when compile the swigfaiss.cpp.\r\nwhen I try to explicit typedefine idx_t, it still get error about other undefine functions.Needing help"
      },
      {
        "user": "beauby",
        "created_at": "2019-05-09T10:00:44Z",
        "body": "@hanhfgia Swig does not seem to be in your path."
      },
      {
        "user": "chenqiu01",
        "created_at": "2020-04-17T09:17:07Z",
        "body": "> > @hanhfgia Swig does not seem to be in your path.\r\n> \r\n> Thanks, reload env missed :). It's done\r\n\r\nExcuse me, What's the Path which i need to join in?"
      },
      {
        "user": "rookiezed",
        "created_at": "2022-09-27T02:06:06Z",
        "body": "> > > @hanhfgia Swig does not seem to be in your path.\r\n> > \r\n> > \r\n> > Thanks, reload env missed :). It's done\r\n> \r\n> Excuse me, What's the Path which i need to join in?\r\n\r\ntry install swig, this fix my problem"
      }
    ]
  },
  {
    "number": 375,
    "title": "Running on GPU slower than CPU?",
    "created_at": "2018-03-23T04:48:37Z",
    "closed_at": "2018-03-26T14:19:36Z",
    "labels": [
      "question",
      "GPU"
    ],
    "url": "https://github.com/facebookresearch/faiss/issues/375",
    "body": "# Summary\r\n\r\nI use faiss for my own dataset.\r\nFirst, I try IndexFlatL2 on cpu, it takes around 90 seconds for my dataset\r\nAnd then, I try multiple gpus by the code below, and it takes around 400 seconds for my dataset.\r\n\r\n```python\r\ncpu_index = faiss.IndexFlatL2(d)\r\n\r\ngpu_index = faiss.index_cpu_to_all_gpus(  # build the index\r\n    cpu_index\r\n)\r\n```\r\n\r\nSo, for the normal index like IndexFlat2D, how can I optimize the performance?",
    "comments_url": "https://api.github.com/repos/facebookresearch/faiss/issues/375/comments",
    "author": "hminle",
    "comments": [
      {
        "user": "mdouze",
        "created_at": "2018-03-23T12:08:36Z",
        "body": "Hi,\r\nWhat is the number of vectors, their dimension and how are you performing the searches (by batch or one by one)?"
      },
      {
        "user": "wickedfoo",
        "created_at": "2018-03-23T15:54:21Z",
        "body": "Also, how are you timing the search on the GPU? Are you including the copy of the index to the GPUs?\r\n\r\n"
      },
      {
        "user": "hminle",
        "created_at": "2018-03-26T07:34:59Z",
        "body": "@mdouze Hi, the size of my embeddings is (23600, 128)\r\nD = 128\r\nI perform the search one by one, not by batch\r\n"
      },
      {
        "user": "hminle",
        "created_at": "2018-03-26T07:38:06Z",
        "body": "@wickedfoo I run my script on my own dataset, \r\nFirst, I run it with simple index (IndexFlat2D).\r\nAnd then I modify my code to transfer the index to the gpu, and run my script again.\r\n"
      },
      {
        "user": "mdouze",
        "created_at": "2018-03-26T12:15:44Z",
        "body": "If you run the search one by one, you cannot take advantage of the GPU because of insufficient inherent parallelism and the synchronization and memory transfer overheads. "
      }
    ]
  },
  {
    "number": 2894,
    "title": "TypeError: in method 'IndexFlat_range_search', argument 4 of type 'float'",
    "created_at": "2023-06-05T18:34:02Z",
    "closed_at": "2023-06-06T17:24:48Z",
    "labels": [
      "help wanted"
    ],
    "url": "https://github.com/facebookresearch/faiss/issues/2894",
    "body": "# Summary\r\n\r\n<!-- Facebook has a bounty program for the safe disclosure of security bugs. In\r\nthose cases, please go through the process outlined on that page and do not\r\nfile a public issue. -->\r\n\r\nI have been using the `range_search` functionality with great success within the Python interpreter. However, when I attempt to call it through a bash interface, I get prompted the following error:\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"/path_to_script/test_faiss_cmd.py\", line 24, in <module>\r\n    lim, D, I = idx.range_search(X, thresh=r)\r\n  File \"/home/sebastiaan/miniconda3/envs/knn_tcr/lib/python3.9/site-packages/faiss/__init__.py\", line 492, in replacement_range_search\r\n    self.range_search_c(n, swig_ptr(x), thresh, res)\r\n  File \"/home/sebastiaan/miniconda3/envs/knn_tcr/lib/python3.9/site-packages/faiss/swigfaiss_avx2.py\", line 1631, in range_search\r\n    return _swigfaiss_avx2.IndexFlat_range_search(self, n, x, radius, result)\r\nTypeError: in method 'IndexFlat_range_search', argument 4 of type 'float'\r\n```\r\nRunning the exact same code in a Python interpreter does not produce the error, it only occurs from a command line interface.\r\n\r\n# Platform\r\n\r\nOS: Ubuntu 20.04.5 LTS\r\n\r\nFaiss version: faiss 1.7.2 py39h44b29b8_3_cpu conda-forge\r\n\r\nInstalled from: anaconda \r\n\r\nFaiss compilation options: /\r\n\r\nRunning on:\r\n- [X] CPU\r\n- [ ] GPU\r\n\r\nInterface: \r\n- [ ] C++\r\n- [X] Python\r\n\r\n# Reproduction instructions\r\n\r\n```python\r\nimport faiss\r\n\r\n# Generate random input array of shape (n, d)\r\nn = 500\r\nd = 272python3 test_faiss_cmd.py --n_vecs 100 --n_dims 272 --radius 50\r\nvecs = np.random.rand(n,d).astype(\"float32\")\r\n\r\n# Build Flat Index\r\nidx = faiss.IndexFlatL2(272)\r\nidx.train(vecs)\r\nidx.add(vecs)\r\n\r\n# Search Flat Index\r\nr = 24\r\nX = np.random.rand(1,d).astype(\"float32\")\r\nlim, D, I = idx.range_search(X, thresh=r)\r\n```\r\n\r\nThis example runs perfectly in a Python interpreter. However, in the following situation, this script fails and prompts the error that was mentioned previously.\r\n\r\n`argparse` script (test_faiss_cmd.py):\r\n\r\n```python\r\nimport faiss\r\nimport numpy as np\r\nimport argparse\r\n\r\nparser = argparse.ArgumentParser()\r\nparser.add_argument('--n_vecs', type=int)\r\nparser.add_argument('--n_dims', type=int)\r\nparser.add_argument('--radius')\r\nargs = parser.parse_args()\r\n\r\n# Generate random input array of shape (n, d)\r\nn = args.n_vecs\r\nd = args.n_dims\r\nvecs = np.random.rand(n,d).astype(\"float32\")\r\n\r\n# Build Flat Index\r\nidx = faiss.IndexFlatL2(args.n_dims)\r\nidx.train(vecs)\r\nidx.add(vecs)\r\n\r\n# Search Flat Index\r\nr = args.radius\r\nX = np.random.rand(1,d).astype(\"float32\")\r\nlim, D, I = idx.range_search(X, thresh=r)\r\n```\r\nCommand line:\r\n`python3 test_faiss_cmd.py --n_vecs 100 --n_dims 272 --radius 50`\r\n",
    "comments_url": "https://api.github.com/repos/facebookresearch/faiss/issues/2894/comments",
    "author": "svalkiers",
    "comments": [
      {
        "user": "mdouze",
        "created_at": "2023-06-06T09:12:15Z",
        "body": "radius is a string......"
      }
    ]
  },
  {
    "number": 1705,
    "title": "Indexing the feature vector list of unequal shapes",
    "created_at": "2021-02-23T22:31:38Z",
    "closed_at": "2021-02-24T14:56:17Z",
    "labels": [
      "help wanted"
    ],
    "url": "https://github.com/facebookresearch/faiss/issues/1705",
    "body": "I have extracted embeddings from images and each vectors are of different shapes. so I have added all the individual vector to a list `descriptors`.\r\n\r\nFinally I use the following code to index the descriptors,\r\n\r\n```\r\ndef create_index(features, index_file_name):\r\n    d = features.shape[1]\r\n    index_model = faiss.IndexFlatIP(d)\r\n    index_model.train(features)\r\n    index_model.add(features)\r\n    faiss.write_index(index_model, index_file_name)\r\n\r\n```\r\nwhereas `features` is a list of features with embeddings of varied shape. Unfortunately the list element has no shape which then throws an error message as follow,\r\n\r\n\r\n`\r\n    d = features.shape[1]\r\nAttributeError: 'list' object has no attribute 'shape'\r\n`\r\nHow can I index list of unequal feature vectors?\r\n",
    "comments_url": "https://api.github.com/repos/facebookresearch/faiss/issues/1705/comments",
    "author": "Zumbalamambo",
    "comments": [
      {
        "user": "mdouze",
        "created_at": "2021-02-24T14:08:39Z",
        "body": "You can't because it is not possible to compute a distance between vectors of different sizes."
      }
    ]
  },
  {
    "number": 1347,
    "title": "how to save IndexBinaryFlat on disk",
    "created_at": "2020-08-21T07:51:38Z",
    "closed_at": "2020-08-23T06:33:59Z",
    "labels": [
      "help wanted"
    ],
    "url": "https://github.com/facebookresearch/faiss/issues/1347",
    "body": "when I try to save index by `write_index()`\r\nI meet some problem\r\n\r\n> Traceback (most recent call last):\r\n>   File \"hamming.py\", line 50, in <module>\r\n>     main()\r\n>   File \"hamming.py\", line 43, in main\r\n>     faiss.write_index(index, \"./index_BinaryIVF_Hamming.index\")\r\n> NotImplementedError: Wrong number or type of arguments for overloaded function 'write_index'.\r\n>   Possible C/C++ prototypes are:\r\n>     faiss::write_index(faiss::Index const *,char const *)\r\n>     faiss::write_index(faiss::Index const *,FILE *)\r\n>     faiss::write_index(faiss::Index const *,faiss::IOWriter *)\r\n\r\nhere is my code\r\n```\r\nindex = faiss.IndexBinaryFlat(d)\r\n    index.add(data)\r\n    faiss.write_index(index, \"./index_BinaryIVF_Hamming.index\")\r\n\r\n```\r\nfaiss-cpu\uff1a1.6.3\r\npython\uff1a7.5\r\n",
    "comments_url": "https://api.github.com/repos/facebookresearch/faiss/issues/1347/comments",
    "author": "0ZhangJc0",
    "comments": [
      {
        "user": "mdouze",
        "created_at": "2020-08-23T05:41:55Z",
        "body": "To save binary indexes, use `faiss.write_index_binary`."
      }
    ]
  }
]