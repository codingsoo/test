[
  {
    "number": 68609,
    "title": "`[MaybeNull]` does not work for parameters",
    "created_at": "2023-06-14T11:59:56Z",
    "closed_at": "2023-06-14T16:33:46Z",
    "labels": [
      "Question",
      "Area-Compilers",
      "Resolution-Answered"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/68609",
    "body": "**Version Used**: 4.6.0-2.23152.6 (1314d090)\r\n\r\n**Steps to Reproduce**:\r\nConsider the following program:\r\n```csharp\r\nusing System.Diagnostics.CodeAnalysis;\r\n\r\n#nullable enable\r\n\r\nvoid Run([MaybeNull] string s)\r\n{\r\n    Console.WriteLine(s.Length);\r\n}\r\n```\r\n\r\n**Diagnostic Id**: CS8321\r\n\r\n**Expected Behavior**: CS8321 gets raised in line 7.\r\n\r\n**Actual Behavior**: No warning is emitted. I also tried using `[param: MaybeNull]`, but that made no difference.\r\n\r\nThe documentation for `MaybeNull` states \"Specifies that an output may be null even if the corresponding type disallows it.\" and I am confused by the \"output\" phrasing, however the `AttributeTargets` also specify parameters, so I would expect it to work like in my example above.\r\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/68609/comments",
    "author": "CollinAlpert",
    "comments": [
      {
        "user": "CyrusNajmabadi",
        "created_at": "2023-06-14T16:33:42Z",
        "body": "`MaybeNull` is a postcondition attribute.  it tells the compiler something about a value *after* something has happened (in this case, after `Run` has been called.  It is the caller that will learn something.\r\n"
      },
      {
        "user": "CyrusNajmabadi",
        "created_at": "2023-06-15T12:26:53Z",
        "body": "It's not exactly clear to me what semantics you want. But I imagine that you could just write `string? s` here too get it. "
      }
    ]
  },
  {
    "number": 4377,
    "title": "Strange compilation error, cannot find attribute reference after applying code fix",
    "created_at": "2015-08-06T15:58:04Z",
    "closed_at": "2015-08-06T17:22:09Z",
    "labels": [
      "Question",
      "Concept-API",
      "Resolution-Answered"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/4377",
    "body": "See the code below. What I'm trying to do is fairly simple. Have a code fix which adds an attribute if it's not there. This works fine when I use the non fully qualified name of the attribute, however if I do use the fully qualified name, I'm getting compilation errors. But strangely enough only a single one even when the fully qualified name is used twice. \n\nFor some reason the new attribute is not equivalent to the existing one even though they are equal as a string.\n\nAm I missing something?\n\nHere's the code, needs Roslyn references as well as to the old Composition dll in the GAC (but I'm getting the same results for Obsolete). I've duplicated some code from the template just to make it self-contained.\n\n``` CSharp\nusing System;\nusing System.Linq;\nusing System.Threading.Tasks;\nusing Microsoft.CodeAnalysis;\nusing Microsoft.CodeAnalysis.CSharp;\nusing Microsoft.CodeAnalysis.CSharp.Syntax;\nusing Microsoft.CodeAnalysis.Text;\nusing Microsoft.VisualStudio.TestTools.UnitTesting;\nusing static Microsoft.CodeAnalysis.CSharp.SyntaxFactory;\n\nnamespace Test.CodeFixes\n{\n    [TestClass]\n    public class UnitTest1\n    {\n        internal static readonly MetadataReference CorlibReference = MetadataReference.CreateFromFile(typeof(object).Assembly.Location);\n        internal static readonly MetadataReference SystemCoreReference = MetadataReference.CreateFromFile(typeof(Enumerable).Assembly.Location);\n        internal static readonly MetadataReference CSharpSymbolsReference = MetadataReference.CreateFromFile(typeof(CSharpCompilation).Assembly.Location);\n        internal static readonly MetadataReference CodeAnalysisReference = MetadataReference.CreateFromFile(typeof(Compilation).Assembly.Location);\n\n        [TestMethod]\n        public void TestCompilationError()\n        {\n            var testCode = @\"\n\nusing System.ComponentModel.Composition;\n\n[System.ComponentModel.Composition.Export(typeof(System.String))]\n[Export(typeof(System.Single))]\npublic class TempClass\n{\n}\";\n\n            var project = CreateProject(testCode);\n\n            var document = project.Documents.Single();\n            CheckForCompilationErrors(project.GetCompilationAsync().Result);\n\n            var newDocument = AddAttributeAsyncFix(document, document.GetSyntaxRootAsync().Result.DescendantNodes().OfType<ClassDeclarationSyntax>().Single()).Result;\n            Console.WriteLine(@\"new code:\n\" + newDocument.GetTextAsync().Result);\n\n            CheckForCompilationErrors(newDocument.Project.GetCompilationAsync().Result);\n        }\n\n        private Project CreateProject(string testCode)\n        {\n            var TestProjectName = \"TestProject\";\n            var projectId = ProjectId.CreateNewId(TestProjectName);\n\n            var solution = new AdhocWorkspace()\n                .CurrentSolution\n                .AddProject(projectId, TestProjectName, TestProjectName, LanguageNames.CSharp)\n                .WithProjectCompilationOptions(projectId, new CSharpCompilationOptions(OutputKind.DynamicallyLinkedLibrary))\n                .AddMetadataReference(projectId, CorlibReference)\n                .AddMetadataReference(projectId, SystemCoreReference)\n                .AddMetadataReference(projectId, CSharpSymbolsReference)\n                .AddMetadataReference(projectId, CodeAnalysisReference)\n                .AddMetadataReferences(projectId, GetAdditionalReferences());\n\n\n            var documentId = DocumentId.CreateNewId(projectId);\n            solution = solution.AddDocument(documentId, \"test.cs\", SourceText.From(testCode));\n\n            var project = solution.GetProject(projectId);\n            return project;\n        }\n\n        private async Task<Document> AddAttributeAsyncFix(\n            Document document,\n            ClassDeclarationSyntax classDeclaration)\n        {\n            //Add [Export(typeof(TypeName))]\n            var root = await document.GetSyntaxRootAsync();\n\n            var typeofArgument = AttributeArgument(TypeOfExpression(ParseTypeName(\"System.Double\")));\n            var attributeSyntax = Attribute(IdentifierName(\"System.ComponentModel.Composition.Export\"), AttributeArgumentList().AddArguments(typeofArgument));\n            var attributeListSyntax = AttributeList(SeparatedList(new[] { attributeSyntax }));\n            var newClass = classDeclaration.AddAttributeLists(attributeListSyntax);\n            root = root.ReplaceNode(classDeclaration, newClass);\n\n            return document.WithSyntaxRoot(root);\n        }\n\n        private static void CheckForCompilationErrors(Compilation compilation)\n        {\n            var compilationDiagnositics = compilation.GetDiagnostics();\n            var errorDiagnostics = compilationDiagnositics.Where(x => x.Severity == DiagnosticSeverity.Error);\n            if (errorDiagnostics.Any())\n            {\n                Assert.Fail($@\"There are errors in the code to be analyzed. See below:\n{string.Join(\"\\r\\n\", errorDiagnostics.Select(x => x.GetMessage()))}\");\n            }\n        }\n\n        protected MetadataReference[] GetAdditionalReferences()\n        {\n            return new MetadataReference[]\n            {\n                MetadataReference.CreateFromFile(typeof(System.ComponentModel.Composition.ExportAttribute).Assembly.Location)\n            };\n        }\n    }\n}\n\n\n```\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/4377/comments",
    "author": "hvanbakel",
    "comments": [
      {
        "user": "Pilchie",
        "created_at": "2015-08-06T17:22:09Z",
        "body": "You can't create an `IdentifierName` for `System.ComponentModel.Composition.Export`.  An identifier name can only represent a single identifier, not a dotted name.\n\nTry using `ParseName` instead of of `IdentifierName`\n"
      }
    ]
  },
  {
    "number": 3213,
    "title": "Remove node fails in Visual Basic.",
    "created_at": "2015-06-01T12:36:24Z",
    "closed_at": "2015-06-02T06:26:25Z",
    "labels": [
      "Question",
      "Area-IDE",
      "Resolution-Answered",
      "Verification Not Required"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/3213",
    "body": "Fails while generating preview. \n\n```\n<ExportCodeRefactoringProvider(LanguageNames.VisualBasic, Name:=NameOf(MoveClassToFileCodeRefactoringProvider)), [Shared]>\nFriend Class MoveClassToFileCodeRefactoringProvider\nInherits CodeRefactoringProvider\n\nPublic NotOverridable Overrides Async Function ComputeRefactoringsAsync(context As CodeRefactoringContext) As Task\n    ' TODO: Replace the following code with your own analysis, generating a CodeAction for each refactoring to offer\n\n    Dim root = Await context.Document.GetSyntaxRootAsync(context.CancellationToken).ConfigureAwait(False)\n\n    ' Find the node at the selection.\n    Dim node = root.FindNode(context.Span)\n\n    ' Only offer a refactoring if the selected node is a type statement node.\n    Dim typeDecl = TryCast(node, ClassStatementSyntax)\n    If typeDecl Is Nothing Then\n        Return\n    End If\n\n\n    Dim a2 = CodeAction.Create(\"Delete class\", Function(c) MoveClassToFile(context.Document, typeDecl, c))\n\n    ' Register this code action.\n    context.RegisterRefactoring(a2)\n\nEnd Function\n\nPrivate Async Function MoveClassToFile(document As Document, typeDecl As ClassStatementSyntax, cancellationToken As CancellationToken) As Task(Of Document)\n\n    Dim currentSyntaxTree = document.GetSyntaxTreeAsync().Result\n    Dim currentRoot = currentSyntaxTree.GetRootAsync().Result\n    Dim replacedRoot = currentRoot.RemoveNode(typeDecl, SyntaxRemoveOptions.KeepNoTrivia)\n\n    Dim ret = document.WithSyntaxRoot(replacedRoot)\n\n    Return ret\nEnd Function\n\n\nEnd Class\n```\n\nTested in c# by altering the Language to CSharp and the ClassStatementSyntax to ClassDeclarationSyntax, it's working fine :(\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/3213/comments",
    "author": "petterek",
    "comments": [
      {
        "user": "mattwar",
        "created_at": "2015-06-02T00:55:18Z",
        "body": "VB is trickier to get right since there are both xxxStatementSyntax nodes and xxxBlockSyntax nodes. You cannot remove a xxxStatementSyntax node if it's part of a xxxBlockSyntax, you have to remove the xxxBlockSyntax node instead.\n"
      },
      {
        "user": "mattwar",
        "created_at": "2015-06-02T01:12:33Z",
        "body": "You will need to remove the ClassBlockSyntax node that is the ClassStatementSyntax's parent.\n"
      }
    ]
  }
]