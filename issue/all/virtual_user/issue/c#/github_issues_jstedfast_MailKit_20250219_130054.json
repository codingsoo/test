[
  {
    "number": 1775,
    "title": "New version scheme",
    "created_at": "2024-07-16T08:19:51Z",
    "closed_at": "2024-07-16T14:58:30Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jstedfast/MailKit/issues/1775",
    "body": "Hi there, I noticed that the version changed from 4.7.1 to 4.7.1.1 - is this intentional? May I ask what's the reason to introduce a new digit?\r\n\r\nBest regards,\r\nGeorg",
    "comments_url": "https://api.github.com/repos/jstedfast/MailKit/issues/1775/comments",
    "author": "cz-dev-ge",
    "comments": [
      {
        "user": "jstedfast",
        "created_at": "2024-07-16T14:58:30Z",
        "body": "It's a nuget package fix for MailKit 4.7.1 and I didn't want to make a new release of MimeKit (e.g. bumping both versions to 4.7.2), so I just released a fixed nuget package of MailKit and added a digit."
      },
      {
        "user": "jstedfast",
        "created_at": "2024-07-18T01:09:50Z",
        "body": "I tend to stick with 3 digits, if/when you see a fourth digit, it's a packaging fix."
      }
    ]
  },
  {
    "number": 1667,
    "title": "Is it supposed to work?",
    "created_at": "2023-11-17T16:19:04Z",
    "closed_at": "2023-11-17T16:41:35Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jstedfast/MailKit/issues/1667",
    "body": "Trying to connect to an imap server and get the list of messages.\r\n\r\n```\r\n        static void Main(string[] args)\r\n        {\r\n            ImapClient client = new ImapClient(new ProtocolLogger(\"imap.log\"));\r\n            client.Connect(\"imap.one.com\", 993, true);\r\n            client.Authenticate(new NetworkCredential(\"...@....me.uk\", \"...\"));\r\n            foreach (FolderNamespace? n in client.PersonalNamespaces)\r\n            {\r\n                Console.WriteLine($\"Namespace {n.Path}\");\r\n            }\r\n            foreach (IMailFolder f in client.GetFolders(client.PersonalNamespaces[0]))\r\n            {\r\n                Console.WriteLine($\"Folder {f.Name}\");\r\n            }\r\n\r\n            IMailFolder ff = client.GetFolder(client.PersonalNamespaces[0]);\r\n            FolderAccess fa = ff.Open(FolderAccess.ReadWrite);\r\n            IFetchRequest rq = new FetchRequest(MessageSummaryItems.All);\r\n            IList<IMessageSummary> msgs = ff.Fetch(0, ff.Count, rq);\r\n            foreach(IMessageSummary m in msgs)\r\n            {\r\n                Console.WriteLine(m.NormalizedSubject);\r\n            }\r\n        }\r\n```\r\n\r\nBut the `.Fetch` fails with\r\n> `MailKit.Net.Imap.ImapCommandException: 'The IMAP server replied to the 'FETCH' command with a 'BAD' response: Error in IMAP command FETCH: Invalid messageset (0.001 + 0.000 secs).'`\r\n\r\nHere is the log file:\r\n```\r\nConnected to imaps://imap.one.com:993/\r\nS: * OK [CAPABILITY IMAP4rev1 SASL-IR LOGIN-REFERRALS ID ENABLE IDLE LITERAL+ AUTH=PLAIN AUTH=LOGIN] Dovecot ready.\r\nC: A00000000 AUTHENTICATE PLAIN ********\r\nS: A00000000 OK [CAPABILITY IMAP4rev1 SASL-IR LOGIN-REFERRALS ID ENABLE IDLE SORT SORT=DISPLAY THREAD=REFERENCES THREAD=REFS THREAD=ORDEREDSUBJECT MULTIAPPEND URL-PARTIAL CATENATE UNSELECT CHILDREN NAMESPACE UIDPLUS LIST-EXTENDED I18NLEVEL=1 CONDSTORE QRESYNC ESEARCH ESORT SEARCHRES WITHIN CONTEXT=SEARCH LIST-STATUS BINARY MOVE SNIPPET=FUZZY PREVIEW=FUZZY STATUS=SIZE SAVEDATE LITERAL+ NOTIFY QUOTA] Logged in\r\nC: A00000001 NAMESPACE\r\nS: * NAMESPACE ((\"INBOX.\" \".\")) NIL NIL\r\nS: A00000001 OK Namespace completed (0.001 + 0.000 secs).\r\nC: A00000002 LIST \"\" \"INBOX\" RETURN (SUBSCRIBED CHILDREN)\r\nS: * LIST (\\HasChildren) \".\" \"INBOX\"\r\nS: A00000002 OK List completed (0.001 + 0.000 secs).\r\nC: A00000003 LIST \"\" \"INBOX.*\" RETURN (SUBSCRIBED CHILDREN)\r\nS: A00000003 OK List completed (0.001 + 0.000 secs).\r\nC: A00000004 SELECT INBOX (CONDSTORE)\r\nS: * FLAGS (\\Answered \\Flagged \\Deleted \\Seen \\Draft)\r\nS: * OK [PERMANENTFLAGS (\\Answered \\Flagged \\Deleted \\Seen \\Draft \\*)] Flags permitted.\r\nS: * 1 EXISTS\r\nS: * 0 RECENT\r\nS: * OK [UIDVALIDITY 1699716082] UIDs valid\r\nS: * OK [UIDNEXT 5] Predicted next UID\r\nS: * OK [HIGHESTMODSEQ 10] Highest\r\nS: A00000004 OK [READ-WRITE] Select completed (0.001 + 0.000 secs).\r\nC: A00000005 FETCH 1:2 ALL\r\nS: A00000005 BAD Error in IMAP command FETCH: Invalid messageset (0.001 + 0.000 secs).\r\n```\r\n\r\nWhat is wrong?",
    "comments_url": "https://api.github.com/repos/jstedfast/MailKit/issues/1667/comments",
    "author": "rwb196884",
    "comments": [
      {
        "user": "jstedfast",
        "created_at": "2023-11-17T16:41:35Z",
        "body": "Does accessing an array using `array[array.Count]` work?\r\n\r\nHere's your problem:\r\n\r\n```csharp\r\nff.Fetch(0, ff.Count, rq);\r\n```\r\n\r\nChange that to:\r\n\r\n```csharp\r\nff.Fetch(0, ff.Count - 1, rq);\r\n```"
      },
      {
        "user": "rwb196884",
        "created_at": "2023-11-18T10:27:12Z",
        "body": "Thank you.\r\nI was working from the example C# code and I thought it was a batch size.\r\n\r\nThis might be useful?\r\n\r\n```\r\n    internal class MailkitLogger : IProtocolLogger\r\n    {\r\n        private ILogger<MailkitLogger> _Logger;\r\n        public MailkitLogger(ILogger<MailkitLogger> logger)\r\n        {\r\n            _Logger = logger;\r\n        }\r\n\r\n        public IAuthenticationSecretDetector AuthenticationSecretDetector { get; set; }\r\n\r\n        public void Dispose() { }\r\n\r\n        public void LogClient(byte[] buffer, int offset, int count)\r\n        {\r\n            using (MemoryStream ms = new MemoryStream())\r\n            {\r\n                using (ProtocolLogger l = new ProtocolLogger(ms, true) { AuthenticationSecretDetector = AuthenticationSecretDetector })\r\n                {\r\n                    l.LogClient(buffer, offset, count);\r\n                }\r\n                ms.Flush();\r\n                ms.Position = 0;\r\n                using (StreamReader r = new StreamReader(ms))\r\n                {\r\n                    string msg = r.ReadToEnd();\r\n                    _Logger.LogInformation(msg);\r\n                }\r\n            }\r\n        }\r\n\r\n        public void LogConnect(Uri uri)\r\n        {\r\n            using (MemoryStream ms = new MemoryStream())\r\n            {\r\n                using (ProtocolLogger l = new ProtocolLogger(ms, true) { AuthenticationSecretDetector = AuthenticationSecretDetector })\r\n                {\r\n                    l.LogConnect(uri);\r\n                }\r\n                ms.Flush();\r\n                ms.Position = 0;\r\n                using (StreamReader r = new StreamReader(ms))\r\n                {\r\n                    string msg = r.ReadToEnd();\r\n                    _Logger.LogInformation(msg);\r\n                }\r\n            }\r\n        }\r\n\r\n        public void LogServer(byte[] buffer, int offset, int count)\r\n        {\r\n            using (MemoryStream ms = new MemoryStream())\r\n            {\r\n                using (ProtocolLogger l = new ProtocolLogger(ms, true) { AuthenticationSecretDetector = AuthenticationSecretDetector })\r\n                {\r\n                    l.LogServer(buffer, offset, count);\r\n                }\r\n                ms.Flush();\r\n                ms.Position = 0;\r\n                using (StreamReader r = new StreamReader(ms))\r\n                {\r\n                    string msg = r.ReadToEnd();\r\n                    _Logger.LogInformation(msg);\r\n                }\r\n            }\r\n        }\r\n    }\r\n```"
      }
    ]
  },
  {
    "number": 1651,
    "title": "How to transfer an \"inline\" image via SmtpClient.Send",
    "created_at": "2023-10-02T11:07:02Z",
    "closed_at": "2023-10-02T14:01:16Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jstedfast/MailKit/issues/1651",
    "body": "I'm trying to send a message with an **inline** image. To do this, I'm using the `BodyBuilder` with the following code:\r\n\r\n    var stream = new FileStream(linkedResource.LocalFilename, FileMode.Open);\r\n    var mimePart = new MimePart()\r\n    {\r\n        Content = new MimeContent(stream),\r\n        ContentId = linkedResource.ContentId,\r\n        ContentTransferEncoding = ContentEncoding.Base64,\r\n        FileName = linkedResource.Filename,\r\n    };\r\n    mimePart.ContentDisposition.IsAttachment = false;\r\n    mimePart.ContentType.MediaType = HtmlParserHelper.GetImageContentTypeByFile(linkedResource.LocalFilename);\r\n    builder.LinkedResources.Add(mimePart;\r\n\r\nUnfortunately, the image will be transffered as an **attachment**. The received mail shows the following headers for this image:\r\n\r\n\tContent-Type: image/png/octet-stream;\r\n\t\tname=449a0b24-fabc-4cab-8c48-a0995b6c5de1.png\r\n\tContent-Id: <d5316e0e5fc04362a7086deae753804f@xyz>\r\n\tContent-Transfer-Encoding: base64\r\n\tContent-Disposition: attachment;\r\n\t\tfilename=449a0b24-fabc-4cab-8c48-a0995b6c5de1.png\r\n\r\nThe `Content-Disposition` is still an attachment, even I set `IsAttachment` to `false`.\r\n\r\nWhat is the correct way to tell the `MimePart` to be sent as `inline`?\r\n\r\nThanks a lot for your answer.",
    "comments_url": "https://api.github.com/repos/jstedfast/MailKit/issues/1651/comments",
    "author": "ghost",
    "comments": [
      {
        "user": "jstedfast",
        "created_at": "2023-10-02T14:01:16Z",
        "body": "If you are going to use a BodyBuilder, just do this:\r\n\r\n```csharp\r\nvar mimePart = builder.LinkedResources.Add(linkedResource.LocalFilename);\r\nmimePart.ContentDisposition.Disposition = ContentDisposition.Inline;\r\n```\r\n\r\nAlso, the following line of code is creating an invalid Content-Type header:\r\n\r\n```csharp\r\nmimePart.ContentType.MediaType = HtmlParserHelper.GetImageContentTypeByFile(linkedResource.LocalFilename);\r\n```\r\n\r\n... so don't do that. Pay special attention to the ContentType class. It has a Media Type and a *MediaSubtype*. The string returned by your HtmlParserHelper contains both values separated by a `/` which means you end up with an invalid mime-type like `image/png/octet-stream`."
      },
      {
        "user": "ghost",
        "created_at": "2023-10-02T16:32:51Z",
        "body": "Ok, your solution is very easy, thanks a lot for it.\r\n\r\nBut I still get these headers:\r\n\r\n\tContent-Type: image/png/octet-stream;\r\n\t\tname=449a0b24-fabc-4cab-8c48-a0995b6c5de1.png\r\n\tContent-Id: <d5316e0e5fc04362a7086deae753804f@xyz>\r\n\tContent-Transfer-Encoding: base64\r\n\tContent-Disposition: attachment;\r\n\t\tfilename=449a0b24-fabc-4cab-8c48-a0995b6c5de1.png\r\n\r\n... so it's still an *attachment* and not *inline*.\r\n"
      },
      {
        "user": "jstedfast",
        "created_at": "2023-10-02T16:34:52Z",
        "body": "Those headers are definitely NOT from the code snippet that I pasted, they are produced by your old code."
      }
    ]
  },
  {
    "number": 1642,
    "title": "Unable to connect to smtp.office365.com",
    "created_at": "2023-09-14T15:43:36Z",
    "closed_at": "2023-09-14T18:14:00Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jstedfast/MailKit/issues/1642",
    "body": "**Describe the bug**\r\nGot SslHandshakeException when attempt to connect to office 365 smpt server at the stagel of \"ConnectAsync()\"\r\n\r\n**Platform (please complete the following information):**\r\n - OS: Windows\r\n - .NET Runtime: .NET Framework\r\n - .NET Framework: .NET Framework 4.6.1\r\n - MailKit Version:  4.2.0\r\n\r\n**Exception**\r\nIf you got an exception, please include the exception Message *and* StackTrace.\r\n\r\nMailKit.Security.SslHandshakeException\r\n  HResult=0x80131500\r\n  Message=An error occurred while attempting to establish an SSL or TLS connection.\r\n\r\nThe server's SSL certificate could not be validated for the following reasons:\r\n\u2022 The server certificate has the following errors:\r\n  \u2022 The revocation function was unable to check revocation for the certificate.\r\n\r\n\r\n  Source=MailKit\r\n  StackTrace:\r\n   at MailKit.Net.Smtp.SmtpClient.<ConnectAsync>d__8.MoveNext()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter.GetResult()\r\n   at ConsoleApp1.Program.<Main>d__23.MoveNext() in D:\\Code\\NoSourceControl\\ConsoleApp1\\ConsoleApp1\\Program.cs:line 454\r\n\r\n  This exception was originally thrown at this call stack:\r\n    System.Net.Security.SslState.InternalEndProcessAuthentication(System.Net.LazyAsyncResult)\r\n    System.Net.Security.SslState.EndProcessAuthentication(System.IAsyncResult)\r\n    System.Net.Security.SslStream.EndAuthenticateAsClient(System.IAsyncResult)\r\n    System.Threading.Tasks.TaskFactory<TResult>.FromAsyncCoreLogic(System.IAsyncResult, System.Func<System.IAsyncResult, TResult>, System.Action<System.IAsyncResult>, System.Threading.Tasks.Task<TResult>, bool)\r\n    System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(System.Threading.Tasks.Task)\r\n    System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(System.Threading.Tasks.Task)\r\n    System.Runtime.CompilerServices.TaskAwaiter.ValidateEnd(System.Threading.Tasks.Task)\r\n    MailKit.Net.Smtp.SmtpClient.ConnectAsync(string, int, MailKit.Security.SecureSocketOptions, System.Threading.CancellationToken)\r\n\r\nInner Exception 1:\r\nAuthenticationException: The remote certificate is invalid according to the validation procedure.\r\n\r\n\r\n**To Reproduce**\r\nSteps to reproduce the behavior:\r\nExecute the code snippets.\r\n\r\n\r\n**Expected behavior**\r\nConnect to the smtp server\r\n\r\n**Code Snippets**\r\n\r\n```csharp\r\n            using (var client = new SmtpClient())\r\n            {\r\n                await client.ConnectAsync(\"smtp.office365.com\", 587, SecureSocketOptions.StartTls);\r\n\r\n                await client.DisconnectAsync(true);\r\n            }\r\n```\r\n\r\n**Protocol Logs**\r\nPlease include a protocol log (scrubbed of any authentication data), especially\r\nif you got an exception such as `Syntax error in XYZ. Unexpected token: ...`.\r\n\r\nTo get a protocol log, follow one of the following code snippets:\r\n\r\n\r\n\r\nConnected to smtp://smtp.office365.com:587/?starttls=always\r\nS: 220 AM8P189CA0004.outlook.office365.com Microsoft ESMTP MAIL Service ready at Thu, 14 Sep 2023 15:42:19 +0000\r\nC: EHLO DESKTOP-LOD3TBH\r\nS: 250-AM8P189CA0004.outlook.office365.com Hello [139.28.110.98]\r\nS: 250-SIZE 157286400\r\nS: 250-PIPELINING\r\nS: 250-DSN\r\nS: 250-ENHANCEDSTATUSCODES\r\nS: 250-STARTTLS\r\nS: 250-8BITMIME\r\nS: 250 SMTPUTF8\r\nC: STARTTLS\r\nS: 220 2.0.0 SMTP server ready\r\n\r\n",
    "comments_url": "https://api.github.com/repos/jstedfast/MailKit/issues/1642/comments",
    "author": "stevenxi",
    "comments": [
      {
        "user": "jstedfast",
        "created_at": "2023-09-14T18:14:00Z",
        "body": "The SslHandshakeException explains that it failed because it was unable to check revocation for the certificate (likely the Certificate Authority server that generated the SSL certificate is down or otherwise unreachable right now).\r\n\r\nThis can happen.\r\n\r\nIf you want to avoid revocation checks, you can do this:\r\n\r\n```csharp\r\nusing (var client = new SmtpClient())\r\n{\r\n    client.CheckCertificateRevocation = false;\r\n    await client.ConnectAsync(\"smtp.office365.com\", 587, SecureSocketOptions.StartTls);\r\n\r\n    await client.DisconnectAsync(true);\r\n}\r\n```"
      }
    ]
  },
  {
    "number": 1604,
    "title": "SMTP Client Send Result",
    "created_at": "2023-07-10T13:45:22Z",
    "closed_at": "2023-07-10T14:26:48Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jstedfast/MailKit/issues/1604",
    "body": "How do you determine if sending the email was successful?\r\n\r\nThe Send/SendAsync methods return a string, which at the moment for me it returns something like:\r\n`XXXXXXXXXX mail accepted for delivery`.\r\n\r\nAnd I'm pretty sure I've had results like `OK` in the past.\r\n\r\nIs there way to simply know if the message was sent (i.e `true`/`false`) rather than trying to see if result contains 'OK', 'Accepted' etc..\r\n",
    "comments_url": "https://api.github.com/repos/jstedfast/MailKit/issues/1604/comments",
    "author": "r-work",
    "comments": [
      {
        "user": "jstedfast",
        "created_at": "2023-07-10T14:26:48Z",
        "body": "If the method throws an exception, then it failed. If it doesn't throw an exception, then it succeeded."
      }
    ]
  },
  {
    "number": 1547,
    "title": "Message index #question",
    "created_at": "2023-04-12T16:28:38Z",
    "closed_at": "2023-04-12T17:00:59Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jstedfast/MailKit/issues/1547",
    "body": "Hi,\r\n\r\nI apologize if this is a stupid question but I can not find the information I need from the official documentation. I know that if I delete a message it is actually deleted when the client disconnects. I need to know if calling the delete method on a message , this action change the other messages indexes, so incrementing the index and calling get message will return the next message from the box?\r\n\r\nRegards",
    "comments_url": "https://api.github.com/repos/jstedfast/MailKit/issues/1547/comments",
    "author": "HostVanyaD",
    "comments": [
      {
        "user": "jstedfast",
        "created_at": "2023-04-12T17:00:59Z",
        "body": "Yes, for POP3, calling the Delete method on index 1, 2, then 3 will result in indexes 1, 2, and 3 to be deleted and not 1, 3, and 5.\r\n"
      },
      {
        "user": "HostVanyaD",
        "created_at": "2023-04-13T05:50:25Z",
        "body": "Thanks, for the quick answer!\r\nSo I open the pop3Client start reading messages by index, I delete index 1 message for example, and right after if I want to get the next message I need to call getMessage with index 2, right? I just want to be sure that I will not loose any data or skip an important message."
      }
    ]
  },
  {
    "number": 1537,
    "title": "Cannot use AddFlags on ImapClient.Inbox to delete message",
    "created_at": "2023-03-28T16:39:03Z",
    "closed_at": "2023-03-28T18:20:57Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jstedfast/MailKit/issues/1537",
    "body": "Hi.\r\n\r\ni just want do read an delete messages with an ImapClient so\r\n\r\nMailKit.Net.Imap.ImapClient clientIMAP = new MailKit.Net.Imap.ImapClient();\r\nAuthenticateAsync(clientIMAP).GetAwaiter().GetResult();  //OAT2 on office\r\nclientIMAP.Inbox.Open(MailKit.FolderAccess.ReadWrite);\r\nvar uids = clientIMAP.Inbox.Search(SearchQuery.All);  // ok access message no pb\r\n...\r\n...\r\n...\r\n\r\n//want to delete\r\nclientIMAP .Inbox.AddFlags   // but AddFlags   not exist on Inbox\r\n\r\nwhat i miss ?\r\n\r\nThanks a lot\r\n",
    "comments_url": "https://api.github.com/repos/jstedfast/MailKit/issues/1537/comments",
    "author": "glebourg76",
    "comments": [
      {
        "user": "jstedfast",
        "created_at": "2023-03-28T18:19:41Z",
        "body": "AddFlags is an extension method in 3.x for compatibility and for simpler use."
      },
      {
        "user": "jstedfast",
        "created_at": "2023-03-28T18:20:27Z",
        "body": "Add a using MailKit; statement at the top of your source code"
      }
    ]
  },
  {
    "number": 1516,
    "title": "Move and set flag Add Flags",
    "created_at": "2023-02-17T10:45:13Z",
    "closed_at": "2023-02-17T13:58:13Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jstedfast/MailKit/issues/1516",
    "body": "Is there any way to download message attachments and set Seen flag in one loop ? My current code looks like this :\r\n```\r\nfor (int i = 0; inbox.Count > i; i++)\r\n{\r\nvar message = inbox.GetMessage(0);\r\nforeach (var attachment in message.Attachments)\r\n                            {\r\n                                if (!(attachment is MessagePart))\r\n                                {\r\n                                    var part = (MimePart)attachment;\r\n                                    var fileName = part.FileName;\r\n/*\r\n.\r\n.\r\n.\r\nrest of my code to download attachments \r\n*/\r\n}\r\n```\r\nAfter that second loop :\r\n```\r\nforeach (var message in FMiesiac.Fetch(0, -1, MessageSummaryItems.UniqueId))\r\n{\r\n       FMiesiac.AddFlags(message.UniqueId, MessageFlags.Seen, true);\r\n}\r\n```\r\nThis code process 800 - 1200 e-mails so this second loop takes some additional time. Is there any way to download and set this flag in single loop ? \r\n\r\n\r\n",
    "comments_url": "https://api.github.com/repos/jstedfast/MailKit/issues/1516/comments",
    "author": "pzelektron",
    "comments": [
      {
        "user": "jstedfast",
        "created_at": "2023-02-17T13:58:13Z",
        "body": "Yea, just call AddFlags() in the same loop as GetMessage()."
      },
      {
        "user": "pzelektron",
        "created_at": "2023-02-17T14:34:31Z",
        "body": "Looks simple but in this first loop message doesn't have property UniqueId required by AddFlags()"
      },
      {
        "user": "jstedfast",
        "created_at": "2023-02-17T14:48:06Z",
        "body": "You can AddFlags() to a message index as well, you don't necessarily need a UniqueId."
      },
      {
        "user": "pzelektron",
        "created_at": "2023-02-17T15:01:40Z",
        "body": "Thanks for helping now its working. For anyone interested in the topic this is the solution :\r\n```\r\nvar message = inbox.GetMessage(0);\r\ninbox.AddFlags(0, MessageFlags.Seen, true);\r\n```\r\n\r\n"
      }
    ]
  },
  {
    "number": 1511,
    "title": "Question: Is it possible to search for folders that have at least one e-mail in it?",
    "created_at": "2023-02-08T11:22:05Z",
    "closed_at": "2023-02-08T17:13:05Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jstedfast/MailKit/issues/1511",
    "body": "Hi,\r\n\r\nI now do this to get all the folders that I need to process.... is it also possible to do some kind of search that only gives me the folders that have at least one e-mail in it so that I don't have to itterate through the folder structure every time?\r\n\r\n```c#\r\n                case MailBoxType.Imap:\r\n                {\r\n                    using var memoryStream = StreamHelpers.Manager.GetStream(\"MailBoxes.GetFolders\");\r\n                    using var protocolLogger = new ProtocolLogger(memoryStream);\r\n                    using var client = new ImapClient(protocolLogger);\r\n\r\n                    try\r\n                    {\r\n                        ConnectAndAuthenticate(client);\r\n                        client.GetFolders(client.PersonalNamespaces[0]);\r\n                        var subFolders = client.GetFolders(client.PersonalNamespaces[0]);\r\n\r\n\r\n                        var rootMailBoxFolder = new MailBoxFolder { Name = \"Root\" };\r\n                        var count = 0;\r\n\r\n                        foreach (var subFolder in subFolders)\r\n                        {\r\n                            count += 1;\r\n\r\n                            var subMailBoxFolder = new MailBoxFolder\r\n                            {\r\n                                Id = subFolder.Id,\r\n                                Name = subFolder.Name,\r\n                                TotalCount = subFolder.Count\r\n                            };\r\n\r\n                            rootMailBoxFolder.AddFolder(subFolder.ParentFolder.Id, subMailBoxFolder);\r\n                        }\r\n\r\n                        return rootMailBoxFolder;\r\n                    }\r\n\r\n                    return result;\r\n                }\r\n```",
    "comments_url": "https://api.github.com/repos/jstedfast/MailKit/issues/1511/comments",
    "author": "Sicos1977",
    "comments": [
      {
        "user": "jstedfast",
        "created_at": "2023-02-08T17:13:05Z",
        "body": "Unfortunately, the best way to do it is to traverse the subfolders using the GetSubfolders() method that takes a StatusItems argument:\r\n\r\n```csharp\r\nvar subfolders = folder.GetSubfolders(StatusItems.Count);\r\n```\r\n\r\nIf the IMAP server doesn't support the LIST-STATUS extension, MailKit will emulate it by calling the `Status(StatusItems.Count)` method on each folder."
      }
    ]
  },
  {
    "number": 1449,
    "title": "Message flag 'seen' does not persist on Exchange server",
    "created_at": "2022-10-17T21:03:45Z",
    "closed_at": "2022-10-17T21:29:11Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jstedfast/MailKit/issues/1449",
    "body": "Hi, I was tasked with downloading messages from an old Exchange server 2010 (yes you read correctly).\r\nI am able to set the flag to seen and the server seems to acknowledge the request. However next time around this same message (based on uid) has no flags set.\r\n\r\nCode which opens the folder in question and sets the flag:\r\n```\r\nvar folder = await Client.GetFolderAsync(folderPath, CancellationToken);\r\nawait folder.OpenAsync(FolderAccess.ReadWrite, CancellationToken);\r\ntry\r\n{\r\n\tawait folder.RemoveFlagsAsync(uniqueId, MessageFlags.Seen, true);\r\n}\r\nfinally\r\n{\r\n\tawait folder.CloseAsync();\r\n}\r\n```\r\n\r\nProtocol log acknowledging the update:\r\n```\r\nC: A00000009 SELECT INBOX\r\nS: * 4 EXISTS\r\nS: * 0 RECENT\r\nS: * FLAGS (\\Seen \\Answered \\Flagged \\Deleted \\Draft $MDNSent)\r\nS: * OK [PERMANENTFLAGS (\\Seen \\Answered \\Flagged \\Deleted \\Draft $MDNSent)] Permanent flags\r\nS: * OK [UNSEEN 1] Is the first unseen message\r\nS: * OK [UIDVALIDITY 7937] UIDVALIDITY value\r\nS: * OK [UIDNEXT 67167] The next unique identifier value\r\nS: A00000009 OK [READ-WRITE] SELECT completed.\r\nC: A00000010 UID STORE 67162 -FLAGS.SILENT (\\Seen)\r\nS: A00000010 OK STORE completed.\r\nC: A00000011 LOGOUT\r\nS: * BYE Microsoft Exchange Server 2010 IMAP4 server signing off.\r\nS: A00000011 OK LOGOUT completed.\r\n```\r\n\r\nIs there something I am doing wrong?\r\n\r\nThank you.",
    "comments_url": "https://api.github.com/repos/jstedfast/MailKit/issues/1449/comments",
    "author": "Olby2000",
    "comments": [
      {
        "user": "jstedfast",
        "created_at": "2022-10-17T21:14:36Z",
        "body": "You're removing the Seen flag, but it sounds like you want to *add* it.\r\n\r\nIf you remove the \\Seen flag, there won't be any flags set on it in the next session (which is what you are seeing, right?)"
      }
    ]
  },
  {
    "number": 1447,
    "title": "How to encode mail subject and body using UTF-8 encoding in Mailkit?",
    "created_at": "2022-10-13T09:18:30Z",
    "closed_at": "2022-10-13T14:20:43Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jstedfast/MailKit/issues/1447",
    "body": "In System.Net.Mail.MailMessage library, SubjectEncoding and BodyEncoding options can be used to set encoding for subject and body of the mail.\r\n_System.Net.Mail.MailMessage psuedo code:_\r\n```\r\nvar mailMessage = new MailMessage(new MailAddress(From), recipient)\r\n{\r\n    SubjectEncoding = Encoding.UTF8,\r\n    BodyEncoding = Encoding.UTF8\r\n};\r\n```\r\nAre there similar options to SubjectEncoding and BodyEncoding available in MimeKit.MimeMessage library to encode subject and body?\r\n_Mimekit psuedo code:_\r\n```\r\nvar message = new MimeMessage();\r\nmessage.Subject = \"Howdie\";\r\nmessage.Body = \"Test\";\r\n```\r\n",
    "comments_url": "https://api.github.com/repos/jstedfast/MailKit/issues/1447/comments",
    "author": "web-mm",
    "comments": [
      {
        "user": "jstedfast",
        "created_at": "2022-10-13T14:20:43Z",
        "body": "Yes\r\n\r\nTo set the \"body encoding\", you would construct the message body like this:\r\n\r\n```csharp\r\nvar body = new TextPart (\"plain\");\r\nbody.SetText (Encoding.UTF8, \"This is the message body.\");\r\n\r\nmessage.Body = body;\r\n```\r\n\r\nNote that by default, for message bodies, UTF-8 is used. So if you want UTF-8, then you can even do this:\r\n\r\n```csharp\r\nmessage.Body = new TextPart (\"plain\") {\r\n    Text = \"This is the message body.\"\r\n};\r\n```\r\n\r\nFor headers, you'll need to bypass MimeMessage.Subject:\r\n\r\n```csharp\r\nmessage.Headers.Replace (\"Subject\", Encoding.UTF8, \"This is my subject.\");\r\n```\r\n\r\nYou can also specify an encoding to use for each MailboxAddress:\r\n\r\n```csharp\r\nmessage.To.Add (new MailboxAddress (Encoding.UTF8, \"Name\", \"recipient@example.com\"));\r\n```"
      }
    ]
  },
  {
    "number": 1441,
    "title": "Mailkit cannot read autogenerated mails from mailbox",
    "created_at": "2022-09-27T14:05:15Z",
    "closed_at": "2022-09-28T13:00:22Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jstedfast/MailKit/issues/1441",
    "body": "**Describe the bug**\r\nHi, \r\nI hope I'm not bothering you with my question. I ran into a weird bug. I develop an application that extracts information from the client's mailbox. My problem is that once an autogenerated mail arrives in the mailbox, if the Server crashes, Mailkit will not read the mail, it is empty. But if the email comes from a different email address (I tried from my personal and school email address), it reads the email fine.  \r\n\r\n**Platform (please complete the following information):**\r\n - OS: Windows\r\n - .NET Framework: [.NET 4.0, WPF]\r\n - MailKit Version: 3.3.0\r\n\r\n\r\n\r\n```csharp\r\n using (var client = new ImapClient())\r\n                {\r\n                    using (var cancel = new System.Threading.CancellationTokenSource())\r\n                    {\r\n\r\n                        client.Connect(emailParser.ServerName, emailParser.Port, emailParser.IsSSLuse,\r\n                            cancel.Token);\r\n\r\n                        client.Authenticate(emailParser.Username, emailParser.Password, cancel.Token);\r\n\r\n                        var inbox = client.Inbox;\r\n                        inbox.Open(FolderAccess.ReadOnly, cancel.Token);\r\n\r\n                        for (int i = 0; i < inbox.Count; i++)\r\n                        {\r\n                            var message = inbox.GetMessage(i, cancel.Token); \r\n                            MessageBox.Show(message.TextBody);                                                                                \r\n                            \r\n                                }\r\n\r\n                            }\r\n\r\n                        }\r\n\r\n                        client.Disconnect(true, cancel.Token);\r\n```\r\n",
    "comments_url": "https://api.github.com/repos/jstedfast/MailKit/issues/1441/comments",
    "author": "DomV-cloud",
    "comments": [
      {
        "user": "jstedfast",
        "created_at": "2022-09-27T14:11:27Z",
        "body": "I'll need more information:\r\n\r\n* What is the exception you get?\r\n* Change your code to use `using (var client = new ImapClient (new ProtocolLogger (\"imap.log\")))` and then share the log (feel free to anonymize the data)"
      },
      {
        "user": "DomV-cloud",
        "created_at": "2022-09-28T07:15:21Z",
        "body": "Hi,\r\n\r\nException:NullPointerException\r\n\r\nProtocolLogger:\r\n```\r\nConnected to imaps://imap.seznam.cz:993/\r\nS: * OK Seznam IMAP server ready\r\nC: A00000000 CAPABILITY\r\nS: * CAPABILITY XLIST IMAP4rev1 STARTTLS CHILDREN SORT I18NLEVEL=1 UIDPLUS ID\r\nS: A00000000 OK CAPABILITY completed\r\nC: A00000001 LOGIN ******** ********\r\nS: A00000001 OK LOGIN Authentication succeeded\r\nC: A00000002 CAPABILITY\r\nS: * CAPABILITY XLIST IMAP4rev1 STARTTLS CHILDREN SORT I18NLEVEL=1 UIDPLUS ID\r\nS: A00000002 OK CAPABILITY completed\r\nC: A00000003 LIST \"\" \"\"\r\nS: * LIST (\\Noselect) NIL \"\"\r\nS: A00000003 OK LIST complete\r\nC: A00000004 LIST \"\" \"INBOX\"\r\nS: * LIST (\\HasNoChildren) NIL \"INBOX\"\r\nS: A00000004 OK LIST complete\r\nC: A00000005 XLIST \"\" \"*\"\r\nS: * XLIST (\\HasNoChildren) NIL \"INBOX\"\r\nS: * XLIST (\\HasNoChildren \\Sent) NIL \"sent\"\r\nS: * XLIST (\\HasNoChildren \\Drafts) NIL \"drafts\"\r\nS: * XLIST (\\HasNoChildren) NIL \"newsletters\"\r\nS: * XLIST (\\HasNoChildren \\Archive) NIL \"archive\"\r\nS: * XLIST (\\HasNoChildren \\Spam) NIL \"spam\"\r\nS: * XLIST (\\HasNoChildren \\Trash) NIL \"trash\"\r\nS: A00000005 OK XLIST complete\r\nC: A00000006 EXAMINE INBOX\r\nS: * 1 EXISTS\r\nS: * 0 RECENT\r\nS: * FLAGS (\\Seen \\Answered \\Flagged \\Deleted \\Draft \\Recent)\r\nS: * OK [PERMANENTFLAGS (\\Seen \\Answered \\Flagged \\Deleted \\Draft)] Can bee changed permanently\r\nS: * OK [UIDVALIDITY 1] UIDs validity number\r\nS: * OK [UIDNEXT 1174] Predicted next UID\r\nS: * OK [UNSEEN 1] The first unseen message MSN.\r\nS: A00000006 OK [READ-ONLY] EXAMINE completed\r\nTotal messages: 1\r\nRecent messages: 0\r\nC: A00000007 FETCH 1 (BODY.PEEK[])\r\nS: * 1 FETCH (BODY[] {1515}\r\nS: Received: from a43-89.smtp-out.amazonses.com (a43-89.smtp-out.amazonses.com [54.240.43.89])\r\nS:      by email-smtpd9.ko.seznam.cz (Seznam SMTPD 1.3.137) with ESMTP;\r\nS:      Wed, 28 Sep 2022 07:13:26 +0200 (CEST)\r\nS: DKIM-Signature: v=1; a=rsa-sha256; q=dns/txt; c=relaxed/simple;\r\nS:      s=6gbrjpgwjskckoa6a5zn6fwqkn67xbtw; d=amazonses.com; t=1664342004;\r\nS:      h=MIME-Version:From:To:Date:Subject:Content-Type:Content-Transfer-Encoding:Message-ID:Feedback-ID;\r\nS:      bh=Tf3522dYaPsTT9jF2cD86TCuEtQz5qF452+xNRMN+NQ=;\r\nS:      b=I5Ct+FxJVSh8Ycnnc1iZoMjyRRmvD2v/qPcazMWhdixHlZX+fF/mboARjx3fS0SU\r\nS:      2j2N20NQOYC5FRjV5mbRXgHZiKCU78szIcmkL7LBVNM0Zpj0OwK3+JCTBWn46oynDMZ\r\nS:      RO7cDdJWOrdjBWxjC47y7V6orSaH8X5DpbrHJccM=\r\nS: MIME-Version: 1.0\r\nS: From: \"Smart One s.r.o. Monitoring\" <support@smart1.hostedrmm.com>\r\nS: To: reportssmo@seznam.cz\r\nS: X-Priority: 1\r\nS: Priority: urgent\r\nS: Importance: high\r\nS: Date: Wed, 28 Sep 2022 05:13:24 +0000\r\nS: Subject: Dostupnost serveru!\r\nS: Content-Type: text/html; charset=utf-8\r\nS: Content-Transfer-Encoding: base64\r\nS: Message-ID: <0100018382839396-333e4874-3fe3-4ef8-a494-3337fc7cd7ed-000000@email.amazonses.com>\r\nS: Feedback-ID: 1.us-east-1.ryKZb8SVjogJP0qpNnSWHxlkLJ4dmTjOGGDhWsI1zhM=:AmazonSES\r\nS: X-SES-Outgoing: 2022.09.28-54.240.43.89\r\nS:\r\nS: U1JWLVRFU1QtU21hcnQgT25lIFNVQ0NFU1Mgb24gU21hcnQgT25lIHMuci5vLlxTUlYt\r\nS: VEVTVCBhdCBNYWluIGZvciAgcmVzdWx0IFBJTkcgT0sgMTkyLjE2OC4xLjggLSBQYWNr\r\nS: ZXQgbG9zcyA9IDAlLCBSVEEgPSAwbXMgLi4gU2VydmVyIGplIE9ubGluZTxCUj48QlI+\r\nS: UmVwbHkgdG8gdGhpcyBlbWFpbCB0byBjcmVhdGUgYSBuZXcgdGlja2V0LjxCUj4gQ2xp\r\nS: ZW50SUQ6MSBDb21wdXRlcklEOjg5MQ==\r\nS:\r\nS: )\r\nS: A00000007 OK FETCH completed\r\n\r\nC: A00000008 LOGOUT\r\nS: * BYE Thanks for your visit, have a nice day.\r\nS: A00000008 OK LOGOUT Completed.\r\n```"
      },
      {
        "user": "jstedfast",
        "created_at": "2022-09-28T13:00:22Z",
        "body": "Oh, the problem is that the message doesn't have a `TextBody`, it only has an `HtmlBody`.\r\n\r\nThis line is the problem:\r\n```csharp\r\nMessageBox.Show(message.TextBody);\r\n```\r\n\r\nYou should change that to:\r\n\r\n```csharp\r\nMessageBox.Show(message.TextBody ?? message.HtmlBody ?? string.Empty);\r\n```"
      }
    ]
  },
  {
    "number": 1433,
    "title": "How long is an Index valid in a ImapClient connection?",
    "created_at": "2022-09-14T19:54:40Z",
    "closed_at": "2022-09-14T21:16:09Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jstedfast/MailKit/issues/1433",
    "body": "I'm trying to use IDLE notifications with the following code:\r\n\r\n```\r\nimapClient.Idle(new CancellationTokenSource(new TimeSpan(0, 29, 0)).Token, _idleCancelSource.Token);\r\n\r\nmailFolder.MessageFlagsChanged -= FolderMessageFlags_ChangedEvent;\r\n\r\n```\r\n\r\nI receive notifications, if the \"seen\" (\"read\") flag has been changed. But I get only the `Index`, but not the `UniqueId`.\r\n\r\nIs this a further bug of my mail server?\r\n\r\nHow long can I use the `Index`, until it's invalid? I ask, since I'm developing an app with multiple simultaneous `ImapClient` connections. So is `Index` valid between the different connection?",
    "comments_url": "https://api.github.com/repos/jstedfast/MailKit/issues/1433/comments",
    "author": "ghost",
    "comments": [
      {
        "user": "jstedfast",
        "created_at": "2022-09-14T21:16:09Z",
        "body": "> I receive notifications, if the \"seen\" (\"read\") flag has been changed. But I get only the Index, but not the UniqueId.\r\n> Is this a further bug of my mail server?\r\n\r\nThat's expected, so not a bug in your IMAP server.\r\n\r\nThe index is valid until any client connects to the IMAP server and deletes a message with an index lower than (or equal to) the index you have.\r\n\r\nIn other words, if you are notified that message 100's flags just changed, then that index will point to the correct message until your client or any other client deletes/expunges a message with an index <= 100.\r\n\r\n> So is Index valid between the different connection?\r\n\r\nDepends on what happens between sessions. The messages in an IMAP folder will never be re-ordered by the server, so if your client is the *only* client that ever connects to that server/account, then yes, the index will be the same between sessions. But if there are any other clients, especially ones that you do not control, you best not assume you can rely on that index for very long. The very next IMAP command sent to the server by any client that is connected could cause that index to point to a different message.\r\n\r\nThe way you are expected to deal with this situation is to have a locally cached mapping of indexes to messages and just update the flags in your local cache based on the index at that exact moment in time. It sucks, but it is what it is.\r\n\r\nMy recommendation is that when you receive a MessageFlagsChanged event, your event handler should immediately update your local cache with those flag changes.\r\n\r\nWhen you get a MessageFlagsChanged event, the event args will always contain the `Index` and the new `Flags` & `Keywords`. Those are the only properties that you can depend on being set but they are also all you need (technically).\r\n\r\nI should note that if you subscribe to the MessageExpunged event, you'll get notified when a message is removed from the folder (as long as you remain connected to the IMAP server and that folder is the one selected) which will tell you the index of any message that gets removed.\r\n\r\nSo for example, if we go back to that message index 100 example, if you next get a MessageExpunged event with an index of 50, then it means you'll need to use index 99 instead of index 100 to refer to the message that received the MessageFlagsChanged event.\r\n\r\nHope that helps clarify things."
      },
      {
        "user": "ghost",
        "created_at": "2022-09-15T09:35:47Z",
        "body": "So, if I receive a `MailFolder.MessageFlagsChanged` event without a `UniueId`, I have to stop the `ImapClient.Idle` to use that client to use `uniqueIds = MailFolder.Search(SearchQuery.All)` and  `MailFolder.Fetch(uniqueIds, MessageSummaryItems.Headers | MessageSummaryItems.Flags)` to identify the correct message with the `UniqueId`.\r\n\r\nAfter this, I have to restart the `ImapClient.Idle`.\r\n\r\nAnd if in the meantime a flag will be changed, I don't have a chance to get that information.\r\n\r\nRight?\r\n\r\nThe live is not easy\u2026"
      },
      {
        "user": "jstedfast",
        "created_at": "2022-09-15T11:18:17Z",
        "body": "Why would you need to do all of that?\r\n\r\nYou should already have a list of messages and the message who's should already be in that list. There should be no reason to have to go out and query for the message and its headers/flags/etc.\r\n\r\nConsider this:\r\n\r\n* var messages = folder.Fetch (0, -1, MessageSummaryItems.UniqueId | MessageSummaryItems.Envelope | MessageSummaryItems.Flags)\r\n* client.Idle()\r\n* MessageFlagsChanged event fires\r\n* messages[index].Flags = args.Flags; messages[index].Keywords = args.Keywords\r\n\r\nI think that Fetch() actually returns `IList<IMessageSummary>` and IMessageSummary I think only has getters for all of the fields, but you can either cast to MessageSummary to allow you to set fields or you can copy the data into your own data structure to keep in your cache (e.g. a sqlite database), but the idea is the same.\r\n\r\nAlso FWIW, I would not recommend using MessageSummaryItems.Headers as that is a lot more expensive than MessageSummaryItems.Envelope and Envelope usually contains all of the (pre-parsed!) info that you care about. The only header that I feel it is missing is the `References` header (hence why I have a `MessageSummaryItems.References` enum)."
      },
      {
        "user": "ghost",
        "created_at": "2022-09-15T12:20:10Z",
        "body": "Indeed, I have a list of the messages. But the `Index` inside `MessageFlagsChanged event` maybe is different from the index of my list, since the list was fetched by a different `ImapClient` connection.\r\n\r\nSo I need a `UniqueId` (or maybe a `MessageId`), to identify the correct message inside my list.\r\n\r\nThank you for your hint about `Envelope`!"
      },
      {
        "user": "ghost",
        "created_at": "2022-09-15T12:47:42Z",
        "body": "> The only header that I feel it is missing is the References header\r\n\r\nWhat about `Priority`?"
      },
      {
        "user": "ghost",
        "created_at": "2022-09-15T12:52:48Z",
        "body": "`IMessageSummary.Envelope` is `null` on my end.\r\n\r\nI have the following code:\r\n\r\n```\r\nIList<UniqueId> uniqueIds = mailFolder.Search(SearchQuery.All);\r\nIList<IMessageSummary> messageSummaries = mailFolder.Fetch(uniqueIds, MessageSummaryItems.Headers | MessageSummaryItems.Flags);\r\nforeach (MessageSummary messageSummary in messageSummaries)\r\n    messageSummary.Envelope....\r\n```\r\n\r\n`messageSummary.Headers[HeaderId.From]` shows me the the correct value."
      },
      {
        "user": "jstedfast",
        "created_at": "2022-09-15T13:09:58Z",
        "body": "The MessageSummary.Envelope property only gets populated if you specify MessageSummaryItems.Envelope.\r\n\r\n> What about Priority?\r\n\r\nYea, I guess I can see that as being a valuable header to have. When I originally added the `MessageSummaryItems.References` enum, I did not have an `IFetchRequest` and so there was no way to specify what headers you wanted (hence also why there is a `MessageSummaryItems.Headers`).\r\n\r\nA better way to specify which headers you want would be to do something like this:\r\n\r\n```csharp\r\n// Fetch *ALL* headers (instead of Envelope, maybe because we don't trust the IMAP server's parsing and we want to do our own):\r\nvar fetchRequest = new FetchRequest (MessageSummaryItems.UniqueId | MessageSummaryItems.Flags) {\r\n    Headers = HeaderSet.All\r\n};\r\n```\r\n\r\n```csharp\r\n// Fetch Envelope and References:\r\nvar fetchRequest = new FetchRequest (MessageSummaryItems.UniqueId | MessageSummaryItems.Envelope | MessageSummaryItems.Flags) {\r\n    Headers = HeaderSet.References\r\n};\r\n```\r\n\r\n```csharp\r\n// Fetch Envelope, References, Importance, and *Priority:\r\nvar fetchRequest = new FetchRequest (MessageSummaryItems.UniqueId | MessageSummaryItems.Envelope | MessageSummaryItems.Flags) {\r\n    Headers = new HeaderSet (new HeaderId[] {\r\n        HeaderId.References,\r\n        HeaderId.Importance,\r\n        HeaderId.Priority,\r\n        HeaderId.XPriority,\r\n        HeaderId.XMSMailPriority\r\n    })\r\n};\r\n```\r\n\r\nThe added bonus of the IFetchRequest is that you can also fetch the inverse of the headers you specify (e.g. `FETCH BODY[HEADERS.NOT (<list>)]`):\r\n\r\n```csharp\r\n// Fetch all of the headers except the Received headers\r\nvar fetchRequest = new FetchRequest (MessageSummaryItems.UniqueId | MessageSummaryItems.Envelope | MessageSummaryItems.Flags) {\r\n    Headers = new HeaderSet (new HeaderId[] {\r\n        HeaderId.Received\r\n    }) {\r\n        Exclude = true\r\n    }\r\n};\r\n```"
      },
      {
        "user": "ghost",
        "created_at": "2022-09-15T13:41:36Z",
        "body": "Now, I can terminate the `ImapClient.Idle`.\r\n\r\nBut after this, it's disconnected. Why?"
      },
      {
        "user": "ghost",
        "created_at": "2022-09-15T13:50:01Z",
        "body": "Since you close the connection, there is no save way to get the `UniqueId` from the `MailFolder.MessageFlagsChanged` event.\r\n\r\n> A better way to specify which headers you want would be to do something like this:\r\n\r\nOk, with this, I can reduce the network traffic."
      },
      {
        "user": "ghost",
        "created_at": "2022-09-15T13:52:17Z",
        "body": "Back to the `Index`: If I use multiple `MailFolders`, is the `Index` only valid for one folder, or is it valid over all folders?"
      },
      {
        "user": "jstedfast",
        "created_at": "2022-09-15T14:04:14Z",
        "body": "The index is only valid for the folder it came from (same with UID).\r\n\r\n> Now, I can terminate the ImapClient.Idle.\r\n> But after this, it's disconnected. Why?\r\n\r\nThat's the only way to cancel a request :-("
      },
      {
        "user": "ghost",
        "created_at": "2022-09-15T14:09:17Z",
        "body": "So, to be sure of having the correct `Index`, I have to stop the `ImapClient.Idle` after receiving a `MailFolder.CountChanged` and get the updated List of `Index` <-> `UniqueId`. After that, I can restart the `ImapClient.Idle`."
      },
      {
        "user": "jstedfast",
        "created_at": "2022-09-15T14:13:06Z",
        "body": "That sounds correct, yes."
      },
      {
        "user": "ghost",
        "created_at": "2022-09-15T14:26:32Z",
        "body": "But it's easier, to update all messages, by using only `MessageSummaryItems.UniqueId | MessageSummaryItems.Flags` for the folder of the `MailFolder.MessageFlagsChanged` event.\r\n\r\nWith this, I don't need to get the `UniqueId` from the `Index`.\r\n\r\nBut sometimes, the `MailFolder.MessageFlagsChanged` event reports the `UniqueId` too. Right?"
      },
      {
        "user": "jstedfast",
        "created_at": "2022-09-15T14:29:40Z",
        "body": "Rarely (as in 99% of servers won't), but it's possible."
      }
    ]
  },
  {
    "number": 1432,
    "title": "Does mark MailKit mark received messages automatically as \"seen\" (read)?",
    "created_at": "2022-09-14T13:07:42Z",
    "closed_at": "2022-09-14T14:05:09Z",
    "labels": [
      "question",
      "server-bug"
    ],
    "url": "https://github.com/jstedfast/MailKit/issues/1432",
    "body": "I'm receiving messages with Imap and this works so far. But after I'm receiving it with `ImapClient.Inbox.Fetch(uniqueIds, MessageSummaryItems.Headers | MessageSummaryItems.Size | MessageSummaryItems.Flags | MessageSummaryItems.BodyStructure);`, they are marked as \"seen\" / \"read\" on the server.\r\n\r\nDoes MailKit sends this flag?\r\n\r\nIs there a way for me, not to send this flag?",
    "comments_url": "https://api.github.com/repos/jstedfast/MailKit/issues/1432/comments",
    "author": "ghost",
    "comments": [
      {
        "user": "jstedfast",
        "created_at": "2022-09-14T14:04:59Z",
        "body": "MailKit does not automatically mark any messages as read/seen on the server. If the server is doing that, then the server is buggy.\r\n\r\nThe IMAP protocol *does* automatically mark the message as `\\\\Seen` if-and-only-if the client sends a `FETCH BODY[]` request and the way around that is to send `FETCH BODY.PEEK[]` (which is what MailKit does).\r\n\r\nThat said, MailKit's ImapFolder.Fetch() methods never send `FETCH BODY[]` -or- `FETCH BODY.PEEK[]`. Only the `GetMessage(int index)` and `GetMessage(UniqueId uid)` methods send that request (and they only ever send the `BODY.PEEK[]` variant)."
      },
      {
        "user": "ghost",
        "created_at": "2022-09-14T15:32:17Z",
        "body": "Yes, I'm using `ImapFolder.Fetch(uniqueIds, messageSummaryItem)` to receive message.\r\n\r\nInside the protocol, I found this lines:\r\n\r\n```\r\nC: A00000010 UID FETCH 17 (BODY.PEEK[HEADER] BODY.PEEK[TEXT])\r\nS: * 1 FETCH (UID 17 BODY[HEADER] {3675}\r\n```\r\n\r\nDo you believe, this is a server bug?"
      },
      {
        "user": "jstedfast",
        "created_at": "2022-09-14T15:56:27Z",
        "body": "Yes, this is a server bug."
      },
      {
        "user": "jstedfast",
        "created_at": "2022-09-14T15:57:21Z",
        "body": "What server are you using? Often the name of the server software (and version) is printed on the very first line of the log (after the \"Connected to ...\" line)"
      },
      {
        "user": "ghost",
        "created_at": "2022-09-14T16:03:21Z",
        "body": "I'm sorry, but there is no server information."
      },
      {
        "user": "jstedfast",
        "created_at": "2022-09-14T16:03:40Z",
        "body": "Ok, so based on one of your other bug reports, looks like you are connecting to a Perdition IMAP proxy which is probably the source of these bugs."
      }
    ]
  },
  {
    "number": 1410,
    "title": "Performance issue",
    "created_at": "2022-07-26T15:55:11Z",
    "closed_at": "2022-07-26T17:22:47Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jstedfast/MailKit/issues/1410",
    "body": "When working with older Gmail accounts, and with it, using search after query, it seems like it's working in following way:\r\nInitially it's gathering message id's of entire folder, then filtering out message id's in regard to it's date.\r\n\r\nCorrect me if I am wrong, but downloading for example 100 emails for today for a new account takes way less time then picking out 100 emails from today with inbox having 3000 emails + over all time.\r\n\r\nIf I am not clear feel free to ask me for some more details.",
    "comments_url": "https://api.github.com/repos/jstedfast/MailKit/issues/1410/comments",
    "author": "M1z23R",
    "comments": [
      {
        "user": "jstedfast",
        "created_at": "2022-07-26T16:01:56Z",
        "body": "That will all depend on the SEARCH implementation of the server.\r\n\r\nOr am I misunderstanding your question?"
      },
      {
        "user": "M1z23R",
        "created_at": "2022-07-26T16:10:00Z",
        "body": "Well, looking at the code now (Sorry I didn't do it before posting), it's working as it should - asking the server to return messages  SINCE xxx, I believed it was due to something else. But now I am even more confused as to why does it seem to work slower on older (bigger folders) accounts."
      },
      {
        "user": "M1z23R",
        "created_at": "2022-07-26T16:51:06Z",
        "body": "How would I search for messages newer then certain unique ID message ?\r\nSince Uids query requires a list of Uids.\r\n\r\nAll and all, I would like to setup search query to return the same as following: \"SEARCH UID 1000:*\""
      },
      {
        "user": "jstedfast",
        "created_at": "2022-07-26T17:01:34Z",
        "body": "you can use a UniqueIdRange to represent a list of UIDs:\r\n\r\n```csharp\r\nvar range = new UniqueIdRange (new UniqueId (1000), UniqueId.MaxValue);\r\n```"
      }
    ]
  },
  {
    "number": 1405,
    "title": "Does the Move operation returns correctly the new uids?",
    "created_at": "2022-07-11T14:23:17Z",
    "closed_at": "2022-07-11T16:04:33Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jstedfast/MailKit/issues/1405",
    "body": "**Describe the bug**\r\nIn case of Aol and Yahoo carriers, the `MoveTo` operation result is not correct. I'm not sure if the issue comes from them or from the Mailkit.\r\nI move **two** messages from the inbox to a custom folder, let's say the uids in inbox are 186 and 187. The move returns the destination uids, which are (lets' say): 22 and 23. So, the 186 became 22 in the destination folder and the 187 became 23. But actually this is not corect, the order should be inverted.\r\nWhen I debug the move operation, this is what I see: (check protocol logs as well below)\r\n```\r\nuniqueIdMap\r\n\tDestination\t{22:23}\r\n\tKeys\t{186:187}\r\n\tSource\t{186:187}\r\n\tValues\t{22:23}\r\n\t\tCount\t2\r\n\t\tSortOrder\tAscending\r\nResults View\r\n\t[0]\t{[{186}, {22}]}\r\n\t[1]\t{[{187}, {23}]}\r\n```\r\n\r\nI checked the same scenario with Gmail, and I found the following:\r\n```\r\nuniqueIdMap\r\n\tDestination\t{9,8}\r\n\tKeys\t{1747,1750}\r\n\tSource\t{1747,1750}\r\n\tValues\t{9,8}\r\n\t\tCount\t2\r\n\t\tSortOrder\tDescending\r\nResults View\r\n\t[0]\t{[{1747}, {9}]}\r\n\t[1]\t{[{1750}, {8}]}\r\n```\r\nSo basically the difference is that the sort order is Descending, and this way it sets correctly the new uids.\r\n\r\n**Platform:**\r\n - OS: Windows\r\n - .NET Runtime: Core 3.1\r\n - MailKit Version: 2.11.1\r\n\r\n**Protocol Logs**\r\n```\r\nC: X00000057 UID MOVE 187:186 xcc\r\nS: * OK [COPYUID 1657263256 186:187 22:23]\r\nS: * 159 EXPUNGE\r\nS: * 159 EXPUNGE\r\nS: X00000057 OK UID MOVE completed\r\n```\r\n\r\nBased on your experience, can I do simply to invert the values order in this case? Or what else could you suggest?",
    "comments_url": "https://api.github.com/repos/jstedfast/MailKit/issues/1405/comments",
    "author": "atiyka",
    "comments": [
      {
        "user": "jstedfast",
        "created_at": "2022-07-11T14:48:40Z",
        "body": "With the protocol logs you pasted, what makes you think they need to be inverted?"
      },
      {
        "user": "jstedfast",
        "created_at": "2022-07-11T14:50:41Z",
        "body": "also, I would *always* use ascending ordered lists of indexes/uids when communicating with IMAP.\r\n\r\nMost servers handle descending uids/indexes correctly, but some do not."
      },
      {
        "user": "jstedfast",
        "created_at": "2022-07-11T16:04:33Z",
        "body": "Based on the protocol log, the mapping is correct."
      },
      {
        "user": "atiyka",
        "created_at": "2022-07-12T07:35:19Z",
        "body": "> With the protocol logs you pasted, what makes you think they need to be inverted?\r\n\r\nI think, because after the move operation, I fetch the messages from that folder, and in the `IMessageSummary` object the uids appears inverted, so for the message which was 186 and became 22 in the new folder based on the result of the move, currently it says that it has uid 23, and the other message has 22. So based on this I concluded that the move returned the result in a wrong order.\r\n\r\nAnyway, thanks for your answer.\r\n"
      },
      {
        "user": "jstedfast",
        "created_at": "2022-07-12T13:45:15Z",
        "body": "```\r\nS: * OK [COPYUID 1657263256 186:187 22:23]\r\n```\r\n\r\nThe above response is what gives MailKit's ImapClient implementation the UID mapping and as you can see, 186 maps to 22 and 187 maps to 23 according to the IMAP server."
      }
    ]
  },
  {
    "number": 1399,
    "title": "Can I use the repo to delete all emails in inbox folder?",
    "created_at": "2022-06-27T20:13:50Z",
    "closed_at": "2022-06-27T20:31:29Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jstedfast/MailKit/issues/1399",
    "body": "Hello:\r\nI can use the repo to retrieve all emails from inbox by IMAP, which seems to be easy.\r\nBut I can't find any simple way to delete all the email in the inbox folder.  For most of the email servers, the inbox is the only folder.\r\nI have quite a number of emails on different email servers.  So I want to write a simple program I can run every week or every month, it just simply deletes all the emails from inbox folder without reading contents or titles of any emails.\r\nCan you show me some simple code to do this without complicated query statement.\r\nThanks,",
    "comments_url": "https://api.github.com/repos/jstedfast/MailKit/issues/1399/comments",
    "author": "zydjohnHotmail",
    "comments": [
      {
        "user": "jstedfast",
        "created_at": "2022-06-27T20:31:29Z",
        "body": "```csharp\r\nvar uids = new UniqueIdRange (UniqueId.MinValue, UniqueId.MaxValue);\r\ninbox.AddFlags (uids, MessageFlags.Deleted, true);\r\ninbox.Expunge ();\r\n```"
      },
      {
        "user": "zydjohnHotmail",
        "created_at": "2022-06-27T20:42:12Z",
        "body": "Hello:\r\nThanks for your quick reply.  I have tried your code, but I got the following error:\r\nThe folder is not currently open in read-write mode.\r\nIt seems I have to open the inbox folder with read-write mode.\r\nBut how I can do this?\r\nPlease advise,\r\nThanks,"
      },
      {
        "user": "jstedfast",
        "created_at": "2022-06-27T20:43:41Z",
        "body": "```csharp\r\ninbox.Open(FolderAccess.ReadWrite);\r\nvar uids = new UniqueIdRange (UniqueId.MinValue, UniqueId.MaxValue);\r\ninbox.AddFlags (uids, MessageFlags.Deleted, true);\r\ninbox.Expunge ();\r\n```"
      }
    ]
  },
  {
    "number": 1372,
    "title": "How to use SMTP vis proxy? Any demo?",
    "created_at": "2022-05-06T23:25:43Z",
    "closed_at": "2022-05-07T00:18:54Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jstedfast/MailKit/issues/1372",
    "body": "I want to send mail via socks5 ,the proxy server require username and  password authentication. \r\nbut something goes wrong  .Is there any demo?\r\n\r\n```csharp\r\nusing (var client = new MailKit.Net.Smtp.SmtpClient())\r\n{\r\n    var string proxyip=\"220.10.10.1\";\t\r\n    var int proxyport=4145;\r\n    var string proxyusername=\"\";  // how to \r\n    var string proxypassword=\"\";\r\n    var socksClient = new Socks5Client(proxyip,proxyport);\r\n    client.ProxyClient = socksClient;\r\n\r\n    client.Connect(\"smtp.mysmtp.com\", 25, false);\r\n    client.Authenticate(\"username@mysmtp.com\", \"password\");\r\n\r\n    client.Send(message);\r\n    client.Disconnect(true);\r\n}\r\n```",
    "comments_url": "https://api.github.com/repos/jstedfast/MailKit/issues/1372/comments",
    "author": "aleylinx",
    "comments": [
      {
        "user": "jstedfast",
        "created_at": "2022-05-07T00:18:47Z",
        "body": "Well, you need to set the proxy username/passwd on the proxy...\r\n\r\n```csharp\r\nusing (var client = new MailKit.Net.Smtp.SmtpClient())\r\n{\r\n    var string proxyip=\"220.10.10.1\";\t\r\n    var int proxyport=4145;\r\n    var string proxyusername=\"\";  // how to \r\n    var string proxypassword=\"\";\r\n    var socksClient = new Socks5Client(proxyip,proxyport, new NetworkCredential(proxyusername, proxypassword));\r\n    client.ProxyClient = socksClient;\r\n\r\n    client.Connect(\"smtp.mysmtp.com\", 25, false);\r\n    client.Authenticate(\"username@mysmtp.com\", \"password\");\r\n\r\n    client.Send(message);\r\n    client.Disconnect(true);\r\n}\r\n```"
      }
    ]
  },
  {
    "number": 1371,
    "title": "Are links in MimeMessage.Subject supported at all?",
    "created_at": "2022-04-30T14:01:30Z",
    "closed_at": "2022-05-11T19:04:11Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jstedfast/MailKit/issues/1371",
    "body": "Hi,\r\n\r\nA customer just came across an valid/interesting request. He's used to have links in the subjects of his mails. This works nicely e.g. in Outlook where he then could click on that link.\r\n\r\nHowever, MimeMessage.Subject is a plain string. Is there some support for links other than me just parsing the .Subject string and visualize the link by whatever UI means?\r\n\r\nThanks in advance",
    "comments_url": "https://api.github.com/repos/jstedfast/MailKit/issues/1371/comments",
    "author": "DierkDroth",
    "comments": [
      {
        "user": "jstedfast",
        "created_at": "2022-05-11T19:04:11Z",
        "body": "MIME messages don't have a concept of links in any header or even message bodies.\r\n\r\nYou could put a link there if you wanted to, though. It's just not guaranteed to be supported by any (or all) mail clients that receive the message.\r\n\r\nIf you are implementing the receiving client, then you could just parse the subject looking for http or https URLS or something and linkify them."
      }
    ]
  },
  {
    "number": 1356,
    "title": "What's the recommended/performant way to use the getStreams method?",
    "created_at": "2022-04-06T19:38:37Z",
    "closed_at": "2022-04-07T12:54:25Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jstedfast/MailKit/issues/1356",
    "body": "Hi, I found `getStreams` when looking through past issues regarding bulk processing. I'd like to consume around ~30k emails from a folder and am looking for the most performant way to do so!\r\n\r\nCurrently I'm using this pattern:\r\n``` csharp\r\n// using an exact path for the type below as it was the only way to get it to resolve getStreams\r\nMailKit.Net.Imap.IImapFolder all = (IImapFolder)client.GetFolder(SpecialFolder.All);\r\nUniqueIdRange range = new UniqueIdRange(uidMin, uidNext); // predefined range for last 30k\r\nvar refs = all.Search(range, SearchQuery.All);\r\n\r\nIList<Task<MimeMessage>> tasks = new List<Task<MimeMessage>>();\r\nvoid getMessageFromStream(ImapFolder _, int __, UniqueId ___, Stream stream) {\r\n    tasks.Add(MimeMessage.LoadAsync(stream));\r\n}\r\nall.GetStreams(refs, getMessageFromStream);\r\nMimeMessage[] messages = await Task.WhenAll(tasks);\r\n```\r\n\r\nI'm looking to possibly parallelize this; as the callback doesn't require a full IMAP connection since it just parses the message, I figured it shouldn't be an issue to have that be done in large batches of threads. However, I read that the stream is closed when the callback returns, so I'm not sure what the best way to go about this is. Would love some insight here as to how to accomplish this or whether there's a better way to go about this!",
    "comments_url": "https://api.github.com/repos/jstedfast/MailKit/issues/1356/comments",
    "author": "cuuupid",
    "comments": [
      {
        "user": "jstedfast",
        "created_at": "2022-04-06T22:33:37Z",
        "body": "> However, I read that the stream is closed when the callback returns\r\n\r\nCorrect. The Stream argument is Dispose()'d once the callback returns, so it's important to process it in the callback itself and not defer processing.\r\n\r\nYou probably don't want to have 30,000 messages loaded in RAM anyway because that could be a ton of memory."
      },
      {
        "user": "jstedfast",
        "created_at": "2022-04-07T12:54:25Z",
        "body": "FWIW, the API was designed with the expectation that developers would save the stream to disk and process them later."
      }
    ]
  },
  {
    "number": 1355,
    "title": "header tag: Return-Path dont appear in email AWS SES",
    "created_at": "2022-03-31T23:06:44Z",
    "closed_at": "2022-03-31T23:15:57Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jstedfast/MailKit/issues/1355",
    "body": "**Describe the bug**\r\nDuring sending Email, we added header \"Return-Path\" with value \"ReturnPath@mail.com\". As result tag did not appear in result Email. What is wrong? Did we do something wrong or AWS remove it. pls, help us to understand your part.\r\n\r\n**Platform (please complete the following information):**\r\n - OS: Windows\r\n - .NET Runtime: ASP.NET 4.6.1 \r\n - MailKit Version: 3.1.1\r\n\r\n**Expected behavior**\r\nHeader should consist this attr\r\n\r\n**Code Snippets**\r\nIf applicable, add code snippets to help explain your problem.\r\n\r\n```csharp\r\n            MimeMessage mailMessage = new MimeMessage();\r\n            mailMessage.From.Clear();\r\n            mailMessage.From.Add(new MailboxAddress(\"Test from\", \"From@mail.com\"));\r\n\r\n            mailMessage.To.Add(new MailboxAddress(\"Test To\", \"To@mail.com\"));\r\n\r\n            mailMessage.Headers.Add(\"Return-Path\", MailboxAddress.Parse(\"ReturnPath@mail.com\").ToString());\r\n\r\n            mailMessage.Subject = \"test Message\";\r\n\r\n            var sender = new MailboxAddress(\"Sender@mail.com\");\r\n            mailMessage.Body = ....\r\n\r\n            await _client.SendAsync(mailMessage, sender, cancellationToken).ConfigureAwait(false);\r\n```\r\n\r\n\r\n\r\n\r\n",
    "comments_url": "https://api.github.com/repos/jstedfast/MailKit/issues/1355/comments",
    "author": "Eugene-Lytvynov",
    "comments": [
      {
        "user": "jstedfast",
        "created_at": "2022-03-31T23:15:57Z",
        "body": "AWS is removing it, but maybe it's removing it because it's not at the top of the headers.\r\n\r\nTry this:\r\n\r\n```csharp\r\nmailMessage.Headers.Insert(0, \"Return-Path\", \"ReturnPath@mail.com\");\r\n```"
      },
      {
        "user": "Eugene-Lytvynov",
        "created_at": "2022-03-31T23:17:49Z",
        "body": "So, you do not overwrite it, isnt it? I mean the tag. it get to AWS SES without any modification, isnt it?"
      },
      {
        "user": "jstedfast",
        "created_at": "2022-03-31T23:29:01Z",
        "body": "MimeKit/MailKit will not overwrite any headers."
      }
    ]
  },
  {
    "number": 1328,
    "title": "Custom DefaultLocalDomain for SmtpClient",
    "created_at": "2022-02-08T17:10:34Z",
    "closed_at": "2022-02-08T17:13:45Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jstedfast/MailKit/issues/1328",
    "body": "**Is your feature request related to a problem? Please describe.**\r\nI use MailKit in a docker container to send email through SMTP.\r\nI was debugging some issue with an SMTP provider, and I notice that the hostname of the container is present in the raw email \r\n```text\r\nReceived: from container-hostname (unknown [42.42.42.42])\r\n```\r\n\r\n**Describe the solution you'd like**\r\nI would like to know if there is a way to customize the `DefaultLocalDomain` with a personal value without changing the container hostname ?\r\n\r\nIn advance, thank you.",
    "comments_url": "https://api.github.com/repos/jstedfast/MailKit/issues/1328/comments",
    "author": "waldo2188",
    "comments": [
      {
        "user": "jstedfast",
        "created_at": "2022-02-08T17:13:45Z",
        "body": "You can set SmtpClient.LocalDomain to whatever string you want and that is the (full) string that will be used in the EHLO command (which, presumably, is the string used by the SMTP server to generate the Received header)."
      }
    ]
  },
  {
    "number": 1325,
    "title": "Example how to get UID",
    "created_at": "2022-01-31T20:29:29Z",
    "closed_at": "2022-01-31T20:32:18Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jstedfast/MailKit/issues/1325",
    "body": "HI, how can i get uid from this code pls ? Im trying to make delete possible but this implementation of imap is kind of strange to me and very confusing.. This below example is nice, shows how to get all info from emails i need, but all other examples are not enough to understand whole functionality. \r\n\r\n```sharp\r\nusing System;\r\n\r\nusing MimeKit;\r\nusing MailKit;\r\nusing MailKit.Search;\r\nusing MailKit.Net.Imap;\r\n\r\nnamespace TestClient {\r\n    class Program\r\n    {\r\n        public static void Main (string[] args)\r\n        {\r\n            using (var client = new ImapClient ()) {\r\n                client.Connect (\"imap.friends.com\", 993, true);\r\n\r\n                client.Authenticate (\"joey\", \"password\");\r\n\r\n                // The Inbox folder is always available on all IMAP servers...\r\n                var inbox = client.Inbox;\r\n                inbox.Open (FolderAccess.ReadOnly);\r\n\r\n                Console.WriteLine (\"Total messages: {0}\", inbox.Count);\r\n                Console.WriteLine (\"Recent messages: {0}\", inbox.Recent);\r\n\r\n                for (int i = 0; i < inbox.Count; i++) {\r\n                    var message = inbox.GetMessage (i);\r\n                    Console.WriteLine (\"Subject: {0}\", message.Subject);\r\n                }\r\n\r\n                client.Disconnect (true);\r\n            }\r\n        }\r\n    }\r\n}\r\n```",
    "comments_url": "https://api.github.com/repos/jstedfast/MailKit/issues/1325/comments",
    "author": "michalss",
    "comments": [
      {
        "user": "jstedfast",
        "created_at": "2022-01-31T20:32:18Z",
        "body": "```csharp\r\nusing System;\r\n\r\nusing MimeKit;\r\nusing MailKit;\r\nusing MailKit.Search;\r\nusing MailKit.Net.Imap;\r\n\r\nnamespace TestClient {\r\n    class Program\r\n    {\r\n        public static void Main (string[] args)\r\n        {\r\n            using (var client = new ImapClient ()) {\r\n                client.Connect (\"imap.friends.com\", 993, true);\r\n\r\n                client.Authenticate (\"joey\", \"password\");\r\n\r\n                // The Inbox folder is always available on all IMAP servers...\r\n                var inbox = client.Inbox;\r\n                inbox.Open (FolderAccess.ReadOnly);\r\n\r\n                Console.WriteLine (\"Total messages: {0}\", inbox.Count);\r\n                Console.WriteLine (\"Recent messages: {0}\", inbox.Recent);\r\n\r\n                var uids = inbox.Search (SearchQuery.All);\r\n                for (int i = 0; i < uids.Count; i++) {\r\n                    var message = inbox.GetMessage (uids[i]);\r\n                    Console.WriteLine (\"Subject: {0}\", message.Subject);\r\n                }\r\n\r\n                client.Disconnect (true);\r\n            }\r\n        }\r\n    }\r\n}\r\n```"
      }
    ]
  },
  {
    "number": 1192,
    "title": "Will Maintain email conversation on email server as well as local Is it possible? ",
    "created_at": "2021-04-14T11:53:30Z",
    "closed_at": "2021-04-15T15:36:08Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jstedfast/MailKit/issues/1192",
    "body": "(1)I want it to be updated in the sent folder of the mail server while  i reply to someone or created new email.\r\n\r\n(2)How do I know if I have spammed an email on email server and want it from the imap in local?",
    "comments_url": "https://api.github.com/repos/jstedfast/MailKit/issues/1192/comments",
    "author": "ysunil702",
    "comments": [
      {
        "user": "jstedfast",
        "created_at": "2021-04-14T17:42:35Z",
        "body": "I don't understand what you are asking in either question.\r\n\r\n1) What do you want updated on the mail server? I don't understand. Do you want the reply message to be appended to the Sent folder when you send the reply? If so, you need to send the message via SmtpCLient and then append the message to the sent folder using an ImapClient (see the ImapFolder.Append method).\r\n\r\n2) What...??? Are you asking how to tell if you've received a message marked as spam? Or are you asking if it's possible to tell if a message you've sent got marked as spam in the recipient's mailbox?"
      },
      {
        "user": "ysunil702",
        "created_at": "2021-04-15T04:49:10Z",
        "body": "Thank you for prompt reply @jstedfast . You understand the first question right. and my second question is \r\nWhen I retrieved  the email from server using IMAP, how will I know if there is a mail with spam?"
      },
      {
        "user": "jstedfast",
        "created_at": "2021-04-15T15:36:08Z",
        "body": "The same way you'd determine if the message was seen/deleted/etc. except that you'd use the IMessageSummary.Keywords property instead of IMessageSummary.Flags and you'd check for a keyword like `\"$Junk\"`.\r\n\r\n```csharp\r\nif (summary.Keywords.Contains (\"$Junk\")) {\r\n    // the message is marked as spam\r\n}\r\n```"
      }
    ]
  },
  {
    "number": 1066,
    "title": "MailKit Pop3Client.Count retrieves all emails, not just the number of emails.",
    "created_at": "2020-08-30T08:51:29Z",
    "closed_at": "2020-08-30T12:09:58Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jstedfast/MailKit/issues/1066",
    "body": "**Describe the bug**\r\nMailKit Pop3Client.Count retrieves all emails, not just the number of emails.\r\n\r\nMy code is as follows\r\n\r\n```\r\nusing (var client = new Pop3Client(new ProtocolLogger(\"d:\\\\pop3.txt\") ))\r\n            {\r\n                client.Connect(emailSettings.PopServer, emailSettings.PopPort, SecureSocketOptions.SslOnConnect);\r\n                client.Authenticate(emailSettings.Username, emailSettings.Password);\r\n\r\n                EmailCount = client.Count();\r\n            }\r\n```\r\n\r\nThe mailbox I am issung this command against has over 1000 emails in it. When examining the created Pop3.txt file I see that the client has correctly issued the ```STAT``` command and recieves the reply ```+OK 1122 50068335```.\r\n\r\nHowever the Client then goes on to retrieves all email, issuing ```RETR``` until all have been downloaded.\r\n\r\nWhen calling the ```client.Count()``` command, all the client needs to do is issue STAT and return the number from the server. Anything further is not necessary and a waste of bandwidth.\r\n\r\n\r\n**Platform (please complete the following information):**\r\n - OS: Windows 10\r\n - .NET: Net Core 3.1\r\n-  Microsoft Visual Studio Community 2019 Version 16.7.2\r\n - MailKit Version: 2.8.0\r\n\r\n",
    "comments_url": "https://api.github.com/repos/jstedfast/MailKit/issues/1066/comments",
    "author": "johnmackerras",
    "comments": [
      {
        "user": "jstedfast",
        "created_at": "2020-08-30T12:09:58Z",
        "body": "The `Count()` method that you are using is a LINQ extension method that iterates over an IEnumerable.\r\n\r\nWhat you want is the `Count` *property* which will not download all messages.\r\n\r\nI can't change the behavior of the LINQ `Count()` method because it exists in System.Linq, not MailKit."
      }
    ]
  },
  {
    "number": 984,
    "title": "How to get the uniqueID of a message\uff1f",
    "created_at": "2020-02-11T07:05:12Z",
    "closed_at": "2020-02-11T14:00:03Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jstedfast/MailKit/issues/984",
    "body": "**Is your feature request related to a problem? Please describe.**\r\nI have used inbox.getmessage (1) to get message information, but I can't find the one to get uniqueID\u3002\r\n\r\n**Describe the solution you'd like**\r\nvar message = Inbox.GetMessage(1);\r\nstring subject = message.Subject; //Subject\r\n\r\nHow to get uniqueID next\uff1f\r\nI need to get this uniqueID for setflags\u3002\r\nBut the uniqueID cannot be obtained by using GetMessage\u3002\r\n\r\n**Describe alternatives you've considered**\r\nA clear and concise description of any alternative solutions or features you've considered.\r\n\r\n**Additional context**\r\nAdd any other context or screenshots about the feature request here.\r\n",
    "comments_url": "https://api.github.com/repos/jstedfast/MailKit/issues/984/comments",
    "author": "pengpengker",
    "comments": [
      {
        "user": "jstedfast",
        "created_at": "2020-02-11T14:00:03Z",
        "body": "You can actually set flags using message indexes as well, but yes, it is better to use unique id's.\r\n\r\nTo get all of the UniqueIDs in a folder, you can do this:\r\n\r\n```csharp\r\nvar uids = inbox.Search (SearchQuery.All);\r\n```\r\n\r\nYou can then use those UIDs to get the messages:\r\n\r\n```csharp\r\nforeach (var uid in uids) {\r\n    var message = inbox.GetMessage (uid);\r\n}\r\n```\r\n\r\nAnother way to get the UIDs is to ask the folder for the metadata for a set of messages (or, in the example below, *all* of the messages):\r\n\r\n```csharp\r\nvar summaries = inbox.Fetch (0, -1, MessageSummaryItems.UniqueId | MessageSummaryItems.Envelope | MessageSummaryItems.Flags);\r\nforeach (var summary in summaries) {\r\n    // now you can use summary.UniqueId and any other field that you requested in the Fetch()\r\n    // request such as summary.Envelope. You can also use summary.Index which is *always* set.\r\n   Console.WriteLine (\"Message[{0}] has UID={1} and Subject=\\\"{2}\\\" and currently has the following flags set: {3}\", summary.Index, summary.UniqueId, summary.Envelope.Subject, summary.Flags.Value); \r\n}\r\n```\r\n\r\nIn essence, you don't get a UID from a message, you use a UID to *refer* to a message.\r\n\r\nHope that helps."
      }
    ]
  },
  {
    "number": 978,
    "title": "Argument 1: Cannot convert from \"MimeKit.MimeMessage\" to \"string\".",
    "created_at": "2020-01-22T15:29:35Z",
    "closed_at": "2020-01-22T15:55:42Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jstedfast/MailKit/issues/978",
    "body": "hello, I'm trying to copy part of the text from a REGEX letter , but I have a problem. produces such an error\r\n\u00a0Argument 1: Cannot convert from \"MimeKit.MimeMessage\" to \"string\".\r\n\r\n```csharp\r\n var a = inbox.GetMessage(UID); // \r\n                    var rsw = new Regex(\"(?i)<p [^>]*?>\\\\s*<em[^>]*?>(.*)</em\");\r\n  string capture2 = rsw.Match(a).Groups[1].Value;\r\n```\r\nI do not quite understand how to fix this.\r\n\r\nif this has nothing to do with your project, then I apologize.\r\nthanks",
    "comments_url": "https://api.github.com/repos/jstedfast/MailKit/issues/978/comments",
    "author": "NerzOff",
    "comments": [
      {
        "user": "jstedfast",
        "created_at": "2020-01-22T15:55:42Z",
        "body": "The problem is that you are passing a `MimeMessage` object into `rsw.Match(a)`, but the `Match()` method takes a `string` argument, not a `MimeMessage` argument.\r\n\r\nIt looks like you are trying to use regex to match some HTML of the message body?\r\n\r\nIf so, try something more like this:\r\n\r\n```csharp\r\nvar message = inbox.GetMessage(UID);\r\nvar htmlBody = message.HtmlBody ?? string.Empty;\r\nvar rsw = new Regex(\"(?i)<p [^>]*?>\\\\s*<em[^>]*?>(.*)</em\");\r\nstring capture2 = rsw.Match(htmlBody).Groups[1].Value;\r\n```"
      }
    ]
  },
  {
    "number": 955,
    "title": "use aws ses(Amazon Simple Email Service) error   501 Invalid MAIL FROM address provided",
    "created_at": "2019-11-21T06:40:04Z",
    "closed_at": "2019-11-21T13:19:45Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jstedfast/MailKit/issues/955",
    "body": "Dear Friend\r\nI use mailkit to send aws  ses \r\ncsharp code:\r\n\r\n```csharp\r\n            using (var client = new MailKit.Net.Smtp.SmtpClient(new ProtocolLogger(Program.CreateMailLog())))\r\n            {\r\n\r\n                //25 587\r\n                // String HOST = \"email-smtp.us-west-2.amazonaws.com\";\r\n                // int PORT = 587;\r\n                client.Connect(HOST, PORT, SecureSocketOptions.StartTlsWhenAvailable);\r\n                //SMTP_USERNAME: Replace smtp_username with your Amazon SES SMTP user name.\r\n                // SMTP_PASSWORD: Replace smtp_password with your Amazon SES SMTP user name.\r\n                client.Authenticate(SMTP_USERNAME, SMTP_PASSWORD);\r\n                // client.Authenticate(oauth);\r\n                client.Send(message);\r\n                client.Disconnect(true);\r\n            }\r\n```\r\n\r\nbut is error.\r\nlogs:\r\n```\r\nConnected to smtp://email-smtp.us-west-2.amazonaws.com:587/?starttls=when-available\r\nS: 220 email-smtp.amazonaws.com ESMTP SimpleEmailService-d-B1D75AM90 83qp4IzaerfvF0CNuJJJ\r\nC: EHLO [192.168.1.110]\r\nS: 250-email-smtp.amazonaws.com\r\nS: 250-8BITMIME\r\nS: 250-SIZE 10485760\r\nS: 250-STARTTLS\r\nS: 250-AUTH PLAIN LOGIN\r\nS: 250 Ok\r\nC: STARTTLS\r\nS: 220 Ready to start TLS\r\nC: EHLO [192.168.1.110]\r\nS: 250-email-smtp.amazonaws.com\r\nS: 250-8BITMIME\r\nS: 250-SIZE 10485760\r\nS: 250-STARTTLS\r\nS: 250-AUTH PLAIN LOGIN\r\nS: 250 Ok\r\nC: AUTH PLAIN XXX\r\nS: 235 Authentication successful.\r\nC: MAIL FROM:<myemailname> SIZE=606\r\nS: 501 Invalid MAIL FROM address provided\r\nC: RSET\r\nS: 250 Ok\r\n```\r\n\r\nlogs say my error is 501 Invalid MAIL FROM address provided\r\nbut i don't know what can i do\r\nsomeone has idea of it\r\nBest wish  \r\nRico \r\n\r\n",
    "comments_url": "https://api.github.com/repos/jstedfast/MailKit/issues/955/comments",
    "author": "wkf0660",
    "comments": [
      {
        "user": "jstedfast",
        "created_at": "2019-11-21T13:19:45Z",
        "body": "You need to set a full email address of the form `user@domain.com`, not just `user`."
      }
    ]
  },
  {
    "number": 941,
    "title": "Smtp lifetime",
    "created_at": "2019-10-28T07:12:06Z",
    "closed_at": "2019-10-28T12:42:29Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jstedfast/MailKit/issues/941",
    "body": "Hi, I was wondering how should I use `MailKit.Net.Smtp.smptclient` object, and what is the best life-time for `smtpclient` object.\r\nI mean should I use it as a singleton object, or is it ok to use it with c# `using(resource)` pattern?\r\nmy main concern here is how `smtpclient`  object handles underlying network connection, and what should I do in order to avoid socket exhaustion.\r\n\r\nI am asking this since all the tutorials on the web use `smtpclient` with c# `using(resource)` pattern. However, if `smtpclient` is anything like .net `httpclient` this is going to mess things up in production\r\n",
    "comments_url": "https://api.github.com/repos/jstedfast/MailKit/issues/941/comments",
    "author": "FIVIL",
    "comments": [
      {
        "user": "jstedfast",
        "created_at": "2019-10-28T12:42:29Z",
        "body": "With any of the MailKit Smtp/Pop3/ImapClient classes, a socket is instantiated/connected in the `Connect` method and disconnected/disposed in the `Disconnect` method. The `Dispose` method on each of the Client classes will force a disconnect by calling `Disconnect (false)` but they will just kill the socket rather than sending a \"LOGOUT\" command, so I would definitely recommend calling `Disconnect (true)` before `Dispose` whether you use the `using(resource)` pattern or not.\r\n\r\nThe problem people get into with `HttpClient` is that they dispose the client way too aggressively, not giving the OS time to clean up the disconnected socket(s) before instantiating a new HttpClient and making the next request, e.g.:\r\n\r\n```csharp\r\nfor (int i = 0; i < 1000; i++) {\r\n    using (var new HttpClient ()) {\r\n        // make a request, process it, etc...\r\n    }\r\n}\r\n```\r\n\r\nThis *can* also be a problem with MailKit. For example, if you have 1000 messages you want to send, I would recommend reusing the same SmtpClient instance like this:\r\n\r\n```csharp\r\nusing (var client = new SmtpClient ()) {\r\n    client.Connect (\"smtp.server.com\", 587, SecureSocketOptions.StartTls);\r\n    client.Authenticate (\"username\", \"password\");\r\n\r\n    for (int i = 0; i < 1000; i++) {\r\n        client.Send (messages[i]);\r\n    }\r\n\r\n    client.Disconnect (true);\r\n}\r\n```\r\n"
      },
      {
        "user": "FIVIL",
        "created_at": "2019-10-28T18:49:17Z",
        "body": "Thank you for your detailed answer, one last thing though.\r\nsince I am planning to use this in a web server, which sends emails to users, I was wondering if MailKit Smtp/Pop3/ImapClient classes are thread-safe or should I take care of managing threads and locks??"
      },
      {
        "user": "jstedfast",
        "created_at": "2019-10-28T19:00:16Z",
        "body": "They are not thread-safe."
      }
    ]
  },
  {
    "number": 927,
    "title": "Content Id for mails set to \"multipart/multipart/mixed\" in email message.",
    "created_at": "2019-10-07T10:33:48Z",
    "closed_at": "2019-10-07T12:20:56Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jstedfast/MailKit/issues/927",
    "body": "**Describe the bug**\r\nWhen creating a new mail message using the MailKit and Mimekit helpers, when creating a message from a Multipart object, the Content Id is set to \"multipart/multipart/mixed\" instead of the normal \"multipart/mixed\". This happens when creating a MimeMessage object from a Multipart object, and then sending the email.\r\n\r\n**To Reproduce**\r\nSteps to reproduce the behavior:\r\nCreate a new outgoing email message using a MimeMessage, instead of using the BodyBuilder helper class. The MimeMessage should be built from a Multipart object using the \"subType\" of \"multipart/mixed\". Adding attachments is optional. \r\nWhen sending the mail and viewing the email as an EML file, the Content Id value is set to \"multipart/multipart/mixed\", instead of the correct \"multipart/mixed\". This can cause issues with certain email servers antispam/antivirus software seeing this message as a \"malformed\" message. This happened in a scenario where the recipient was using MailMarshal.\r\n\r\n**Expected behavior**\r\nContentId should be set to \"multipart/mixed\" in all scenarios.\r\n\r\n**Screenshots**\r\nIf applicable, add screenshots to help explain your problem.\r\n\r\n**Desktop (please complete the following information):**\r\n - OS: Windows 10\r\n - Browser All\r\n - Version 2.1.5.1\r\n\r\n**Additional context**\r\nWhen creating a new mail message using the BodyBuilder helper class, the message's Content Id is set correctly.\r\n",
    "comments_url": "https://api.github.com/repos/jstedfast/MailKit/issues/927/comments",
    "author": "eduardk1008",
    "comments": [
      {
        "user": "jstedfast",
        "created_at": "2019-10-07T12:20:56Z",
        "body": "> The MimeMessage should be built from a Multipart object using the \"subType\" of \"multipart/mixed\".\r\n\r\nSo... `new Multipart (\"multipart/mixed\");` results in `Content-Type: multipart/multipart/mixed`?\r\n\r\nDoctor's orders: take a sip of your morning coffee and then look at that again and tell me why you are getting the result you are getting ;-)\r\n\r\nI'm pretty sure you'll have a \"ah-hah!\" moment, a little light bulb will spark to life and you'll be golden.\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nHint: what you want is `new Multipart (\"mixed\");`"
      }
    ]
  },
  {
    "number": 917,
    "title": "Need option to remove sender header from message.",
    "created_at": "2019-09-26T09:32:12Z",
    "closed_at": "2019-09-26T15:19:52Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jstedfast/MailKit/issues/917",
    "body": "**Is your feature request related to a problem? Please describe.**\r\nWhen I add the sender ```MailboxAddress``` it changes the MAIL FROM in the envelope but also adds a sender header. The problem is that in some email clients and in particular, Outlook, the client displays something like \"sender@domain.com on behalf of from@domain.com\" or \"Sender <sender@domain.com> on behalf of From <from@domain.com>\". This may be correct but the recipient is often left in doubt as to who the message is really from. Typically the sender is going to be used to handle NDRs programmatically using a VERP (Variable envelope return path) scheme and the alias part of the address could be a GUID.\r\n\r\n**Describe the solution you'd like**\r\nI would like an option to not add the sender header, and only change the MAIL FROM in the envelope. Perhaps adding the sender to the MimeMessage should add the header but adding it in the ```MailTransport.SendAsync``` overload does not?\r\n\r\n**Describe alternatives you've considered**\r\nThe only way I've found to get what I want so far is to extend the SmtpClient and remove the header from the ```Prepare``` method:\r\n\r\n```\r\npublic class ExtendedSmtpClient : SmtpClient\r\n{\r\n\tprotected override void Prepare(FormatOptions options, MimeMessage message, EncodingConstraint constraint, int maxLineLength)\r\n\t{\r\n\t\tmessage.Headers.Remove(HeaderId.Sender);\r\n\r\n\t\tbase.Prepare(options, message, constraint, maxLineLength);\r\n\t}\r\n}\r\n```\r\n\r\nI haven't fully tested this but I'm wondering if there's a better way you could point out to me?\r\n\r\n**Additional context**\r\nAmazon SES modifies the MAIL FROM without adding the sender header so I guess this is considered acceptable practice.\r\n\r\nPlease let me know what you think.\r\nThanks \r\nAndrew",
    "comments_url": "https://api.github.com/repos/jstedfast/MailKit/issues/917/comments",
    "author": "j055",
    "comments": [
      {
        "user": "jstedfast",
        "created_at": "2019-09-26T15:19:52Z",
        "body": "Use SmtpClient.Send (message, from, recipients);"
      },
      {
        "user": "srikarbalmuri",
        "created_at": "2023-10-13T05:21:31Z",
        "body": "Is there a sample code I can use to achieve this feature I am also trying to implement verp"
      },
      {
        "user": "jstedfast",
        "created_at": "2023-10-15T14:37:36Z",
        "body": "@srikarbalmuri \r\n\r\n```csharp\r\nclient.Send (message, from, recipients);\r\n```\r\n"
      }
    ]
  },
  {
    "number": 907,
    "title": "FetchAsync is not loading list of UniqueIds",
    "created_at": "2019-09-10T16:08:06Z",
    "closed_at": "2019-09-10T16:15:00Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jstedfast/MailKit/issues/907",
    "body": "**Describe the bug**\r\n\r\nI'm attempting to load recent messages from a given folder, in this case a user's inbox.  I get a list of unique ids using `folder.SortAsync()` then take that list and call `folder.FetchAsync()`.  `SortAsync` is returning 199 UniqueId values.  When I call fetch, no records are returned.\r\n\r\nHowever, if I request a single UniqueId at a time, it works.  I assume the IMAP server does not support ranges.\r\n\r\nIs there a capability I can look at the determine this behavior?  Also, is there a way to request that Fetch not use ranges?\r\n\r\nUsing MailKit 2.3.0\r\n\r\n**Expected behavior**\r\nI'd expect `FetchAsync` to return the 199 messages.\r\n\r\n**Additional context**\r\n<details><summary>Output from Imap Protocol Logger</summary>\r\n<pre>\r\nS: A00000000 OK [CAPABILITY IMAP4REV1 LITERAL+ UTF8=ALL STARTTLS IDLE NAMESPACE UNSELECT SORT QUOTA ID] User [redacted] authenticated\r\nC: A00000001 NAMESPACE\r\nS: * NAMESPACE ((\"\" \"/\")) NIL NIL\r\nS: A00000001 OK NAMESPACE completed\r\nC: A00000002 LIST \"\" \"INBOX\"\r\nS: * LIST (\\NoInferiors) NIL INBOX\r\nS: A00000002 OK LIST completed\r\nC: A00000003 LIST \"\" \"%\"\r\nS: * LIST (\\NoInferiors) NIL INBOX\r\nS: * LIST (\\Marked) \"/\" mail/SPAM.incoming\r\nS: * LIST (\\UnMarked) \"/\" mail/drafts\r\nS: * LIST (\\UnMarked) \"/\" mail/sent-mail\r\nS: * LIST (\\UnMarked) \"/\" mail/trash\r\nS: * LIST (\\UnMarked) \"/\" \"Junk E-mail\"\r\nS: * LIST (\\UnMarked) \"/\" \"Sent Items\"\r\nS: * LIST (\\UnMarked) \"/\" \"Deleted Items\"\r\nS: * LIST (\\UnMarked) \"/\" Drafts\r\nS: A00000003 OK LIST completed\r\nC: A00000004 LIST \"\" mail\r\nS: A00000004 OK LIST completed\r\nC: A00000005 EXAMINE INBOX\r\nS: * 199 EXISTS\r\nS: * 2 RECENT\r\nS: * OK [UIDVALIDITY 1279810762] UID validity status\r\nS: * OK [UIDNEXT 38448] Predicted next UID\r\nS: * FLAGS (\\Answered \\Flagged \\Deleted \\Draft \\Seen)\r\nS: * OK [PERMANENTFLAGS ()] Permanent flags\r\nS: * OK [UNSEEN 198] first unseen message in mailbox\r\nS: A00000005 OK [READ-ONLY] EXAMINE completed\r\nC: A00000006 UID SORT (REVERSE ARRIVAL) US-ASCII ALL\r\nS: * SORT 38447 38446 38445 38444 38443 38442 38441 38440 38439 38438 38437 38436 38435 38434 38433 38432 38431 38430 38429 38428 38427 38426 38425 38424 38423 38422 38421 38420 38419 38418 38417 38416 38415 38414 38413 38412 38411 38410 38409 38408 38407 38406 38405 38404 38403 38402 38401 38400 38399 38398 38397 38396 38395 38394 38393 38392 38391 38390 38389 38388 38387 38386 38385 38384 38383 38382 38381 38380 38379 38378 38377 38376 38375 38374 38373 38372 38371 38370 38369 38368 38367 38366 38365 38364 38363 38362 38361 38360 38359 38358 38357 38356 38355 38354 38353 38352 38351 38350 38349 38348 38347 38346 38345 38344 38343 38342 38341 38340 38339 38338 38337 38336 38335 38334 38333 38332 38331 38330 38329 38328 38327 38326 38325 38324 38323 38322 38321 38320 38319 38318 38317 38316 38315 38314 38313 38312 38311 38310 38309 38308 38307 38306 38305 38304 38303 38302 38301 38300 38299 38298 38297 38296 38295 38294 38293 38292 38291 38290 38289 38288 38287 38286 38285 38284 38283 38282 38281 38280 38279 38278 38277 38276 38275 38274 38273 38272 38271 38270 38269 38268 38267 38266 38265 38264 38263 38262 38261 38260 38259 38258 38257 38256 38255 38254 38253 38252 38251 38250 38249\r\nS: A00000006 OK UID SORT completed\r\nC: A00000007 UID FETCH 38447:38348 BODY.PEEK[HEADER.FIELDS (TO FROM MESSAGE-ID DATE DELIVERY-DATE SUBJECT REFERENCES IN-REPLY-TO)]\r\nS: A00000007 OK UID FETCH completed\r\n</pre>\r\n</details>\r\n\r\n",
    "comments_url": "https://api.github.com/repos/jstedfast/MailKit/issues/907/comments",
    "author": "rgmills",
    "comments": [
      {
        "user": "jstedfast",
        "created_at": "2019-09-10T16:15:00Z",
        "body": "The problem seems to be a bug in your IMAP server which cannot handle UIDs in descending order.\r\n\r\nSolution:\r\n\r\n```csharp\r\nvar uids = folder.Search (SearchQuery.All);\r\nvar results = folder.Fetch (uids, ...);\r\nresults.Sort (new OrderBy[] { OrderBy.ReverseArrival });\r\n```"
      },
      {
        "user": "jstedfast",
        "created_at": "2019-09-10T16:53:29Z",
        "body": "On second thought, what IMAP server is this? Do you have the greeting message from the log file?\r\n\r\nI'm wondering if maybe I can start compiling a list of servers that this doesn't work on and add a work-around for.\r\n"
      },
      {
        "user": "rgmills",
        "created_at": "2019-09-10T17:00:44Z",
        "body": "Unsure who the actual author of the IMAP server software is.\r\n\r\nDoes this give you enough information?  Or do you need the hostnames as well?\r\n\r\n```\r\nS: * OK [CAPABILITY IMAP4REV1 LITERAL+ UTF8=ALL STARTTLS SASL-IR AUTH=LOGIN ID] mail37c25 IMAP4rev1 Bigfoot\r\n```\r\n"
      },
      {
        "user": "jstedfast",
        "created_at": "2019-09-10T17:26:07Z",
        "body": "Thanks! That might be good enough. Perhaps the IMAP server is called Bigfoot. I'll have to do some web searching later to see.\r\n\r\nI generally prefer to try and use the info in the line you gave me than hostnames to do this sort of work-around.\r\n"
      }
    ]
  },
  {
    "number": 899,
    "title": "Attachment file size showing higher than the actual size",
    "created_at": "2019-08-30T15:20:07Z",
    "closed_at": "2019-08-30T16:05:58Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jstedfast/MailKit/issues/899",
    "body": "Hi,\r\nI am trying to check the attachments size before downloading the complete message. For this I have used the MessageSummaryItems.BodyStructure while Fetching the items from inbox. As follows.\r\n\r\n```csharp\r\nvar items = folder.Fetch (ids, MessageSummaryItems.BodyStructure | MessageSummaryItems.UniqueId);\r\nforeach (var item in items) {\r\n    foreach (var attachment in item.Attachments) {\r\n        // 'octets' is just a fancy word for \"number of bytes\"\r\n        var size = attachment.Octets;\r\n\tlog.Info(size);\r\n    }\r\n}\r\n```\r\n\r\nBut, looking at the log, it shows the file size as more than the actual file size. Log comes as follows.\r\n\r\nFound 2 attachments with the mail (UniqueID:5533)\r\nIndividual attachment size for message:5533 is :: 3427408\r\nIndividual attachment size for message:5533 is :: 2875804\r\nTotal size of attachment for message:5533 is 6303212\r\n\r\nBut the actual file size in File Properties shows as 2504642 and 2101546 respectively.\r\n\r\nCan you please help me understand why the size shows more than the actual size when we download it from the email? If this is an expected behavior, is there a way to get the actual file size before downloading the attachments?\r\n\r\nMy requirement is to put a limit on the email attachment size, and ignore those emails if the size is above the limit.",
    "comments_url": "https://api.github.com/repos/jstedfast/MailKit/issues/899/comments",
    "author": "kbchowdary",
    "comments": [
      {
        "user": "jstedfast",
        "created_at": "2019-08-30T16:05:58Z",
        "body": "You're confusing attachment size with file size after decoding the attachment content. They are 2 different things.\r\n\r\nThere's no way to get what the decoded content size will be.\r\n\r\nThe best you can do is approximate it, knowing that if the ContentTransferEncoding is \"base64\", you can multiply it by 0.75, but that doesn't account for the MIME headers nor the fact that base64 content gets line-wrapped.\r\n\r\nThat's about the best you can do."
      }
    ]
  },
  {
    "number": 846,
    "title": "Empty Sender in Envelope object",
    "created_at": "2019-04-15T16:02:28Z",
    "closed_at": "2019-04-15T16:44:14Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jstedfast/MailKit/issues/846",
    "body": "Hi, we have encountered an issue with the reading sender from an envelope in the case when the sender doesn't have a hostname. Sender and From properties are NULL in this case.\r\nHere is an exapmle:\r\n```\r\nC: B00000092 UID FETCH 16855:16880 ENVELOPE\r\nS: * 1 FETCH (ENVELOPE (\"Sat, 6 Apr 2019 06:11:46 +0000\" \"SUBJECT\" ((\"NAME\" NIL NIL \".MISSING-HOST-NAME.\")) ((NIL NIL \"NAME\" \".MISSING-HOST-NAME.\")) NIL ((NIL NIL \"TEST\" \"TEST.COM\")) NIL NIL NIL \"<D5EE6C329218A78D@>\") UID 16855)\r\n```\r\nSender and From headers in such emails have the following values\r\n\r\n```\r\nSender: <NAME>\r\nFrom: NAME\r\n```",
    "comments_url": "https://api.github.com/repos/jstedfast/MailKit/issues/846/comments",
    "author": "SuhovDE",
    "comments": [
      {
        "user": "jstedfast",
        "created_at": "2019-04-15T16:17:38Z",
        "body": "What version are you using? The latest version of MailKit does not set `Envelope.From` or `Envelope.Sender` to `null`.\r\n\r\nInstead, the latest version provides the following results which I would argue is correct:\r\n\r\n1. `Envelope.Sender` is an `InternetAddressList` with a count of 1, where the 1 address is a `MailboxAddress` with an `Address` value of \"NAME\" and the `Name` property is `null` because there is no name.\r\n2. `Envelope.From` is an empty list because all MailboxAddresses *MUST* have a valid `Address` property, so there's no way to represent that."
      },
      {
        "user": "SuhovDE",
        "created_at": "2019-04-16T08:43:30Z",
        "body": "Confirmed. Cannot replicate with version 2.1.4.0.\r\nThe issue was in version 2.1.2.0. \r\nThank you\r\n"
      }
    ]
  },
  {
    "number": 833,
    "title": "SMTP Client - Capture response from successful SendAsync",
    "created_at": "2019-03-20T22:36:26Z",
    "closed_at": "2019-03-21T11:17:37Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jstedfast/MailKit/issues/833",
    "body": "Following successful submission of a message via the SMTP client, I would like the ability to capture the server response for the specific message.\r\n\r\nFor example,  given a successful call\r\n    `await client.SendAsync (message).ConfigureAwait(false);` , \r\n\r\nI would like to capture the server's response, such as\r\n    `250 2.0.0 x2KMTNgW014937 Message accepted for delivery`\r\n\r\nI've seen this as part of the protocol log, but it's only the delivery response that I would like to write to application logs.\r\n\r\n",
    "comments_url": "https://api.github.com/repos/jstedfast/MailKit/issues/833/comments",
    "author": "tvalenta",
    "comments": [
      {
        "user": "jstedfast",
        "created_at": "2019-03-21T11:17:37Z",
        "body": "You should be able to get that string now if you connect to the `MessageSent` event.\r\n\r\nThe `MessageSentEVentArgs.Response` should be the string you are looking for."
      }
    ]
  },
  {
    "number": 757,
    "title": "Not able to read Inbox using IMAP client",
    "created_at": "2018-09-18T10:20:50Z",
    "closed_at": "2018-09-18T11:02:57Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jstedfast/MailKit/issues/757",
    "body": "I want to read emails & download attachments from my mailbox (a govt. provided service) using MailKit IMAP client.\r\n\r\n- What were you trying to do?\r\n  Read emails using IMAP client.\r\n\r\n- What happened?\r\n     Exception at  **inbox.Open(FolderAccess.ReadOnly);**\r\n**(Exception: MailKit.Net.Imap.ImapCommandException: 'The IMAP server replied to the 'EXAMINE' command with a 'BAD' response: Unrecognised option condstore on Examine')**\r\n\r\n- What did you expect to happen?\r\n  Successfully get the Read access for the inbox.\r\n\r\n- Step-by-step reproduction instructions and/or a simple test case.\r\n\r\n```\r\nusing (var client = new ImapClient(new ProtocolLogger(\"E:\\\\imap.log\")))\r\n            {\r\n                // For demo-purposes, accept all SSL certificates\r\n                client.ServerCertificateValidationCallback = (s, c, h, e) => true;\r\n\r\n                client.Connect(\"mail.gov.in\", 993, true);\r\n\r\n                client.Authenticate(\"XYZ@abc.gov.in\", \"password\");\r\n                // The Inbox folder is always available on all IMAP servers...\r\n\r\n                var inbox = client.Inbox;\r\n               \r\n                **inbox.Open(FolderAccess.ReadOnly);** Crashed here\r\n\r\n                Console.WriteLine(\"Total messages: {0}\", inbox.Count);\r\n                Console.WriteLine(\"Recent messages: {0}\", inbox.Recent);\r\n\r\n                for (int i = 0; i < 3; i++)\r\n                {\r\n                    var message = inbox.GetMessage(i);\r\n                    Console.WriteLine(\"Subject: {0}\", message.Subject);\r\n                }\r\n\r\n                client.Disconnect(true);\r\n            }\r\n```\r\nIf you got an exception, please include the exception Message *and* StackTrace.\r\n\r\n**(Exception: MailKit.Net.Imap.ImapCommandException: 'The IMAP server replied to the 'EXAMINE' command with a 'BAD' response: Unrecognised option condstore on Examine')**\r\n\r\nimap protocol log:\r\n\r\nConnected to imaps://mail.gov.in:993/\r\nS: * OK [CAPABILITY IMAP4rev1 UIDPLUS CHILDREN NAMESPACE SORT QUOTA ACL STARTTLS AUTH=PLAIN] Messaging Multiplexor (Oracle Communications Messaging Server 7.0.5.31.0 64bit (built May  5 2014))\r\nC: A00000000 AUTHENTICATE PLAIN\r\nS: + \r\nC: AGNiaW11bWJhaS5sZWdhbEBjYmkuZ292LmluAEFjYkAyMDE3\r\nS: A00000000 OK User XYZ.gov.in logged in\r\nC: A00000001 CAPABILITY\r\nS: * CAPABILITY IMAP4 IMAP4rev1 ACL RIGHTS=tekx QUOTA LITERAL+ NAMESPACE UIDPLUS CHILDREN BINARY UNSELECT SORT CATENATE URLAUTH LANGUAGE ESEARCH ESORT THREAD=ORDEREDSUBJECT THREAD=REFERENCES ENABLE QRESYNC CONTEXT=SEARCH CONTEXT=SORT WITHIN SASL-IR SEARCHRES METADATA ID XSENDER X-SUN-SORT ANNOTATE-EXPERIMENT-1 X-UNAUTHENTICATE X-SUN-IMAP XUM1 IDLE\r\nS: A00000001 OK Completed\r\nC: A00000002 NAMESPACE\r\nS: * NAMESPACE ((\"\" \"/\")) ((\"Shared Folders/User/\" \"/\")) ((\"Shared Folders/Public/\" \"/\"))\r\nS: A00000002 OK Completed\r\nC: A00000003 LIST \"\" \"INBOX\"\r\nS: * LIST (\\NoInferiors) \"/\" INBOX\r\nS: A00000003 OK Completed\r\nC: A00000004 EXAMINE INBOX (CONDSTORE)\r\nS: A00000004 BAD Unrecognised option condstore on Examine\r\n\r\n\r\nPlease help.",
    "comments_url": "https://api.github.com/repos/jstedfast/MailKit/issues/757/comments",
    "author": "iincognitioo",
    "comments": [
      {
        "user": "jstedfast",
        "created_at": "2018-09-18T11:02:57Z",
        "body": "MailKit is using the `(CONDSTORE)` parameter because your IMAP server claims to support the `QRESYNC` extension.\r\n\r\nFrom rfc5162:\r\n\r\n```\r\n   The quick resync IMAP extension is present if an IMAP4 server returns\r\n   \"QRESYNC\" as one of the supported capabilities to the CAPABILITY\r\n   command.\r\n\r\n   Servers supporting this extension MUST implement and advertise\r\n   support for the [ENABLE] IMAP extension.  Also, the presence of the\r\n   \"QRESYNC\" capability implies support for the [CONDSTORE] IMAP\r\n   extension even if the CONDSTORE capability isn't advertised.\r\n```\r\n\r\nAnd from rfc4551:\r\n\r\n```\r\n   A client supporting CONDSTORE extension indicates its willingness to\r\n   receive mod-sequence updates in all untagged FETCH responses by\r\n   issuing:\r\n\r\n      -  a SELECT or EXAMINE command with the CONDSTORE parameter,\r\n      -  a STATUS (HIGHESTMODSEQ) command,\r\n      -  a FETCH or SEARCH command that includes the MODSEQ message data\r\n         item,\r\n      -  a FETCH command with the CHANGEDSINCE modifier, or\r\n      -  a STORE command with the UNCHANGEDSINCE modifier.\r\n```\r\n\r\nSigh. I wish IMAP server developers read and followed the specifications...\r\n\r\nHere's what you can do, since you don't seem to be trying to use the features that CONDSTORE provide:\r\n\r\nAfter authenticating with the IMAP server, add this bit of code:\r\n\r\n```csharp\r\nclient.Capabilities &= ~(ImapCapabilities.QuickResync | ImapCapabilities.CondStore);\r\n```"
      },
      {
        "user": "jstedfast",
        "created_at": "2018-09-18T13:47:44Z",
        "body": "FWIW, any capability advertised by the server can be manually disabled using that trick above.\r\n\r\nGlad it worked for ya :)"
      }
    ]
  },
  {
    "number": 755,
    "title": "ReplyTo is Difficult for me to set",
    "created_at": "2018-09-17T21:41:12Z",
    "closed_at": "2018-09-18T11:07:30Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jstedfast/MailKit/issues/755",
    "body": "**Is your feature request related to a problem? Please describe.**\r\nI'm just wanting to be able to set the reply to property in the MimeMessage so that emails that go out will reply to that property. I can't figure out what I would inherit or use to set this as I've been trying a few things and checking documentation for any answers on how to actually set the property.\r\n\r\n**Describe the solution you'd like**\r\nI can set the to addresses, from addresses, message and body, subject... I'd love to be able to set the reply to property as well or at least know how.\r\n\r\n**Describe alternatives you've considered**\r\nTrying to implement and change the code myself. I'm somewhat new at this so I need documentation that tells me how I would set properties like this with only a getter or at least how they were intended to be used and why I can't set them like other properties that I can set.\r\n\r\n**Additional context**\r\nIf there's anything that helps me set this then please refer me and I would really appreciate it.\r\n",
    "comments_url": "https://api.github.com/repos/jstedfast/MailKit/issues/755/comments",
    "author": "DanJ210",
    "comments": [
      {
        "user": "jstedfast",
        "created_at": "2018-09-18T11:07:30Z",
        "body": "`MimeMessage.ReplyTo` does not have a setter - the way you add ReplyTo addresses is to add them to the existing `MimeMessage.ReplyTo` list. It works exactly the same way as the `From`, `To`, `Cc`, and `Bcc` properties.\r\n\r\nExample:\r\n\r\n```csharp\r\nvar message = new MimeMessage ();\r\nmessage.ReplyTo.Add (new MailboxAddress (\"My Name\", \"my@address.com\"));\r\n```\r\n"
      },
      {
        "user": "chartierpw",
        "created_at": "2023-03-19T23:39:21Z",
        "body": "I just installed the latest version of Mailkit/Mimekit (3.6.0/3.6.1) and apparently we are still unable to set the reply to address.  This was supposed to be fixed 4+ years ago, no?  I need to be able to set the reply to address, not being able to do this makes Mailkit/Mimekit useless to me.  Is that change going to be made anytime soon?\r\n\r\nR/\r\nPrescott ...."
      },
      {
        "user": "jstedfast",
        "created_at": "2023-03-20T02:26:03Z",
        "body": "You set the Reply-To addresses like this:\n\n    message.ReplyTo.Add(new MailboxAddress(\"name\", \"user@domain.com\"));"
      }
    ]
  },
  {
    "number": 682,
    "title": "Get the top EMAIL unique id",
    "created_at": "2018-03-21T22:13:37Z",
    "closed_at": "2018-03-22T16:40:52Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jstedfast/MailKit/issues/682",
    "body": "My inbox email count is 2035, but my last(top/newest) email's  unique id is 2110..Is there a way to get the top/last/newest email's uid without retrieveing the entire folder ? ",
    "comments_url": "https://api.github.com/repos/jstedfast/MailKit/issues/682/comments",
    "author": "arn3342",
    "comments": [
      {
        "user": "ekalchev",
        "created_at": "2018-03-22T09:33:26Z",
        "body": "Try this\r\n\r\nimapFolder.Fetch(imapFolder.Count, -1...\r\nor\r\nimapFolder.Fetch(imapFolder.Count - 1, -1..."
      },
      {
        "user": "arn3342",
        "created_at": "2018-03-22T12:16:14Z",
        "body": "i tried it as follows\r\n\r\nvar summury = folder.fetch(folder.count - 1, -1, MessageSummaryItems.FUll);\r\n    foreach (var sum in summary)\r\n    {\r\n    }\r\n\r\nBut it doesnt work :( It returns 0\r\n"
      },
      {
        "user": "arn3342",
        "created_at": "2018-03-22T13:13:06Z",
        "body": "Ok i got that to work a bit but it returns 3709 whereas my last mai id is 3801 ... why ??"
      },
      {
        "user": "jstedfast",
        "created_at": "2018-03-22T16:40:52Z",
        "body": "If all you want is the UID of the most recent message in the folder, there's a few ways to do that.\r\n\r\nAs @ekalchev illustrated, you can do that using the Fetch() method:\r\n\r\n```csharp\r\nvar summary = folder.Fetch (folder.Count - 1, folder.Count - 1, MessageSummaryItems.UniqueId).FirstOrDefault ();\r\nvar latestUid = summary != null ? summary.UniqueId : UniqueId.Invalid;\r\n```\r\n\r\nNote above that you need to pass `MessageSummaryItems.UniqueId` to the Fetch() method.\r\n\r\nAnother way is to use the Search() method:\r\n\r\n```csharp\r\nvar all = folder.Search (SearchQuery.All);\r\nvar latestUid = all[all.Count - 1];\r\n```\r\n\r\nIf your server supports `ImapCapabilities.SearchResults`, you can use the following approach:\r\n\r\n```csharp\r\nvar results = folder.Search (SearchOptions.Max, SearchQuery.All);\r\nvar latestUid = results.Max.Value;\r\n```\r\n\r\nMy recommendation would be to use the Fetch() method as I think it'll be cheaper for the server to calculate *and* return a minimum amount of data over the network connection (technically, the SearchResults option is less network traffic, but fewer servers will support this feature and the ones that do might not implement it as efficiently as it could be done).\r\n\r\nThe one caveat with the Fetch() approach is that another client could delete that last message before you get a chance to make that Fetch query, so you'll need to handle cases where it returns nothing."
      }
    ]
  },
  {
    "number": 656,
    "title": "IMAP /SMTP client connection is very slow",
    "created_at": "2018-02-28T06:59:05Z",
    "closed_at": "2018-02-28T11:56:41Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jstedfast/MailKit/issues/656",
    "body": "Yo Jeff,\r\nI'm using your library and loved this...\r\n\r\nNow, I'm facing an issue regarding speed. [ in backend, I'm creating new ImapClient on each operation on server in \"using\" code block  (`using (var client = new ImapClient() { client.connect() })`)]\r\nImap or Smtp client creation and connection with server (using email, password, incoming/outgoing server with ports) and FOLDER opening (by `client.GetFolder()` ) takes much time and makes the overall process much slower.\r\n\r\nIs there a way to speed this up? or any valuable suggestions are highly appreciated.\r\nThank you so much!",
    "comments_url": "https://api.github.com/repos/jstedfast/MailKit/issues/656/comments",
    "author": "officialrizwanali",
    "comments": [
      {
        "user": "jstedfast",
        "created_at": "2018-02-28T11:56:40Z",
        "body": "I would recommend keeping the ImapClient reference and not disposing it after each minor usage.\r\n\r\nMost likely this will mean you'll have to stop using it in a `using` statement and instead have some sort of application-level reference to the ImapClient so that you can reuse them over and over again.\r\n\r\nYou will also need to keep the connection alive by invoking client.NoOp() every once in a while (I would recommend calling NoOp() every 5-10 minutes or so).\r\n\r\nFor SMTP, I would recommend queueing a bunch of messages to send and then sending all of them like this:\r\n\r\n```csharp\r\nusing (var client = new SmtpClient ()) {\r\n    client.Connect (.....);\r\n    client.Authenticate (....);\r\n\r\n    for (int i = 0; i < messages.Count; i++)\r\n        client.Send (messages[i]);\r\n\r\n    client.Disconnect (true);\r\n}\r\n```\r\n"
      },
      {
        "user": "officialrizwanali",
        "created_at": "2018-03-01T05:44:00Z",
        "body": "Thank you, got your point.\r\nAnother angle to apply your proposed solution is to apply lazy loading (means when the client is not connected, connect it immediately, else return client)\r\nJust a lil thing to ask more, In my scenario, a user can have multiple accounts even more than 10. How should I maintain clients for multiple accounts (user is free to do any operation on any connected account, e.g. MarkRead on Acc1, Compose in Acc2, Sync in Acc3, all in a go, etc)\r\n\r\nAny better technique to manage alive ImapClient /SMTP client?"
      },
      {
        "user": "jstedfast",
        "created_at": "2018-03-01T14:50:11Z",
        "body": "Have an Account object which stores an SmtpClient and an ImapClient that you can easily look up based on account name or email address or something.\r\n"
      }
    ]
  },
  {
    "number": 635,
    "title": "NotSupportedException: No compatible authentication mechanisms found",
    "created_at": "2018-01-17T09:11:09Z",
    "closed_at": "2018-01-17T15:54:48Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jstedfast/MailKit/issues/635",
    "body": "Hello,\r\nI was using MailKit 1.4.0 and my code worked fine:\r\n```csharp\r\n            using (var smtpClient = new SmtpClient())\r\n            {\r\n                await smtpClient.ConnectAsync(_configuration.SmtpServer, _configuration.SmtpPort);\r\n                await smtpClient.AuthenticateAsync(_configuration.SmtpUsername, _configuration.SmtpPassword);\r\n\r\n                await smtpClient.SendAsync(message);\r\n                await smtpClient.DisconnectAsync(true);\r\n\r\n            }\r\n```\r\nNow I want to upgrade to MailKit 2.0.1 and I've got an NotSupportedExcetion:\r\n```\r\nNotSupportedException: No compatible authentication mechanisms found.\r\nMailKit.Net.Smtp.SmtpClient+<AuthenticateAsync>d__64.MoveNext()\r\n\r\n\r\nMailKit.Net.Smtp.SmtpClient+<AuthenticateAsync>d__64.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nSSO.Core.Mail.Service.EmailService+<SendAsync>d__2.MoveNext() in EmailService.cs\r\n+\r\n                await smtpClient.AuthenticateAsync(_configuration.SmtpUsername, _configuration.SmtpPassword);\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nSSOLocalWeb.Controllers.AccountController+<ForgotPassword>d__11.MoveNext() in AccountController.cs\r\n+\r\n            await emailService.SendAsync(emailMessage);\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nSystem.Runtime.CompilerServices.TaskAwaiter.GetResult()\r\nMicrosoft.AspNetCore.Mvc.Internal.ControllerActionInvoker+<InvokeActionMethodAsync>d__12.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nMicrosoft.AspNetCore.Mvc.Internal.ControllerActionInvoker+<InvokeNextActionFilterAsync>d__10.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nMicrosoft.AspNetCore.Mvc.Internal.ControllerActionInvoker.Rethrow(ActionExecutedContext context)\r\nMicrosoft.AspNetCore.Mvc.Internal.ControllerActionInvoker.Next(ref State next, ref Scope scope, ref object state, ref bool isCompleted)\r\nMicrosoft.AspNetCore.Mvc.Internal.ControllerActionInvoker+<InvokeInnerFilterAsync>d__14.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nMicrosoft.AspNetCore.Mvc.Internal.ResourceInvoker+<InvokeNextResourceFilter>d__22.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nMicrosoft.AspNetCore.Mvc.Internal.ResourceInvoker.Rethrow(ResourceExecutedContext context)\r\nMicrosoft.AspNetCore.Mvc.Internal.ResourceInvoker.Next(ref State next, ref Scope scope, ref object state, ref bool isCompleted)\r\nMicrosoft.AspNetCore.Mvc.Internal.ResourceInvoker+<InvokeFilterPipelineAsync>d__17.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nMicrosoft.AspNetCore.Mvc.Internal.ResourceInvoker+<InvokeAsync>d__15.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nMicrosoft.AspNetCore.Builder.RouterMiddleware+<Invoke>d__4.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nMicrosoft.AspNetCore.Authentication.AuthenticationMiddleware+<Invoke>d__6.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nMicrosoft.AspNetCore.Session.SessionMiddleware+<Invoke>d__9.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nMicrosoft.AspNetCore.Session.SessionMiddleware+<Invoke>d__9.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nMicrosoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware+<Invoke>d__7.MoveNext()\r\n```\r\n\r\nI've sent you a protocol log at your email\r\njestedfa@microsoft.com instead of including it in the GitHub issue.\r\n",
    "comments_url": "https://api.github.com/repos/jstedfast/MailKit/issues/635/comments",
    "author": "sheenm",
    "comments": [
      {
        "user": "jstedfast",
        "created_at": "2018-01-17T15:54:48Z",
        "body": "Ok, so the problem is that NTLM has been disabled as one of the default SASL mechanisms to try automatically. This is because I got too many bug reports of NTLM not working (altho it obviously worked for you) and because when NTLM fails, some servers do not allow fallback to other mechanisms.\r\n\r\nIn MailKit 2.0.1, you can use the following code to login via NTLM:\r\n\r\n```csharp\r\nvar ntlm = new SaslMechanismNtlm (\"username\", \"password\");\r\nclient.Authenticate (ntlm);\r\n```\r\n\r\nHope that helps!\r\n\r\n(I may reconsider adding it back to the list of default auth mechanisms to try now that I know it works at least for some people)"
      },
      {
        "user": "OzBob",
        "created_at": "2023-01-24T03:07:18Z",
        "body": "For others with the same error message connecting to m365 on Port 25, changing to port 587 removed that error."
      }
    ]
  },
  {
    "number": 626,
    "title": "Failure sending multiple simultaneous emails",
    "created_at": "2018-01-12T18:16:25Z",
    "closed_at": "2018-01-12T18:51:00Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jstedfast/MailKit/issues/626",
    "body": "After upgrading our solution from MailKit 1.x version to 2.0.1 version, we have started to experience errors whenever we attempt to send e-mails on multiple threads at the same time.\r\n\r\nWe receive one of the two following errors:\r\n\r\n> Error reading a response from the SMTP server. => Cannot access a disposed object.\r\n> Object name: 'SslStream'.\r\n\r\n> Error reading a response from the SMTP server. =>  The BeginRead method cannot be called when another read operation is pending.\r\n\r\nIs there any reference on how to properly use new asynchronous APIs?\r\n\r\nThis is code sample from our app:\r\n\r\n    public class MailerProcess\r\n    {\r\n        public static void Run()\r\n        {\r\n             using (SmtpClient client = new SmtpClient())\r\n             {\r\n                   string host = AppSettingsWrapper.Host;\r\n                   string port = AppSettingsWrapper.Port.ToString();\r\n\r\n                   client.Connect(AppSettingsWrapper.Host, AppSettingsWrapper.Port, SecureSocketOptions.Auto);\r\n                   client.Authenticate(AppSettingsWrapper.UserName, AppSettingsWrapper.Password);\r\n                   client.Timeout = AppSettingsWrapper.Timeout;\r\n\r\n \t           List<Task> taskList = new List<Task>();\r\n \r\n                   foreach (MailerJob job in batch)\r\n                   {\r\n                        taskList.Add(SendAsync(client, fm, job.Email));\r\n                   }\r\n\r\n                   Task.WhenAll(taskList).Wait();\r\n\r\n                   if(client.IsConnected)\r\n                   {\r\n                        client.Disconnect(true);\r\n                   }\r\n              }\r\n        }\r\n\r\n        private static async Task SendAsync(SmtpClient client, IFileManager fm, Email email)\r\n        {\r\n            try\r\n            {\r\n                MimeMessage message = new MimeMessage();\r\n\r\n                MailboxAddress from = new MailboxAddress(email.Content.FromDisplayName, email.Content.FromAddress);\r\n                MailboxAddress to = new MailboxAddress(email.Content.ToDisplayName, email.Content.ToAddress);\r\n                message.From.Add(from);\r\n                message.To.Add(to);\r\n\r\n                message.Subject = email.Content.Subject;\r\n\r\n                BodyBuilder bodyBuilder = new BodyBuilder();\r\n                if (email.Content.IsHtmlContent)\r\n                {\r\n                    bodyBuilder.HtmlBody = email.Content.Body;\r\n                }\r\n                else\r\n                {\r\n                    bodyBuilder.TextBody = email.Content.Body;\r\n                }\r\n\r\n                message.Body = bodyBuilder.ToMessageBody();\r\n\r\n                if (client.IsConnected)\r\n                {\r\n                    await client.SendAsync(message);\r\n                }\r\n                return;\r\n            }\r\n            catch (SmtpCommandException se)\r\n            {\r\n                email.StatusMessage = se.Message;\r\n                email.StatusCode = (int)se.StatusCode;\r\n            }\r\n            catch (Exception e)\r\n            {\r\n                email.StatusMessage = e.RecursiveMessage();\r\n            }\r\n        }\r\n    }\r\n\r\nRun method is invoked from .NET Core 2.0 console application.\r\n",
    "comments_url": "https://api.github.com/repos/jstedfast/MailKit/issues/626/comments",
    "author": "atuzovic",
    "comments": [
      {
        "user": "jstedfast",
        "created_at": "2018-01-12T18:51:00Z",
        "body": "What you want to do is use:\r\n\r\n```csharp\r\nlock (client.SyncRoot) {\r\n     await client.SendAsync (message);\r\n}\r\n```\r\n\r\nHope that helps."
      },
      {
        "user": "jstedfast",
        "created_at": "2018-01-12T19:40:49Z",
        "body": "Yes, that's exactly the point of it :)\r\n\r\nYou can't send multiple messages over the same socket in parallel."
      },
      {
        "user": "jstedfast",
        "created_at": "2018-01-12T21:27:05Z",
        "body": "Correct."
      },
      {
        "user": "NickSpag",
        "created_at": "2018-01-15T21:22:40Z",
        "body": "Looks like calling await in a lock is illegal? I'm running in to this while trying to optimize a Xamarin.Mac client's full inbox sync. \r\n\r\nI have parallel Tasks (think Task.WhenAll/Any) that do the full processing of a message, and I'm having a hard time determining if the best route is using a shared Semaphore or something like it for the core GetStreamAsync call of each individual message request, or if I should create a handful of ImapClients that each handle a batch of requests synchronously, or a combination of the two. Is the overhead of connecting/authenticating an ImapClient connection worth something like that? \r\n\r\nApologies if this should be its own issue in stackoverflow or some other channel. Thank you for the library!\r\n\r\nedit: I've played around a bit with doing a first pass that gets the text summary, for the purposes of the summary in an inbox list. so far creating the message from a summary envelope and making one GetStreamAsync call, the core of which is throttled by a single-thread SemaphoreSlim, is pretty quick. We'll see if that holds going forward. Planning on a second pass of the messages in the background that would download/cleanse the html part for local persistence and to help with display. "
      }
    ]
  },
  {
    "number": 613,
    "title": "The ImapClient is currently busy processing a command in another thread",
    "created_at": "2017-12-30T06:19:05Z",
    "closed_at": "2017-12-30T13:28:56Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jstedfast/MailKit/issues/613",
    "body": "- **What were you trying to do?**\r\nPreviously in 1.22.0, I was successfully able to listen for notifications without using IDLE and just NoOp. When an event is triggered, I would search the Inbox for any unseen items (if there were any) and if there were new items, it would parse the new messages.\r\n\r\n- **What happened?**\r\nAfter updating to 2.0.0\r\nWhen attempting to Fetch the items in the Inbox, I am getting the following message \r\n\r\n> _The ImapClient is currently busy processing a command in another thread. Lock the SyncRoot property to properly synchronize your threads._\r\n\r\nThis message occurs at the following commands under the EventHandler.\r\n\r\n```csharp\r\npublic static async void OnMessageFlagsChanged(object sender, MessageFlagsChangedEventArgs e)\r\n{\r\n        var folder = (ImapFolder)sender;\r\n            \r\n        IList<IMessageSummary> summaries;\r\n        var query = SearchQuery.SubjectContains(\"New message\").And(SearchQuery.NotSeen);\r\n        var uids = await folder.SearchAsync(query); // <-- This is where it breaks\r\n```\r\n\r\nOddly enough, I downgraded back to 1.22.0, and my issue went away, and everything works as I had expected.\r\n\r\n> Connected to imaps://outlook.office365.com:993/\r\nS: * OK The Microsoft Exchange IMAP4 service is ready. [RABNADUAUABSADIAMQBDAEEAMAAwADIAMgAuAG4AYQBtAHAAcgBkADIAMQAuAHAAcgBvAGQALgBvAHUAdABsAG8AbwBrAC4AYwBvAG0A]\r\nC: A00000000 CAPABILITY\r\nS: * CAPABILITY IMAP4 IMAP4rev1 AUTH=PLAIN AUTH=XOAUTH2 SASL-IR UIDPLUS ID UNSELECT CHILDREN IDLE NAMESPACE LITERAL+\r\nS: A00000000 OK CAPABILITY completed.\r\nC: A00000001 AUTHENTICATE PLAIN AGpmZWxwc0BpbnRlZ3JpdGVsLnVzXHRyYW5zY3JpYmUAQjV1elU5cmU=\r\nS: A00000001 NO AUTHENTICATE failed.\r\nC: A00000002 LOGIN **[INFO REMOVED]**\r\nS: A00000002 OK LOGIN completed.\r\nC: A00000003 CAPABILITY\r\nS: * CAPABILITY IMAP4 IMAP4rev1 AUTH=PLAIN AUTH=XOAUTH2 SASL-IR UIDPLUS MOVE ID UNSELECT CLIENTACCESSRULES CLIENTNETWORKPRESENCELOCATION BACKENDAUTHENTICATE CHILDREN IDLE NAMESPACE LITERAL+\r\nS: A00000003 OK CAPABILITY completed.\r\nC: A00000004 NAMESPACE\r\nS: * NAMESPACE ((\"\" \"/\")) NIL NIL\r\nS: A00000004 OK NAMESPACE completed.\r\nC: A00000005 LIST \"\" \"INBOX\"\r\nS: * LIST (\\Marked \\HasNoChildren) \"/\" INBOX\r\nS: A00000005 OK LIST completed.\r\nC: A00000006 SELECT INBOX\r\nS: * 16 EXISTS\r\nS: * 0 RECENT\r\nS: * FLAGS (\\Seen \\Answered \\Flagged \\Deleted \\Draft $MDNSent)\r\nS: * OK [PERMANENTFLAGS (\\Seen \\Answered \\Flagged \\Deleted \\Draft $MDNSent)] Permanent flags\r\nS: * OK [UIDVALIDITY 14] UIDVALIDITY value\r\nS: * OK [UIDNEXT 114] The next unique identifier value\r\nS: A00000006 OK [READ-WRITE] SELECT completed.\r\nC: A00000007 UID SEARCH SUBJECT \"New message\" UNSEEN\r\nS: * SEARCH\r\nS: A00000007 OK SEARCH completed.\r\nC: A00000008 FETCH 1:* (UID FLAGS INTERNALDATE RFC822.SIZE ENVELOPE BODY)\r\nS: * 1 FETCH (UID 65 FLAGS (\\Seen) INTERNALDATE \"19-Dec-2017 15:55:05 +0000\" **[INFO REMOVED]**\r\nS: A00000008 OK FETCH completed.\r\nC: A00000009 NOOP\r\nS: A00000009 OK NOOP completed.\r\nC: A00000010 NOOP\r\nS: * 16 FETCH (FLAGS ())\r\nS: A00000010 OK NOOP completed.\r\n\r\n> \"   at MailKit.Net.Imap.ImapEngine.QueueCommand(ImapCommand ic)\r\n   at MailKit.Net.Imap.ImapFolder.<SearchAsync>d__323.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter`1.GetResult()\r\n   at Voicemail_Transcription.EventHandlers.<OnCountChanged>d__1.MoveNext() in C:\\\\Users\\\\jfelps\\\\Documents\\\\Visual Studio 2017\\\\Projects\\\\Voicemail Transcription\\\\Voicemail Transcription\\\\EventHandlers.cs:line 29\"\r\n\r\n> Exception thrown: 'System.InvalidOperationException' in mscorlib.dll\r\nThe ImapClient is currently busy processing a command in another thread. Lock the SyncRoot property to properly synchronize your threads.\r\n\r\nPlease let me know if there is anything more that I need to provide. I have no problem providing my code through email preferably.\r\n",
    "comments_url": "https://api.github.com/repos/jstedfast/MailKit/issues/613/comments",
    "author": "Ceus",
    "comments": [
      {
        "user": "jstedfast",
        "created_at": "2017-12-30T13:28:56Z",
        "body": "I think you just got lucky with 1.22.\r\n\r\nThe problem is that the ImapClient is not re-entrant. In other words, you cannot send another command while an existing command is currently being processed.\r\n\r\nIn your case, the NOOP command is still being processed when the event is triggered.\r\n\r\nMailKit does not wait for the entire server response to be read before it begins parsing the response and emitting events. Instead, it processes the response as it receives it.\r\n\r\nThe Good:\r\n\r\n1. You get events in real-time.\r\n2. The client doesn't need to read a potentially massive amount of data into RAM first, before processing (thereby taking up huge amounts of resources).\r\n\r\nThe Bad:\r\n\r\n1. Can't send more commands in an event handler.\r\n\r\nThe Solution:\r\n\r\nIn your event handlers, queue your next command(s) to be executed once the existing command completes."
      },
      {
        "user": "jstedfast",
        "created_at": "2017-12-30T13:30:29Z",
        "body": "Ah, wait, the reason it worked in 1.22 was because 1.22 used Task.Run() and locked the SyncRoot itself in the Async() methods.\r\n\r\nNow that 2.0 is fully async, I can't easily do locking around the sync call like in 1.22."
      },
      {
        "user": "jstedfast",
        "created_at": "2017-12-30T13:33:56Z",
        "body": "In other words, this is what 1.22 does:\r\n\r\n```csharp\r\npublic Task<T> DoSomethingAsync ()\r\n{\r\n    return Task.Run (() => {\r\n        lock (SyncRoot) {\r\n            return DoSomething ();\r\n        }\r\n    });\r\n}\r\n```"
      },
      {
        "user": "jstedfast",
        "created_at": "2017-12-30T14:20:11Z",
        "body": "I would love for this to work, but I don't think it's possible without moving the ImapEngine's runloop into another thread which I really don't want to do (because it makes things a lot more complex)."
      },
      {
        "user": "Ceus",
        "created_at": "2018-01-07T01:33:58Z",
        "body": "Dang! So, my next update will need to be to Queue the commands that are being called during the Event Handler? I don't have a problem with doing this, I am just unsure about how to go about doing this. Any insight you can give me here?\r\n\r\nI am sorry I am just now seeing this. I don't think I got a notification. Thank you for your assistance!"
      },
      {
        "user": "jstedfast",
        "created_at": "2018-01-07T02:05:19Z",
        "body": "MailKit doesn't provide a command queue that you can use, you'll have to do that yourself.\r\n\r\nWhat you could do is have a `ConcurrentQueue<Action>` or something which your main program's main loop will pop and execute.\r\n"
      },
      {
        "user": "jstedfast",
        "created_at": "2018-01-07T02:15:03Z",
        "body": "Another option is to do something like this:\r\n\r\n```csharp\r\nvoid OnMessageFlagsChanged (object sender, MessageFlagsChangedEventArgs e)\r\n{\r\n    this.flags_changed = true;\r\n}\r\n```\r\n\r\nAnd then, in your NOOP logic:\r\n\r\n```csharp\r\nawait client.NoOpAsync ();\r\nif (this.flags_changed) {\r\n    var query = SearchQuery.SubjectContains(\"New message\").And(SearchQuery.NotSeen);\r\n    var uids = await folder.SearchAsync(query);\r\n}\r\n```\r\n\r\nThat said, I'm not sure why you're using the MessageFlagsChanged event for checking for new mail... MessageFlagsChanged is only emitted when the flags on an existing message change.\r\n\r\nYou want CountChanged if you expect it to mean the potential for new mail to have arrived."
      },
      {
        "user": "Ceus",
        "created_at": "2018-01-07T03:14:52Z",
        "body": "It appears that this resolved my issue. And I apologize, I didn't see the last bit of your message.\r\n\r\nI am building a transcription service and I wanted the ability to mark an email as unread and for the email to act as normal. I don't actually care about how many messages are in the inbox or anything, just what happens to the new messages that come in or messages that I mark as unread."
      },
      {
        "user": "jstedfast",
        "created_at": "2018-01-07T13:07:54Z",
        "body": "Ah, ok. FWIW, the MessageFlagsChangedEventArgs argument provides information about the index of the message (sadly not the UID since the server does not provide that info) as well as what the new flags for the message are.\r\n\r\nUsing that info to keep track of state would be cheaper than doing a Search().\r\n\r\nFor example:\r\n\r\n```csharp\r\nclass MyMessageInfo\r\n{\r\n    public UniqueId UniqueId;\r\n    public MessageFlags Flags;\r\n\r\n    public MyMessageInfo (UniqueId uid, MessageFLags flags)\r\n    {\r\n        UniqueId = uid;\r\n        Flags = flags;\r\n    }\r\n}\r\n```\r\n\r\n```csharp\r\n// after connecting and opening the folder you are interested in tracking, connect to some events so we can track the state of the server:\r\nfolder.CountChanged += OnCountChanged;\r\nfolder.MessageExpunged += OnMessageExpunged;\r\nfolder.MessageFlagsChanged += OnMessageFlagsChanged;\r\n\r\n// now collect the list of message UIDs and their associated Flags:\r\nthis.messages = folder.Fetch (0, -1, MessageSummaryItems.UniqueId | MessageSummaryItems.Flags | OtherItemsYouCareAbout).Select (x => new MyMessageInfo (x.UniqueId, x.Flags).ToList ();\r\n\r\n// .. some time passes, invoke NoOp:\r\nclient.NoOp ();\r\n\r\nif (this.new_messages) {\r\n    this.new_messages = false;\r\n\r\n    var new_messages = folder.Fetch (this.messages.Count, -1, MessageSummaryItems.UniqueId | MessageSummaryItems.Flags | OtherItemsYouCareAbout).Select (x => new MyMessageInfo (x.UniqueId, x.Flags);\r\n\r\n    this.messages.AddRange (new_messages);\r\n}\r\n```\r\n\r\nThen, in your event handlers, you might have code that looks like this:\r\n\r\n```csharp\r\nvoid OnMessageExpunged (object sender, MessageEventArgs e)\r\n{\r\n    // update our list of messages by removing the index of the message that just got expunged\r\n    this.messages.RemoveAt (e.Index);\r\n}\r\n\r\nvoid OnMessageFLagsChanged (object sender, MessageFlagsChangedEventArgs e)\r\n{\r\n    // update the flags for the message at the specified index\r\n    this.messages[e.Index].Flags = e.Flags;\r\n}\r\n\r\nvoid OnCountChanged (object sender, EventArgs e)\r\n{\r\n    var folder = (ImapFolder) sender;\r\n\r\n    // folder.Count will either be exactly the same as this.messages.Count\r\n    // -or-\r\n    // it will be larger if new messages have arrived\r\n    this.new_messages = folder.Count > messages.Count;\r\n}\r\n```\r\n\r\nNow you can stay in sync with the server and not have to constantly re-Search."
      },
      {
        "user": "dorin7bogdan",
        "created_at": "2019-03-20T17:23:53Z",
        "body": "Hi,\r\n\r\nFrom time to time, while trying to disconnect the ImapClient, I get the following exception:\r\n\r\n`[InvalidOperationException:The ImapClient is currently busy processing a command in another thread. Lock the SyncRoot property to properly synchronize your threads.]<br/> MailKit.Net.Imap.&lt;IterateAsync&gt;d__170.MoveNext() + 435<br/> System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task) + 144<br/> System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task) + 84<br/> MailKit.Net.Imap.&lt;RunAsync&gt;d__171.MoveNext() + 530<br/> System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task) + 144<br/> System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task) + 84<br/> MailKit.Net.Imap.&lt;DisconnectAsync&gt;d__95.MoveNext() + 676<br/> System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task) + 144<br/> System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task) + 84<br/> MailKit.Net.Imap.ImapClient.Disconnect(Boolean quit,CancellationToken cancellationToken) + 501<br/> HS.WinService.Configuration.CustomerEmailAccount.LogoutAndDisconnect() + 182`\r\n\r\nI apologize for missing the protocol details, since the problem occurs in the release version.\r\n\r\nBefore trying to disconnect, we try to stop the idling thread.\r\n```C#\r\n        public void LogoutAndDisconnect()\r\n        {\r\n            try\r\n            {\r\n                if (IsAuthenticated)\r\n                    StopIdling();\r\n\r\n                if (IsConnected)\r\n                    _client.Disconnect(true);\r\n                _client = null;\r\n                _inboxFolder = _processedFolder = _unprocessedFolder = null;\r\n            }\r\n            catch (Exception ex)\r\n            {\r\n                EventLogManager.Instance.WriteEntry(EventLogType.Error, ex, string.Format(UNEXPECTED_ERROR, MethodBase.GetCurrentMethod().Name, ChannelCode, InboxFolderName, ex.Message));\r\n            }\r\n        }\r\n        public void ConnectAndLogin()\r\n        {\r\n            if (_client == null)\r\n            {\r\n#if DEBUG\r\n                _client = new ImapClient(new ProtocolLogger(Console.OpenStandardError()));\r\n#else\r\n                _client = new ImapClient();\r\n#endif\r\n                _client.ServerCertificateValidationCallback = delegate { return true; };\r\n            }\r\n\r\n            try\r\n            {\r\n                var ok = TryConnectAndLogin();\r\n                if (!ok)\r\n                {\r\n                    EventLogManager.Instance.WriteEntry(EventLogType.Error, string.Format(LOGIN_FAILED, Username, ChannelCode));\r\n                    LogoutAndDisconnect();\r\n                }\r\n            }\r\n            catch (Exception ex)\r\n            {\r\n                var err = string.Format(UNEXPECTED_ERROR, MethodBase.GetCurrentMethod().Name, ChannelCode, InboxFolderName, ex.Message);\r\n                EventLogManager.Instance.WriteEntry(EventLogType.Error, ex, err);\r\n                LogoutAndDisconnect();\r\n            }\r\n        }\r\n        public void StopIdling()\r\n        {\r\n            lock (_syncRoot)\r\n            {\r\n                try\r\n                {\r\n                    if (_isIdle && _done?.IsCancellationRequested != true)\r\n                    {\r\n                        _done.Cancel();\r\n                        _done.Dispose();\r\n                    }\r\n                    // if the thread doesn't end in 30 seconds, then abort it\r\n                    _thread?.Join(30 * 100);\r\n                    if (_thread?.IsAlive == true)\r\n                        _thread.Abort();\r\n                    _thread = null;\r\n                }\r\n                catch (Exception ex)\r\n                {\r\n                    EventLogManager.Instance.WriteEntry(EventLogType.Error, ex, string.Format(UNEXPECTED_ERROR, MethodBase.GetCurrentMethod().Name, ChannelCode, InboxFolderName, ex.Message));\r\n                }\r\n            }\r\n        }\r\n        public void StartIdling(bool connectAndLogin = true)\r\n        {\r\n            lock (_syncRoot)\r\n            {\r\n                if (connectAndLogin)\r\n                    ConnectAndLogin();\r\n                if (IsConnected && IsAuthenticated && !_isIdle)\r\n                {\r\n                    if (InboxFolder == null) // we check the property here, not the field, in order to initialize it if necessary !\r\n                        return;\r\n\r\n                    if (!_inboxFolder.IsOpen)\r\n                    {\r\n                        _inboxFolder.CountChanged -= Folder_CountChanged;\r\n                        _inboxFolder.Open(FolderAccess.ReadWrite);\r\n                        _inboxFolder.CountChanged += Folder_CountChanged;\r\n                    }\r\n\r\n                    _done = new CancellationTokenSource();\r\n                    _thread = new Thread(IdleLoop);\r\n                    _thread.Start(new IdleState(_client, _done.Token));\r\n\r\n                    // the server should answer with \"IDLE accepted, awaiting DONE command\", so we give it max 10 seconds for safety \r\n                    SpinWait.SpinUntil(() => _isIdle, 10 * 1000);\r\n                }\r\n            }\r\n        }\r\n```\r\nWe use the IdleState and IdleLoop taken from your sample ImapIdle.sln:\r\n```C#\r\n        #region - IdleState and IdleLoop\r\n        private class IdleState\r\n        {\r\n            readonly object mutex = new object();\r\n            CancellationTokenSource timeout;\r\n\r\n            /// <summary>\r\n            /// Get the cancellation token.\r\n            /// </summary>\r\n            /// <remarks>\r\n            /// <para>The cancellation token is the brute-force approach to cancelling the IDLE and/or NOOP command.</para>\r\n            /// <para>Using the cancellation token will typically drop the connection to the server and so should\r\n            /// not be used unless the client is in the process of shutting down or otherwise needs to\r\n            /// immediately abort communication with the server.</para>\r\n            /// </remarks>\r\n            /// <value>The cancellation token.</value>\r\n            public CancellationToken CancellationToken { get; private set; }\r\n\r\n            /// <summary>\r\n            /// Get the done token.\r\n            /// </summary>\r\n            /// <remarks>\r\n            /// <para>The done token tells the <see cref=\"Program.IdleLoop\"/> that the user has requested to end the loop.</para>\r\n            /// <para>When the done token is cancelled, the <see cref=\"Program.IdleLoop\"/> will gracefully come to an end by\r\n            /// cancelling the timeout and then breaking out of the loop.</para>\r\n            /// </remarks>\r\n            /// <value>The done token.</value>\r\n            public CancellationToken DoneToken { get; private set; }\r\n\r\n            /// <summary>\r\n            /// Get the IMAP client.\r\n            /// </summary>\r\n            /// <value>The IMAP client.</value>\r\n            public ImapClient Client { get; private set; }\r\n\r\n            /// <summary>\r\n            /// Check whether or not either of the CancellationToken's have been cancelled.\r\n            /// </summary>\r\n            /// <value><c>true</c> if cancellation was requested; otherwise, <c>false</c>.</value>\r\n            public bool IsCancellationRequested\r\n            {\r\n                get\r\n                {\r\n                    return CancellationToken.IsCancellationRequested || DoneToken.IsCancellationRequested;\r\n                }\r\n            }\r\n\r\n            /// <summary>\r\n            /// Initializes a new instance of the <see cref=\"IdleState\"/> class.\r\n            /// </summary>\r\n            /// <param name=\"client\">The IMAP client.</param>\r\n            /// <param name=\"doneToken\">The user-controlled 'done' token.</param>\r\n            /// <param name=\"cancellationToken\">The brute-force cancellation token.</param>\r\n            public IdleState(ImapClient client, CancellationToken doneToken, CancellationToken cancellationToken = default(CancellationToken))\r\n            {\r\n                CancellationToken = cancellationToken;\r\n                DoneToken = doneToken;\r\n                Client = client;\r\n\r\n                // When the user hits a key, end the current timeout as well\r\n                doneToken.Register(CancelTimeout);\r\n            }\r\n\r\n            /// <summary>\r\n            /// Cancel the timeout token source, forcing ImapClient.Idle() to gracefully exit.\r\n            /// </summary>\r\n            void CancelTimeout()\r\n            {\r\n                lock (mutex)\r\n                {\r\n                    if (timeout != null)\r\n                        timeout.Cancel();\r\n                }\r\n            }\r\n\r\n            /// <summary>\r\n            /// Set the timeout source.\r\n            /// </summary>\r\n            /// <param name=\"source\">The timeout source.</param>\r\n            public void SetTimeoutSource(CancellationTokenSource source)\r\n            {\r\n                lock (mutex)\r\n                {\r\n                    timeout = source;\r\n\r\n                    if (timeout != null && IsCancellationRequested)\r\n                        timeout.Cancel();\r\n                }\r\n            }\r\n        }\r\n\r\n        private static void IdleLoop(object state)\r\n        {\r\n            var idle = (IdleState)state;\r\n\r\n            lock (idle.Client.SyncRoot)\r\n            {\r\n                // Note: since the IMAP server will drop the connection after 30 minutes, we must loop sending IDLE commands that\r\n                // last ~29 minutes or until the user has requested that they do not want to IDLE anymore.\r\n                // \r\n                // For GMail, we use a 9 minute interval because they do not seem to keep the connection alive for more than ~10 minutes.\r\n                while (!idle.IsCancellationRequested)\r\n                {\r\n                    using (var timeout = new CancellationTokenSource(new TimeSpan(0, 0, CustomerEmailsConfig.NoopIssueTimeout)))\r\n                    {\r\n                        try\r\n                        {\r\n                            // We set the timeout source so that if the idle.DoneToken is cancelled, it can cancel the timeout\r\n                            idle.SetTimeoutSource(timeout);\r\n\r\n                            if (idle.Client.Capabilities.HasFlag(ImapCapabilities.Idle))\r\n                            {\r\n                                // The Idle() method will not return until the timeout has elapsed or idle.CancellationToken is cancelled\r\n                                idle.Client.Idle(timeout.Token, idle.CancellationToken);\r\n                            }\r\n                            else\r\n                            {\r\n                                // The IMAP server does not support IDLE, so send a NOOP command instead\r\n                                idle.Client.NoOp(idle.CancellationToken);\r\n\r\n                                // Wait for the timeout to elapse or the cancellation token to be cancelled\r\n                                WaitHandle.WaitAny(new[] { timeout.Token.WaitHandle, idle.CancellationToken.WaitHandle });\r\n                            }\r\n                        }\r\n                        catch (OperationCanceledException ex)\r\n                        {\r\n                            // This means that idle.CancellationToken was cancelled, not the DoneToken nor the timeout.\r\n                            EventLogManager.Instance.WriteEntry(EventLogType.Error, ex);\r\n                            break;\r\n                        }\r\n                        catch (ImapProtocolException ex)\r\n                        {\r\n                            // The IMAP server sent garbage in a response and the ImapClient was unable to deal with it.\r\n                            // This should never happen in practice, but it's probably still a good idea to handle it.\r\n                            // \r\n                            // Note: an ImapProtocolException almost always results in the ImapClient getting disconnected.\r\n                            EventLogManager.Instance.WriteEntry(EventLogType.Error, ex);\r\n                            break;\r\n                        }\r\n                        catch (ImapCommandException ex)\r\n                        {\r\n                            // The IMAP server responded with \"NO\" or \"BAD\" to either the IDLE command or the NOOP command.\r\n                            // This should never happen... but again, we're catching it for the sake of completeness.\r\n                            EventLogManager.Instance.WriteEntry(EventLogType.Error, ex);\r\n                            break;\r\n                        }\r\n                        catch (IOException ex)\r\n                        {\r\n                            EventLogManager.Instance.WriteEntry(EventLogType.Error, ex);\r\n                            break;\r\n                        }\r\n                        catch (Exception ex)\r\n                        {\r\n                            EventLogManager.Instance.WriteEntry(EventLogType.Error, ex);\r\n                            break;\r\n                        }\r\n                        finally\r\n                        {\r\n                            // We're about to Dispose() the timeout source, so set it to null.\r\n                            idle.SetTimeoutSource(null);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        #endregion\r\n```\r\nI suspect that sometimes the idle thread cannot be terminated so that the Disconnect fails to be done.\r\nIn this case how to abort the idle thread?\r\n\r\nPlease advise."
      },
      {
        "user": "jstedfast",
        "created_at": "2019-03-20T18:12:33Z",
        "body": "The Idle/IdleAsync methods take 2 CancellationToken arguments: `doneToken` and `cancellationToken`\r\n\r\nWhat I would do is, after cancelling `doneToken` (using your `_done` token source as you are already doing), if the thread doesn't end after your time limit, then try calling `Cancel()` on your `cancellationToken` source and giving it a few more seconds to join.\r\n\r\nThis *may* still fail currently, but I've been working toward making cancel even more solid. I've made changes to SmtpClient so far and once I know that approach works for sure, I'll be adding it to ImapClient and Pop3Client."
      },
      {
        "user": "dorin7bogdan",
        "created_at": "2019-03-20T20:49:23Z",
        "body": "Hi Jstedfast,\r\nThank you for the quick answer.\r\nI defined:  \r\n```private CancellationTokenSource _cancel```\r\nI also fixed the time to join from 30 * 100 to 30 * 1000 to really be 30 seconds, as intended initially.\r\nPlease let me know if this version of StartIdling / StopIdling should be better:\r\n```c#\r\npublic void StopIdling()\r\n{\r\n\tlock (_syncRoot)\r\n\t{\r\n\t\ttry\r\n\t\t{\r\n\t\t\tif (_isIdle && _done?.IsCancellationRequested != true)\r\n\t\t\t{\r\n\t\t\t\t_done.Cancel();\r\n\t\t\t\t_done.Dispose();\r\n\t\t\t}\r\n\t\t\t// if the thread doesn't end in 30 seconds, then use the cancelation token \r\n\t\t\t_thread?.Join(30 * 1000);\r\n\t\t\tif (_thread?.IsAlive == true)\r\n\t\t\t{\r\n\t\t\t\t_cancel?.Cancel();\r\n\t\t\t\t_thread?.Join(30 * 1000);\r\n\t\t\t\t// if the thread doesn't end in 30 seconds, then abort it\r\n\t\t\t\tif (_thread?.IsAlive == true)\r\n\t\t\t\t\t_thread.Abort();\r\n\t\t\t}\r\n\t\t\t_thread = null;\r\n\t\t}\r\n\t\tcatch (Exception ex)\r\n\t\t{\r\n\t\t\tEventLogManager.Instance.WriteEntry(EventLogType.Error, ex, string.Format(UNEXPECTED_ERROR, MethodBase.GetCurrentMethod().Name, ChannelCode, InboxFolderName, ex.Message));\r\n\t\t}\r\n\t}\r\n}\r\npublic void StartIdling(bool connectAndLogin = true)\r\n{\r\n\tlock (_syncRoot)\r\n\t{\r\n\t\tif (connectAndLogin)\r\n\t\t\tConnectAndLogin();\r\n\t\tif (IsConnected && IsAuthenticated && !_isIdle)\r\n\t\t{\r\n\t\t\tif (InboxFolder == null) // we check the property here, not the field, in order to initialize it if necessary !\r\n\t\t\t\treturn;\r\n\r\n\t\t\tif (!_inboxFolder.IsOpen)\r\n\t\t\t{\r\n\t\t\t\t_inboxFolder.CountChanged -= Folder_CountChanged;\r\n\t\t\t\t_inboxFolder.Open(FolderAccess.ReadWrite);\r\n\t\t\t\t_inboxFolder.CountChanged += Folder_CountChanged;\r\n\t\t\t}\r\n\r\n\t\t\t_done = new CancellationTokenSource();\r\n\t\t\t_cancel = new CancellationTokenSource();\r\n\t\t\t_thread = new Thread(IdleLoop);\r\n\t\t\t_thread.Start(new IdleState(_client, _done.Token, _cancel.Token));\r\n\r\n\t\t\t// the server should answer with \"IDLE accepted, awaiting DONE command\", so we give it max 10 seconds for safety \r\n\t\t\tSpinWait.SpinUntil(() => _isIdle, 10 * 1000);\r\n\t\t}\r\n\t}\r\n}\r\n```\r\nAdditionally, do you recommend to do something in the catch block or to add a finally block? (in the StopIdling method). For example to abort the _thread if still alive."
      },
      {
        "user": "dorin7bogdan",
        "created_at": "2019-03-20T21:09:06Z",
        "body": "Also, do you think it's better to declare the IdleLoop method as instance method (instead of static)?\r\nI'm asking this because we connect multiple clients (to different mailboxes) and they might rise concurrency issues.\r\nIn other words, there are several instances of the class containing the ImapClient _client field running and idling in parallel.\r\nThank you in advance."
      },
      {
        "user": "jstedfast",
        "created_at": "2019-03-21T11:10:04Z",
        "body": "Your new StopIdling() method looks exactly how I was recommending.\r\n\r\nAs far as adding a finally goes, I've got a few thoughts:\r\n\r\n1. `_done.Cancel ()` has been recently fixed to catch all exceptions inside MailKit, so they should never bubble up to your code.\r\n2. I'm not as sure about `_cancel.Cancel()`, I'm pretty sure that should only cause exceptions on the thread that is actually running the IMAP query, but not 100% confident. If any situations are found that do cause `_cancel.Cancel()` to throw from within MailKit, I would consider that a bug in MailKit.\r\n\r\nThat leaves your `_thread.Join()`'s as potential sources of exceptions which I don't think will be a realistic issue in your code.\r\n\r\nThe only potential problem I see in your StopIdling method right now is that `_done` is only Disposed in 1 code path (only if you are idling *and* the token hasn't already been cancelled). It might be worth moving the Dispose() to a finally clause:\r\n\r\n```csharp\r\n} finally {\r\n    if (_done != null)\r\n        _done.Dispose ();\r\n}\r\n```\r\n\r\nAs far as making IdleLoop an instance vs static, I'm not sure it really matters."
      },
      {
        "user": "dorin7bogdan",
        "created_at": "2019-03-21T15:11:49Z",
        "body": "Hi Jstedfast, thank you so much for the useful suggestions !!!\r\n\r\nI just reproduced a scenario that might be the cause of the problems:\r\n\r\nThe StartIdling method is called on every minute, and as you can see its code from above, based on the _idle flag value it renews the tokens and starts the new _thread.\r\n`private bool _isIdle => _client?.IsIdle == true;`\r\n\r\nSo it seems to be a concurrency issue, when the IdleLoop's timeout just expired (i.e. at 5 min) and at the same time the StartIdling was called.\r\nI could see in the debugger that the _idle flag was false when entering the StartIdling method, and it became true in the middle of the method.\r\nHow could I synchronize the IdleLoop's `while` or `using` block with the StartIlding?\r\n\r\n\r\n\r\n\r\n\r\n"
      },
      {
        "user": "jstedfast",
        "created_at": "2019-03-21T16:10:18Z",
        "body": "I would probably recommend avoiding the use of a boolean variable for this and use a ManualResentEvent instead."
      },
      {
        "user": "dorin7bogdan",
        "created_at": "2019-03-29T16:28:07Z",
        "body": "Hi  Jeffrey,\r\n\r\nI continue on this thread, even if it is not on the same subject.\r\nWhile IDLE looping, sometimes (once a week?) we get a strange exception.\r\nI tried to reproduce on DEV environment but didn't succeed yet.\r\n\r\n`Syntax error in response. Unexpected token: [atom: Server]`\r\n```\r\nImapProtocolException:Syntax error in response. Unexpected token: [atom: Server]]<br/> \r\nMailKit.Net.Imap.&lt;StepAsync&gt;d__79.MoveNext() + 9392<br/> \r\nSystem.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task) + 144<br/> \r\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task) + 84<br/> \r\nSystem.Runtime.CompilerServices.ConfiguredTaskAwaiter.GetResult() + 49<br/> \r\nMailKit.Net.Imap.&lt;IterateAsync&gt;d__170.MoveNext() + 1878<br/> \r\nSystem.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task) + 144<br/> \r\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task) + 84<br/> \r\nMailKit.Net.Imap.&lt;RunAsync&gt;d__171.MoveNext() + 530<br/> \r\nSystem.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task) + 144<br/> \r\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task) + 84<br/> \r\nMailKit.Net.Imap.&lt;IdleAsync&gt;d__100.MoveNext() + 1227<br/> \r\nSystem.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task) + 144<br/> \r\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task) + 84<br/> \r\nMailKit.Net.Imap.ImapClient.Idle(CancellationToken doneToken,CancellationToken cancellationToken) + 528<br/> \r\nHS.PiPWService.Configuration.CustomerEmailAccount.IdleLoop(Object state) + 391<br/> \r\n```\r\nI know that you fixed similar issues in past.\r\nThe server is Microsoft Exchange IMAP4.\r\nI can give you a DEV sample from starting the IDLE loop:\r\n```\r\nConnected to imaps://dag01.mailserver.local:993/\r\nS: * OK The Microsoft Exchange IMAP4 service is ready.\r\nC: A00000000 CAPABILITY\r\nS: * CAPABILITY IMAP4 IMAP4rev1 AUTH=PLAIN AUTH=NTLM AUTH=GSSAPI UIDPLUS MOVE ID CHILDREN IDLE NAMESPACE LITERAL+\r\nS: A00000000 OK CAPABILITY completed.\r\nC: A00000001 AUTHENTICATE PLAIN\r\nS: +\r\nC: AFBMVU1CRURGT1JEXGNicxxxxxxxxx*****\r\nS: A00000001 OK AUTHENTICATE completed.\r\nC: A00000002 CAPABILITY\r\nS: * CAPABILITY IMAP4 IMAP4rev1 AUTH=PLAIN AUTH=NTLM AUTH=GSSAPI UIDPLUS MOVE ID XPROXY3 CHILDREN IDLE NAMESPACE LITERAL+\r\nS: A00000002 OK CAPABILITY completed.\r\nC: A00000003 NAMESPACE\r\nS: * NAMESPACE ((\"\" \"/\")) NIL NIL\r\nS: A00000003 OK NAMESPACE completed.\r\nC: A00000004 LIST \"\" \"INBOX\"\r\nS: * LIST (\\Marked \\HasNoChildren) \"/\" INBOX\r\nS: A00000004 OK LIST completed.\r\nC: A00000005 LIST \"\" DOrin\r\nS: * LIST (\\HasChildren) \"/\" Dorin\r\nS: A00000005 OK LIST completed.\r\nC: A00000006 LIST \"\" DOrinProcessed\r\nS: * LIST (\\HasNoChildren) \"/\" DorinProcessed\r\nS: A00000006 OK LIST completed.\r\nC: A00000007 LIST \"\" Unprocessed\r\nS: * LIST (\\HasNoChildren) \"/\" Unprocessed\r\nS: A00000007 OK LIST completed.\r\nC: A00000008 SELECT Dorin\r\nS: * 0 EXISTS\r\nS: * 0 RECENT\r\nS: * FLAGS (\\Seen \\Answered \\Flagged \\Deleted \\Draft $MDNSent)\r\nS: * OK [PERMANENTFLAGS (\\Seen \\Answered \\Flagged \\Deleted \\Draft $MDNSent)] Permanent flags\r\nS: * OK [UIDVALIDITY 66] UIDVALIDITY value\r\nS: * OK [UIDNEXT 90] The next unique identifier value\r\nS: A00000008 OK [READ-WRITE] SELECT completed.\r\nC: A00000009 UID SEARCH ALL\r\nS: * SEARCH\r\nS: A00000009 OK SEARCH completed.\r\nC: A00000010 IDLE\r\nS: + IDLE accepted, awaiting DONE command.\r\n\r\n```\r\nPlease advise."
      },
      {
        "user": "jstedfast",
        "created_at": "2019-03-29T16:35:21Z",
        "body": "That log doesn't contain the word `Server` anywhere, so that can't be the correct log.\r\n\r\nThe exception you are getting is because the IMAP response parser is encountering the word `Server` where it doesn't make any sense syntactically."
      },
      {
        "user": "dorin7bogdan",
        "created_at": "2019-05-14T13:41:01Z",
        "body": "Hi Jeffrey,\r\nIs there a way to enable the Imap protocol logging only for main info, without printing all email body / attachments details ?"
      },
      {
        "user": "jstedfast",
        "created_at": "2019-05-14T13:41:34Z",
        "body": "No, there's no way to do that."
      },
      {
        "user": "dorin7bogdan",
        "created_at": "2019-05-14T13:58:19Z",
        "body": "Interesting idea, but what do you think if derive from MailKit.ProtocolLogger and override the ``LogServer(byte[] buffer, int offset, int count)`` with call ``base.LogServer(buffer, offset, 100)`` inside?\r\nDo you see any drawbacks here?"
      },
      {
        "user": "jstedfast",
        "created_at": "2019-05-14T14:48:30Z",
        "body": "That won't work because MailKit will chunk the command to the logger, so the buffer does not necessarily contain the full command."
      },
      {
        "user": "dorin7bogdan",
        "created_at": "2019-05-15T12:37:42Z",
        "body": "Hi Jeffrey,\r\nSorry for disturbing you again....\r\nIn fact I need to skip logging the call FETCH BODY command details, since this gets the biggest amount of data.\r\nAnd eventually print only the first and the last line. \r\n**`S: * 1 FETCH (BODY[] {88166}`**\r\n`S: Received: from mailtest.local (...) by`\r\n`S:  mailtest.local (... ) with Microsoft SMTP Server`\r\n`S:  (TLS) id 15.0.1395.4 via Mailbox Transport; Wed, 15 May 2019 06:06:41 -0400`\r\n`S: Received: from mailtest.local (...) by`\r\n`. . . . .`\r\n`. . . . .`\r\n`S: nl7O1f3Rm7r9g5+PhWS/45fU+n88+/jznL1zZ19R1dPjPv7Y6w38479MdnjnPXjnb0w39MhF56d5`\r\n`S: /V6y9UKax/qr/9k=`\r\n`S: `\r\n`S: ------=_NextPart_000_00D6_01D50B1F.1E45A4B0--`\r\n`S:  UID 8)`\r\n**`S: F00000014 OK FETCH completed.`**\r\n\r\nThe existing MailKit.ProtocolLogger code seems quite complex and I'm afraid to adjust it right now.\r\nIf it is possible in future versions, please take in account adding support for this feature.\r\nThank you so much."
      },
      {
        "user": "jstedfast",
        "created_at": "2019-05-15T16:11:37Z",
        "body": "All you need to do is buffer the data before it gets pushed to the underlying log stream:\r\n\r\nWhen LogClient() gets called, append it to the client buffer. When LogServer() gets called, you know the client buffer is complete and then you can print just the first and last lines.\r\n\r\nWhen LogServer() gets called, append it to the client buffer. When LogClient() gets called, you know the server buffer is complete and then you can print just the first and last lines.\r\n"
      },
      {
        "user": "dorin7bogdan",
        "created_at": "2019-05-24T13:49:02Z",
        "body": "Hi Jeffrey,\r\nA small question:\r\nIs it possible to reset the protocol logger file without disconnecting the IMAP client?\r\nI'd like to prevent it from growing too much.\r\nCurrently I cannot manually edit it from Notepad:\r\n> \"The process cannot access the file because it is being used by another process.\"\r\n\r\nThank you."
      }
    ]
  },
  {
    "number": 597,
    "title": "POP3 Client",
    "created_at": "2017-12-13T12:42:19Z",
    "closed_at": "2017-12-13T12:59:31Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jstedfast/MailKit/issues/597",
    "body": "Hey Jeffrey,\r\nWill use pop3 to get mail, can distinguish between inbox mail and deleted mail? If you can, what to do\uff1f",
    "comments_url": "https://api.github.com/repos/jstedfast/MailKit/issues/597/comments",
    "author": "jdzhang1221",
    "comments": [
      {
        "user": "jstedfast",
        "created_at": "2017-12-13T12:59:31Z",
        "body": "Pop3 does not include deleted messages in its listing."
      }
    ]
  },
  {
    "number": 578,
    "title": "How to use \"SyncRoot\"?",
    "created_at": "2017-10-27T09:53:00Z",
    "closed_at": "2017-10-27T11:01:08Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jstedfast/MailKit/issues/578",
    "body": "How can I use \"SyncRoot\" for synchronization of my client and IMAP server?\r\nany helping material you can share.",
    "comments_url": "https://api.github.com/repos/jstedfast/MailKit/issues/578/comments",
    "author": "officialrizwanali",
    "comments": [
      {
        "user": "jstedfast",
        "created_at": "2017-10-27T11:01:08Z",
        "body": "The same way you use SyncRoot for standard collections in .NET.\r\n\r\n```csharp\r\nlock (folder.SyncRoot) {\r\n    folder.DoSomething ();\r\n}\r\n```\r\n\r\n```csharp\r\nlock (client.SyncRoot) {\r\n    c lient.DoSOmething ();\r\n}\r\n```"
      },
      {
        "user": "officialrizwanali",
        "created_at": "2017-10-27T11:18:11Z",
        "body": "I had read about the `lock` you mentioned in your writings, but what \"SyncRoot\" actually does?\r\nI guess its used to perform a single operation at a time and blocks all other threads until current operation is completed.\r\nNot getting how this keeps all the things in \"sync\". @jstedfast "
      },
      {
        "user": "jstedfast",
        "created_at": "2017-10-27T11:58:42Z",
        "body": "It\u2019s just a dummy object that is shared between all folders and their client that can be used to synchronize threads if your app is accessing IMAP via multiple threads."
      },
      {
        "user": "officialrizwanali",
        "created_at": "2017-10-27T12:01:20Z",
        "body": "does this locks the whole client object, when one thread locks it?"
      },
      {
        "user": "jstedfast",
        "created_at": "2017-10-27T12:01:53Z",
        "body": "If you create your own class that implements the IList interface, for example, you will notice that you need to implement a SyncRoot property."
      },
      {
        "user": "jstedfast",
        "created_at": "2017-10-27T12:55:31Z",
        "body": "> does this locks the whole client object, when one thread locks it?\r\n\r\nYes. When you lock the SyncRoot on any folder or the client, it prevents any other thread from locking any of the SyncRoots for the same IMAP connection."
      },
      {
        "user": "atiyka",
        "created_at": "2019-11-08T09:22:33Z",
        "body": "Hi @jstedfast , I have a question on this thread. I'm using an ImapClient between threads and couple of times I got the following error: \r\n\r\n> The ImapClient is currently busy processing a command in another thread. Lock the SyncRoot property to properly synchronize your threads.\r\n\r\nWhen I perform an operation on a folder, I just lock the SyncRoot property of that folder, not the client's SyncRoot property. Is it okay/enough? Or I should lock the client when I'm doing any operation?"
      },
      {
        "user": "jstedfast",
        "created_at": "2019-11-08T12:26:21Z",
        "body": "@atiyka \r\n\r\nThe ImapClient.SyncRoot is the same object as the ImapFolder.SyncRoot (assuming the ImapFolder came from the ImapClient), so yes, that is enough.\r\n\r\nThat said, the most common reason most people see that error is not because of locking anymore... the most common reason seems to be because you are trying to invoke an IMAP command from within an IMAP event handler. You cannot do that.\r\n\r\nHere's why:\r\n\r\nIn MailKit, the ImapClient processes the server response and emits those events WHILE IT IS STILL PROCESSING THE COMMAND.\r\n\r\nIn other IMAP client libraries, the ImapClient will read the **entire response** into one big **massive string** before it starts parsing it, but MailKit doesn't do that. It parses the response as it reads it from the socket.\r\n\r\nWhat you need to do in your event handlers is to queue a new command somehow in your program. How you do that depends on how you design your program. Are you using Tasks? If so, you could do `.ContinueWith (...)` on the current running Task."
      },
      {
        "user": "atiyka",
        "created_at": "2019-11-11T14:11:58Z",
        "body": "Thank you very much the response! Yes, I'm using Tasks."
      }
    ]
  },
  {
    "number": 561,
    "title": "Unable to connect to imaps when setting up TLS ",
    "created_at": "2017-09-06T10:06:31Z",
    "closed_at": "2017-09-06T10:53:38Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jstedfast/MailKit/issues/561",
    "body": "So i'm having an issue I am trying to connect to using TLS\r\n\r\nServer name: outlook.office365.com\r\nPort: 993\r\nEncryption method: TLS\r\n\r\nso I am using this to connect to the server \r\n \r\n` _client.Connect( \"outlook.office365.com\", \"993\", SecureSocketOptions.StartTls);`\r\n\r\nBut it fails and the log only contains one line and throws an exception\r\n\r\n> Connected to **imap:**//outlook.office365.com:993/?starttls=always\r\n\r\nBut if use below it connect successfully but need to use TLS\r\n\r\n` _client.Connect( \"outlook.office365.com\", \"993\", SecureSocketOptions.Auto);`\r\n\r\n> Connected to **imaps**://outlook.office365.com:993/\r\n> S: * OK The Microsoft Exchange IMAP4 service is ready. [SABFADEAUAAxADkAMABDAEEAMAAwADEANQAuAEUAVQBSAFAAMQA5ADAALgBQAFIATwBEAC4ATwBVAFQATABPAE8ASwAuAEMATwBNAA==]\r\n> C: C00000000 CAPABILITY\r\n> S: * CAPABILITY IMAP4 IMAP4rev1 AUTH=PLAIN AUTH=XOAUTH2 SASL-IR UIDPLUS ID UNSELECT CHILDREN IDLE NAMESPACE LITERAL+\r\n> S: C00000000 OK CAPABILITY completed.\r\n> C: C00000001 AUTHENTICATE XOAUTH2  ***********************\r\n> S: C00000001 NO AUTHENTICATE failed.\r\n> C: C00000002 AUTHENTICATE PLAIN ***********************\r\n> S: C00000002 OK AUTHENTICATE completed.\r\n> C: C00000003 CAPABILITY\r\n> S: * CAPABILITY IMAP4 IMAP4rev1 AUTH=PLAIN AUTH=XOAUTH2 SASL-IR UIDPLUS MOVE ID UNSELECT CLIENTACCESSRULES CLIENTNETWORKPRESENCELOCATION BACKENDAUTHENTICATE CHILDREN IDLE NAMESPACE LITERAL+\r\n> S: C00000003 OK CAPABILITY completed.\r\n> C: C00000004 NAMESPACE\r\n> S: * NAMESPACE ((\"\" \"/\")) NIL NIL\r\n> S: C00000004 OK NAMESPACE completed.\r\n> C: C00000005 LIST \"\" \"INBOX\"\r\n> S: * LIST (\\Marked \\HasNoChildren) \"/\" INBOX\r\n> S: C00000005 OK LIST completed.\r\n> C: C00000006 SELECT INBOX\r\n> S: * 5 EXISTS\r\n> S: * 2 RECENT\r\n> S: * FLAGS (\\Seen \\Answered \\Flagged \\Deleted \\Draft $MDNSent)\r\n> S: * OK [PERMANENTFLAGS (\\Seen \\Answered \\Flagged \\Deleted \\Draft $MDNSent)] Permanent flags\r\n> S: * OK [UNSEEN 4] Is the first unseen message\r\n> S: * OK [UIDVALIDITY 14] UIDVALIDITY value\r\n> S: * OK [UIDNEXT 626] The next unique identifier value\r\n> S: C00000006 OK [READ-WRITE] SELECT completed.\r\n> C: C00000007 FETCH 1:* (UID FLAGS INTERNALDATE RFC822.SIZE ENVELOPE BODY)\r\n\r\nshould the TLS be going to imaps as well?\r\n\r\nAm I missing something any help would be useful I have removed the  ***********************\r\n",
    "comments_url": "https://api.github.com/repos/jstedfast/MailKit/issues/561/comments",
    "author": "truane",
    "comments": [
      {
        "user": "truane",
        "created_at": "2017-09-06T10:30:32Z",
        "body": "sorry the error using \r\n\r\n`_client.Connect( \"outlook.office365.com\", \"993\", SecureSocketOptions.StartTls);`\r\n\r\nis \r\n```\r\nMailKit.Net.Imap.ImapProtocolException-The IMAP server has unexpectedly disconnected.\r\nat MailKit.Net.Imap.ImapStream.ReadAhead(Int32 atleast, CancellationToken cancellationToken)\r\n   at MailKit.Net.Imap.ImapStream.ReadToken(String specials, CancellationToken cancellationToken)\r\n   at MailKit.Net.Imap.ImapStream.ReadToken(CancellationToken cancellationToken)\r\n   at MailKit.Net.Imap.ImapEngine.Connect(ImapStream stream, CancellationToken cancellationToken)\r\n   at MailKit.Net.Imap.ImapClient.Connect(String host, Int32 port, SecureSocketOptions options, CancellationToken cancellationToken)\r\n```\r\nI have also tried  `\"imaps://outlook.office365.com:993/?starttls=always\"`\r\n\r\n```\r\nException :System.Net.Sockets.SocketException-No such host is known\r\n at System.Net.Dns.GetAddrInfo(String name)\r\n   at System.Net.Dns.InternalGetHostByName(String hostName, Boolean includeIPv6)\r\n   at System.Net.Dns.GetHostAddresses(String hostNameOrAddress)\r\n   at MailKit.Net.Imap.ImapClient.Connect(String host, Int32 port, SecureSocketOptions options, CancellationToken cancellationToken)\r\n```\r\n\r\nI have also used `StartTlsWhenAvailable` on all the above with same results"
      },
      {
        "user": "jstedfast",
        "created_at": "2017-09-06T10:53:37Z",
        "body": "There's 2 ways that a IMAP/POP3/SMTP server can enable SSL/TLS for each protocol.\r\n\r\nWe'll call the first one \"SSL/TLS-wrap\". This is done on a \"high port\" (typically 465 for SMTP/S, 993 for IMAP/S and 995 for POP3/S). What happens here is that the socket is immediately wrapped in an SSL/TLS layer and so a client needs to enable SSL/TLS immediately after establishing a TCP/IP connection, before *any* commands are sent.\r\n\r\nThis mode is represented by `SecureSocketOptions.SslOnConnect`.\r\n\r\nThe second way is via the use of a `STARTTLS` command issued *after* the client connects and reads the server greeting and obtains the list of extensions supported by the server (of which `STARTTLS` is one).\r\n\r\n`SecureSocketOptions.StartTls` tells MailKit that `STARTTLS` is a *requirement* for the client and that if the server doesn't support the `STARTTLS` extension, it should immediately bail.\r\n\r\n`SecureSocketOptions.StartTlsWhenAvailable` is more lax. It will toggle into `STARTTLS` mode only if the server supports it, but if not, it will proceed in plain-text mode w/o error.\r\n\r\nHope that explanation clears things up."
      },
      {
        "user": "truane",
        "created_at": "2017-09-06T11:10:18Z",
        "body": "So let me get this straight even though I want to use TLS i need to set SecureSocketOptions.SslOnConnect and it will still use TLS?\r\n\r\ncan i still use  _client.SslProtocols = SslProtocols.Tls12;"
      }
    ]
  },
  {
    "number": 533,
    "title": "Question: How to get the message headers (like X-....)",
    "created_at": "2017-07-03T08:24:01Z",
    "closed_at": "2017-07-03T13:42:23Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jstedfast/MailKit/issues/533",
    "body": "Hi,\r\n\r\nI now use below code to get MessageSummary items to get information about the message. I also want to retrieve the headers. Is it possible to do it somehow in the same call or do I need to use the client.Inbox.GetHeaders(result[0].Index); method on each message?\r\n\r\n```\r\nclient.Inbox.Open(FolderAccess.ReadOnly);\r\n\r\nconst MessageSummaryItems items =\r\n\tMessageSummaryItems.UniqueId |\r\n\tMessageSummaryItems.Flags |\r\n\tMessageSummaryItems.Envelope |\r\n\tMessageSummaryItems.Body |\r\n\tMessageSummaryItems.Size;\r\n\r\nvar fields = new HashSet<HeaderId> {HeaderId.Importance};\r\nvar result = client.Inbox.Count == 0\r\n\t? new IMessageSummary[0]\r\n\t: client.Inbox.Fetch(0, -1, items, fields);\r\n\r\n//var test = client.Inbox.GetHeaders(result[0].Index);\r\n\r\nclient.Inbox.Close();\r\n```",
    "comments_url": "https://api.github.com/repos/jstedfast/MailKit/issues/533/comments",
    "author": "Sicos1977",
    "comments": [
      {
        "user": "Sicos1977",
        "created_at": "2017-07-03T10:26:05Z",
        "body": "And is it also possible to check if a message has attachments without retrieving the entire message?"
      },
      {
        "user": "jstedfast",
        "created_at": "2017-07-03T13:42:23Z",
        "body": "The `Fetch()` API is really designed to just get back a specified list of named headers and not the full header block of each message. So right now, you'll have to use `GetHeaders()` *unless* you can specify which X- headers you want:\r\n\r\n```csharp\r\nvar fields = new HashSet<string> ({ \"X-Mailer\", \"X-Priority\", \"X-Loop\" });\r\nvar result = folder.Fetch (0, -1, items, fields);\r\n```\r\n\r\nAs far as determining if a message has attachments or not, what you can do is include `MessageSummaryItems.BodyStructure` and then check the `IMessageSummary`'s `Attachments` property like so:\r\n\r\n```csharp\r\nif (item.Attachments.Any ())\r\n```"
      },
      {
        "user": "ravikumarjella",
        "created_at": "2018-06-11T15:03:27Z",
        "body": "HI \r\ni followed the same but i am getting headers as null. this is my code : \r\n  var headerFields = new HashSet<string> { \"X-MS-Has-Attach\", \"X-Mailer\", \"X-Priority\", \"X-Loop\" };\r\nvar result = folder.Fetch (0, -1, items, headerFields );"
      }
    ]
  },
  {
    "number": 524,
    "title": "Not able to send an email through office365 ",
    "created_at": "2017-06-14T13:32:29Z",
    "closed_at": "2017-06-14T13:51:50Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jstedfast/MailKit/issues/524",
    "body": "Hi there,\r\n\r\nI am trying to send an email through office 365 through mailkit (.net core 1.1) but it is giving me an authentication failed error.\r\n\r\nError: MailKit.Security.AuthenticationException: Authentication failed.\r\n   at MailKit.Net.Smtp.SmtpClient.Authenticate(Encoding encoding, ICredentials credentials, CancellationToken cancellationToken)\r\n   at MailKit.MailService.Authenticate(String userName, String password, CancellationToken cancellationToken)\r\n   at ConsoleApp1.Program.Main(String[] args) in C:\\Users\\kcauc\\OneDrive\\Documents\\Visual Studio 2017\\Projects\\ConsoleApp1\\ConsoleApp1\\Program.cs\r\n\r\nHere is my code: \r\n`                string Subject = \"Hello World - Sending email using ASP.NET Core 1.1\";\r\n                string BodyContent = \"test.\";\r\n\r\n                //Smtp Server \r\n                string SmtpServer = \"smtp.office365.com\";\r\n                //Smtp Port Number \r\n                int SmtpPortNumber = 587;\r\n\r\n                var mimeMessage = new MimeMessage();\r\n                mimeMessage.From.Add(new MailboxAddress(FromAddress));\r\n                mimeMessage.To.Add(new MailboxAddress(ToAddress));\r\n                mimeMessage.Subject = Subject;\r\n                mimeMessage.Body = new TextPart(\"plain\")\r\n                {\r\n                    Text = BodyContent\r\n\r\n                };\r\n\r\n                using (var client = new SmtpClient())\r\n                {\r\n\r\n                    client.Connect(SmtpServer, SmtpPortNumber, false);\r\n                    // Note: only needed if the SMTP server requires authentication \r\n                    // Error 5.5.1 Authentication  \r\n                    client.Authenticate(FromAddress, GetPassword());\r\n                    client.Send(mimeMessage);\r\n                    Console.WriteLine(\"The mail has been sent successfully !!\");\r\n                    Console.ReadLine();\r\n                    client.Disconnect(true);\r\n\r\n                }`\r\n\r\nWhen switching to .Net Framework 4.5, using System.Net.Mail, it works fine.\r\n\r\nBecause of this, I assume the issue is coming from MailKit.\r\n\r\nAny help?\r\n\r\nThanks\r\n\r\nP.S. Yes, the credentials are ok.",
    "comments_url": "https://api.github.com/repos/jstedfast/MailKit/issues/524/comments",
    "author": "kpcauchi",
    "comments": [
      {
        "user": "jstedfast",
        "created_at": "2017-06-14T13:51:50Z",
        "body": "Already fixed yesterday. Update your MailKit source code and try again."
      },
      {
        "user": "jstedfast",
        "created_at": "2017-06-14T14:08:57Z",
        "body": "Actually, might not be the same issue. The issue I fixed emitted SmtpCommandException rather than AuthenticationException due to a bug in authmech fallback.\r\n\r\nIf you want this bug to be fixed, send me a protocol log (jestedfa@microsoft.com). Without it, there's nothing I can do."
      },
      {
        "user": "kpcauchi",
        "created_at": "2017-06-14T14:20:19Z",
        "body": "Actually I just found out it works when I do  `client.AuthenticationMechanisms.Remove(\"XOAUTH2\");` before the authenticate.. \r\n\r\nmaybe that's a hint?"
      },
      {
        "user": "jstedfast",
        "created_at": "2017-06-14T14:21:48Z",
        "body": "Yea, you need to do that on servers that support oauth2 unless you are using an oath token."
      }
    ]
  },
  {
    "number": 493,
    "title": "Cancelling Search or GetMessage causes client to disconnect",
    "created_at": "2017-04-18T19:38:14Z",
    "closed_at": "2017-04-18T21:43:01Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jstedfast/MailKit/issues/493",
    "body": "I don't know if it's a bug or just me not grasping the usage of the CancellationToken correctly, since I couldn't find an explanation about it. I'm trying to make a simple mail client, so to show messages in a folder using the `ImapService` I do the following:\r\n\r\n\r\n    static CancellationTokenSource _messagesTaskCts;\r\n    IMailFolder _sourceFolder;\r\n\r\n    async Task<ObservableCollection<MailMessage>> GetMessages()\r\n    {\r\n        try { _messagesTaskCts?.Cancel(); }\r\n        catch (ObjectDisposedException) { /* The implicated task already finished */ }\r\n        \r\n        using (_messagesTaskCts = new CancellationTokenSource())\r\n        {\r\n            var cToken = _messagesTaskCts.Token;\r\n            var messages = new ObservableCollection<MailMessage>();\r\n\r\n            await _sourceFolder.OpenAsync(FolderAccess.ReadOnly).ConfigureAwait(false);\r\n            var uids = (await _sourceFolder.SearchAsync(SearchQuery.All, cToken));\r\n\r\n            foreach (var uid in uids)\r\n            {\r\n                var msg = await _sourceFolder.GetMessageAsync(uid, cToken);\r\n                messages.Add(new MailMessage(msg));\r\n            }\r\n\r\n            return messages;\r\n        }\r\n    }\r\n\r\n\r\nHowever, if one folder is currently trying to retrieve its messages and I want to start retrieving messages from another folder (i.e. cancel current task and start new) I end up getting a `ServiceNotConnectedException.cs` telling me that the client has been disconnected.\r\n\r\nI expected that cancelling the token source would simply terminate the operation (be it `_sourceFolder.SearchAsync` or `_sourceFolder.GetMessageAsync`), but maybe that's not how I'm supposed to use the token?\r\n\r\nUsing MailKit v1.14.2 from NuGet",
    "comments_url": "https://api.github.com/repos/jstedfast/MailKit/issues/493/comments",
    "author": "Xerillio",
    "comments": [
      {
        "user": "jstedfast",
        "created_at": "2017-04-18T20:21:36Z",
        "body": "The way that cancellation works is that if a command is already in progress, it has to drop the connection (there's no other way).\r\n\r\nThe convention for doing cancellation should probably look a bit like this from your perspective:\r\n\r\n```csharp\r\ntry {\r\n    client.DoSomethingAsync (..., cancellationToken);\r\n} catch (OperationCanceledException) {\r\n    if (!client.IsConnected) {\r\n        Reconnect ();\r\n    }\r\n}\r\n```\r\n\r\nI should note that the `ImapEngine` always checks cancelation state *before* issuing the command as well, so it's possible that the connection is not dropped if the command hasn't been sent yet, so you should always check `client.IsConnected`."
      }
    ]
  },
  {
    "number": 456,
    "title": "Email InternalDate",
    "created_at": "2017-02-12T09:40:41Z",
    "closed_at": "2017-02-12T14:13:47Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jstedfast/MailKit/issues/456",
    "body": "Hi,\r\n1) When i fetch the message summaries \r\n\r\n`inbox.Fetch(uids, MessageSummaryItems.UniqueId | MessageSummaryItems.Envelope | MessageSummaryItems.InternalDate)`\r\n\r\nInternalDate is the same Date, but i expect \"received\" date from headers:\r\n\r\n```\r\nReceived: by 10.103.85.210 with SMTP id q79csp283698vsg;\r\n        Sat, 11 Feb 2017 18:24:14 -0800 (PST)\r\nX-Received: by 10.200.40.113 with SMTP id 46mr14303764qtr.167.1486866254026;\r\n        Sat, 11 Feb 2017 18:24:14 -0800 (PST)\r\nReceived: from a11-99.smtp-out.amazonses.com (a11-99.smtp-out.amazonses.com. [54.240.11.99])\r\n        by mx.google.com with ESMTPS id y36si4464679qty.52.2017.02.11.18.24.13\r\n        for <...@gmail.com>\r\n        (version=TLS1 cipher=ECDHE-RSA-AES128-SHA bits=128/128);\r\n        Sat, 11 Feb 2017 18:24:13 -0800 (PST)\r\nDate: Sun, 12 Feb 2017 02:24:13 +0000\r\n```\r\n\r\n2) How to get internal date (\"received\") when get message like `inbox.GetMessage(id)`?\r\n",
    "comments_url": "https://api.github.com/repos/jstedfast/MailKit/issues/456/comments",
    "author": "lordofhammsters",
    "comments": [
      {
        "user": "jstedfast",
        "created_at": "2017-02-12T14:13:47Z",
        "body": "What you can do is request specific header fields (such as Received) like this:\r\n\r\n```csharp\r\nvar fields = new HashSet<string> ();\r\nfields.Add (\"Received\");\r\n\r\ninbox.Fetch (uids, MessageSummaryItems.UniqueId | MessageSummaryItems.Envelope, fields);\r\n```\r\n\r\nAt this point you can access the `Headers` property of each message summary that is returned.\r\n"
      }
    ]
  },
  {
    "number": 445,
    "title": "send attachement from array",
    "created_at": "2017-01-01T07:08:56Z",
    "closed_at": "2017-01-01T16:09:09Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jstedfast/MailKit/issues/445",
    "body": "I am testing .Net Core MVC, which does not support System.Net.Mail, Mailkit, works well but can't figure out how to send attachments that I have stored in my database as binary. I used the following in MVC 5:\r\n```\r\nvar mail = new MailMessage();\r\n     mail.Attachments.Add(new Attachment(new MemoryStream(attachment), \r\n     attachmentName, attachmentType));\r\n```\r\nI would appreciate your suggestions. Thank you",
    "comments_url": "https://api.github.com/repos/jstedfast/MailKit/issues/445/comments",
    "author": "ghost",
    "comments": [
      {
        "user": "jstedfast",
        "created_at": "2017-01-01T16:09:09Z",
        "body": "This is probably the easiest solution:\r\n\r\n```csharp\r\nvar message = new MimeMessage ();\r\nvar builder = new BodyBuilder ();\r\n\r\nbuilder.Attachments.Add (attachmentName, attachment, ContentType.Parse (attachmentType));\r\n\r\nmessage.Body = builder.ToMessageBody ();\r\n```\r\n\r\nThis assumes that `attachmentName` and `attachmentType` are strings while `attachment` is a `byte[]`."
      }
    ]
  },
  {
    "number": 438,
    "title": "MailKit - Attachment From Stream",
    "created_at": "2016-12-15T21:42:42Z",
    "closed_at": "2016-12-15T21:50:03Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jstedfast/MailKit/issues/438",
    "body": "I am using epplus with Memory stream to download excel. Now i want use this stream in attachment can i? i cannot find any example about this.\r\nis there any working example like this\r\n> builder.Attachments.Add(stream,\"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\",  \"Report.xlsx\" );",
    "comments_url": "https://api.github.com/repos/jstedfast/MailKit/issues/438/comments",
    "author": "epozsh",
    "comments": [
      {
        "user": "jstedfast",
        "created_at": "2016-12-15T21:49:45Z",
        "body": "What you can do is something like this:\r\n\r\n```csharp\r\nbuilder.Attachments.Add (\"Report.xslx\", stream);\r\n```\r\n\r\nor (if the above code doesn't get the correct mime-type)\r\n\r\n```csharp\r\nbuilder.Attachments.Add (\"Report.xslx\", stream, new ContentType (\"application\", \"vnd.openxmlformats-officedocument.spreadsheetml.sheet\"));\r\n```\r\n\r\nJust be careful not to dispose the stream until after you have sent the message."
      }
    ]
  },
  {
    "number": 399,
    "title": "Interesting exception when try to log in an unsecure imap server",
    "created_at": "2016-09-15T17:34:01Z",
    "closed_at": "2016-09-15T17:52:03Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jstedfast/MailKit/issues/399",
    "body": "Hi,\nMy problem is: my code is just working fine on gmail and other secure servers. When I'm connecting to this unsecure imap(without ssl) server it works on my main pc(even if I use a virtual machine(different ip, directly connected to the network card(diferent mac too), it has win 8.1 and working perfectly with the unsecure server).\n\nBut when I'm try to run my code on a different computer it throw this exception:\n\"A call to SSPI failed, see inner exception.\"\nInner exception: \"The Local Security Authority cannot be contacted\"\n\nAny idea what can cause this? How should I workaround this?\n(Sorry for my English)\n",
    "comments_url": "https://api.github.com/repos/jstedfast/MailKit/issues/399/comments",
    "author": "Jonas741",
    "comments": [
      {
        "user": "jstedfast",
        "created_at": "2016-09-15T17:49:48Z",
        "body": "You are trying to connect with SSL. Show me your call to `client.Connect()`.\n"
      },
      {
        "user": "jstedfast",
        "created_at": "2016-09-15T17:52:03Z",
        "body": "Make sure to use:\n\n``` csharp\nclient.Connect (\"hostname\", port, SecureSocketOptions.None);\n```\n\nUsing this should also work unless the server has a broken STARTTLS implementation:\n\n``` csharp\nclient.Connect (\"hostname\", port, SecureSocketOptions.StartTlsWhenAvailable);\n```\n"
      },
      {
        "user": "jstedfast",
        "created_at": "2016-09-15T18:31:00Z",
        "body": "What the bool parameter does is it behaves the same as `SecureSocketOptions.StartTlsWhenAvailable`, so maybe your server advertizes that it supports `STARTTLS` but it's broken or something.\n"
      }
    ]
  },
  {
    "number": 384,
    "title": "Can't Delete message from GMail",
    "created_at": "2016-08-17T16:36:45Z",
    "closed_at": "2016-08-17T21:26:42Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jstedfast/MailKit/issues/384",
    "body": "Hello. I trashed a message and tried to Expunge it. But message still is in trash folder. Code: \n\n```\nvar result = mailFolder.MoveTo(uniqueIds, trashFolder);\nmailFolder.CloseAsync(true);\nif (trashFolder.IsOpen) trashFolder.Close(false);\ntrashFolder.Open(MailKit.FolderAccess.ReadWrite);\ntrashFolder.SetFlags(result.Source, MailKit.MessageFlags.Deleted, true);\ntrashFolder.Expunge(result.Source);\ntrashFolder.Close(true);\n```\n\nHow can i expunge the trash folder?\n",
    "comments_url": "https://api.github.com/repos/jstedfast/MailKit/issues/384/comments",
    "author": "yuribb",
    "comments": [
      {
        "user": "jstedfast",
        "created_at": "2016-08-17T21:26:42Z",
        "body": "`result.Source` refers to the UIDs in the `mailFolder` and not the `trashFolder`. You want to use `result.Destination` when settings flags/expunging the `trashFolder`.\n\nHope that helps.\n"
      },
      {
        "user": "DavidKarlas",
        "created_at": "2016-08-18T06:43:30Z",
        "body": "Also what looks kind of wrong...\n`mailFolder.CloseAsync(true);` You need `await mailFolder.CloseAsync(true);` or ugly `mailFolder.CloseAsync(true).Wait();`\n"
      }
    ]
  },
  {
    "number": 379,
    "title": "Search query doesn't work when additional parameters are added inside loop",
    "created_at": "2016-08-09T22:43:52Z",
    "closed_at": "2016-08-10T08:15:10Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jstedfast/MailKit/issues/379",
    "body": "```\nI have a strange issue with mailkit:\n\n\n        string[] fromAuthors = new string[] { \"@something.com\", \"@something2.com\", \"@somethingelse.net\" };\n\n        SearchQuery query = SearchQuery.FromContains(fromAuthors[0]);\n        for (int i = 1; i < fromAuthors.Length; i++)\n        {\n            query.Or(SearchQuery.FromContains(fromAuthors[i]));\n        }\n```\n\nThis doesn't work, `inbox.Search(query)` returns results for only the first entry  (in this case \"@something.com\"), everything else is being ignored.\n\nWhile this:\n\n```\n     SearchQuery query = SearchQuery.FromContains(fromAuthors[0]).Or(SearchQuery.FromContains(fromAuthors[1])) \n```\n\nworks fine, and results for both emails are being returned...\n",
    "comments_url": "https://api.github.com/repos/jstedfast/MailKit/issues/379/comments",
    "author": "gholol",
    "comments": [
      {
        "user": "DavidKarlas",
        "created_at": "2016-08-10T07:06:03Z",
        "body": "What you probably want to change is line inside for loop.\nFrom\n\n```\nquery.Or(SearchQuery.FromContains(fromAuthors[i]));\n```\n\nto\n\n```\nquery = query.Or(SearchQuery.FromContains(fromAuthors[i]));\n```\n"
      }
    ]
  },
  {
    "number": 375,
    "title": "Email start date",
    "created_at": "2016-07-22T12:31:05Z",
    "closed_at": "2016-07-22T12:41:25Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jstedfast/MailKit/issues/375",
    "body": "Hi ,\n\nHow do you read an email account (Imap) from a particular time forward? I am using the following code. But this reads all emails on a particular day. I need to update the time read so that I do not have to read any previous emails from a time on a single day.\n\nDateTime ReadSDate = System.DateTime.Today;\nvar query = SearchQuery.DeliveredAfter(ReadSDate);\nforeach (var uid in inbox.Search(query))\n",
    "comments_url": "https://api.github.com/repos/jstedfast/MailKit/issues/375/comments",
    "author": "madu2003",
    "comments": [
      {
        "user": "jstedfast",
        "created_at": "2016-07-22T12:41:25Z",
        "body": "The IMAP protocol does not support searching on a particular time of the day, it only supports searching based on a day.\n\nIf you want to read only messages delivered on a day after a certain specified time, you'll need to do the search you are currently doing and then further filter the results down by doing manual date comparisons.\n\nfor example:\n\n``` csharp\nvar results = inbox.Search (SearchQuery.DeliveredAfter (DateTime.Today));\nvar uids = new UniqueIdSet ();\n\nforeach (var info in inbox.Fetch (results, MessageSummaryItems.InternalDate | MessageSummaryItems.UniqueId)) {\n    if (info.InternalDate.Value >= searchDateTime)\n        uids.Add (info.UniqueId);\n}\n\n// now `uids` is the set of messages that match what you are looking for...\n```\n"
      }
    ]
  },
  {
    "number": 338,
    "title": "Move message to folder but also update it subject",
    "created_at": "2016-05-13T12:59:23Z",
    "closed_at": "2016-05-13T13:22:12Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jstedfast/MailKit/issues/338",
    "body": "I know i can open a folder\n<code> folder.Open(FolderAccess.ReadWrite); </code> \ncan read a message \n<code> MimeMessage message = folder.GetMessage(messageID); </code> \nand i can move that meassage to another folder\n<code> folder.MoveTo(messageID, _client.GetFolder(\"newFolder\")); </code> \n\nIs there any way I can change the email subject line before I move it to the new folder?\nlike - folder.SetMessage(messageID,message)\n",
    "comments_url": "https://api.github.com/repos/jstedfast/MailKit/issues/338/comments",
    "author": "truane",
    "comments": [
      {
        "user": "jstedfast",
        "created_at": "2016-05-13T13:22:12Z",
        "body": "The only way to do that is something like this:\n\n``` csharp\nfolder.Open (FolderAccess.ReadWrite);\nvar message = folder.GetMessage (uniqueId);\nmessage.Subject = \"Changed subject\";\nvar newFolder = client.GetFolder (\"newFolder\");\nnewFolder.Append (message);\n```\n"
      },
      {
        "user": "jstedfast",
        "created_at": "2016-05-13T14:18:18Z",
        "body": "Yes and no.\n\nThe UID (note: it's not a message-id, a message-id is completely different and not guaranteed to be unique) will be the same between connections IF AND ONLY IF the `folder.UidValidity` value is the same between connections (it almost always is, but if the server crashes and the disk gets corrupt and the admin has to restore from a backup or something, the UidValidity will probably change).\n"
      },
      {
        "user": "truane",
        "created_at": "2016-05-31T14:36:11Z",
        "body": "One last question \n\n```\nvar newMessageID = newFolder.Append(message, MessageFlags.Seen);\nif (onError && newMessageID != null) \nnewFolder.AddFlags((UniqueId)newMessageID, MessageFlags.Flagged, true);\n\n```\n\nOn some systems the newMessageID is comming back as null can i set MessageFlags.Seen and MessageFlags.Flagged on the append at same time?\n"
      },
      {
        "user": "jstedfast",
        "created_at": "2016-05-31T15:11:43Z",
        "body": "Yes.\n\n``` csharp\nnewFolder.Append(message, MessageFlags.Seen | MessageFlags.Flagged);\n```\n"
      }
    ]
  },
  {
    "number": 322,
    "title": "Authentication failed",
    "created_at": "2016-04-12T15:28:13Z",
    "closed_at": "2016-04-12T15:36:38Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jstedfast/MailKit/issues/322",
    "body": "Hello,\n\nPeriodically when I connect to IMAP server I receive error:\n\n> MailKit.Security.AuthenticationException: Authentication failed.\n>    at MailKit.Net.Imap.ImapClient.Authenticate(Encoding encoding, ICredentials credentials, CancellationToken cancellationToken)\n>    at MailKit.MailService.Authenticate(String userName, String password, CancellationToken cancellationToken)\n\nIMAP log:\n\n> Connected to imaps://imapserver.com:993/\n> S: \\* OK The Microsoft Exchange IMAP4 service is ready.\n> C: A00000000 CAPABILITY\n> S: \\* CAPABILITY IMAP4 IMAP4rev1 AUTH=PLAIN AUTH=NTLM AUTH=GSSAPI UIDPLUS MOVE ID CHILDREN IDLE NAMESPACE LITERAL+\n> S: A00000000 OK CAPABILITY completed.\n> C: A00000001 AUTHENTICATE NTLM\n> S: +\n> C: TlRMTVNTUAABAAAABwIIAAAAAAAgAAAAAAAAACAAAAA=\n> S: + TlRMTVNTUAACAAAACAAIADgAAAAFAokC/swBpqO/71gAAAAAAAAAAI4AjgBAAAAABgOAJQAAAA9PAEEATQBDAAIACABPAEEATQBDAAEAGABNAEMAVABFAFgAQQBSAFMAUgBWADAAMQAEABAAbwBhAG0AYwAuAGMAbwBtAAMAKgBNAEMAVABFAFgAQQBSAFMAUgBWADAAMQAuAG8AYQBtAGMALgBjAG8AbQAFABAAbwBhAG0AYwAuAGMAbwBtAAcACADS32cxyZTRAQAAAAA=\n> C: TlRMTVNTUAADAAAAGAAYAFQAAAAYABgAbAAAAAAAAABAAAAAFAAUAEAAAAAAAAAAVAAAAAAAAACEAAAAAYIIAG8AbQBhAG4ALgBzAHQAYQB0AHMAou72ajqXvS4AAAAAAAAAAAAAAAAAAAAAshgyuH6SJ/S5AP65OD29I8RMy9BPLZSJ\n> S: A00000001 NO AUTHENTICATE failed.\n> C: A00000002 AUTHENTICATE PLAIN\n> S: +\n> C: XXXXXXXX\n> S: A00000002 NO AUTHENTICATE failed.\n> C: A00000003 LOGIN plain_username plain_password\n> S: A00000003 NO Server Unavailable. 15\n> S: \\* BYE Connection closed. 14\n> C: A00000004 LOGOUT\n\nThe problem is that with Chilkat library I can authenticate stable. What can be reason?\nThank you.\n",
    "comments_url": "https://api.github.com/repos/jstedfast/MailKit/issues/322/comments",
    "author": "SuhovDE",
    "comments": [
      {
        "user": "jstedfast",
        "created_at": "2016-04-12T15:36:38Z",
        "body": "Try doing this before calling `client.Authenticate (...)`:\n\n``` csharp\nclient.AuthenticationMechanisms.Clear ();\n```\n\nThis will prevent MailKit from trying to authenticate via `NTLM` and `PLAIN` and instead just use the `LOGIN` command (which is probably what ChilKat is using).\n\nIt's possible that the server is disabling your login ability due to the failed `NTLM` and `PLAIN` attempts.\n"
      }
    ]
  },
  {
    "number": 316,
    "title": "Attachments are corrupt",
    "created_at": "2016-03-30T16:45:44Z",
    "closed_at": "2016-03-30T18:18:42Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jstedfast/MailKit/issues/316",
    "body": "Hi, First of all thanks for the project. it's really really helpful. I love it.\n\nI have a question about attachments. I have seen all of your replies so trust me I have spent a full day on this problem but still can't get my head around. The way I have setup is that I download emails but not attachments, instead just save their names and disposition. Then when customer open the email, he can see the list of attachments and just click on them to download, however they are downloading as corrupted. Here is the download code.\n\n``` csharp\n        public MemoryStream GetAttachement(string fileName, string messageId)\n        {\n            HeaderSearchQuery searchCondition = SearchQuery.HeaderContains(\"Message-Id\", messageId);\n            Client.Inbox.Open(FolderAccess.ReadOnly);\n            IList<UniqueId> uids = Client.Inbox.Search(searchCondition);\n\n            foreach (UniqueId uniqueId in uids)\n            {\n                MimeMessage message = Client.Inbox.GetMessage(uniqueId);\n                if (message.Attachments.Count() > 0)\n                {\n                    var attachement = message.Attachments.Where(x => x.ContentDisposition.FileName.Equals(fileName, StringComparison.InvariantCultureIgnoreCase)).FirstOrDefault();\n                    if (attachement != null)\n                    {\n                        var stream = new MemoryStream();\n                        attachement.WriteTo(stream);\n                        attachement.WriteTo(System.Web.HttpContext.Current.Server.MapPath(\"~/\") + fileName);\n                        return stream;\n                    }\n                }\n                //check for inline attachements\n                var inlineattachement = message.BodyParts.Where(x => x.ContentType.MediaType.Equals(\"image\", StringComparison.InvariantCultureIgnoreCase) && x.ContentType.Name.Equals(fileName, StringComparison.InvariantCultureIgnoreCase)).FirstOrDefault();\n                if (inlineattachement != null)\n                {\n                    var stream = new MemoryStream();\n                    inlineattachement.WriteTo(stream);\n                    inlineattachement.WriteTo(System.Web.HttpContext.Current.Server.MapPath(\"~/\") + fileName);\n                    return stream;\n                }\n            }\n\n            return null;\n        }\n```\n\nAs a test, I am writing to both stream and saving to file but nothing is working. I have the latest version, so any help will be greatly appreciated.\nThanks in advance.\n",
    "comments_url": "https://api.github.com/repos/jstedfast/MailKit/issues/316/comments",
    "author": "atiqi36",
    "comments": [
      {
        "user": "jstedfast",
        "created_at": "2016-03-30T18:18:42Z",
        "body": "You are writing out the MIME container of the attachment and not the decoded attachment data.\n\nWhat you need to do is this:\n\n``` csharp\nvar stream = new MemoryStream();\nif (attachment is MessagePart) {\n    var rfc822 = (MessagePart) attachment;\n    rfc822.Message.WriteTo (stream);\n    rfc822.Message.WriteTo (System.Web.HttpContext.Current.Server.MapPath(\"~/\") + fileName);\n} else {\n    var part = (MimePart) attachment;\n    part.ContentObject.DecodeTo (stream);\n    part.ContentObject.DecodeTo (System.Web.HttpContext.Current.Server.MapPath(\"~/\") + fileName);\n}\nreturn stream;\n```\n\n(Note: For the inlineattachment logic, you don't need to check for `MessagePart` because that can't happen, image parts can only ever be `MimePart`s)\n"
      }
    ]
  },
  {
    "number": 303,
    "title": "Question about downloading attachments.",
    "created_at": "2016-02-12T07:57:39Z",
    "closed_at": "2016-02-12T13:58:25Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jstedfast/MailKit/issues/303",
    "body": "Hello, I have the following issue.\n\nI'm using the IMAP protocol and the Fetch() method to get some emails.\nSome of them have attachments in the form of BodyPartBasic. \nI was wandering if there is a way to download the attachments without having to make a call to the server to get the BodyPart like this:\n\nIMessageSummary message = inboxFolder.Fetch(messageIDs, MessageSummaryItems.BodyStructure)[0];\nclient.Inbox.GetBodyPart(email.UniqueId, message.Attachments.FirstOrDefault());\n\nI have created my own EmailMessage class and I wish to save the attachments and to be able to download them when I want without having to make requests to the server for each of them. \nThis is possible if I use the GetMessage() method instead of Fetch(), because that way I get MimeMessage object, which have attachments of class MimeEntity, which I can download like this :\n\nusing (var stream = System.IO.File.Create(path)\n{\n      mimeAttachment.ContentObject.DecodeTo(stream);\n}\n\nI was also wandering what is the reason the GetMessage() method and Fetch() method to return different types of message objects (MimeMessage and IMessageSummary)?\n",
    "comments_url": "https://api.github.com/repos/jstedfast/MailKit/issues/303/comments",
    "author": "karaliolio",
    "comments": [
      {
        "user": "jstedfast",
        "created_at": "2016-02-12T13:58:25Z",
        "body": "An `IMessageSummary` is really just metadata for a message, it isn't an actual message. It's meant to be used for things like presenting a list of messages to the user (e.g. a mail client's message list). It also has the `MessageSummaryItems.Body` & `BodyStructure` fields which allow the client to get a glimpse at the structure of the message, allowing the client to optionally decide to download only a subset of the full message (this is ideal for situations where the network is slow and/or storage space on the device is limited, such as cell phones).\n\nThis is different from calling `GetMessage()` because `GetMessage()` will download the complete message and so calling `attachment.ContentObject.DecodeTo(stream)` isn't actually downloading anything because it has already been downloaded as part of `GetMessage()`.\n\nSo what does this mean?\n\nYou have 2 options:\n1. Download complete messages using `GetMessage()`, thus making things easy allowing you to decode attachments to streams at any time without need of requesting any additional data from the IMAP server, or...\n2. Using `Fetch()` to request message metadata, allowing you to download only the parts of the message that you want/need, but requiring you to keep track of which folder the message is from, what the message's UID is, and which `BodyPartBasic` corresponds to the part you want.\n\nWhich one you choose will depend on what you want to do.\n\nHope that helps.\n"
      }
    ]
  },
  {
    "number": 294,
    "title": "Storing MimeMessage in data base",
    "created_at": "2016-01-31T09:31:08Z",
    "closed_at": "2016-01-31T12:28:53Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jstedfast/MailKit/issues/294",
    "body": "Hi Jeff,\n\nI'm trying to store MimeMessage inside the database if for whatever reason our mail server may be down. Have the following fields defined in my sql server: from, to, subject and body.\n\nI'm storing 'from' and 'to' fields in this format in database: {MyCompany,mail@mycompany.com} and body, bodyBuilder.ToMessageBody().ToString() as nvarchar(max). Now that I have it stored, I want to be able to retrieve the fields and re-compose the original MimeMessage. I can re-parse the 'from' and 'to' fields, set the subject, but how do I simply set the body of the message since I already have stored in the database in this format \"Content-Type: multipart/mixed; boundary=.........\" ? Thank you for your help\n",
    "comments_url": "https://api.github.com/repos/jstedfast/MailKit/issues/294/comments",
    "author": "infinitimods",
    "comments": [
      {
        "user": "jstedfast",
        "created_at": "2016-01-31T12:28:53Z",
        "body": "Okay, first, I'm going to have to recommend not using ToString() to serialize the message body.\n\nWhat you want to use is the `WriteTo(Stream)` method. ToString() is for debugging purposes only because it makes assumptions about the charset (it always serializes in iso-8859-1).\n\nIf you use `WriteTo(Stream)`, you can de-serialize the output by using `MimeEntity.Load(Stream)`.\n\nHope that helps.\n"
      }
    ]
  },
  {
    "number": 291,
    "title": "ValidateRemoteCertificate and connection timeout",
    "created_at": "2016-01-24T04:40:29Z",
    "closed_at": "2016-01-24T11:49:46Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jstedfast/MailKit/issues/291",
    "body": "Hi Jeff,\n1. Was looking over your project and tried some sample implementations. Couple of things. I was looking at ValidateRemoteCertificate method inside the SmtpClient.cs method, and I see that by default it is returning true. I think that by default it should return false because I may not have a valid certificate that I may be trying to use with the connection. Right now, it's a \"silent fail\" and I have no idea I am using invalid certificate when indeed I am.\n2. It would be nice to have your Connect method take a \"int connectionMillisecondsTimeout = 3000\" default parameter. Right now, if I try to connect to the server, it take 20 seconds to tell me that this server is not available, obviously not acceptable. I want a max of 2~5 seconds, depending on what I want to do, be my wait time. Right now I did this:\n   \n   ```\n               //socket.Connect (ipAddresses[i], port);\n   \n               IAsyncResult result = socket.BeginConnect(ipAddresses[i], port, null, null);\n   \n               if (!result.AsyncWaitHandle.WaitOne(3000, true))\n                   throw new SocketException((int)SocketError.TimedOut);\n   ```\n\nWhat are your thoughts on this?\n",
    "comments_url": "https://api.github.com/repos/jstedfast/MailKit/issues/291/comments",
    "author": "infinitimods",
    "comments": [
      {
        "user": "jstedfast",
        "created_at": "2016-01-24T11:49:46Z",
        "body": "1. Too many people have SMTP, POP3, and/or IMAP servers with self-signed certificates that would be constantly emailing me and/or filing issues on MailKit complaining that MailKit doesn't work with their servers if I defaulted to returning false if there were any errors. Since you can override the behavior (and anyone serious about SSL/TLS security will do so), I don't think it'd be a good idea to change this. FWIW, even GMail fails if I make it return true if-and-only-if there are no certificate errors. Taking your suggestion would make developers instantly reject MailKit thinking that MailKit was somehow broken when in fact it is not. Just set your own RemoteCertificateValidationCallback.\n2. You can set the timeout in your own program. 20 seconds is not very long and 2-5 seconds is way too short for a default when it comes to network protocols. You might be 2 or 3 hops from your mail server, but most people are not.\n"
      },
      {
        "user": "jstedfast",
        "created_at": "2016-01-24T14:00:36Z",
        "body": "Update:\n\nThis works on Microsoft's .NET runtime but fails on Mono:\n\n``` csharp\nusing System.Net.Sockets;\nusing System.Net.Security;\nusing System.Security.Authentication;\nusing System.Security.Cryptography.X509Certificates;\n\nnamespace SslCertificateValidationTest\n{\n    class Program\n    {\n        static void Main (string[] args)\n        {\n            var socket = new Socket (AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);\n\n            socket.Connect (\"smtp.gmail.com\", 465);\n\n            using (var ssl = new SslStream (new NetworkStream (socket, true), false, ValidateRemoteCertificate)) {\n                ssl.AuthenticateAsClient (\"smtp.gmail.com\", null, SslProtocols.Tls | SslProtocols.Tls11 | SslProtocols.Tls12, true);\n            }\n\n        }\n\n        static bool ValidateRemoteCertificate (object sender, X509Certificate certificate, X509Chain chain, SslPolicyErrors sslPolicyErrors)\n        {\n            return sslPolicyErrors == SslPolicyErrors.None;\n        }\n    }\n}\n```\n\nThe Mono exception is:\n\n```\nSystem.IO.IOException: The authentication or decryption has failed. ---> System.IO.IOException: The authentication or decryption has failed. ---> Mono.Security.Protocol.Tls.TlsException: Invalid certificate received from server.\n  at Mono.Security.Protocol.Tls.RecordProtocol.EndReceiveRecord (IAsyncResult asyncResult) <0x29af4c8 + 0x000e3> in <filename unknown>:0 \n  at Mono.Security.Protocol.Tls.SslClientStream.SafeEndReceiveRecord (IAsyncResult ar, Boolean ignoreEmpty) <0x29af420 + 0x0001f> in <filename unknown>:0 \n  at Mono.Security.Protocol.Tls.SslClientStream.NegotiateAsyncWorker (IAsyncResult result) <0x29aae48 + 0x0019b> in <filename unknown>:0 \n  --- End of inner exception stack trace ---\n  at Mono.Security.Protocol.Tls.SslClientStream.EndNegotiateHandshake (IAsyncResult result) <0x29cd6c8 + 0x000ab> in <filename unknown>:0 \n  at Mono.Security.Protocol.Tls.SslStreamBase.AsyncHandshakeCallback (IAsyncResult asyncResult) <0x29cd4d8 + 0x0005f> in <filename unknown>:0 \n  --- End of inner exception stack trace ---\n  at Mono.Security.Protocol.Tls.SslStreamBase.EndRead (IAsyncResult asyncResult) <0x2988e28 + 0x00133> in <filename unknown>:0 \n  at System.Net.Security.SslStream.EndAuthenticateAsClient (IAsyncResult asyncResult) <0x2988cb8 + 0x00037> in <filename unknown>:0 \n  at System.Net.Security.SslStream.AuthenticateAsClient (System.String targetHost, System.Security.Cryptography.X509Certificates.X509CertificateCollection clientCertificates, SslProtocols enabledSslProtocols, Boolean checkCertificateRevocation) <0x29825c8 + 0x00050> in <filename unknown>:0 \n  at SslCertificateValidationTest.Program.Main (System.String[] args) <0x50fee0 + 0x00153> in <filename unknown>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION: System.IO.IOException: The authentication or decryption has failed. ---> System.IO.IOException: The authentication or decryption has failed. ---> Mono.Security.Protocol.Tls.TlsException: Invalid certificate received from server.\n  at Mono.Security.Protocol.Tls.RecordProtocol.EndReceiveRecord (IAsyncResult asyncResult) <0x29af4c8 + 0x000e3> in <filename unknown>:0 \n  at Mono.Security.Protocol.Tls.SslClientStream.SafeEndReceiveRecord (IAsyncResult ar, Boolean ignoreEmpty) <0x29af420 + 0x0001f> in <filename unknown>:0 \n  at Mono.Security.Protocol.Tls.SslClientStream.NegotiateAsyncWorker (IAsyncResult result) <0x29aae48 + 0x0019b> in <filename unknown>:0 \n  --- End of inner exception stack trace ---\n  at Mono.Security.Protocol.Tls.SslClientStream.EndNegotiateHandshake (IAsyncResult result) <0x29cd6c8 + 0x000ab> in <filename unknown>:0 \n  at Mono.Security.Protocol.Tls.SslStreamBase.AsyncHandshakeCallback (IAsyncResult asyncResult) <0x29cd4d8 + 0x0005f> in <filename unknown>:0 \n  --- End of inner exception stack trace ---\n  at Mono.Security.Protocol.Tls.SslStreamBase.EndRead (IAsyncResult asyncResult) <0x2988e28 + 0x00133> in <filename unknown>:0 \n  at System.Net.Security.SslStream.EndAuthenticateAsClient (IAsyncResult asyncResult) <0x2988cb8 + 0x00037> in <filename unknown>:0 \n  at System.Net.Security.SslStream.AuthenticateAsClient (System.String targetHost, System.Security.Cryptography.X509Certificates.X509CertificateCollection clientCertificates, SslProtocols enabledSslProtocols, Boolean checkCertificateRevocation) <0x29825c8 + 0x00050> in <filename unknown>:0 \n  at SslCertificateValidationTest.Program.Main (System.String[] args) <0x50fee0 + 0x00153> in <filename unknown>:0 \n```\n\nSince this seems like it's just a bug in Mono, I've changed my mind and have updated the code to be stricter. However, we'll see how it goes...\n"
      }
    ]
  },
  {
    "number": 278,
    "title": "Why is IMAP limited to a single connection?",
    "created_at": "2016-01-04T10:51:53Z",
    "closed_at": "2016-01-04T11:54:27Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jstedfast/MailKit/issues/278",
    "body": "I am using Mailkit in an application and I would ideally like to have two IMAP connections. One read only (sat in an IDLE loop) and the other ReadWrite for downloading messages and moving them about.\n\nCurrently this isn't possible as the code uses a single ImapEngine (and thus connection) no matter how many instances of the ImapClient you create and forces you to drop the idle before performing operations.\n\nIf I can have multiple clients connected to the same IMAP account at the same time why is this limitation imposed in MailKit?\n",
    "comments_url": "https://api.github.com/repos/jstedfast/MailKit/issues/278/comments",
    "author": "ben-rockliffe",
    "comments": [
      {
        "user": "jstedfast",
        "created_at": "2016-01-04T11:54:27Z",
        "body": "Huh? What? You can just create multiple ImapClient instances and have each of them connect to the same server.\n\nEach ImapClient instance gets its own ImapEngine instance. I'm not sure how you came to the conclusion that there is a global ImapEngine that is shared...\n"
      },
      {
        "user": "Sicos1977",
        "created_at": "2016-01-04T17:57:20Z",
        "body": "I agree with jstedfast, I'm working on smothing simular to your problem and that works fine.\nAnd imho it is smarter to drop the idle mode since you don't want new events when you are moving e-mails around. Otherwise there is the possibility in creating loops\n"
      },
      {
        "user": "ben-rockliffe",
        "created_at": "2016-01-05T08:33:40Z",
        "body": "You are indeed correct, earlier in my development I was seeing messages similar to \"the imap client is busy in another thread..\" I have since found and eliminated a rouge thread that was being created and it does now work as you say.\n\nApologies for the confusion.\n"
      }
    ]
  },
  {
    "number": 269,
    "title": "Authentication failed trying to connect to IMAP:4 Exchange server",
    "created_at": "2015-11-27T05:23:51Z",
    "closed_at": "2015-11-29T00:58:38Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jstedfast/MailKit/issues/269",
    "body": "I am trying to connect to an IMAP:4 enabled hosted Exchange Server using \"IMapClient\" class from MailKit but I am getting the Authentication failed exception. The following is the dump of the logger:\n\nConnected to imap://IP-ADDRESS:143/?starttls=when-available\nS: \\* OK The Microsoft Exchange IMAP4 service is ready.\nC: A00000000 CAPABILITY\nS: \\* CAPABILITY IMAP4 IMAP4rev1 LOGINDISABLED STARTTLS UIDPLUS MOVE ID CHILDREN IDLE NAMESPACE LITERAL+\nS: A00000000 OK CAPABILITY completed.\nC: A00000001 STARTTLS\nS: A00000001 OK Begin TLS negotiation now.\nC: A00000002 CAPABILITY\nS: \\* CAPABILITY IMAP4 IMAP4rev1 AUTH=PLAIN AUTH=NTLM AUTH=GSSAPI UIDPLUS MOVE ID CHILDREN IDLE NAMESPACE LITERAL+\nS: A00000002 OK CAPABILITY completed.\nC: A00000003 AUTHENTICATE NTLM\nS: +\nC: TlRMTVNTUAABAAAABwIIAAAAAAAgAAAAAAAAACAAAAA=\nS: + TlRMTVNTUAACAAAAEAAQADgAAAAFAokCT++vHlcHakoAAAAAAAAAAKQApABIAAAABgOAJQAAAA9EAFAAVABDAEwATwBVAEQAAgAQAEQAUABUAEMATABPAFUARAABAAoAQwBBAFMAMAAyAAQAHgBkAHAAdABjAGwAbwB1AGQALgBjAG8AbQAuAGEAdQADACoAYwBhAHMAMAAyAC4AZABwAHQAYwBsAG8AdQBkAC4AYwBvAG0ALgBhAHUABQAeAGQAcAB0AGMAbABvAHUAZAAuAGMAbwBtAC4AYQB1AAcACACYJccN0ijRAQAAAAA=\nC: TlRMTVNTUAADAAAAGAAYAFYAAAAYABgAbgAAAAAAAABAAAAAFgAWAEAAAAAAAAAAVgAAAAAAAACGAAAAAYIIAGUAbABlAGMAdAByAGkAYwBpAHQAeQDqlY7S6w1JqQAAAAAAAAAAAAAAAAAAAABmwpjC52AodwEn5tt4Or/Jsrx/RyHV0ew=\nS: A00000003 NO AUTHENTICATE failed.\nC: A00000004 AUTHENTICATE PLAIN\nS: +\nC: AGVsZWN0cmljaXR5AEVQYXNzd29yZDE=\nS: A00000004 NO AUTHENTICATE failed.\nC: A00000005 LOGIN ACCOUNT@EMAILADDRESS ACCPASSWORD\nS: A00000005 NO LOGIN failed.\nAUTHENTICATE failed.\n\nI should mention that same code works when I try to connect to our on-premiss exchange server but the Capabilities are a little bit different as followed:\n\nConnected to imap://IPADDRESS:143/?starttls=when-available\nS: \\* OK The Microsoft Exchange IMAP4 service is ready.\nC: V00000000 CAPABILITY\nS: \\* CAPABILITY IMAP4 IMAP4rev1 AUTH=PLAIN AUTH=NTLM AUTH=GSSAPI STARTTLS UIDPLUS ID CHILDREN IDLE NAMESPACE LITERAL+\nS: V00000000 OK CAPABILITY completed.\nC: V00000001 STARTTLS\nS: V00000001 OK Begin TLS negotiation now.\nC: V00000002 CAPABILITY\nS: \\* CAPABILITY IMAP4 IMAP4rev1 AUTH=PLAIN AUTH=NTLM AUTH=GSSAPI UIDPLUS ID CHILDREN IDLE NAMESPACE LITERAL+\nS: V00000002 OK CAPABILITY completed.\nC: V00000003 AUTHENTICATE NTLM\nS: +\nC: TlRMTVNTUAABAAAABwIIAAAAAAAgAAAAAAAAACAAAAA=\nS: + TlRMTVNTUAACAAAADgAOADgAAAAFAokCPaBgQj6SzAoAAAAAAAAAAKYApgBGAAAABgOAJQAAAA9SAE8AQwBLAEUATgBEAAIADgBSAE8AQwBLAEUATgBEAAEAEgBSAE8AQwBLAC0ARQBYADAAMQAEABoAUgBvAGMAawBlAG4AZAAuAGwAbwBjAGEAbAADAC4AUgBPAEMASwAtAEUAWAAwADEALgBSAG8AYwBrAGUAbgBkAC4AbABvAGMAYQBsAAUAGgBSAG8AYwBrAGUAbgBkAC4AbABvAGMAYQBsAAcACABFCJ2wmCjRAQAAAAA=\nC: TlRMTVNTUAADAAAAGAAYAFYAAAAYABgAbgAAAAAAAABAAAAAFgAWAEAAAAAAAAAAVgAAAAAAAACGAAAAAYIIAGYAaQBsAGUAUwBNAEEAUgBUADAAMQDxvOiYzHcqeQAAAAAAAAAAAAAAAAAAAABq6PWCwxas9yZzLne1nD9r+ys7XCOfPXQ=\nS: V00000003 OK AUTHENTICATE completed.\n\nAny thought on that?\n",
    "comments_url": "https://api.github.com/repos/jstedfast/MailKit/issues/269/comments",
    "author": "matt-mahdieh",
    "comments": [
      {
        "user": "jstedfast",
        "created_at": "2015-11-29T00:58:38Z",
        "body": "Try disabling NTLM by using the following line of code before calling the Authenticate() method:\n\n``` csharp\nclient.AuthenticationMechanisms.Remove (\"NTLM\");\n```\n"
      },
      {
        "user": "jstedfast",
        "created_at": "2016-09-14T21:52:20Z",
        "body": "With this latest patch, you might not need to disable NTLM anymore. Let me know if you try it and it still fails.\n\nIf you'd rather wait for a new nuget release, I'll try to update the status of this bug when I get around to doing that.\n"
      }
    ]
  },
  {
    "number": 218,
    "title": "Mark an email as read POP3",
    "created_at": "2015-07-24T17:43:47Z",
    "closed_at": "2015-07-24T17:51:31Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jstedfast/MailKit/issues/218",
    "body": "Hi. I'm developing a desktop application that monitors an email and gets its messages.\nHowever, everytime I'm gonna read them, I'm obligated to read every email again and again.\nIs there a way to set them as READ and then only read the UNREAD emails?\n\nPlease help me\n",
    "comments_url": "https://api.github.com/repos/jstedfast/MailKit/issues/218/comments",
    "author": "ericscaglioni",
    "comments": [
      {
        "user": "jstedfast",
        "created_at": "2015-07-24T17:51:31Z",
        "body": "POP does not support read/unread status, it only supports deleting messages.\n\nIf you want to track read/unread status, you'll need to keep a log of which messages you've already \"read\".\n\nIf the POP3 server supports the UIDL extension, using the UIDs is probably the simplest way. Otherwise you'll have to use something else... like an MD5 sum of a few choice message headers (avoid headers like `Status` and `X-Status` as they may change between downloads).\n\nTo track by uids, you might do something like this:\n\n``` csharp\nvoid DownloadUnreadMessages (HashSet<string> known)\n{\n    using (var client = new PopClient ()) {\n        client.Connect (\"pop.gmail.com\", 993, true);\n        client.Authenticate (\"username\", \"password\");\n\n        if (client.Capabilities.HasFlag (Pop3Capabilities.Uidl)) {\n            var uids = client.GetMessageUids ();\n            for (int i = 0; i < client.Count; i++) {\n                if (known.Contains (uids[i]))\n                    continue;\n\n                var message = client.GetMessage (i);\n                known.Add (uids[i]);\n            }\n        } else {\n            // good luck!\n        }\n\n        client.Disconnect (true);\n    }\n}\n```\n"
      }
    ]
  },
  {
    "number": 180,
    "title": "Not receiving a MimeMessage sent on SmtpClient",
    "created_at": "2015-05-04T07:03:56Z",
    "closed_at": "2015-05-05T07:25:40Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jstedfast/MailKit/issues/180",
    "body": "I'm just trying out MailKit for the first time, so I may be way off here, but I am using the Net.Pop3Client to pull a MimeMessage, and then send it to a new recipient. I am using the code below to send it, but it never appears in the recipient's gmail inbox:\n\n```\nusing (var smtp = new MailKit.Net.Smtp.SmtpClient())\n{\n    smtp.Connect(\"smtp.gmail.com\", 587, false);\n    smtp.AuthenticationMechanisms.Remove(\"XOAUTH2\");\n    smtp.Authenticate(SmtpUser, SmtpPassword);\n\n    message.To.Clear();\n    message.To.Add(new MailboxAddress(\"Brady Kelly\", SmtpRecipient));\n    smtp.Send(message);\n    smtp.Disconnect(true);\n}\n```\n\nThe SmtpRecipient value is correct. I am using this with the built-in SMTP client and that works fine.\n",
    "comments_url": "https://api.github.com/repos/jstedfast/MailKit/issues/180/comments",
    "author": "bradykelly",
    "comments": [
      {
        "user": "jstedfast",
        "created_at": "2015-05-04T11:12:42Z",
        "body": "That looks correct, but make sure that the message does not have any Resent-From, Resent-To, Resent-Cc, etc. headers. If any of those headers are set, MailKit's SMTP implementation will use those instead of the normal From/To/Cc/Bcc headers.\n\nIf that's not the problem, try getting a log of the SMTP commands being sent:\n\n``` csharp\nusing (var smtp = new MailKit.Net.Smtp.SmtpClient(new ProtocolLogger(\"smtp.log\")))\n```\n\nIt's possible that the GMail SMTP server is rejecting the message for some reason and MailKit isn't properly catching the error(?).\n"
      },
      {
        "user": "jstedfast",
        "created_at": "2015-05-04T11:16:15Z",
        "body": "I'll improve the docs to explain how it decides which sender and recipients to use when sending the message when you use `Send (MimeMessage message)`.\n"
      },
      {
        "user": "jstedfast",
        "created_at": "2015-05-04T11:21:30Z",
        "body": "Oh, I bet I know what the problem is: You aren't setting the Sender or From header, so MailKit will use whatever the Sender or From header existed in the message downloaded from the POP3 server.\n\nMy guess is that since the email address that MailKit is choosing to use as the sender is not your email address, GMail is (silently?) rejecting it.\n"
      }
    ]
  },
  {
    "number": 129,
    "title": "IsAttachment is false for Attachment.",
    "created_at": "2014-12-11T12:13:43Z",
    "closed_at": "2014-12-11T14:05:51Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jstedfast/MailKit/issues/129",
    "body": "I used Client.Inbox.Fetch(messagesUids, MessageSummaryItems.Full); for getting information from mailbox, and unfortunately for sent email i received there is no attachment.\nI used Gmail account, Imap, with email without subject and body.\n",
    "comments_url": "https://api.github.com/repos/jstedfast/MailKit/issues/129/comments",
    "author": "WesolyPierozek",
    "comments": [
      {
        "user": "jstedfast",
        "created_at": "2014-12-11T14:05:51Z",
        "body": "You need to request the BodyStructure (Full only requests Body which does not contain the needed information to determine if it is an attachment or not).\n\nI'm adding remarks for the IsAttachment, ContentDisposition, ContentLocation, and ContentLanguage properties to note that the BodyStructure flag must be used for these properties to be populated.\n"
      },
      {
        "user": "jstedfast",
        "created_at": "2014-12-11T14:11:19Z",
        "body": "In other words, try this:\n\n``` csharp\nclient.Inbox.Fetch(messagesUids, MessageSummaryItems.Full | MessageSummaryItems.BodyStructure);\n```\n"
      }
    ]
  }
]