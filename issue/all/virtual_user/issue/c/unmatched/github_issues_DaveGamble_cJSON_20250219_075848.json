[
  {
    "number": 229,
    "title": "Crashing program if calling cJSON on infinite loop",
    "created_at": "2018-01-04T23:02:53Z",
    "closed_at": "2018-01-06T09:14:26Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/DaveGamble/cJSON/issues/229",
    "body": "I use cJSON on programming STM32 and i calling cJSON on infinite loop.\r\nAfter run ~37 cycles program is crashed :(\r\n\r\nMay be cJSON_Delete is not work and memory leaking?\r\n\r\n```c\r\nchar *BLE_Transmit(void)\r\n{\r\n    char *BLE_JSON = NULL;\r\n    cJSON *BLE_OJSON = cJSON_CreateObject();\r\n    cJSON_AddStringToObject(BLE_OJSON, \"111\", \"111\");\r\n    cJSON_AddStringToObject(BLE_OJSON, \"222\", \"222\");\r\n    BLE_JSON = cJSON_Print(BLE_OJSON);\r\n    cJSON_Delete(BLE_OJSON);\r\n    return BLE_JSON;\r\n}\r\n\r\nwhile (1)\r\n  {\r\n      HAL_UART_Transmit(&huart1, (unsigned char*)  BLE_Transmit(), strlen( BLE_Transmit()),10);\r\n      HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);\r\n      HAL_Delay(100);\r\n  }\r\n```\r\nPlease help me...\r\n  \r\nThis error in function cJSON_Print. While i call without function cJSON_Print code is correct run.\r\n\r\n  ",
    "comments_url": "https://api.github.com/repos/DaveGamble/cJSON/issues/229/comments",
    "author": "leech001",
    "comments": [
      {
        "user": "FSMaxB",
        "created_at": "2018-01-05T20:38:47Z",
        "body": "Yes, this very much looks like a memory leak.\r\n\r\nYou create `BLE_JSON` with `cJSON_Print` and return it from `BLE_TRANSMIT`.  But the string needs to be freed. I guess that `HAL_UART_Transmit` doesn't free anything, so memory leaks and eventually you run out of memory.\r\n\r\nOnce out of memory, there might be different reasons why it would crash. For example `cJSON_Print` might return a `NULL` pointer that is then dereferenced somewhere or something like that."
      },
      {
        "user": "FSMaxB",
        "created_at": "2018-01-05T20:58:30Z",
        "body": "`strlen` might be the point where it crashes, because `strlen` doesn't necessarily check for `NULL` pointers, but it could also be somewhere else.\r\n\r\nThis should work:\r\n\r\n```c\r\nchar *BLE_Transmit(void)\r\n{\r\n\tchar *BLE_JSON = NULL;\r\n\tcJSON *BLE_OJSON = cJSON_CreateObject();\r\n\tcJSON_AddStringToObject(BLE_OJSON, \"111\", \"111\");\r\n\tcJSON_AddStringToObject(BLE_OJSON, \"222\", \"222\");\r\n\tBLE_JSON = cJSON_Print(BLE_OJSON);\r\n\tcJSON_Delete(BLE_OJSON);\r\n\treturn BLE_JSON;\r\n}\r\n\r\nint main(void)\r\n{\r\n\twhile (1)\r\n\t{\r\n\t\tunsigned char *json = (unsigned char*)BLE_TRANSMIT();\r\n\t\tif (json == NULL)\r\n\t\t{\r\n\t\t\t//do some error handling\r\n\t\t\tbreak;\r\n\t\t}\r\n\t\tHAL_UART_Transmit(&huart1, json, strlen(json), 10);\r\n\t\tfree(json); /* <---- */\r\n\t\tHAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);\r\n\t\tHAL_Delay(100);\r\n\t}\r\n}\r\n```\r\n\r\nIf you know that the JSON will always be below a certain length, you could also print the JSON withouth any heap allocations using `cJSON_PrintPreallocated`:\r\n\r\n```c\r\nchar *BLE_Transmit(unsigned char * const buffer, size_t buffer_size)\r\n{\r\n\tchar *BLE_JSON = NULL;\r\n\tcJSON *BLE_OJSON = cJSON_CreateObject();\r\n\tcJSON_AddStringToObject(BLE_OJSON, \"111\", \"111\");\r\n\tcJSON_AddStringToObject(BLE_OJSON, \"222\", \"222\");\r\n\tif (!cJSON_PrintPreallocated(BLE_OJSON, buffer, buffer_size, 1)) {\r\n\t\tcJSON_Delete(BLE_OJSON);\r\n\t\treturn NULL;\r\n\t}\r\n\tcJSON_Delete(BLE_OJSON);\r\n\treturn BLE_JSON;\r\n}\r\n\r\nint main(void)\r\n{\r\n\tunsigned char buffer[BUFFER_SIZE];\r\n\r\n\twhile (1)\r\n\t{\r\n\t\tif (BLE_TRANSMIT(buffer, sizeof(buffer)) == NULL)\r\n\t\t{\r\n\t\t\t//do some error handling\r\n\t\t\tbreak;\r\n\t\t}\r\n\t\tHAL_UART_Transmit(&huart1, buffer, strlen(buffer), 10);\r\n\t\tHAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);\r\n\t\tHAL_Delay(100);\r\n\t}\r\n}\r\n```\r\n\r\nAs it seems like you are transmitting Data via BLE, it probably doesn't need to be human readable, so formatting can be disabled. So you might want to use `cJSON_PrintUnformatted` or replace the `1` in the call to `cJSON_PrintPreallocated` with a `0`.\r\n\r\nIf `cJSON_PrintPreallocated` is not an option because you don't know the maximum length of your JSON, you can still reduce the number of heap allocations by using `cJSON_PrintBuffered` and giving it a buffer size that is long enough for the majority of JSONs.\r\n  "
      },
      {
        "user": "FSMaxB",
        "created_at": "2018-01-05T21:04:30Z",
        "body": "Also if you are rebuilding the same JSON over and over again with only small modifications, you don't really need to rebuild the entire thing over and over again. It should be enough to build it once, replace the changed items with one of the `cJSON_ReplaceItem` functions and then print it again.\r\n\r\nIf large subtrees of the JSON are statically known, these can be provided as Strings as `cJSON_Raw` type to avoid having to print them over and over again."
      }
    ]
  },
  {
    "number": 197,
    "title": "Copy some JSON element into a given JSON string",
    "created_at": "2017-08-25T12:21:01Z",
    "closed_at": "2017-08-25T15:22:34Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/DaveGamble/cJSON/issues/197",
    "body": "Hi,\r\n\r\nRunning this code make the program eat all available memory. It's actually the call to the `cJSON_AddItemToObject` function that does it.\r\n\r\n        cJSON *root = NULL;\r\n        cJSON *params = NULL;\r\n        cJSON *someparam = NULL;\r\n        const char *jsonString =\r\n                        \"{  \\\"params\\\":\"\\\r\n                        \"  {\"\\\r\n                        \"    \\\"someparam\\\":\"\\\r\n                        \"    {\"\\\r\n                        \"      \\\"attribute\\\": \\\"value\\\"\"\\\r\n                        \"    }\"\r\n                        \"  }\"\\\r\n                        \"}\";\r\n\r\n        root = cJSON_Parse(jsonString);\r\n        params = cJSON_GetObjectItem(root, \"params\");\r\n        someparam = cJSON_GetObjectItem(params, \"someparam\");\r\n        cJSON_AddItemToObject(params, \"someparam\", someparam);\r\n\r\n        printf(\"cJSON_Parse root : %s\\n\", cJSON_Print(root));\r\n        printf(\"cJSON_Parse params : %s\\n\", cJSON_Print(params));\r\n        printf(\"cJSON_Parse someparam : %s\\n\", cJSON_Print(someparam));\r\n\r\nObviously, I'm doing something wrong here and I'd like to have your feedback on how to re-insert an existing JSON element into a given JSON string, safely.\r\n\r\nThanks!",
    "comments_url": "https://api.github.com/repos/DaveGamble/cJSON/issues/197/comments",
    "author": "phsultan",
    "comments": [
      {
        "user": "FSMaxB",
        "created_at": "2017-08-25T15:14:51Z",
        "body": "This is incorrect because the elements of an object are stored in a doubly linked list. This means that if you add the same item twice, it's `next` and `prev` get messed up and create a cycle.\r\n\r\nActually it's not the `cJSON_AddItemToObject` function that eats all your memory. It's `cJSON_Print` that does! That is because the cycle of `someparam` pointing to itself as the next item ist equivalent to having an infinite list of `someparam` items that `cJSON_Print` tries to print out, thereby running out of memory.\r\n\r\nYou can fix this in one of two ways:\r\n1. Use `cJSON_DetachItemFromObject` in the line before `cJSON_AddItemToObject`. In that case you will have only one instance of it in the result.\r\n2. Duplicate `someparam` with `cJSON_Duplicate` before adding the duplicate with `cJSON_AddItemToObject`. Note though that having two objects with the same key doesn't make any sense!\r\n\r\n"
      }
    ]
  },
  {
    "number": 129,
    "title": "cjson_Delete doesn't free all memory",
    "created_at": "2017-03-21T13:28:41Z",
    "closed_at": "2017-03-21T13:54:29Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/DaveGamble/cJSON/issues/129",
    "body": "I using cJson ( C ) into an embedded project to parse a JSON object.\r\n\r\nAfter an intense debugging session I found a problem. The memory requested by the cJSON object isn't released completely. I found this problem printing on UART the free heap size.\r\n\r\nThis is my code:\r\n```c\r\ncJSON    *jsonObject;\r\ncJSON    *jsonItem;\r\nuint8_t  protocolVersion;\r\nchar     machineId[DATA_PROTOCOL_PROPERTY_MACHINE_ID_MAX_LEN];\r\n\r\n/* Free Heap: 22688 Byte */\r\njsonObject = cJSON_CreateObject();\r\n/* Free Heap: 22640 Byte. cJSON object uses 48 Byte */\r\n\r\njsonObject = cJSON_Parse( jsonMessage );\r\n\r\njsonItem = cJSON_GetObjectItem( jsonObject, \"ProtocolVerison\" );\r\nprotocolVersion = (uint8_t)jsonItem->valueint;\r\n\r\njsonItem = cJSON_GetObjectItem( jsonObject, \"MachineID\" );\r\nstrncpy( machineId, jsonItem->valuestring, SDK_DATA_PROTOCOL_PROPERTY_MACHINE_ID_MAX_LEN );\r\n\r\n/* Free Heap: 22152 Byte. cJSON object occupies 488 Byte */\r\ncJSON_Delete( jsonObject );\r\n/* Free Heap: 22640 Byte. cJSON object deleted */\r\n\r\n```\r\n\r\nThe difference between the free heap memory at start (22688 byte) and the free heap at the end ( 22640 byte ) is 48 byte equal to the cJSON object before start parsing.\r\n\r\nThis 48 byte, after several loop bring the system into a memory leak ( my application consume the entire heap).",
    "comments_url": "https://api.github.com/repos/DaveGamble/cJSON/issues/129/comments",
    "author": "fedex03",
    "comments": [
      {
        "user": "FSMaxB",
        "created_at": "2017-03-21T13:54:29Z",
        "body": "Yes, there is a memory leak in your code. Although it is not created by cJSON.\r\n\r\n```c\r\ncJSON    *jsonObject;\r\ncJSON    *jsonItem;\r\nuint8_t  protocolVersion;\r\nchar     machineId[SDK_DATA_PROTOCOL_PROPERTY_MACHINE_ID_MAX_LEN];\r\n\r\n/* This code mallocs your 48 bytes */\r\njsonObject = cJSON_CreateObject(); /* this line is unnecessary and creates the memory leak */\r\n\r\n/* here you are overwriting your pointer to the 48 bytes by overwriting it with the newly parsed object, thereby creating a memory leak */\r\njsonObject = cJSON_Parse( jsonMessage );\r\n/* please check if jsonObject is NULL and abort if it is */\r\n\r\njsonItem = cJSON_GetObjectItem( jsonObject, \"ProtocolVerison\" );\r\n/* same here, before using jsonItem, check if it is NULL */\r\n/* Also check the type, you can check if it is a number using cJSON_IsNumber(jsonItem) */\r\nprotocolVersion = (uint8_t)jsonItem->valueint;\r\n\r\njsonItem = cJSON_GetObjectItem( jsonObject, \"MachineID\" );\r\n/* same here, check if jsonItem is NULL and check if it is a string using cJSON_IsString(jsonItem) */\r\nstrncpy( machineId, jsonItem->valuestring, SDK_DATA_PROTOCOL_PROPERTY_MACHINE_ID_MAX_LEN ); /* you could also use sizeof(machineId) */\r\n\r\n/* This only frees what has been parsed by cJSON_Parse, your 48 bytes have already been lost earlier */\r\ncJSON_Delete( jsonObject );\r\n```"
      },
      {
        "user": "FSMaxB",
        "created_at": "2017-03-21T14:01:18Z",
        "body": "It has to, since it returns a pointer to a cJSON object. What you did would be correct if the return type were `cJSON` instead of `cJSON *`."
      }
    ]
  }
]