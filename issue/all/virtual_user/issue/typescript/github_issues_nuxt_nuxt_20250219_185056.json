[
  {
    "number": 9709,
    "title": "Run function for Vuex store on app start for default settings",
    "created_at": "2021-08-25T08:41:30Z",
    "closed_at": "2021-08-25T16:10:16Z",
    "labels": [
      "question",
      "2.x"
    ],
    "url": "https://github.com/nuxt/nuxt/issues/9709",
    "body": "<!-- \ud83d\udc9a Thanks for your time to make Nuxt better with your feedbacks \ud83d\udc9a -->\r\n\r\n### Is your feature request related to a problem? Please describe.\r\n\r\nI'm using Nuxt JS to build a hybrid app that uses Capacitor JS. I'm using the Vuex store in my project to create some default, initial settings for my app if a user hasn't previously changed a setting in the app. Once a user changes a setting in the app, I dispatch a function to the Vuex store to then update the appropriate setting, it then works just fine whilst navigating the app but when the app is forcefully closed and re-opened, I need to run `setDefaultSettings` to populate the `app_settings` before the view loads.\r\n\r\n### Describe the solution you'd like\r\n\r\nI'd like to be able to simply specify a function, say, at the bottom of my Vuex store file which runs `setDefaultSettings` when the website/app loads\r\n\r\n### Describe alternatives you've considered\r\n\r\nMy current Vuex store file, `storage.js` looks like this:\r\n\r\n```javascript\r\nexport const state = () => ({\r\n  app_settings: {\r\n    theme: 'system',\r\n    refreshButtonPlacement: 'right',\r\n    fetchTimeout: 120\r\n  }\r\n})\r\n\r\nasync function getData (storage, key) {\r\n  const { value } = await storage.get({ key: key })\r\n  return value\r\n}\r\n\r\n\r\nexport const mutations = {\r\n\r\n  /*\r\n   * Set default settings on app launch\r\n   */\r\n  async setDefaultSettings (state) {\r\n    const theme = await getData(this.$CapacitorStorage, 'theme')\r\n    const refreshButtonPlacement = await getData(this.$CapacitorStorage, 'refreshButtonPlacement')\r\n    const fetchTimeout = await getData(this.$CapacitorStorage, 'fetchTimeout')\r\n\r\n    if (theme) {\r\n      state.app_settings.theme = theme ? theme : 'system'\r\n    }\r\n    if (refreshButtonPlacement) {\r\n      state.app_settings.refreshButtonPlacement = refreshButtonPlacement ? refreshButtonPlacement : 'right'\r\n    }\r\n    if (fetchTimeout != null) {\r\n      state.app_settings.fetchTimeout = fetchTimeout != null ? fetchTimeout : 120\r\n    }\r\n  },\r\n\r\n  /*\r\n   * Update app setting\r\n   */\r\n  async updateSetting (state, data) {\r\n    state.app_settings[data.key] = data.value\r\n\r\n    await this.$CapacitorStorage.set({\r\n      key: data.key,\r\n      value: data.value\r\n    })\r\n  }\r\n\r\n}\r\n```\r\n\r\nRight now, as a hacky workaround I'm using my app's `index.vue` file, which is a blank file to effectively run `this.$store.commit('storage/setDefaultSettings')` from within my `created` hook, which then redirects the user to the appropriate pages in the app, and since the user can't change URLs easily, this works fine, but I really need to be able to simply run `setDefaultSettings` whenever the app is started and the file is loaded.\r\n\r\n### Additional context\r\n\r\nMaybe there's already an approach I can take?\r\n",
    "comments_url": "https://api.github.com/repos/nuxt/nuxt/issues/9709/comments",
    "author": "sts-ryan-holton",
    "comments": [
      {
        "user": "danielroe",
        "created_at": "2021-08-25T09:36:03Z",
        "body": "@sts-ryan-holton This would fit naturally in a Nuxt plugin."
      },
      {
        "user": "sts-ryan-holton",
        "created_at": "2021-08-25T11:59:18Z",
        "body": "@danielroe Any pointers for running my required function in a Vuex store from within a nuxt plugin?"
      },
      {
        "user": "danielroe",
        "created_at": "2021-08-25T12:58:33Z",
        "body": "@sts-ryan-holton \n\nSomething like:\n```js\nexport default ({ store }) => store.dispatch('myAction')\n```"
      }
    ]
  }
]