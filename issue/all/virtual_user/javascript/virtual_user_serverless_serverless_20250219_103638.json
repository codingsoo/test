[
  {
    "id": "https://github.com/serverless/serverless/issues/11553",
    "source": {
      "issue_number": 11553
    },
    "initial_question": {
      "title": "Error: 'import' and 'export' may appear only with 'sourceType: module', When running sls deploy",
      "body": "### Are you certain it's a bug?\n\n- [x] Yes, it looks like a bug\n\n### Is the issue caused by a plugin?\n\n- [X] It is not a plugin issue\n\n### Are you using the latest v3 release?\n\n- [X] Yes, I'm using the latest v3 release\n\n### Is there an existing issue for this?\n\n- [X] I have searched existing issues, it hasn't been reported yet\n\n### Issue description\n\nrunning a deploy throws an Error: 'import' and 'export' may appear only with 'sourceType: module'.\r\n\r\nTrying setting \"sourceType\" to \"module\" and it didn't work.\n\n### Service configuration (serverless.yml) content\n\n```yaml\nservice: nest-serverless-lambda\r\n\r\nplugins:\r\n - 'serverless-plugin-typescript'\r\n - serverless-plugin-optimize\r\n - serverless-offline\r\n - serverless-webpack\r\n\r\nprovider:\r\n name: aws\r\n runtime: nodejs14.x\r\n\r\nfunctions:\r\n oa-staging-backend:\r\n   handler: packages/backend/src/app/lambda.handler\r\n   events:\r\n     - http:\r\n         method: any\r\n         path: /{any+}\n```\n\n\n### Command name and used flags\n\nsls deploy --verbose --debug \"*\"\n\n### Command output\n\n```shell\nlifecycle:command:invoke:hook: [17]   > before:package:createDeploymentArtifacts\r\nlifecycle:command:invoke:hook: [17]   < before:package:createDeploymentArtifacts\r\nOptimize: starting engines\r\nOptimize: nest-serverless-lambda-dev-oa-staging-backend\r\naws: [1] { Error: connect EHOSTDOWN 169.254.169.254:80 - Local (172.20.10.8:65007)\r\n    at internalConnect (net.js:934:16)\r\n    at defaultTriggerAsyncIdScope (internal/async_hooks.js:452:18)\r\n    at net.js:1022:9\r\n    at processTicksAndRejections (internal/process/task_queues.js:77:11)\r\n  message: 'Missing credentials in config, if using AWS_CONFIG_FILE, set AWS_SDK_LOAD_CONFIG=1',\r\n  errno: -64,\r\n  code: 'CredentialsError',\r\n  syscall: 'connect',\r\n  address: '169.254.169.254',\r\n  port: 80,\r\n  time: 2022-11-25T16:30:10.671Z,\r\n  originalError:\r\n   { message: 'Could not load credentials from any providers',\r\n     errno: -64,\r\n     code: 'CredentialsError',\r\n     syscall: 'connect',\r\n     address: '169.254.169.254',\r\n     port: 80,\r\n     time: 2022-11-25T16:30:10.671Z,\r\n     originalError:\r\n      { message: 'EC2 Metadata roleName request returned error',\r\n        errno: -64,\r\n        code: 'EHOSTDOWN',\r\n        syscall: 'connect',\r\n        address: '169.254.169.254',\r\n        port: 80,\r\n        time: 2022-11-25T16:30:10.671Z,\r\n        originalError:\r\n         { errno: -64,\r\n           code: 'EHOSTDOWN',\r\n           syscall: 'connect',\r\n           address: '169.254.169.254',\r\n           port: 80,\r\n           message: 'connect EHOSTDOWN 169.254.169.254:80 - Local (172.20.10.8:65007)' } } } }\r\nlifecycle:command:invoke:hook: [17]   > before:package:createDeploymentArtifacts\r\nlifecycle:command:invoke:hook: [1] > before:deploy:deploy\r\n\r\n\u2716 Stack nest-serverless-lambda-dev failed to deploy (89s)\r\nprocess: handle error\r\nprocess: finalize { error:\r\n   { [SyntaxError: 'import' and 'export' may appear only with 'sourceType: module']\r\n     message: \"'import' and 'export' may appear only with 'sourceType: module'\",\r\n     line: 1,\r\n     column: 1,\r\n     annotated:\r\n      \"\\n/Users/bassel/oa-monorep/.build/node_modules/@nestjs/axios/node_modules/axios/index.js:1\\nimport axios from './lib/axios.js';\\n^\\nParseError: 'import' and 'export' may appear only with 'sourceType: module'\",\r\n     stream:\r\n      Labeled {\r\n        _readableState:\r\n         ReadableState {\r\n           objectMode: true,\r\n           highWaterMark: 16,\r\n           buffer: BufferList { length: 0 },\r\n           length: 0,\r\n           pipes:\r\n            Labeled {\r\n              _readableState: [ReadableState],\r\n              readable: true,\r\n              [domain]: null,\r\n              _events: [Object: null prototype],\r\n              _eventsCount: 8,\r\n              _maxListeners: undefined,\r\n              _writableState: [WritableState],\r\n              writable: true,\r\n              allowHalfOpen: true,\r\n              _options: [Object],\r\n              _wrapOptions: [Object],\r\n              _streams: [Array],\r\n              length: 1,\r\n              label: 'sort',\r\n              [Symbol(kCapture)]: false,\r\n              _writev: null,\r\n              [writableHighWaterMark]: [Getter],\r\n              [destroyed]: [Getter/Setter] },\r\n           pipesCount: 1,\r\n           flowing: true,\r\n           ended: false,\r\n           endEmitted: false,\r\n           reading: true,\r\n           sync: false,\r\n           needReadable: true,\r\n           emittedReadable: false,\r\n           readableListening: false,\r\n           resumeScheduled: false,\r\n           destroyed: false,\r\n           defaultEncoding: 'utf8',\r\n           awaitDrain: 0,\r\n           readingMore: false,\r\n           decoder: null,\r\n           encoding: null },\r\n        readable: true,\r\n        [domain]: null,\r\n        _events:\r\n         [Object: null prototype] {\r\n           end: [ [Function], [Function], [Function], [length]: 3 ],\r\n           finish: { [Function: bound onceWrapper] [length]: 0, [name]: 'bound onceWrapper', listener: [Function] },\r\n           error: { [Function (anonymous)] [length]: 1, [name]: '', [arguments]: null, [caller]: null, [prototype]: [Object] },\r\n           data: { [Function: ondata] [length]: 1, [name]: 'ondata', [prototype]: [Object] },\r\n           _mutate: { [Function: bound onceWrapper] [length]: 0, [name]: 'bound onceWrapper', listener: [Function] } },\r\n        _eventsCount: 5,\r\n        _maxListeners: undefined,\r\n        _writableState:\r\n         WritableState {\r\n           objectMode: true,\r\n           highWaterMark: 16,\r\n           finalCalled: false,\r\n           needDrain: false,\r\n           ending: false,\r\n           ended: false,\r\n           finished: false,\r\n           destroyed: false,\r\n           decodeStrings: true,\r\n           defaultEncoding: 'utf8',\r\n           length: 1,\r\n           writing: true,\r\n           corked: 0,\r\n           sync: false,\r\n           bufferProcessing: false,\r\n           onwrite: { [Function (anonymous)] [length]: 1, [name]: '', [prototype]: [Object] },\r\n           writecb: { [Function: nop] [length]: 0, [name]: 'nop', [prototype]: [Object] },\r\n           writelen: 1,\r\n           bufferedRequest: null,\r\n           lastBufferedRequest: null,\r\n           pendingcb: 1,\r\n           prefinished: false,\r\n           errorEmitted: false,\r\n           bufferedRequestCount: 0,\r\n           corkedRequestsFree: CorkedRequest { next: null, entry: null, finish: [Function] },\r\n           [buffer]: [Getter] },\r\n        writable: true,\r\n        allowHalfOpen: true,\r\n        _options: { objectMode: true },\r\n        _wrapOptions: { objectMode: true },\r\n        _streams:\r\n         [ DestroyableTransform {\r\n             _readableState: [ReadableState],\r\n             readable: true,\r\n             [domain]: null,\r\n             _events: [Object: null prototype],\r\n             _eventsCount: 4,\r\n             _maxListeners: undefined,\r\n             _writableState: [WritableState],\r\n             writable: true,\r\n             allowHalfOpen: true,\r\n             _transformState: [Object],\r\n             _destroyed: false,\r\n             _transform: [Function],\r\n             [Symbol(kCapture)]: false,\r\n             _writev: null,\r\n             [writableHighWaterMark]: [Getter],\r\n             [destroyed]: [Getter/Setter] },\r\n           [length]: 1 ],\r\n        length: 1,\r\n        label: 'syntax',\r\n        [Symbol(kCapture)]: false,\r\n        _writev: null,\r\n        [writableHighWaterMark]: [Getter],\r\n        [destroyed]: [Getter/Setter] } },\r\n  shouldBeSync: undefined,\r\n  telemetryData: undefined,\r\n  shouldSendTelemetry: undefined }\r\nEnvironment: darwin, node 14.19.0, framework 3.25.0, plugin 6.2.2, SDK 4.3.2\r\nDocs:        docs.serverless.com\r\nSupport:     forum.serverless.com\r\nBugs:        github.com/serverless/serverless/issues\r\n\r\nError:\r\n'import' and 'export' may appear only with 'sourceType: module'\r\nauth: start with cached data: {}, expires NaN\r\nauth: resolved data from config: {}\r\nauth: mode: null\r\ntelemetry: payload { ciName: null,\r\n  isTtyTerminal: true,\r\n  cliName: 'serverless',\r\n  command: 'deploy',\r\n  commandOptionNames: [ 'verbose', 'debug', 'stage', 'region', [length]: 4 ],\r\n  console: { isAuthenticated: false },\r\n  dashboard: { userId: null, orgUid: undefined },\r\n  firstLocalInstallationTimestamp: 1669305495,\r\n  frameworkLocalUserId: 'cde0c610-6c10-11ed-8287-49d5a986a63d',\r\n  installationType: 'global:npm',\r\n  isAutoUpdateEnabled: false,\r\n  isUsingCompose: false,\r\n  notificationsMode: 'on',\r\n  timestamp: 1669393812432,\r\n  timezone: 'Asia/Beirut',\r\n  triggeredDeprecations: [ [length]: 0 ],\r\n  versions: { serverless: '3.25.0', '@serverless/dashboard-plugin': '6.2.2' },\r\n  commandDurationMs: 93817,\r\n  hasLocalCredentials: false,\r\n  npmDependencies:\r\n   [ '@emotion/react',\r\n     '@emotion/server',\r\n     '@fortawesome/fontawesome-svg-core',\r\n     '@fortawesome/free-regular-svg-icons',\r\n     '@fortawesome/free-solid-svg-icons',\r\n     '@fortawesome/react-fontawesome',\r\n     '@mantine/core',\r\n     '@mantine/form',\r\n     '@mantine/hooks',\r\n     '@mantine/next',\r\n     '@mantine/notifications',\r\n     '@nestjs/axios',\r\n     '@nestjs/common',\r\n     '@nestjs/config',\r\n     '@nestjs/core',\r\n     '@nestjs/passport',\r\n     '@nestjs/platform-express',\r\n     '@prisma/client',\r\n     'amazon-cognito-identity-js',\r\n     'aws-amplify',\r\n     'aws-lambda',\r\n     'aws-serverless-express',\r\n     'core-js',\r\n     'jwks-rsa',\r\n     'next',\r\n     'passport',\r\n     'passport-jwt',\r\n     'react',\r\n     'react-dom',\r\n     'reflect-metadata',\r\n     'regenerator-runtime',\r\n     'rxjs',\r\n     'tslib',\r\n     'zod',\r\n     '@nestjs/schematics',\r\n     '@nestjs/swagger',\r\n     '@nestjs/testing',\r\n     '@nrwl/cli',\r\n     '@nrwl/cypress',\r\n     '@nrwl/eslint-plugin-nx',\r\n     '@nrwl/jest',\r\n     '@nrwl/js',\r\n     '@nrwl/linter',\r\n     '@nrwl/nest',\r\n     '@nrwl/next',\r\n     '@nrwl/node',\r\n     '@nrwl/react',\r\n     '@nrwl/web',\r\n     '@nrwl/workspace',\r\n     '@testing-library/react',\r\n     '@types/aws-serverless-express',\r\n     '@types/jest',\r\n     '@types/node',\r\n     '@types/passport-jwt',\r\n     '@types/react',\r\n     '@types/react-dom',\r\n     '@typescript-eslint/eslint-plugin',\r\n     '@typescript-eslint/parser',\r\n     'babel-jest',\r\n     'babel-preset-es2015',\r\n     'class-validator',\r\n     'cypress',\r\n     'eslint',\r\n     'eslint-config-next',\r\n     'eslint-config-prettier',\r\n     'eslint-plugin-cypress',\r\n     'eslint-plugin-import',\r\n     'eslint-plugin-jsx-a11y',\r\n     'eslint-plugin-react',\r\n     'eslint-plugin-react-hooks',\r\n     'jest',\r\n     'jest-environment-jsdom',\r\n     'nx',\r\n     'plugin',\r\n     'prettier',\r\n     'prisma',\r\n     'react-test-renderer',\r\n     'sass',\r\n     'serverless-offline',\r\n     'serverless-plugin-optimize',\r\n     'serverless-plugin-typescript',\r\n     'serverless-webpack',\r\n     'ts-jest',\r\n     'ts-node',\r\n     'typescript',\r\n     [length]: 85 ],\r\n  config:\r\n   { configValidationMode: 'warn',\r\n     provider: { name: 'aws', runtime: 'nodejs14.x', stage: 'dev', region: 'us-east-1' },\r\n     variableSources: [ [length]: 0 ],\r\n     plugins:\r\n      [ 'serverless-plugin-typescript', 'serverless-plugin-optimize', 'serverless-offline', 'serverless-webpack', [length]: 4 ],\r\n     functions: [ { url: false, runtime: 'nodejs14.x', events: [ [Object], [length]: 1 ] }, [length]: 1 ],\r\n     resources: { general: [ [length]: 0 ] },\r\n     paramsCount: 0 },\r\n  isConfigValid: true,\r\n  didCreateService: false,\r\n  commandUsage: {} }\n```\n\n\n### Environment information\n\n```shell\nFramework Core: 3.25.0\r\nPlugin: 6.2.2\r\nSDK: 4.3.2\n```\n"
    },
    "satisfaction_conditions": [
      "The application must be able to use axios dependencies"
    ],
    "created_at": "2022-11-25T16:34:24Z"
  },
  {
    "id": "https://github.com/serverless/serverless/issues/9753",
    "source": {
      "issue_number": 9753
    },
    "initial_question": {
      "title": "Unable to override `service` using command option",
      "body": "In my previous projects I was configuring the name of the service using a command option. This let my team each deploy their own stack using a unique CF stack name. This was done by setting `service: ${opt:serviceName, 'default-service-name'}`.\r\n\r\nSince version 2.32.0, when attempting this, the commands fail with the following error: `Cannot resolve serverless.yml: \"service\" property is not accessible (configured behind variables which cannot be resolved at this stage)`.\r\n\r\nIf I switch to using an environment variable instead of a command options (`${opt:....` to ${env:....`) then it will succeed.\r\n\r\n<details>\r\n<summary><code>serverless.yml</code></summary>\r\n\r\n```yaml\r\nservice: ${opt:serviceName, 'hermes'}\r\nframeworkVersion: '2'\r\nvariablesResolutionMode: 20210326\r\n\r\nprovider:\r\n  name: aws\r\n  runtime: go1.x\r\n  lambdaHashingVersion: 20201221\r\n  memorySize: 512\r\n  versionFunctions: false\r\n  logRetentionInDays: 14\r\n  tracing:\r\n    apiGateway: true\r\n    lambda: 'Active'\r\n  deploymentBucket:\r\n    blockPublicAccess: true\r\n    name: catalog.${self:provider.region}.deploys\r\n  iam:\r\n    role:\r\n      statements:\r\n        - Effect: Allow\r\n          Action:\r\n            - xray:PutTraceSegments\r\n            - xray:PutTelemetryRecords\r\n          Resource: \"*\"\r\n  environment:\r\n    SERVICE_NAME: ${self:service}\r\n\r\nplugins:\r\n  - serverless-go-plugin\r\n\r\nfunctions:\r\n  hello:\r\n    handler: function/hello/main.go\r\n    events:\r\n      - httpApi:\r\n          path: /hello\r\n          method: get\r\n```\r\n</details>\r\n\r\n<!--\r\nQ3: Provide (in below placeholder) FULL name and output of the command that exposes the problem.\r\n       Note: Ensure SLS_DEBUG=* env var for verbose debug output\r\n-->\r\n\r\n<details>\r\n<summary><b><code>serverless deploy --serviceName dev1-hermes</code> output</b></summary>\r\n\r\n```\r\n Serverless Error ----------------------------------------\r\n\r\n  Cannot resolve serverless.yml: \"service\" property is not accessible (configured behind variables which cannot be resolved at this stage)\r\n\r\n  Get Support --------------------------------------------\r\n     Docs:          docs.serverless.com\r\n     Bugs:          github.com/serverless/serverless/issues\r\n     Issues:        forum.serverless.com\r\n\r\n  Your Environment Information ---------------------------\r\n     Operating System:          darwin\r\n     Node Version:              14.15.3\r\n     Framework Version:         2.44.0\r\n     Plugin Version:            5.2.0\r\n     SDK Version:               4.2.3\r\n     Components Version:        3.11.0\r\n```\r\n\r\n</details>\r\n\r\n\r\n<b>Installed version</b>\r\n\r\n```\r\nServerless: Running \"serverless\" installed locally (in service node_modules)\r\nFramework Core: 2.52.0 (local)\r\nPlugin: 5.4.3\r\nSDK: 4.2.3\r\nComponents: 3.13.4\r\n```\r\n"
    },
    "satisfaction_conditions": [
      "Service name must be configurable at deployment time",
      "Configuration method must be compatible with the new variables resolution mode",
      "Service name must be accessible during the early stages of serverless framework initialization",
      "Solution must work with Serverless Framework version 2.32.0 and newer",
      "Service name must be usable in other serverless.yml configurations"
    ],
    "created_at": "2021-07-15T15:41:35Z"
  },
  {
    "id": "https://github.com/serverless/serverless/issues/9715",
    "source": {
      "issue_number": 9715
    },
    "initial_question": {
      "title": "Unable to configure provisioned concurrency 0",
      "body": "<!--\r\nQ1: Describe the problem (use case) that needs to be solved:\r\n-->\r\n\r\nWhen using `configValidationMode: error` and provisioned concurrency is set to 0 for some function, an error is thrown requiring:\r\n```\r\nConfiguration error at 'functions.authorizer.provisionedConcurrency': should be >= 1\r\n```\r\n\r\n### Use case description\r\n\r\nThis would be useful in cases where provisioned concurrency is only desired for certain stage deployments.  It allows the provisioned concurrency configuration to be conditional.\r\n\r\n<!--\r\nQ2: Propose a solution (e.g. provide configuration example)\r\n-->\r\n\r\n### Proposed solution\r\n\r\nAllow provisioned concurrency 0 - it currently works without `configValidationMode: error`, which is useful in cases where provisioned currency is only desired for certain stage deployments.  It allows the provisioned concurrency configuration to be conditional.\r\n\r\n```\r\nfunctions:\r\n  authorizer:\r\n    handler: handler\r\n    provisionedConcurrency: ${self:custom.config.authorizer-provisioned-concurrency}\r\n```\r\n"
    },
    "satisfaction_conditions": [
      "Configuration allows conditional provisioned concurrency based on deployment stage",
      "Configuration remains valid when using configValidationMode: error",
      "Variable resolution succeeds when no value is provided",
      "Function deployment succeeds with effectively no provisioned concurrency"
    ],
    "created_at": "2021-07-07T15:25:12Z"
  },
  {
    "id": "https://github.com/serverless/serverless/issues/7480",
    "source": {
      "issue_number": 7480
    },
    "initial_question": {
      "title": "Can't deploy to AWS China regions",
      "body": "# Bug Report\r\n\r\n## Description\r\n\r\n1. What did you do?\r\ncreate an simple lambda function using aws-nodejs sample. \r\nDeploy the application using sls deploy.\r\n\r\n1. What happened?\r\n\r\nReceived error saying security token is invalid. I did have IAM admin AK/SK configured for AWS China regions. \r\n\r\n```bash\r\n8c85909aaff7:serverless-aws-nodejs sunhua$ aws sts get-caller-identity --profile china --region cn-northwest-1\r\n{\r\n    \"Account\": \"xxxxxxxxxxxxx\",\r\n    \"UserId\": \"AIDAOUZ3VMBZOM4GMPZ7E\",\r\n    \"Arn\": \"arn:aws-cn:iam::xxxxxxxxxxxxx:user/admin\"\r\n}\r\n8c85909aaff7:serverless-aws-nodejs sunhua$ sls deploy --profile china --region cn-northwest-1\r\nServerless: Packaging service...\r\nServerless: Excluding development dependencies...\r\n\r\n  Serverless Error ---------------------------------------\r\n\r\n  The security token included in the request is invalid.\r\n\r\n  Get Support --------------------------------------------\r\n     Docs:          docs.serverless.com\r\n     Bugs:          github.com/serverless/serverless/issues\r\n     Issues:        forum.serverless.com\r\n\r\n  Your Environment Information ---------------------------\r\n     Operating System:          darwin\r\n     Node Version:              12.16.1\r\n     Framework Version:         1.66.0\r\n     Plugin Version:            3.5.0\r\n     SDK Version:               2.3.0\r\n     Components Version:        2.22.3\r\n\r\n\r\n```\r\n1. What should've happened?\r\n\r\nThe deploy should succeed. \r\n\r\n1. What's the content of your `serverless.yml` file?\r\n\r\n```\r\n\r\nservice: projects\r\n\r\nprovider:\r\n  name: aws\r\n  runtime: nodejs12.x\r\n\r\n  stage: dev\r\n  region: cn-northwest-1\r\n  endpointType: REGIONAL\r\n\r\nfunctions:\r\n  hello:\r\n    handler: handler.hello\r\n\r\n\r\n```\r\n\r\n\r\n1. What's the output you get when you use the `SLS_DEBUG=*` environment variable (e.g. `SLS_DEBUG=* serverless deploy`)\r\n\r\n```\r\nServerless: Load command interactiveCli\r\nServerless: Load command config\r\nServerless: Load command config:credentials\r\nServerless: Load command config:tabcompletion\r\nServerless: Load command config:tabcompletion:install\r\nServerless: Load command config:tabcompletion:uninstall\r\nServerless: Load command create\r\nServerless: Load command install\r\nServerless: Load command package\r\nServerless: Load command deploy\r\nServerless: Load command deploy:function\r\nServerless: Load command deploy:list\r\nServerless: Load command deploy:list:functions\r\nServerless: Load command invoke\r\nServerless: Load command invoke:local\r\nServerless: Load command info\r\nServerless: Load command logs\r\nServerless: Load command metrics\r\nServerless: Load command print\r\nServerless: Load command remove\r\nServerless: Load command rollback\r\nServerless: Load command rollback:function\r\nServerless: Load command slstats\r\nServerless: Load command plugin\r\nServerless: Load command plugin\r\nServerless: Load command plugin:install\r\nServerless: Load command plugin\r\nServerless: Load command plugin:uninstall\r\nServerless: Load command plugin\r\nServerless: Load command plugin:list\r\nServerless: Load command plugin\r\nServerless: Load command plugin:search\r\nServerless: Load command config\r\nServerless: Load command config:credentials\r\nServerless: Load command rollback\r\nServerless: Load command rollback:function\r\nServerless: Load command upgrade\r\nServerless: Load command uninstall\r\nServerless: Load command login\r\nServerless: Load command logout\r\nServerless: Load command generate-event\r\nServerless: Load command test\r\nServerless: Load command dashboard\r\nServerless: Load command output\r\nServerless: Load command output:get\r\nServerless: Load command output:list\r\nServerless: Load command param\r\nServerless: Load command param:get\r\nServerless: Load command param:list\r\nServerless: Invoke deploy\r\nServerless: Invoke package\r\nServerless: Invoke aws:common:validate\r\nServerless: Invoke aws:common:cleanupTempDir\r\nServerless: Packaging service...\r\nServerless: Excluding development dependencies...\r\nServerless: Invoke aws:package:finalize\r\nServerless: Invoke aws:common:moveArtifactsToPackage\r\nServerless: Invoke aws:common:validate\r\nServerless: Invoke aws:deploy:deploy\r\nServerless: [AWS cloudformation 403 1.528s 0 retries] describeStacks({ StackName: 'projects-dev' })\r\n\r\n  Serverless Error ---------------------------------------\r\n\r\n  ServerlessError: The security token included in the request is invalid.\r\n      at /Users/sunhua/.nvm/versions/node/v12.16.1/lib/node_modules/serverless/lib/plugins/aws/provider/awsProvider.js:331:27\r\n      at processTicksAndRejections (internal/process/task_queues.js:97:5)\r\n\r\n  Get Support --------------------------------------------\r\n     Docs:          docs.serverless.com\r\n     Bugs:          github.com/serverless/serverless/issues\r\n     Issues:        forum.serverless.com\r\n\r\n  Your Environment Information ---------------------------\r\n     Operating System:          darwin\r\n     Node Version:              12.16.1\r\n     Framework Version:         1.66.0\r\n     Plugin Version:            3.5.0\r\n     SDK Version:               2.3.0\r\n     Components Version:        2.22.3\r\n```\r\n\r\n"
    },
    "satisfaction_conditions": [
      "AWS credentials must be recognized as valid for China regions"
    ],
    "created_at": "2020-03-18T09:45:09Z"
  },
  {
    "id": "https://github.com/serverless/serverless/issues/7228",
    "source": {
      "issue_number": 7228
    },
    "initial_question": {
      "title": "Adding Kinesis stream as a trigger for lambda",
      "body": "I am trying to add a kinesis stream as an event trigger, below is the snippet from serverless.yml\r\n\r\n```\r\n    events:\r\n      - stream:\r\n          type: kinesis\r\n          streamName: helper\r\n          arn: arn:aws:kinesis:us-east-1:737373737505:stream/helper\r\n          bisectBatchOnFunctionError: true\r\n          batchSize: 11\r\n          maximumRetryAttempts: 10\r\n          startingPosition: LATEST\r\n          parallelizationFactor: 10\r\n          enabled: true \r\n```\r\nNote: The kinesis stream already exist in the system\r\n\r\nThe deployment  is successful but some of the configuration is ignored, didn't find it in the generated  CFT as well.\r\n\r\nBelow is the generated CFT for the trigger:\r\n```\r\n  OrderEventSourceMappingKinesisHelper\r\n    Type: 'AWS::Lambda::EventSourceMapping'\r\n    DependsOn: IamRoleLambdaExecution\r\n    Properties:\r\n      BatchSize: 11\r\n      EventSourceArn: 'arn:aws:kinesis:us-east-1:737373737505:stream/helper'\r\n      FunctionName: !GetAtt \r\n        - ProcessorLambdaFunction\r\n        - Arn\r\n      StartingPosition: LATEST\r\n      Enabled: 'True'\r\n```\r\nBelow is the details of the added trigger:\r\n```\r\n**Details**\r\nBatch size: 11\r\nBatch window: None\r\nConcurrent batches per shard: 1\r\nLast processing result: No records processed\r\nMaximum age of record: 604800\r\nOn-failure destination:\r\n{\r\n  \"onFailure\": {}\r\n}\r\nRetry attempts: 10000\r\nSplit batch on error: No\r\n```\r\n\r\nparallelizationFactor & bisectBatchOnFunctionError are ignored, did I miss anything or is it a bug?\r\n\r\n"
    },
    "satisfaction_conditions": [
      "Existing Kinesis stream is properly referenced and integrated"
    ],
    "created_at": "2020-01-16T22:49:11Z"
  },
  {
    "id": "https://github.com/serverless/serverless/issues/6803",
    "source": {
      "issue_number": 6803
    },
    "initial_question": {
      "title": "The CloudFormation template is invalid: Template format error: Number of resources, 202, is greater than maximum allowed",
      "body": "# Bug Report\r\n\r\n## Description\r\nI opened a ticket within AWS Support and they have increased our CF Stack limit to 500 resources. Even though the limit was increased, Serverless is still throwing the error in the title.\r\n\r\nObviously our limit is not 200 anymore but 500 instead and Serverless keeps telling that the It is still 200, why? \r\n\r\nHow can I use Serverless with more than 200 resources now that the limit has been increased?\r\n\r\n\r\n1. What did you do?\r\n   sls deploy\r\n1. What happened?\r\n   The CloudFormation template is invalid: Template format error: Number of resources, 202, is greater than maximum allowed\r\n1. What should've happened?\r\n    Successfully deploy\r\n1. What's the content of your `serverless.yml` file?\r\n     Does not matter\r\n1. What's the output you get when you use the `SLS_DEBUG=*` environment variable (e.g. `SLS_DEBUG=* serverless deploy`)\r\n    Serverless: Packaging service...\r\nServerless: Excluding development dependencies...\r\nServerless: Uploading CloudFormation file to S3...\r\nServerless: Uploading artifacts...\r\nServerless: Uploading service dialog-manager.zip file to S3 (10.66 MB)...\r\nServerless: Validating template...\r\nUnhandled rejection Error: The CloudFormation template is invalid: Template format error: Number of resources, 202, is greater than maximum allowed, 200\r\n    at provider.request.catch.error (/usr/local/lib/node_modules/serverless/lib/plugins/aws/deploy/lib/validateTemplate.js:19:13)\r\n    at tryCatcher (/usr/local/lib/node_modules/serverless/node_modules/bluebird/js/release/util.js:16:23)\r\n    at Promise._settlePromiseFromHandler (/usr/local/lib/node_modules/serverless/node_modules/bluebird/js/release/promise.js:517:31)\r\n    at Promise._settlePromise (/usr/local/lib/node_modules/serverless/node_modules/bluebird/js/release/promise.js:574:18)\r\n    at Promise._settlePromise0 (/usr/local/lib/node_modules/serverless/node_modules/bluebird/js/release/promise.js:619:10)\r\n    at Promise._settlePromises (/usr/local/lib/node_modules/serverless/node_modules/bluebird/js/release/promise.js:695:18)\r\n    at _drainQueueStep (/usr/local/lib/node_modules/serverless/node_modules/bluebird/js/release/async.js:138:12)\r\n    at _drainQueue (/usr/local/lib/node_modules/serverless/node_modules/bluebird/js/release/async.js:131:9)\r\n    at Async._drainQueues (/usr/local/lib/node_modules/serverless/node_modules/bluebird/js/release/async.js:147:5)\r\n    at Immediate.Async.drainQueues (/usr/local/lib/node_modules/serverless/node_modules/bluebird/js/release/async.js:17:14)\r\n    at runCallback (timers.js:810:20)\r\n    at tryOnImmediate (timers.js:768:5)\r\n    at processImmediate [as _immediateCallback] (timers.js:745:5)\r\n\r\nSimilar or dependent issues:\r\n\r\n- #5999\r\n"
    },
    "satisfaction_conditions": [
      "Solution must distinguish between stack limits and template resource limits"
    ],
    "created_at": "2019-10-08T10:06:35Z"
  },
  {
    "id": "https://github.com/serverless/serverless/issues/6590",
    "source": {
      "issue_number": 6590
    },
    "initial_question": {
      "title": "remove a stage try to delete the whole stack instead",
      "body": "# This is a Bug Report\r\n\r\n## Description\r\nDeploying an application on two stages, dev/prod, work without any problem.\r\n\r\n- What went wrong?\r\nIf you tried to delete a stage, `slss` will attempt to **remove the whole stack** instead of just removing the specific stage, and will return the following error.\r\n\r\n```shell\r\n  An error occurred: ServerlessDeploymentBucket - The bucket you tried to delete is not empty (Service: Amazon S3; Status Code: 409; Error Code: BucketNotEmpty; Request ID: 12B385E70DA48DA6; S3 Extended Request ID: fpZ8su8p6ZfHHZVFk71C1RK2tCWdS3sxWOLL2VPrpfrT4pSQBt64scKHzabba0PMtLsGgfnsZ6w=).\r\n```\r\nFor sure the bucket is not empty, since it has the other staging data.\r\n\r\n- What did you expect should have happened?\r\nThe specific stage should be removed only and the stack should stay.\r\n\r\n- What was the config you used?\r\n```yml\r\nservice: myApi\r\n\r\nprovider:\r\n    name: aws\r\n    region: us-east-1\r\n    runtime: provided\r\n    stage: ${opt:stage, 'dev'}\r\n    stackName: my-api # Use a custom name for the CloudFormation stack\r\n    apiName: my-api # Use a custom name for the API Gateway API\r\n    apiKeys: # List of API keys to be used by your service API Gateway REST API\r\n      - name: APIKey-${opt:stage, \"dev\"}\r\n        description: The API Key\r\n    apiGateway: # Optional API Gateway global config\r\n      apiKeySourceType: HEADER # Source of API key for usage plan. HEADER or AUTHORIZER.\r\ndeployment\r\n    usagePlan: # Optional usage plan configuration\r\n      quota:\r\n        limit: 5000\r\n        offset: 2\r\n        period: MONTH\r\n      throttle:\r\n        burstLimit: 200\r\n        rateLimit: 100\r\n```\r\n\r\n- What stacktrace or error message from your provider did you see?\r\n```\r\nThe bucket you tried to delete is not empty (Service: Amazon S3; Status Code: 409; Error Code: BucketNotEmpty; Request ID: 12B385E70DA48DA6; S3 Extended Request ID: fpZ8su8p6ZfHHZVFk71C1RK2tCWdS3sxWOLL2VPrpfrT4pSQBt64scKHzabba0PMtLsGgfnsZ6w=)\r\n```\r\n\r\n## Additional Data\r\n\r\n- **_Serverless Framework Version you're using_**:\r\n```shell\r\n  Your Environment Information ---------------------------\r\n     Operating System:          darwin\r\n     Node Version:              11.15.0\r\n     Framework Version:         1.50.0\r\n     Plugin Version:            1.3.8\r\n     SDK Version:               2.1.0\r\n```\r\n- **_Operating System_**:\r\nmacOs 10.14.6\r\n"
    },
    "satisfaction_conditions": [
      "User must understand that stages are implemented as separate CloudFormation stacks",
      "Stage removal command behavior must be clearly documented",
      "S3 bucket contents for other stages must remain intact"
    ],
    "created_at": "2019-08-26T07:53:59Z"
  },
  {
    "id": "https://github.com/serverless/serverless/pull/6355",
    "source": {
      "issue_number": 6355
    },
    "initial_question": {
      "title": "Remove trailing & leading quotes from env refs",
      "body": "## What did you implement:\r\nThis PR removes straling and leading `\"` or `'` from env variables. This was not a problem for function cloud formation template definition but was so for resources.\r\n\r\nIf you had en env like so `export TEST_ENV=\"abcdefg?a\"` the quotes would be escaped in the resource CF template json as `Value: \"\\\"abcdefg?a\\\"\"`.\r\n\r\n## How did you implement it:\r\n\r\n`getValueFromEnv` now calls `getValueFromString` if the value is a string\r\n\r\n## How can we verify it:\r\n\r\nTry use an env value surrounded by quotes and use that somewhere in your resources, ie:\r\n```yaml\r\nresources:\r\n  Resources:\r\n    DBCluster:\r\n      Type: \"AWS::DocDB::DBCluster\"\r\n      DeletionPolicy: Delete\r\n      Properties:\r\n        DBClusterIdentifier: ${self:custom.dbClusterName}\r\n        MasterUsername: rvadmin\r\n        MasterUserPassword: ${env:DB_PASSWORD}\r\n```\r\n## Todos:\r\n\r\n_**Note: Run `npm run test-ci` to run all validation checks on proposed changes**_\r\n\r\n- [X] Write tests and confirm existing functionality is not broken.  \r\n       **Validate via `npm test`**\r\n- [X] Write documentation\r\n- [X] Ensure there are no lint errors.  \r\n       **Validate via `npm run lint-updated`**  \r\n       _Note: Some reported issues can be automatically fixed by running `npm run lint:fix`_\r\n- [X] Ensure introduced changes match Prettier formatting.  \r\n       **Validate via `npm run prettier-check-updated`**  \r\n       _Note: All reported issues can be automatically fixed by running `npm run prettify-updated`_\r\n- [X] Make sure code coverage hasn't dropped\r\n- [X] Provide verification config / commands / resources\r\n- [X] Enable \"Allow edits from maintainers\" for this PR\r\n- [X] Update the messages below\r\n\r\n**_Is this ready for review?:_** YES  \r\n**_Is it a breaking change?:_** NO\r\n"
    },
    "satisfaction_conditions": [
      "Environment variable values must be processed consistently with shell behavior",
      "CloudFormation template generation must preserve intended variable values without adding unintended quotes",
      "Existing functionality for environment variable processing must remain unaffected",
      "Environment variable processing must not modify intentionally quoted values"
    ],
    "created_at": "2019-07-10T11:12:31Z"
  },
  {
    "id": "https://github.com/serverless/serverless/issues/4402",
    "source": {
      "issue_number": 4402
    },
    "initial_question": {
      "title": "Turn of SLS_DEBUG",
      "body": "This is probably a super simple issue to be resolved, but I can't turn off SLS_DEBUG to save my life. I turned it on by submitting `export SLS_DEBUG=*` via terminal. I have tried to use `export SLS_DEBUG=false` but that doesn't prevent the logs from continuing. How do I resolve this? It has to be easier than the amount of time I have spent trying to figure this out.\r\n\r\nThanks."
    },
    "satisfaction_conditions": [
      "SLS_DEBUG logging output must stop appearing",
      "Environment variable SLS_DEBUG must be removed or invalidated",
      "Solution must work in the current terminal session",
      "Change must persist after command execution"
    ],
    "created_at": "2017-10-20T20:41:21Z"
  },
  {
    "id": "https://github.com/serverless/serverless/issues/4368",
    "source": {
      "issue_number": 4368
    },
    "initial_question": {
      "title": "  Serverless Error ---------------------------------------        An error occurred while provisioning your stack: S3BucketServerlesschatbotdevuploadsyourinitialshere      - serverless-chatbot-dev-uploads-your-initials-here      already exists.",
      "body": "I've got this issue:\r\n  Serverless Error ---------------------------------------\r\n \r\n     An error occurred while provisioning your stack: S3BucketServerlesschatbotdevuploadsyourinitialshere\r\n     - serverless-chatbot-dev-uploads-your-initials-here\r\n     already exists.\r\n\r\nAny ideas? "
    },
    "satisfaction_conditions": [
      "S3 bucket name conflict is resolved",
      "Stack deployment completes successfully",
      "Custom variable references remain functional",
      "Resource naming follows AWS/Serverless naming conventions"
    ],
    "created_at": "2017-10-09T17:02:48Z"
  },
  {
    "id": "https://github.com/serverless/serverless/issues/3323",
    "source": {
      "issue_number": 3323
    },
    "initial_question": {
      "title": "Having an event only for prod stage",
      "body": "# This is a Bug Report\r\n\r\n## Description\r\n\r\nI'm would like to use a schedule event on a function but only on the production stage. I'm trying to do something like that : \r\n\r\n    functions:\r\n        myfunction:\r\n            handler: myfunction.handler\r\n                stage: production\r\n                    events:\r\n                         - schedule: cron(0 15 * * ? *)\r\n\r\nIs there a way to do that ? Thanks a lot \r\n\r\n## Additional Data\r\n\r\n* ***Serverless Framework Version you're using***: 1.5.1\r\n* ***Operating System***: OS X 10.12\r\n"
    },
    "satisfaction_conditions": [
      "Configuration must respect deployment stage context",
      "Schedule configuration must be valid serverless framework syntax",
      "Production deployments must maintain specified schedule timing"
    ],
    "created_at": "2017-03-03T06:42:51Z"
  },
  {
    "id": "https://github.com/serverless/serverless/issues/8457",
    "source": {
      "issue_number": 8457
    },
    "initial_question": {
      "title": "Refactor: Clear \"that = this\" pattern from codebase",
      "body": "<!-- \u26a0\ufe0f\u26a0\ufe0f Acknowledge ALL below remarks -->\r\n<!-- \u26a0\ufe0f\u26a0\ufe0f Request may not be processed if it doesn't meet outlined criteria -->\r\n\r\n<!-- \u26a0\ufe0f\u26a0\ufe0f Search existing issues to avoid creating duplicates  -->\r\n<!-- \u26a0\ufe0f\u26a0\ufe0f Plugin enhancements should be proposed at plugin repository, not here -->\r\n\r\n<!-- \u26a0\ufe0f\u26a0\ufe0f Answer ALL required questions below -->\r\n\r\n<!--\r\nQ1: Describe the problem (use case) that needs to be solved\r\n-->\r\n\r\n### Use case description\r\n\r\n`that = this` Resembles questionable and heavily outdated pattern.\r\n\r\nIt was used before we had arrow functions, to maintain access to `this` across nested function references, with arrow functions `this` is shared and cases can be referenced directly\r\n\r\n<!--\r\nQ2: Propose solution (e.g. provide configuration example)\r\n\r\nNote: This is optional, remove this section if you do not wish to propose anything at this point\r\n-->\r\n\r\n### Proposed solution\r\n\r\nSimply remove `const that = this` and replace all `that` references with `this` (mind eventual non-arrow function expressions which rely on top level `that` if there are any upgrade them to arrow functions)\r\n"
    },
    "satisfaction_conditions": [
      "Code uses appropriate modern JavaScript context handling"
    ],
    "created_at": "2020-10-30T11:31:13Z"
  },
  {
    "id": "https://github.com/serverless/serverless/issues/5942",
    "source": {
      "issue_number": 5942
    },
    "initial_question": {
      "title": "Custom authorizer for websockets connection not passing claims to next function and calling $disconnect rather than $connect",
      "body": "# This is a Bug Report\r\n\r\n## Description\r\n\r\nI have a custom authoriser function in front of a websocket connection function, which is successful but does not pass or trigger the actual connection function it sits in front of.\r\n\r\nI have tried to return the value, resolve it as a promise or, what I'd expect to work, pass it as a value in the callback.\r\n\r\n**serverless.yml**\r\n\r\n```\r\ncustomAuthoriser:\r\n  handler: handler.customAuthoriser\r\n  cors: true\r\nconnectionHandler:\r\n  handler: handler.connectionHandler\r\n  events:\r\n    - websocket:\r\n        route: $connect\r\n        authorizer:\r\n          name: customAuthoriser\r\n          identitySource:\r\n            - 'route.request.querystring.Authorizer'\r\n    - websocket:\r\n        route: $disconnect\r\n```\r\n\r\n**connectionHandler.js**\r\n\r\n```\r\nexport async function customAuthoriser(event, context, callback) {\r\n  console.log('enter customAuthoriser');\r\n  let someErr;\r\n  let claims;\r\n\r\n  return new Promise((resolve, reject) => {\r\n\r\n      // do some stuff to get claims\r\n\r\n      if (someErr) {\r\n          reject(someErr);\r\n      }\r\n\r\n      // doesn't work\r\n      callback(null, claims);\r\n\r\n      // doesn't work\r\n      resolve(claims);\r\n\r\n      // also doesn't work\r\n      return claims;\r\n  });\r\n}\r\n```\r\n\r\n**connectionHandler.js**\r\n\r\n```\r\n// this never gets hit\r\nexport async function connectionHandler(event, context, callback) {\r\n  console.log('enter connectionHandler');\r\n\r\n  // if it ever gets called, I'd expect this to have a value\r\n  console.log(event.requestContext.authorizer.claims.sub);\r\n}\r\n```\r\n\r\n**client.ts**\r\n\r\n```\r\nimport {webSocket, WebSocketSubjectConfig} from 'rxjs/webSocket';\r\n\r\nprivate subject: Subject;\r\n\r\nprivate setupWebsockets(token: string) {\r\n  const subjectConfig: WebSocketSubjectConfig<any> = {\r\n    url: `wss://abcd1234.execute-api.ap-southeast-1.amazonaws.com/pre?Authorizer=${token}`\r\n  };\r\n  this.subject = webSocket(subjectConfig);\r\n\r\n  this.subject.subscribe(\r\n    (msg) => console.log('message received: ' + msg),\r\n    (err) => console.error(err),\r\n    () => console.log('complete')\r\n  );\r\n}\r\n```\r\n\r\n## Additional Data\r\n\r\n* ***Serverless Framework Version you're using***: 1.39.1\r\n* ***Operating System***: N/A\r\n* ***Stack Trace***: N/A\r\n* ***Provider Error messages***: N/A"
    },
    "satisfaction_conditions": [
      "Custom authorizer must successfully pass authorization claims to the WebSocket $connect handler",
      "WebSocket connection must trigger the $connect route instead of $disconnect",
      "Authorizer must return a properly formatted IAM policy document",
      "Authorizer function must complete its execution before returning response"
    ],
    "created_at": "2019-03-20T19:23:17Z"
  },
  {
    "id": "https://github.com/serverless/serverless/issues/5664",
    "source": {
      "issue_number": 5664
    },
    "initial_question": {
      "title": "Bug: Rollback fails due to timestamp parsing error",
      "body": "# This is a Bug Report\r\n\r\n## Description\r\n\r\n* What went wrong?\r\nReceiving _Range Error: Invalid time value_ when trying to rollback (with correct timestamp).\r\nE.g. _sls rollback -t 1546961025152_\r\n\r\n* What did you expect should have happened?\r\nRollback should have been successful\r\nLooks like since this.options.timestamp is a string, the wrong constructor of Date is called, and it's expecting a date string.\r\nI was able to make this work by changing line 68 of _serverless\\lib\\plugins\\aws\\rollback\\index.js_ to\r\n\r\n      const date = new Date(Number(this.options.timestamp));\r\n\r\n* What was the config you used?\r\nAny, including the aws-java-gradle template\r\n\r\n* What stacktrace or error message from your provider did you see?\r\n  \r\nSimilar or dependent issues:\r\n\r\n## Additional Data\r\n\r\n* ***Serverless Framework Version you're using***: 1.35.1\r\n* ***Operating System***: Windows 10 Enterprise (10.0.17134)\r\n* ***Stack Trace***:\r\n\r\n      RangeError: Invalid time value\r\n          at Date.toISOString (<anonymous>)\r\n          at provider.request.then (C:\\Users\\<username>\\AppData\\Roaming\\npm\\node_modules\\serverless\\lib\\plugins\\aws\\rollback\\index.js:69:65)\r\n      From previous event:\r\n          at AwsRollback.setStackToUpdate (C:\\Users\\<username>\\AppData\\Roaming\\npm\\node_modules\\serverless\\lib\\plugins\\aws\\rollback\\index.js:59:8)\r\n      From previous event:\r\n          at Object.rollback:rollback [as hook] (C:\\Users\\<username>\\AppData\\Roaming\\npm\\node_modules\\serverless\\lib\\plugins\\aws\\rollback\\index.js:40:12)\r\n          at BbPromise.reduce (C:\\Users\\<username>\\AppData\\Roaming\\npm\\node_modules\\serverless\\lib\\classes\\PluginManager.js:391:55)\r\n      From previous event:\r\n          at PluginManager.invoke (C:\\Users\\<username>\\AppData\\Roaming\\npm\\node_modules\\serverless\\lib\\classes\\PluginManager.js:391:22)\r\n          at PluginManager.run (C:\\Users\\<username>\\AppData\\Roaming\\npm\\node_modules\\serverless\\lib\\classes\\PluginManager.js:422:17)\r\n          at variables.populateService.then.then (C:\\Users\\<username>\\AppData\\Roaming\\npm\\node_modules\\serverless\\lib\\Serverless.js:157:33)\r\n          at runCallback (timers.js:705:18)\r\n          at tryOnImmediate (timers.js:676:5)\r\n          at processImmediate (timers.js:658:5)\r\n          at process.topLevelDomainCallback (domain.js:120:23)\r\n      From previous event:\r\n          at Serverless.run (C:\\Users\\<username>\\AppData\\Roaming\\npm\\node_modules\\serverless\\lib\\Serverless.js:144:8)\r\n          at serverless.init.then (C:\\Users\\<username>\\AppData\\Roaming\\npm\\node_modules\\serverless\\bin\\serverless:44:28)\r\n\r\n* ***Provider Error messages***:\r\n"
    },
    "satisfaction_conditions": [
      "System must maintain compatibility with existing serverless templates"
    ],
    "created_at": "2019-01-08T16:09:45Z"
  },
  {
    "id": "https://github.com/serverless/serverless/issues/3696",
    "source": {
      "issue_number": 3696
    },
    "initial_question": {
      "title": "CodeSHA256 is different from current CodeSHA256 in $LATEST",
      "body": "# This is a Bug Report\r\n\r\n## Description\r\n\r\nFor bug reports:\r\n* What went wrong?\r\n\r\nAfter upgrading to Serverless 1.14.0, I'm now getting:\r\n\r\n```\r\nServerless: Deployment failed!\r\n \r\n  Serverless Error ---------------------------------------\r\n \r\n     An error occurred while provisioning your stack: SaveAttachmentLambdaVersionXX\r\n     - CodeSHA256 (XX)\r\n     is different from current CodeSHA256 in $LATEST (XX).\r\n     Please try again with the CodeSHA256 in $LATEST..\r\n```\r\n\r\n* What did you expect should have happened?\r\n\r\nNew deployment should have succeeded\r\n\r\n* What was the config you used?\r\n\r\nDeploying to AWS. Using serverless-plugins-typescript to compile TS to a .build folder before deployment.\r\n\r\n* What stacktrace or error message from your provider did you see?\r\n\r\n```\r\nServerlessError: An error occurred while provisioning your stack: SaveSearchLambdaVersionXXX- CodeSHA256 (XXX) is different from current CodeSHA256 in $LATEST (XXX). Please try again with the CodeSHA256 in $LATEST..\r\n    at provider.request.then (/Users/cmmoyer/.nvm/v6.10.1/lib/node_modules/serverless/lib/plugins/aws/lib/monitorStack.js:109:33)\r\nFrom previous event:\r\n    at AwsDeploy.monitorStack (/Users/cmmoyer/.nvm/v6.10.1/lib/node_modules/serverless/lib/plugins/aws/lib/monitorStack.js:26:12)\r\n    at provider.request.then (/Users/cmmoyer/.nvm/v6.10.1/lib/node_modules/serverless/lib/plugins/aws/lib/updateStack.js:88:30)\r\nFrom previous event:\r\n    at AwsDeploy.update (/Users/cmmoyer/.nvm/v6.10.1/lib/node_modules/serverless/lib/plugins/aws/lib/updateStack.js:88:8)\r\nFrom previous event:\r\n    at AwsDeploy.BbPromise.bind.then (/Users/cmmoyer/.nvm/v6.10.1/lib/node_modules/serverless/lib/plugins/aws/lib/updateStack.js:105:12)\r\nFrom previous event:\r\n    at AwsDeploy.updateStack (/Users/cmmoyer/.nvm/v6.10.1/lib/node_modules/serverless/lib/plugins/aws/lib/updateStack.js:99:8)\r\nFrom previous event:\r\n    at Object.aws:deploy:deploy:updateStack [as hook] (/Users/cmmoyer/.nvm/v6.10.1/lib/node_modules/serverless/lib/plugins/aws/deploy/index.js:99:10)\r\n    at BbPromise.reduce (/Users/cmmoyer/.nvm/v6.10.1/lib/node_modules/serverless/lib/classes/PluginManager.js:234:55)\r\nFrom previous event:\r\n    at PluginManager.invoke (/Users/cmmoyer/.nvm/v6.10.1/lib/node_modules/serverless/lib/classes/PluginManager.js:234:22)\r\n    at PluginManager.spawn (/Users/cmmoyer/.nvm/v6.10.1/lib/node_modules/serverless/lib/classes/PluginManager.js:246:17)\r\n    at AwsDeploy.BbPromise.bind.then (/Users/cmmoyer/.nvm/v6.10.1/lib/node_modules/serverless/lib/plugins/aws/deploy/index.js:85:48)\r\nFrom previous event:\r\n    at Object.deploy:deploy [as hook] (/Users/cmmoyer/.nvm/v6.10.1/lib/node_modules/serverless/lib/plugins/aws/deploy/index.js:81:10)\r\n    at BbPromise.reduce (/Users/cmmoyer/.nvm/v6.10.1/lib/node_modules/serverless/lib/classes/PluginManager.js:234:55)\r\n    at runCallback (timers.js:666:20)\r\n    at tryOnImmediate (timers.js:639:5)\r\n    at processImmediate [as _immediateCallback] (timers.js:611:5)\r\nFrom previous event:\r\n    at PluginManager.invoke (/Users/cmmoyer/.nvm/v6.10.1/lib/node_modules/serverless/lib/classes/PluginManager.js:234:22)\r\n    at PluginManager.run (/Users/cmmoyer/.nvm/v6.10.1/lib/node_modules/serverless/lib/classes/PluginManager.js:253:17)\r\n    at variables.populateService.then (/Users/cmmoyer/.nvm/v6.10.1/lib/node_modules/serverless/lib/Serverless.js:100:33)\r\nFrom previous event:\r\n    at Serverless.run (/Users/cmmoyer/.nvm/v6.10.1/lib/node_modules/serverless/lib/Serverless.js:87:74)\r\n    at serverless.init.then (/Users/cmmoyer/.nvm/v6.10.1/lib/node_modules/serverless/bin/serverless:23:50)\r\n```\r\n\r\n\r\n## Additional Data\r\n\r\n* ***Serverless Framework Version you're using***: 1.14.0\r\n* ***Operating System***: darwin (macOS 10.12.4)\r\n* ***Stack Trace***: See above\r\n* ***Provider Error messages***: CodeSHA256 (XX)\r\n     is different from current CodeSHA256 in $LATEST (XX)\r\n* ***Node Version***: v6.10.1\r\n"
    },
    "satisfaction_conditions": [
      "Lambda function artifacts have unique identifiers/names when multiple functions are deployed",
      "The deploying IAM user has sufficient permissions to create/update Lambda versions",
      "Code artifact integrity is maintained throughout the build and deployment process",
      "Deployment process handles artifact generation and SHA calculation in the correct sequence"
    ],
    "created_at": "2017-05-26T19:56:47Z"
  }
]