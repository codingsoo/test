[
  {
    "id": "https://github.com/taichi-dev/taichi/issues/7464",
    "source": {
      "issue_number": 7464
    },
    "initial_question": {
      "title": "Texture load in @ti.func",
      "body": "Hi,\r\nI have a question related with texture load in Taichi.\r\nIn example `python/taichi/examples/rendering/simple_texture.py`, the texture object is declared out of taichi scope, and passed as `ti.types.texture` type to @ti.kernel function. It seemed that the texture will be converted to `taichi.lang._texture.TextureSampler` object type. \r\nMy question is that how can use texture method like `sample_lod` or `fetch` in @ti.func?\r\n"
    },
    "satisfaction_conditions": [
      "Texture object must be accessible within the @ti.func decorated function",
      "Texture methods (like sample_lod and fetch) must be callable from within the @ti.func",
      "Function must return the sampled texture value",
      "Texture must be properly passed through the kernel function to reach the @ti.func",
      "Texture parameter must be properly typed in function signatures"
    ],
    "created_at": "2023-03-01T00:42:23Z"
  },
  {
    "id": "https://github.com/taichi-dev/taichi/issues/7255",
    "source": {
      "issue_number": 7255
    },
    "initial_question": {
      "title": "dataclass in the for loop not showing the right value",
      "body": "Hi all,\r\n\r\nThis might be a silly question but I think I don't understand the multiple for-loops here.\r\n\r\nThe data class called inside the third for loop is not showing the right value as I expect. I learned from the tutorial that the outermost loop will be parallelized, and others are the same with python. But that did not happen either.\r\n\r\nI am wondering why the inside value is not changing but keeps its initial value.\r\nThank you! The code is as follows:\r\n\r\n\r\n```python\r\nimport taichi as ti\r\n\r\nti.init()\r\nNp = 3\r\nNw = 2\r\nNt = 5\r\n\r\n@ti.dataclass\r\nclass Particle:\r\n    r: ti.types.vector(3, ti.f64)\r\n    t: ti.f64\r\n    @ti.func\r\n    def initParticles(self,x,y,z):\r\n        self.r = ti.Vector([x,y,z])\r\n        self.t = 0\r\n\r\n\r\n\r\nparticles = Particle.field(shape = (Np,))\r\n\r\ndr = 0.1\r\ndw = 0.3\r\n\r\n@ti.kernel\r\ndef init():\r\n    for n in range(Np):\r\n        particles[n].initParticles(0,0,dr * n)\r\n        \r\n@ti.kernel\r\ndef simulate():\r\n    for n in range(Np):\r\n        for t in range(Nt):\r\n            #rr = particles[n].r\r\n            print('time***',t )\r\n            print('r outside',particles[n].r)\r\n            for m in range(Nw):\r\n                print('r inside',particles[n].r) # why particles [n].r here showing particles' init value\r\n\r\n            particles[n].r +=ti.Vector([0,0,1])\r\n                \r\ninit()\r\nsimulate()\r\n```\r\n\r\n\r\nThe result is \r\n\r\n> [Taichi] Starting on arch=arm64\r\ntime*** 0\r\nr outside [0.000000000000, 0.000000000000, 0.000000000000]\r\nr inside [0.000000000000, 0.000000000000, 0.000000000000]\r\nr inside [0.000000000000, 0.000000000000, 0.000000000000]\r\ntime*** 1\r\nr outside [0.000000000000, 0.000000000000, 1.000000000000]\r\nr inside [0.000000000000, 0.000000000000, 0.000000000000]\r\nr inside [0.000000000000, 0.000000000000, 0.000000000000]\r\ntime*** 2\r\nr outside [0.000000000000, 0.000000000000, 2.000000000000]\r\nr inside [0.000000000000, 0.000000000000, 0.000000000000]\r\nr inside [0.000000000000, 0.000000000000, 0.000000000000]\r\ntime*** 3\r\nr outside [0.000000000000, 0.000000000000, 3.000000000000]\r\nr inside [0.000000000000, 0.000000000000, 0.000000000000]\r\nr inside [0.000000000000, 0.000000000000, 0.000000000000]\r\ntime*** 4\r\nr outside [0.000000000000, 0.000000000000, 4.000000000000]\r\nr inside [0.000000000000, 0.000000000000, 0.000000000000]\r\nr inside [0.000000000000, 0.000000000000, 0.000000000000]\r\ntime*** 0\r\nr outside [0.000000000000, 0.000000000000, 0.100000001490]\r\nr inside [0.000000000000, 0.000000000000, 0.100000001490]\r\nr inside [0.000000000000, 0.000000000000, 0.100000001490]\r\ntime*** 1\r\nr outside [0.000000000000, 0.000000000000, 1.100000001490]\r\nr inside [0.000000000000, 0.000000000000, 0.100000001490]\r\nr inside [0.000000000000, 0.000000000000, 0.100000001490]\r\ntime*** 2\r\nr outside [0.000000000000, 0.000000000000, 2.100000001490]\r\nr inside [0.000000000000, 0.000000000000, 0.100000001490]\r\nr inside [0.000000000000, 0.000000000000, 0.100000001490]\r\ntime*** 3\r\nr outside [0.000000000000, 0.000000000000, 3.100000001490]\r\nr inside [0.000000000000, 0.000000000000, 0.100000001490]\r\nr inside [0.000000000000, 0.000000000000, 0.100000001490]\r\ntime*** 4\r\nr outside [0.000000000000, 0.000000000000, 4.100000001490]\r\nr inside [0.000000000000, 0.000000000000, 0.100000001490]\r\nr inside [0.000000000000, 0.000000000000, 0.100000001490]\r\ntime*** 0\r\nr outside [0.000000000000, 0.000000000000, 0.200000002980]\r\nr inside [0.000000000000, 0.000000000000, 0.200000002980]\r\nr inside [0.000000000000, 0.000000000000, 0.200000002980]\r\ntime*** 1\r\nr outside [0.000000000000, 0.000000000000, 1.200000002980]\r\nr inside [0.000000000000, 0.000000000000, 0.200000002980]\r\nr inside [0.000000000000, 0.000000000000, 0.200000002980]\r\ntime*** 2\r\nr outside [0.000000000000, 0.000000000000, 2.200000002980]\r\nr inside [0.000000000000, 0.000000000000, 0.200000002980]\r\nr inside [0.000000000000, 0.000000000000, 0.200000002980]\r\ntime*** 3\r\nr outside [0.000000000000, 0.000000000000, 3.200000002980]\r\nr inside [0.000000000000, 0.000000000000, 0.200000002980]\r\nr inside [0.000000000000, 0.000000000000, 0.200000002980]\r\ntime*** 4\r\nr outside [0.000000000000, 0.000000000000, 4.200000002980]\r\nr inside [0.000000000000, 0.000000000000, 0.200000002980]\r\nr inside [0.000000000000, 0.000000000000, 0.200000002980]"
    },
    "satisfaction_conditions": [
      "State updates must be visible in subsequent iterations"
    ],
    "created_at": "2023-01-30T04:54:49Z"
  },
  {
    "id": "https://github.com/taichi-dev/taichi/issues/7185",
    "source": {
      "issue_number": 7185
    },
    "initial_question": {
      "title": "Performance implications of dynamic indexing",
      "body": "I have a rather large taichi program, which I wrote before `dynamic_indexing` is enabled by default, it contained a lot of loops unrolled using `for i in ti.static(range(..))`.  Now that  `dynamic_indexing` is the default, I decided to try rewriting my program to always use dynamic indices. I noticed that after dynamic indices are used, the performance of the program dropped by around 15%. I mostly use the CUDA backend.\r\n\r\nSo my questions are:\r\n* Is the performance drop expected?\r\n* Are there any general guidelines of when should loop-unrolling should be preferred over dynamic indexing in terms of performance? What are the rules of thumb?\r\n\r\n@strongoier \r\nThanks!"
    },
    "satisfaction_conditions": [
      "Performance impact of dynamic indexing is accurately explained",
      "Clear distinction between constant and dynamic indexing use cases",
      "Backward compatibility considerations are addressed",
      "Performance optimization options are identified",
      "Backend compatibility information is provided"
    ],
    "created_at": "2023-01-17T02:19:33Z"
  },
  {
    "id": "https://github.com/taichi-dev/taichi/issues/5970",
    "source": {
      "issue_number": 5970
    },
    "initial_question": {
      "title": "print has no output inside taichi kernel",
      "body": "The code:\r\n```python\r\nimport taichi as ti\r\n\r\nti.init(arch=ti.cpu, debug=True)\r\n\r\nx = ti.field(ti.f32)\r\nblock = ti.root.pointer(ti.ij, (4,4))\r\npixel = block.bitmasked(ti.ij, (2,2))\r\npixel.place(x)\r\n\r\n@ti.kernel\r\ndef activate():\r\n    x[2,3] = 1.0\r\n    x[2,4] = 2.0\r\n\r\n@ti.kernel\r\ndef print_active():\r\n    for i, j in block:\r\n        print(\"Active block\", i, j)\r\n    for i, j in x:\r\n        print('field x[{}, {}] = {}'.format(i, j, x[i, j]))\r\n\r\nif __name__ == '__main__':\r\n    print_active()\r\n```\r\n\r\noutput:\r\n```\r\n[Taichi] version 1.1.2, llvm 10.0.0, commit f25cf4a2, linux, python 3.7.4\r\n[Taichi] Starting on arch=x64\r\n```\r\n\r\nThe `print` in taichi kernel has no output.\r\n"
    },
    "satisfaction_conditions": [
      "Taichi field memory must be allocated",
      "Print statements must be executed within an active computational context"
    ],
    "created_at": "2022-09-04T02:53:43Z"
  },
  {
    "id": "https://github.com/taichi-dev/taichi/issues/4854",
    "source": {
      "issue_number": 4854
    },
    "initial_question": {
      "title": "IndexError: Field with dim 2 accessed with indices of dim 1",
      "body": "I started learning Taichi and wrote the following code:\r\n```\r\nimport taichi as ti\r\nimport numpy\r\nti.init(arch=ti.opengl)\r\n\r\n\r\ndic = numpy.array([[10,9,8,7], [10,9,8,2]])\r\n@ti.kernel\r\ndef func(dic:ti.types.ndarray()):\r\n\tdic[0][0]=11\r\n\t\r\nfunc(dic)\r\nprint(dic)\r\n```\r\n\r\nAnd get error:\r\n`IndexError: Field with dim 2 accessed with indices of dim 1`\r\n\r\nWhy it not works? "
    },
    "satisfaction_conditions": [
      "Array indexing syntax must match Taichi's multi-dimensional field access requirements",
      "Array dimensionality must be properly preserved and respected"
    ],
    "created_at": "2022-04-24T13:23:57Z"
  }
]