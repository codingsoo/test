[
  {
    "id": "https://github.com/sequelize/sequelize/issues/12319",
    "source": {
      "issue_number": 12319
    },
    "initial_question": {
      "title": "OR block with nested AND not generated to SQL",
      "body": "## Issue Description\r\n\r\nAn OR block is ignored in a query when generating SQL. Changing the order of the OR blocks causes always only the last one to be generated. The nested AND is generated correctly when moving the first OR block after the last one.\r\n\r\n### What are you doing?\r\n\r\n```js\r\nawait MyTable.findAll({\r\nwhere: {\r\n  checkedAt: null,\r\n  abcId: {[Op.not]: null},\r\n  [Op.or]: [\r\n    {cancelledAt: {[Op.lt]: moment().subtract(3, 'minutes')}},\r\n    {[Op.and]: [\r\n      {orderId: null},\r\n      {orderDate: {[Op.lt]: moment().subtract(2, 'hours')}}\r\n    ]}\r\n  ],\r\n  [Op.or]: [\r\n    {something: {[Op.not]: 'qwerty'}},\r\n    {fooBar: {[Op.not]: null}}\r\n  ]\r\n}\r\n});\r\n```\r\n\r\n### What do you expect to happen?\r\n\r\n```\r\nWHERE (deleted_at IS NULL \r\nAND (\r\n(something != 'qwerty' OR foo_bar IS NOT NULL) \r\nAND (cancelled_at < '...' OR (order_id IS NULL AND order_date < '...')) \r\nAND (something != 'qwerty' OR foo_bar IS NOT NULL) \r\nAND checked_at IS NULL AND abc_id IS NOT NULL)\r\n);\r\n```\r\n\r\n### What is actually happening?\r\n\r\n```\r\nWHERE (deleted_at IS NULL \r\nAND (\r\n(something != 'qwerty' OR foo_bar IS NOT NULL) \r\nAND checked_at IS NULL AND abc_id IS NOT NULL)\r\n);\r\n```\r\n\r\n### Environment\r\n\r\n- Sequelize version: 5.21.10\r\n- Node.js version: 12.16.3\r\n- Operating System: MacOS Catalina 10.15.4 (19E287)\r\n\r\n## Issue Template Checklist\r\n\r\n### How does this problem relate to dialects?\r\n\r\n- [ ] I think this problem happens regardless of the dialect.\r\n- [ ] I think this problem happens only for the following dialect(s): <!-- Put dialect(s) here -->\r\n- [X] I don't know, I was using PostgreSql, with connector library version 8.2.1 and database version 9.6.17\r\n\r\n### Would you be willing to resolve this issue by submitting a Pull Request?\r\n\r\n- [ ] Yes, I have the time and I know how to start.\r\n- [ ] Yes, I have the time but I don't know how to start, I would need guidance.\r\n- [ ] No, I don't have the time, although I believe I could do it if I had the time...\r\n- [X] No, I don't have the time and I wouldn't even know how to start.\r\n"
    },
    "satisfaction_conditions": [
      "Multiple OR conditions in the query must be preserved and evaluated independently",
      "Generated SQL must include all specified logical conditions",
      "Query structure must maintain proper logical hierarchy",
      "Solution must work within JavaScript object literal constraints"
    ],
    "created_at": "2020-05-27T18:23:29Z"
  },
  {
    "id": "https://github.com/sequelize/sequelize/issues/10984",
    "source": {
      "issue_number": 10984
    },
    "initial_question": {
      "title": "Sequelize automatically sets a default value for NOT NULL columns",
      "body": "I am currently running Sequelize.js code on my MySQL database, that is created using migrations. I have a table with persons that is defined like this:\r\n\r\n```\r\nreturn queryInterface.createTable('Persons', {\r\n      id: {\r\n        allowNull: false,\r\n        autoIncrement: true,\r\n        primaryKey: true,\r\n        unique: true,\r\n        type: Sequelize.INTEGER\r\n      },\r\n      email: {\r\n        allowNull: false,\r\n        unique: true,\r\n        type: Sequelize.STRING\r\n      },\r\n      firstName: {\r\n        type: Sequelize.STRING\r\n      },\r\n      lastName: {\r\n        type: Sequelize.STRING\r\n      },\r\n      createdAt: {\r\n        allowNull: false,\r\n        type: Sequelize.DATE\r\n      },\r\n      updatedAt: {\r\n        allowNull: false,\r\n        type: Sequelize.DATE\r\n      }\r\n    });\r\n```\r\n\r\nand the resulting table looks like this:\r\n\r\n```\r\n`Persons` (\r\n  `id` int(11) NOT NULL AUTO_INCREMENT,\r\n  `email` varchar(255) NOT NULL,\r\n  `firstName` varchar(255) DEFAULT NULL,\r\n  `lastName` varchar(255) DEFAULT NULL,\r\n  `createdAt` datetime NOT NULL,\r\n  `updatedAt` datetime NOT NULL,\r\n  PRIMARY KEY (`id`),\r\n  UNIQUE KEY `id` (`id`),\r\n  UNIQUE KEY `email` (`email`)\r\n)\r\n```\r\n\r\nWhen I add an entry to the database using Model.create({}) (with nothing between the brackets), the following object is added to the database:\r\n\r\n```\r\nid  email   firstName   lastName    createdAt   updatedAt\r\n1   ''      NULL        NULL        2019-05-21 15:33:13 2019-05-21 15:33:13\r\nEvery NOT NULL column I have in my database gets a default value (empty string for varchar, false for boolean, NOW() for datetime).\r\n```\r\n\r\nThe Sequelize.js docs state the following:\r\n\r\n> setting allowNull to false will add NOT NULL to the column, which means an error will be thrown from the DB when the query is executed if the column is null. If you want to check that a value is not null before querying the DB, look at the validations section below.\r\n> \r\n> title: { type: Sequelize.STRING, allowNull: false },\r\n\r\nI never get this error. When trying to insert a new row with NULL as value for email in the database directly, I do get an error, but not with Sequelize.js"
    },
    "satisfaction_conditions": [
      "NOT NULL constraints must be enforced at both database and ORM levels",
      "Attempts to insert NULL values into NOT NULL columns must trigger validation errors",
      "Model definition must match migration schema constraints",
      "Database operations must respect column constraints as defined in the schema"
    ],
    "created_at": "2019-05-22T07:58:12Z"
  },
  {
    "id": "https://github.com/sequelize/sequelize/issues/10241",
    "source": {
      "issue_number": 10241
    },
    "initial_question": {
      "title": "How to save complex changes to MySQL JSON data type",
      "body": "When I make more complex changes to my users JSON col \u201cpreferences\u201d like this:\r\n\r\n```\r\nuser.preferences.notifications.disable_emails = {\r\n\tissues: true,\r\n\treports: true,\r\n\tcomments: true\r\n}\r\nuser.save().then(user2 => { \r\n\tconsole.log(user2) \r\n})\r\n```\r\n\r\nMy changes are correctly in user2, but not in the database, it stays NULL or keeps the previous value.\r\nIs there a callback I can call after complex changes so its detecting something is different?\r\nI guess auto watch for changes in a multidimensional JSON is too complex - am I right?"
    },
    "satisfaction_conditions": [
      "Complex JSON changes must persist to the database",
      "Model instance and database values must stay synchronized",
      "Deep/nested JSON property updates must be detected",
      "Updates must work within an existing model instance context"
    ],
    "created_at": "2018-12-08T11:29:20Z"
  },
  {
    "id": "https://github.com/sequelize/sequelize/issues/10082",
    "source": {
      "issue_number": 10082
    },
    "initial_question": {
      "title": "Virtual fields that rely on sibling fields",
      "body": "<!--\r\n\r\nPlease note this is an issue tracker, not a support forum.\r\nFor general questions, please use StackOverflow or Slack.\r\n\r\nFor bugs, please fill out the template below.\r\n\r\n-->\r\n\r\n## What are you doing?\r\n\r\nWhen you have a model with virtual fields that rely on other fields then you exclude that field in a query, your custom getter doesn't work. Is this a feature that should be added? Or is there a better pattern I should be using?\r\n\r\n```js\r\nmodule.exports = function (sequelize,DataTypes) {\r\n  var Widget = sequelize.define('Widget',{\r\n    data: {\r\n      type: DataTypes.TEXT\r\n    },\r\n    info: {\r\n      type: DataTypes.VIRTUAL,\r\n      get: function () {\r\n        return JSON.parse(this.data).info;\r\n      }\r\n    }\r\n  });\r\n};\r\n```\r\n\r\nExcluding the `data` field would break the query.\r\n\r\n## What do you expect to happen?\r\n\r\nWanted my virtual field tow work\r\n\r\n## What is actually happening?\r\n\r\nMy virtual field doesn't work when the requisite sibling fields are excluded from the query.\r\n\r\n__Dialect:__ sqlite\r\n__Dialect version:__\r\n__Database version:__\r\n__Sequelize version:__ 4.41.0\r\n__Tested with latest release:__ \r\n\r\n\r\n**Note :** _Your issue may be ignored OR closed by maintainers if it's not tested against latest version OR does not follow issue template._\r\n"
    },
    "satisfaction_conditions": [
      "Dependencies between virtual fields and their source fields must be explicitly defined"
    ],
    "created_at": "2018-10-26T18:43:03Z"
  },
  {
    "id": "https://github.com/sequelize/sequelize/issues/9944",
    "source": {
      "issue_number": 9944
    },
    "initial_question": {
      "title": "Access timestamps from createdAt/updatedAt instead of custom field name",
      "body": "In current sequelize, when a custom column name has been assigned to one of the timestamps, the timestamp value is no longer accessible from Model.createdAt / updated.At etc.\r\n\r\nFrom my understanding, this [v5 change](/sequelize/sequelize/issues/6423#issuecomment-379472035) will only change the behavior when timestamps are not customized.\r\n\r\nI'm a very new user of sequelize, but tbh I think this is inconsistent, isn't it? What is the reason behind this design? (Please consider this as a feature request)\r\n\r\n## What are you doing?\r\n```js\r\nconst MyTable = sequelize.define('mytable', {\r\n  myField: {\r\n    type: Sequelize.INTEGER,\r\n    field: 'my_column',\r\n  },\r\n}, {\r\n  createdAt: 'my_created_at',\r\n  updatedAt: false,\r\n});\r\nMyTable.create({\r\n  myField: 0,\r\n})).then(myInstance => {\r\n  console.log(myInstance.myField); // 0\r\n  console.log(myInstance.createdAt); // undefined\r\n  console.log(myInstance.my_created_at); // createdAt timestamp\r\n});\r\n```\r\n\r\n## What do you expect to happen?\r\nmyInstance.createdAt shows the createdAt timestamp.\r\n\r\n__Dialect:__ mysql\r\n__Sequelize version:__ 4.38.1"
    },
    "satisfaction_conditions": [
      "Database column name customization must be preserved",
      "Model definition must support field name customization without breaking timestamp access"
    ],
    "created_at": "2018-09-21T02:24:17Z"
  },
  {
    "id": "https://github.com/sequelize/sequelize/issues/9768",
    "source": {
      "issue_number": 9768
    },
    "initial_question": {
      "title": "the default foreign key is not overwritten with the foreignKey option",
      "body": "\r\n## What are you doing?\r\ncreating association between two model classes: Product and ProductPhoto[One product can have many photos]\r\nwhere product_id from Product table should be foreign key in ProductPhoto table.\r\n\r\n\r\n```js\r\nProduct Model :\r\nvar product = sequelize.define('product', {\r\n    product_id:{\r\n        allowNull: false,\r\n        type:DataTypes.INTEGER,\r\n        primaryKey: true,\r\n        autoIncrement:true,\r\n    },\r\n    productName: {\r\n      type:DataTypes.STRING,\r\n      field:'product_name'\r\n    }\r\n, {\r\n    underscored: true,\r\n    freezeTableName: true\r\n  });\r\n  product.associate = function(models) {\r\n  product.hasMany(models.productPhoto,{foriegnKey:'product_id'});\r\n   }\r\n}\r\nProductPhoto Model:\r\nvar productPhoto = sequelize.define('productPhoto', {\r\n  \t productPhotoId:{\r\n        allowNull: false,\r\n        type:DataTypes.INTEGER,\r\n        primaryKey: true,\r\n        autoIncrement:true,\r\n        field:'product_photo_id'\r\n      },\r\n    productPhotoPath: {\r\n      type:DataTypes.STRING,\r\n      field:'product_photo_path'\r\n    }\r\n}\r\nproductPhoto.associate = function(models) {\r\n    productPhoto.belongsTo(models.product, {foreignKey: 'product_id'});\r\n\r\n  }\r\n```\r\n\r\n## What do you expect to happen?\r\nWhen i execute sync to create database tables ,name product and productPhoto, the foreign key with name product_id in table productPhoto should be created.\r\n\r\n## What is actually happening?\r\nsequelize is generating foriegn key product_product_id, it is not taking foreignKey option.\r\n\r\n\r\n_Output, either JSON or SQL_\r\n\r\n CREATE TABLE IF NOT EXISTS `product` (`product_id` INTEGER NOT NULL auto_increment , `product_name` VARCHAR(255), `product_price` FLOAT, `product_description` TEXT, `product_sku` VARCHAR(255), `product_stock` INTEGER, `product_brand` VARCHAR(255), `product_title` VARCHAR(255), `product_fabric` VARCHAR(255), `product_manufacturer_info` VARCHAR(255), `product_country_of_origin` VARCHAR(255), `product_style` VARCHAR(255), `product_sold_by` VARCHAR(255), `created_at` DATETIME, `updated_at` DATETIME, PRIMARY KEY (`product_id`)) ENGINE=InnoDB;\r\nExecuting (default): SHOW INDEX FROM `product` FROM `ecommerse_db_dev`\r\n\r\nCREATE TABLE IF NOT EXISTS `productPhoto` (`product_photo_id` INTEGER NOT NULL auto_increment , `product_photo_path` VARCHAR(255), `product_photo_alt` VARCHAR(255), `createdAt` DATETIME, `updatedAt` DATETIME, `created_at` DATETIME NOT NULL, `updated_at` DATETIME NOT NULL, `product_product_id` INTEGER, PRIMARY KEY (`product_photo_id`), FOREIGN KEY (`product_product_id`) REFERENCES `product` (`product_id`) ON DELETE SET NULL ON UPDATE CASCADE) ENGINE=InnoDB;\r\nExecuting (default): SHOW INDEX FROM `productPhoto` FROM `ecommerse_db_dev`\r\n\r\n\r\n__Dialect:__ mysql\r\n__Dialect version:__ 1.6.1\r\n__Database version:__ 5.7.21\r\n__Sequelize version:__ 4.37.10\r\n__Tested with latest release:__ Yes (sequelize@4.38.0)\r\n\r\n\r\n**Note :** _Your issue may be ignored OR closed by maintainers if it's not tested against latest version OR does not follow issue template._\r\n"
    },
    "satisfaction_conditions": [
      "Association between Product and ProductPhoto tables must be properly established",
      "Foreign key must reference the primary key of the Product table"
    ],
    "created_at": "2018-08-07T06:33:31Z"
  },
  {
    "id": "https://github.com/sequelize/sequelize/issues/9494",
    "source": {
      "issue_number": 9494
    },
    "initial_question": {
      "title": "instance.constructor different when .scope() is used to retrieve the instance",
      "body": "## What are you doing?\r\n```\r\nconst Sequelize = require('sequelize');\r\nconst sequelize = new Sequelize('test-db', '', '', { host: 'localhost', dialect: 'postgres', operatorsAliases: false, logging: false });\r\n\r\nconst User = sequelize.define('User', {\r\n  name: Sequelize.STRING(200),\r\n  status: Sequelize.ENUM('active', 'inactive', 'unverified'),\r\n}, {\r\n  scopes: {\r\n    active: {\r\n      where: {\r\n        status: 'active',\r\n      },\r\n    },\r\n  },\r\n});\r\n\r\nasync function main () {\r\n  await sequelize.sync({ force: true });\r\n  await Promise.all([\r\n    User.create({ name: 'Active User 1', status: 'active' }),\r\n    User.create({ name: 'Active User 2', status: 'active' }),\r\n    User.create({ name: 'Inactive User 1', status: 'inactive' }),\r\n    User.create({ name: 'Inactive User 2', status: 'inactive' }),\r\n  ]);\r\n\r\n  const unscopedUser = await User.findOne({ where: { name: 'Inactive User 1' } });\r\n  const unscopedUsers = await User.findAll({ where: { status: 'inactive' } });\r\n  const scopedUser = await User.scope('active').findOne({ where: { name: 'Active User 1' } });\r\n  const scopedUsers = await User.scope('active').findAll();\r\n\r\n  console.log('unscopedUser constructor is User ==', unscopedUser.constructor === User); // true\r\n  console.log('unscopedUsers constructors are User ==', unscopedUsers.every(i => i.constructor === User)); // true\r\n  console.log('scopedUser constructor is User ==', scopedUser.constructor === User); // false\r\n  console.log('scopedUsers constructors are User ==', scopedUsers.every(i => i.constructor === User)); // false\r\n\r\n  process.exit(0);\r\n}\r\n\r\nmain();\r\n```\r\n\r\n## What do you expect to happen?\r\nI expect the object instance constructors to always be `User` even if I used `.scope()` to retrieve it.\r\n\r\n## What is actually happening?\r\nWhen `.scope()` is used during retrieval the instance constructor is no longer `User`.\r\n\r\n__Dialect:__ postgres\r\n__Dialect version:__ ??\r\n__Database version:__ 10.3\r\n__Sequelize version:__ 4.37.10\r\n__Tested with latest release:__ Yes (4.37.10)"
    },
    "satisfaction_conditions": [
      "Instance identification must remain consistent regardless of scope usage",
      "Multiple concurrent scopes must remain independent",
      "Model instances must maintain their relationship to the original model definition"
    ],
    "created_at": "2018-05-30T21:08:10Z"
  },
  {
    "id": "https://github.com/sequelize/sequelize/issues/8856",
    "source": {
      "issue_number": 8856
    },
    "initial_question": {
      "title": "add support of || (double-pipe) concat operator",
      "body": "<!--\r\n\r\nPlease note this is an issue tracker, not a support forum.\r\nFor general questions, please use StackOverflow or Slack.\r\n\r\nFor bugs, please fill out the template below.\r\n\r\n-->\r\n\r\n## What are you doing?\r\n<!-- Post a minimal, self-contained code sample that reproduces the issue, including models and associations -->\r\n\r\nI try to concat (`||`) binary data to a field using `updateQuery`.\r\n\r\n```js\r\nvar query = db.dialect.QueryGenerator.updateQuery('myTable', { data: db.literal('data || $data') }, { id:1 } ) )\r\n...\r\ndb.query(query, {\r\n  type: db.QueryTypes.UPDATE,\r\n  bind: {\r\n    data: myBuffer\r\n  }\r\n});\r\n```\r\nI would like to use `db.col()` and `db.literal()` in my previous expression, but the `||` operator is not available:\r\n`{ data: db.concat(db.col('data'), db.literal('$data')) }`\r\n\r\n\r\n__Dialect:__  any\r\n__Dialect version:__ latest\r\n__Database version:__ latest\r\n__Sequelize version:__ latest\r\n__Tested with latest release:__ No (If yes, specify that version)\r\n\r\n\r\n**Note :** _Your issue may be ignored OR closed by maintainers if it's not tested against latest version OR does not follow issue template._\r\n"
    },
    "satisfaction_conditions": [
      "Binary data concatenation must work successfully in PostgreSQL",
      "Query must properly handle parameter binding",
      "Generated SQL must be compatible with BYTEA data type",
      "Concatenation operation must preserve binary data integrity",
      "Query must work within Sequelize's ORM framework"
    ],
    "created_at": "2018-01-08T10:11:05Z"
  },
  {
    "id": "https://github.com/sequelize/sequelize/issues/8642",
    "source": {
      "issue_number": 8642
    },
    "initial_question": {
      "title": "sequelize validator error",
      "body": "<!--\r\n\r\nPlease note this is an issue tracker, not a support forum.\r\nFor general questions, please use StackOverflow or Slack.\r\n\r\nFor bugs, please fill out the template below.\r\n\r\n-->\r\n\r\n## What are you doing?\r\n<!-- Post a minimal, self-contained code sample that reproduces the issue, including models and associations -->\r\nI was changing string based operators into symbol based operators. But one of them caused a problem.\r\n```js\r\n//  model\r\nconst users = sequelize.define('users', {\r\n\temail: {\r\n\t\ttype: DataTypes.STRING({ length: 255 }),\r\n\t\tallowNull: true,\r\n\t\tvalidate: { isEmail: true }\r\n\t},\r\n//   ....\r\n\r\n//  actual querybuilder\r\n return db.mySequel.transaction(t => {\r\n        return db.users.findOrCreate({\r\n            where: { email: { [Op.eq]: p_email} },\r\n            defaults: {\r\n                password: p_password,\r\n                username: p_username\r\n            },\r\n            transaction: t\r\n        }).spread((rs, created) => {\r\n            if (created == false) apiError(\"10005\");\r\n            return db.user_has_musician_type.bulkCreate([\r\n                {\r\n                    user_id: rs.id,\r\n                    musician_type: 'G',\r\n                    musician_type_id: p_genre\r\n                },\r\n                {\r\n                    user_id: rs.id,\r\n                    musician_type: 'I',\r\n                    musician_type_id: p_instrument\r\n                }\r\n            ], {\r\n                transaction: t,\r\n                raw: true\r\n            });\r\n        })\r\n    }).then(rs => {\r\n        res.apiResponse(true);\r\n    }).catch(err => {\r\n        next(err);\r\n    });\r\n```\r\n\r\n## What do you expect to happen?\r\nI wanted that sequelize examine p_email(string) properly and create record.\r\n\r\n## What is actually happening?\r\nTwo errors occurred. Both of them were ValidationError related with `isEmail`validation option and the value property was {Symbol(eq) : \"tese211@ttest.com\"} not \"tese211@ttest.com\".\r\nThe error messages were:\r\n- email cannot be an array or an object\r\n- Validation isEmail on email failed\r\n\r\nIt seems sequelize validator examine wrong value.\r\n\r\n__Dialect:__ mysql\r\n__Database version:__ 5.5.42\r\n__Sequelize version:__ 4.22.6\r\n__Tested with master branch:__ Yes\r\n\r\n**Note :** _Your issue may be ignored by maintainers if it's not tested against `master` branch OR does not follow issue template._\r\n"
    },
    "satisfaction_conditions": [
      "Query structure must maintain security against operator injection"
    ],
    "created_at": "2017-11-16T12:05:28Z"
  },
  {
    "id": "https://github.com/sequelize/sequelize/issues/7697",
    "source": {
      "issue_number": 7697
    },
    "initial_question": {
      "title": "'include' itself issue?",
      "body": "## What you are doing?\r\n```js\r\nmodels.Booking\r\n.findAll({\r\nattributes: ['id'], // for testing\r\ninclude: [\r\n{\r\nmodel: models.Room,\r\nattributes: ['name'], // for testing\r\nwhere: { pensionId: request.params.pensionId }\r\n}\r\n]\r\n})\r\n```\r\n\r\n## What do you expect to happen?\r\nThe sql I wanted is\r\n````select * from [Booking] inner join [Room] room on room.pensionId = 'Foo'````\r\nthis comes out exactly what i want. (tested on heidisql)\r\n\r\n\r\n## What is actually happening?\r\nHowever, it comes\r\n````SELECT [Booking].[id], [Room].[id] AS [Room.id], [Room].[name] AS [Room.name] FROM [Booking] AS [Booking] INNER JOIN [Room] AS [Room] ON [Booking].[roomId] = [Room].[id] AND [Room].[pensionId] = N'Foo';````\r\n\r\nProblem is why automatically include this clause????\r\n````[Booking].[roomId] = [Room].[id]````\r\nthis will be perfect without above clause.\r\n\r\n\r\n__Dialect:__ mssql"
    },
    "satisfaction_conditions": [
      "Query must maintain proper relationship integrity between Booking and Room tables",
      "Query must filter rooms based on the specified pensionId",
      "Query must return the specified attributes from both tables",
      "Query must produce results consistent with an INNER JOIN operation"
    ],
    "created_at": "2017-05-27T05:30:12Z"
  },
  {
    "id": "https://github.com/sequelize/sequelize/issues/6611",
    "source": {
      "issue_number": 6611
    },
    "initial_question": {
      "title": "Changing the name of an association to get output as JSON",
      "body": "## What you are doing?\n\nSo, lets say I have an association (below) and it has been included and then output to JSON.\n\n``` js\n// in the model\nUser.belongsToMany(models.Permissions, {through: models.UsersPermissions, foreignKey: 'userId'});\n\n// included\ndb.Users.findAll({ \n        include: [ {\n            model: db.Permissions,\n        through: {\n                 attributes: []\n                }\n        }]\n})\n\n//output\n\"Permissions\": [\n        {\n          \"id\": 1,\n          \"name\": \"add-role\",\n          \"description\": \"Allows the user to add a new role to the system\"\n        }\n      ]\n```\n## What do you expect to happen?\n\nNow, that final output comes out as a 'Permission', note the capital P.\n\nWhat I would expect is a lower case 'p', because I don;t know of any standard that would like that capitalized.\n\nThe only way to change this is to use the \"as\" operator. Therefore...\n\n``` js\n// in the model\nUser.belongsToMany(models.Permissions, {through: models.UsersPermissions, foreignKey: 'userId', as: 'permissions'});\n\n// included\ndb.Users.findAll({ \n        include: [ {\n        model: db.Permissions,\n                as: 'permissions',\n        through: {\n                 attributes: []\n                }\n        }]\n})\n\n//output\n\"permissions\": [\n        {\n          \"id\": 1,\n          \"name\": \"add-role\",\n          \"description\": \"Allows the user to add a new role to the system\"\n        }\n      ]\n```\n\nNow, you may feel this is great, what isnt great however is that this \"as\" operator must be used in both the model AND the includes.\n\nIs this the only way to have this happen? Or have I got something wrong here?\n"
    },
    "satisfaction_conditions": [
      "Association name appears in lowercase in JSON output",
      "Association functionality remains intact",
      "Consistent association reference across queries",
      "Valid JSON structure preservation"
    ],
    "created_at": "2016-09-19T15:47:48Z"
  },
  {
    "id": "https://github.com/sequelize/sequelize/issues/6576",
    "source": {
      "issue_number": 6576
    },
    "initial_question": {
      "title": "JSON format for queries using \"include\"",
      "body": "First, thanks for the awesome library. Saves me a ton of time in my projects. I've had this problem for quite a while and made a bunch of workarounds, finally decided to just ask you guys. Thanks in advance!\n\nBasically i want to query the db and include an association as nest json. EG:\n\n```\nUser.findOne({\n    raw: true,\n    include: [{\n      model: Company,\n      as: 'company'\n    }]\n  })\n```\n\nWhat im getting is:\n\n```\n{\n  id: 1234,\n  name: 'Blah',\n  company.id: 1234,\n  company.name: 'blah blah'\n}\n```\n\nI would expect:\n\n```\n{\n  id: 1234,\n  name: 'Blah',\n  company: { \n    id: 1234,\n    name: 'blah blah'\n  }\n}\n```\n\nWhat am i doing wrong here?\n\n**Dialect:** postgres \n**Database version:** 9.5.2.0\n**Sequelize version:** 3.23.4\n"
    },
    "satisfaction_conditions": [
      "Query results must maintain nested association structure",
      "Query output must be JSON-serializable",
      "Associated model data must be included in results",
      "Query results must be compatible with Express response methods"
    ],
    "created_at": "2016-09-09T17:33:16Z"
  },
  {
    "id": "https://github.com/sequelize/sequelize/issues/6572",
    "source": {
      "issue_number": 6572
    },
    "initial_question": {
      "title": "Sequelize omitting field when casting to array",
      "body": "I am attempting to use the postgres citext module with Sequelize, so far it has worked well by using literals for queries and defining the type in the model. However because Sequelize does not understand what the citext type is, it returns my citext arrays as strings. e;g \"{item 1, item2}\"  \nTo get around this I am trying to cast the citext array to a TEXT or VARCHAR array in the query, however when I do this, Sequelize does not show that field at all.    \n\nIf I set raw: true, the field shows fine, and as an array.\n\n``` js\nUsers.findAndCountAll({\n        where: { },\n        attributes: [\n          'id',\n          'createdAt',\n          'updatedAt',\n          db.cast(db.col('nicknames'), 'text[]')\n        ]\n})\n```\n## What do you expect to happen?\n\nI expect there to be a nicknames field returned from sequelize and it to be an array, instead it's as if the attribute is not there at all.\n## What is actually happening?\n\nThis is the generated SQL, the SQL itself works fine when I try it in a database manager, but the output Sequelize gives me omits the nickname field.\n\nSELECT \"User\".\"id\", \"User\".\"createdAt\", \"User\".\"updatedAt\", CAST(\"nicknames\" AS TEXT[]) FROM \"Users\" AS \"User\" WHERE \"User\".\"deletedAt\" IS NULL;\n\n**Dialect:** postgres\n**Database version:** 9.5\n**Sequelize version:** 3.23.4\n"
    },
    "satisfaction_conditions": [
      "The SQL query must properly cast the citext array to a compatible data type",
      "The query must maintain all other requested fields (id, createdAt, updatedAt)"
    ],
    "created_at": "2016-09-08T20:59:12Z"
  },
  {
    "id": "https://github.com/sequelize/sequelize/issues/6564",
    "source": {
      "issue_number": 6564
    },
    "initial_question": {
      "title": "How access a model's associated models",
      "body": "Is there a programmatic way to access the associated models of a model?\n\nFor example, if there is a 1:M association between the models `Author` and `Book`, is there a way that I can access the `Book` model from the `Author` model along with the type of association?\n\nSomething like `Author.getAssociations()` would return something like:\n\n``` javascript\n[{\n    relationship: \"hasMany\",\n    model: Book\n}]\n```\n"
    },
    "satisfaction_conditions": [
      "Model associations must be programmatically accessible",
      "Association type information must be retrievable",
      "Information must be structured in a queryable format"
    ],
    "created_at": "2016-09-07T18:20:05Z"
  },
  {
    "id": "https://github.com/sequelize/sequelize/issues/6549",
    "source": {
      "issue_number": 6549
    },
    "initial_question": {
      "title": "How can I create this SQL?",
      "body": "Hello. \n## What you are doing?\n\n``` js\nRoom.belongsTo(Hotel, {foreignKey: 'hotelId'});\n\nRoom.findAndCountAll({\n  where: {\n    sellPrice: {lte: 10000}\n  },\n  include: [{\n    model: Hotel,\n    required: false,\n    where: {\n      region: 'Tokyo'\n    }\n  }]\n});\n\n```\n## What do you expect to happen?\n\n_I wanted._\n- get a room even if hotelId does not exist.\n- make the filter with the region.\n- LEFT OUTER JOIN `hotels` AS `hotel` ON `rooms`.`hotelId` = `hotel`.`id` **WHERE** `hotel`.`region` = 'Tokyo';\n### I wanted this sql\n\n``` sql\nSELECT `rooms`.`id`,\n       `rooms`.`hotelId`,\n       `rooms`.`hotelName`,\n       `rooms`.`roomType`,\n       `rooms`.`smoking`,\n       `rooms`.`breakfast`,\n       `rooms`.`dinner`,\n       `rooms`.`checkIn`,\n       `rooms`.`checkOut`,\n       `rooms`.`numberOfAdults`,\n       `rooms`.`numberOfChildren`,\n       `rooms`.`bookingFrom`,\n       `rooms`.`reservationCode`,\n       `rooms`.`confirmationCode`,\n       `rooms`.`originalPrice`,\n       `rooms`.`sellPrice`,\n       `rooms`.`discountRate`,\n       `rooms`.`chargeStatus`,\n       `rooms`.`postingPeriod`,\n       `rooms`.`message`,\n       `rooms`.`reviewStatus`,\n       `rooms`.`saleStatus`,\n       `rooms`.`transferStatus`,\n       `rooms`.`chargeId`,\n       `rooms`.`createdAt`,\n       `rooms`.`updatedAt`,\n       `hotel`.`id` AS `hotel.id`,\n       `hotel`.`name` AS `hotel.name`,\n       `hotel`.`kanaName` AS `hotel.kanaName`,\n       `hotel`.`formattedAddress` AS `hotel.formattedAddress`,\n       `hotel`.`country` AS `hotel.country`,\n       `hotel`.`region` AS `hotel.region`,\n       `hotel`.`locality` AS `hotel.locality`,\n       `hotel`.`subLocality1` AS `hotel.subLocality1`,\n       `hotel`.`subLocality2` AS `hotel.subLocality2`,\n       `hotel`.`subLocality3` AS `hotel.subLocality3`,\n       `hotel`.`subLocality4` AS `hotel.subLocality4`,\n       `hotel`.`postalCode` AS `hotel.postalCode`,\n       `hotel`.`phone` AS `hotel.phone`,\n       `hotel`.`fax` AS `hotel.fax`,\n       `hotel`.`access` AS `hotel.access`,\n       `hotel`.`station` AS `hotel.station`,\n       `hotel`.`reviewRate` AS `hotel.reviewRate`,\n       `hotel`.`reviewCount` AS `hotel.reviewCount`,\n       `hotel`.`parking` AS `hotel.parking`,\n       `hotel`.`images` AS `hotel.images`,\n       `hotel`.`checkInTime` AS `hotel.checkInTime`,\n       `hotel`.`checkOutTime` AS `hotel.checkOutTime`,\n       `hotel`.`lastCheckInTime` AS `hotel.lastCheckInTime`,\n       `hotel`.`hotelPolicy` AS `hotel.hotelPolicy`,\n       `hotel`.`cancelPolicy` AS `hotel.cancelPolicy`,\n       `hotel`.`creditCard` AS `hotel.creditCard`,\n       `hotel`.`latitude` AS `hotel.latitude`,\n       `hotel`.`longitude` AS `hotel.longitude`,\n       `hotel`.`listedStatus` AS `hotel.listedStatus`,\n       `hotel`.`source` AS `hotel.source`,\n       `hotel`.`createdAt` AS `hotel.createdAt`,\n       `hotel`.`updatedAt` AS `hotel.updatedAt`\nFROM `rooms` AS `rooms`\nLEFT OUTER JOIN `hotels` AS `hotel` ON `rooms`.`hotelId` = `hotel`.`id`\nWHERE `hotel`.`region` = 'Tokyo';\n```\n## What is actually happening?\n- filter with the region is not working.\n- LEFT OUTER JOIN `hotels` AS `hotel` ON `rooms`.`hotelId` = `hotel`.`id` **AND** `hotel`.`region` = 'Tokyo';\n### Actual sql\n\n``` sql\nSELECT `rooms`.`id`,\n       `rooms`.`hotelId`,\n       `rooms`.`hotelName`,\n       `rooms`.`roomType`,\n       `rooms`.`smoking`,\n       `rooms`.`breakfast`,\n       `rooms`.`dinner`,\n       `rooms`.`checkIn`,\n       `rooms`.`checkOut`,\n       `rooms`.`numberOfAdults`,\n       `rooms`.`numberOfChildren`,\n       `rooms`.`bookingFrom`,\n       `rooms`.`reservationCode`,\n       `rooms`.`confirmationCode`,\n       `rooms`.`originalPrice`,\n       `rooms`.`sellPrice`,\n       `rooms`.`discountRate`,\n       `rooms`.`chargeStatus`,\n       `rooms`.`postingPeriod`,\n       `rooms`.`message`,\n       `rooms`.`reviewStatus`,\n       `rooms`.`saleStatus`,\n       `rooms`.`transferStatus`,\n       `rooms`.`chargeId`,\n       `rooms`.`createdAt`,\n       `rooms`.`updatedAt`,\n       `hotel`.`id` AS `hotel.id`,\n       `hotel`.`name` AS `hotel.name`,\n       `hotel`.`kanaName` AS `hotel.kanaName`,\n       `hotel`.`formattedAddress` AS `hotel.formattedAddress`,\n       `hotel`.`country` AS `hotel.country`,\n       `hotel`.`region` AS `hotel.region`,\n       `hotel`.`locality` AS `hotel.locality`,\n       `hotel`.`subLocality1` AS `hotel.subLocality1`,\n       `hotel`.`subLocality2` AS `hotel.subLocality2`,\n       `hotel`.`subLocality3` AS `hotel.subLocality3`,\n       `hotel`.`subLocality4` AS `hotel.subLocality4`,\n       `hotel`.`postalCode` AS `hotel.postalCode`,\n       `hotel`.`phone` AS `hotel.phone`,\n       `hotel`.`fax` AS `hotel.fax`,\n       `hotel`.`access` AS `hotel.access`,\n       `hotel`.`station` AS `hotel.station`,\n       `hotel`.`reviewRate` AS `hotel.reviewRate`,\n       `hotel`.`reviewCount` AS `hotel.reviewCount`,\n       `hotel`.`parking` AS `hotel.parking`,\n       `hotel`.`images` AS `hotel.images`,\n       `hotel`.`checkInTime` AS `hotel.checkInTime`,\n       `hotel`.`checkOutTime` AS `hotel.checkOutTime`,\n       `hotel`.`lastCheckInTime` AS `hotel.lastCheckInTime`,\n       `hotel`.`hotelPolicy` AS `hotel.hotelPolicy`,\n       `hotel`.`cancelPolicy` AS `hotel.cancelPolicy`,\n       `hotel`.`creditCard` AS `hotel.creditCard`,\n       `hotel`.`latitude` AS `hotel.latitude`,\n       `hotel`.`longitude` AS `hotel.longitude`,\n       `hotel`.`listedStatus` AS `hotel.listedStatus`,\n       `hotel`.`source` AS `hotel.source`,\n       `hotel`.`createdAt` AS `hotel.createdAt`,\n       `hotel`.`updatedAt` AS `hotel.updatedAt`\nFROM `rooms` AS `rooms`\nLEFT OUTER JOIN `hotels` AS `hotel` ON `rooms`.`hotelId` = `hotel`.`id`\nAND `hotel`.`region` = 'Tokyo';\n```\n\n**Dialect:** mysql\n**Database version:** 5.7.11\n**Sequelize version:** 3.24.1\n"
    },
    "satisfaction_conditions": [
      "Query must return all specified room and hotel fields"
    ],
    "created_at": "2016-09-06T08:05:47Z"
  },
  {
    "id": "https://github.com/sequelize/sequelize/issues/3237",
    "source": {
      "issue_number": 3237
    },
    "initial_question": {
      "title": "Question: raw:true in the relational queries",
      "body": "Hi,\n\nAssuming I have the next relations described:\n\n``` javascript\n    models.User.belongsToMany(models.Role,{through:'user__role',foreignKey:'users_id',otherKey:'roles_id'});\n```\n\nSo in the code I do the next:\n\n``` javascript\nUser.find(2298139).then(function(user){\n                    user.getRoles().then(function(roles){\n                        console.log(roles);\n                        reply(roles);\n                    });\n                });\n```\n\nAnd I want to receive the plain result, without the sequelize wrappings.\n\nThe questions are:\n1. How and where should I inject `{options: {raw: true}}`\n2. How can I know that the `raw:true` had worked? I mean how the roles object would be different then?\n\nLooking forward to receive any answer.\n\nRegards,\n"
    },
    "satisfaction_conditions": [
      "Association data (through table data) must be accessible in the results",
      "Query must maintain existing relationship traversal functionality"
    ],
    "created_at": "2015-02-27T18:17:33Z"
  },
  {
    "id": "https://github.com/sequelize/sequelize/issues/3082",
    "source": {
      "issue_number": 3082
    },
    "initial_question": {
      "title": "Update a record by using an instance method on one of the fields (one query)",
      "body": "Hi,\n\n  First off - sequelize has been a pleasure to work with.  Been helping much on a project I'm working on.  Digging around github, looks like LOTS of hard and mindful work has been put in.  Thanks. \n\n  I was wondering if it was possible to use a Model's instance method in the updating of a specific row.  The preference is to generate one update query (update... where...) and keep associated Model functionality, like creating a UUID, in the Model without replicating elsewhere.  So doing a find first, then an update would allow me to use instance methods (or getters/setters) on the Model, but would be an example of two queries.  I could also do an update() call with where clause, but would have to re-create the functionality in my model, like the generation of a UUID, and use that inside my update().  \n\nI'm using 2.0.0-rc8 with postgres.\n\nModel:\nI've simplified the Model here...\n\n``` javascript\nmodule.exports = function(sequelize, DataTypes) {\n  var tableA = sequelize.define(\"tableA\", {\n    id: {\n      type: DataTypes.UUID,\n      primaryKey: true,\n      defaultValue: DataTypes.UUIDV4,\n    }\n  }, {\n    classMethods: {\n      associate: function(models) {\n        tableA.belongsTo(models.tableB);\n      }\n    },\n    instanceMethods: {\n      newUUID: function() {\n        return uuid.v4();  // required sequelize's module dependency on node-uuid to enable this\n      }\n    }\n  });\n```\n\n  There are three ways I was trying to make this happen, and I'm probably just missing something...\n\n1.Using the update method:\n\n``` javascript\ntableA.update({\n      id: this.newUUID,\n    }, {\n      where: {\n        tableB_id: 'some value'\n      }\n    }\n  );\n```\n\nThe problem is that 'primaryKey' is considered null and this violate a not-null constraint - my understanding is that Model instance methods, and getters/setters require an instance to be created first, hence the issue.  I've observed this occurring with a field that is allowNull: false too.\n\n2.Building to generate an instance method:\n\n``` javascript\nvar tableUpdate = models.tableA.build({\n    id: this.newUUID,\n  }, {\n    isNewRecord: false  // to make this an update and NOT a create\n  });\n```\n\nThis works in providing me access to an instance method or a getter/setter, however I can't figure out how to limit the update to a \"where\" on a foreign key field.\n\n3.Creating a public function, outside sequelize, as a helper of sorts:\n\n``` javascript\nmodule.exports = function(sequelize, DataTypes) {\n  var tableA = sequelize.define(\"tableA\", {\n    id: {\n      type: DataTypes.UUID,\n      primaryKey: true,\n      defaultValue: DataTypes.UUIDV4,\n    }\n  }, {\n    classMethods: {\n      associate: function(models) {\n        tokenA.belongsTo(models.tableB);\n      }\n    }\n  });\n\n  tableA.newUUID = function() {\n    return uuid.v4();\n  }\n\n... then later on \n\n    tableA.update({\n      id: tableA.newUUID,\n    }, {\n      where: {\n        tableB_id: 'some value'\n      }\n    }\n  );\n```\n\nThis works, but its nature does not make it exclusive to a model's instance.  Maybe its good enough - it opens the door for a model helper file. \n\nIf it's not possible to do such a thing with one query, is it reasonable to request an options.where for a build? Or possibly some other solution?\n\nI may have overcomplicated things with my desire for one query vs two.  I'm open to any suggestions/best-practices.\n\nThanks.\n"
    },
    "satisfaction_conditions": [
      "Model's instance method functionality must be accessible during update",
      "Update must support WHERE clause filtering"
    ],
    "created_at": "2015-02-09T18:30:59Z"
  },
  {
    "id": "https://github.com/sequelize/sequelize/issues/2775",
    "source": {
      "issue_number": 2775
    },
    "initial_question": {
      "title": "BOOLEAN field not updating when passed a string 'true' or 'false' (Postgres)",
      "body": "I have the following model: \n\n``` javascript\n\"use strict\";\n\nmodule.exports = function(sequelize, DataTypes) {\n  var Program = sequelize.define(\"Program\", {\n    name: {\n      type: DataTypes.STRING,\n      allowNull: false\n    },\n    short_name: DataTypes.STRING,\n    description: DataTypes.STRING,\n    short_description: DataTypes.STRING,\n    fitness_level: {\n      type: DataTypes.ENUM('average', 'good', 'high'),\n      defaultValue: 'average'\n    },\n    prerequisites: DataTypes.ARRAY(DataTypes.STRING),\n    knowledge_skills_equipment: DataTypes.ARRAY(DataTypes.STRING),\n    premium_activity: {\n      type: DataTypes.BOOLEAN,\n      defaultValue: false\n    },\n    location: {\n      type: DataTypes.ENUM('onsite', 'offsite'),\n      defaultValue: 'onsite',\n      allowNull: false\n    },\n    program_periods_available: DataTypes.INTEGER,\n    max_participants_per_period: DataTypes.INTEGER,\n    program_periods_required: {\n      type: DataTypes.INTEGER,\n      defaultValue: 1,\n      validate: { min: 1, max: 3 },\n      allowNull: false\n    },\n    fee: {\n      type: DataTypes.FLOAT,\n      defaultValue: 0.00\n    },\n    hidden: {\n      type: DataTypes.BOOLEAN,\n      defaultValue: true,\n      allowNull: false\n    },\n    oos_required: {\n      type: DataTypes.INTEGER,\n      defaultValue: 0,\n      allowNull: false\n    }\n  }, {\n    underscored: true,\n    classMethods: {\n      associate: function(models) {\n        Program.hasMany(models.OOS, { as: 'OOS', through: 'program_oos_assignments' })\n      }\n    }\n  });\n\n  return Program;\n};\n```\n\nIf I pass a boolean literal to `Instance#updateAttributes`, the value gets updated successfully:\n\n``` javascript\nmodels.Program.find(1).then(function(record) { record.updateAttributes( {hidden: true} ) })\n```\n\nSQL Generated:\n\n``` sql\nExecuting (default): SELECT \"id\", \"name\", \"short_name\", \"description\", \"short_description\", \"fitness_level\", \"prerequisites\", \"knowledge_skills_equipment\", \"premium_activity\", \"location\", \"program_periods_available\", \"max_participants_per_period\", \"program_periods_required\", \"fee\", \"hidden\", \"oos_required\", \"created_at\", \"updated_at\" FROM \"Programs\" AS \"Program\" WHERE \"Program\".\"id\"=1;\nExecuting (default): UPDATE \"Programs\" SET \"hidden\"=true,\"updated_at\"='2014-12-24 07:17:01.762 +00:00' WHERE \"id\"=1 RETURNING *\n```\n\nIf I pass in a string value of 'true' or 'false' (as might be received in a form POST), I get some weird behaviour:\n\n``` javascript\nmodels.Program.find(1).then(function(record) { record.updateAttributes( {hidden: 'true'} ) })\n```\n\nSQL Generated: \n\n``` sql\nExecuting (default): SELECT \"id\", \"name\", \"short_name\", \"description\", \"short_description\", \"fitness_level\", \"prerequisites\", \"knowledge_skills_equipment\", \"premium_activity\", \"location\", \"program_periods_available\", \"max_participants_per_period\", \"program_periods_required\", \"fee\", \"hidden\", \"oos_required\", \"created_at\", \"updated_at\" FROM \"Programs\" AS \"Program\" WHERE \"Program\".\"id\"=1;\nExecuting (default): UPDATE \"Programs\" SET \"hidden\"=false,\"updated_at\"='2014-12-24 07:18:01.253 +00:00' WHERE \"id\"=1 RETURNING *\n```\n\nIn this case, setting `hidden` to `'true'` (or any string value, for that matter) resulted in it being set to `false`.\n\nI've tried using a setter method on the `hidden` field to cast the string to a boolean:\n\n``` javascript\nfunction castStringToBoolean(value) {\n  var ret;\n  if (value === 'true') {\n    ret = true;\n  } else {\n    ret = false;\n  }\n  return ret;\n}\n```\n\nWith this setter in place, nothing at all is set for the `hidden` field:\n\n``` javascript\nmodels.Program.find(1).then(function(record) { record.updateAttributes( {hidden: 'true'} ) })\n```\n\nSQL Generated:\n\n``` sql\nExecuting (default): SELECT \"id\", \"name\", \"short_name\", \"description\", \"short_description\", \"fitness_level\", \"prerequisites\", \"knowledge_skills_equipment\", \"premium_activity\", \"location\", \"program_periods_available\", \"max_participants_per_period\", \"program_periods_required\", \"fee\", \"hidden\", \"oos_required\", \"created_at\", \"updated_at\" FROM \"Programs\" AS \"Program\" WHERE \"Program\".\"id\"=1;\nExecuting (default): UPDATE \"Programs\" SET \"updated_at\"='2014-12-24 07:20:49.153 +00:00' WHERE \"id\"=1 RETURNING *\n```\n\nIf I cast the field to a boolean before sending it to `updateAttributes` (e.g. in my Express route handler), then it works:\n\n``` javascript\nif (req.body.hasOwnProperty('hidden') && typeof req.body.hidden === 'string') {\n    req.body.hidden = req.body.hidden === 'true' ? true : false\n}\n```\n\nWhat is the proper way of handling booleans in Seqelize? Why is the setter method not working as I think it should?\n"
    },
    "satisfaction_conditions": [
      "Boolean field must correctly store true/false values when string representations ('true'/'false') are provided as input",
      "Solution must handle data type conversion before database persistence",
      "Must maintain compatibility with direct boolean literal inputs",
      "Must work within Sequelize's data model framework"
    ],
    "created_at": "2014-12-24T07:27:42Z"
  },
  {
    "id": "https://github.com/sequelize/sequelize/issues/2648",
    "source": {
      "issue_number": 2648
    },
    "initial_question": {
      "title": "how to assign relationship in more than one many to many relationships",
      "body": "Now I'm running into a problem , I have two entities of person and company, at the same time, they have two relationships say companyperson, boardmembership, and both of them are many to many. Here is the problem ,when I use like this:\n    person.getCompanies()\nwhich give me companies of boardmembership, but how can I get companies from relation table of companyperson? Is there any ways to explicitly assign my relation table?\n"
    },
    "satisfaction_conditions": [
      "Multiple many-to-many relationships between the same entities must be distinguishable",
      "Each relationship type must be independently queryable",
      "Support for eager loading of multiple relationship types",
      "Asynchronous operations must be properly handled"
    ],
    "created_at": "2014-12-03T07:29:23Z"
  },
  {
    "id": "https://github.com/sequelize/sequelize/issues/2530",
    "source": {
      "issue_number": 2530
    },
    "initial_question": {
      "title": "proper way of doing instance update",
      "body": "why does update does not take the form of \nModel.build().update({attributes to be update})?\n"
    },
    "satisfaction_conditions": [
      "Instance data must be successfully updated in the database",
      "Method must handle existing records rather than creating new ones",
      "Update operation must be syntactically valid within the ORM's API",
      "Method must accept attribute values to be updated"
    ],
    "created_at": "2014-11-05T05:52:58Z"
  },
  {
    "id": "https://github.com/sequelize/sequelize/issues/2460",
    "source": {
      "issue_number": 2460
    },
    "initial_question": {
      "title": "Multi-Level Includes and Aggregate Functions",
      "body": "Trying to do a little more advanced queries with what I have setup and I'm running into a few issues. Looking for a nudge in the right direction. I have a model which contains three major objects `user`, `action`, and `actionValue`. The idea is that a user can take multiple actions multiple times and each of those actions are worth some amount of points.\n\nI'm trying to model the calculations for total points inside of a find statement to be used on a dashboard of sorts but I'm having troubles figuring out how to do all of this in Sequelize without using a custom query.\n\nHere's my data model.\n### User\n- id (int) - Auto-generated\n- username (string) - user input\n### Action\n- id (int) - Auto-generated\n- actionTypeId (int) - The ID for the corresponding action in the `actionType` model.\n- count (int) - Number of times the action has been done\n## Action Type\n- id (int) - Auto-generated\n- name (string) - Name of the action\n- value (int) - Number of points the action is worth.\n\nWhat I'm trying to do is retrieve a summary of the points for the user based on the type of action. To do this my `find()` statement looks like the following:\n\n``` js\nmodel.user.find(\n    {\n        where: {\n            username: 'bob'\n        },\n        include: [\n            {\n                model: model.action,\n                include: [ model.actionType ]\n            }\n        ]\n    }\n)\n```\n\nThis will retrieve for me the row on `user` that has a `username` of 'bob' and then retrieve all of their rows on the `action` table and the associated `actionType` record for each, sample below (represented as a JSON array of objects since it is too many fields for a table).\n\n``` js\n[\n  {\n   \"id\": 0\n   \"username\": \"bob\",\n   \"action.id\": 0,\n   \"action.actionTypeId\": 0,\n   \"action.count\": 5,\n   \"action.actionType.id\": 0,\n   \"action.actionType.name\": \"Lost Game\",\n   \"action.actionType.value\": 2\n  },\n  {\n   \"id\": 0\n   \"username\": \"bob\"\n   \"action.id\": 1\n   \"action.actionTypeId\": 1\n   \"action.count\": 3\n   \"action.actionType.id\": 0\n   \"action.actionType.name\": \"Won Game\",\n   \"action.actionType.value\": 10\n  }\n]\n```\n\nI could then parse through that data and I would come out with composite values by multiplying the number of times an action was taken with the value it holds. So for the data above I would see that the user `bob` got 10 points (5 \\* 2) for losing a total of 5 games, and then he got 30 points (3 \\* 10) for winning a total of 3 games giving `bob` a grand total of 40 points.\n\nSince I want to be able to utilize the ordering and other capabilities of the database I want to be able to calculate what I ran through above in my query instead of having to do it on the application server.\n\nIdeally I'm looking for output containing the following (again a JSON object because it is too large for a table):\n\n``` js\n{\n  \"id\": 0,\n  \"username\": \"bob\",\n  \"score\": 40 // This would be the `sum(action.count * action.actionType.value)`\n}\n```\n\nAny help on if this is feasible right now or not through the model would be much appreciated. Thanks!\n"
    },
    "satisfaction_conditions": [
      "Query must calculate total points by multiplying action counts with their corresponding point values",
      "Results must include user identification and total score in a single query response",
      "Query must handle multi-level relationships between User, Action, and ActionType tables",
      "Results must be filterable by username",
      "Calculation must be performed at the database level"
    ],
    "created_at": "2014-10-21T21:13:30Z"
  },
  {
    "id": "https://github.com/sequelize/sequelize/issues/2330",
    "source": {
      "issue_number": 2330
    },
    "initial_question": {
      "title": "Defining field and name for foreignKey in association",
      "body": "Hi, so I am migrating to Sequelize from Geddy/Model while using a Postgres. In Geddy all properties in the code are camelCase and when making queries it translates things to snake_case. \n\nTo keep with our existing codebase I want to continue having properties in the code be camelCase while column names are snake_case. For the property names I created a work around by creating a wrapper around `sequelize.define` to add a field entry to all attributes. \n\nI have not figured out how to do this for associations. I want to be able to specify `consult.find({where: {userId: 12}})` and have Sequelize know that the column name should be `user_id`. Is it possible to specify both field and name for foreignKey associations? Or what would be an appropriate work around?\n\nRight now I am using the most up-to-date beta (I believe it is 8) and intend on migrating to 2.0.0 when it comes out. \n"
    },
    "satisfaction_conditions": [
      "Database queries must work with camelCase property names in application code while using snake_case column names in PostgreSQL",
      "Foreign key associations must properly map between camelCase property names and snake_case column names",
      "The solution must work with Sequelize's association definitions",
      "The solution must maintain compatibility with the target Sequelize version (2.0.0)"
    ],
    "created_at": "2014-09-22T20:31:14Z"
  },
  {
    "id": "https://github.com/sequelize/sequelize/issues/2305",
    "source": {
      "issue_number": 2305
    },
    "initial_question": {
      "title": "Can anyone explain how come dataValues can also be accessed directly from the Instance in sequelize",
      "body": "Can anyone explain how come dataValues can also be accessed directly from the Instance in sequelize?\n\nI use for( var key in instance) but can't see any attributes. However I can use instance.name as instance.get('name').\n\nThanks.\n"
    },
    "satisfaction_conditions": [
      "Direct property access and getter method access must both return the same value",
      "Properties must be accessible even if not visible through standard object enumeration",
      "Backwards compatibility with existing code must be maintained",
      "The relationship between direct access and getter methods must be explained"
    ],
    "created_at": "2014-09-20T02:55:49Z"
  },
  {
    "id": "https://github.com/sequelize/sequelize/issues/2298",
    "source": {
      "issue_number": 2298
    },
    "initial_question": {
      "title": "Is it possible to filter multiple fields with functions and ilikes?",
      "body": "What I want to do:\n\nSELECT \\* from users WHERE unnacent(users.name) ILIKE '%t%' AND users.type = 1\n\nIs there a way to generate this query?\n"
    },
    "satisfaction_conditions": [
      "Query must support combining function-based filtering with direct column filtering",
      "Query must support ILIKE text pattern matching on function results",
      "Query must maintain valid SQL syntax when generated",
      "Multiple conditions must be combined with AND logic"
    ],
    "created_at": "2014-09-18T23:06:37Z"
  },
  {
    "id": "https://github.com/sequelize/sequelize/issues/2282",
    "source": {
      "issue_number": 2282
    },
    "initial_question": {
      "title": "How to disconnect from DB?",
      "body": "Hi! I'm being incredibly cheap and running a mysql+node project on heroku.  The super cheap DB option has a hard limit of 10 connections to mysql.  Heroku often \"suspends\" applications when they aren't in use, but that doesn't disconnect the sequelize client from mysql.  I can catch the `SIGTERM` and call a disconnect when the app is \"suspending\", but how would I disconnect the client?\n"
    },
    "satisfaction_conditions": [
      "Database connections are successfully terminated when the application suspends",
      "Application properly handles SIGTERM signal from Heroku",
      "Solution accounts for connection state after disconnection"
    ],
    "created_at": "2014-09-15T04:40:49Z"
  },
  {
    "id": "https://github.com/sequelize/sequelize/issues/2232",
    "source": {
      "issue_number": 2232
    },
    "initial_question": {
      "title": "How access instance properties on view engine not using dataValues",
      "body": "Hi,\nfrom the API reference:\n\n> Instance instances operate with the concept of a dataValues property, which stores the actual values represented by the instance. By default, the values from dataValues can also be accessed directly from the Instance, that is:\n> \n> instance.field\n> // is the same as\n> instance.get('field')\n> // is the same as\n> instance.getDataValue('field')\n\nSo my goal was displaying User properties on my index.dust file. First I tried:\n\n```\napp.get('/dashboard',isLoggedIn, function(req, res) {\n      res.render('dashboard', {\n          user : req.user //  the values from dataValues can also be accessed directly from the Instance\n    });\n});\n```\n\n... and on the view:\n\n```\n<li><a hred=\"#\">{user.username}</a></li>\n```\n\n... but the result was an anchor without the username. The reason of this was because I had to define user like: req.user.**dataValues** instead just req.user.\n\nIs this the expected behavior, should I always expose my record instances using  **dataValues** ??\n\nThanks\n"
    },
    "satisfaction_conditions": [
      "Data access method must use public/supported API methods",
      "Solution must work within the template engine's context"
    ],
    "created_at": "2014-09-04T03:24:33Z"
  },
  {
    "id": "https://github.com/sequelize/sequelize/issues/2130",
    "source": {
      "issue_number": 2130
    },
    "initial_question": {
      "title": "Define PK and FK simultaneously",
      "body": "Seems it's not possible to define PK and FK simultaneously. If I have tables Foo and Bar it's not possible to create FooBar, where PK(foo_id, bar_id) is also foreign keys. I can define additional index in migration but it's not always possible in some DB like SQLite.\n"
    },
    "satisfaction_conditions": [
      "Primary key columns must also function as foreign keys in the junction table",
      "The junction table must maintain referential integrity with both parent tables",
      "The composite primary key must be created from the foreign key columns",
      "The solution must work with the specified database system (SQLite)",
      "The schema must support many-to-many relationships between the parent tables"
    ],
    "created_at": "2014-08-08T07:47:54Z"
  },
  {
    "id": "https://github.com/sequelize/sequelize/issues/2050",
    "source": {
      "issue_number": 2050
    },
    "initial_question": {
      "title": "Migrations: How to add data to a new column",
      "body": "Hello,\n\nI have a simple migration and want to add a UUIDv4 column to an existing table.\n\nI already have migration script set up which adds the new column:\n\n```\nmodule.exports = {\n  up: function(migration, DataTypes, done) {\n    // add altering commands here, calling 'done' when finished\n\n    migration.addColumn(\n        'Graphs',\n        'uuid',\n        { type: DataTypes.UUID, allowNull: false, defaultValue:DataTypes.UUIDV4}\n    )\n    done();\n  },\n  down: function(migration, DataTypes, done) {\n    // add reverting commands here, calling 'done' when finished\n    done();\n  }\n}\n```\n\nNow the tricky part: After adding the new column I'd like to set UUIDs for all rows automatically. Is that possible? \n"
    },
    "satisfaction_conditions": [
      "New UUID column is successfully added to existing table(s)",
      "Existing rows receive valid UUID values",
      "New rows automatically receive UUID values",
      "Solution works with MySQL 5.5"
    ],
    "created_at": "2014-07-16T13:10:06Z"
  },
  {
    "id": "https://github.com/sequelize/sequelize/issues/2045",
    "source": {
      "issue_number": 2045
    },
    "initial_question": {
      "title": "How can I validate a unique field when I edit an object with sequelize?",
      "body": "Hi, I use the following code to validate the uniqueness of the user's pseudo when I create the user object. The problem is that when I edit a user object I need to retrieve the current user.id. How can I do that?\n\n```\npseudo:   {\n  type: DataTypes.STRING(150), \n  allowNull: false, \n  validate: {\n    len: {args: [3, 150], msg: \"Pseudo shall contains at least 3 characters\"},\n    isUnique: function(value, next) {\n      User.find({\n          where: {pseudo: value},\n          attributes: ['id']\n      }).done(function(error, user) {\n        if (error)\n            return next(error);\n\n        if (user)\n            return next('Pseudo already in use!');\n\n        next();\n      });\n    }\n  }\n```\n"
    },
    "satisfaction_conditions": [
      "Uniqueness validation must exclude the current record being edited",
      "Access to the current record's identifier must be available during validation",
      "Validation must return appropriate success/error responses",
      "Validation must handle both create and update scenarios"
    ],
    "created_at": "2014-07-15T18:39:00Z"
  },
  {
    "id": "https://github.com/sequelize/sequelize/issues/1941",
    "source": {
      "issue_number": 1941
    },
    "initial_question": {
      "title": "many to many association for single model",
      "body": "Is there a way to make a model have a `hasMany` association with itself as both the source and target?\n\n```\nA.hasMany(A)\n```\n\nPer the documentation (and testing) creates a one to many relationship\n\n```\n       A\n     /   \\\n    A     A\n  / | \\\n A  A  A\n\n```\n\nWhere what I want is many to many\n\n```\n A  A  A\n  \\ | /\n    A\n  / | \\\n A  A  A\n```\n\nI am functionally doing this right now by using a second model to define a join table as a go between, which has one-to-many and one-to-one associations with the primary model. And I've added `addA`, `removeA`, and `getAs` as instance methods on `A` to hide the join table code.\n"
    },
    "satisfaction_conditions": [
      "Model must be able to associate with multiple instances of itself simultaneously",
      "Relationships must be bidirectional",
      "Association operations must be accessible through the model interface",
      "Relationship structure must support a many-to-many pattern"
    ],
    "created_at": "2014-06-21T00:52:26Z"
  },
  {
    "id": "https://github.com/sequelize/sequelize/issues/1813",
    "source": {
      "issue_number": 1813
    },
    "initial_question": {
      "title": "Uncaught exception with count and pagination",
      "body": "I'm trying to call count on a model with a pagination option. I'm on Sequelize 1.7.5.\n\nThe call looks something like this:\n\n```\nGroup.count({\n  where: options.where,\n  limit: parseInt(query['pagination.limit'], 10), // Set to 10\n  offset: parseInt(query['pagination.offset'], 10) // Set to 10\n}).success(function(total){\n\n  // ...\n\n});\n```\n\nThis is the object I'm passing as the first agument:\n\n```\n{ where: {}, limit: 10, offset: 10 }\n```\n\nAnd this is the SQL that is being generated:\n\n```\nSELECT COUNT(*) as `count` FROM `groups` WHERE 1=1 LIMIT 10, 18440000000000000000;\n```\n\nHence, it fails with an uncaught exception: `Cannot read property 'count' of null`\n"
    },
    "satisfaction_conditions": [
      "Returns accurate total count of records regardless of pagination parameters",
      "Provides both total count and paginated results when needed",
      "Generates valid SQL that correctly applies WHERE conditions"
    ],
    "created_at": "2014-05-26T13:06:34Z"
  },
  {
    "id": "https://github.com/sequelize/sequelize/issues/1719",
    "source": {
      "issue_number": 1719
    },
    "initial_question": {
      "title": "Include generates subqueries",
      "body": "Hi, \n\nI'm trying to use .findAll with a condition over an associated model:\nmodel.Person.findAll({\n                include: [{ model: model.Alias, as: 'aliases', attributes: ['name']}],\n                where: model.sequelize.and(\n                    model.sequelize.or.apply(this, search),\n                    {published: true}\n                ),\n                limit: limit\n            }\n\nwith \"search\" being among other person restrictions:  [\"'aliases.name' like ?\", term+\"%\"]\n\nHowever this generates:\n\nSELECT `people`._, `aliases`.`name` AS `aliases.name`, `aliases`.`id` AS `aliases.id` FROM (SELECT `people`._ FROM `people` WHERE ((firstname like 'eva g%' OR surname like 'eva g%' OR concat(firstname,' ',surname) like 'eva g%' OR 'aliases.name' like 'eva g%') AND `people`.`published`=true) LIMIT 4) AS `people` LEFT OUTER JOIN `alias` AS `aliases` ON `people`.`id` = `aliases`.`person_id`;\n\nIs it somehow possible to get it so, that there would be no subquery and the join is on the outer clause so the alias condition is applied correctly?\n\nI'm not sure if I'm abusing \"include\" here, since I'm not really interested in the aliases data, just needed to find the correct people.\n\nCheers,\nAndreas\n\nP.S: I'm using 2.0.0-dev9\n"
    },
    "satisfaction_conditions": [
      "Query must correctly handle joins without unwanted subqueries",
      "WHERE conditions must be applied at the correct query level",
      "Query must maintain expected data relationships"
    ],
    "created_at": "2014-05-07T12:07:24Z"
  },
  {
    "id": "https://github.com/sequelize/sequelize/issues/1693",
    "source": {
      "issue_number": 1693
    },
    "initial_question": {
      "title": "Accessing Defined Models from a Sequelize Instance",
      "body": "I've seen this syntax to access a defined model from the Sequelize instance:\n\n```\nvar sequelize = new Sequelize('database', 'username'[, 'password']);\n\nvar Project = sequelize.define('Project', {\n  title: Sequelize.STRING,\n  description: Sequelize.TEXT\n});\n\nsequelize.Project.build({});\n```\n\nHowever, when I tried it myself on 1.7.0:\n\n```\nconsole.log(sequelize.Project);\n```\n\nReturned `undefined`\n\nIs there another way or a correct way to accomplish this?\n"
    },
    "satisfaction_conditions": [
      "Models must be accessible from the Sequelize instance",
      "Model references must persist after definition",
      "Model access method must be compatible with Sequelize's architecture"
    ],
    "created_at": "2014-04-29T00:49:52Z"
  },
  {
    "id": "https://github.com/sequelize/sequelize/issues/1692",
    "source": {
      "issue_number": 1692
    },
    "initial_question": {
      "title": "updates and associations",
      "body": "Hi, I'm developing a Backbone app, and for certain things it's really convenient to fetch my collections with their associations.  If I try to save these models back to sequelize will the associations be ignored, or am I going to have to filter them out beforehand to avoid errors?\n"
    },
    "satisfaction_conditions": [
      "Model updates must only affect explicitly defined model attributes",
      "Associated data must be excluded from save operations",
      "Solution must be compatible with the specific Sequelize version in use",
      "Update operation must allow selective field updates"
    ],
    "created_at": "2014-04-28T09:43:45Z"
  },
  {
    "id": "https://github.com/sequelize/sequelize/issues/1682",
    "source": {
      "issue_number": 1682
    },
    "initial_question": {
      "title": "Problem renaming associations output",
      "body": "So I'm having an issue with the `as` sub-parameter of the `include` parameter to `.findAll`.  I'm using 2.0.0-dev11 + MySQL.\n\nThe error I get back is:\n\n```\nPossibly unhandled Error: Task (Experiment) is not associated to User!\n```\n\nThe error occurs in:\n\n```\nnode_modules/sequelize/lib/dao-factory.js:1812:13\n```\n\nSo in the code below, if I change `{ include: [{model:Task,as:'Experiment'}]}` to `{ include: Task }` then it works just fine.\n\nBut I really want to get the association back in a list named `Experiments` instead of named `Tasks`.\n\n```\nvar User = sequelize.define('User', { name: Sequelize.STRING });\nvar Task = sequelize.define('Task', { name: Sequelize.STRING });\n\nTask.belongsTo(User);\nUser.hasMany(Task);\n\nsequelize.sync({force: true})\n  .then(function() {\n    return User.create({name:'Rick'});\n  })\n  .then(function(u) {\n    var task = Task.build({name:'Science'});\n    return u.addTask(task);\n  })\n  .then(function() {\n    return User.findAll({ include: [{model:Task,as:'Experiment'}]});\n  })\n  .then(function(users) {\n    console.log(JSON.stringify(users, null, 2));\n  })\n  .then(function() {\n    console.log('done');\n  });\n```\n"
    },
    "satisfaction_conditions": [
      "Database relationships must remain functionally intact"
    ],
    "created_at": "2014-04-25T03:40:13Z"
  },
  {
    "id": "https://github.com/sequelize/sequelize/issues/1675",
    "source": {
      "issue_number": 1675
    },
    "initial_question": {
      "title": "Validation Error vs actual Error",
      "body": "This is more of a question than an issue, but when creating/updating models, I've been struggling with finding the best way to differentiate validation errors from 'actual' errors.\n\nFor example;\n\n```\nmodel.save()\n    .success( function () {})\n    .error( function (err) { /*err could be a validation error, or a database error */ })\n```\n\nAm I missing something here?\n"
    },
    "satisfaction_conditions": [
      "Error types must be distinguishable",
      "Error handling must work within promise/callback flow",
      "Error type detection must be reliable"
    ],
    "created_at": "2014-04-23T03:56:53Z"
  },
  {
    "id": "https://github.com/sequelize/sequelize/issues/1668",
    "source": {
      "issue_number": 1668
    },
    "initial_question": {
      "title": "Select Rows that have children",
      "body": "hi is there a way to use Having in the queries? to do something like this\n\n```\nSELECT Count(Table2.Id), Table1.* \nFROM Table1 \nLEFT JOIN Table2\nON Table1.id = Table2.Table1Id\nHAVING Count(Table2.Id) > 0\n```\n\nI only want to get Categories that have asociated children records.\n"
    },
    "satisfaction_conditions": [
      "Query returns only parent records that have at least one child record",
      "Child record count information is accessible if needed",
      "Parent record attributes are retrievable in the result"
    ],
    "created_at": "2014-04-21T22:01:13Z"
  },
  {
    "id": "https://github.com/sequelize/sequelize/issues/1545",
    "source": {
      "issue_number": 1545
    },
    "initial_question": {
      "title": "How can I \"inject\" one model into another?",
      "body": "Alright, this may seem kind of crazy but please try to follow along.  I'm hoping there's a simple solution.\n\nI've found that when providing a complete \"document\" to my angular client of a user account...\n\n```\nUser.find(\n    {\n        where:whereObj,\n        order: '\"People\".\"gender\" DESC',\n        include:[\n            {\n                model: Person,\n                as: \"People\",\n                include:[\n                    {\n                        model: PersonalTrait,\n                        as: \"Traits\"\n                    }\n                ]\n            },\n            {\n                model: Media,\n                as: \"PrimaryMedia\"\n            },\n            {\n                model: MediaFolder,\n                as: \"MediaFolders\",\n                include:[\n                    {\n                        model: Media,\n                        as: \"Media\"\n                    }\n                ]\n            }\n        ]\n    }\n).success(function(user){\n    if(user === null){\n        res.send(404);\n    }else{\n        res.json(200, user);\n   }\n}).error(function(err){\n    res.send(400);\n});\n```\n\nI see the database query resulting in exponential rows, depending on the number of rows for Traits, MediaFolders and Media.  For example...  1 User row has 2 People rows and 2 MediaFolder rows produces 4 rows in Sequelize's query to produce the object.  Adding 2 MediaRows linked to a MediaFolder row produces 6 rows. Adding 2 Traits to the User now produces 9 rows.  20 traits = 63 rows.  20 traits & 12 media = 252 rows.\n\nI'm fairly certain I understand why this is and that I'm using Sequelize properly.  So I decided to try taking a different approach by first getting the basic User object with everything but the Media Folders, then getting those media folders and \"injecting\" them into the User object result.\n\n```\nUser.find(\n    {\n        where:whereObj,\n        order: '\"People\".\"gender\" DESC',\n        include:[\n            {\n                model: Person,\n                as: \"People\",\n                include:[\n                    {\n                        model: PersonalTrait,\n                        as: \"Traits\"\n                    }\n                ]\n            },\n            {\n                model: Media,\n                as: \"PrimaryMedia\"\n            }\n        ]\n    }\n).success(function(user){\n    if(user === null){\n        res.send(404);\n    }else{\n\n        MediaFolder.findAll(\n            {\n                where: {\n                    \"UserId\": user.id\n                },\n                include:[\n                    {\n                        model: Media,\n                        as: \"Media\"\n                    }\n                ]\n            }\n        ).success(function(mediaFolders){\n            user.mediaFolders = mediaFolders; // <-- pseudocode\n            res.json(200, user);\n        }).error(function(err){\n            res.send(400);\n        });\n   }\n}).error(function(err){\n    res.send(400);\n});\n```\n\nThe only problem is that I'm not sure how I can do this because that \"pseudocode\" line above didn't work.  :)\n"
    },
    "satisfaction_conditions": [
      "The combined data structure must include all related model data without data duplication",
      "The final response must be properly serialized to JSON with all intended properties",
      "The API response structure must match the original nested data format",
      "Proper error handling must be maintained for all database operations"
    ],
    "created_at": "2014-03-23T19:59:06Z"
  },
  {
    "id": "https://github.com/sequelize/sequelize/issues/1537",
    "source": {
      "issue_number": 1537
    },
    "initial_question": {
      "title": "Self reference (bi-directional)",
      "body": "A Person can have many children: Person.hasMany(Person {as: 'children})\nA Person has one father: Person.hasOne(Person {as: 'father'})\n\nSeems straightforward enough. \nNow I want to find records for a Person, and their father:\nPerson.find({include: [{model: Person, as: 'father}])\n\nBad things happen: \"Error: Person (Father) is not associated to Person!\" which was unexpected given that there are actually two relationships in place.\n\nBut then, it also occurs to me that I don't know how to tell Sequelize which of the relations to follow in a given include? If I wanted to return records for both father and children how would I do that?\n\nPerhaps I'm just thinking about it all wrong?\n"
    },
    "satisfaction_conditions": [
      "Bidirectional self-referential associations must be correctly defined and distinguishable",
      "Each relationship must have a unique identifier/alias"
    ],
    "created_at": "2014-03-22T11:07:57Z"
  },
  {
    "id": "https://github.com/sequelize/sequelize/issues/1528",
    "source": {
      "issue_number": 1528
    },
    "initial_question": {
      "title": "potential bug in quoteIdentifiers function in query generator of mysql / mariadb",
      "body": "hi,\n\ni have an problem with multi associated properties in where and order conditions with nested eager loading.\n\ni get wrong sql with the following find / findAll ...\n\n``` javascript\nvar Article = sequelize.define('Article', { name: Sequelize.STRING })\n  , Customer = sequelize.define('Customer', { name: Sequelize.STRING })\n  , PostCode = sequelize.define('PostCode', { postcode: Sequelize.INTEGER, city: Sequelize.STRING })\n\nArticle.belongsTo(Customer)\nCustomer.belongsTo(PostCode)\n\nsequelize.sync().done(function() {\n  Article.findAll({\n    attributes: ['name'],\n    include: [{\n      model: Customer,\n      attributes: ['name'],\n      include: [{\n        model: PostCode,\n        attributes: ['postcode', 'city'],\n      }]\n    }],\n    order: ['Customer.PostCode.postcode', 'ASC']\n  }).success(function(articles) {\n    console.log('articles', articles)\n  })\n})\n```\n\n``` sql\nSELECT\n  `Article`.`name`,\n  `Customer`.`name` AS `Customer.name`,\n  `Customer`.`id` AS `Customer.id`,\n  `Customer.PostCode`.`postcode` AS `Customer.PostCode.postcode`,\n  `Customer.PostCode`.`city` AS `Customer.PostCode.city`,\n  `Customer.PostCode`.`id` AS `Customer.PostCode.id`\nFROM `Article`\n  LEFT OUTER JOIN `Customer` AS `Customer`\n    ON `Customer`.`id` = `Article`.`customer_id`\n      LEFT OUTER JOIN `PostCode` AS `Customer.PostCode`\n        ON `Customer.PostCode`.`id` = `Customer`.`post_code_id`\nORDER BY `Customer`.`PostCode`.`postcode`, `ASC`;\n```\n\ni think the problem is the quoteIdentifiers from lib/dialects/mysql/query-generator.js. it escapes the string \n\n```\nCustomer.PostCode.postcode\n```\n\n to \n\n```\n`Customer`.`PostCode`.`postcode`\n```\n\nTo make the query working it should by \n\n```\n`Customer.PostCode`.`postcode`\n```\n\n cause of the generated table alias.\n\nthe problem could by solved by the following code ...\n\n``` javascript\n    quoteIdentifiers: function(identifiers, force) {\n      var seperator = identifiers.lastIndexOf('.')\n      if (seperator === -1) {\n        return this.quoteIdentifier(identifiers, force)\n      } else {\n        return this.quoteIdentifier(identifiers.substr(0, seperator), force) + '.' + this.quoteIdentifier(identifiers.substr(seperator + 1), force)\n      }   \n    },\n```\n\nbut i am not sure we're using that the right way. it would be nice if somebody can look over it.\n\nthx, mithrandir\n"
    },
    "satisfaction_conditions": [
      "Generated SQL query must use correct table aliases in ORDER BY clause",
      "Nested eager loading must work with ORDER BY clauses",
      "SQL identifier quoting must maintain referential integrity"
    ],
    "created_at": "2014-03-20T15:02:01Z"
  },
  {
    "id": "https://github.com/sequelize/sequelize/issues/1524",
    "source": {
      "issue_number": 1524
    },
    "initial_question": {
      "title": "Model.hasMany(OtherModel)  doesn't use name of foreign key specified in OtherModel",
      "body": "I have the following two models:\nUser and CropSession were User.hasMany(models.CropSession). In CropSession I reference the table Users with referenceKey: id as userId.\n\nWhen I do\n\n``` js\nUser.find({where: {id: 1}}).then(function(user) {\n  return user.getCropSessions();\n});\n```\n\nThe returned CropSession has property UserId instead of userId. Is there a way to get the stipulated name? In this case being userId.\n\nI leave you next with the model definitions for reference.\n\nUser model\n\n``` js\n'use strict';\n\nvar bcrypt = require('bcrypt');\nvar Promise = require('bluebird');\nvar hash = Promise.promisify(bcrypt.hash, bcrypt);\nvar comparePassword = Promise.promisify(bcrypt.compare, bcrypt);\n\nmodule.exports = function(sequelize, DataTypes) {\n  var User = sequelize.define('User', {\n    id: {\n      type: DataTypes.INTEGER,\n      autoIncrement: true,\n      primaryKey: true\n    },\n    email: {\n      type: DataTypes.STRING,\n      isEmail: true,\n      unique: true,\n      validate: {\n        isEmail: true,\n        notEmpty: true\n      }\n    },\n    userType: {\n      type: DataTypes.ENUM('farmer', 'researcher'),\n      allowNull: false,\n      validate: {\n        isIn: [['farmer', 'researcher']],\n      }\n    },\n    password: {\n      type: DataTypes.STRING,\n      allowNull: false,\n      validate: {\n        notEmpty: true\n      }\n    },\n    name: {\n      type: DataTypes.STRING,\n      allowNull: false,\n      validate: {\n        isAlpha: true\n      }\n    },\n    lastName: {\n      type: DataTypes.STRING,\n      allowNull: false,\n      validate: {\n        isAlpha: true\n      }\n    },\n    organization: {\n      type: DataTypes.STRING,\n      allowNull: false,\n      validate: {\n        isAlphanumeric: true\n      }\n    },\n    farmLatitude: {\n      type: DataTypes.FLOAT,\n      allowNull: true,\n      validate: {\n        isFloat: true\n      }\n    },\n    farmLongitude: {\n      type: DataTypes.FLOAT,\n      allowNull: true,\n      validate: {\n        isFloat: true\n      }\n    }\n  }, {\n    validate: {\n      farmerCoordinates: function() {\n        var hasCoords = this.farmLatitude && !isNaN(this.farmLatitude) &&\n            this.farmLongitude && !isNaN(this.farmLongitude);\n        if(this.userType === 'farmer' && !hasCoords) {\n          throw new Error('Farmer must have the farm\\'s location defined');\n        }\n      }\n    },\n    classMethods: {\n      associate: function(models) {\n        User.hasMany(models.CropSession);\n      },\n      hashPassword: function(password) {\n        return hash(password, 8);\n      }\n    },\n    instanceMethods: {\n      verifyPassword: function(password) {\n        return comparePassword(password, this.password);\n      },\n      getJSON: function() {\n        var values = this.values;\n        delete values.password;\n        return values;\n      }\n    }\n  });\n\n  return User;\n};\n\n```\n\nCropSession model\n\n``` js\n'use strict';\n\nmodule.exports = function(sequelize, DataTypes) {\n  var CropSession = sequelize.define('CropSession', {\n    id: {\n      type: DataTypes.INTEGER,\n      autoIncrement: true,\n      primaryKey: true\n    },\n    userId: {\n      type: DataTypes.INTEGER,\n      references: 'Users',\n      referencesKey: 'id',\n      unique: true\n    },\n    cropName: {\n      type: DataTypes.STRING,\n      unique: true\n    },\n    cropTypeId: {\n      type: DataTypes.INTEGER,\n      references: 'CropTypes',\n      referencesKey: 'id'\n    },\n    startDate: {\n      type: DataTypes.DATE,\n      allowNull: false\n    },\n    initialStageLength: {\n      type: DataTypes.INTEGER,\n      allowNull: false,\n      validate: {\n        isNumeric: true\n      }\n    },\n    developmentStageLength: {\n      type: DataTypes.INTEGER,\n      allowNull: false,\n      validate: {\n        isNumeric: true\n      }\n    },\n    midStageLength: {\n      type: DataTypes.INTEGER,\n      allowNull: false,\n      validate: {\n        isNumeric: true\n      }\n    },\n    lateStageLength: {\n      type: DataTypes.INTEGER,\n      allowNull: false,\n      validate: {\n        isNumeric: true\n      }\n    },\n    kcInitial: {\n      type: DataTypes.FLOAT,\n      allowNull: false,\n      validate: {\n        isNumeric: true\n      }\n    },\n    kcMid: {\n      type: DataTypes.FLOAT,\n      allowNull: false,\n      validate: {\n        isNumeric: true\n      }\n    },\n    kcEnd: {\n      type: DataTypes.FLOAT,\n      allowNull: false,\n      validate: {\n        isNumeric: true\n      }\n    }\n  }, {\n    classMethods: {\n      associate: function(models) {\n        CropSession.belongsTo(models.User);\n        CropSession.belongsTo(models.CropType);\n\n        CropSession.hasMany(models.IrrigationEvent);\n      }\n    }\n  });\n\n  return CropSession;\n};\n\n```\n"
    },
    "satisfaction_conditions": [
      "Association definitions must be properly synchronized on both the parent and child models",
      "Model relationships must maintain referential integrity"
    ],
    "created_at": "2014-03-20T00:54:50Z"
  },
  {
    "id": "https://github.com/sequelize/sequelize/issues/1520",
    "source": {
      "issue_number": 1520
    },
    "initial_question": {
      "title": "Possible to get raw values for results of findAll",
      "body": "We can currently access the -values attribute for single instances, but this doesn't seem possible for multiple instances. Is this is a bug or designed as such? \n"
    },
    "satisfaction_conditions": [
      "Compatible with array processing methods"
    ],
    "created_at": "2014-03-19T03:52:36Z"
  },
  {
    "id": "https://github.com/sequelize/sequelize/issues/1413",
    "source": {
      "issue_number": 1413
    },
    "initial_question": {
      "title": "`include` breaks when using `include: { daoFactory: DaoFactory1, as: 'factory' }` form",
      "body": "Not sure if it has to do with the association in my db being backwards.\n\nI have \n\n```\nAddress.hasOne(Firm);\nCompany.belongsTo(Address);\n```\n\nThis works as expected:  \n\n```\nCompany.findAll({include: [Address]});\n```\n\nBut this breaks:  \n\n```\nCompany.findAll({include: [{daoFactory: Address, as: 'address'}]});  \n```\n\nWith an error log of \n\n```\nError: Address (address) is not associated to Firm!\nat module.exports.validateIncludedElement (D:\\Work\\LittleRoom\\Sequelize\\node_modules\\sequelize\\lib\\dao-factory.js:1433:13)\nat null. (D:\\Work\\LittleRoom\\Sequelize\\node_modules\\sequelize\\lib\\dao-factory.js:1337:41)\nat Array.map (native)\nat module.exports.validateIncludedElements (D:\\Work\\LittleRoom\\Sequelize\\node_modules\\sequelize\\lib\\dao-factory.js:1336:39)\nat module.exports.DAOFactory.findAll (D:\\Work\\LittleRoom\\Sequelize\\node_modules\\sequelize\\lib\\dao-factory.js:451:34)\nat port (D:\\Work\\LittleRoom\\Sequelize\\index.js:46:17)\nat callbacks (D:\\Work\\LittleRoom\\Sequelize\\node_modules\\express\\lib\\router\\index.js:164:37)\nat param (D:\\Work\\LittleRoom\\Sequelize\\node_modules\\express\\lib\\router\\index.js:138:11)\nat param (D:\\Work\\LittleRoom\\Sequelize\\node_modules\\express\\lib\\router\\index.js:135:11)\nat pass (D:\\Work\\LittleRoom\\Sequelize\\node_modules\\express\\lib\\router\\index.js:145:5)\n```\n"
    },
    "satisfaction_conditions": [
      "Model associations must be properly recognized by the ORM system",
      "Association definitions must maintain bidirectional relationship integrity"
    ],
    "created_at": "2014-02-20T15:57:34Z"
  },
  {
    "id": "https://github.com/sequelize/sequelize/issues/1394",
    "source": {
      "issue_number": 1394
    },
    "initial_question": {
      "title": "no method 'set%modelname%' for multiassociations models",
      "body": "I have models with these associations:\n\n```\ndb.Term\n    .hasMany(db.Taxonomy, {foreignKey: 'term_id'});\n\ndb.Taxonomy\n    .belongsTo(db.Term)\n    .hasMany(db.Event, {through: 'event_taxonomy'})\n\ndb.Event\n    .hasMany(db.Taxonomy, {through: 'event_taxonomy'})\n```\n\nin my controller i try to add new event, with relationship for taxonomy\n\n```\ndb.Taxonomy.find(1).success(function(taxonomy) {\n    db.Event.create({name: 'test'}).success(function(event) {\n\n        // it works\n        taxonomy.addEvent(event).success(function() {})\n\n        // it crush with error \"Object [object Object] has no method 'addTaxonomy'\"\"\n        event.addTaxonomy(taxonomy).success(function() {})\n\n    })    \n})\n```\n"
    },
    "satisfaction_conditions": [
      "Association methods must be accessible on model instances",
      "Method names must match the model's internal naming conventions",
      "Many-to-many relationship must be properly established through the junction table",
      "Generated method names must account for custom table names"
    ],
    "created_at": "2014-02-15T03:24:23Z"
  },
  {
    "id": "https://github.com/sequelize/sequelize/issues/1392",
    "source": {
      "issue_number": 1392
    },
    "initial_question": {
      "title": "how to filter findAll include modle fields",
      "body": "Example\n\n``` js\n    DB.Article.findAll({\n        include : [{model : DB.User}],\n        order : 'article.created_at DESC',\n        limit : 50\n    }).done(function (err, result){\n\n        })\n```\n\nit show sql\n\n``` sql\nExecuting (default): SELECT `article`.*, `user`.`id` AS `user.id`, `user`.`name` AS `user.name`, `user`.`password` AS `user.password`, `user`.`email` AS `user.email`, `user`.`bio` AS `user.bio`, `user`.`posts_count` AS `user.posts_count`, `user`.`digged_count` AS `user.digged_count`, `user`.`status` AS `user.status`, `user`.`create_passport_id` AS `user.create_passport_id`, `user`.`created_at` AS `user.created_at`, `user`.`modified_at` AS `user.modified_at` FROM `article` LEFT OUTER JOIN `user` AS `user` ON `user`.`id` = `article`.`user_id` ORDER BY article.created_at DESC LIMIT 50;\n```\n\nHave an way change include model select fields?\n"
    },
    "satisfaction_conditions": [
      "Query returns only specified fields from included model",
      "Maintains existing query functionality for primary model",
      "Produces valid SQL with proper JOIN syntax"
    ],
    "created_at": "2014-02-14T18:43:42Z"
  },
  {
    "id": "https://github.com/sequelize/sequelize/issues/1366",
    "source": {
      "issue_number": 1366
    },
    "initial_question": {
      "title": "Oddities with one to one relationships?",
      "body": "I've got a fairly simple schema, a Users table and a UserRoles table. One User has one Role, linked from the User's roleId to the UserRole's id.\n\nFor some reason I can't specify the relationship like this:\n\n``` javascript\nm.User.hasOne(m.UserRole, {as: 'role', foreignKey: 'roleId'});\n```\n\nBecause I get the following error:\n\n``` javascript\n{ [Error: ER_BAD_FIELD_ERROR: Unknown column 'role.roleId' in 'field list']\n  code: 'ER_BAD_FIELD_ERROR',\n  errno: 1054,\n  sqlState: '42S22',\n  index: 0,\n  sql: 'SELECT `Users`.*, `role`.`id` AS `role.id`, `role`.`name` AS `role.name`, `role`.`roleId` AS `role.roleId` FROM `Users` LEFT OUTER JOIN `UserRoles` AS `role` ON `Users`.`id` = `role`.`roleId` WHERE `Users`.`id`=1;' }\n```\n\nHowever if I specify the relationship with a belongsTo like so:\n\n``` javascript\nm.User.belongsTo(m.UserRole, {as: 'role', foreignKey: 'roleId'});\n```\n\nIt works fine.\n\nThis seems a bit confusing to me, I'd expect hasOne to represent a situation where you're mapping from a column on the source table, to a target table, instead of what is happening which is the inverse of that, the target table is mapping onto the source table.\n\nCan anyone clear this up for me?\n"
    },
    "satisfaction_conditions": [
      "Database relationship mapping correctly reflects the foreign key location",
      "SQL queries generated by the ORM execute without field errors",
      "Association type matches the relationship's ownership direction"
    ],
    "created_at": "2014-02-09T14:11:14Z"
  },
  {
    "id": "https://github.com/sequelize/sequelize/issues/1336",
    "source": {
      "issue_number": 1336
    },
    "initial_question": {
      "title": "Guidance on error handling",
      "body": "I have a one-to-many relationship: 1 order has many items. I am trying to write a function that creates an item for a given orderId (see below). This function has 3 sequential steps: 1) find the order, 2) create the item, 3) connect the item to the order. If any of the steps fails, I must return an error. That's why my function takes a `successCallback` and an `errorCallback`.\n\nIs there a more elegant way to write this function? Ideally, I would like to avoid the 3 nested levels. Also, if possible, I would like to avoid sending the two callback functions as parameters.\n\n```\nexports.createItem = function(orderId, itemInput, successCallback, errorCallback) {\n\n    domain.Order.find({where: {id: orderId}})\n        .success(function(order) {\n            domain.Item.create(itemInput)\n                .success(function(item) {\n                    order.addItem(item)\n                        .success(function() {\n                            successCallback(item);\n                        })\n                        .error(function(err) {\n                            errorCallback(err);\n                        })\n                })\n                .error(function(err) {\n                    errorCallback(err);\n                })\n        })\n        .error(function(err) {\n            errorCallback(err);\n        })\n}\n```\n"
    },
    "satisfaction_conditions": [
      "Sequential execution of all three operations must be maintained",
      "Error handling must be provided for each operation",
      "Code nesting depth must be reduced",
      "Callback parameters must be eliminated"
    ],
    "created_at": "2014-02-03T05:59:51Z"
  },
  {
    "id": "https://github.com/sequelize/sequelize/issues/1102",
    "source": {
      "issue_number": 1102
    },
    "initial_question": {
      "title": "many to one question?",
      "body": "Is this the same?\n\nProject.hasMany(User)\nUser.belongsTo(Project)\n\nI can establish someone or I have to establish all?\n"
    },
    "satisfaction_conditions": [
      "Bidirectional relationship between User and Project entities must be properly established",
      "Individual user-to-project relationship must be queryable",
      "Multiple users per project must be queryable"
    ],
    "created_at": "2013-12-04T12:47:34Z"
  },
  {
    "id": "https://github.com/sequelize/sequelize/issues/1075",
    "source": {
      "issue_number": 1075
    },
    "initial_question": {
      "title": "Delete associated records",
      "body": "Hi,\n\nI have this setup:\n\n``` js\nvar Restriction = sequelize.define('restriction', {\n    id: Sequelize.INTEGER,\n    device: Sequelize.INTEGER,\n    user: Sequelize.INTEGER\n});\n\nvar User = sequelize.define('user', {\n    id: Sequelize.INTEGER,\n    name: Sequelize.STRING\n});\n\nUser.hasMany(Restriction, {as: 'Restrictions', foreignKey: 'user', primaryKey: 'id'});\n```\n\nThis means that each User has many Restrictions. When I fetch a User, I call user.getRestrictions() and it return the restrictions associated to the user. Fine.\nBut when I call user.removeRestriction() I was expecting that restriction to be deleted from the database, but instead the foreign key was set to NULL.\n\nIs there a way to actually remove that restriction instead of setting the FK to NULL?\nThanks!\n"
    },
    "satisfaction_conditions": [
      "The restriction record must be completely removed from the database",
      "The operation must maintain data model integrity",
      "The deletion operation must be explicitly controlled",
      "The operation must work within the existing Sequelize association setup"
    ],
    "created_at": "2013-11-25T10:50:27Z"
  },
  {
    "id": "https://github.com/sequelize/sequelize/issues/990",
    "source": {
      "issue_number": 990
    },
    "initial_question": {
      "title": "Consuming a DB created for Rails app",
      "body": "I have decided to move some functionality of an existing Rails API into Node.js. I picked up Sequelize as an ORM mainly because it seemed like it is the most feature rich out of the many others.\n\nSo I started mapping my models from Rails in Sequelize (since I didn`t need all the columns I only mapped the necessary ones) and I ended up with a 1-n relationship that is done using :through in Rails. So I created the following ralationship:\n\n```\nHole.hasMany(TrackingGroup, {foreignKey: 'hole_id', joinTableName:'holes_tracking_groups', underscored: true, useJunctionTable: true}); \n\nTrackingGroup.belongsTo(Hole, {foreignKey: 'tracking_group_id', joinTableName: 'holes_tracking_groups'});\n```\n\nThe idea is that when I get all the tracking groups for a hole I will have a query in the holes_tracking_groups where the hole_id = \"something\" but instead I was having a query in the tracking_group table (the one that has all the tracking groups). Or in other words the specified joinTableName was not considered at all.\n"
    },
    "satisfaction_conditions": [
      "The ORM correctly queries the join table for the relationship between Holes and TrackingGroups",
      "The relationship mapping matches the existing Rails database structure",
      "The many-to-many relationship between Holes and TrackingGroups is properly established"
    ],
    "created_at": "2013-10-14T06:39:22Z"
  },
  {
    "id": "https://github.com/sequelize/sequelize/issues/691",
    "source": {
      "issue_number": 691
    },
    "initial_question": {
      "title": "Unicode Datatype",
      "body": "Hi, If I define a column with Sequelize.STRING, can it store unicode character? If not, how would I go about doing it? Thanks.\n"
    },
    "satisfaction_conditions": [
      "Character encoding configuration must be properly specified",
      "Database collation must be correctly set"
    ],
    "created_at": "2013-06-12T07:18:43Z"
  },
  {
    "id": "https://github.com/sequelize/sequelize/issues/638",
    "source": {
      "issue_number": 638
    },
    "initial_question": {
      "title": "Postgresql find() never reached .error(function(error){})",
      "body": "I have something strange happening. I issue this code:\n\n```\nmodels.User.find({where: {userid: req.params.uid, token: req.params.token}}).success(function(user) {\n            console.log(user);\n            console.log(user.token_sent);\n            res.send('found it!');\n        }).failure(function(error) {\n            res.send(500, error);\n        });\n```\n\nWhen the User is not in the database, I recieve an error instead of the error being passed to the error callback. Instead, console.log(user) returns null. And console.log(user.token_sent) breaks.\n\n```\nExecuting: SELECT * FROM \"Users\" WHERE \"userid\"='2' AND \"token\"='ddd580a83805f66b700c21dd6a2b54d8658a58b4978e9a18' LIMIT 1;\nnull\n\n/home/user/nodetest/admin/node_modules/pg/lib/client.js:160\n      throw error;\n            ^\nTypeError: Cannot read property 'token_sent' of null\n    at null.<anonymous> (/home/user/nodetest/admin/routes/index.js:65:29)\n    at EventEmitter.emit (events.js:95:17)\n    at null.<anonymous> (/home/user/nodetest/admin/node_modules/sequelize/lib/query-interface.js:343:17)\n    at EventEmitter.emit (events.js:117:20)\n    at module.exports.onSuccess (/home/user/nodetest/admin/node_modules/sequelize/lib/dialects/postgres/query.js:106:14)\n    at null.<anonymous> (/home/user/nodetest/admin/node_modules/sequelize/lib/dialects/postgres/query.js:47:17)\n    at EventEmitter.emit (events.js:95:17)\n    at Query.handleReadyForQuery (/home/user/nodetest/admin/node_modules/pg/lib/query.js:101:8)\n    at null.<anonymous> (/home/user/nodetest/admin/node_modules/pg/lib/client.js:151:26)\n    at EventEmitter.emit (events.js:117:20)\n```\n\nAm I doing something wrong?\n"
    },
    "satisfaction_conditions": [
      "Code must distinguish between query execution failure and empty results"
    ],
    "created_at": "2013-05-21T23:02:35Z"
  },
  {
    "id": "https://github.com/sequelize/sequelize/issues/519",
    "source": {
      "issue_number": 519
    },
    "initial_question": {
      "title": "Load from JSON object",
      "body": "Hello, I know any object from the model can be stringified. But there are any method to create an Sequelize object from a plain JSON that previously was a model object?\n\nThanks.\n"
    },
    "satisfaction_conditions": [
      "Successfully converts JSON/plain object into a Sequelize model instance",
      "Maintains correct record state"
    ],
    "created_at": "2013-04-06T19:44:31Z"
  },
  {
    "id": "https://github.com/sequelize/sequelize/issues/474",
    "source": {
      "issue_number": 474
    },
    "initial_question": {
      "title": "Do you have support DOUBLE/DOUBLE PRECISION ?",
      "body": ""
    },
    "satisfaction_conditions": [
      "Database field successfully accepts DOUBLE/DOUBLE PRECISION data type",
      "Model definition accepts custom data type specification",
      "Existing FLOAT functionality remains unaffected",
      "Data type definition integrates with Sequelize model system"
    ],
    "created_at": "2013-03-05T12:47:13Z"
  }
]