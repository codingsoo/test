[
  {
    "id": "https://github.com/alibaba/easyexcel/issues/3032",
    "source": {
      "issue_number": 3032
    },
    "initial_question": {
      "title": "\u591asheet\u6570\u636e\u8bfb\u53d6\u540e\u4e0a\u4f20\u5230OSS\uff0c\u8bfb\u53d6\u5230 ByteArrayOutputStream \u4e2d\u6570\u636e\u4e3a\u7a7a",
      "body": "//  \u6700\u65b0\u7248\u672c 3.2.1\r\n\r\n    @GetMapping(value = \"t\")\r\n    public void test(HttpServletResponse response) {\r\n        ExcelWriter excelWriter = null;\r\n        List<String> sheetLists = ListUtil.of(\"\u4e1a\u52a1\u91cf\u7edf\u8ba1\", \"\u65e5\u63d0\u62a5\u91cf\u8868\");\r\n        try {\r\n            ByteArrayOutputStream outputStream = new ByteArrayOutputStream();\r\n            excelWriter = EasyExcel.write(outputStream, UserModel.class).autoCloseStream(false).build();\r\n            for (int i = 0; i < sheetLists.size(); i++) {\r\n                WriteSheet writeSheet = EasyExcel.writerSheet(i, sheetLists.get(i))\r\n                        .head(UserModel.class)\r\n                        .build();\r\n                excelWriter.write(userSaveService.list(), writeSheet);\r\n            }\r\n            // \u6570\u636e\u4e3a\u7a7a\uff0c\u5199\u5165\u4e0d\u8fdb\u53bb\r\n            System.out.println(outputStream.toByteArray().length);\r\n        }\r\n        catch (Exception e) {\r\n            log.error(\"\u5f02\u5e38\uff1a\", e);\r\n        }\r\n        finally {\r\n            if (excelWriter != null) {\r\n                excelWriter.finish();\r\n            }\r\n        }\r\n    }"
    },
    "satisfaction_conditions": [
      "Resource cleanup must be properly handled",
      "Multiple worksheet data must be correctly written"
    ],
    "created_at": "2023-03-08T02:56:17Z"
  },
  {
    "id": "https://github.com/alibaba/easyexcel/issues/2980",
    "source": {
      "issue_number": 2980
    },
    "initial_question": {
      "title": "\u5173\u4e8eEasyExcel.write\u7684\u4f7f\u7528\uff0c\u4e00\u4e2a\u95ee\u9898\u3002",
      "body": "\u5b98\u65b9\u4f8b\u5b50\u4e2d\uff0c\r\n`EasyExcel.write(fileName, DemoData.class)\r\n        .sheet(\"\u6a21\u677f\")\r\n        .doWrite(() -> {\r\n            // \u5206\u9875\u67e5\u8be2\u6570\u636e\r\n            return data();\r\n        });`\r\nDemoData.class \u53ef\u4ee5\u7528\u52a8\u6001\u5b57\u8282\u7801\u6280\u672f\u52a8\u6001\u751f\u6210\u3002\r\n\u4f46\u662f data() \u51fd\u6570\u8be5\u600e\u4e48\u5199\u5462\uff1f\u7f16\u8bd1\u7684\u65f6\u5019\uff0c\u7f16\u8bd1\u5668\u9700\u8981\u627e\u5230DemoData\uff0c\u8fd8\u662f\u53ef\u4ee5\u52a8\u6001\u6dfb\u52a0\u53ca\u5982\u4f55\u6dfb\u52a0\uff1f\u611f\u89c9\u662f\u4e0d\u662f\u4e0d\u53ef\u884c\u554a\u3002\r\n"
    },
    "satisfaction_conditions": [
      "Support dynamic column configuration",
      "Data structure flexibility",
      "Runtime data generation capability",
      "Compatible with EasyExcel write operations",
      "Dynamic header support"
    ],
    "created_at": "2023-02-16T02:08:32Z"
  },
  {
    "id": "https://github.com/alibaba/easyexcel/issues/1156",
    "source": {
      "issue_number": 1156
    },
    "initial_question": {
      "title": "\u8bbe\u7f6e\u5355\u5143\u683c\u683c\u5f0f\u65e0\u6548",
      "body": "**\u5f02\u5e38\u4ee3\u7801**\r\n```java\r\n// \u7f13\u5b58cellStyle\r\n   public class SalaryExportCellWriteHandler implements CellWriteHandler {\r\n\r\n    /**\r\n     * \u5bfc\u51fa\u9700\u8981\u8bbe\u7f6e\u5355\u5143\u683c\u4e3a\u767e\u5206\u6570\u7684\u5b57\u6bb5\r\n     */\r\n    private static List<String> percentCellTypeList = Lists.newArrayList(\"lastYearAprilSalaryRatio\", \"lastYearSpecialSalaryRatio\", \"thisYearQ1SalaryRatio\", \"basicAdjustRatio\", \"flexibleAdjustRatio\", \"recommendedAnnualSalaryIncreasedRatio\");\r\n\r\n    private CellStyle cellStyle;\r\n\r\n    @Override\r\n    public void beforeCellCreate(WriteSheetHolder writeSheetHolder, WriteTableHolder writeTableHolder, Row row, Head head, Integer columnIndex, Integer relativeRowIndex, Boolean isHead) {\r\n    }\r\n\r\n    @Override\r\n    public void afterCellCreate(WriteSheetHolder writeSheetHolder, WriteTableHolder writeTableHolder, Cell cell, Head head, Integer relativeRowIndex, Boolean isHead) {\r\n    }\r\n\r\n    @Override\r\n    public void afterCellDispose(WriteSheetHolder writeSheetHolder, WriteTableHolder writeTableHolder, List<CellData> cellDataList, Cell cell, Head head, Integer relativeRowIndex, Boolean isHead) {\r\n        if (!isHead) {\r\n            if (Objects.isNull(cellStyle)) {\r\n                cellStyle = writeSheetHolder.getSheet().getWorkbook().createCellStyle();\r\n            }\r\n            // \u8bbe\u7f6e\u767e\u5206\u6bd4\u5355\u5143\u683c\u683c\u5f0f\r\n            if (percentCellTypeList.contains(head.getFieldName())) {\r\n                cellStyle.setDataFormat(HSSFDataFormat.getBuiltinFormat(\"0.00%\"));\r\n            } else {\r\n                cellStyle.setDataFormat(HSSFDataFormat.getBuiltinFormat(\"General\"));\r\n            }\r\n            cell.setCellStyle(cellStyle);\r\n        }\r\n    }\r\n}\r\n\r\n// \u4e0d\u7f13\u5b58cellStyle \u6bcf\u6b21\u90fd\u521b\u5efa\r\npublic class SalaryExportCellWriteHandler implements CellWriteHandler {\r\n\r\n    /**\r\n     * \u5bfc\u51fa\u9700\u8981\u8bbe\u7f6e\u5355\u5143\u683c\u4e3a\u767e\u5206\u6570\u7684\u5b57\u6bb5\r\n     */\r\n    private static List<String> percentCellTypeList = Lists.newArrayList(\"lastYearAprilSalaryRatio\", \"lastYearSpecialSalaryRatio\", \"thisYearQ1SalaryRatio\", \"basicAdjustRatio\", \"flexibleAdjustRatio\", \"recommendedAnnualSalaryIncreasedRatio\");\r\n    \r\n    @Override\r\n    public void beforeCellCreate(WriteSheetHolder writeSheetHolder, WriteTableHolder writeTableHolder, Row row, Head head, Integer columnIndex, Integer relativeRowIndex, Boolean isHead) {\r\n    }\r\n\r\n    @Override\r\n    public void afterCellCreate(WriteSheetHolder writeSheetHolder, WriteTableHolder writeTableHolder, Cell cell, Head head, Integer relativeRowIndex, Boolean isHead) {\r\n    }\r\n\r\n    @Override\r\n    public void afterCellDispose(WriteSheetHolder writeSheetHolder, WriteTableHolder writeTableHolder, List<CellData> cellDataList, Cell cell, Head head, Integer relativeRowIndex, Boolean isHead) {\r\n        if (!isHead) {\r\n            CellStyle cellStyle = writeSheetHolder.getSheet().getWorkbook().createCellStyle();\r\n            // \u8bbe\u7f6e\u767e\u5206\u6bd4\u5355\u5143\u683c\u683c\u5f0f\r\n            if (percentCellTypeList.contains(head.getFieldName())) {\r\n                cellStyle.setDataFormat(HSSFDataFormat.getBuiltinFormat(\"0.00%\"));\r\n            } else {\r\n                cellStyle.setDataFormat(HSSFDataFormat.getBuiltinFormat(\"General\"));\r\n            }\r\n            cell.setCellStyle(cellStyle);\r\n        }\r\n    }\r\n}\r\n\r\n```\r\n**\u5f02\u5e38\u63d0\u793a**\r\n\u8bf7\u63d0\u4f9b\u5b8c\u6574\u7684\u5f02\u5e38\u63d0\u793a,\u8bb0\u4f4f\u662f\u5168\u90e8\u5f02\u5e38\uff01\r\n**\u5efa\u8bae\u63cf\u8ff0**\r\n\u5982\u679c\u662f\u6309\u7167\u4e0a\u9762\u7684\u65b9\u5f0f\u628acellStyle\u7f13\u5b58\u8d77\u6765\u7684\u8bdd\u8bbe\u7f6e\u7684\u5355\u5143\u683c\u683c\u5f0f\u65e0\u6548\uff0c\u4f46\u662f\u50cf\u4e0b\u9762\u8fd9\u6837\u6bcf\u6b21\u90fd\u521b\u5efa\u4e00\u4e2acellStyle\u662f\u6709\u6548\u7684\uff0c\u9ebb\u70e6\u8bf7\u6559\u4e0b\u662f\u4ec0\u4e48\u539f\u56e0\uff1f\r\nps: \u4e0a\u9762\u90a3\u79cddebug\u7684\u65f6\u5019\u662f\u8fdb\u53bb\u7684\uff0c\u4f46\u662f\u5c31\u662f\u65e0\u6548"
    },
    "satisfaction_conditions": [
      "Cell formatting styles must be correctly applied and persist in the final Excel output",
      "Cell styles must not be overridden by other style handlers",
      "Style application must work consistently across all relevant cells",
      "Different cell formats must coexist without conflicts",
      "Style handler must integrate properly with EasyExcel's handler chain"
    ],
    "created_at": "2020-03-12T13:29:01Z"
  },
  {
    "id": "https://github.com/alibaba/easyexcel/issues/644",
    "source": {
      "issue_number": 644
    },
    "initial_question": {
      "title": "\u8bbe\u7f6e\u67d0\u4e00\u5217\u7684\u5b57\u4f53\u4e3a\u7ea2\u8272",
      "body": "\u8fd9\u91cc\u4f7f\u7528\u62e6\u622a\u5668\u5b9e\u73b0\u7b2c\u4e00\u5217(\u8868\u5934\u5217\u9664\u5916)\u5185\u5bb9\u7684\u5b57\u4f53\u4e3a\u7ea2\u8272\r\n\r\n```\r\n   public class FirstColRedWriteHandler implements CellWriteHandler {\r\n    @Override\r\n    public void beforeCellCreate(WriteSheetHolder writeSheetHolder, WriteTableHolder writeTableHolder, Row row, Head head, int relativeRowIndex, boolean isHead) {\r\n\r\n    }\r\n\r\n    @Override\r\n    public void afterCellCreate(WriteSheetHolder writeSheetHolder, WriteTableHolder writeTableHolder, CellData cellData, Cell cell, Head head, int relativeRowIndex, boolean isHead) {\r\n        if (!isHead && 0== cell.getColumnIndex()) {\r\n            // \u7b2c\u4e00\u5217\u663e\u793a\u7ea2\u8272\uff08\u8868\u5934\u5217\u9664\u5916\uff09\r\n            CellStyle cellStyle = cell.getCellStyle();\r\n            XSSFFont font = (XSSFFont) writeSheetHolder.getSheet().getWorkbook().createFont();\r\n            font.setColor(IndexedColors.RED.getIndex());\r\n            cellStyle.setFont(font);\r\n\r\n            cell.setCellStyle(cellStyle);\r\n        }\r\n    }\r\n}\r\n```\r\n\u4f7f\u7528\u8fd9\u4e2a\u81ea\u5b9a\u4e49\u62e6\u622a\u5668\r\n```\r\n EasyExcel.write(outputStream, Data.class)\r\n                .registerWriteHandler(new FirstColRedWriteHandler())\r\n                .sheet(fileName).doWrite(list);\r\n```\r\n\r\n\u5b9e\u9645\u751f\u6210\u7684\u6587\u4ef6\u6ca1\u6709\u7ea2\u8272\u5b57\u4f53\u7684\u6548\u679c\r\n"
    },
    "satisfaction_conditions": [
      "Header row must maintain its original font color",
      "Cell style changes must be limited to font color only"
    ],
    "created_at": "2019-09-26T11:46:47Z"
  },
  {
    "id": "https://github.com/alibaba/easyexcel/issues/3889",
    "source": {
      "issue_number": 3889
    },
    "initial_question": {
      "title": "ExcelProperty \u4f7f\u7528\u4e2dvalue \u503c\u65e0\u6cd5\u6307\u5b9a\u591a\u4e2a",
      "body": "\u8bfb\u53d6\u65f6\u503c\u4e3anull\r\n```java\r\n// \u8fd9\u662f\u5b9e\u4f53\u7c7b\r\npublic class BaseFloodREntity {\r\n        @Basic\r\n        @Column(name = \"TM\")\r\n        @ExcelProperty(value = \"TM\", converter = CustomStringTimestampConverter.class)\r\n        private Timestamp tm;\r\n\r\n        @Basic\r\n        @ExcelProperty(value = \"DATA_ID\")\r\n        @Column(name = \"DATA_ID\")\r\n        private String dataId;\r\n\r\n        @ExcelProperty(value = {\"\u503c\", \"V\"})\r\n        @Basic\r\n        @Column(name = \"v\")\r\n        private BigDecimal v;\r\n\r\n        @Basic\r\n        @Column(name = \"rscd\")\r\n        private String rscd;\r\n\r\n        @GeneratedValue(strategy = GenerationType.IDENTITY)\r\n        @Id\r\n        @Column(name = \"id\")\r\n        private int id;\r\n    }\r\n// \u8fd9\u662f\u8bfb\u53d6\u529f\u80fd\r\n baseFloodREntities = EasyExcel.read(file.getInputStream())\r\n                    .sheet()\r\n                    // \u81ea\u52a8\u68c0\u6d4b\u6807\u9898\u884c \u8df3\u8fc7\r\n                    .autoTrim(true)\r\n                    .head(BaseFloodREntity.class)\r\n                    .registerReadListener(new CustomListener(rscd))\r\n                    .doReadSync();\r\n// \u8fd9\u662f\u81ea\u5b9a\u4e49\u7684listener \r\npublic class CustomListener extends AnalysisEventListener<BaseFloodREntity> {\r\n\r\n    // \u5904\u7406excel\u4e2d\u9009\u5b9a\u6570\u636e\u7684rscd\r\n    private final String rscd;\r\n\r\n    @Override\r\n    public void onException(Exception exception, AnalysisContext context) throws Exception {\r\n        // \u5728\u8fd9\u91cc\u5904\u7406\u5f02\u5e38\u60c5\u51b5,\u6bd4\u5982\u5355\u5143\u683c\u4e3a\u7a7a\r\n        int rowIndex = context.readRowHolder().getRowIndex();\r\n        if (context.readRowHolder().getCellMap().containsValue(null)) {\r\n            // \u5982\u679c\u5f53\u524d\u884c\u6709\u4efb\u4f55\u5355\u5143\u683c\u4e3a null,\u5219\u5ffd\u7565\u8be5\u884c\r\n            log.warn(\"Row {} contains null value, skipping this row.\", rowIndex);\r\n            return;\r\n        }\r\n        // \u5176\u4ed6\u5f02\u5e38\u60c5\u51b5\u7684\u5904\u7406\u903b\u8f91\r\n    }\r\n\r\n    public CustomListener(String rscd) {\r\n        this.rscd = rscd;\r\n    }\r\n\r\n    @Override\r\n    public void invoke(BaseFloodREntity baseFloodREntity, AnalysisContext context) {\r\n\r\n        log.info(\"invoke\uff1a {}\", baseFloodREntity);\r\n        // \u8bbe\u7f6e rscd \u5b57\u6bb5\r\n        baseFloodREntity.setRscd(rscd);\r\n    }\r\n\r\n    @Override\r\n    public void doAfterAllAnalysed(AnalysisContext context) {\r\n        // \u5176\u4ed6\u540e\u5904\u7406\u903b\u8f91\r\n        log.info(\"\u6240\u6709\u6570\u636e\u89e3\u6790\u5b8c\u6210\uff01\");\r\n    }\r\n}\r\n# \u95ee\u9898\u63cf\u8ff0\r\n\u5728\u5b9e\u4f53\u7c7b\u4e2d\u53ef\u4ee5\u6307\u5b9a\u8868\u5934\u4e3a\u5927\u5c0f\u5199\u80fd\u8bfb\u53d6\uff0c\u6bd4\u5982@ExcelProperty(value = {\"v\", \"V\"})\u3002\u5982\u679c\u662f@ExcelProperty(value = {\"\u503c\", \"V\"})\u5219\u65e0\u6cd5\u8bfb\u53d6\u5230\u6570\u636e\uff0c\u5728listner\u4e2d\u7684invoke\u9636\u6bb5\u8bfb\u7684\u6570\u636e\u5c31\u4e3anull\u3002\u56e0\u4e3a\u6587\u6863\u4e2d\u6ca1\u770b\u5230\u662f\u5426\u80fd\u591f\u8fd9\u6837\u8bfb\u53d6\u8868\u5934\u6240\u4ee5\u63d0\u4ea4\u4e00\u4e2aissue\r\n\uff0c \u8c22\u8c22\u5927\u4f6c\u4eec\u5e2e\u5fd9\u89e3\u7b54."
    },
    "satisfaction_conditions": [
      "Non-null values must be read from Excel columns when headers match correctly",
      "Header matching must be case-sensitive"
    ],
    "created_at": "2024-07-17T03:17:57Z"
  },
  {
    "id": "https://github.com/alibaba/easyexcel/issues/3790",
    "source": {
      "issue_number": 3790
    },
    "initial_question": {
      "title": "\u8bf7\u95eedoRead\u65b9\u6cd5\u4e0d\u4f1a\u963b\u585e\u4e3b\u7ebf\u7a0b\uff0c\u5185\u90e8\u662f\u4f7f\u7528\u591a\u7ebf\u7a0b\u8bfb\u53d6excel\u884c\u7684\u8fd8\u662f\u5c31\u4e00\u4e2a\u72ec\u7acb\u4e8e\u4e3b\u7ebf\u7a0b\u7684\u5b50\u7ebf\u7a0b\u5728\u4ece\u4e0a\u5230\u4e0b\u8bfb\u53d6excel\uff1f",
      "body": null
    },
    "satisfaction_conditions": [
      "Excel file reading must be sequential, not concurrent",
      "Reading operation blocks the thread",
      "Performance optimization must be handled in post-processing",
      "Memory management must be considered for large datasets"
    ],
    "created_at": "2024-05-14T03:02:18Z"
  },
  {
    "id": "https://github.com/alibaba/easyexcel/issues/3248",
    "source": {
      "issue_number": 3248
    },
    "initial_question": {
      "title": "\u83b7\u53d6workbook\u4e2dsheet\u7684\u6570\u91cf",
      "body": "\u8c03\u7528doAfterAllAnalysed\u7684\u65f6\u5019\uff0c\u600e\u4e48\u901a\u8fc7\u53c2\u6570AnalysisContext context\u83b7\u53d6\u5230workbook\u603b\u5171\u6709\u591a\u5c11\u4e2asheet\u5440\u3002\u6211\u7528context.readWorkbookHolder().getActualSheetDataList()\u548ccontext.readSheetList()\u83b7\u53d6\u5230\u7684list\u90fd\u662fnull\r\n"
    },
    "satisfaction_conditions": [
      "Successfully retrieves total sheet count from Excel workbook",
      "Maintains memory efficiency"
    ],
    "created_at": "2023-06-05T06:03:57Z"
  },
  {
    "id": "https://github.com/alibaba/easyexcel/issues/2176",
    "source": {
      "issue_number": 2176
    },
    "initial_question": {
      "title": "com.alibaba.excel.exception.ExcelWriteDataConvertException: Convert data:1 return null, at row:1",
      "body": "\u73b0\u5728\u9700\u8981\u8f6c\u6362\u5b57\u5178\uff0c\u5b9a\u4e49\u4e86\u4e00\u4e2a\u81ea\u5b9a\u4e49\u8f6c\u6362\u5668\uff0c\u4e0b\u9762\u662f\u6211\u7684\u4ee3\u7801\r\n\r\n\r\n\r\n**\u5f02\u5e38\u4ee3\u7801**\r\n```java\r\n   package com.sportswin.soa.spark.contract.response;\r\n\r\nimport com.alibaba.excel.converters.Converter;\r\nimport com.alibaba.excel.enums.CellDataTypeEnum;\r\nimport com.alibaba.excel.metadata.GlobalConfiguration;\r\nimport com.alibaba.excel.metadata.data.WriteCellData;\r\nimport com.alibaba.excel.metadata.property.ExcelContentProperty;\r\nimport jodd.util.StringUtil;\r\nimport org.apache.commons.lang3.StringUtils;\r\n\r\nimport java.lang.reflect.Field;\r\n\r\n/**\r\n * easyexcel\u5173\u4e8e\u5bfc\u51fa\u7684\u5b57\u5178\u503c\u8f6c\u6362\r\n */\r\npublic class ExcelDictConverter implements Converter<Integer> {\r\n\r\n    private String[] dictCodIsYesNoArr = {\"maritalStatus\", \"\"};\r\n\r\n    @Override\r\n    public Class supportJavaTypeKey() {\r\n        return Integer.class;\r\n    }\r\n\r\n    @Override\r\n    public CellDataTypeEnum supportExcelTypeKey() {\r\n        return CellDataTypeEnum.STRING;\r\n    }\r\n\r\n    @Override\r\n    public WriteCellData<?> convertToExcelData(Integer dictKey, ExcelContentProperty excelContentProperty, GlobalConfiguration globalConfiguration) throws Exception {\r\n        // \u7c7b\u91cc\u9700\u8981\u8f6c\u6362\u7684\u5b57\u6bb5\r\n        Field field = excelContentProperty.getField();\r\n        String fieldName = field.getName();\r\n        String excelValue = \"\u672a\u77e5\";\r\n        // \u5b57\u5178\u503c\u4e3ayes_no\u7684\u5b57\u6bb5\r\n        if (StringUtils.equalsAnyIgnoreCase(fieldName, dictCodIsYesNoArr)) {\r\n            if (dictKey == 1) {\r\n                excelValue = \"\u672a\u5a5a\";\r\n            } else if (dictKey == 2) {\r\n                excelValue = \"\u79bb\u5f02\";\r\n            } else if (dictKey == 3) {\r\n                excelValue = \"\u4e27\u5076\";\r\n            } else {\r\n                excelValue = \"\u672a\u77e5\";\r\n            }\r\n        }\r\n        WriteCellData cellData = new WriteCellData();\r\n        cellData.setData(StringUtil.isBlank(excelValue) ? dictKey.toString() : excelValue);\r\n        return cellData;\r\n    }\r\n}\r\n```\r\n**\u5f02\u5e38\u63d0\u793a**\r\n\r\n`com.alibaba.excel.exception.ExcelWriteDataConvertException: Convert data:1 return null, at row:1\r\n`\r\n\r\n\r\n\u7248\u672c\uff1a  api group: 'com.alibaba', name: 'easyexcel', version: '3.0.3'\r\n\r\n\r\n**\u5efa\u8bae\u63cf\u8ff0**\r\n"
    },
    "satisfaction_conditions": [
      "The converter must return a non-null WriteCellData object",
      "The cell data type must be explicitly set to handle string values",
      "The WriteCellData object must have its value properly set",
      "The converter must handle all possible input integer values"
    ],
    "created_at": "2021-11-09T10:24:44Z"
  },
  {
    "id": "https://github.com/alibaba/easyexcel/issues/1390",
    "source": {
      "issue_number": 1390
    },
    "initial_question": {
      "title": "com.alibaba.excel.exception.ExcelAnalysisException: java.lang.NoClassDefFoundError: org/objectweb/asm/Type",
      "body": "\u8bf7\u95eeeasyexcel\u4f7f\u75282.2.3 version\uff0cpoi\u4f7f\u75283.17 version\u51fa\u73b0\u7c7b\u627e\u4e0d\u5230\u7684\u95ee\u9898\u600e\u4e48\u89e3\u51b3\r\ncom.alibaba.excel.exception.ExcelAnalysisException: java.lang.NoClassDefFoundError: org/objectweb/asm/Type"
    },
    "satisfaction_conditions": [
      "Dependency conflict between ASM versions must be resolved",
      "CGLIB dependency must be properly configured"
    ],
    "created_at": "2020-06-09T11:59:56Z"
  },
  {
    "id": "https://github.com/alibaba/easyexcel/issues/1387",
    "source": {
      "issue_number": 1387
    },
    "initial_question": {
      "title": "2.2.3 \u7248\u672c\u4e2d\u5220\u9664\u4e86AbstractMergeStrategy",
      "body": "\u6700\u65b0\u7248\u672c\u4e2d\u5220\u9664\u4e86AbstractMergeStrategy\uff0c\u662f\u6709\u5176\u4ed6\u65b9\u5f0f\u66f4\u597d\u7684\u652f\u6301\u52a8\u6001\u5355\u5143\u683c\u5408\u5e76\u5417\u3002\r\n\u5bfc\u51fa\u65f6\u9700\u8981\u6839\u636e\u6570\u636e\u6765\u786e\u8ba4\u9700\u8981\u5408\u5e76\u5355\u5143\u683c\u7684\u884c\u6570\u3002"
    },
    "satisfaction_conditions": [
      "Dynamic cell merging functionality is available",
      "Compatible version is used"
    ],
    "created_at": "2020-06-09T01:31:35Z"
  },
  {
    "id": "https://github.com/alibaba/easyexcel/issues/1119",
    "source": {
      "issue_number": 1119
    },
    "initial_question": {
      "title": "\u600e\u4e48\u628a\u4e0b\u8f7d\u7684\u6587\u4ef6\u8bbe\u7f6e\u4e3axlsx\u540e\u7f00\u540d",
      "body": "\u6309\u7167\u6587\u6863\u4e0a\u9762\u7684\u5199\u6cd5\r\nresponse.setHeader(\"Content-disposition\", \"attachment;filename=\" + fileName + \".xlsx\");\r\nEasyExcel.write(response.getOutputStream(), TraFreightInventoryResult.class).sheet(\"test\u5355\u636e\").doWrite(collectList);\r\n\r\n\u4f46\u662f\u5bfc\u51fa\u7684\u6587\u4ef6\u90fd\u662fxls\u7684\uff0c\u800c\u975exlsx\uff0c\u6240\u4ee5\u7528office\u6253\u5f00\u4f1a\u62a5\u9519\uff0c\u8bf7\u95ee\u6211\u8981\u600e\u4e48\u8bbe\u7f6e\u624d\u80fd\u628a\u6587\u4ef6\u7684\u540e\u7f00\u540d\u6539\u6210xlsx\u5462"
    },
    "satisfaction_conditions": [
      "Exported file must have .xlsx extension",
      "File must be in XLSX format internally",
      "File must be downloadable through browser",
      "Generated Excel file must contain the specified data"
    ],
    "created_at": "2020-02-27T07:40:46Z"
  },
  {
    "id": "https://github.com/alibaba/easyexcel/issues/912",
    "source": {
      "issue_number": 912
    },
    "initial_question": {
      "title": "easyexcle\uff08\u6216\u8005poi\uff09 \u5bfc\u51fa\u6570\u636e\u6709\u6ca1\u6709\u591a\u7ebf\u7a0b\u7684\u6a21\u5f0f\uff1f\uff1f\uff1f",
      "body": "\r\neasyexcle\uff08\u6216\u8005poi\uff09 \u5bfc\u51fa\u6570\u636e\u6709\u6ca1\u6709\u591a\u7ebf\u7a0b\u7684\u6a21\u5f0f\uff1f\uff1f\uff1f\r\n\u81ea\u5df1\u521b\u5efa\u591a\u4e2a\u7ebf\u7a0b\uff0c\u5c06\u6570\u636e\u62c6\u5206\uff0c\u5bfc\u51fa\u591a\u4e2a\u4e34\u65f6\u7684excle\uff0c\u518d\u4e34\u65f6\u7684excle\u5408\u5e76\uff0c\u8fd9\u79cd\u6a21\u5f0f\u662f\u5426\u771f\u7684\u80fd\u63d0\u5347\u6027\u80fd\uff1f\u5b58\u5728\u4ec0\u4e48\u95ee\u9898\u3002 \u53ef\u4ee5\u5e2e\u5fd9\u89e3\u7b54\u4e00\u4e0b\u4e48\u3002"
    },
    "satisfaction_conditions": [
      "Performance impact must be properly evaluated",
      "Database query optimization should be prioritized",
      "Resource utilization must be efficient",
      "Framework compatibility must be verified"
    ],
    "created_at": "2019-11-28T15:57:44Z"
  },
  {
    "id": "https://github.com/alibaba/easyexcel/issues/903",
    "source": {
      "issue_number": 903
    },
    "initial_question": {
      "title": "cell\u5bf9\u90e8\u5206\u6587\u672c\u6dfb\u52a0\u6837\u5f0f\u95ee\u9898",
      "body": "**\u5f02\u5e38\u4ee3\u7801**\r\n```java\r\n\r\n  public class HighlightCellWriteHandler implements CellWriteHandler {\r\n\r\n   \r\n    @Override\r\n    public void beforeCellCreate(WriteSheetHolder writeSheetHolder, WriteTableHolder writeTableHolder, Row row,\r\n                                 Head head, Integer columnIndex, Integer relativeRowIndex, Boolean isHead) {\r\n    }\r\n\r\n    @Override\r\n    public void afterCellCreate(WriteSheetHolder writeSheetHolder, WriteTableHolder writeTableHolder, Cell cell,\r\n                                Head head, Integer relativeRowIndex, Boolean isHead) {\r\n    }\r\n\r\n    @Override\r\n    public void afterCellDispose(WriteSheetHolder writeSheetHolder, WriteTableHolder writeTableHolder,\r\n                                 List<CellData> cellDataList, Cell cell, Head head, Integer relativeRowIndex, Boolean isHead) {\r\n\r\n        if (!isHead && cell.getColumnIndex() == 0) {\r\n             String value = cell.getStringCellValue();\r\n             Workbook workbook = writeSheetHolder.getSheet().getWorkbook();\r\n             Font ftRed = workbook.createFont();\r\n             ftRed.setColor(HSSFColor.RED.index);\r\n             Font ftGreen = workbook.createFont();\r\n             ftRed.setColor(HSSFColor.GREEN.index);\r\n             XSSFRichTextString textString = new XSSFRichTextString(value);\r\n             textString.applyFont(0,textString.length()/2,ftRed);\r\n             textString.applyFont(textString.length()/2,textString.length(),ftGreen); \r\n             cell.setCellValue(textString);\r\n            }\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n\r\n\u5bf9cell\u7684\u6587\u672c \u8bbe\u7f6e\u5b57\u4f53\u989c\u8272\u65e0\u6548\uff0c\u8bf7\u95ee\u5e94\u8be5\u600e\u4e48\u5904\u7406\uff0c\u56e0\u4e3a\u662f\u8981\u5bf9\u6587\u672c\u90e8\u5206\u6587\u5b57\u52a0\u6837\u5f0f\uff0c\u6240\u4ee5\u4e0d\u7528setCellStyle"
    },
    "satisfaction_conditions": [
      "Excel export must be configured to support rich text features",
      "Partial text formatting must work without affecting cell-level styles"
    ],
    "created_at": "2019-11-27T08:14:14Z"
  },
  {
    "id": "https://github.com/alibaba/easyexcel/issues/877",
    "source": {
      "issue_number": 877
    },
    "initial_question": {
      "title": "web\u91cd\u590d\u591a\u6b21\u5199\u5165\uff0c\u5bfc\u51fa\u7684excel\u4e0d\u80fd\u6b63\u5e38\u6253\u5f00\uff0c\u63d0\u793a\u201d\u90e8\u5206\u5185\u5bb9\u6709\u95ee\u9898\u201c",
      "body": "\u89e6\u53d1\u573a\u666f\u63cf\u8ff0\r\nweb\u5bfc\u51fa\uff0c\u53c2\u8003demo\u91cd\u590d\u591a\u6b21\u5199\u5165\uff0c\u4e3a\u4e86\u5728\u53d1\u751f\u5f02\u5e38\u65f6\u80fd\u591f\u8fd4\u56dejson\u683c\u5f0f\u7684\u9519\u8bef\u4fe1\u606f\uff0c\u8bbe\u7f6e\u4e86autoCloseStream(Boolean.FALSE)\u4e0d\u5173\u95ed\u6d41\u3002\r\n\u5bfc\u51fa\u65f6\u65e0\u4efb\u4f55\u5f02\u5e38\u4fe1\u606f\uff0c\u4f46\u5bfc\u51fa\u7684\u6587\u4ef6\u65e0\u6cd5\u6b63\u5e38\u6253\u5f00\uff0c\u63d0\u793a\uff1a\u53d1\u73b0\u201cxxx.xlsx\u201d\u4e2d\u7684\u90e8\u5206\u5185\u5bb9\u6709\u95ee\u9898\u3002\r\n\u89e6\u53d1Bug\u7684\u4ee3\u7801\r\nautoCloseStream(Boolean.FALSE)\r\n\u5982\u679c\u4e0d\u8bbe\u7f6e\u8fd9\u884c\u4ee3\u7801\uff0c\u5bfc\u51fa\u7684\u6587\u4ef6\u53ef\u4ee5\u6b63\u5e38\u6253\u5f00\u3002\r\n"
    },
    "satisfaction_conditions": [
      "Excel file must be generated in a valid, openable format",
      "Data must be written completely before stream closure",
      "Response headers must be properly set before data streaming",
      "Resources must be properly managed throughout the export process"
    ],
    "created_at": "2019-11-21T08:04:15Z"
  },
  {
    "id": "https://github.com/alibaba/easyexcel/issues/866",
    "source": {
      "issue_number": 866
    },
    "initial_question": {
      "title": "\u4e8b\u52a1\u95ee\u9898\uff0c\u5982\u4f55\u4fdd\u8bc1\u6574\u4e2a\u6587\u4ef6\u5199\u5165\u6216\u90fd\u4e0d\u5199\u5165\u6570\u636e\u5e93",
      "body": "\u5982\u679c\u6587\u4ef6\u5728\u8bfb\u53d6\u8fc7\u7a0b\u4e2d\uff0c\u67d0\u6761\u8bb0\u5f55\u6821\u9a8c\u5931\u8d25\u629b\u51fa\u5f02\u5e38\uff0c\u5df2\u7ecf\u5199\u5165\u6570\u636e\u5e93\u7684\u8bb0\u5f55\u5982\u4f55\u56de\u6eda\u5462\uff1f\r\n"
    },
    "satisfaction_conditions": [
      "Transaction atomicity is maintained across all database operations",
      "Failed validation triggers complete rollback",
      "Exception handling mechanism exists for validation failures",
      "File processing scope is treated as one transaction unit"
    ],
    "created_at": "2019-11-20T07:52:04Z"
  },
  {
    "id": "https://github.com/alibaba/easyexcel/issues/650",
    "source": {
      "issue_number": 650
    },
    "initial_question": {
      "title": "\u65e0\u6cd5\u8bfb\u53d6excel\u8868\u5934\u6570\u636e",
      "body": "**\u5f02\u5e38\u4ee3\u7801**\r\n```java\r\n   ExcelListener excelListener = new ExcelListener();\r\n   excelReader = EasyExcel.read(in,null,excelListener).build();\r\n   excelReader.read();\r\n\r\n   AnalysisEventListener\u7684invoke\u65b9\u6cd5\u5982\u4e0b\uff1a\r\n   ReadSheetHolder readSheetHolder = analysisContext.readSheetHolder();\r\n        String sheetName = readSheetHolder.getSheetName();\r\n        if(Objects.isNull(o) || ((HashMap) o).size() == 0){\r\n            return;\r\n        }\r\n        if(map.containsKey(sheetName)){\r\n            map.get(sheetName).add(o);\r\n        }else {\r\n            List<Object> objectList = new ArrayList<>();\r\n            objectList.add(o);\r\n            map.put(sheetName,objectList);\r\n        }\r\n```\r\n**\u5f02\u5e38\u63d0\u793a**\r\n\u65e0\u5f02\u5e38\uff0c\u89e3\u6790\u7684\u6570\u636e\uff0c\u5bf9\u8c61o\u65e0\u8868\u5934\u4e2d\u6587\u6570\u636e\r\n**\u5efa\u8bae\u63cf\u8ff0**\r\n"
    },
    "satisfaction_conditions": [
      "Sheet data structure must maintain header-to-data mapping",
      "Multi-sheet processing must be supported"
    ],
    "created_at": "2019-09-27T09:11:44Z"
  },
  {
    "id": "https://github.com/alibaba/easyexcel/issues/574",
    "source": {
      "issue_number": 574
    },
    "initial_question": {
      "title": "\u8bf7\u95ee\u4e0b\uff0c\u4e3a\u4ec0\u4e48\u8bfb\u5b8c\u6587\u4ef6\u540e\uff0c\u6587\u4ef6\u7684\u4fee\u6539\u65e5\u671f\u4f1a\u53d8\uff1f",
      "body": "**\u5f02\u5e38\u4ee3\u7801**\r\n\u4f7f\u7528\u7684\u8bfb\u4ee3\u7801\u5982\u4e0b\uff1a\r\n```java\r\n   EasyExcel.read(filePath, listener).sheet(0).doRead()\r\n```\r\n**\u5f02\u5e38\u63d0\u793a**\r\n\u4f7f\u7528\u5b8c\u5168\u6b63\u5e38\uff0c\u6587\u4ef6\u5927\u5c0f\u7684\u5b57\u8282\u6570\u4e5f\u5b8c\u5168\u4e00\u6837\uff0c\u5c31\u662f\u5f88\u597d\u5947\uff0c\u4e3a\u4ec0\u4e48\u660e\u660e\u662f\u8bfb\u6587\u4ef6\uff0c\u4f46\u662f\u6587\u4ef6\u7684\u4fee\u6539\u65f6\u95f4\u4f1a\u53d8\uff1b\u6b64\u5904\u4fee\u6539\u65f6\u95f4\u6307\u7684\u662f  windows \u6587\u4ef6\u5939\u4e2d \u4fee\u6539\u65e5\u671f  \u8fd9\u4e00\u5217\r\n**\u5efa\u8bae\u63cf\u8ff0**\r\n"
    },
    "satisfaction_conditions": [
      "File content integrity is maintained",
      "Excel file format compatibility"
    ],
    "created_at": "2019-09-12T01:37:21Z"
  },
  {
    "id": "https://github.com/alibaba/easyexcel/issues/535",
    "source": {
      "issue_number": 535
    },
    "initial_question": {
      "title": "\u5982\u4f55\u5728Listener\u4e2d\u6355\u83b7\u5f02\u5e38\uff0c\u5e76\u8fd4\u56de\u7ed9\u8c03\u7528\u7aef",
      "body": "\u6211\u5728\u76d1\u542c\u5668Listener\u4e2d\u7684\u4ee3\u7801\u5982\u4e0b\uff1a\r\n**\u5f02\u5e38\u4ee3\u7801**\r\n```java\r\n   \tprivate List<ExcelImportTestBean> datas = new ArrayList<ExcelImportTestBean>();\r\n\r\n\t@Override\r\n\tpublic void onException(Exception exception, AnalysisContext context) throws Exception {\r\n\t\tSystem.out.println(\"\u6709\u5f02\u5e38\");\r\n\t\tthrow exception;\r\n\t}\r\n\r\n\t@Override\r\n\tpublic void invoke(ExcelImportTestBean data, AnalysisContext context) {\r\n\t\tLOGGER.info(\"\u89e3\u6790\u5230\u4e00\u6761\u6570\u636e:{}\", JSON.toJSONString(data));\r\n\t\t// \u9a8c\u8bc1\u624b\u673a\u53f7\u7801\u683c\u5f0f\r\n\t\tif (!isMobile(data.getCellPhone())) {\r\n\t\t\ttry {\r\n\t\t\t\tthrow new Exception(String.format(\"\u6570\u636e\uff1a%s \u624b\u673a\u53f7\u7801\u683c\u5f0f\u4e0d\u5bf9\", data.getCellPhone()));\r\n\t\t\t} catch (Exception e) {\r\n\t\t\t\te.printStackTrace();\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tdatas.add(data);\r\n\t}\r\n```\r\n\u4e3a\u4ec0\u4e48\u6211\u5728invoke\u51fd\u6570\u4e2d\u81ea\u5df1\u629b\u51fa\u7684\u5f02\u5e38\u201c\u624b\u673a\u53f7\u7801\u683c\u5f0f\u4e0d\u5bf9\u201d\uff0c\u5e76\u6ca1\u6709\u88abonException\u51fd\u6570\u6355\u83b7\u5230\u5462\uff1f\u6211\u7528\u7684EasyExcel\u7248\u672c\u662f2.0.0-beta3\u3002\r\n"
    },
    "satisfaction_conditions": [
      "Exception propagation from Listener to calling code must be successful",
      "Custom validation exceptions must be properly captured by exception handling mechanism",
      "Original exception message must be preserved",
      "Exception handling must be compatible with EasyExcel's architecture"
    ],
    "created_at": "2019-09-03T23:40:16Z"
  }
]